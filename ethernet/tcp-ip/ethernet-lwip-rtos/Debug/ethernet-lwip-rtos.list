
ethernet-lwip-rtos.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00010140  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00002a58  080102f0  080102f0  000202f0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08012d48  08012d48  00030090  2**0
                  CONTENTS
  4 .ARM          00000008  08012d48  08012d48  00022d48  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08012d50  08012d50  00030090  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08012d50  08012d50  00022d50  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08012d54  08012d54  00022d54  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000090  20000000  08012d58  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00030090  2**0
                  CONTENTS
 10 .bss          000109f0  20000090  20000090  00030090  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20010a80  20010a80  00030090  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00030090  2**0
                  CONTENTS, READONLY
 13 .debug_info   0004c24d  00000000  00000000  000300c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00009990  00000000  00000000  0007c30d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_loc    00031e15  00000000  00000000  00085c9d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00002528  00000000  00000000  000b7ab8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_ranges 00003380  00000000  00000000  000b9fe0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  000130eb  00000000  00000000  000bd360  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   0004bcfd  00000000  00000000  000d044b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    001036ed  00000000  00000000  0011c148  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .comment      00000050  00000000  00000000  0021f835  2**0
                  CONTENTS, READONLY
 22 .debug_frame  000078f4  00000000  00000000  0021f888  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20000090 	.word	0x20000090
 80001cc:	00000000 	.word	0x00000000
 80001d0:	080102d8 	.word	0x080102d8

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	20000094 	.word	0x20000094
 80001ec:	080102d8 	.word	0x080102d8

080001f0 <strlen>:
 80001f0:	4603      	mov	r3, r0
 80001f2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001f6:	2a00      	cmp	r2, #0
 80001f8:	d1fb      	bne.n	80001f2 <strlen+0x2>
 80001fa:	1a18      	subs	r0, r3, r0
 80001fc:	3801      	subs	r0, #1
 80001fe:	4770      	bx	lr

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_uldivmod>:
 80002a0:	b953      	cbnz	r3, 80002b8 <__aeabi_uldivmod+0x18>
 80002a2:	b94a      	cbnz	r2, 80002b8 <__aeabi_uldivmod+0x18>
 80002a4:	2900      	cmp	r1, #0
 80002a6:	bf08      	it	eq
 80002a8:	2800      	cmpeq	r0, #0
 80002aa:	bf1c      	itt	ne
 80002ac:	f04f 31ff 	movne.w	r1, #4294967295
 80002b0:	f04f 30ff 	movne.w	r0, #4294967295
 80002b4:	f000 b974 	b.w	80005a0 <__aeabi_idiv0>
 80002b8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002bc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002c0:	f000 f806 	bl	80002d0 <__udivmoddi4>
 80002c4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002c8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002cc:	b004      	add	sp, #16
 80002ce:	4770      	bx	lr

080002d0 <__udivmoddi4>:
 80002d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002d4:	9d08      	ldr	r5, [sp, #32]
 80002d6:	4604      	mov	r4, r0
 80002d8:	468e      	mov	lr, r1
 80002da:	2b00      	cmp	r3, #0
 80002dc:	d14d      	bne.n	800037a <__udivmoddi4+0xaa>
 80002de:	428a      	cmp	r2, r1
 80002e0:	4694      	mov	ip, r2
 80002e2:	d969      	bls.n	80003b8 <__udivmoddi4+0xe8>
 80002e4:	fab2 f282 	clz	r2, r2
 80002e8:	b152      	cbz	r2, 8000300 <__udivmoddi4+0x30>
 80002ea:	fa01 f302 	lsl.w	r3, r1, r2
 80002ee:	f1c2 0120 	rsb	r1, r2, #32
 80002f2:	fa20 f101 	lsr.w	r1, r0, r1
 80002f6:	fa0c fc02 	lsl.w	ip, ip, r2
 80002fa:	ea41 0e03 	orr.w	lr, r1, r3
 80002fe:	4094      	lsls	r4, r2
 8000300:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000304:	0c21      	lsrs	r1, r4, #16
 8000306:	fbbe f6f8 	udiv	r6, lr, r8
 800030a:	fa1f f78c 	uxth.w	r7, ip
 800030e:	fb08 e316 	mls	r3, r8, r6, lr
 8000312:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000316:	fb06 f107 	mul.w	r1, r6, r7
 800031a:	4299      	cmp	r1, r3
 800031c:	d90a      	bls.n	8000334 <__udivmoddi4+0x64>
 800031e:	eb1c 0303 	adds.w	r3, ip, r3
 8000322:	f106 30ff 	add.w	r0, r6, #4294967295
 8000326:	f080 811f 	bcs.w	8000568 <__udivmoddi4+0x298>
 800032a:	4299      	cmp	r1, r3
 800032c:	f240 811c 	bls.w	8000568 <__udivmoddi4+0x298>
 8000330:	3e02      	subs	r6, #2
 8000332:	4463      	add	r3, ip
 8000334:	1a5b      	subs	r3, r3, r1
 8000336:	b2a4      	uxth	r4, r4
 8000338:	fbb3 f0f8 	udiv	r0, r3, r8
 800033c:	fb08 3310 	mls	r3, r8, r0, r3
 8000340:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000344:	fb00 f707 	mul.w	r7, r0, r7
 8000348:	42a7      	cmp	r7, r4
 800034a:	d90a      	bls.n	8000362 <__udivmoddi4+0x92>
 800034c:	eb1c 0404 	adds.w	r4, ip, r4
 8000350:	f100 33ff 	add.w	r3, r0, #4294967295
 8000354:	f080 810a 	bcs.w	800056c <__udivmoddi4+0x29c>
 8000358:	42a7      	cmp	r7, r4
 800035a:	f240 8107 	bls.w	800056c <__udivmoddi4+0x29c>
 800035e:	4464      	add	r4, ip
 8000360:	3802      	subs	r0, #2
 8000362:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000366:	1be4      	subs	r4, r4, r7
 8000368:	2600      	movs	r6, #0
 800036a:	b11d      	cbz	r5, 8000374 <__udivmoddi4+0xa4>
 800036c:	40d4      	lsrs	r4, r2
 800036e:	2300      	movs	r3, #0
 8000370:	e9c5 4300 	strd	r4, r3, [r5]
 8000374:	4631      	mov	r1, r6
 8000376:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800037a:	428b      	cmp	r3, r1
 800037c:	d909      	bls.n	8000392 <__udivmoddi4+0xc2>
 800037e:	2d00      	cmp	r5, #0
 8000380:	f000 80ef 	beq.w	8000562 <__udivmoddi4+0x292>
 8000384:	2600      	movs	r6, #0
 8000386:	e9c5 0100 	strd	r0, r1, [r5]
 800038a:	4630      	mov	r0, r6
 800038c:	4631      	mov	r1, r6
 800038e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000392:	fab3 f683 	clz	r6, r3
 8000396:	2e00      	cmp	r6, #0
 8000398:	d14a      	bne.n	8000430 <__udivmoddi4+0x160>
 800039a:	428b      	cmp	r3, r1
 800039c:	d302      	bcc.n	80003a4 <__udivmoddi4+0xd4>
 800039e:	4282      	cmp	r2, r0
 80003a0:	f200 80f9 	bhi.w	8000596 <__udivmoddi4+0x2c6>
 80003a4:	1a84      	subs	r4, r0, r2
 80003a6:	eb61 0303 	sbc.w	r3, r1, r3
 80003aa:	2001      	movs	r0, #1
 80003ac:	469e      	mov	lr, r3
 80003ae:	2d00      	cmp	r5, #0
 80003b0:	d0e0      	beq.n	8000374 <__udivmoddi4+0xa4>
 80003b2:	e9c5 4e00 	strd	r4, lr, [r5]
 80003b6:	e7dd      	b.n	8000374 <__udivmoddi4+0xa4>
 80003b8:	b902      	cbnz	r2, 80003bc <__udivmoddi4+0xec>
 80003ba:	deff      	udf	#255	; 0xff
 80003bc:	fab2 f282 	clz	r2, r2
 80003c0:	2a00      	cmp	r2, #0
 80003c2:	f040 8092 	bne.w	80004ea <__udivmoddi4+0x21a>
 80003c6:	eba1 010c 	sub.w	r1, r1, ip
 80003ca:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003ce:	fa1f fe8c 	uxth.w	lr, ip
 80003d2:	2601      	movs	r6, #1
 80003d4:	0c20      	lsrs	r0, r4, #16
 80003d6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003da:	fb07 1113 	mls	r1, r7, r3, r1
 80003de:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003e2:	fb0e f003 	mul.w	r0, lr, r3
 80003e6:	4288      	cmp	r0, r1
 80003e8:	d908      	bls.n	80003fc <__udivmoddi4+0x12c>
 80003ea:	eb1c 0101 	adds.w	r1, ip, r1
 80003ee:	f103 38ff 	add.w	r8, r3, #4294967295
 80003f2:	d202      	bcs.n	80003fa <__udivmoddi4+0x12a>
 80003f4:	4288      	cmp	r0, r1
 80003f6:	f200 80cb 	bhi.w	8000590 <__udivmoddi4+0x2c0>
 80003fa:	4643      	mov	r3, r8
 80003fc:	1a09      	subs	r1, r1, r0
 80003fe:	b2a4      	uxth	r4, r4
 8000400:	fbb1 f0f7 	udiv	r0, r1, r7
 8000404:	fb07 1110 	mls	r1, r7, r0, r1
 8000408:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800040c:	fb0e fe00 	mul.w	lr, lr, r0
 8000410:	45a6      	cmp	lr, r4
 8000412:	d908      	bls.n	8000426 <__udivmoddi4+0x156>
 8000414:	eb1c 0404 	adds.w	r4, ip, r4
 8000418:	f100 31ff 	add.w	r1, r0, #4294967295
 800041c:	d202      	bcs.n	8000424 <__udivmoddi4+0x154>
 800041e:	45a6      	cmp	lr, r4
 8000420:	f200 80bb 	bhi.w	800059a <__udivmoddi4+0x2ca>
 8000424:	4608      	mov	r0, r1
 8000426:	eba4 040e 	sub.w	r4, r4, lr
 800042a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800042e:	e79c      	b.n	800036a <__udivmoddi4+0x9a>
 8000430:	f1c6 0720 	rsb	r7, r6, #32
 8000434:	40b3      	lsls	r3, r6
 8000436:	fa22 fc07 	lsr.w	ip, r2, r7
 800043a:	ea4c 0c03 	orr.w	ip, ip, r3
 800043e:	fa20 f407 	lsr.w	r4, r0, r7
 8000442:	fa01 f306 	lsl.w	r3, r1, r6
 8000446:	431c      	orrs	r4, r3
 8000448:	40f9      	lsrs	r1, r7
 800044a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800044e:	fa00 f306 	lsl.w	r3, r0, r6
 8000452:	fbb1 f8f9 	udiv	r8, r1, r9
 8000456:	0c20      	lsrs	r0, r4, #16
 8000458:	fa1f fe8c 	uxth.w	lr, ip
 800045c:	fb09 1118 	mls	r1, r9, r8, r1
 8000460:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000464:	fb08 f00e 	mul.w	r0, r8, lr
 8000468:	4288      	cmp	r0, r1
 800046a:	fa02 f206 	lsl.w	r2, r2, r6
 800046e:	d90b      	bls.n	8000488 <__udivmoddi4+0x1b8>
 8000470:	eb1c 0101 	adds.w	r1, ip, r1
 8000474:	f108 3aff 	add.w	sl, r8, #4294967295
 8000478:	f080 8088 	bcs.w	800058c <__udivmoddi4+0x2bc>
 800047c:	4288      	cmp	r0, r1
 800047e:	f240 8085 	bls.w	800058c <__udivmoddi4+0x2bc>
 8000482:	f1a8 0802 	sub.w	r8, r8, #2
 8000486:	4461      	add	r1, ip
 8000488:	1a09      	subs	r1, r1, r0
 800048a:	b2a4      	uxth	r4, r4
 800048c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000490:	fb09 1110 	mls	r1, r9, r0, r1
 8000494:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000498:	fb00 fe0e 	mul.w	lr, r0, lr
 800049c:	458e      	cmp	lr, r1
 800049e:	d908      	bls.n	80004b2 <__udivmoddi4+0x1e2>
 80004a0:	eb1c 0101 	adds.w	r1, ip, r1
 80004a4:	f100 34ff 	add.w	r4, r0, #4294967295
 80004a8:	d26c      	bcs.n	8000584 <__udivmoddi4+0x2b4>
 80004aa:	458e      	cmp	lr, r1
 80004ac:	d96a      	bls.n	8000584 <__udivmoddi4+0x2b4>
 80004ae:	3802      	subs	r0, #2
 80004b0:	4461      	add	r1, ip
 80004b2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004b6:	fba0 9402 	umull	r9, r4, r0, r2
 80004ba:	eba1 010e 	sub.w	r1, r1, lr
 80004be:	42a1      	cmp	r1, r4
 80004c0:	46c8      	mov	r8, r9
 80004c2:	46a6      	mov	lr, r4
 80004c4:	d356      	bcc.n	8000574 <__udivmoddi4+0x2a4>
 80004c6:	d053      	beq.n	8000570 <__udivmoddi4+0x2a0>
 80004c8:	b15d      	cbz	r5, 80004e2 <__udivmoddi4+0x212>
 80004ca:	ebb3 0208 	subs.w	r2, r3, r8
 80004ce:	eb61 010e 	sbc.w	r1, r1, lr
 80004d2:	fa01 f707 	lsl.w	r7, r1, r7
 80004d6:	fa22 f306 	lsr.w	r3, r2, r6
 80004da:	40f1      	lsrs	r1, r6
 80004dc:	431f      	orrs	r7, r3
 80004de:	e9c5 7100 	strd	r7, r1, [r5]
 80004e2:	2600      	movs	r6, #0
 80004e4:	4631      	mov	r1, r6
 80004e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004ea:	f1c2 0320 	rsb	r3, r2, #32
 80004ee:	40d8      	lsrs	r0, r3
 80004f0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004f4:	fa21 f303 	lsr.w	r3, r1, r3
 80004f8:	4091      	lsls	r1, r2
 80004fa:	4301      	orrs	r1, r0
 80004fc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000500:	fa1f fe8c 	uxth.w	lr, ip
 8000504:	fbb3 f0f7 	udiv	r0, r3, r7
 8000508:	fb07 3610 	mls	r6, r7, r0, r3
 800050c:	0c0b      	lsrs	r3, r1, #16
 800050e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000512:	fb00 f60e 	mul.w	r6, r0, lr
 8000516:	429e      	cmp	r6, r3
 8000518:	fa04 f402 	lsl.w	r4, r4, r2
 800051c:	d908      	bls.n	8000530 <__udivmoddi4+0x260>
 800051e:	eb1c 0303 	adds.w	r3, ip, r3
 8000522:	f100 38ff 	add.w	r8, r0, #4294967295
 8000526:	d22f      	bcs.n	8000588 <__udivmoddi4+0x2b8>
 8000528:	429e      	cmp	r6, r3
 800052a:	d92d      	bls.n	8000588 <__udivmoddi4+0x2b8>
 800052c:	3802      	subs	r0, #2
 800052e:	4463      	add	r3, ip
 8000530:	1b9b      	subs	r3, r3, r6
 8000532:	b289      	uxth	r1, r1
 8000534:	fbb3 f6f7 	udiv	r6, r3, r7
 8000538:	fb07 3316 	mls	r3, r7, r6, r3
 800053c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000540:	fb06 f30e 	mul.w	r3, r6, lr
 8000544:	428b      	cmp	r3, r1
 8000546:	d908      	bls.n	800055a <__udivmoddi4+0x28a>
 8000548:	eb1c 0101 	adds.w	r1, ip, r1
 800054c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000550:	d216      	bcs.n	8000580 <__udivmoddi4+0x2b0>
 8000552:	428b      	cmp	r3, r1
 8000554:	d914      	bls.n	8000580 <__udivmoddi4+0x2b0>
 8000556:	3e02      	subs	r6, #2
 8000558:	4461      	add	r1, ip
 800055a:	1ac9      	subs	r1, r1, r3
 800055c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000560:	e738      	b.n	80003d4 <__udivmoddi4+0x104>
 8000562:	462e      	mov	r6, r5
 8000564:	4628      	mov	r0, r5
 8000566:	e705      	b.n	8000374 <__udivmoddi4+0xa4>
 8000568:	4606      	mov	r6, r0
 800056a:	e6e3      	b.n	8000334 <__udivmoddi4+0x64>
 800056c:	4618      	mov	r0, r3
 800056e:	e6f8      	b.n	8000362 <__udivmoddi4+0x92>
 8000570:	454b      	cmp	r3, r9
 8000572:	d2a9      	bcs.n	80004c8 <__udivmoddi4+0x1f8>
 8000574:	ebb9 0802 	subs.w	r8, r9, r2
 8000578:	eb64 0e0c 	sbc.w	lr, r4, ip
 800057c:	3801      	subs	r0, #1
 800057e:	e7a3      	b.n	80004c8 <__udivmoddi4+0x1f8>
 8000580:	4646      	mov	r6, r8
 8000582:	e7ea      	b.n	800055a <__udivmoddi4+0x28a>
 8000584:	4620      	mov	r0, r4
 8000586:	e794      	b.n	80004b2 <__udivmoddi4+0x1e2>
 8000588:	4640      	mov	r0, r8
 800058a:	e7d1      	b.n	8000530 <__udivmoddi4+0x260>
 800058c:	46d0      	mov	r8, sl
 800058e:	e77b      	b.n	8000488 <__udivmoddi4+0x1b8>
 8000590:	3b02      	subs	r3, #2
 8000592:	4461      	add	r1, ip
 8000594:	e732      	b.n	80003fc <__udivmoddi4+0x12c>
 8000596:	4630      	mov	r0, r6
 8000598:	e709      	b.n	80003ae <__udivmoddi4+0xde>
 800059a:	4464      	add	r4, ip
 800059c:	3802      	subs	r0, #2
 800059e:	e742      	b.n	8000426 <__udivmoddi4+0x156>

080005a0 <__aeabi_idiv0>:
 80005a0:	4770      	bx	lr
 80005a2:	bf00      	nop

080005a4 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 80005a4:	b508      	push	{r3, lr}
  /* init code for LWIP */
  MX_LWIP_Init();
 80005a6:	f002 fdb7 	bl	8003118 <MX_LWIP_Init>
  /* USER CODE BEGIN 5 */
  tcpserver_init();
 80005aa:	f000 fb5b 	bl	8000c64 <tcpserver_init>
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 80005ae:	2401      	movs	r4, #1
 80005b0:	4620      	mov	r0, r4
 80005b2:	f003 f9eb 	bl	800398c <osDelay>
  for(;;)
 80005b6:	e7fb      	b.n	80005b0 <StartDefaultTask+0xc>

080005b8 <SystemClock_Config>:
{
 80005b8:	b500      	push	{lr}
 80005ba:	b095      	sub	sp, #84	; 0x54
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005bc:	2230      	movs	r2, #48	; 0x30
 80005be:	2100      	movs	r1, #0
 80005c0:	a808      	add	r0, sp, #32
 80005c2:	f00e fcfa 	bl	800efba <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005c6:	2300      	movs	r3, #0
 80005c8:	9303      	str	r3, [sp, #12]
 80005ca:	9304      	str	r3, [sp, #16]
 80005cc:	9305      	str	r3, [sp, #20]
 80005ce:	9306      	str	r3, [sp, #24]
 80005d0:	9307      	str	r3, [sp, #28]
  __HAL_RCC_PWR_CLK_ENABLE();
 80005d2:	9301      	str	r3, [sp, #4]
 80005d4:	4a20      	ldr	r2, [pc, #128]	; (8000658 <SystemClock_Config+0xa0>)
 80005d6:	6c11      	ldr	r1, [r2, #64]	; 0x40
 80005d8:	f041 5180 	orr.w	r1, r1, #268435456	; 0x10000000
 80005dc:	6411      	str	r1, [r2, #64]	; 0x40
 80005de:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80005e0:	f002 5280 	and.w	r2, r2, #268435456	; 0x10000000
 80005e4:	9201      	str	r2, [sp, #4]
 80005e6:	9a01      	ldr	r2, [sp, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80005e8:	9302      	str	r3, [sp, #8]
 80005ea:	4b1c      	ldr	r3, [pc, #112]	; (800065c <SystemClock_Config+0xa4>)
 80005ec:	681a      	ldr	r2, [r3, #0]
 80005ee:	f442 4240 	orr.w	r2, r2, #49152	; 0xc000
 80005f2:	601a      	str	r2, [r3, #0]
 80005f4:	681b      	ldr	r3, [r3, #0]
 80005f6:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80005fa:	9302      	str	r3, [sp, #8]
 80005fc:	9b02      	ldr	r3, [sp, #8]
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80005fe:	2301      	movs	r3, #1
 8000600:	9308      	str	r3, [sp, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000602:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8000606:	9309      	str	r3, [sp, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000608:	2302      	movs	r3, #2
 800060a:	930e      	str	r3, [sp, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800060c:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8000610:	920f      	str	r2, [sp, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000612:	2204      	movs	r2, #4
 8000614:	9210      	str	r2, [sp, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8000616:	22a8      	movs	r2, #168	; 0xa8
 8000618:	9211      	str	r2, [sp, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800061a:	9312      	str	r3, [sp, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 800061c:	2307      	movs	r3, #7
 800061e:	9313      	str	r3, [sp, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000620:	a808      	add	r0, sp, #32
 8000622:	f001 fd25 	bl	8002070 <HAL_RCC_OscConfig>
 8000626:	b998      	cbnz	r0, 8000650 <SystemClock_Config+0x98>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000628:	230f      	movs	r3, #15
 800062a:	9303      	str	r3, [sp, #12]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800062c:	2302      	movs	r3, #2
 800062e:	9304      	str	r3, [sp, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000630:	2300      	movs	r3, #0
 8000632:	9305      	str	r3, [sp, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000634:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000638:	9306      	str	r3, [sp, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800063a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800063e:	9307      	str	r3, [sp, #28]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000640:	2105      	movs	r1, #5
 8000642:	a803      	add	r0, sp, #12
 8000644:	f001 ff7a 	bl	800253c <HAL_RCC_ClockConfig>
 8000648:	b920      	cbnz	r0, 8000654 <SystemClock_Config+0x9c>
}
 800064a:	b015      	add	sp, #84	; 0x54
 800064c:	f85d fb04 	ldr.w	pc, [sp], #4
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000650:	b672      	cpsid	i
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000652:	e7fe      	b.n	8000652 <SystemClock_Config+0x9a>
 8000654:	b672      	cpsid	i
 8000656:	e7fe      	b.n	8000656 <SystemClock_Config+0x9e>
 8000658:	40023800 	.word	0x40023800
 800065c:	40007000 	.word	0x40007000

08000660 <main>:
{
 8000660:	b580      	push	{r7, lr}
 8000662:	b08c      	sub	sp, #48	; 0x30
  HAL_Init();
 8000664:	f000 fc24 	bl	8000eb0 <HAL_Init>
  SystemClock_Config();
 8000668:	f7ff ffa6 	bl	80005b8 <SystemClock_Config>
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800066c:	2400      	movs	r4, #0
 800066e:	9407      	str	r4, [sp, #28]
 8000670:	9408      	str	r4, [sp, #32]
 8000672:	9409      	str	r4, [sp, #36]	; 0x24
 8000674:	940a      	str	r4, [sp, #40]	; 0x28
 8000676:	940b      	str	r4, [sp, #44]	; 0x2c
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000678:	9401      	str	r4, [sp, #4]
 800067a:	4b55      	ldr	r3, [pc, #340]	; (80007d0 <main+0x170>)
 800067c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800067e:	f042 0204 	orr.w	r2, r2, #4
 8000682:	631a      	str	r2, [r3, #48]	; 0x30
 8000684:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000686:	f002 0204 	and.w	r2, r2, #4
 800068a:	9201      	str	r2, [sp, #4]
 800068c:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800068e:	9402      	str	r4, [sp, #8]
 8000690:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000692:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8000696:	631a      	str	r2, [r3, #48]	; 0x30
 8000698:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800069a:	f002 0280 	and.w	r2, r2, #128	; 0x80
 800069e:	9202      	str	r2, [sp, #8]
 80006a0:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80006a2:	9403      	str	r4, [sp, #12]
 80006a4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80006a6:	f042 0201 	orr.w	r2, r2, #1
 80006aa:	631a      	str	r2, [r3, #48]	; 0x30
 80006ac:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80006ae:	f002 0201 	and.w	r2, r2, #1
 80006b2:	9203      	str	r2, [sp, #12]
 80006b4:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80006b6:	9404      	str	r4, [sp, #16]
 80006b8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80006ba:	f042 0202 	orr.w	r2, r2, #2
 80006be:	631a      	str	r2, [r3, #48]	; 0x30
 80006c0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80006c2:	f002 0202 	and.w	r2, r2, #2
 80006c6:	9204      	str	r2, [sp, #16]
 80006c8:	9a04      	ldr	r2, [sp, #16]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80006ca:	9405      	str	r4, [sp, #20]
 80006cc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80006ce:	f042 0208 	orr.w	r2, r2, #8
 80006d2:	631a      	str	r2, [r3, #48]	; 0x30
 80006d4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80006d6:	f002 0208 	and.w	r2, r2, #8
 80006da:	9205      	str	r2, [sp, #20]
 80006dc:	9a05      	ldr	r2, [sp, #20]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80006de:	9406      	str	r4, [sp, #24]
 80006e0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80006e2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80006e6:	631a      	str	r2, [r3, #48]	; 0x30
 80006e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006ea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80006ee:	9306      	str	r3, [sp, #24]
 80006f0:	9b06      	ldr	r3, [sp, #24]
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 80006f2:	4f38      	ldr	r7, [pc, #224]	; (80007d4 <main+0x174>)
 80006f4:	4622      	mov	r2, r4
 80006f6:	f244 0181 	movw	r1, #16513	; 0x4081
 80006fa:	4638      	mov	r0, r7
 80006fc:	f001 fc1a 	bl	8001f34 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8000700:	4d35      	ldr	r5, [pc, #212]	; (80007d8 <main+0x178>)
 8000702:	4622      	mov	r2, r4
 8000704:	2140      	movs	r1, #64	; 0x40
 8000706:	4628      	mov	r0, r5
 8000708:	f001 fc14 	bl	8001f34 <HAL_GPIO_WritePin>
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 800070c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000710:	9307      	str	r3, [sp, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000712:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000716:	9308      	str	r3, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000718:	9409      	str	r4, [sp, #36]	; 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 800071a:	a907      	add	r1, sp, #28
 800071c:	482f      	ldr	r0, [pc, #188]	; (80007dc <main+0x17c>)
 800071e:	f001 faf5 	bl	8001d0c <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 8000722:	f244 0381 	movw	r3, #16513	; 0x4081
 8000726:	9307      	str	r3, [sp, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000728:	2601      	movs	r6, #1
 800072a:	9608      	str	r6, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800072c:	9409      	str	r4, [sp, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800072e:	940a      	str	r4, [sp, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000730:	a907      	add	r1, sp, #28
 8000732:	4638      	mov	r0, r7
 8000734:	f001 faea 	bl	8001d0c <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8000738:	2340      	movs	r3, #64	; 0x40
 800073a:	9307      	str	r3, [sp, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800073c:	9608      	str	r6, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800073e:	9409      	str	r4, [sp, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000740:	940a      	str	r4, [sp, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000742:	a907      	add	r1, sp, #28
 8000744:	4628      	mov	r0, r5
 8000746:	f001 fae1 	bl	8001d0c <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 800074a:	2380      	movs	r3, #128	; 0x80
 800074c:	9307      	str	r3, [sp, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800074e:	9408      	str	r4, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000750:	9409      	str	r4, [sp, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000752:	a907      	add	r1, sp, #28
 8000754:	4628      	mov	r0, r5
 8000756:	f001 fad9 	bl	8001d0c <HAL_GPIO_Init>
  huart3.Instance = USART3;
 800075a:	4821      	ldr	r0, [pc, #132]	; (80007e0 <main+0x180>)
 800075c:	4b21      	ldr	r3, [pc, #132]	; (80007e4 <main+0x184>)
 800075e:	6003      	str	r3, [r0, #0]
  huart3.Init.BaudRate = 115200;
 8000760:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 8000764:	6043      	str	r3, [r0, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000766:	6084      	str	r4, [r0, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000768:	60c4      	str	r4, [r0, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800076a:	6104      	str	r4, [r0, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 800076c:	230c      	movs	r3, #12
 800076e:	6143      	str	r3, [r0, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000770:	6184      	str	r4, [r0, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000772:	61c4      	str	r4, [r0, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000774:	f002 fa58 	bl	8002c28 <HAL_UART_Init>
 8000778:	bb28      	cbnz	r0, 80007c6 <main+0x166>
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800077a:	481b      	ldr	r0, [pc, #108]	; (80007e8 <main+0x188>)
 800077c:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8000780:	6003      	str	r3, [r0, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 8000782:	2304      	movs	r3, #4
 8000784:	6043      	str	r3, [r0, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8000786:	2202      	movs	r2, #2
 8000788:	60c2      	str	r2, [r0, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800078a:	2300      	movs	r3, #0
 800078c:	6103      	str	r3, [r0, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800078e:	6182      	str	r2, [r0, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 8000790:	2201      	movs	r2, #1
 8000792:	61c2      	str	r2, [r0, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8000794:	6203      	str	r3, [r0, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8000796:	6243      	str	r3, [r0, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8000798:	62c2      	str	r2, [r0, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800079a:	6303      	str	r3, [r0, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800079c:	f001 fbd0 	bl	8001f40 <HAL_PCD_Init>
 80007a0:	b998      	cbnz	r0, 80007ca <main+0x16a>
  MY_UART_Transmit(&huart3, "123ABC", 3000);
 80007a2:	f640 32b8 	movw	r2, #3000	; 0xbb8
 80007a6:	4911      	ldr	r1, [pc, #68]	; (80007ec <main+0x18c>)
 80007a8:	480d      	ldr	r0, [pc, #52]	; (80007e0 <main+0x180>)
 80007aa:	f000 f9bf 	bl	8000b2c <MY_UART_Transmit>
  osKernelInitialize();
 80007ae:	f003 f869 	bl	8003884 <osKernelInitialize>
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 80007b2:	4a0f      	ldr	r2, [pc, #60]	; (80007f0 <main+0x190>)
 80007b4:	2100      	movs	r1, #0
 80007b6:	480f      	ldr	r0, [pc, #60]	; (80007f4 <main+0x194>)
 80007b8:	f003 f89c 	bl	80038f4 <osThreadNew>
 80007bc:	4b0e      	ldr	r3, [pc, #56]	; (80007f8 <main+0x198>)
 80007be:	6018      	str	r0, [r3, #0]
  osKernelStart();
 80007c0:	f003 f872 	bl	80038a8 <osKernelStart>
  while (1)
 80007c4:	e7fe      	b.n	80007c4 <main+0x164>
 80007c6:	b672      	cpsid	i
  while (1)
 80007c8:	e7fe      	b.n	80007c8 <main+0x168>
 80007ca:	b672      	cpsid	i
 80007cc:	e7fe      	b.n	80007cc <main+0x16c>
 80007ce:	bf00      	nop
 80007d0:	40023800 	.word	0x40023800
 80007d4:	40020400 	.word	0x40020400
 80007d8:	40021800 	.word	0x40021800
 80007dc:	40020800 	.word	0x40020800
 80007e0:	200005bc 	.word	0x200005bc
 80007e4:	40004800 	.word	0x40004800
 80007e8:	200000b0 	.word	0x200000b0
 80007ec:	080102f0 	.word	0x080102f0
 80007f0:	08010304 	.word	0x08010304
 80007f4:	080005a5 	.word	0x080005a5
 80007f8:	200000ac 	.word	0x200000ac

080007fc <HAL_TIM_PeriodElapsedCallback>:
{
 80007fc:	b508      	push	{r3, lr}
  if (htim->Instance == TIM6) {
 80007fe:	6802      	ldr	r2, [r0, #0]
 8000800:	4b03      	ldr	r3, [pc, #12]	; (8000810 <HAL_TIM_PeriodElapsedCallback+0x14>)
 8000802:	429a      	cmp	r2, r3
 8000804:	d000      	beq.n	8000808 <HAL_TIM_PeriodElapsedCallback+0xc>
}
 8000806:	bd08      	pop	{r3, pc}
    HAL_IncTick();
 8000808:	f000 fb6c 	bl	8000ee4 <HAL_IncTick>
}
 800080c:	e7fb      	b.n	8000806 <HAL_TIM_PeriodElapsedCallback+0xa>
 800080e:	bf00      	nop
 8000810:	40001000 	.word	0x40001000

08000814 <Error_Handler>:
 8000814:	b672      	cpsid	i
  while (1)
 8000816:	e7fe      	b.n	8000816 <Error_Handler+0x2>

08000818 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000818:	b500      	push	{lr}
 800081a:	b083      	sub	sp, #12
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800081c:	2200      	movs	r2, #0
 800081e:	9200      	str	r2, [sp, #0]
 8000820:	4b0d      	ldr	r3, [pc, #52]	; (8000858 <HAL_MspInit+0x40>)
 8000822:	6c59      	ldr	r1, [r3, #68]	; 0x44
 8000824:	f441 4180 	orr.w	r1, r1, #16384	; 0x4000
 8000828:	6459      	str	r1, [r3, #68]	; 0x44
 800082a:	6c59      	ldr	r1, [r3, #68]	; 0x44
 800082c:	f401 4180 	and.w	r1, r1, #16384	; 0x4000
 8000830:	9100      	str	r1, [sp, #0]
 8000832:	9900      	ldr	r1, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000834:	9201      	str	r2, [sp, #4]
 8000836:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8000838:	f041 5180 	orr.w	r1, r1, #268435456	; 0x10000000
 800083c:	6419      	str	r1, [r3, #64]	; 0x40
 800083e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000840:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000844:	9301      	str	r3, [sp, #4]
 8000846:	9b01      	ldr	r3, [sp, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000848:	210f      	movs	r1, #15
 800084a:	f06f 0001 	mvn.w	r0, #1
 800084e:	f000 fb81 	bl	8000f54 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000852:	b003      	add	sp, #12
 8000854:	f85d fb04 	ldr.w	pc, [sp], #4
 8000858:	40023800 	.word	0x40023800

0800085c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800085c:	b500      	push	{lr}
 800085e:	b089      	sub	sp, #36	; 0x24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000860:	2300      	movs	r3, #0
 8000862:	9303      	str	r3, [sp, #12]
 8000864:	9304      	str	r3, [sp, #16]
 8000866:	9305      	str	r3, [sp, #20]
 8000868:	9306      	str	r3, [sp, #24]
 800086a:	9307      	str	r3, [sp, #28]
  if(huart->Instance==USART3)
 800086c:	6802      	ldr	r2, [r0, #0]
 800086e:	4b15      	ldr	r3, [pc, #84]	; (80008c4 <HAL_UART_MspInit+0x68>)
 8000870:	429a      	cmp	r2, r3
 8000872:	d002      	beq.n	800087a <HAL_UART_MspInit+0x1e>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8000874:	b009      	add	sp, #36	; 0x24
 8000876:	f85d fb04 	ldr.w	pc, [sp], #4
    __HAL_RCC_USART3_CLK_ENABLE();
 800087a:	2100      	movs	r1, #0
 800087c:	9101      	str	r1, [sp, #4]
 800087e:	f503 33f8 	add.w	r3, r3, #126976	; 0x1f000
 8000882:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000884:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8000888:	641a      	str	r2, [r3, #64]	; 0x40
 800088a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800088c:	f402 2280 	and.w	r2, r2, #262144	; 0x40000
 8000890:	9201      	str	r2, [sp, #4]
 8000892:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000894:	9102      	str	r1, [sp, #8]
 8000896:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000898:	f042 0208 	orr.w	r2, r2, #8
 800089c:	631a      	str	r2, [r3, #48]	; 0x30
 800089e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008a0:	f003 0308 	and.w	r3, r3, #8
 80008a4:	9302      	str	r3, [sp, #8]
 80008a6:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 80008a8:	f44f 7340 	mov.w	r3, #768	; 0x300
 80008ac:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008ae:	2302      	movs	r3, #2
 80008b0:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80008b2:	2303      	movs	r3, #3
 80008b4:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80008b6:	2307      	movs	r3, #7
 80008b8:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80008ba:	a903      	add	r1, sp, #12
 80008bc:	4802      	ldr	r0, [pc, #8]	; (80008c8 <HAL_UART_MspInit+0x6c>)
 80008be:	f001 fa25 	bl	8001d0c <HAL_GPIO_Init>
}
 80008c2:	e7d7      	b.n	8000874 <HAL_UART_MspInit+0x18>
 80008c4:	40004800 	.word	0x40004800
 80008c8:	40020c00 	.word	0x40020c00

080008cc <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 80008cc:	b570      	push	{r4, r5, r6, lr}
 80008ce:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008d0:	2300      	movs	r3, #0
 80008d2:	9303      	str	r3, [sp, #12]
 80008d4:	9304      	str	r3, [sp, #16]
 80008d6:	9305      	str	r3, [sp, #20]
 80008d8:	9306      	str	r3, [sp, #24]
 80008da:	9307      	str	r3, [sp, #28]
  if(hpcd->Instance==USB_OTG_FS)
 80008dc:	6803      	ldr	r3, [r0, #0]
 80008de:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80008e2:	d001      	beq.n	80008e8 <HAL_PCD_MspInit+0x1c>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 80008e4:	b008      	add	sp, #32
 80008e6:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80008e8:	2500      	movs	r5, #0
 80008ea:	9501      	str	r5, [sp, #4]
 80008ec:	4c17      	ldr	r4, [pc, #92]	; (800094c <HAL_PCD_MspInit+0x80>)
 80008ee:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80008f0:	f043 0301 	orr.w	r3, r3, #1
 80008f4:	6323      	str	r3, [r4, #48]	; 0x30
 80008f6:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80008f8:	f003 0301 	and.w	r3, r3, #1
 80008fc:	9301      	str	r3, [sp, #4]
 80008fe:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8000900:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 8000904:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000906:	2302      	movs	r3, #2
 8000908:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800090a:	2303      	movs	r3, #3
 800090c:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800090e:	230a      	movs	r3, #10
 8000910:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000912:	4e0f      	ldr	r6, [pc, #60]	; (8000950 <HAL_PCD_MspInit+0x84>)
 8000914:	a903      	add	r1, sp, #12
 8000916:	4630      	mov	r0, r6
 8000918:	f001 f9f8 	bl	8001d0c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 800091c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000920:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000922:	9504      	str	r5, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000924:	9505      	str	r5, [sp, #20]
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8000926:	a903      	add	r1, sp, #12
 8000928:	4630      	mov	r0, r6
 800092a:	f001 f9ef 	bl	8001d0c <HAL_GPIO_Init>
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800092e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8000930:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000934:	6363      	str	r3, [r4, #52]	; 0x34
 8000936:	9502      	str	r5, [sp, #8]
 8000938:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800093a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800093e:	6463      	str	r3, [r4, #68]	; 0x44
 8000940:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8000942:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000946:	9302      	str	r3, [sp, #8]
 8000948:	9b02      	ldr	r3, [sp, #8]
}
 800094a:	e7cb      	b.n	80008e4 <HAL_PCD_MspInit+0x18>
 800094c:	40023800 	.word	0x40023800
 8000950:	40020000 	.word	0x40020000

08000954 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000954:	b530      	push	{r4, r5, lr}
 8000956:	b089      	sub	sp, #36	; 0x24
 8000958:	4604      	mov	r4, r0
  uint32_t              uwPrescalerValue = 0U;
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 800095a:	2300      	movs	r3, #0
 800095c:	9301      	str	r3, [sp, #4]
 800095e:	4b21      	ldr	r3, [pc, #132]	; (80009e4 <HAL_InitTick+0x90>)
 8000960:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000962:	f042 0210 	orr.w	r2, r2, #16
 8000966:	641a      	str	r2, [r3, #64]	; 0x40
 8000968:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800096a:	f003 0310 	and.w	r3, r3, #16
 800096e:	9301      	str	r3, [sp, #4]
 8000970:	9b01      	ldr	r3, [sp, #4]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000972:	a902      	add	r1, sp, #8
 8000974:	a803      	add	r0, sp, #12
 8000976:	f001 feb9 	bl	80026ec <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 800097a:	9b06      	ldr	r3, [sp, #24]
 800097c:	b9cb      	cbnz	r3, 80009b2 <HAL_InitTick+0x5e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 800097e:	f001 fe95 	bl	80026ac <HAL_RCC_GetPCLK1Freq>
 8000982:	4603      	mov	r3, r0

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8000984:	4818      	ldr	r0, [pc, #96]	; (80009e8 <HAL_InitTick+0x94>)
 8000986:	4a19      	ldr	r2, [pc, #100]	; (80009ec <HAL_InitTick+0x98>)
 8000988:	6002      	str	r2, [r0, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 800098a:	f240 32e7 	movw	r2, #999	; 0x3e7
 800098e:	60c2      	str	r2, [r0, #12]
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000990:	4a17      	ldr	r2, [pc, #92]	; (80009f0 <HAL_InitTick+0x9c>)
 8000992:	fba2 2303 	umull	r2, r3, r2, r3
 8000996:	0c9b      	lsrs	r3, r3, #18
 8000998:	3b01      	subs	r3, #1
  htim6.Init.Prescaler = uwPrescalerValue;
 800099a:	6043      	str	r3, [r0, #4]
  htim6.Init.ClockDivision = 0;
 800099c:	2300      	movs	r3, #0
 800099e:	6103      	str	r3, [r0, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80009a0:	6083      	str	r3, [r0, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80009a2:	6183      	str	r3, [r0, #24]

  status = HAL_TIM_Base_Init(&htim6);
 80009a4:	f002 f84c 	bl	8002a40 <HAL_TIM_Base_Init>
  if (status == HAL_OK)
 80009a8:	4605      	mov	r5, r0
 80009aa:	b130      	cbz	r0, 80009ba <HAL_InitTick+0x66>
    }
  }

 /* Return function status */
  return status;
}
 80009ac:	4628      	mov	r0, r5
 80009ae:	b009      	add	sp, #36	; 0x24
 80009b0:	bd30      	pop	{r4, r5, pc}
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 80009b2:	f001 fe7b 	bl	80026ac <HAL_RCC_GetPCLK1Freq>
 80009b6:	0043      	lsls	r3, r0, #1
 80009b8:	e7e4      	b.n	8000984 <HAL_InitTick+0x30>
    status = HAL_TIM_Base_Start_IT(&htim6);
 80009ba:	480b      	ldr	r0, [pc, #44]	; (80009e8 <HAL_InitTick+0x94>)
 80009bc:	f001 feb6 	bl	800272c <HAL_TIM_Base_Start_IT>
    if (status == HAL_OK)
 80009c0:	4605      	mov	r5, r0
 80009c2:	2800      	cmp	r0, #0
 80009c4:	d1f2      	bne.n	80009ac <HAL_InitTick+0x58>
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80009c6:	2036      	movs	r0, #54	; 0x36
 80009c8:	f000 fafa 	bl	8000fc0 <HAL_NVIC_EnableIRQ>
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80009cc:	2c0f      	cmp	r4, #15
 80009ce:	d901      	bls.n	80009d4 <HAL_InitTick+0x80>
        status = HAL_ERROR;
 80009d0:	2501      	movs	r5, #1
 80009d2:	e7eb      	b.n	80009ac <HAL_InitTick+0x58>
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 80009d4:	2200      	movs	r2, #0
 80009d6:	4621      	mov	r1, r4
 80009d8:	2036      	movs	r0, #54	; 0x36
 80009da:	f000 fabb 	bl	8000f54 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80009de:	4b05      	ldr	r3, [pc, #20]	; (80009f4 <HAL_InitTick+0xa0>)
 80009e0:	601c      	str	r4, [r3, #0]
 80009e2:	e7e3      	b.n	80009ac <HAL_InitTick+0x58>
 80009e4:	40023800 	.word	0x40023800
 80009e8:	20000600 	.word	0x20000600
 80009ec:	40001000 	.word	0x40001000
 80009f0:	431bde83 	.word	0x431bde83
 80009f4:	20000008 	.word	0x20000008

080009f8 <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80009f8:	e7fe      	b.n	80009f8 <NMI_Handler>

080009fa <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80009fa:	e7fe      	b.n	80009fa <HardFault_Handler>

080009fc <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80009fc:	e7fe      	b.n	80009fc <MemManage_Handler>

080009fe <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80009fe:	e7fe      	b.n	80009fe <BusFault_Handler>

08000a00 <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000a00:	e7fe      	b.n	8000a00 <UsageFault_Handler>

08000a02 <DebugMon_Handler>:

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000a02:	4770      	bx	lr

08000a04 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8000a04:	b508      	push	{r3, lr}
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8000a06:	4802      	ldr	r0, [pc, #8]	; (8000a10 <TIM6_DAC_IRQHandler+0xc>)
 8000a08:	f001 fed8 	bl	80027bc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8000a0c:	bd08      	pop	{r3, pc}
 8000a0e:	bf00      	nop
 8000a10:	20000600 	.word	0x20000600

08000a14 <ETH_IRQHandler>:

/**
  * @brief This function handles Ethernet global interrupt.
  */
void ETH_IRQHandler(void)
{
 8000a14:	b508      	push	{r3, lr}
  /* USER CODE BEGIN ETH_IRQn 0 */

  /* USER CODE END ETH_IRQn 0 */
  HAL_ETH_IRQHandler(&heth);
 8000a16:	4802      	ldr	r0, [pc, #8]	; (8000a20 <ETH_IRQHandler+0xc>)
 8000a18:	f000 ffe2 	bl	80019e0 <HAL_ETH_IRQHandler>
  /* USER CODE BEGIN ETH_IRQn 1 */

  /* USER CODE END ETH_IRQn 1 */
}
 8000a1c:	bd08      	pop	{r3, pc}
 8000a1e:	bf00      	nop
 8000a20:	2000099c 	.word	0x2000099c

08000a24 <_getpid>:
}

int _getpid(void)
{
	return 1;
}
 8000a24:	2001      	movs	r0, #1
 8000a26:	4770      	bx	lr

08000a28 <_kill>:

int _kill(int pid, int sig)
{
	errno = EINVAL;
 8000a28:	4b02      	ldr	r3, [pc, #8]	; (8000a34 <_kill+0xc>)
 8000a2a:	2216      	movs	r2, #22
 8000a2c:	601a      	str	r2, [r3, #0]
	return -1;
}
 8000a2e:	f04f 30ff 	mov.w	r0, #4294967295
 8000a32:	4770      	bx	lr
 8000a34:	20010a7c 	.word	0x20010a7c

08000a38 <_exit>:
	errno = EINVAL;
 8000a38:	4b01      	ldr	r3, [pc, #4]	; (8000a40 <_exit+0x8>)
 8000a3a:	2216      	movs	r2, #22
 8000a3c:	601a      	str	r2, [r3, #0]

void _exit (int status)
{
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
 8000a3e:	e7fe      	b.n	8000a3e <_exit+0x6>
 8000a40:	20010a7c 	.word	0x20010a7c

08000a44 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000a44:	b570      	push	{r4, r5, r6, lr}
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000a46:	1e16      	subs	r6, r2, #0
 8000a48:	dd07      	ble.n	8000a5a <_read+0x16>
 8000a4a:	460c      	mov	r4, r1
 8000a4c:	198d      	adds	r5, r1, r6
	{
		*ptr++ = __io_getchar();
 8000a4e:	f3af 8000 	nop.w
 8000a52:	f804 0b01 	strb.w	r0, [r4], #1
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000a56:	42a5      	cmp	r5, r4
 8000a58:	d1f9      	bne.n	8000a4e <_read+0xa>
	}

return len;
}
 8000a5a:	4630      	mov	r0, r6
 8000a5c:	bd70      	pop	{r4, r5, r6, pc}

08000a5e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000a5e:	b570      	push	{r4, r5, r6, lr}
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000a60:	1e16      	subs	r6, r2, #0
 8000a62:	dd07      	ble.n	8000a74 <_write+0x16>
 8000a64:	460c      	mov	r4, r1
 8000a66:	198d      	adds	r5, r1, r6
	{
		__io_putchar(*ptr++);
 8000a68:	f814 0b01 	ldrb.w	r0, [r4], #1
 8000a6c:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000a70:	42a5      	cmp	r5, r4
 8000a72:	d1f9      	bne.n	8000a68 <_write+0xa>
	}
	return len;
}
 8000a74:	4630      	mov	r0, r6
 8000a76:	bd70      	pop	{r4, r5, r6, pc}

08000a78 <_close>:

int _close(int file)
{
	return -1;
}
 8000a78:	f04f 30ff 	mov.w	r0, #4294967295
 8000a7c:	4770      	bx	lr

08000a7e <_fstat>:


int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
 8000a7e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000a82:	604b      	str	r3, [r1, #4]
	return 0;
}
 8000a84:	2000      	movs	r0, #0
 8000a86:	4770      	bx	lr

08000a88 <_isatty>:

int _isatty(int file)
{
	return 1;
}
 8000a88:	2001      	movs	r0, #1
 8000a8a:	4770      	bx	lr

08000a8c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
	return 0;
}
 8000a8c:	2000      	movs	r0, #0
 8000a8e:	4770      	bx	lr

08000a90 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000a90:	4603      	mov	r3, r0
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
  const uint8_t *max_heap = (uint8_t *)stack_limit;
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000a92:	4a0c      	ldr	r2, [pc, #48]	; (8000ac4 <_sbrk+0x34>)
 8000a94:	6812      	ldr	r2, [r2, #0]
 8000a96:	b152      	cbz	r2, 8000aae <_sbrk+0x1e>
  {
    __sbrk_heap_end = &_end;
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000a98:	4a0a      	ldr	r2, [pc, #40]	; (8000ac4 <_sbrk+0x34>)
 8000a9a:	6810      	ldr	r0, [r2, #0]
 8000a9c:	4403      	add	r3, r0
 8000a9e:	4a0a      	ldr	r2, [pc, #40]	; (8000ac8 <_sbrk+0x38>)
 8000aa0:	490a      	ldr	r1, [pc, #40]	; (8000acc <_sbrk+0x3c>)
 8000aa2:	1a52      	subs	r2, r2, r1
 8000aa4:	4293      	cmp	r3, r2
 8000aa6:	d806      	bhi.n	8000ab6 <_sbrk+0x26>
    errno = ENOMEM;
    return (void *)-1;
  }

  prev_heap_end = __sbrk_heap_end;
  __sbrk_heap_end += incr;
 8000aa8:	4a06      	ldr	r2, [pc, #24]	; (8000ac4 <_sbrk+0x34>)
 8000aaa:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
}
 8000aac:	4770      	bx	lr
    __sbrk_heap_end = &_end;
 8000aae:	4a05      	ldr	r2, [pc, #20]	; (8000ac4 <_sbrk+0x34>)
 8000ab0:	4907      	ldr	r1, [pc, #28]	; (8000ad0 <_sbrk+0x40>)
 8000ab2:	6011      	str	r1, [r2, #0]
 8000ab4:	e7f0      	b.n	8000a98 <_sbrk+0x8>
    errno = ENOMEM;
 8000ab6:	4b07      	ldr	r3, [pc, #28]	; (8000ad4 <_sbrk+0x44>)
 8000ab8:	220c      	movs	r2, #12
 8000aba:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000abc:	f04f 30ff 	mov.w	r0, #4294967295
 8000ac0:	4770      	bx	lr
 8000ac2:	bf00      	nop
 8000ac4:	20000648 	.word	0x20000648
 8000ac8:	20030000 	.word	0x20030000
 8000acc:	00000400 	.word	0x00000400
 8000ad0:	20010a80 	.word	0x20010a80
 8000ad4:	20010a7c 	.word	0x20010a7c

08000ad8 <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000ad8:	4a03      	ldr	r2, [pc, #12]	; (8000ae8 <SystemInit+0x10>)
 8000ada:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8000ade:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000ae2:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000ae6:	4770      	bx	lr
 8000ae8:	e000ed00 	.word	0xe000ed00

08000aec <removeChar>:

extern UART_HandleTypeDef huart3;



void removeChar(char * str, char charToRemove){
 8000aec:	b538      	push	{r3, r4, r5, lr}
 8000aee:	4604      	mov	r4, r0
 8000af0:	460d      	mov	r5, r1
    int i, j;
    int len = strlen(str);
 8000af2:	f7ff fb7d 	bl	80001f0 <strlen>
    for(i=0; i<len; i++)
 8000af6:	2800      	cmp	r0, #0
 8000af8:	dd17      	ble.n	8000b2a <removeChar+0x3e>
 8000afa:	4686      	mov	lr, r0
 8000afc:	2200      	movs	r2, #0
 8000afe:	e005      	b.n	8000b0c <removeChar+0x20>
        {
            for(j=i; j<len; j++)
            {
                str[j] = str[j+1];
            }
            len--;
 8000b00:	f10e 3eff 	add.w	lr, lr, #4294967295
            i--;
 8000b04:	3a01      	subs	r2, #1
    for(i=0; i<len; i++)
 8000b06:	3201      	adds	r2, #1
 8000b08:	4596      	cmp	lr, r2
 8000b0a:	dd0e      	ble.n	8000b2a <removeChar+0x3e>
        if(str[i] == charToRemove)
 8000b0c:	18a3      	adds	r3, r4, r2
 8000b0e:	5ca0      	ldrb	r0, [r4, r2]
 8000b10:	42a8      	cmp	r0, r5
 8000b12:	d1f8      	bne.n	8000b06 <removeChar+0x1a>
            for(j=i; j<len; j++)
 8000b14:	4572      	cmp	r2, lr
 8000b16:	daf3      	bge.n	8000b00 <removeChar+0x14>
 8000b18:	eb04 010e 	add.w	r1, r4, lr
                str[j] = str[j+1];
 8000b1c:	f893 c001 	ldrb.w	ip, [r3, #1]
 8000b20:	f803 cb01 	strb.w	ip, [r3], #1
            for(j=i; j<len; j++)
 8000b24:	4299      	cmp	r1, r3
 8000b26:	d1f9      	bne.n	8000b1c <removeChar+0x30>
 8000b28:	e7ea      	b.n	8000b00 <removeChar+0x14>
        }
    }
}
 8000b2a:	bd38      	pop	{r3, r4, r5, pc}

08000b2c <MY_UART_Transmit>:

void MY_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint32_t Timeout){
 8000b2c:	b538      	push	{r3, r4, r5, lr}
 8000b2e:	460c      	mov	r4, r1
 8000b30:	4615      	mov	r5, r2

	removeChar(pData,'\n');
 8000b32:	210a      	movs	r1, #10
 8000b34:	4620      	mov	r0, r4
 8000b36:	f7ff ffd9 	bl	8000aec <removeChar>
	removeChar(pData,'\r');
 8000b3a:	210d      	movs	r1, #13
 8000b3c:	4620      	mov	r0, r4
 8000b3e:	f7ff ffd5 	bl	8000aec <removeChar>
	strcat(pData, "\r\n");
 8000b42:	4620      	mov	r0, r4
 8000b44:	f7ff fb54 	bl	80001f0 <strlen>
 8000b48:	1822      	adds	r2, r4, r0
 8000b4a:	4b07      	ldr	r3, [pc, #28]	; (8000b68 <MY_UART_Transmit+0x3c>)
 8000b4c:	8819      	ldrh	r1, [r3, #0]
 8000b4e:	789b      	ldrb	r3, [r3, #2]
 8000b50:	5221      	strh	r1, [r4, r0]
 8000b52:	7093      	strb	r3, [r2, #2]

	HAL_UART_Transmit(&huart3, pData, strlen(pData), Timeout);
 8000b54:	4620      	mov	r0, r4
 8000b56:	f7ff fb4b 	bl	80001f0 <strlen>
 8000b5a:	462b      	mov	r3, r5
 8000b5c:	b282      	uxth	r2, r0
 8000b5e:	4621      	mov	r1, r4
 8000b60:	4802      	ldr	r0, [pc, #8]	; (8000b6c <MY_UART_Transmit+0x40>)
 8000b62:	f002 f890 	bl	8002c86 <HAL_UART_Transmit>
}
 8000b66:	bd38      	pop	{r3, r4, r5, pc}
 8000b68:	08010340 	.word	0x08010340
 8000b6c:	200005bc 	.word	0x200005bc

08000b70 <tcp_thread>:


/**** Send RESPONSE every time the client sends some data ******/
static void tcp_thread(void *arg)
{
 8000b70:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000b74:	b082      	sub	sp, #8
	err_t err, accept_err, recv_error;
	/* Create a new connection identifier. */
	conn = netconn_new(NETCONN_TCP);
 8000b76:	2200      	movs	r2, #0
 8000b78:	4611      	mov	r1, r2
 8000b7a:	2010      	movs	r0, #16
 8000b7c:	f005 fa9a 	bl	80060b4 <netconn_new_with_proto_and_callback>
 8000b80:	4b30      	ldr	r3, [pc, #192]	; (8000c44 <tcp_thread+0xd4>)
 8000b82:	6018      	str	r0, [r3, #0]

	if (conn!=NULL)
 8000b84:	2800      	cmp	r0, #0
 8000b86:	d05a      	beq.n	8000c3e <tcp_thread+0xce>
	{
		/* Bind connection to the port number 7. */
		err = netconn_bind(conn, IP_ADDR_ANY, 7);
 8000b88:	2207      	movs	r2, #7
 8000b8a:	492f      	ldr	r1, [pc, #188]	; (8000c48 <tcp_thread+0xd8>)
 8000b8c:	f005 fb10 	bl	80061b0 <netconn_bind>

		if (err == ERR_OK)
 8000b90:	2800      	cmp	r0, #0
 8000b92:	d150      	bne.n	8000c36 <tcp_thread+0xc6>
		{
			/* Tell connection to go into listening mode. */
			netconn_listen(conn);
 8000b94:	21ff      	movs	r1, #255	; 0xff
 8000b96:	4b2b      	ldr	r3, [pc, #172]	; (8000c44 <tcp_thread+0xd4>)
 8000b98:	6818      	ldr	r0, [r3, #0]
 8000b9a:	f005 fb31 	bl	8006200 <netconn_listen_with_backlog>

			while (1)
			{
				/* Grab new connection. */
				accept_err = netconn_accept(conn, &newconn);
 8000b9e:	f8df 90b8 	ldr.w	r9, [pc, #184]	; 8000c58 <tcp_thread+0xe8>

						/* If there is some data remaining to be sent, the following process will continue */
						do
						{

							strncpy (msg, buf->p->payload, buf->p->len);   // get the message from the client
 8000ba2:	4e2a      	ldr	r6, [pc, #168]	; (8000c4c <tcp_thread+0xdc>)
 8000ba4:	e03d      	b.n	8000c22 <tcp_thread+0xb2>
 8000ba6:	f8d8 3000 	ldr.w	r3, [r8]
 8000baa:	681b      	ldr	r3, [r3, #0]
 8000bac:	895a      	ldrh	r2, [r3, #10]
 8000bae:	6859      	ldr	r1, [r3, #4]
 8000bb0:	4630      	mov	r0, r6
 8000bb2:	f00e fbd2 	bl	800f35a <strncpy>

							// Or modify the message received, so that we can send it back to the client
							int len = sprintf (smsg, "\"%s\" was sent by the Server\n", msg);
 8000bb6:	4c26      	ldr	r4, [pc, #152]	; (8000c50 <tcp_thread+0xe0>)
 8000bb8:	4632      	mov	r2, r6
 8000bba:	4651      	mov	r1, sl
 8000bbc:	4620      	mov	r0, r4
 8000bbe:	f00e fb69 	bl	800f294 <siprintf>
 8000bc2:	4605      	mov	r5, r0
							MY_UART_Transmit(&huart3, smsg, 3000);
 8000bc4:	f640 32b8 	movw	r2, #3000	; 0xbb8
 8000bc8:	4621      	mov	r1, r4
 8000bca:	4822      	ldr	r0, [pc, #136]	; (8000c54 <tcp_thread+0xe4>)
 8000bcc:	f7ff ffae 	bl	8000b2c <MY_UART_Transmit>

							netconn_write(newconn, smsg, len, NETCONN_COPY);  // send the message back to the client
 8000bd0:	2700      	movs	r7, #0
 8000bd2:	9700      	str	r7, [sp, #0]
 8000bd4:	2301      	movs	r3, #1
 8000bd6:	462a      	mov	r2, r5
 8000bd8:	4621      	mov	r1, r4
 8000bda:	f8d9 0000 	ldr.w	r0, [r9]
 8000bde:	f005 fbc1 	bl	8006364 <netconn_write_partly>
							memset (msg, '\0', 100);  // clear the buffer
 8000be2:	2264      	movs	r2, #100	; 0x64
 8000be4:	4639      	mov	r1, r7
 8000be6:	4630      	mov	r0, r6
 8000be8:	f00e f9e7 	bl	800efba <memset>
						}
						while (netbuf_next(buf) >0);
 8000bec:	f8d8 0000 	ldr.w	r0, [r8]
 8000bf0:	f006 fdf4 	bl	80077dc <netbuf_next>
 8000bf4:	42b8      	cmp	r0, r7
 8000bf6:	dcd6      	bgt.n	8000ba6 <tcp_thread+0x36>

						netbuf_delete(buf);
 8000bf8:	f8d8 0000 	ldr.w	r0, [r8]
 8000bfc:	f006 fdde 	bl	80077bc <netbuf_delete>
					while (netconn_recv(newconn, &buf) == ERR_OK)
 8000c00:	4641      	mov	r1, r8
 8000c02:	f8d9 0000 	ldr.w	r0, [r9]
 8000c06:	f005 fd0f 	bl	8006628 <netconn_recv>
 8000c0a:	b910      	cbnz	r0, 8000c12 <tcp_thread+0xa2>
							int len = sprintf (smsg, "\"%s\" was sent by the Server\n", msg);
 8000c0c:	f8df a04c 	ldr.w	sl, [pc, #76]	; 8000c5c <tcp_thread+0xec>
 8000c10:	e7c9      	b.n	8000ba6 <tcp_thread+0x36>
					}

					/* Close connection and discard connection identifier. */
					netconn_close(newconn);
 8000c12:	f8d9 0000 	ldr.w	r0, [r9]
 8000c16:	f005 fbb2 	bl	800637e <netconn_close>
					netconn_delete(newconn);
 8000c1a:	f8d9 0000 	ldr.w	r0, [r9]
 8000c1e:	f005 fab7 	bl	8006190 <netconn_delete>
				accept_err = netconn_accept(conn, &newconn);
 8000c22:	4c08      	ldr	r4, [pc, #32]	; (8000c44 <tcp_thread+0xd4>)
 8000c24:	4649      	mov	r1, r9
 8000c26:	6820      	ldr	r0, [r4, #0]
 8000c28:	f005 fbbe 	bl	80063a8 <netconn_accept>
				if (accept_err == ERR_OK)
 8000c2c:	2800      	cmp	r0, #0
 8000c2e:	d1f9      	bne.n	8000c24 <tcp_thread+0xb4>
					while (netconn_recv(newconn, &buf) == ERR_OK)
 8000c30:	f8df 802c 	ldr.w	r8, [pc, #44]	; 8000c60 <tcp_thread+0xf0>
 8000c34:	e7e4      	b.n	8000c00 <tcp_thread+0x90>
				}
			}
		}
		else
		{
			netconn_delete(conn);
 8000c36:	4b03      	ldr	r3, [pc, #12]	; (8000c44 <tcp_thread+0xd4>)
 8000c38:	6818      	ldr	r0, [r3, #0]
 8000c3a:	f005 faa9 	bl	8006190 <netconn_delete>
		}
	}
}
 8000c3e:	b002      	add	sp, #8
 8000c40:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c44:	20000650 	.word	0x20000650
 8000c48:	080129f0 	.word	0x080129f0
 8000c4c:	20000654 	.word	0x20000654
 8000c50:	200006bc 	.word	0x200006bc
 8000c54:	200005bc 	.word	0x200005bc
 8000c58:	200006b8 	.word	0x200006b8
 8000c5c:	08010344 	.word	0x08010344
 8000c60:	2000064c 	.word	0x2000064c

08000c64 <tcpserver_init>:


void tcpserver_init(void)
{
 8000c64:	b500      	push	{lr}
 8000c66:	b083      	sub	sp, #12
  sys_thread_new("tcp_thread", tcp_thread, NULL, DEFAULT_THREAD_STACKSIZE,osPriorityNormal);
 8000c68:	2318      	movs	r3, #24
 8000c6a:	9300      	str	r3, [sp, #0]
 8000c6c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000c70:	2200      	movs	r2, #0
 8000c72:	4903      	ldr	r1, [pc, #12]	; (8000c80 <tcpserver_init+0x1c>)
 8000c74:	4803      	ldr	r0, [pc, #12]	; (8000c84 <tcpserver_init+0x20>)
 8000c76:	f00e f820 	bl	800ecba <sys_thread_new>
}
 8000c7a:	b003      	add	sp, #12
 8000c7c:	f85d fb04 	ldr.w	pc, [sp], #4
 8000c80:	08000b71 	.word	0x08000b71
 8000c84:	08010364 	.word	0x08010364

08000c88 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 8000c88:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000cc0 <LoopFillZerobss+0x12>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000c8c:	480d      	ldr	r0, [pc, #52]	; (8000cc4 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000c8e:	490e      	ldr	r1, [pc, #56]	; (8000cc8 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000c90:	4a0e      	ldr	r2, [pc, #56]	; (8000ccc <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000c92:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000c94:	e002      	b.n	8000c9c <LoopCopyDataInit>

08000c96 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000c96:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000c98:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000c9a:	3304      	adds	r3, #4

08000c9c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000c9c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000c9e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000ca0:	d3f9      	bcc.n	8000c96 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000ca2:	4a0b      	ldr	r2, [pc, #44]	; (8000cd0 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000ca4:	4c0b      	ldr	r4, [pc, #44]	; (8000cd4 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000ca6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000ca8:	e001      	b.n	8000cae <LoopFillZerobss>

08000caa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000caa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000cac:	3204      	adds	r2, #4

08000cae <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000cae:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000cb0:	d3fb      	bcc.n	8000caa <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000cb2:	f7ff ff11 	bl	8000ad8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000cb6:	f00e f921 	bl	800eefc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000cba:	f7ff fcd1 	bl	8000660 <main>
  bx  lr    
 8000cbe:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8000cc0:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 8000cc4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000cc8:	20000090 	.word	0x20000090
  ldr r2, =_sidata
 8000ccc:	08012d58 	.word	0x08012d58
  ldr r2, =_sbss
 8000cd0:	20000090 	.word	0x20000090
  ldr r4, =_ebss
 8000cd4:	20010a80 	.word	0x20010a80

08000cd8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000cd8:	e7fe      	b.n	8000cd8 <ADC_IRQHandler>

08000cda <LAN8742_RegisterBusIO>:
  * @retval LAN8742_STATUS_OK  if OK
  *         LAN8742_STATUS_ERROR if missing mandatory function
  */
int32_t  LAN8742_RegisterBusIO(lan8742_Object_t *pObj, lan8742_IOCtx_t *ioctx)
{
  if(!pObj || !ioctx->ReadReg || !ioctx->WriteReg || !ioctx->GetTick)
 8000cda:	b188      	cbz	r0, 8000d00 <LAN8742_RegisterBusIO+0x26>
 8000cdc:	68ca      	ldr	r2, [r1, #12]
 8000cde:	b192      	cbz	r2, 8000d06 <LAN8742_RegisterBusIO+0x2c>
 8000ce0:	688a      	ldr	r2, [r1, #8]
 8000ce2:	b19a      	cbz	r2, 8000d0c <LAN8742_RegisterBusIO+0x32>
 8000ce4:	690a      	ldr	r2, [r1, #16]
 8000ce6:	b1a2      	cbz	r2, 8000d12 <LAN8742_RegisterBusIO+0x38>
  {
    return LAN8742_STATUS_ERROR;
  }
  
  pObj->IO.Init = ioctx->Init;
 8000ce8:	680a      	ldr	r2, [r1, #0]
 8000cea:	6082      	str	r2, [r0, #8]
  pObj->IO.DeInit = ioctx->DeInit;
 8000cec:	684a      	ldr	r2, [r1, #4]
 8000cee:	60c2      	str	r2, [r0, #12]
  pObj->IO.ReadReg = ioctx->ReadReg;
 8000cf0:	68ca      	ldr	r2, [r1, #12]
 8000cf2:	6142      	str	r2, [r0, #20]
  pObj->IO.WriteReg = ioctx->WriteReg;
 8000cf4:	688a      	ldr	r2, [r1, #8]
 8000cf6:	6102      	str	r2, [r0, #16]
  pObj->IO.GetTick = ioctx->GetTick;
 8000cf8:	690a      	ldr	r2, [r1, #16]
 8000cfa:	6182      	str	r2, [r0, #24]
  
  return LAN8742_STATUS_OK;
 8000cfc:	2000      	movs	r0, #0
 8000cfe:	4770      	bx	lr
    return LAN8742_STATUS_ERROR;
 8000d00:	f04f 30ff 	mov.w	r0, #4294967295
 8000d04:	4770      	bx	lr
 8000d06:	f04f 30ff 	mov.w	r0, #4294967295
 8000d0a:	4770      	bx	lr
 8000d0c:	f04f 30ff 	mov.w	r0, #4294967295
 8000d10:	4770      	bx	lr
 8000d12:	f04f 30ff 	mov.w	r0, #4294967295
}
 8000d16:	4770      	bx	lr

08000d18 <LAN8742_Init>:
  *         LAN8742_STATUS_READ_ERROR if connot read register
  *         LAN8742_STATUS_WRITE_ERROR if connot write to register
  *         LAN8742_STATUS_RESET_TIMEOUT if cannot perform a software reset
  */
 int32_t LAN8742_Init(lan8742_Object_t *pObj)
 {
 8000d18:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000d1c:	b082      	sub	sp, #8
 8000d1e:	4605      	mov	r5, r0
   uint32_t tickstart = 0, regvalue = 0, addr = 0;
 8000d20:	2300      	movs	r3, #0
 8000d22:	9301      	str	r3, [sp, #4]
   int32_t status = LAN8742_STATUS_OK;
   
   if(pObj->Is_Initialized == 0)
 8000d24:	6844      	ldr	r4, [r0, #4]
 8000d26:	2c00      	cmp	r4, #0
 8000d28:	d149      	bne.n	8000dbe <LAN8742_Init+0xa6>
   {
     if(pObj->IO.Init != 0)
 8000d2a:	6883      	ldr	r3, [r0, #8]
 8000d2c:	b103      	cbz	r3, 8000d30 <LAN8742_Init+0x18>
     {
       /* GPIO and Clocks initialization */
       pObj->IO.Init();
 8000d2e:	4798      	blx	r3
     }
   
     /* for later check */
     pObj->DevAddr = LAN8742_MAX_DEV_ADDR + 1;
 8000d30:	2320      	movs	r3, #32
 8000d32:	602b      	str	r3, [r5, #0]
   int32_t status = LAN8742_STATUS_OK;
 8000d34:	2700      	movs	r7, #0
   
     /* Get the device address from special mode register */  
     for(addr = 0; addr <= LAN8742_MAX_DEV_ADDR; addr ++)
     {
       if(pObj->IO.ReadReg(addr, LAN8742_SMR, &regvalue) < 0)
 8000d36:	2612      	movs	r6, #18
       { 
         status = LAN8742_STATUS_READ_ERROR;
 8000d38:	f06f 0804 	mvn.w	r8, #4
 8000d3c:	e003      	b.n	8000d46 <LAN8742_Init+0x2e>
 8000d3e:	4647      	mov	r7, r8
     for(addr = 0; addr <= LAN8742_MAX_DEV_ADDR; addr ++)
 8000d40:	3401      	adds	r4, #1
 8000d42:	2c20      	cmp	r4, #32
 8000d44:	d033      	beq.n	8000dae <LAN8742_Init+0x96>
       if(pObj->IO.ReadReg(addr, LAN8742_SMR, &regvalue) < 0)
 8000d46:	696b      	ldr	r3, [r5, #20]
 8000d48:	aa01      	add	r2, sp, #4
 8000d4a:	4631      	mov	r1, r6
 8000d4c:	4620      	mov	r0, r4
 8000d4e:	4798      	blx	r3
 8000d50:	2800      	cmp	r0, #0
 8000d52:	dbf4      	blt.n	8000d3e <LAN8742_Init+0x26>
         /* Can't read from this device address 
            continue with next address */
         continue;
       }
     
       if((regvalue & LAN8742_SMR_PHY_ADDR) == addr)
 8000d54:	9b01      	ldr	r3, [sp, #4]
 8000d56:	f003 031f 	and.w	r3, r3, #31
 8000d5a:	42a3      	cmp	r3, r4
 8000d5c:	d1f0      	bne.n	8000d40 <LAN8742_Init+0x28>
       {
         pObj->DevAddr = addr;
 8000d5e:	602c      	str	r4, [r5, #0]
     
     /* if device address is matched */
     if(status == LAN8742_STATUS_OK)
     {
       /* set a software reset  */
       if(pObj->IO.WriteReg(pObj->DevAddr, LAN8742_BCR, LAN8742_BCR_SOFT_RESET) >= 0)
 8000d60:	692b      	ldr	r3, [r5, #16]
 8000d62:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8000d66:	2100      	movs	r1, #0
 8000d68:	4620      	mov	r0, r4
 8000d6a:	4798      	blx	r3
 8000d6c:	2800      	cmp	r0, #0
 8000d6e:	db36      	blt.n	8000dde <LAN8742_Init+0xc6>
       { 
         /* get software reset status */
         if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BCR, &regvalue) >= 0)
 8000d70:	696b      	ldr	r3, [r5, #20]
 8000d72:	aa01      	add	r2, sp, #4
 8000d74:	2100      	movs	r1, #0
 8000d76:	6828      	ldr	r0, [r5, #0]
 8000d78:	4798      	blx	r3
 8000d7a:	2800      	cmp	r0, #0
 8000d7c:	db32      	blt.n	8000de4 <LAN8742_Init+0xcc>
         { 
           tickstart = pObj->IO.GetTick();
 8000d7e:	69ab      	ldr	r3, [r5, #24]
 8000d80:	4798      	blx	r3
 8000d82:	4604      	mov	r4, r0
           /* wait until software reset is done or timeout occured  */
           while(regvalue & LAN8742_BCR_SOFT_RESET)
           {
             if((pObj->IO.GetTick() - tickstart) <= LAN8742_SW_RESET_TO)
             {
               if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BCR, &regvalue) < 0)
 8000d84:	2600      	movs	r6, #0
           while(regvalue & LAN8742_BCR_SOFT_RESET)
 8000d86:	9b01      	ldr	r3, [sp, #4]
 8000d88:	f413 4f00 	tst.w	r3, #32768	; 0x8000
 8000d8c:	d017      	beq.n	8000dbe <LAN8742_Init+0xa6>
             if((pObj->IO.GetTick() - tickstart) <= LAN8742_SW_RESET_TO)
 8000d8e:	69ab      	ldr	r3, [r5, #24]
 8000d90:	4798      	blx	r3
 8000d92:	1b00      	subs	r0, r0, r4
 8000d94:	f5b0 7ffa 	cmp.w	r0, #500	; 0x1f4
 8000d98:	d827      	bhi.n	8000dea <LAN8742_Init+0xd2>
               if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BCR, &regvalue) < 0)
 8000d9a:	696b      	ldr	r3, [r5, #20]
 8000d9c:	aa01      	add	r2, sp, #4
 8000d9e:	4631      	mov	r1, r6
 8000da0:	6828      	ldr	r0, [r5, #0]
 8000da2:	4798      	blx	r3
 8000da4:	2800      	cmp	r0, #0
 8000da6:	daee      	bge.n	8000d86 <LAN8742_Init+0x6e>
               { 
                 status = LAN8742_STATUS_READ_ERROR;
 8000da8:	f06f 0704 	mvn.w	r7, #4
         status = LAN8742_STATUS_WRITE_ERROR;
       }
     }
   }
      
   if(status == LAN8742_STATUS_OK)
 8000dac:	e013      	b.n	8000dd6 <LAN8742_Init+0xbe>
     if(pObj->DevAddr > LAN8742_MAX_DEV_ADDR)
 8000dae:	682c      	ldr	r4, [r5, #0]
 8000db0:	2c1f      	cmp	r4, #31
 8000db2:	d902      	bls.n	8000dba <LAN8742_Init+0xa2>
       status = LAN8742_STATUS_ADDRESS_ERROR;
 8000db4:	f06f 0702 	mvn.w	r7, #2
 8000db8:	e00d      	b.n	8000dd6 <LAN8742_Init+0xbe>
     if(status == LAN8742_STATUS_OK)
 8000dba:	b967      	cbnz	r7, 8000dd6 <LAN8742_Init+0xbe>
 8000dbc:	e7d0      	b.n	8000d60 <LAN8742_Init+0x48>
   {
     tickstart =  pObj->IO.GetTick();
 8000dbe:	69ab      	ldr	r3, [r5, #24]
 8000dc0:	4798      	blx	r3
 8000dc2:	4604      	mov	r4, r0
     
     /* Wait for 2s to perform initialization */
     while((pObj->IO.GetTick() - tickstart) <= LAN8742_INIT_TO)
 8000dc4:	69ab      	ldr	r3, [r5, #24]
 8000dc6:	4798      	blx	r3
 8000dc8:	1b03      	subs	r3, r0, r4
 8000dca:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8000dce:	d9f9      	bls.n	8000dc4 <LAN8742_Init+0xac>
     {
     }
     pObj->Is_Initialized = 1;
 8000dd0:	2301      	movs	r3, #1
 8000dd2:	606b      	str	r3, [r5, #4]
 8000dd4:	2700      	movs	r7, #0
   }
   
   return status;
 }
 8000dd6:	4638      	mov	r0, r7
 8000dd8:	b002      	add	sp, #8
 8000dda:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
         status = LAN8742_STATUS_WRITE_ERROR;
 8000dde:	f06f 0703 	mvn.w	r7, #3
 8000de2:	e7f8      	b.n	8000dd6 <LAN8742_Init+0xbe>
           status = LAN8742_STATUS_READ_ERROR;
 8000de4:	f06f 0704 	mvn.w	r7, #4
   return status;
 8000de8:	e7f5      	b.n	8000dd6 <LAN8742_Init+0xbe>
               status = LAN8742_STATUS_RESET_TIMEOUT;
 8000dea:	f06f 0701 	mvn.w	r7, #1
 8000dee:	e7f2      	b.n	8000dd6 <LAN8742_Init+0xbe>

08000df0 <LAN8742_GetLinkState>:
  *         LAN8742_STATUS_10MBITS_HALFDUPLEX  if 10Mb/s HD       
  *         LAN8742_STATUS_READ_ERROR if connot read register
  *         LAN8742_STATUS_WRITE_ERROR if connot write to register
  */
int32_t LAN8742_GetLinkState(lan8742_Object_t *pObj)
{
 8000df0:	b510      	push	{r4, lr}
 8000df2:	b082      	sub	sp, #8
 8000df4:	4604      	mov	r4, r0
  uint32_t readval = 0;
 8000df6:	2300      	movs	r3, #0
 8000df8:	9301      	str	r3, [sp, #4]
  
  /* Read Status register  */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BSR, &readval) < 0)
 8000dfa:	6943      	ldr	r3, [r0, #20]
 8000dfc:	aa01      	add	r2, sp, #4
 8000dfe:	2101      	movs	r1, #1
 8000e00:	6800      	ldr	r0, [r0, #0]
 8000e02:	4798      	blx	r3
 8000e04:	2800      	cmp	r0, #0
 8000e06:	db39      	blt.n	8000e7c <LAN8742_GetLinkState+0x8c>
  {
    return LAN8742_STATUS_READ_ERROR;
  }
  
  /* Read Status register again */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BSR, &readval) < 0)
 8000e08:	6963      	ldr	r3, [r4, #20]
 8000e0a:	aa01      	add	r2, sp, #4
 8000e0c:	2101      	movs	r1, #1
 8000e0e:	6820      	ldr	r0, [r4, #0]
 8000e10:	4798      	blx	r3
 8000e12:	2800      	cmp	r0, #0
 8000e14:	db35      	blt.n	8000e82 <LAN8742_GetLinkState+0x92>
  {
    return LAN8742_STATUS_READ_ERROR;
  }
  
  if((readval & LAN8742_BSR_LINK_STATUS) == 0)
 8000e16:	9b01      	ldr	r3, [sp, #4]
 8000e18:	f013 0f04 	tst.w	r3, #4
 8000e1c:	d034      	beq.n	8000e88 <LAN8742_GetLinkState+0x98>
    /* Return Link Down status */
    return LAN8742_STATUS_LINK_DOWN;    
  }
  
  /* Check Auto negotiaition */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BCR, &readval) < 0)
 8000e1e:	6963      	ldr	r3, [r4, #20]
 8000e20:	aa01      	add	r2, sp, #4
 8000e22:	2100      	movs	r1, #0
 8000e24:	6820      	ldr	r0, [r4, #0]
 8000e26:	4798      	blx	r3
 8000e28:	2800      	cmp	r0, #0
 8000e2a:	db30      	blt.n	8000e8e <LAN8742_GetLinkState+0x9e>
  {
    return LAN8742_STATUS_READ_ERROR;
  }
  
  if((readval & LAN8742_BCR_AUTONEGO_EN) != LAN8742_BCR_AUTONEGO_EN)
 8000e2c:	9b01      	ldr	r3, [sp, #4]
 8000e2e:	f413 5f80 	tst.w	r3, #4096	; 0x1000
 8000e32:	d10d      	bne.n	8000e50 <LAN8742_GetLinkState+0x60>
  {
    if(((readval & LAN8742_BCR_SPEED_SELECT) == LAN8742_BCR_SPEED_SELECT) && ((readval & LAN8742_BCR_DUPLEX_MODE) == LAN8742_BCR_DUPLEX_MODE)) 
 8000e34:	f403 5204 	and.w	r2, r3, #8448	; 0x2100
 8000e38:	f5b2 5f04 	cmp.w	r2, #8448	; 0x2100
 8000e3c:	d02a      	beq.n	8000e94 <LAN8742_GetLinkState+0xa4>
    {
      return LAN8742_STATUS_100MBITS_FULLDUPLEX;
    }
    else if ((readval & LAN8742_BCR_SPEED_SELECT) == LAN8742_BCR_SPEED_SELECT)
 8000e3e:	f413 5f00 	tst.w	r3, #8192	; 0x2000
 8000e42:	d129      	bne.n	8000e98 <LAN8742_GetLinkState+0xa8>
    {
      return LAN8742_STATUS_10MBITS_FULLDUPLEX;
    }
    else
    {
      return LAN8742_STATUS_10MBITS_HALFDUPLEX;
 8000e44:	f413 7f80 	tst.w	r3, #256	; 0x100
 8000e48:	bf14      	ite	ne
 8000e4a:	2004      	movne	r0, #4
 8000e4c:	2005      	moveq	r0, #5
 8000e4e:	e01c      	b.n	8000e8a <LAN8742_GetLinkState+0x9a>
    }  		
  }
  else /* Auto Nego enabled */
  {
    if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_PHYSCSR, &readval) < 0)
 8000e50:	6963      	ldr	r3, [r4, #20]
 8000e52:	aa01      	add	r2, sp, #4
 8000e54:	211f      	movs	r1, #31
 8000e56:	6820      	ldr	r0, [r4, #0]
 8000e58:	4798      	blx	r3
 8000e5a:	2800      	cmp	r0, #0
 8000e5c:	db1e      	blt.n	8000e9c <LAN8742_GetLinkState+0xac>
    {
      return LAN8742_STATUS_READ_ERROR;
    }
    
    /* Check if auto nego not done */
    if((readval & LAN8742_PHYSCSR_AUTONEGO_DONE) == 0)
 8000e5e:	9b01      	ldr	r3, [sp, #4]
 8000e60:	f413 5f80 	tst.w	r3, #4096	; 0x1000
 8000e64:	d01d      	beq.n	8000ea2 <LAN8742_GetLinkState+0xb2>
    {
      return LAN8742_STATUS_AUTONEGO_NOTDONE;
    }
    
    if((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_100BTX_FD)
 8000e66:	f003 031c 	and.w	r3, r3, #28
 8000e6a:	2b18      	cmp	r3, #24
 8000e6c:	d01b      	beq.n	8000ea6 <LAN8742_GetLinkState+0xb6>
    {
      return LAN8742_STATUS_100MBITS_FULLDUPLEX;
    }
    else if ((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_100BTX_HD)
 8000e6e:	2b08      	cmp	r3, #8
 8000e70:	d01b      	beq.n	8000eaa <LAN8742_GetLinkState+0xba>
    {
      return LAN8742_STATUS_10MBITS_FULLDUPLEX;
    }
    else
    {
      return LAN8742_STATUS_10MBITS_HALFDUPLEX;
 8000e72:	2b14      	cmp	r3, #20
 8000e74:	bf0c      	ite	eq
 8000e76:	2004      	moveq	r0, #4
 8000e78:	2005      	movne	r0, #5
 8000e7a:	e006      	b.n	8000e8a <LAN8742_GetLinkState+0x9a>
    return LAN8742_STATUS_READ_ERROR;
 8000e7c:	f06f 0004 	mvn.w	r0, #4
 8000e80:	e003      	b.n	8000e8a <LAN8742_GetLinkState+0x9a>
    return LAN8742_STATUS_READ_ERROR;
 8000e82:	f06f 0004 	mvn.w	r0, #4
 8000e86:	e000      	b.n	8000e8a <LAN8742_GetLinkState+0x9a>
    return LAN8742_STATUS_LINK_DOWN;    
 8000e88:	2001      	movs	r0, #1
    }				
  }
}
 8000e8a:	b002      	add	sp, #8
 8000e8c:	bd10      	pop	{r4, pc}
    return LAN8742_STATUS_READ_ERROR;
 8000e8e:	f06f 0004 	mvn.w	r0, #4
 8000e92:	e7fa      	b.n	8000e8a <LAN8742_GetLinkState+0x9a>
      return LAN8742_STATUS_100MBITS_FULLDUPLEX;
 8000e94:	2002      	movs	r0, #2
 8000e96:	e7f8      	b.n	8000e8a <LAN8742_GetLinkState+0x9a>
      return LAN8742_STATUS_100MBITS_HALFDUPLEX;
 8000e98:	2003      	movs	r0, #3
 8000e9a:	e7f6      	b.n	8000e8a <LAN8742_GetLinkState+0x9a>
      return LAN8742_STATUS_READ_ERROR;
 8000e9c:	f06f 0004 	mvn.w	r0, #4
 8000ea0:	e7f3      	b.n	8000e8a <LAN8742_GetLinkState+0x9a>
      return LAN8742_STATUS_AUTONEGO_NOTDONE;
 8000ea2:	2006      	movs	r0, #6
 8000ea4:	e7f1      	b.n	8000e8a <LAN8742_GetLinkState+0x9a>
      return LAN8742_STATUS_100MBITS_FULLDUPLEX;
 8000ea6:	2002      	movs	r0, #2
 8000ea8:	e7ef      	b.n	8000e8a <LAN8742_GetLinkState+0x9a>
      return LAN8742_STATUS_100MBITS_HALFDUPLEX;
 8000eaa:	2003      	movs	r0, #3
 8000eac:	e7ed      	b.n	8000e8a <LAN8742_GetLinkState+0x9a>
	...

08000eb0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000eb0:	b508      	push	{r3, lr}
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000eb2:	4b0b      	ldr	r3, [pc, #44]	; (8000ee0 <HAL_Init+0x30>)
 8000eb4:	681a      	ldr	r2, [r3, #0]
 8000eb6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8000eba:	601a      	str	r2, [r3, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000ebc:	681a      	ldr	r2, [r3, #0]
 8000ebe:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8000ec2:	601a      	str	r2, [r3, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000ec4:	681a      	ldr	r2, [r3, #0]
 8000ec6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8000eca:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000ecc:	2003      	movs	r0, #3
 8000ece:	f000 f82f 	bl	8000f30 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000ed2:	200f      	movs	r0, #15
 8000ed4:	f7ff fd3e 	bl	8000954 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000ed8:	f7ff fc9e 	bl	8000818 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
}
 8000edc:	2000      	movs	r0, #0
 8000ede:	bd08      	pop	{r3, pc}
 8000ee0:	40023c00 	.word	0x40023c00

08000ee4 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8000ee4:	4a03      	ldr	r2, [pc, #12]	; (8000ef4 <HAL_IncTick+0x10>)
 8000ee6:	6811      	ldr	r1, [r2, #0]
 8000ee8:	4b03      	ldr	r3, [pc, #12]	; (8000ef8 <HAL_IncTick+0x14>)
 8000eea:	781b      	ldrb	r3, [r3, #0]
 8000eec:	440b      	add	r3, r1
 8000eee:	6013      	str	r3, [r2, #0]
}
 8000ef0:	4770      	bx	lr
 8000ef2:	bf00      	nop
 8000ef4:	20000784 	.word	0x20000784
 8000ef8:	20000004 	.word	0x20000004

08000efc <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8000efc:	4b01      	ldr	r3, [pc, #4]	; (8000f04 <HAL_GetTick+0x8>)
 8000efe:	6818      	ldr	r0, [r3, #0]
}
 8000f00:	4770      	bx	lr
 8000f02:	bf00      	nop
 8000f04:	20000784 	.word	0x20000784

08000f08 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000f08:	b538      	push	{r3, r4, r5, lr}
 8000f0a:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8000f0c:	f7ff fff6 	bl	8000efc <HAL_GetTick>
 8000f10:	4605      	mov	r5, r0
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000f12:	f1b4 3fff 	cmp.w	r4, #4294967295
 8000f16:	d002      	beq.n	8000f1e <HAL_Delay+0x16>
  {
    wait += (uint32_t)(uwTickFreq);
 8000f18:	4b04      	ldr	r3, [pc, #16]	; (8000f2c <HAL_Delay+0x24>)
 8000f1a:	781b      	ldrb	r3, [r3, #0]
 8000f1c:	441c      	add	r4, r3
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000f1e:	f7ff ffed 	bl	8000efc <HAL_GetTick>
 8000f22:	1b40      	subs	r0, r0, r5
 8000f24:	42a0      	cmp	r0, r4
 8000f26:	d3fa      	bcc.n	8000f1e <HAL_Delay+0x16>
  {
  }
}
 8000f28:	bd38      	pop	{r3, r4, r5, pc}
 8000f2a:	bf00      	nop
 8000f2c:	20000004 	.word	0x20000004

08000f30 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000f30:	4907      	ldr	r1, [pc, #28]	; (8000f50 <HAL_NVIC_SetPriorityGrouping+0x20>)
 8000f32:	68ca      	ldr	r2, [r1, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000f34:	0203      	lsls	r3, r0, #8
 8000f36:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000f3a:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8000f3e:	0412      	lsls	r2, r2, #16
 8000f40:	0c12      	lsrs	r2, r2, #16
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000f42:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000f44:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000f48:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  SCB->AIRCR =  reg_value;
 8000f4c:	60cb      	str	r3, [r1, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 8000f4e:	4770      	bx	lr
 8000f50:	e000ed00 	.word	0xe000ed00

08000f54 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000f54:	b500      	push	{lr}
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000f56:	4b18      	ldr	r3, [pc, #96]	; (8000fb8 <HAL_NVIC_SetPriority+0x64>)
 8000f58:	68db      	ldr	r3, [r3, #12]
 8000f5a:	f3c3 2302 	ubfx	r3, r3, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000f5e:	f1c3 0c07 	rsb	ip, r3, #7
 8000f62:	f1bc 0f04 	cmp.w	ip, #4
 8000f66:	bf28      	it	cs
 8000f68:	f04f 0c04 	movcs.w	ip, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000f6c:	f103 0e04 	add.w	lr, r3, #4
 8000f70:	f1be 0f06 	cmp.w	lr, #6
 8000f74:	bf8c      	ite	hi
 8000f76:	3b03      	subhi	r3, #3
 8000f78:	2300      	movls	r3, #0

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f7a:	f04f 3eff 	mov.w	lr, #4294967295
 8000f7e:	fa0e fc0c 	lsl.w	ip, lr, ip
 8000f82:	ea21 010c 	bic.w	r1, r1, ip
 8000f86:	4099      	lsls	r1, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000f88:	fa0e f303 	lsl.w	r3, lr, r3
 8000f8c:	ea22 0203 	bic.w	r2, r2, r3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f90:	4311      	orrs	r1, r2
  if ((int32_t)(IRQn) >= 0)
 8000f92:	2800      	cmp	r0, #0
 8000f94:	db09      	blt.n	8000faa <HAL_NVIC_SetPriority+0x56>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f96:	0109      	lsls	r1, r1, #4
 8000f98:	b2c9      	uxtb	r1, r1
 8000f9a:	f100 4060 	add.w	r0, r0, #3758096384	; 0xe0000000
 8000f9e:	f500 4061 	add.w	r0, r0, #57600	; 0xe100
 8000fa2:	f880 1300 	strb.w	r1, [r0, #768]	; 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 8000fa6:	f85d fb04 	ldr.w	pc, [sp], #4
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000faa:	f000 000f 	and.w	r0, r0, #15
 8000fae:	0109      	lsls	r1, r1, #4
 8000fb0:	b2c9      	uxtb	r1, r1
 8000fb2:	4b02      	ldr	r3, [pc, #8]	; (8000fbc <HAL_NVIC_SetPriority+0x68>)
 8000fb4:	5419      	strb	r1, [r3, r0]
 8000fb6:	e7f6      	b.n	8000fa6 <HAL_NVIC_SetPriority+0x52>
 8000fb8:	e000ed00 	.word	0xe000ed00
 8000fbc:	e000ed14 	.word	0xe000ed14

08000fc0 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8000fc0:	2800      	cmp	r0, #0
 8000fc2:	db08      	blt.n	8000fd6 <HAL_NVIC_EnableIRQ+0x16>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000fc4:	0942      	lsrs	r2, r0, #5
 8000fc6:	f000 001f 	and.w	r0, r0, #31
 8000fca:	2301      	movs	r3, #1
 8000fcc:	fa03 f000 	lsl.w	r0, r3, r0
 8000fd0:	4b01      	ldr	r3, [pc, #4]	; (8000fd8 <HAL_NVIC_EnableIRQ+0x18>)
 8000fd2:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 8000fd6:	4770      	bx	lr
 8000fd8:	e000e100 	.word	0xe000e100

08000fdc <ETH_UpdateDescriptor>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_UpdateDescriptor(ETH_HandleTypeDef *heth)
{
 8000fdc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8000fe0:	b083      	sub	sp, #12
  uint32_t descidx;
  uint32_t desccount;
  ETH_DMADescTypeDef *dmarxdesc;
  uint8_t *buff = NULL;
 8000fe2:	2300      	movs	r3, #0
 8000fe4:	9301      	str	r3, [sp, #4]
  uint8_t allocStatus = 1U;

  descidx = heth->RxDescList.RxBuildDescIdx;
 8000fe6:	6e87      	ldr	r7, [r0, #104]	; 0x68
  dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 8000fe8:	f107 0312 	add.w	r3, r7, #18
 8000fec:	f850 4023 	ldr.w	r4, [r0, r3, lsl #2]
  desccount = heth->RxDescList.RxBuildDescCnt;
 8000ff0:	6ec5      	ldr	r5, [r0, #108]	; 0x6c

  while ((desccount > 0U) && (allocStatus != 0U))
 8000ff2:	2d00      	cmp	r5, #0
 8000ff4:	d035      	beq.n	8001062 <ETH_UpdateDescriptor+0x86>
 8000ff6:	4606      	mov	r6, r0
      {
        WRITE_REG(dmarxdesc->DESC1, ETH_DMARXDESC_DIC | ETH_RX_BUF_SIZE | ETH_DMARXDESC_RCH);
      }
      else
      {
        WRITE_REG(dmarxdesc->DESC1, ETH_RX_BUF_SIZE | ETH_DMARXDESC_RCH);
 8000ff8:	f244 59f8 	movw	r9, #17912	; 0x45f8
        WRITE_REG(dmarxdesc->DESC1, ETH_DMARXDESC_DIC | ETH_RX_BUF_SIZE | ETH_DMARXDESC_RCH);
 8000ffc:	f8df 8068 	ldr.w	r8, [pc, #104]	; 8001068 <ETH_UpdateDescriptor+0x8c>
 8001000:	e01a      	b.n	8001038 <ETH_UpdateDescriptor+0x5c>
      HAL_ETH_RxAllocateCallback(&buff);
 8001002:	a801      	add	r0, sp, #4
 8001004:	f002 fbec 	bl	80037e0 <HAL_ETH_RxAllocateCallback>
      if (buff == NULL)
 8001008:	9b01      	ldr	r3, [sp, #4]
 800100a:	b1f3      	cbz	r3, 800104a <ETH_UpdateDescriptor+0x6e>
        WRITE_REG(dmarxdesc->BackupAddr0, (uint32_t)buff);
 800100c:	6223      	str	r3, [r4, #32]
        WRITE_REG(dmarxdesc->DESC2, (uint32_t)buff);
 800100e:	60a3      	str	r3, [r4, #8]
 8001010:	e015      	b.n	800103e <ETH_UpdateDescriptor+0x62>
        WRITE_REG(dmarxdesc->DESC1, ETH_RX_BUF_SIZE | ETH_DMARXDESC_RCH);
 8001012:	f8c4 9004 	str.w	r9, [r4, #4]
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 8001016:	f3bf 8f5f 	dmb	sy
         is fully performed.
         The __DMB() instruction is added to avoid any potential compiler optimization that
         may lead to abnormal behavior. */
      __DMB();

      SET_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_OWN);
 800101a:	6823      	ldr	r3, [r4, #0]
 800101c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8001020:	6023      	str	r3, [r4, #0]

      /* Increment current rx descriptor index */
      INCR_RX_DESC_INDEX(descidx, 1U);
 8001022:	1c7b      	adds	r3, r7, #1
 8001024:	2b03      	cmp	r3, #3
 8001026:	bf8c      	ite	hi
 8001028:	3f03      	subhi	r7, #3
 800102a:	461f      	movls	r7, r3
      /* Get current descriptor address */
      dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 800102c:	f107 0312 	add.w	r3, r7, #18
 8001030:	f856 4023 	ldr.w	r4, [r6, r3, lsl #2]
  while ((desccount > 0U) && (allocStatus != 0U))
 8001034:	3d01      	subs	r5, #1
 8001036:	d009      	beq.n	800104c <ETH_UpdateDescriptor+0x70>
    if (READ_REG(dmarxdesc->BackupAddr0) == 0U)
 8001038:	6a23      	ldr	r3, [r4, #32]
 800103a:	2b00      	cmp	r3, #0
 800103c:	d0e1      	beq.n	8001002 <ETH_UpdateDescriptor+0x26>
      if (heth->RxDescList.ItMode == 0U)
 800103e:	6db3      	ldr	r3, [r6, #88]	; 0x58
 8001040:	2b00      	cmp	r3, #0
 8001042:	d1e6      	bne.n	8001012 <ETH_UpdateDescriptor+0x36>
        WRITE_REG(dmarxdesc->DESC1, ETH_DMARXDESC_DIC | ETH_RX_BUF_SIZE | ETH_DMARXDESC_RCH);
 8001044:	f8c4 8004 	str.w	r8, [r4, #4]
 8001048:	e7e5      	b.n	8001016 <ETH_UpdateDescriptor+0x3a>
  while ((desccount > 0U) && (allocStatus != 0U))
 800104a:	b905      	cbnz	r5, 800104e <ETH_UpdateDescriptor+0x72>
      INCR_RX_DESC_INDEX(descidx, 1U);
 800104c:	2500      	movs	r5, #0
      desccount--;
    }
  }

  if (heth->RxDescList.RxBuildDescCnt != desccount)
 800104e:	6ef3      	ldr	r3, [r6, #108]	; 0x6c
 8001050:	42ab      	cmp	r3, r5
 8001052:	d006      	beq.n	8001062 <ETH_UpdateDescriptor+0x86>
  {
    /* Set the Tail pointer address */
    WRITE_REG(heth->Instance->DMARPDR, 0);
 8001054:	6833      	ldr	r3, [r6, #0]
 8001056:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800105a:	2200      	movs	r2, #0
 800105c:	609a      	str	r2, [r3, #8]

    heth->RxDescList.RxBuildDescIdx = descidx;
 800105e:	66b7      	str	r7, [r6, #104]	; 0x68
    heth->RxDescList.RxBuildDescCnt = desccount;
 8001060:	66f5      	str	r5, [r6, #108]	; 0x6c
  }
}
 8001062:	b003      	add	sp, #12
 8001064:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8001068:	800045f8 	.word	0x800045f8

0800106c <ETH_Prepare_Tx_Descriptors>:
  * @param  pTxConfig: Tx packet configuration
  * @param  ItMode: Enable or disable Tx EOT interrept
  * @retval Status
  */
static uint32_t ETH_Prepare_Tx_Descriptors(ETH_HandleTypeDef *heth, ETH_TxPacketConfig *pTxConfig, uint32_t ItMode)
{
 800106c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  ETH_TxDescListTypeDef *dmatxdesclist = &heth->TxDescList;
  uint32_t descidx = dmatxdesclist->CurTxDesc;
 8001070:	6a87      	ldr	r7, [r0, #40]	; 0x28
  uint32_t firstdescidx = dmatxdesclist->CurTxDesc;
  uint32_t idx;
  uint32_t descnbr = 0;
  ETH_DMADescTypeDef *dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8001072:	eb00 0c87 	add.w	ip, r0, r7, lsl #2
 8001076:	f8dc 3018 	ldr.w	r3, [ip, #24]

  ETH_BufferTypeDef  *txbuffer = pTxConfig->TxBuffer;
  uint32_t           bd_count = 0;

  /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
  if ((READ_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN) == ETH_DMATXDESC_OWN)
 800107a:	681c      	ldr	r4, [r3, #0]
 800107c:	2c00      	cmp	r4, #0
 800107e:	f2c0 80ad 	blt.w	80011dc <ETH_Prepare_Tx_Descriptors+0x170>
 8001082:	4690      	mov	r8, r2
      || (dmatxdesclist->PacketAddress[descidx] != NULL))
 8001084:	f8dc 402c 	ldr.w	r4, [ip, #44]	; 0x2c
 8001088:	2c00      	cmp	r4, #0
 800108a:	f040 80a9 	bne.w	80011e0 <ETH_Prepare_Tx_Descriptors+0x174>
  ETH_BufferTypeDef  *txbuffer = pTxConfig->TxBuffer;
 800108e:	688c      	ldr	r4, [r1, #8]


  descnbr += 1U;

  /* Set header or buffer 1 address */
  WRITE_REG(dmatxdesc->DESC2, (uint32_t)txbuffer->buffer);
 8001090:	6825      	ldr	r5, [r4, #0]
 8001092:	609d      	str	r5, [r3, #8]

  /* Set header or buffer 1 Length */
  MODIFY_REG(dmatxdesc->DESC1, ETH_DMATXDESC_TBS1, txbuffer->len);
 8001094:	685e      	ldr	r6, [r3, #4]
 8001096:	f426 56ff 	bic.w	r6, r6, #8160	; 0x1fe0
 800109a:	f026 061f 	bic.w	r6, r6, #31
 800109e:	6865      	ldr	r5, [r4, #4]
 80010a0:	4335      	orrs	r5, r6
 80010a2:	605d      	str	r5, [r3, #4]

  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CSUM) != 0U)
 80010a4:	680d      	ldr	r5, [r1, #0]
 80010a6:	f015 0f01 	tst.w	r5, #1
 80010aa:	d005      	beq.n	80010b8 <ETH_Prepare_Tx_Descriptors+0x4c>
  {
    MODIFY_REG(dmatxdesc->DESC0, ETH_DMATXDESC_CIC, pTxConfig->ChecksumCtrl);
 80010ac:	681e      	ldr	r6, [r3, #0]
 80010ae:	f426 0640 	bic.w	r6, r6, #12582912	; 0xc00000
 80010b2:	694d      	ldr	r5, [r1, #20]
 80010b4:	4335      	orrs	r5, r6
 80010b6:	601d      	str	r5, [r3, #0]
  }

  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CRCPAD) != 0U)
 80010b8:	680d      	ldr	r5, [r1, #0]
 80010ba:	f015 0f20 	tst.w	r5, #32
 80010be:	d005      	beq.n	80010cc <ETH_Prepare_Tx_Descriptors+0x60>
  {
    MODIFY_REG(dmatxdesc->DESC0, ETH_CRC_PAD_DISABLE, pTxConfig->CRCPadCtrl);
 80010c0:	681e      	ldr	r6, [r3, #0]
 80010c2:	f026 6640 	bic.w	r6, r6, #201326592	; 0xc000000
 80010c6:	690d      	ldr	r5, [r1, #16]
 80010c8:	4335      	orrs	r5, r6
 80010ca:	601d      	str	r5, [r3, #0]
  }


  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_VLANTAG) != 0U)
 80010cc:	6809      	ldr	r1, [r1, #0]
 80010ce:	f011 0f04 	tst.w	r1, #4
 80010d2:	d003      	beq.n	80010dc <ETH_Prepare_Tx_Descriptors+0x70>
  {
    /* Set Vlan Type */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_VF);
 80010d4:	6819      	ldr	r1, [r3, #0]
 80010d6:	f041 0180 	orr.w	r1, r1, #128	; 0x80
 80010da:	6019      	str	r1, [r3, #0]
  }

  /* Mark it as First Descriptor */
  SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_FS);
 80010dc:	6819      	ldr	r1, [r3, #0]
 80010de:	f041 5180 	orr.w	r1, r1, #268435456	; 0x10000000
 80010e2:	6019      	str	r1, [r3, #0]
 80010e4:	f3bf 8f5f 	dmb	sy

  /* Ensure rest of descriptor is written to RAM before the OWN bit */
  __DMB();
  /* set OWN bit of FIRST descriptor */
  SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN);
 80010e8:	6819      	ldr	r1, [r3, #0]
 80010ea:	f041 4100 	orr.w	r1, r1, #2147483648	; 0x80000000
 80010ee:	6019      	str	r1, [r3, #0]

  /* only if the packet is split into more than one descriptors > 1 */
  while (txbuffer->next != NULL)
 80010f0:	68a1      	ldr	r1, [r4, #8]
 80010f2:	2900      	cmp	r1, #0
 80010f4:	d053      	beq.n	800119e <ETH_Prepare_Tx_Descriptors+0x132>
  uint32_t descidx = dmatxdesclist->CurTxDesc;
 80010f6:	463d      	mov	r5, r7
  while (txbuffer->next != NULL)
 80010f8:	2601      	movs	r6, #1
 80010fa:	e02c      	b.n	8001156 <ETH_Prepare_Tx_Descriptors+0xea>
      SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
    }
    else
    {
      /* Clear Interrupt on completion bit */
      CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 80010fc:	6819      	ldr	r1, [r3, #0]
 80010fe:	f021 4180 	bic.w	r1, r1, #1073741824	; 0x40000000
 8001102:	6019      	str	r1, [r3, #0]
    }
    /* Increment current tx descriptor index */
    INCR_TX_DESC_INDEX(descidx, 1U);
 8001104:	1c6b      	adds	r3, r5, #1
 8001106:	2b03      	cmp	r3, #3
 8001108:	bf8c      	ite	hi
 800110a:	3d03      	subhi	r5, #3
 800110c:	461d      	movls	r5, r3
    /* Get current descriptor address */
    dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 800110e:	eb00 0e85 	add.w	lr, r0, r5, lsl #2
 8001112:	f8de 3018 	ldr.w	r3, [lr, #24]

    /* Clear the FD bit of new Descriptor */
    CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_FS);
 8001116:	6819      	ldr	r1, [r3, #0]
 8001118:	f021 5180 	bic.w	r1, r1, #268435456	; 0x10000000
 800111c:	6019      	str	r1, [r3, #0]

    /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
    if ((READ_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN) == ETH_DMATXDESC_OWN)
 800111e:	6819      	ldr	r1, [r3, #0]
 8001120:	2900      	cmp	r1, #0
 8001122:	db24      	blt.n	800116e <ETH_Prepare_Tx_Descriptors+0x102>
        || (dmatxdesclist->PacketAddress[descidx] != NULL))
 8001124:	f8de 102c 	ldr.w	r1, [lr, #44]	; 0x2c
 8001128:	bb09      	cbnz	r1, 800116e <ETH_Prepare_Tx_Descriptors+0x102>
    }

    descnbr += 1U;

    /* Get the next Tx buffer in the list */
    txbuffer = txbuffer->next;
 800112a:	68a4      	ldr	r4, [r4, #8]

    /* Set header or buffer 1 address */
    WRITE_REG(dmatxdesc->DESC2, (uint32_t)txbuffer->buffer);
 800112c:	6821      	ldr	r1, [r4, #0]
 800112e:	6099      	str	r1, [r3, #8]

    /* Set header or buffer 1 Length */
    MODIFY_REG(dmatxdesc->DESC1, ETH_DMATXDESC_TBS1, txbuffer->len);
 8001130:	6859      	ldr	r1, [r3, #4]
 8001132:	f421 51ff 	bic.w	r1, r1, #8160	; 0x1fe0
 8001136:	f021 011f 	bic.w	r1, r1, #31
 800113a:	6862      	ldr	r2, [r4, #4]
 800113c:	4311      	orrs	r1, r2
 800113e:	6059      	str	r1, [r3, #4]
 8001140:	f3bf 8f5f 	dmb	sy
    bd_count += 1U;

    /* Ensure rest of descriptor is written to RAM before the OWN bit */
    __DMB();
    /* Set Own bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN);
 8001144:	6819      	ldr	r1, [r3, #0]
 8001146:	f041 4100 	orr.w	r1, r1, #2147483648	; 0x80000000
 800114a:	6019      	str	r1, [r3, #0]
  while (txbuffer->next != NULL)
 800114c:	f106 0e01 	add.w	lr, r6, #1
 8001150:	68a1      	ldr	r1, [r4, #8]
 8001152:	b331      	cbz	r1, 80011a2 <ETH_Prepare_Tx_Descriptors+0x136>
 8001154:	4676      	mov	r6, lr
    CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_LS);
 8001156:	6819      	ldr	r1, [r3, #0]
 8001158:	f021 5100 	bic.w	r1, r1, #536870912	; 0x20000000
 800115c:	6019      	str	r1, [r3, #0]
    if (ItMode != ((uint32_t)RESET))
 800115e:	f1b8 0f00 	cmp.w	r8, #0
 8001162:	d0cb      	beq.n	80010fc <ETH_Prepare_Tx_Descriptors+0x90>
      SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 8001164:	6819      	ldr	r1, [r3, #0]
 8001166:	f041 4180 	orr.w	r1, r1, #1073741824	; 0x40000000
 800116a:	6019      	str	r1, [r3, #0]
 800116c:	e7ca      	b.n	8001104 <ETH_Prepare_Tx_Descriptors+0x98>
      dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 800116e:	f8dc 2018 	ldr.w	r2, [ip, #24]
      for (idx = 0; idx < descnbr; idx ++)
 8001172:	2e00      	cmp	r6, #0
 8001174:	d037      	beq.n	80011e6 <ETH_Prepare_Tx_Descriptors+0x17a>
 8001176:	2100      	movs	r1, #0
 8001178:	f3bf 8f5f 	dmb	sy
        CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN);
 800117c:	6813      	ldr	r3, [r2, #0]
 800117e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8001182:	6013      	str	r3, [r2, #0]
        INCR_TX_DESC_INDEX(descidx, 1U);
 8001184:	1c7b      	adds	r3, r7, #1
 8001186:	2b03      	cmp	r3, #3
 8001188:	bf8c      	ite	hi
 800118a:	3f03      	subhi	r7, #3
 800118c:	461f      	movls	r7, r3
        dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 800118e:	eb00 0387 	add.w	r3, r0, r7, lsl #2
 8001192:	699a      	ldr	r2, [r3, #24]
      for (idx = 0; idx < descnbr; idx ++)
 8001194:	3101      	adds	r1, #1
 8001196:	428e      	cmp	r6, r1
 8001198:	d1ee      	bne.n	8001178 <ETH_Prepare_Tx_Descriptors+0x10c>
      return HAL_ETH_ERROR_BUSY;
 800119a:	2002      	movs	r0, #2
 800119c:	e021      	b.n	80011e2 <ETH_Prepare_Tx_Descriptors+0x176>
  uint32_t descidx = dmatxdesclist->CurTxDesc;
 800119e:	463d      	mov	r5, r7
  uint32_t           bd_count = 0;
 80011a0:	2600      	movs	r6, #0
  }

  if (ItMode != ((uint32_t)RESET))
 80011a2:	f1b8 0f00 	cmp.w	r8, #0
 80011a6:	d014      	beq.n	80011d2 <ETH_Prepare_Tx_Descriptors+0x166>
  {
    /* Set Interrupt on completion bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 80011a8:	681a      	ldr	r2, [r3, #0]
 80011aa:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80011ae:	601a      	str	r2, [r3, #0]
    /* Clear Interrupt on completion bit */
    CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
  }

  /* Mark it as LAST descriptor */
  SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_LS);
 80011b0:	681a      	ldr	r2, [r3, #0]
 80011b2:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 80011b6:	601a      	str	r2, [r3, #0]
  /* Save the current packet address to expose it to the application */
  dmatxdesclist->PacketAddress[descidx] = dmatxdesclist->CurrentPacketAddress;
 80011b8:	eb00 0385 	add.w	r3, r0, r5, lsl #2
 80011bc:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 80011be:	62da      	str	r2, [r3, #44]	; 0x2c

  dmatxdesclist->CurTxDesc = descidx;
 80011c0:	6285      	str	r5, [r0, #40]	; 0x28
  __ASM volatile ("cpsid i" : : : "memory");
 80011c2:	b672      	cpsid	i

  /* disable the interrupt */
  __disable_irq();

  dmatxdesclist->BuffersInUse += bd_count + 1U;
 80011c4:	6c03      	ldr	r3, [r0, #64]	; 0x40
 80011c6:	3301      	adds	r3, #1
 80011c8:	441e      	add	r6, r3
 80011ca:	6406      	str	r6, [r0, #64]	; 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 80011cc:	b662      	cpsie	i
  /* Enable interrupts back */
  __enable_irq();


  /* Return function status */
  return HAL_ETH_ERROR_NONE;
 80011ce:	2000      	movs	r0, #0
 80011d0:	e007      	b.n	80011e2 <ETH_Prepare_Tx_Descriptors+0x176>
    CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 80011d2:	681a      	ldr	r2, [r3, #0]
 80011d4:	f022 4280 	bic.w	r2, r2, #1073741824	; 0x40000000
 80011d8:	601a      	str	r2, [r3, #0]
 80011da:	e7e9      	b.n	80011b0 <ETH_Prepare_Tx_Descriptors+0x144>
    return HAL_ETH_ERROR_BUSY;
 80011dc:	2002      	movs	r0, #2
 80011de:	e000      	b.n	80011e2 <ETH_Prepare_Tx_Descriptors+0x176>
 80011e0:	2002      	movs	r0, #2
}
 80011e2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      return HAL_ETH_ERROR_BUSY;
 80011e6:	2002      	movs	r0, #2
 80011e8:	e7fb      	b.n	80011e2 <ETH_Prepare_Tx_Descriptors+0x176>
	...

080011ec <ETH_SetMACConfig>:
{
 80011ec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80011f0:	4605      	mov	r5, r0
 80011f2:	460c      	mov	r4, r1
  tmpreg1 = (heth->Instance)->MACCR;
 80011f4:	6801      	ldr	r1, [r0, #0]
 80011f6:	680b      	ldr	r3, [r1, #0]
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 80011f8:	4e3b      	ldr	r6, [pc, #236]	; (80012e8 <ETH_SetMACConfig+0xfc>)
 80011fa:	401e      	ands	r6, r3
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 80011fc:	7c23      	ldrb	r3, [r4, #16]
 80011fe:	2b00      	cmp	r3, #0
 8001200:	bf0c      	ite	eq
 8001202:	f44f 0e00 	moveq.w	lr, #8388608	; 0x800000
 8001206:	f04f 0e00 	movne.w	lr, #0
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 800120a:	7c63      	ldrb	r3, [r4, #17]
 800120c:	2b00      	cmp	r3, #0
 800120e:	bf0c      	ite	eq
 8001210:	f44f 0c80 	moveq.w	ip, #4194304	; 0x400000
 8001214:	f04f 0c00 	movne.w	ip, #0
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 8001218:	f894 801f 	ldrb.w	r8, [r4, #31]
 800121c:	68a3      	ldr	r3, [r4, #8]
 800121e:	6962      	ldr	r2, [r4, #20]
 8001220:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 8001222:	7fa2      	ldrb	r2, [r4, #30]
 8001224:	2a00      	cmp	r2, #0
 8001226:	bf0c      	ite	eq
 8001228:	f44f 5000 	moveq.w	r0, #8192	; 0x2000
 800122c:	2000      	movne	r0, #0
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 800122e:	f894 901c 	ldrb.w	r9, [r4, #28]
 8001232:	69a2      	ldr	r2, [r4, #24]
 8001234:	4313      	orrs	r3, r2
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 8001236:	7927      	ldrb	r7, [r4, #4]
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 8001238:	f894 2020 	ldrb.w	r2, [r4, #32]
 800123c:	2a00      	cmp	r2, #0
 800123e:	bf0c      	ite	eq
 8001240:	f44f 7a00 	moveq.w	sl, #512	; 0x200
 8001244:	f04f 0a00 	movne.w	sl, #0
 8001248:	6a62      	ldr	r2, [r4, #36]	; 0x24
 800124a:	4313      	orrs	r3, r2
 800124c:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8001250:	ea43 3309 	orr.w	r3, r3, r9, lsl #12
 8001254:	ea43 2387 	orr.w	r3, r3, r7, lsl #10
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8001258:	7be7      	ldrb	r7, [r4, #15]
 800125a:	ea43 13c7 	orr.w	r3, r3, r7, lsl #7
                        ((uint32_t)macconf->DeferralCheck << 4U));
 800125e:	f894 7028 	ldrb.w	r7, [r4, #40]	; 0x28
 8001262:	ea43 1307 	orr.w	r3, r3, r7, lsl #4
 8001266:	4333      	orrs	r3, r6
 8001268:	ea43 030e 	orr.w	r3, r3, lr
 800126c:	ea43 030c 	orr.w	r3, r3, ip
 8001270:	4303      	orrs	r3, r0
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8001272:	ea43 030a 	orr.w	r3, r3, sl
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 8001276:	600b      	str	r3, [r1, #0]
  tmpreg1 = (heth->Instance)->MACCR;
 8001278:	682b      	ldr	r3, [r5, #0]
 800127a:	681e      	ldr	r6, [r3, #0]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 800127c:	2001      	movs	r0, #1
 800127e:	f7ff fe43 	bl	8000f08 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 8001282:	682b      	ldr	r3, [r5, #0]
 8001284:	601e      	str	r6, [r3, #0]
  tmpreg1 = (heth->Instance)->MACFCR;
 8001286:	6828      	ldr	r0, [r5, #0]
 8001288:	6981      	ldr	r1, [r0, #24]
  tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 800128a:	f021 01be 	bic.w	r1, r1, #190	; 0xbe
 800128e:	0409      	lsls	r1, r1, #16
 8001290:	0c09      	lsrs	r1, r1, #16
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8001292:	6ca6      	ldr	r6, [r4, #72]	; 0x48
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 8001294:	f894 304c 	ldrb.w	r3, [r4, #76]	; 0x4c
 8001298:	2b00      	cmp	r3, #0
 800129a:	bf0c      	ite	eq
 800129c:	2380      	moveq	r3, #128	; 0x80
 800129e:	2300      	movne	r3, #0
 80012a0:	6d22      	ldr	r2, [r4, #80]	; 0x50
 80012a2:	ea42 4206 	orr.w	r2, r2, r6, lsl #16
 80012a6:	430a      	orrs	r2, r1
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 80012a8:	f894 1055 	ldrb.w	r1, [r4, #85]	; 0x55
 80012ac:	2901      	cmp	r1, #1
 80012ae:	bf0c      	ite	eq
 80012b0:	2108      	moveq	r1, #8
 80012b2:	2100      	movne	r1, #0
 80012b4:	431a      	orrs	r2, r3
                        ((uint32_t)((macconf->ReceiveFlowControl == ENABLE) ? 1U : 0U) << 2U) |
 80012b6:	f894 3056 	ldrb.w	r3, [r4, #86]	; 0x56
 80012ba:	2b01      	cmp	r3, #1
 80012bc:	bf0c      	ite	eq
 80012be:	2304      	moveq	r3, #4
 80012c0:	2300      	movne	r3, #0
 80012c2:	430a      	orrs	r2, r1
                        ((uint32_t)((macconf->TransmitFlowControl == ENABLE) ? 1U : 0U) << 1U));
 80012c4:	f894 1054 	ldrb.w	r1, [r4, #84]	; 0x54
 80012c8:	2901      	cmp	r1, #1
 80012ca:	bf0c      	ite	eq
 80012cc:	2102      	moveq	r1, #2
 80012ce:	2100      	movne	r1, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 80012d0:	4313      	orrs	r3, r2
 80012d2:	430b      	orrs	r3, r1
  (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 80012d4:	6183      	str	r3, [r0, #24]
  tmpreg1 = (heth->Instance)->MACFCR;
 80012d6:	682b      	ldr	r3, [r5, #0]
 80012d8:	699c      	ldr	r4, [r3, #24]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80012da:	2001      	movs	r0, #1
 80012dc:	f7ff fe14 	bl	8000f08 <HAL_Delay>
  (heth->Instance)->MACFCR = tmpreg1;
 80012e0:	682b      	ldr	r3, [r5, #0]
 80012e2:	619c      	str	r4, [r3, #24]
}
 80012e4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80012e8:	ff20810f 	.word	0xff20810f

080012ec <ETH_SetDMAConfig>:
{
 80012ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80012ee:	4605      	mov	r5, r0
 80012f0:	460c      	mov	r4, r1
  tmpreg1 = (heth->Instance)->DMAOMR;
 80012f2:	6802      	ldr	r2, [r0, #0]
 80012f4:	f502 5380 	add.w	r3, r2, #4096	; 0x1000
 80012f8:	699b      	ldr	r3, [r3, #24]
  tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 80012fa:	482c      	ldr	r0, [pc, #176]	; (80013ac <ETH_SetDMAConfig+0xc0>)
 80012fc:	4018      	ands	r0, r3
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 80012fe:	7b0b      	ldrb	r3, [r1, #12]
 8001300:	2b00      	cmp	r3, #0
 8001302:	bf0c      	ite	eq
 8001304:	f04f 6680 	moveq.w	r6, #67108864	; 0x4000000
 8001308:	2600      	movne	r6, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 800130a:	f891 c00d 	ldrb.w	ip, [r1, #13]
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 800130e:	7f4b      	ldrb	r3, [r1, #29]
 8001310:	2b00      	cmp	r3, #0
 8001312:	bf0c      	ite	eq
 8001314:	f44f 1180 	moveq.w	r1, #1048576	; 0x100000
 8001318:	2100      	movne	r1, #0
 800131a:	6963      	ldr	r3, [r4, #20]
 800131c:	6a27      	ldr	r7, [r4, #32]
 800131e:	433b      	orrs	r3, r7
 8001320:	ea43 634c 	orr.w	r3, r3, ip, lsl #25
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8001324:	f894 c00e 	ldrb.w	ip, [r4, #14]
 8001328:	ea43 534c 	orr.w	r3, r3, ip, lsl #21
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 800132c:	f894 c01c 	ldrb.w	ip, [r4, #28]
 8001330:	ea43 13cc 	orr.w	r3, r3, ip, lsl #7
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 8001334:	f894 c01e 	ldrb.w	ip, [r4, #30]
 8001338:	ea43 138c 	orr.w	r3, r3, ip, lsl #6
                        ((uint32_t)dmaconf->SecondFrameOperate << 2U));
 800133c:	f894 c024 	ldrb.w	ip, [r4, #36]	; 0x24
 8001340:	ea43 038c 	orr.w	r3, r3, ip, lsl #2
 8001344:	4303      	orrs	r3, r0
 8001346:	4333      	orrs	r3, r6
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8001348:	430b      	orrs	r3, r1
  (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 800134a:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800134e:	6193      	str	r3, [r2, #24]
  tmpreg1 = (heth->Instance)->DMAOMR;
 8001350:	682b      	ldr	r3, [r5, #0]
 8001352:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001356:	699e      	ldr	r6, [r3, #24]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8001358:	2001      	movs	r0, #1
 800135a:	f7ff fdd5 	bl	8000f08 <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 800135e:	682b      	ldr	r3, [r5, #0]
 8001360:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001364:	619e      	str	r6, [r3, #24]
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8001366:	682a      	ldr	r2, [r5, #0]
                                        (dmaconf->DescriptorSkipLength << 2U) |
 8001368:	68a3      	ldr	r3, [r4, #8]
 800136a:	69a1      	ldr	r1, [r4, #24]
 800136c:	430b      	orrs	r3, r1
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 800136e:	f894 1025 	ldrb.w	r1, [r4, #37]	; 0x25
                                        (dmaconf->DescriptorSkipLength << 2U) |
 8001372:	ea43 13c1 	orr.w	r3, r3, r1, lsl #7
 8001376:	6921      	ldr	r1, [r4, #16]
 8001378:	430b      	orrs	r3, r1
 800137a:	6821      	ldr	r1, [r4, #0]
 800137c:	430b      	orrs	r3, r1
 800137e:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 8001380:	ea43 0381 	orr.w	r3, r3, r1, lsl #2
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8001384:	7921      	ldrb	r1, [r4, #4]
                                        (dmaconf->DescriptorSkipLength << 2U) |
 8001386:	ea43 6341 	orr.w	r3, r3, r1, lsl #25
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 800138a:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800138e:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001392:	6013      	str	r3, [r2, #0]
  tmpreg1 = (heth->Instance)->DMABMR;
 8001394:	682b      	ldr	r3, [r5, #0]
 8001396:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800139a:	681c      	ldr	r4, [r3, #0]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 800139c:	2001      	movs	r0, #1
 800139e:	f7ff fdb3 	bl	8000f08 <HAL_Delay>
  (heth->Instance)->DMABMR = tmpreg1;
 80013a2:	682b      	ldr	r3, [r5, #0]
 80013a4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80013a8:	601c      	str	r4, [r3, #0]
}
 80013aa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80013ac:	f8de3f23 	.word	0xf8de3f23

080013b0 <ETH_FlushTransmitFIFO>:
{
 80013b0:	b510      	push	{r4, lr}
 80013b2:	b082      	sub	sp, #8
 80013b4:	4604      	mov	r4, r0
  __IO uint32_t tmpreg = 0;
 80013b6:	2300      	movs	r3, #0
 80013b8:	9301      	str	r3, [sp, #4]
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_FTF;
 80013ba:	6803      	ldr	r3, [r0, #0]
 80013bc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80013c0:	699a      	ldr	r2, [r3, #24]
 80013c2:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 80013c6:	619a      	str	r2, [r3, #24]
  tmpreg = (heth->Instance)->DMAOMR;
 80013c8:	6803      	ldr	r3, [r0, #0]
 80013ca:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80013ce:	699b      	ldr	r3, [r3, #24]
 80013d0:	9301      	str	r3, [sp, #4]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80013d2:	2001      	movs	r0, #1
 80013d4:	f7ff fd98 	bl	8000f08 <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg;
 80013d8:	6823      	ldr	r3, [r4, #0]
 80013da:	9a01      	ldr	r2, [sp, #4]
 80013dc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80013e0:	619a      	str	r2, [r3, #24]
}
 80013e2:	b002      	add	sp, #8
 80013e4:	bd10      	pop	{r4, pc}
	...

080013e8 <HAL_ETH_Init>:
  if (heth == NULL)
 80013e8:	2800      	cmp	r0, #0
 80013ea:	f000 8109 	beq.w	8001600 <HAL_ETH_Init+0x218>
{
 80013ee:	b5f0      	push	{r4, r5, r6, r7, lr}
 80013f0:	b0a7      	sub	sp, #156	; 0x9c
 80013f2:	4605      	mov	r5, r0
  if (heth->gState == HAL_ETH_STATE_RESET)
 80013f4:	f8d0 3084 	ldr.w	r3, [r0, #132]	; 0x84
 80013f8:	2b00      	cmp	r3, #0
 80013fa:	d034      	beq.n	8001466 <HAL_ETH_Init+0x7e>
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80013fc:	2300      	movs	r3, #0
 80013fe:	9301      	str	r3, [sp, #4]
 8001400:	4b80      	ldr	r3, [pc, #512]	; (8001604 <HAL_ETH_Init+0x21c>)
 8001402:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001404:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8001408:	645a      	str	r2, [r3, #68]	; 0x44
 800140a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800140c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001410:	9301      	str	r3, [sp, #4]
 8001412:	9b01      	ldr	r3, [sp, #4]
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 8001414:	4b7c      	ldr	r3, [pc, #496]	; (8001608 <HAL_ETH_Init+0x220>)
 8001416:	685a      	ldr	r2, [r3, #4]
 8001418:	f422 0200 	bic.w	r2, r2, #8388608	; 0x800000
 800141c:	605a      	str	r2, [r3, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 800141e:	685a      	ldr	r2, [r3, #4]
 8001420:	68a9      	ldr	r1, [r5, #8]
 8001422:	430a      	orrs	r2, r1
 8001424:	605a      	str	r2, [r3, #4]
  (void)SYSCFG->PMC;
 8001426:	685b      	ldr	r3, [r3, #4]
  SET_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR);
 8001428:	682b      	ldr	r3, [r5, #0]
 800142a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800142e:	681a      	ldr	r2, [r3, #0]
 8001430:	f042 0201 	orr.w	r2, r2, #1
 8001434:	601a      	str	r2, [r3, #0]
  tickstart = HAL_GetTick();
 8001436:	f7ff fd61 	bl	8000efc <HAL_GetTick>
 800143a:	4606      	mov	r6, r0
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 800143c:	682b      	ldr	r3, [r5, #0]
 800143e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001442:	681c      	ldr	r4, [r3, #0]
 8001444:	f014 0401 	ands.w	r4, r4, #1
 8001448:	d013      	beq.n	8001472 <HAL_ETH_Init+0x8a>
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 800144a:	f7ff fd57 	bl	8000efc <HAL_GetTick>
 800144e:	1b80      	subs	r0, r0, r6
 8001450:	f5b0 7ffa 	cmp.w	r0, #500	; 0x1f4
 8001454:	d9f2      	bls.n	800143c <HAL_ETH_Init+0x54>
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 8001456:	2304      	movs	r3, #4
 8001458:	f8c5 3088 	str.w	r3, [r5, #136]	; 0x88
      heth->gState = HAL_ETH_STATE_ERROR;
 800145c:	23e0      	movs	r3, #224	; 0xe0
 800145e:	f8c5 3084 	str.w	r3, [r5, #132]	; 0x84
      return HAL_ERROR;
 8001462:	2001      	movs	r0, #1
 8001464:	e0ca      	b.n	80015fc <HAL_ETH_Init+0x214>
    heth->gState = HAL_ETH_STATE_BUSY;
 8001466:	2323      	movs	r3, #35	; 0x23
 8001468:	f8c0 3084 	str.w	r3, [r0, #132]	; 0x84
    HAL_ETH_MspInit(heth);
 800146c:	f002 f8be 	bl	80035ec <HAL_ETH_MspInit>
 8001470:	e7c4      	b.n	80013fc <HAL_ETH_Init+0x14>
  macDefaultConf.Watchdog = ENABLE;
 8001472:	2701      	movs	r7, #1
 8001474:	f88d 7044 	strb.w	r7, [sp, #68]	; 0x44
  macDefaultConf.Jabber = ENABLE;
 8001478:	f88d 7045 	strb.w	r7, [sp, #69]	; 0x45
  macDefaultConf.InterPacketGapVal = ETH_INTERFRAMEGAP_96BIT;
 800147c:	2600      	movs	r6, #0
 800147e:	960f      	str	r6, [sp, #60]	; 0x3c
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 8001480:	f88d 6053 	strb.w	r6, [sp, #83]	; 0x53
  macDefaultConf.ReceiveOwn = ENABLE;
 8001484:	f88d 7052 	strb.w	r7, [sp, #82]	; 0x52
  macDefaultConf.LoopbackMode = DISABLE;
 8001488:	f88d 6050 	strb.w	r6, [sp, #80]	; 0x50
  macDefaultConf.ChecksumOffload = ENABLE;
 800148c:	f88d 7038 	strb.w	r7, [sp, #56]	; 0x38
  macDefaultConf.RetryTransmission = DISABLE;
 8001490:	f88d 6054 	strb.w	r6, [sp, #84]	; 0x54
  macDefaultConf.AutomaticPadCRCStrip = DISABLE;
 8001494:	f88d 6043 	strb.w	r6, [sp, #67]	; 0x43
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8001498:	9616      	str	r6, [sp, #88]	; 0x58
  macDefaultConf.DeferralCheck = DISABLE;
 800149a:	f88d 605c 	strb.w	r6, [sp, #92]	; 0x5c
  macDefaultConf.PauseTime = 0x0U;
 800149e:	961f      	str	r6, [sp, #124]	; 0x7c
  macDefaultConf.ZeroQuantaPause = DISABLE;
 80014a0:	f88d 6080 	strb.w	r6, [sp, #128]	; 0x80
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 80014a4:	9621      	str	r6, [sp, #132]	; 0x84
  macDefaultConf.ReceiveFlowControl = DISABLE;
 80014a6:	f88d 608a 	strb.w	r6, [sp, #138]	; 0x8a
  macDefaultConf.TransmitFlowControl = DISABLE;
 80014aa:	f88d 6088 	strb.w	r6, [sp, #136]	; 0x88
  macDefaultConf.Speed = ETH_SPEED_100M;
 80014ae:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80014b2:	9312      	str	r3, [sp, #72]	; 0x48
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 80014b4:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80014b8:	9313      	str	r3, [sp, #76]	; 0x4c
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 80014ba:	f88d 6089 	strb.w	r6, [sp, #137]	; 0x89
  ETH_SetMACConfig(heth, &macDefaultConf);
 80014be:	a90d      	add	r1, sp, #52	; 0x34
 80014c0:	4628      	mov	r0, r5
 80014c2:	f7ff fe93 	bl	80011ec <ETH_SetMACConfig>
  dmaDefaultConf.DropTCPIPChecksumErrorFrame = ENABLE;
 80014c6:	f88d 7014 	strb.w	r7, [sp, #20]
  dmaDefaultConf.ReceiveStoreForward = ENABLE;
 80014ca:	f88d 7015 	strb.w	r7, [sp, #21]
  dmaDefaultConf.FlushRxPacket = ENABLE;
 80014ce:	f88d 7025 	strb.w	r7, [sp, #37]	; 0x25
  dmaDefaultConf.TransmitStoreForward = ENABLE;
 80014d2:	f88d 7016 	strb.w	r7, [sp, #22]
  dmaDefaultConf.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 80014d6:	9607      	str	r6, [sp, #28]
  dmaDefaultConf.ForwardErrorFrames = DISABLE;
 80014d8:	f88d 6024 	strb.w	r6, [sp, #36]	; 0x24
  dmaDefaultConf.ForwardUndersizedGoodFrames = DISABLE;
 80014dc:	f88d 6026 	strb.w	r6, [sp, #38]	; 0x26
  dmaDefaultConf.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 80014e0:	960a      	str	r6, [sp, #40]	; 0x28
  dmaDefaultConf.SecondFrameOperate = ENABLE;
 80014e2:	f88d 702c 	strb.w	r7, [sp, #44]	; 0x2c
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 80014e6:	f88d 700c 	strb.w	r7, [sp, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 80014ea:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80014ee:	9304      	str	r3, [sp, #16]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 80014f0:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80014f4:	9308      	str	r3, [sp, #32]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 80014f6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80014fa:	9306      	str	r3, [sp, #24]
  dmaDefaultConf.EnhancedDescriptorFormat = ENABLE;
 80014fc:	f88d 702d 	strb.w	r7, [sp, #45]	; 0x2d
  dmaDefaultConf.DescriptorSkipLength = 0x0U;
 8001500:	960c      	str	r6, [sp, #48]	; 0x30
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 8001502:	9602      	str	r6, [sp, #8]
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 8001504:	a902      	add	r1, sp, #8
 8001506:	4628      	mov	r0, r5
 8001508:	f7ff fef0 	bl	80012ec <ETH_SetDMAConfig>
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 800150c:	f105 0c18 	add.w	ip, r5, #24
 8001510:	4623      	mov	r3, r4
    WRITE_REG(dmatxdesc->DESC0, 0x0);
 8001512:	4630      	mov	r0, r6
 8001514:	e00a      	b.n	800152c <HAL_ETH_Init+0x144>
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc + i + 1U));
 8001516:	f103 0e28 	add.w	lr, r3, #40	; 0x28
 800151a:	68ee      	ldr	r6, [r5, #12]
 800151c:	4476      	add	r6, lr
 800151e:	60ce      	str	r6, [r1, #12]
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL);
 8001520:	58d1      	ldr	r1, [r2, r3]
 8001522:	f441 0140 	orr.w	r1, r1, #12582912	; 0xc00000
 8001526:	50d1      	str	r1, [r2, r3]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8001528:	3328      	adds	r3, #40	; 0x28
 800152a:	3701      	adds	r7, #1
    dmatxdesc = heth->Init.TxDesc + i;
 800152c:	68ea      	ldr	r2, [r5, #12]
 800152e:	18d1      	adds	r1, r2, r3
    WRITE_REG(dmatxdesc->DESC0, 0x0);
 8001530:	50d0      	str	r0, [r2, r3]
    WRITE_REG(dmatxdesc->DESC1, 0x0);
 8001532:	6048      	str	r0, [r1, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0);
 8001534:	6088      	str	r0, [r1, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0);
 8001536:	60c8      	str	r0, [r1, #12]
    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 8001538:	f84c 1b04 	str.w	r1, [ip], #4
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_TCH);
 800153c:	58d6      	ldr	r6, [r2, r3]
 800153e:	f446 1680 	orr.w	r6, r6, #1048576	; 0x100000
 8001542:	50d6      	str	r6, [r2, r3]
    if (i < ((uint32_t)ETH_TX_DESC_CNT - 1U))
 8001544:	1e7e      	subs	r6, r7, #1
 8001546:	2e02      	cmp	r6, #2
 8001548:	d9e5      	bls.n	8001516 <HAL_ETH_Init+0x12e>
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc));
 800154a:	68ee      	ldr	r6, [r5, #12]
 800154c:	60ce      	str	r6, [r1, #12]
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL);
 800154e:	58d1      	ldr	r1, [r2, r3]
 8001550:	f441 0140 	orr.w	r1, r1, #12582912	; 0xc00000
 8001554:	50d1      	str	r1, [r2, r3]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8001556:	2f03      	cmp	r7, #3
 8001558:	d9e6      	bls.n	8001528 <HAL_ETH_Init+0x140>
  heth->TxDescList.CurTxDesc = 0;
 800155a:	2300      	movs	r3, #0
 800155c:	62ab      	str	r3, [r5, #40]	; 0x28
  WRITE_REG(heth->Instance->DMATDLAR, (uint32_t) heth->Init.TxDesc);
 800155e:	682b      	ldr	r3, [r5, #0]
 8001560:	68ea      	ldr	r2, [r5, #12]
 8001562:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001566:	611a      	str	r2, [r3, #16]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8001568:	f105 0648 	add.w	r6, r5, #72	; 0x48
  WRITE_REG(heth->Instance->DMATDLAR, (uint32_t) heth->Init.TxDesc);
 800156c:	2001      	movs	r0, #1
    WRITE_REG(dmarxdesc->DESC0, 0x0);
 800156e:	2100      	movs	r1, #0
    dmarxdesc->DESC0 = ETH_DMARXDESC_OWN;
 8001570:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
    dmarxdesc->DESC1 = ETH_DMARXDESC_RCH | ETH_RX_BUF_SIZE;
 8001574:	f244 57f8 	movw	r7, #17912	; 0x45f8
 8001578:	e006      	b.n	8001588 <HAL_ETH_Init+0x1a0>
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc + i + 1U));
 800157a:	f104 0e28 	add.w	lr, r4, #40	; 0x28
 800157e:	692a      	ldr	r2, [r5, #16]
 8001580:	4472      	add	r2, lr
 8001582:	60da      	str	r2, [r3, #12]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8001584:	3428      	adds	r4, #40	; 0x28
 8001586:	3001      	adds	r0, #1
    dmarxdesc =  heth->Init.RxDesc + i;
 8001588:	692a      	ldr	r2, [r5, #16]
 800158a:	1913      	adds	r3, r2, r4
    WRITE_REG(dmarxdesc->DESC0, 0x0);
 800158c:	5111      	str	r1, [r2, r4]
    WRITE_REG(dmarxdesc->DESC1, 0x0);
 800158e:	6059      	str	r1, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0);
 8001590:	6099      	str	r1, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0);
 8001592:	60d9      	str	r1, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0);
 8001594:	6219      	str	r1, [r3, #32]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0);
 8001596:	6259      	str	r1, [r3, #36]	; 0x24
    dmarxdesc->DESC0 = ETH_DMARXDESC_OWN;
 8001598:	f842 c004 	str.w	ip, [r2, r4]
    dmarxdesc->DESC1 = ETH_DMARXDESC_RCH | ETH_RX_BUF_SIZE;
 800159c:	605f      	str	r7, [r3, #4]
    dmarxdesc->DESC1 &= ~ETH_DMARXDESC_DIC;
 800159e:	685a      	ldr	r2, [r3, #4]
 80015a0:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80015a4:	605a      	str	r2, [r3, #4]
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 80015a6:	f846 3b04 	str.w	r3, [r6], #4
    if (i < ((uint32_t)ETH_RX_DESC_CNT - 1U))
 80015aa:	1e42      	subs	r2, r0, #1
 80015ac:	2a02      	cmp	r2, #2
 80015ae:	d9e4      	bls.n	800157a <HAL_ETH_Init+0x192>
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc));
 80015b0:	692a      	ldr	r2, [r5, #16]
 80015b2:	60da      	str	r2, [r3, #12]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 80015b4:	2803      	cmp	r0, #3
 80015b6:	d9e5      	bls.n	8001584 <HAL_ETH_Init+0x19c>
  WRITE_REG(heth->RxDescList.RxDescIdx, 0);
 80015b8:	2000      	movs	r0, #0
 80015ba:	65e8      	str	r0, [r5, #92]	; 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0);
 80015bc:	6628      	str	r0, [r5, #96]	; 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0);
 80015be:	66a8      	str	r0, [r5, #104]	; 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0);
 80015c0:	66e8      	str	r0, [r5, #108]	; 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0);
 80015c2:	65a8      	str	r0, [r5, #88]	; 0x58
  WRITE_REG(heth->Instance->DMARDLAR, (uint32_t) heth->Init.RxDesc);
 80015c4:	682b      	ldr	r3, [r5, #0]
 80015c6:	692a      	ldr	r2, [r5, #16]
 80015c8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80015cc:	60da      	str	r2, [r3, #12]
  ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 80015ce:	686a      	ldr	r2, [r5, #4]
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 80015d0:	7951      	ldrb	r1, [r2, #5]
 80015d2:	7913      	ldrb	r3, [r2, #4]
 80015d4:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 80015d8:	490c      	ldr	r1, [pc, #48]	; (800160c <HAL_ETH_Init+0x224>)
 80015da:	640b      	str	r3, [r1, #64]	; 0x40
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 80015dc:	78d4      	ldrb	r4, [r2, #3]
 80015de:	7893      	ldrb	r3, [r2, #2]
 80015e0:	041b      	lsls	r3, r3, #16
 80015e2:	ea43 6304 	orr.w	r3, r3, r4, lsl #24
 80015e6:	7814      	ldrb	r4, [r2, #0]
 80015e8:	4323      	orrs	r3, r4
 80015ea:	7852      	ldrb	r2, [r2, #1]
 80015ec:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 80015f0:	644b      	str	r3, [r1, #68]	; 0x44
  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 80015f2:	f8c5 0088 	str.w	r0, [r5, #136]	; 0x88
  heth->gState = HAL_ETH_STATE_READY;
 80015f6:	2310      	movs	r3, #16
 80015f8:	f8c5 3084 	str.w	r3, [r5, #132]	; 0x84
}
 80015fc:	b027      	add	sp, #156	; 0x9c
 80015fe:	bdf0      	pop	{r4, r5, r6, r7, pc}
    return HAL_ERROR;
 8001600:	2001      	movs	r0, #1
}
 8001602:	4770      	bx	lr
 8001604:	40023800 	.word	0x40023800
 8001608:	40013800 	.word	0x40013800
 800160c:	40028000 	.word	0x40028000

08001610 <HAL_ETH_Start>:
  if (heth->gState == HAL_ETH_STATE_READY)
 8001610:	f8d0 3084 	ldr.w	r3, [r0, #132]	; 0x84
 8001614:	2b10      	cmp	r3, #16
 8001616:	d001      	beq.n	800161c <HAL_ETH_Start+0xc>
    return HAL_ERROR;
 8001618:	2001      	movs	r0, #1
}
 800161a:	4770      	bx	lr
{
 800161c:	b570      	push	{r4, r5, r6, lr}
 800161e:	4604      	mov	r4, r0
    heth->gState = HAL_ETH_STATE_BUSY;
 8001620:	2523      	movs	r5, #35	; 0x23
 8001622:	f8c0 5084 	str.w	r5, [r0, #132]	; 0x84
    heth->RxDescList.RxBuildDescCnt = ETH_RX_DESC_CNT;
 8001626:	2304      	movs	r3, #4
 8001628:	66c3      	str	r3, [r0, #108]	; 0x6c
    ETH_UpdateDescriptor(heth);
 800162a:	f7ff fcd7 	bl	8000fdc <ETH_UpdateDescriptor>
    SET_BIT(heth->Instance->MACCR, ETH_MACCR_TE);
 800162e:	6822      	ldr	r2, [r4, #0]
 8001630:	6813      	ldr	r3, [r2, #0]
 8001632:	f043 0308 	orr.w	r3, r3, #8
 8001636:	6013      	str	r3, [r2, #0]
    tmpreg1 = (heth->Instance)->MACCR;
 8001638:	6823      	ldr	r3, [r4, #0]
 800163a:	681e      	ldr	r6, [r3, #0]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 800163c:	2001      	movs	r0, #1
 800163e:	f7ff fc63 	bl	8000f08 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 8001642:	6823      	ldr	r3, [r4, #0]
 8001644:	601e      	str	r6, [r3, #0]
    SET_BIT(heth->Instance->MACCR, ETH_MACCR_RE);
 8001646:	6822      	ldr	r2, [r4, #0]
 8001648:	6813      	ldr	r3, [r2, #0]
 800164a:	f043 0304 	orr.w	r3, r3, #4
 800164e:	6013      	str	r3, [r2, #0]
    tmpreg1 = (heth->Instance)->MACCR;
 8001650:	6823      	ldr	r3, [r4, #0]
 8001652:	681e      	ldr	r6, [r3, #0]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8001654:	2001      	movs	r0, #1
 8001656:	f7ff fc57 	bl	8000f08 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 800165a:	6823      	ldr	r3, [r4, #0]
 800165c:	601e      	str	r6, [r3, #0]
    ETH_FlushTransmitFIFO(heth);
 800165e:	4620      	mov	r0, r4
 8001660:	f7ff fea6 	bl	80013b0 <ETH_FlushTransmitFIFO>
    SET_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_ST);
 8001664:	6823      	ldr	r3, [r4, #0]
 8001666:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800166a:	699a      	ldr	r2, [r3, #24]
 800166c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8001670:	619a      	str	r2, [r3, #24]
    SET_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_SR);
 8001672:	6823      	ldr	r3, [r4, #0]
 8001674:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001678:	699a      	ldr	r2, [r3, #24]
 800167a:	f042 0202 	orr.w	r2, r2, #2
 800167e:	619a      	str	r2, [r3, #24]
    heth->gState = HAL_ETH_STATE_STARTED;
 8001680:	f8c4 5084 	str.w	r5, [r4, #132]	; 0x84
    return HAL_OK;
 8001684:	2000      	movs	r0, #0
}
 8001686:	bd70      	pop	{r4, r5, r6, pc}

08001688 <HAL_ETH_Start_IT>:
{
 8001688:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if (heth->gState == HAL_ETH_STATE_READY)
 800168a:	f8d0 3084 	ldr.w	r3, [r0, #132]	; 0x84
 800168e:	2b10      	cmp	r3, #16
 8001690:	d001      	beq.n	8001696 <HAL_ETH_Start_IT+0xe>
    return HAL_ERROR;
 8001692:	2001      	movs	r0, #1
}
 8001694:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001696:	4604      	mov	r4, r0
    heth->gState = HAL_ETH_STATE_BUSY;
 8001698:	2523      	movs	r5, #35	; 0x23
 800169a:	f8c0 5084 	str.w	r5, [r0, #132]	; 0x84
    heth->RxDescList.ItMode = 1U;
 800169e:	2601      	movs	r6, #1
 80016a0:	6586      	str	r6, [r0, #88]	; 0x58
    SET_BIT(heth->Instance->MACIMR, ETH_MACIMR_TSTIM | ETH_MACIMR_PMTIM);
 80016a2:	6802      	ldr	r2, [r0, #0]
 80016a4:	6bd3      	ldr	r3, [r2, #60]	; 0x3c
 80016a6:	f443 7302 	orr.w	r3, r3, #520	; 0x208
 80016aa:	63d3      	str	r3, [r2, #60]	; 0x3c
    SET_BIT(heth->Instance->MMCRIMR, ETH_MMCRIMR_RGUFM | ETH_MMCRIMR_RFAEM | \
 80016ac:	6802      	ldr	r2, [r0, #0]
 80016ae:	f8d2 310c 	ldr.w	r3, [r2, #268]	; 0x10c
 80016b2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80016b6:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 80016ba:	f8c2 310c 	str.w	r3, [r2, #268]	; 0x10c
    SET_BIT(heth->Instance->MMCTIMR, ETH_MMCTIMR_TGFM | ETH_MMCTIMR_TGFMSCM | \
 80016be:	6802      	ldr	r2, [r0, #0]
 80016c0:	f8d2 3110 	ldr.w	r3, [r2, #272]	; 0x110
 80016c4:	f443 1303 	orr.w	r3, r3, #2146304	; 0x20c000
 80016c8:	f8c2 3110 	str.w	r3, [r2, #272]	; 0x110
    heth->RxDescList.RxBuildDescCnt = ETH_RX_DESC_CNT;
 80016cc:	2304      	movs	r3, #4
 80016ce:	66c3      	str	r3, [r0, #108]	; 0x6c
    ETH_UpdateDescriptor(heth);
 80016d0:	f7ff fc84 	bl	8000fdc <ETH_UpdateDescriptor>
    SET_BIT(heth->Instance->MACCR, ETH_MACCR_TE);
 80016d4:	6822      	ldr	r2, [r4, #0]
 80016d6:	6813      	ldr	r3, [r2, #0]
 80016d8:	f043 0308 	orr.w	r3, r3, #8
 80016dc:	6013      	str	r3, [r2, #0]
    tmpreg1 = (heth->Instance)->MACCR;
 80016de:	6823      	ldr	r3, [r4, #0]
 80016e0:	681f      	ldr	r7, [r3, #0]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 80016e2:	4630      	mov	r0, r6
 80016e4:	f7ff fc10 	bl	8000f08 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 80016e8:	6823      	ldr	r3, [r4, #0]
 80016ea:	601f      	str	r7, [r3, #0]
    SET_BIT(heth->Instance->MACCR, ETH_MACCR_RE);
 80016ec:	6822      	ldr	r2, [r4, #0]
 80016ee:	6813      	ldr	r3, [r2, #0]
 80016f0:	f043 0304 	orr.w	r3, r3, #4
 80016f4:	6013      	str	r3, [r2, #0]
    tmpreg1 = (heth->Instance)->MACCR;
 80016f6:	6823      	ldr	r3, [r4, #0]
 80016f8:	681f      	ldr	r7, [r3, #0]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 80016fa:	4630      	mov	r0, r6
 80016fc:	f7ff fc04 	bl	8000f08 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 8001700:	6823      	ldr	r3, [r4, #0]
 8001702:	601f      	str	r7, [r3, #0]
    ETH_FlushTransmitFIFO(heth);
 8001704:	4620      	mov	r0, r4
 8001706:	f7ff fe53 	bl	80013b0 <ETH_FlushTransmitFIFO>
    SET_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_ST);
 800170a:	6823      	ldr	r3, [r4, #0]
 800170c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001710:	699a      	ldr	r2, [r3, #24]
 8001712:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8001716:	619a      	str	r2, [r3, #24]
    SET_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_SR);
 8001718:	6823      	ldr	r3, [r4, #0]
 800171a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800171e:	699a      	ldr	r2, [r3, #24]
 8001720:	f042 0202 	orr.w	r2, r2, #2
 8001724:	619a      	str	r2, [r3, #24]
    __HAL_ETH_DMA_ENABLE_IT(heth, (ETH_DMAIER_NISE | ETH_DMAIER_RIE | ETH_DMAIER_TIE  |
 8001726:	6822      	ldr	r2, [r4, #0]
 8001728:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800172c:	69d3      	ldr	r3, [r2, #28]
 800172e:	f443 33d0 	orr.w	r3, r3, #106496	; 0x1a000
 8001732:	f043 03c1 	orr.w	r3, r3, #193	; 0xc1
 8001736:	61d3      	str	r3, [r2, #28]
    heth->gState = HAL_ETH_STATE_STARTED;
 8001738:	f8c4 5084 	str.w	r5, [r4, #132]	; 0x84
    return HAL_OK;
 800173c:	2000      	movs	r0, #0
 800173e:	e7a9      	b.n	8001694 <HAL_ETH_Start_IT+0xc>

08001740 <HAL_ETH_Stop_IT>:
{
 8001740:	b538      	push	{r3, r4, r5, lr}
  if (heth->gState == HAL_ETH_STATE_STARTED)
 8001742:	f8d0 3084 	ldr.w	r3, [r0, #132]	; 0x84
 8001746:	2b23      	cmp	r3, #35	; 0x23
 8001748:	d001      	beq.n	800174e <HAL_ETH_Stop_IT+0xe>
    return HAL_ERROR;
 800174a:	2001      	movs	r0, #1
}
 800174c:	bd38      	pop	{r3, r4, r5, pc}
 800174e:	4604      	mov	r4, r0
    heth->gState = HAL_ETH_STATE_BUSY;
 8001750:	f8c0 3084 	str.w	r3, [r0, #132]	; 0x84
    __HAL_ETH_DMA_DISABLE_IT(heth, (ETH_DMAIER_NISE | ETH_DMAIER_RIE | ETH_DMAIER_TIE  |
 8001754:	6802      	ldr	r2, [r0, #0]
 8001756:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800175a:	69d3      	ldr	r3, [r2, #28]
 800175c:	f423 33d0 	bic.w	r3, r3, #106496	; 0x1a000
 8001760:	f023 03c1 	bic.w	r3, r3, #193	; 0xc1
 8001764:	61d3      	str	r3, [r2, #28]
    CLEAR_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_ST);
 8001766:	6803      	ldr	r3, [r0, #0]
 8001768:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800176c:	699a      	ldr	r2, [r3, #24]
 800176e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001772:	619a      	str	r2, [r3, #24]
    CLEAR_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_SR);
 8001774:	6803      	ldr	r3, [r0, #0]
 8001776:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800177a:	699a      	ldr	r2, [r3, #24]
 800177c:	f022 0202 	bic.w	r2, r2, #2
 8001780:	619a      	str	r2, [r3, #24]
    CLEAR_BIT(heth->Instance->MACCR, ETH_MACCR_RE);
 8001782:	6802      	ldr	r2, [r0, #0]
 8001784:	6813      	ldr	r3, [r2, #0]
 8001786:	f023 0304 	bic.w	r3, r3, #4
 800178a:	6013      	str	r3, [r2, #0]
    tmpreg1 = (heth->Instance)->MACCR;
 800178c:	6803      	ldr	r3, [r0, #0]
 800178e:	681d      	ldr	r5, [r3, #0]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8001790:	2001      	movs	r0, #1
 8001792:	f7ff fbb9 	bl	8000f08 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 8001796:	6823      	ldr	r3, [r4, #0]
 8001798:	601d      	str	r5, [r3, #0]
    ETH_FlushTransmitFIFO(heth);
 800179a:	4620      	mov	r0, r4
 800179c:	f7ff fe08 	bl	80013b0 <ETH_FlushTransmitFIFO>
    CLEAR_BIT(heth->Instance->MACCR, ETH_MACCR_TE);
 80017a0:	6822      	ldr	r2, [r4, #0]
 80017a2:	6813      	ldr	r3, [r2, #0]
 80017a4:	f023 0308 	bic.w	r3, r3, #8
 80017a8:	6013      	str	r3, [r2, #0]
    tmpreg1 = (heth->Instance)->MACCR;
 80017aa:	6823      	ldr	r3, [r4, #0]
 80017ac:	681d      	ldr	r5, [r3, #0]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 80017ae:	2001      	movs	r0, #1
 80017b0:	f7ff fbaa 	bl	8000f08 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 80017b4:	4622      	mov	r2, r4
 80017b6:	f852 3b48 	ldr.w	r3, [r2], #72
 80017ba:	601d      	str	r5, [r3, #0]
    for (descindex = 0; descindex < (uint32_t)ETH_RX_DESC_CNT; descindex++)
 80017bc:	f104 0058 	add.w	r0, r4, #88	; 0x58
      dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descindex];
 80017c0:	f852 1b04 	ldr.w	r1, [r2], #4
      SET_BIT(dmarxdesc->DESC1, ETH_DMARXDESC_DIC);
 80017c4:	684b      	ldr	r3, [r1, #4]
 80017c6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80017ca:	604b      	str	r3, [r1, #4]
    for (descindex = 0; descindex < (uint32_t)ETH_RX_DESC_CNT; descindex++)
 80017cc:	4282      	cmp	r2, r0
 80017ce:	d1f7      	bne.n	80017c0 <HAL_ETH_Stop_IT+0x80>
    heth->RxDescList.ItMode = 0U;
 80017d0:	2000      	movs	r0, #0
 80017d2:	65a0      	str	r0, [r4, #88]	; 0x58
    heth->gState = HAL_ETH_STATE_READY;
 80017d4:	2310      	movs	r3, #16
 80017d6:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
    return HAL_OK;
 80017da:	e7b7      	b.n	800174c <HAL_ETH_Stop_IT+0xc>

080017dc <HAL_ETH_Transmit_IT>:
{
 80017dc:	b510      	push	{r4, lr}
 80017de:	4604      	mov	r4, r0
  if (pTxConfig == NULL)
 80017e0:	b129      	cbz	r1, 80017ee <HAL_ETH_Transmit_IT+0x12>
  if (heth->gState == HAL_ETH_STATE_STARTED)
 80017e2:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
 80017e6:	2b23      	cmp	r3, #35	; 0x23
 80017e8:	d009      	beq.n	80017fe <HAL_ETH_Transmit_IT+0x22>
    return HAL_ERROR;
 80017ea:	2001      	movs	r0, #1
}
 80017ec:	bd10      	pop	{r4, pc}
    heth->ErrorCode |= HAL_ETH_ERROR_PARAM;
 80017ee:	f8d0 3088 	ldr.w	r3, [r0, #136]	; 0x88
 80017f2:	f043 0301 	orr.w	r3, r3, #1
 80017f6:	f8c0 3088 	str.w	r3, [r0, #136]	; 0x88
    return HAL_ERROR;
 80017fa:	2001      	movs	r0, #1
 80017fc:	e7f6      	b.n	80017ec <HAL_ETH_Transmit_IT+0x10>
    heth->TxDescList.CurrentPacketAddress = (uint32_t *)pTxConfig->pData;
 80017fe:	6b4b      	ldr	r3, [r1, #52]	; 0x34
 8001800:	63e3      	str	r3, [r4, #60]	; 0x3c
    if (ETH_Prepare_Tx_Descriptors(heth, pTxConfig, 1) != HAL_ETH_ERROR_NONE)
 8001802:	2201      	movs	r2, #1
 8001804:	4620      	mov	r0, r4
 8001806:	f7ff fc31 	bl	800106c <ETH_Prepare_Tx_Descriptors>
 800180a:	b138      	cbz	r0, 800181c <HAL_ETH_Transmit_IT+0x40>
      heth->ErrorCode |= HAL_ETH_ERROR_BUSY;
 800180c:	f8d4 3088 	ldr.w	r3, [r4, #136]	; 0x88
 8001810:	f043 0302 	orr.w	r3, r3, #2
 8001814:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
      return HAL_ERROR;
 8001818:	2001      	movs	r0, #1
 800181a:	e7e7      	b.n	80017ec <HAL_ETH_Transmit_IT+0x10>
  __ASM volatile ("dsb 0xF":::"memory");
 800181c:	f3bf 8f4f 	dsb	sy
    INCR_TX_DESC_INDEX(heth->TxDescList.CurTxDesc, 1U);
 8001820:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8001822:	1c5a      	adds	r2, r3, #1
 8001824:	2a03      	cmp	r2, #3
 8001826:	bf92      	itee	ls
 8001828:	62a2      	strls	r2, [r4, #40]	; 0x28
 800182a:	3b03      	subhi	r3, #3
 800182c:	62a3      	strhi	r3, [r4, #40]	; 0x28
    if (((heth->Instance)->DMASR & ETH_DMASR_TBUS) != (uint32_t)RESET)
 800182e:	6823      	ldr	r3, [r4, #0]
 8001830:	f503 5280 	add.w	r2, r3, #4096	; 0x1000
 8001834:	6952      	ldr	r2, [r2, #20]
 8001836:	f012 0f04 	tst.w	r2, #4
 800183a:	d009      	beq.n	8001850 <HAL_ETH_Transmit_IT+0x74>
      (heth->Instance)->DMASR = ETH_DMASR_TBUS;
 800183c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001840:	2204      	movs	r2, #4
 8001842:	615a      	str	r2, [r3, #20]
      (heth->Instance)->DMATPDR = 0U;
 8001844:	6823      	ldr	r3, [r4, #0]
 8001846:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800184a:	2000      	movs	r0, #0
 800184c:	6058      	str	r0, [r3, #4]
 800184e:	e7cd      	b.n	80017ec <HAL_ETH_Transmit_IT+0x10>
    return HAL_OK;
 8001850:	2000      	movs	r0, #0
 8001852:	e7cb      	b.n	80017ec <HAL_ETH_Transmit_IT+0x10>

08001854 <HAL_ETH_ReadData>:
{
 8001854:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001858:	b085      	sub	sp, #20
 800185a:	4605      	mov	r5, r0
  if (pAppBuff == NULL)
 800185c:	9103      	str	r1, [sp, #12]
 800185e:	b1e1      	cbz	r1, 800189a <HAL_ETH_ReadData+0x46>
  if (heth->gState != HAL_ETH_STATE_STARTED)
 8001860:	f8d0 3084 	ldr.w	r3, [r0, #132]	; 0x84
 8001864:	2b23      	cmp	r3, #35	; 0x23
 8001866:	d17e      	bne.n	8001966 <HAL_ETH_ReadData+0x112>
  descidx = heth->RxDescList.RxDescIdx;
 8001868:	6dc7      	ldr	r7, [r0, #92]	; 0x5c
  dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 800186a:	f107 0312 	add.w	r3, r7, #18
 800186e:	f850 4023 	ldr.w	r4, [r0, r3, lsl #2]
  desccntmax = ETH_RX_DESC_CNT - heth->RxDescList.RxBuildDescCnt;
 8001872:	6ec3      	ldr	r3, [r0, #108]	; 0x6c
 8001874:	f1c3 0b04 	rsb	fp, r3, #4
  while ((READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (desccnt < desccntmax)
 8001878:	6822      	ldr	r2, [r4, #0]
 800187a:	2a00      	cmp	r2, #0
 800187c:	f2c0 8083 	blt.w	8001986 <HAL_ETH_ReadData+0x132>
 8001880:	f1bb 0f00 	cmp.w	fp, #0
 8001884:	d066      	beq.n	8001954 <HAL_ETH_ReadData+0x100>
  uint32_t desccnt = 0U;
 8001886:	f04f 0800 	mov.w	r8, #0
      HAL_ETH_RxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
 800188a:	f100 0380 	add.w	r3, r0, #128	; 0x80
 800188e:	9301      	str	r3, [sp, #4]
 8001890:	f100 037c 	add.w	r3, r0, #124	; 0x7c
 8001894:	9302      	str	r3, [sp, #8]
      dmarxdesc->BackupAddr0 = 0;
 8001896:	46c1      	mov	r9, r8
 8001898:	e037      	b.n	800190a <HAL_ETH_ReadData+0xb6>
    heth->ErrorCode |= HAL_ETH_ERROR_PARAM;
 800189a:	f8d0 3088 	ldr.w	r3, [r0, #136]	; 0x88
 800189e:	f043 0301 	orr.w	r3, r3, #1
 80018a2:	f8c0 3088 	str.w	r3, [r0, #136]	; 0x88
    return HAL_ERROR;
 80018a6:	2001      	movs	r0, #1
 80018a8:	e05e      	b.n	8001968 <HAL_ETH_ReadData+0x114>
      if (READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_FS) != (uint32_t)RESET)
 80018aa:	6823      	ldr	r3, [r4, #0]
 80018ac:	f413 7f00 	tst.w	r3, #512	; 0x200
        heth->RxDescList.RxDescCnt = 0;
 80018b0:	bf1c      	itt	ne
 80018b2:	f8c5 9060 	strne.w	r9, [r5, #96]	; 0x60
        heth->RxDescList.RxDataLength = 0;
 80018b6:	f8c5 9064 	strne.w	r9, [r5, #100]	; 0x64
      if (READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_LS) != (uint32_t)RESET)
 80018ba:	6823      	ldr	r3, [r4, #0]
 80018bc:	f413 7f80 	tst.w	r3, #256	; 0x100
 80018c0:	d134      	bne.n	800192c <HAL_ETH_ReadData+0xd8>
      bufflength = heth->Init.RxBuffLen;
 80018c2:	696e      	ldr	r6, [r5, #20]
 80018c4:	46ca      	mov	sl, r9
      WRITE_REG(dmarxdesc->BackupAddr0, dmarxdesc->DESC2);
 80018c6:	68a2      	ldr	r2, [r4, #8]
 80018c8:	6222      	str	r2, [r4, #32]
      HAL_ETH_RxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
 80018ca:	b2b3      	uxth	r3, r6
 80018cc:	9901      	ldr	r1, [sp, #4]
 80018ce:	9802      	ldr	r0, [sp, #8]
 80018d0:	f001 ffac 	bl	800382c <HAL_ETH_RxLinkCallback>
      heth->RxDescList.RxDescCnt++;
 80018d4:	6e2b      	ldr	r3, [r5, #96]	; 0x60
 80018d6:	3301      	adds	r3, #1
 80018d8:	662b      	str	r3, [r5, #96]	; 0x60
      heth->RxDescList.RxDataLength += bufflength;
 80018da:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80018dc:	4433      	add	r3, r6
 80018de:	666b      	str	r3, [r5, #100]	; 0x64
      dmarxdesc->BackupAddr0 = 0;
 80018e0:	f8c4 9020 	str.w	r9, [r4, #32]
    INCR_RX_DESC_INDEX(descidx, 1U);
 80018e4:	1c7b      	adds	r3, r7, #1
 80018e6:	2b03      	cmp	r3, #3
 80018e8:	bf8c      	ite	hi
 80018ea:	3f03      	subhi	r7, #3
 80018ec:	461f      	movls	r7, r3
    dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 80018ee:	f107 0312 	add.w	r3, r7, #18
 80018f2:	f855 4023 	ldr.w	r4, [r5, r3, lsl #2]
    desccnt++;
 80018f6:	f108 0801 	add.w	r8, r8, #1
  while ((READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (desccnt < desccntmax)
 80018fa:	6823      	ldr	r3, [r4, #0]
 80018fc:	2b00      	cmp	r3, #0
 80018fe:	db1f      	blt.n	8001940 <HAL_ETH_ReadData+0xec>
 8001900:	45c3      	cmp	fp, r8
 8001902:	d01c      	beq.n	800193e <HAL_ETH_ReadData+0xea>
         && (rxdataready == 0U))
 8001904:	f1ba 0f00 	cmp.w	sl, #0
 8001908:	d131      	bne.n	800196e <HAL_ETH_ReadData+0x11a>
    if (READ_BIT(dmarxdesc->DESC0,  ETH_DMARXDESC_LS)  != (uint32_t)RESET)
 800190a:	6823      	ldr	r3, [r4, #0]
 800190c:	f413 7f80 	tst.w	r3, #256	; 0x100
 8001910:	d003      	beq.n	800191a <HAL_ETH_ReadData+0xc6>
      heth->RxDescList.TimeStamp.TimeStampHigh = dmarxdesc->DESC6;
 8001912:	69a3      	ldr	r3, [r4, #24]
 8001914:	67ab      	str	r3, [r5, #120]	; 0x78
      heth->RxDescList.TimeStamp.TimeStampLow  = dmarxdesc->DESC7;
 8001916:	69e3      	ldr	r3, [r4, #28]
 8001918:	676b      	str	r3, [r5, #116]	; 0x74
    if ((READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_FS) != (uint32_t)RESET) || (heth->RxDescList.pRxStart != NULL))
 800191a:	6823      	ldr	r3, [r4, #0]
 800191c:	f413 7f00 	tst.w	r3, #512	; 0x200
 8001920:	d1c3      	bne.n	80018aa <HAL_ETH_ReadData+0x56>
 8001922:	6feb      	ldr	r3, [r5, #124]	; 0x7c
 8001924:	2b00      	cmp	r3, #0
 8001926:	d1c0      	bne.n	80018aa <HAL_ETH_ReadData+0x56>
 8001928:	46ca      	mov	sl, r9
 800192a:	e7db      	b.n	80018e4 <HAL_ETH_ReadData+0x90>
        bufflength = ((dmarxdesc->DESC0 & ETH_DMARXDESC_FL) >> ETH_DMARXDESC_FRAMELENGTHSHIFT) - 4U;
 800192c:	6826      	ldr	r6, [r4, #0]
 800192e:	f3c6 460d 	ubfx	r6, r6, #16, #14
 8001932:	3e04      	subs	r6, #4
        heth->RxDescList.pRxLastRxDesc = dmarxdesc->DESC0;
 8001934:	6823      	ldr	r3, [r4, #0]
 8001936:	672b      	str	r3, [r5, #112]	; 0x70
        rxdataready = 1;
 8001938:	f04f 0a01 	mov.w	sl, #1
 800193c:	e7c3      	b.n	80018c6 <HAL_ETH_ReadData+0x72>
    desccnt++;
 800193e:	46d8      	mov	r8, fp
  heth->RxDescList.RxBuildDescCnt += desccnt;
 8001940:	6eeb      	ldr	r3, [r5, #108]	; 0x6c
 8001942:	4443      	add	r3, r8
 8001944:	66eb      	str	r3, [r5, #108]	; 0x6c
  if ((heth->RxDescList.RxBuildDescCnt) != 0U)
 8001946:	b93b      	cbnz	r3, 8001958 <HAL_ETH_ReadData+0x104>
  heth->RxDescList.RxDescIdx = descidx;
 8001948:	65ef      	str	r7, [r5, #92]	; 0x5c
  return HAL_ERROR;
 800194a:	2001      	movs	r0, #1
  if (rxdataready == 1U)
 800194c:	f1ba 0f00 	cmp.w	sl, #0
 8001950:	d00a      	beq.n	8001968 <HAL_ETH_ReadData+0x114>
 8001952:	e012      	b.n	800197a <HAL_ETH_ReadData+0x126>
  uint8_t rxdataready = 0U;
 8001954:	f04f 0a00 	mov.w	sl, #0
    ETH_UpdateDescriptor(heth);
 8001958:	4628      	mov	r0, r5
 800195a:	f7ff fb3f 	bl	8000fdc <ETH_UpdateDescriptor>
 800195e:	e7f3      	b.n	8001948 <HAL_ETH_ReadData+0xf4>
  uint8_t rxdataready = 0U;
 8001960:	f04f 0a00 	mov.w	sl, #0
 8001964:	e7f8      	b.n	8001958 <HAL_ETH_ReadData+0x104>
    return HAL_ERROR;
 8001966:	2001      	movs	r0, #1
}
 8001968:	b005      	add	sp, #20
 800196a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  heth->RxDescList.RxBuildDescCnt += desccnt;
 800196e:	6eeb      	ldr	r3, [r5, #108]	; 0x6c
 8001970:	4443      	add	r3, r8
 8001972:	66eb      	str	r3, [r5, #108]	; 0x6c
  if ((heth->RxDescList.RxBuildDescCnt) != 0U)
 8001974:	2b00      	cmp	r3, #0
 8001976:	d1ef      	bne.n	8001958 <HAL_ETH_ReadData+0x104>
  heth->RxDescList.RxDescIdx = descidx;
 8001978:	65ef      	str	r7, [r5, #92]	; 0x5c
    *pAppBuff = heth->RxDescList.pRxStart;
 800197a:	6feb      	ldr	r3, [r5, #124]	; 0x7c
 800197c:	9a03      	ldr	r2, [sp, #12]
 800197e:	6013      	str	r3, [r2, #0]
    heth->RxDescList.pRxStart = NULL;
 8001980:	2000      	movs	r0, #0
 8001982:	67e8      	str	r0, [r5, #124]	; 0x7c
    return HAL_OK;
 8001984:	e7f0      	b.n	8001968 <HAL_ETH_ReadData+0x114>
  if ((heth->RxDescList.RxBuildDescCnt) != 0U)
 8001986:	2b00      	cmp	r3, #0
 8001988:	d1ea      	bne.n	8001960 <HAL_ETH_ReadData+0x10c>
  return HAL_ERROR;
 800198a:	2001      	movs	r0, #1
 800198c:	e7ec      	b.n	8001968 <HAL_ETH_ReadData+0x114>

0800198e <HAL_ETH_ReleaseTxPacket>:
{
 800198e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  uint32_t numOfBuf =  dmatxdesclist->BuffersInUse;
 8001992:	6c05      	ldr	r5, [r0, #64]	; 0x40
  uint32_t idx =       dmatxdesclist->releaseIndex;
 8001994:	6c44      	ldr	r4, [r0, #68]	; 0x44
  while ((numOfBuf != 0U) && (pktTxStatus != 0U))
 8001996:	b1a5      	cbz	r5, 80019c2 <HAL_ETH_ReleaseTxPacket+0x34>
 8001998:	4606      	mov	r6, r0
        dmatxdesclist->PacketAddress[idx] = NULL;
 800199a:	f04f 0800 	mov.w	r8, #0
 800199e:	e003      	b.n	80019a8 <HAL_ETH_ReleaseTxPacket+0x1a>
      idx = (idx + 1U) & (ETH_TX_DESC_CNT - 1U);
 80019a0:	3401      	adds	r4, #1
 80019a2:	f004 0403 	and.w	r4, r4, #3
  while ((numOfBuf != 0U) && (pktTxStatus != 0U))
 80019a6:	b165      	cbz	r5, 80019c2 <HAL_ETH_ReleaseTxPacket+0x34>
    numOfBuf--;
 80019a8:	3d01      	subs	r5, #1
    if (dmatxdesclist->PacketAddress[idx] == NULL)
 80019aa:	eb06 0784 	add.w	r7, r6, r4, lsl #2
 80019ae:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80019b0:	2800      	cmp	r0, #0
 80019b2:	d0f5      	beq.n	80019a0 <HAL_ETH_ReleaseTxPacket+0x12>
      if ((heth->Init.TxDesc[idx].DESC0 & ETH_DMATXDESC_OWN) == 0U)
 80019b4:	eb04 0384 	add.w	r3, r4, r4, lsl #2
 80019b8:	68f2      	ldr	r2, [r6, #12]
 80019ba:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80019be:	2b00      	cmp	r3, #0
 80019c0:	da02      	bge.n	80019c8 <HAL_ETH_ReleaseTxPacket+0x3a>
}
 80019c2:	2000      	movs	r0, #0
 80019c4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        HAL_ETH_TxFreeCallback(dmatxdesclist->PacketAddress[idx]);
 80019c8:	f001 ff4b 	bl	8003862 <HAL_ETH_TxFreeCallback>
        dmatxdesclist->PacketAddress[idx] = NULL;
 80019cc:	f8c7 802c 	str.w	r8, [r7, #44]	; 0x2c
        idx = (idx + 1U) & (ETH_TX_DESC_CNT - 1U);
 80019d0:	3401      	adds	r4, #1
 80019d2:	f004 0403 	and.w	r4, r4, #3
        dmatxdesclist->BuffersInUse = numOfBuf;
 80019d6:	6435      	str	r5, [r6, #64]	; 0x40
        dmatxdesclist->releaseIndex = idx;
 80019d8:	6474      	str	r4, [r6, #68]	; 0x44
 80019da:	e7e4      	b.n	80019a6 <HAL_ETH_ReleaseTxPacket+0x18>

080019dc <HAL_ETH_PMTCallback>:
}
 80019dc:	4770      	bx	lr

080019de <HAL_ETH_WakeUpCallback>:
}
 80019de:	4770      	bx	lr

080019e0 <HAL_ETH_IRQHandler>:
{
 80019e0:	b510      	push	{r4, lr}
 80019e2:	4604      	mov	r4, r0
  if (__HAL_ETH_DMA_GET_IT(heth, ETH_DMASR_RS))
 80019e4:	6803      	ldr	r3, [r0, #0]
 80019e6:	f503 5280 	add.w	r2, r3, #4096	; 0x1000
 80019ea:	6952      	ldr	r2, [r2, #20]
 80019ec:	f012 0f40 	tst.w	r2, #64	; 0x40
 80019f0:	d005      	beq.n	80019fe <HAL_ETH_IRQHandler+0x1e>
    if (__HAL_ETH_DMA_GET_IT_SOURCE(heth, ETH_DMAIER_RIE))
 80019f2:	f503 5280 	add.w	r2, r3, #4096	; 0x1000
 80019f6:	69d2      	ldr	r2, [r2, #28]
 80019f8:	f012 0f40 	tst.w	r2, #64	; 0x40
 80019fc:	d147      	bne.n	8001a8e <HAL_ETH_IRQHandler+0xae>
  if (__HAL_ETH_DMA_GET_IT(heth, ETH_DMASR_TS))
 80019fe:	6823      	ldr	r3, [r4, #0]
 8001a00:	f503 5280 	add.w	r2, r3, #4096	; 0x1000
 8001a04:	6952      	ldr	r2, [r2, #20]
 8001a06:	f012 0f01 	tst.w	r2, #1
 8001a0a:	d005      	beq.n	8001a18 <HAL_ETH_IRQHandler+0x38>
    if (__HAL_ETH_DMA_GET_IT_SOURCE(heth, ETH_DMAIER_TIE))
 8001a0c:	f503 5280 	add.w	r2, r3, #4096	; 0x1000
 8001a10:	69d2      	ldr	r2, [r2, #28]
 8001a12:	f012 0f01 	tst.w	r2, #1
 8001a16:	d141      	bne.n	8001a9c <HAL_ETH_IRQHandler+0xbc>
  if (__HAL_ETH_DMA_GET_IT(heth, ETH_DMASR_AIS))
 8001a18:	6823      	ldr	r3, [r4, #0]
 8001a1a:	f503 5280 	add.w	r2, r3, #4096	; 0x1000
 8001a1e:	6952      	ldr	r2, [r2, #20]
 8001a20:	f412 4f00 	tst.w	r2, #32768	; 0x8000
 8001a24:	d028      	beq.n	8001a78 <HAL_ETH_IRQHandler+0x98>
    if (__HAL_ETH_DMA_GET_IT_SOURCE(heth, ETH_DMAIER_AISE))
 8001a26:	f503 5280 	add.w	r2, r3, #4096	; 0x1000
 8001a2a:	69d2      	ldr	r2, [r2, #28]
 8001a2c:	f412 4f00 	tst.w	r2, #32768	; 0x8000
 8001a30:	d022      	beq.n	8001a78 <HAL_ETH_IRQHandler+0x98>
      heth->ErrorCode |= HAL_ETH_ERROR_DMA;
 8001a32:	f8d4 2088 	ldr.w	r2, [r4, #136]	; 0x88
 8001a36:	f042 0208 	orr.w	r2, r2, #8
 8001a3a:	f8c4 2088 	str.w	r2, [r4, #136]	; 0x88
      if (__HAL_ETH_DMA_GET_IT(heth, ETH_DMASR_FBES))
 8001a3e:	f503 5280 	add.w	r2, r3, #4096	; 0x1000
 8001a42:	6952      	ldr	r2, [r2, #20]
 8001a44:	f412 5f00 	tst.w	r2, #8192	; 0x2000
 8001a48:	d031      	beq.n	8001aae <HAL_ETH_IRQHandler+0xce>
        heth->DMAErrorCode = READ_BIT(heth->Instance->DMASR, (ETH_DMASR_FBES | ETH_DMASR_TPS | ETH_DMASR_RPS));
 8001a4a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001a4e:	695a      	ldr	r2, [r3, #20]
 8001a50:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 8001a54:	f422 0201 	bic.w	r2, r2, #8454144	; 0x810000
 8001a58:	f422 425f 	bic.w	r2, r2, #57088	; 0xdf00
 8001a5c:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8001a60:	f8c4 208c 	str.w	r2, [r4, #140]	; 0x8c
        __HAL_ETH_DMA_DISABLE_IT(heth, ETH_DMAIER_NISE | ETH_DMAIER_AISE);
 8001a64:	69da      	ldr	r2, [r3, #28]
 8001a66:	f422 32c0 	bic.w	r2, r2, #98304	; 0x18000
 8001a6a:	61da      	str	r2, [r3, #28]
        heth->gState = HAL_ETH_STATE_ERROR;
 8001a6c:	23e0      	movs	r3, #224	; 0xe0
 8001a6e:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
      HAL_ETH_ErrorCallback(heth);
 8001a72:	4620      	mov	r0, r4
 8001a74:	f001 fcb2 	bl	80033dc <HAL_ETH_ErrorCallback>
  if (__HAL_ETH_MAC_GET_IT(heth, ETH_MAC_PMT_IT))
 8001a78:	6823      	ldr	r3, [r4, #0]
 8001a7a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001a7c:	f012 0f08 	tst.w	r2, #8
 8001a80:	d11f      	bne.n	8001ac2 <HAL_ETH_IRQHandler+0xe2>
  if (__HAL_ETH_WAKEUP_EXTI_GET_FLAG(ETH_WAKEUP_EXTI_LINE) != (uint32_t)RESET)
 8001a82:	4b1a      	ldr	r3, [pc, #104]	; (8001aec <HAL_ETH_IRQHandler+0x10c>)
 8001a84:	695b      	ldr	r3, [r3, #20]
 8001a86:	f413 2f00 	tst.w	r3, #524288	; 0x80000
 8001a8a:	d126      	bne.n	8001ada <HAL_ETH_IRQHandler+0xfa>
}
 8001a8c:	bd10      	pop	{r4, pc}
      __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMASR_RS | ETH_DMASR_NIS);
 8001a8e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001a92:	4a17      	ldr	r2, [pc, #92]	; (8001af0 <HAL_ETH_IRQHandler+0x110>)
 8001a94:	615a      	str	r2, [r3, #20]
      HAL_ETH_RxCpltCallback(heth);
 8001a96:	f001 fc91 	bl	80033bc <HAL_ETH_RxCpltCallback>
 8001a9a:	e7b0      	b.n	80019fe <HAL_ETH_IRQHandler+0x1e>
      __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMASR_TS | ETH_DMASR_NIS);
 8001a9c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001aa0:	f04f 1201 	mov.w	r2, #65537	; 0x10001
 8001aa4:	615a      	str	r2, [r3, #20]
      HAL_ETH_TxCpltCallback(heth);
 8001aa6:	4620      	mov	r0, r4
 8001aa8:	f001 fc90 	bl	80033cc <HAL_ETH_TxCpltCallback>
 8001aac:	e7b4      	b.n	8001a18 <HAL_ETH_IRQHandler+0x38>
        heth->DMAErrorCode = READ_BIT(heth->Instance->DMASR, (ETH_DMASR_ETS | ETH_DMASR_RWTS |
 8001aae:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001ab2:	695a      	ldr	r2, [r3, #20]
 8001ab4:	f248 6180 	movw	r1, #34432	; 0x8680
 8001ab8:	400a      	ands	r2, r1
 8001aba:	f8c4 208c 	str.w	r2, [r4, #140]	; 0x8c
        __HAL_ETH_DMA_CLEAR_IT(heth, (ETH_DMASR_ETS | ETH_DMASR_RWTS |
 8001abe:	6159      	str	r1, [r3, #20]
 8001ac0:	e7d7      	b.n	8001a72 <HAL_ETH_IRQHandler+0x92>
    heth->MACWakeUpEvent = READ_BIT(heth->Instance->MACPMTCSR, (ETH_MACPMTCSR_WFR | ETH_MACPMTCSR_MPR));
 8001ac2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ac4:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8001ac8:	f8c4 3094 	str.w	r3, [r4, #148]	; 0x94
    HAL_ETH_PMTCallback(heth);
 8001acc:	4620      	mov	r0, r4
 8001ace:	f7ff ff85 	bl	80019dc <HAL_ETH_PMTCallback>
    heth->MACWakeUpEvent = (uint32_t)(0x0U);
 8001ad2:	2300      	movs	r3, #0
 8001ad4:	f8c4 3094 	str.w	r3, [r4, #148]	; 0x94
 8001ad8:	e7d3      	b.n	8001a82 <HAL_ETH_IRQHandler+0xa2>
    __HAL_ETH_WAKEUP_EXTI_CLEAR_FLAG(ETH_WAKEUP_EXTI_LINE);
 8001ada:	4b04      	ldr	r3, [pc, #16]	; (8001aec <HAL_ETH_IRQHandler+0x10c>)
 8001adc:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8001ae0:	615a      	str	r2, [r3, #20]
    HAL_ETH_WakeUpCallback(heth);
 8001ae2:	4620      	mov	r0, r4
 8001ae4:	f7ff ff7b 	bl	80019de <HAL_ETH_WakeUpCallback>
}
 8001ae8:	e7d0      	b.n	8001a8c <HAL_ETH_IRQHandler+0xac>
 8001aea:	bf00      	nop
 8001aec:	40013c00 	.word	0x40013c00
 8001af0:	00010040 	.word	0x00010040

08001af4 <HAL_ETH_ReadPHYRegister>:
{
 8001af4:	b570      	push	{r4, r5, r6, lr}
 8001af6:	4604      	mov	r4, r0
 8001af8:	461e      	mov	r6, r3
  tmpreg1 = heth->Instance->MACMIIAR;
 8001afa:	6805      	ldr	r5, [r0, #0]
 8001afc:	6928      	ldr	r0, [r5, #16]
  tmpreg1 |= (((uint32_t)PHYReg << 6U) & ETH_MACMIIAR_MR);                /* Set the PHY register address */
 8001afe:	0192      	lsls	r2, r2, #6
 8001b00:	f402 63f8 	and.w	r3, r2, #1984	; 0x7c0
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 8001b04:	f000 021c 	and.w	r2, r0, #28
 8001b08:	431a      	orrs	r2, r3
  tmpreg1 |= ((PHYAddr << 11U) & ETH_MACMIIAR_PA);                        /* Set the PHY device address   */
 8001b0a:	02cb      	lsls	r3, r1, #11
 8001b0c:	b29b      	uxth	r3, r3
  tmpreg1 |= (((uint32_t)PHYReg << 6U) & ETH_MACMIIAR_MR);                /* Set the PHY register address */
 8001b0e:	4313      	orrs	r3, r2
  tmpreg1 |= ETH_MACMIIAR_MB;                                             /* Set the MII Busy bit         */
 8001b10:	f043 0301 	orr.w	r3, r3, #1
  heth->Instance->MACMIIAR = tmpreg1;
 8001b14:	612b      	str	r3, [r5, #16]
  tickstart = HAL_GetTick();
 8001b16:	f7ff f9f1 	bl	8000efc <HAL_GetTick>
 8001b1a:	4605      	mov	r5, r0
    if ((HAL_GetTick() - tickstart) > PHY_READ_TO)
 8001b1c:	f7ff f9ee 	bl	8000efc <HAL_GetTick>
 8001b20:	1b40      	subs	r0, r0, r5
 8001b22:	f5b0 3f80 	cmp.w	r0, #65536	; 0x10000
 8001b26:	d209      	bcs.n	8001b3c <HAL_ETH_ReadPHYRegister+0x48>
    tmpreg1 = heth->Instance->MACMIIAR;
 8001b28:	6822      	ldr	r2, [r4, #0]
 8001b2a:	6911      	ldr	r1, [r2, #16]
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8001b2c:	f011 0f01 	tst.w	r1, #1
 8001b30:	d1f4      	bne.n	8001b1c <HAL_ETH_ReadPHYRegister+0x28>
  *pRegValue = (uint16_t)(heth->Instance->MACMIIDR);
 8001b32:	6953      	ldr	r3, [r2, #20]
 8001b34:	b29b      	uxth	r3, r3
 8001b36:	6033      	str	r3, [r6, #0]
  return HAL_OK;
 8001b38:	2000      	movs	r0, #0
}
 8001b3a:	bd70      	pop	{r4, r5, r6, pc}
      return HAL_ERROR;
 8001b3c:	2001      	movs	r0, #1
 8001b3e:	e7fc      	b.n	8001b3a <HAL_ETH_ReadPHYRegister+0x46>

08001b40 <HAL_ETH_WritePHYRegister>:
{
 8001b40:	b538      	push	{r3, r4, r5, lr}
 8001b42:	4604      	mov	r4, r0
  tmpreg1 = heth->Instance->MACMIIAR;
 8001b44:	6805      	ldr	r5, [r0, #0]
 8001b46:	6928      	ldr	r0, [r5, #16]
  tmpreg1 |= (((uint32_t)PHYReg << 6U) & ETH_MACMIIAR_MR);              /* Set the PHY register address */
 8001b48:	0192      	lsls	r2, r2, #6
 8001b4a:	f402 62f8 	and.w	r2, r2, #1984	; 0x7c0
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 8001b4e:	f000 001c 	and.w	r0, r0, #28
 8001b52:	4310      	orrs	r0, r2
  tmpreg1 |= ((PHYAddr << 11U) & ETH_MACMIIAR_PA);                      /* Set the PHY device address */
 8001b54:	02ca      	lsls	r2, r1, #11
 8001b56:	b292      	uxth	r2, r2
  tmpreg1 |= (((uint32_t)PHYReg << 6U) & ETH_MACMIIAR_MR);              /* Set the PHY register address */
 8001b58:	4302      	orrs	r2, r0
  tmpreg1 |= ETH_MACMIIAR_MB;                                           /* Set the MII Busy bit */
 8001b5a:	f042 0203 	orr.w	r2, r2, #3
  heth->Instance->MACMIIDR = (uint16_t)RegValue;
 8001b5e:	b29b      	uxth	r3, r3
 8001b60:	616b      	str	r3, [r5, #20]
  heth->Instance->MACMIIAR = tmpreg1;
 8001b62:	6823      	ldr	r3, [r4, #0]
 8001b64:	611a      	str	r2, [r3, #16]
  tickstart = HAL_GetTick();
 8001b66:	f7ff f9c9 	bl	8000efc <HAL_GetTick>
 8001b6a:	4605      	mov	r5, r0
    if ((HAL_GetTick() - tickstart) > PHY_WRITE_TO)
 8001b6c:	f7ff f9c6 	bl	8000efc <HAL_GetTick>
 8001b70:	1b40      	subs	r0, r0, r5
 8001b72:	f5b0 3f80 	cmp.w	r0, #65536	; 0x10000
 8001b76:	d206      	bcs.n	8001b86 <HAL_ETH_WritePHYRegister+0x46>
    tmpreg1 = heth->Instance->MACMIIAR;
 8001b78:	6823      	ldr	r3, [r4, #0]
 8001b7a:	691b      	ldr	r3, [r3, #16]
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8001b7c:	f013 0f01 	tst.w	r3, #1
 8001b80:	d1f4      	bne.n	8001b6c <HAL_ETH_WritePHYRegister+0x2c>
  return HAL_OK;
 8001b82:	2000      	movs	r0, #0
 8001b84:	e000      	b.n	8001b88 <HAL_ETH_WritePHYRegister+0x48>
      return HAL_ERROR;
 8001b86:	2001      	movs	r0, #1
}
 8001b88:	bd38      	pop	{r3, r4, r5, pc}

08001b8a <HAL_ETH_GetMACConfig>:
  if (macconf == NULL)
 8001b8a:	2900      	cmp	r1, #0
 8001b8c:	d06f      	beq.n	8001c6e <HAL_ETH_GetMACConfig+0xe4>
  macconf->DeferralCheck = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DC) >> 4) > 0U) ? ENABLE : DISABLE;
 8001b8e:	6802      	ldr	r2, [r0, #0]
 8001b90:	6812      	ldr	r2, [r2, #0]
 8001b92:	f3c2 1200 	ubfx	r2, r2, #4, #1
 8001b96:	f881 2028 	strb.w	r2, [r1, #40]	; 0x28
  macconf->BackOffLimit = READ_BIT(heth->Instance->MACCR, ETH_MACCR_BL);
 8001b9a:	6802      	ldr	r2, [r0, #0]
 8001b9c:	6812      	ldr	r2, [r2, #0]
 8001b9e:	f002 0260 	and.w	r2, r2, #96	; 0x60
 8001ba2:	624a      	str	r2, [r1, #36]	; 0x24
  macconf->RetryTransmission = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_RD) >> 9) == 0U) ? ENABLE : DISABLE;
 8001ba4:	6802      	ldr	r2, [r0, #0]
 8001ba6:	6812      	ldr	r2, [r2, #0]
 8001ba8:	f482 7200 	eor.w	r2, r2, #512	; 0x200
 8001bac:	f3c2 2240 	ubfx	r2, r2, #9, #1
 8001bb0:	f881 2020 	strb.w	r2, [r1, #32]
  macconf->CarrierSenseDuringTransmit = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_CSD) >> 16) > 0U)
 8001bb4:	6802      	ldr	r2, [r0, #0]
 8001bb6:	6812      	ldr	r2, [r2, #0]
                                        ? ENABLE : DISABLE;
 8001bb8:	f3c2 4200 	ubfx	r2, r2, #16, #1
  macconf->CarrierSenseDuringTransmit = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_CSD) >> 16) > 0U)
 8001bbc:	77ca      	strb	r2, [r1, #31]
  macconf->ReceiveOwn = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_ROD) >> 13) == 0U) ? ENABLE : DISABLE;
 8001bbe:	6802      	ldr	r2, [r0, #0]
 8001bc0:	6812      	ldr	r2, [r2, #0]
 8001bc2:	f482 5200 	eor.w	r2, r2, #8192	; 0x2000
 8001bc6:	f3c2 3240 	ubfx	r2, r2, #13, #1
 8001bca:	778a      	strb	r2, [r1, #30]
  macconf->LoopbackMode = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_LM) >> 12) > 0U) ? ENABLE : DISABLE;
 8001bcc:	6802      	ldr	r2, [r0, #0]
 8001bce:	6812      	ldr	r2, [r2, #0]
 8001bd0:	f3c2 3200 	ubfx	r2, r2, #12, #1
 8001bd4:	770a      	strb	r2, [r1, #28]
  macconf->DuplexMode = READ_BIT(heth->Instance->MACCR, ETH_MACCR_DM);
 8001bd6:	6802      	ldr	r2, [r0, #0]
 8001bd8:	6812      	ldr	r2, [r2, #0]
 8001bda:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8001bde:	618a      	str	r2, [r1, #24]
  macconf->Speed = READ_BIT(heth->Instance->MACCR, ETH_MACCR_FES);
 8001be0:	6802      	ldr	r2, [r0, #0]
 8001be2:	6812      	ldr	r2, [r2, #0]
 8001be4:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 8001be8:	614a      	str	r2, [r1, #20]
  macconf->Jabber = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_JD) >> 22) == 0U) ? ENABLE : DISABLE;
 8001bea:	6802      	ldr	r2, [r0, #0]
 8001bec:	6812      	ldr	r2, [r2, #0]
 8001bee:	f482 0280 	eor.w	r2, r2, #4194304	; 0x400000
 8001bf2:	f3c2 5280 	ubfx	r2, r2, #22, #1
 8001bf6:	744a      	strb	r2, [r1, #17]
  macconf->Watchdog = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_WD) >> 23) == 0U) ? ENABLE : DISABLE;
 8001bf8:	6802      	ldr	r2, [r0, #0]
 8001bfa:	6812      	ldr	r2, [r2, #0]
 8001bfc:	f482 0200 	eor.w	r2, r2, #8388608	; 0x800000
 8001c00:	f3c2 52c0 	ubfx	r2, r2, #23, #1
 8001c04:	740a      	strb	r2, [r1, #16]
  macconf->AutomaticPadCRCStrip = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_APCS) >> 7) > 0U) ? ENABLE : DISABLE;
 8001c06:	6802      	ldr	r2, [r0, #0]
 8001c08:	6812      	ldr	r2, [r2, #0]
 8001c0a:	f3c2 12c0 	ubfx	r2, r2, #7, #1
 8001c0e:	73ca      	strb	r2, [r1, #15]
  macconf->InterPacketGapVal = READ_BIT(heth->Instance->MACCR, ETH_MACCR_IFG);
 8001c10:	6802      	ldr	r2, [r0, #0]
 8001c12:	6812      	ldr	r2, [r2, #0]
 8001c14:	f402 2260 	and.w	r2, r2, #917504	; 0xe0000
 8001c18:	608a      	str	r2, [r1, #8]
  macconf->ChecksumOffload = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_IPCO) >> 10U) > 0U) ? ENABLE : DISABLE;
 8001c1a:	6802      	ldr	r2, [r0, #0]
 8001c1c:	6812      	ldr	r2, [r2, #0]
 8001c1e:	f3c2 2280 	ubfx	r2, r2, #10, #1
 8001c22:	710a      	strb	r2, [r1, #4]
  macconf->TransmitFlowControl = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_TFCE) >> 1) > 0U) ? ENABLE : DISABLE;
 8001c24:	6802      	ldr	r2, [r0, #0]
 8001c26:	6992      	ldr	r2, [r2, #24]
 8001c28:	f3c2 0240 	ubfx	r2, r2, #1, #1
 8001c2c:	f881 2054 	strb.w	r2, [r1, #84]	; 0x54
  macconf->ZeroQuantaPause = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_ZQPD) >> 7) == 0U) ? ENABLE : DISABLE;
 8001c30:	6802      	ldr	r2, [r0, #0]
 8001c32:	6992      	ldr	r2, [r2, #24]
 8001c34:	f082 0280 	eor.w	r2, r2, #128	; 0x80
 8001c38:	f3c2 12c0 	ubfx	r2, r2, #7, #1
 8001c3c:	f881 204c 	strb.w	r2, [r1, #76]	; 0x4c
  macconf->PauseLowThreshold = READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_PLT);
 8001c40:	6802      	ldr	r2, [r0, #0]
 8001c42:	6992      	ldr	r2, [r2, #24]
 8001c44:	f002 0230 	and.w	r2, r2, #48	; 0x30
 8001c48:	650a      	str	r2, [r1, #80]	; 0x50
  macconf->PauseTime = (READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_PT) >> 16);
 8001c4a:	6802      	ldr	r2, [r0, #0]
 8001c4c:	6992      	ldr	r2, [r2, #24]
 8001c4e:	0c12      	lsrs	r2, r2, #16
 8001c50:	648a      	str	r2, [r1, #72]	; 0x48
  macconf->ReceiveFlowControl = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_RFCE) >> 2U) > 0U) ? ENABLE : DISABLE;
 8001c52:	6802      	ldr	r2, [r0, #0]
 8001c54:	6992      	ldr	r2, [r2, #24]
 8001c56:	f3c2 0280 	ubfx	r2, r2, #2, #1
 8001c5a:	f881 2056 	strb.w	r2, [r1, #86]	; 0x56
  macconf->UnicastPausePacketDetect = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_UPFD) >> 3U) > 0U)
 8001c5e:	6802      	ldr	r2, [r0, #0]
 8001c60:	6992      	ldr	r2, [r2, #24]
                                      ? ENABLE : DISABLE;
 8001c62:	f3c2 02c0 	ubfx	r2, r2, #3, #1
  macconf->UnicastPausePacketDetect = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_UPFD) >> 3U) > 0U)
 8001c66:	f881 2055 	strb.w	r2, [r1, #85]	; 0x55
  return HAL_OK;
 8001c6a:	2000      	movs	r0, #0
 8001c6c:	4770      	bx	lr
    return HAL_ERROR;
 8001c6e:	2001      	movs	r0, #1
}
 8001c70:	4770      	bx	lr

08001c72 <HAL_ETH_SetMACConfig>:
  if (macconf == NULL)
 8001c72:	b151      	cbz	r1, 8001c8a <HAL_ETH_SetMACConfig+0x18>
{
 8001c74:	b508      	push	{r3, lr}
  if (heth->gState == HAL_ETH_STATE_READY)
 8001c76:	f8d0 3084 	ldr.w	r3, [r0, #132]	; 0x84
 8001c7a:	2b10      	cmp	r3, #16
 8001c7c:	d001      	beq.n	8001c82 <HAL_ETH_SetMACConfig+0x10>
    return HAL_ERROR;
 8001c7e:	2001      	movs	r0, #1
}
 8001c80:	bd08      	pop	{r3, pc}
    ETH_SetMACConfig(heth, macconf);
 8001c82:	f7ff fab3 	bl	80011ec <ETH_SetMACConfig>
    return HAL_OK;
 8001c86:	2000      	movs	r0, #0
 8001c88:	e7fa      	b.n	8001c80 <HAL_ETH_SetMACConfig+0xe>
    return HAL_ERROR;
 8001c8a:	2001      	movs	r0, #1
}
 8001c8c:	4770      	bx	lr
	...

08001c90 <HAL_ETH_SetMDIOClockRange>:
{
 8001c90:	b538      	push	{r3, r4, r5, lr}
 8001c92:	4605      	mov	r5, r0
  tmpreg = (heth->Instance)->MACMIIAR;
 8001c94:	6803      	ldr	r3, [r0, #0]
 8001c96:	691c      	ldr	r4, [r3, #16]
  tmpreg &= ETH_MACMIIAR_CR_MASK;
 8001c98:	f024 041c 	bic.w	r4, r4, #28
  hclk = HAL_RCC_GetHCLKFreq();
 8001c9c:	f000 fd00 	bl	80026a0 <HAL_RCC_GetHCLKFreq>
  if ((hclk >= 20000000U) && (hclk < 35000000U))
 8001ca0:	4b10      	ldr	r3, [pc, #64]	; (8001ce4 <HAL_ETH_SetMDIOClockRange+0x54>)
 8001ca2:	4403      	add	r3, r0
 8001ca4:	4a10      	ldr	r2, [pc, #64]	; (8001ce8 <HAL_ETH_SetMDIOClockRange+0x58>)
 8001ca6:	4293      	cmp	r3, r2
 8001ca8:	d204      	bcs.n	8001cb4 <HAL_ETH_SetMDIOClockRange+0x24>
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div16;
 8001caa:	f044 0408 	orr.w	r4, r4, #8
  (heth->Instance)->MACMIIAR = (uint32_t)tmpreg;
 8001cae:	682b      	ldr	r3, [r5, #0]
 8001cb0:	611c      	str	r4, [r3, #16]
}
 8001cb2:	bd38      	pop	{r3, r4, r5, pc}
  else if ((hclk >= 35000000U) && (hclk < 60000000U))
 8001cb4:	4b0d      	ldr	r3, [pc, #52]	; (8001cec <HAL_ETH_SetMDIOClockRange+0x5c>)
 8001cb6:	4403      	add	r3, r0
 8001cb8:	4a0d      	ldr	r2, [pc, #52]	; (8001cf0 <HAL_ETH_SetMDIOClockRange+0x60>)
 8001cba:	4293      	cmp	r3, r2
 8001cbc:	d802      	bhi.n	8001cc4 <HAL_ETH_SetMDIOClockRange+0x34>
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div26;
 8001cbe:	f044 040c 	orr.w	r4, r4, #12
 8001cc2:	e7f4      	b.n	8001cae <HAL_ETH_SetMDIOClockRange+0x1e>
  else if ((hclk >= 60000000U) && (hclk < 100000000U))
 8001cc4:	4b0b      	ldr	r3, [pc, #44]	; (8001cf4 <HAL_ETH_SetMDIOClockRange+0x64>)
 8001cc6:	4403      	add	r3, r0
 8001cc8:	4a0b      	ldr	r2, [pc, #44]	; (8001cf8 <HAL_ETH_SetMDIOClockRange+0x68>)
 8001cca:	4293      	cmp	r3, r2
 8001ccc:	d3ef      	bcc.n	8001cae <HAL_ETH_SetMDIOClockRange+0x1e>
  else if ((hclk >= 100000000U) && (hclk < 150000000U))
 8001cce:	4b0b      	ldr	r3, [pc, #44]	; (8001cfc <HAL_ETH_SetMDIOClockRange+0x6c>)
 8001cd0:	4403      	add	r3, r0
 8001cd2:	4a0b      	ldr	r2, [pc, #44]	; (8001d00 <HAL_ETH_SetMDIOClockRange+0x70>)
 8001cd4:	4293      	cmp	r3, r2
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div62;
 8001cd6:	bf94      	ite	ls
 8001cd8:	f044 0404 	orrls.w	r4, r4, #4
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div102;
 8001cdc:	f044 0410 	orrhi.w	r4, r4, #16
 8001ce0:	e7e5      	b.n	8001cae <HAL_ETH_SetMDIOClockRange+0x1e>
 8001ce2:	bf00      	nop
 8001ce4:	feced300 	.word	0xfeced300
 8001ce8:	00e4e1c0 	.word	0x00e4e1c0
 8001cec:	fde9f140 	.word	0xfde9f140
 8001cf0:	017d783f 	.word	0x017d783f
 8001cf4:	fc6c7900 	.word	0xfc6c7900
 8001cf8:	02625a00 	.word	0x02625a00
 8001cfc:	fa0a1f00 	.word	0xfa0a1f00
 8001d00:	02faf07f 	.word	0x02faf07f

08001d04 <HAL_ETH_GetDMAError>:
  return heth->DMAErrorCode;
 8001d04:	f8d0 008c 	ldr.w	r0, [r0, #140]	; 0x8c
}
 8001d08:	4770      	bx	lr
	...

08001d0c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001d0c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001d10:	b083      	sub	sp, #12
 8001d12:	2200      	movs	r2, #0
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001d14:	4613      	mov	r3, r2
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001d16:	4d82      	ldr	r5, [pc, #520]	; (8001f20 <HAL_GPIO_Init+0x214>)
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
        SYSCFG->EXTICR[position >> 2U] = temp;

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001d18:	4c82      	ldr	r4, [pc, #520]	; (8001f24 <HAL_GPIO_Init+0x218>)
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001d1a:	f8df 8210 	ldr.w	r8, [pc, #528]	; 8001f2c <HAL_GPIO_Init+0x220>
 8001d1e:	e04d      	b.n	8001dbc <HAL_GPIO_Init+0xb0>
        temp = GPIOx->OSPEEDR; 
 8001d20:	6887      	ldr	r7, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001d22:	f04f 0903 	mov.w	r9, #3
 8001d26:	fa09 f902 	lsl.w	r9, r9, r2
 8001d2a:	ea27 0909 	bic.w	r9, r7, r9
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001d2e:	68cf      	ldr	r7, [r1, #12]
 8001d30:	4097      	lsls	r7, r2
 8001d32:	ea47 0709 	orr.w	r7, r7, r9
        GPIOx->OSPEEDR = temp;
 8001d36:	6087      	str	r7, [r0, #8]
        temp = GPIOx->OTYPER;
 8001d38:	6847      	ldr	r7, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001d3a:	ea27 0e0e 	bic.w	lr, r7, lr
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001d3e:	684f      	ldr	r7, [r1, #4]
 8001d40:	f3c7 1700 	ubfx	r7, r7, #4, #1
 8001d44:	409f      	lsls	r7, r3
 8001d46:	ea47 070e 	orr.w	r7, r7, lr
        GPIOx->OTYPER = temp;
 8001d4a:	6047      	str	r7, [r0, #4]
 8001d4c:	e046      	b.n	8001ddc <HAL_GPIO_Init+0xd0>
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001d4e:	f04f 0e00 	mov.w	lr, #0
 8001d52:	fa0e fe0b 	lsl.w	lr, lr, fp
 8001d56:	ea4e 0e0a 	orr.w	lr, lr, sl
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001d5a:	f8c7 e008 	str.w	lr, [r7, #8]
        temp = EXTI->RTSR;
 8001d5e:	68a7      	ldr	r7, [r4, #8]
        temp &= ~((uint32_t)iocurrent);
 8001d60:	ea6f 0e0c 	mvn.w	lr, ip
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001d64:	684e      	ldr	r6, [r1, #4]
 8001d66:	f416 1f80 	tst.w	r6, #1048576	; 0x100000
        temp &= ~((uint32_t)iocurrent);
 8001d6a:	bf0c      	ite	eq
 8001d6c:	ea0e 0707 	andeq.w	r7, lr, r7
        {
          temp |= iocurrent;
 8001d70:	ea4c 0707 	orrne.w	r7, ip, r7
        }
        EXTI->RTSR = temp;
 8001d74:	60a7      	str	r7, [r4, #8]

        temp = EXTI->FTSR;
 8001d76:	68e7      	ldr	r7, [r4, #12]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001d78:	684e      	ldr	r6, [r1, #4]
 8001d7a:	f416 1f00 	tst.w	r6, #2097152	; 0x200000
        temp &= ~((uint32_t)iocurrent);
 8001d7e:	bf0c      	ite	eq
 8001d80:	ea0e 0707 	andeq.w	r7, lr, r7
        {
          temp |= iocurrent;
 8001d84:	ea4c 0707 	orrne.w	r7, ip, r7
        }
        EXTI->FTSR = temp;
 8001d88:	60e7      	str	r7, [r4, #12]

        temp = EXTI->EMR;
 8001d8a:	6867      	ldr	r7, [r4, #4]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001d8c:	684e      	ldr	r6, [r1, #4]
 8001d8e:	f416 3f00 	tst.w	r6, #131072	; 0x20000
        temp &= ~((uint32_t)iocurrent);
 8001d92:	bf0c      	ite	eq
 8001d94:	ea0e 0707 	andeq.w	r7, lr, r7
        {
          temp |= iocurrent;
 8001d98:	ea4c 0707 	orrne.w	r7, ip, r7
        }
        EXTI->EMR = temp;
 8001d9c:	6067      	str	r7, [r4, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001d9e:	6827      	ldr	r7, [r4, #0]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001da0:	684e      	ldr	r6, [r1, #4]
 8001da2:	f416 3f80 	tst.w	r6, #65536	; 0x10000
        temp &= ~((uint32_t)iocurrent);
 8001da6:	bf0c      	ite	eq
 8001da8:	ea0e 0707 	andeq.w	r7, lr, r7
        {
          temp |= iocurrent;
 8001dac:	ea4c 0707 	orrne.w	r7, ip, r7
        }
        EXTI->IMR = temp;
 8001db0:	6027      	str	r7, [r4, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001db2:	3301      	adds	r3, #1
 8001db4:	3202      	adds	r2, #2
 8001db6:	2b10      	cmp	r3, #16
 8001db8:	f000 80af 	beq.w	8001f1a <HAL_GPIO_Init+0x20e>
    ioposition = 0x01U << position;
 8001dbc:	f04f 0e01 	mov.w	lr, #1
 8001dc0:	fa0e fe03 	lsl.w	lr, lr, r3
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001dc4:	680f      	ldr	r7, [r1, #0]
 8001dc6:	ea0e 0c07 	and.w	ip, lr, r7
    if(iocurrent == ioposition)
 8001dca:	ea3e 0607 	bics.w	r6, lr, r7
 8001dce:	d1f0      	bne.n	8001db2 <HAL_GPIO_Init+0xa6>
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001dd0:	684f      	ldr	r7, [r1, #4]
 8001dd2:	f007 0703 	and.w	r7, r7, #3
 8001dd6:	3f01      	subs	r7, #1
 8001dd8:	2f01      	cmp	r7, #1
 8001dda:	d9a1      	bls.n	8001d20 <HAL_GPIO_Init+0x14>
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001ddc:	684f      	ldr	r7, [r1, #4]
 8001dde:	f007 0703 	and.w	r7, r7, #3
 8001de2:	2f03      	cmp	r7, #3
 8001de4:	d027      	beq.n	8001e36 <HAL_GPIO_Init+0x12a>
        temp = GPIOx->PUPDR;
 8001de6:	68c7      	ldr	r7, [r0, #12]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001de8:	f04f 0e03 	mov.w	lr, #3
 8001dec:	fa0e fe02 	lsl.w	lr, lr, r2
 8001df0:	ea27 0e0e 	bic.w	lr, r7, lr
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001df4:	688f      	ldr	r7, [r1, #8]
 8001df6:	4097      	lsls	r7, r2
 8001df8:	ea47 070e 	orr.w	r7, r7, lr
        GPIOx->PUPDR = temp;
 8001dfc:	60c7      	str	r7, [r0, #12]
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001dfe:	684f      	ldr	r7, [r1, #4]
 8001e00:	f007 0703 	and.w	r7, r7, #3
 8001e04:	2f02      	cmp	r7, #2
 8001e06:	d116      	bne.n	8001e36 <HAL_GPIO_Init+0x12a>
        temp = GPIOx->AFR[position >> 3U];
 8001e08:	ea4f 0ed3 	mov.w	lr, r3, lsr #3
 8001e0c:	eb00 0e8e 	add.w	lr, r0, lr, lsl #2
 8001e10:	f8de 7020 	ldr.w	r7, [lr, #32]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001e14:	f003 0907 	and.w	r9, r3, #7
 8001e18:	ea4f 0989 	mov.w	r9, r9, lsl #2
 8001e1c:	f04f 0a0f 	mov.w	sl, #15
 8001e20:	fa0a fa09 	lsl.w	sl, sl, r9
 8001e24:	ea27 0a0a 	bic.w	sl, r7, sl
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001e28:	690f      	ldr	r7, [r1, #16]
 8001e2a:	fa07 f709 	lsl.w	r7, r7, r9
 8001e2e:	ea47 070a 	orr.w	r7, r7, sl
        GPIOx->AFR[position >> 3U] = temp;
 8001e32:	f8ce 7020 	str.w	r7, [lr, #32]
      temp = GPIOx->MODER;
 8001e36:	6807      	ldr	r7, [r0, #0]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001e38:	f04f 0e03 	mov.w	lr, #3
 8001e3c:	fa0e fe02 	lsl.w	lr, lr, r2
 8001e40:	ea27 0e0e 	bic.w	lr, r7, lr
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001e44:	684f      	ldr	r7, [r1, #4]
 8001e46:	f007 0703 	and.w	r7, r7, #3
 8001e4a:	4097      	lsls	r7, r2
 8001e4c:	ea47 070e 	orr.w	r7, r7, lr
      GPIOx->MODER = temp;
 8001e50:	6007      	str	r7, [r0, #0]
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001e52:	684f      	ldr	r7, [r1, #4]
 8001e54:	f417 3f40 	tst.w	r7, #196608	; 0x30000
 8001e58:	d0ab      	beq.n	8001db2 <HAL_GPIO_Init+0xa6>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001e5a:	2700      	movs	r7, #0
 8001e5c:	9701      	str	r7, [sp, #4]
 8001e5e:	6c6f      	ldr	r7, [r5, #68]	; 0x44
 8001e60:	f447 4780 	orr.w	r7, r7, #16384	; 0x4000
 8001e64:	646f      	str	r7, [r5, #68]	; 0x44
 8001e66:	6c6f      	ldr	r7, [r5, #68]	; 0x44
 8001e68:	f407 4780 	and.w	r7, r7, #16384	; 0x4000
 8001e6c:	9701      	str	r7, [sp, #4]
 8001e6e:	9f01      	ldr	r7, [sp, #4]
        temp = SYSCFG->EXTICR[position >> 2U];
 8001e70:	f023 0703 	bic.w	r7, r3, #3
 8001e74:	f107 4780 	add.w	r7, r7, #1073741824	; 0x40000000
 8001e78:	f507 379c 	add.w	r7, r7, #79872	; 0x13800
 8001e7c:	f8d7 a008 	ldr.w	sl, [r7, #8]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001e80:	f003 0e03 	and.w	lr, r3, #3
 8001e84:	ea4f 0b8e 	mov.w	fp, lr, lsl #2
 8001e88:	f04f 0e0f 	mov.w	lr, #15
 8001e8c:	fa0e fe0b 	lsl.w	lr, lr, fp
 8001e90:	ea2a 0a0e 	bic.w	sl, sl, lr
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001e94:	4e24      	ldr	r6, [pc, #144]	; (8001f28 <HAL_GPIO_Init+0x21c>)
 8001e96:	42b0      	cmp	r0, r6
 8001e98:	f43f af59 	beq.w	8001d4e <HAL_GPIO_Init+0x42>
 8001e9c:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8001ea0:	42b0      	cmp	r0, r6
 8001ea2:	d022      	beq.n	8001eea <HAL_GPIO_Init+0x1de>
 8001ea4:	4540      	cmp	r0, r8
 8001ea6:	d023      	beq.n	8001ef0 <HAL_GPIO_Init+0x1e4>
 8001ea8:	f506 6600 	add.w	r6, r6, #2048	; 0x800
 8001eac:	42b0      	cmp	r0, r6
 8001eae:	d022      	beq.n	8001ef6 <HAL_GPIO_Init+0x1ea>
 8001eb0:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8001eb4:	42b0      	cmp	r0, r6
 8001eb6:	d021      	beq.n	8001efc <HAL_GPIO_Init+0x1f0>
 8001eb8:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8001ebc:	42b0      	cmp	r0, r6
 8001ebe:	d020      	beq.n	8001f02 <HAL_GPIO_Init+0x1f6>
 8001ec0:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8001ec4:	42b0      	cmp	r0, r6
 8001ec6:	d01f      	beq.n	8001f08 <HAL_GPIO_Init+0x1fc>
 8001ec8:	f8df e064 	ldr.w	lr, [pc, #100]	; 8001f30 <HAL_GPIO_Init+0x224>
 8001ecc:	4570      	cmp	r0, lr
 8001ece:	d01e      	beq.n	8001f0e <HAL_GPIO_Init+0x202>
 8001ed0:	f50e 6e80 	add.w	lr, lr, #1024	; 0x400
 8001ed4:	4570      	cmp	r0, lr
 8001ed6:	d01d      	beq.n	8001f14 <HAL_GPIO_Init+0x208>
 8001ed8:	f50e 6e80 	add.w	lr, lr, #1024	; 0x400
 8001edc:	4570      	cmp	r0, lr
 8001ede:	bf0c      	ite	eq
 8001ee0:	f04f 0e09 	moveq.w	lr, #9
 8001ee4:	f04f 0e0a 	movne.w	lr, #10
 8001ee8:	e733      	b.n	8001d52 <HAL_GPIO_Init+0x46>
 8001eea:	f04f 0e01 	mov.w	lr, #1
 8001eee:	e730      	b.n	8001d52 <HAL_GPIO_Init+0x46>
 8001ef0:	f04f 0e02 	mov.w	lr, #2
 8001ef4:	e72d      	b.n	8001d52 <HAL_GPIO_Init+0x46>
 8001ef6:	f04f 0e03 	mov.w	lr, #3
 8001efa:	e72a      	b.n	8001d52 <HAL_GPIO_Init+0x46>
 8001efc:	f04f 0e04 	mov.w	lr, #4
 8001f00:	e727      	b.n	8001d52 <HAL_GPIO_Init+0x46>
 8001f02:	f04f 0e05 	mov.w	lr, #5
 8001f06:	e724      	b.n	8001d52 <HAL_GPIO_Init+0x46>
 8001f08:	f04f 0e06 	mov.w	lr, #6
 8001f0c:	e721      	b.n	8001d52 <HAL_GPIO_Init+0x46>
 8001f0e:	f04f 0e07 	mov.w	lr, #7
 8001f12:	e71e      	b.n	8001d52 <HAL_GPIO_Init+0x46>
 8001f14:	f04f 0e08 	mov.w	lr, #8
 8001f18:	e71b      	b.n	8001d52 <HAL_GPIO_Init+0x46>
      }
    }
  }
}
 8001f1a:	b003      	add	sp, #12
 8001f1c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001f20:	40023800 	.word	0x40023800
 8001f24:	40013c00 	.word	0x40013c00
 8001f28:	40020000 	.word	0x40020000
 8001f2c:	40020800 	.word	0x40020800
 8001f30:	40021c00 	.word	0x40021c00

08001f34 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001f34:	b10a      	cbz	r2, 8001f3a <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001f36:	6181      	str	r1, [r0, #24]
 8001f38:	4770      	bx	lr
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001f3a:	0409      	lsls	r1, r1, #16
 8001f3c:	6181      	str	r1, [r0, #24]
  }
}
 8001f3e:	4770      	bx	lr

08001f40 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8001f40:	b570      	push	{r4, r5, r6, lr}
 8001f42:	b08a      	sub	sp, #40	; 0x28
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8001f44:	2800      	cmp	r0, #0
 8001f46:	f000 8090 	beq.w	800206a <HAL_PCD_Init+0x12a>
 8001f4a:	4605      	mov	r5, r0
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8001f4c:	6804      	ldr	r4, [r0, #0]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8001f4e:	f890 34bd 	ldrb.w	r3, [r0, #1213]	; 0x4bd
 8001f52:	b33b      	cbz	r3, 8001fa4 <HAL_PCD_Init+0x64>
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8001f54:	2303      	movs	r3, #3
 8001f56:	f885 34bd 	strb.w	r3, [r5, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8001f5a:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8001f5c:	f413 7f80 	tst.w	r3, #256	; 0x100
  {
    hpcd->Init.dma_enable = 0U;
 8001f60:	bf04      	itt	eq
 8001f62:	2300      	moveq	r3, #0
 8001f64:	612b      	streq	r3, [r5, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8001f66:	6828      	ldr	r0, [r5, #0]
 8001f68:	f000 ff6d 	bl	8002e46 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001f6c:	462c      	mov	r4, r5
 8001f6e:	f854 6b10 	ldr.w	r6, [r4], #16
 8001f72:	46ec      	mov	ip, sp
 8001f74:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001f76:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8001f7a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001f7c:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8001f80:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001f84:	e88c 0003 	stmia.w	ip, {r0, r1}
 8001f88:	1d2b      	adds	r3, r5, #4
 8001f8a:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001f8c:	4630      	mov	r0, r6
 8001f8e:	f000 ff15 	bl	8002dbc <USB_CoreInit>
 8001f92:	4604      	mov	r4, r0
 8001f94:	b158      	cbz	r0, 8001fae <HAL_PCD_Init+0x6e>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001f96:	2302      	movs	r3, #2
 8001f98:	f885 34bd 	strb.w	r3, [r5, #1213]	; 0x4bd
    return HAL_ERROR;
 8001f9c:	2401      	movs	r4, #1
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);

  return HAL_OK;
}
 8001f9e:	4620      	mov	r0, r4
 8001fa0:	b00a      	add	sp, #40	; 0x28
 8001fa2:	bd70      	pop	{r4, r5, r6, pc}
    hpcd->Lock = HAL_UNLOCKED;
 8001fa4:	f880 34bc 	strb.w	r3, [r0, #1212]	; 0x4bc
    HAL_PCD_MspInit(hpcd);
 8001fa8:	f7fe fc90 	bl	80008cc <HAL_PCD_MspInit>
 8001fac:	e7d2      	b.n	8001f54 <HAL_PCD_Init+0x14>
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8001fae:	2100      	movs	r1, #0
 8001fb0:	6828      	ldr	r0, [r5, #0]
 8001fb2:	f000 ff4e 	bl	8002e52 <USB_SetCurrentMode>
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001fb6:	6868      	ldr	r0, [r5, #4]
 8001fb8:	b398      	cbz	r0, 8002022 <HAL_PCD_Init+0xe2>
 8001fba:	4623      	mov	r3, r4
    hpcd->IN_ep[i].is_in = 1U;
 8001fbc:	f04f 0c01 	mov.w	ip, #1
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8001fc0:	2100      	movs	r1, #0
    hpcd->IN_ep[i].is_in = 1U;
 8001fc2:	eb03 02c3 	add.w	r2, r3, r3, lsl #3
 8001fc6:	eb05 0282 	add.w	r2, r5, r2, lsl #2
 8001fca:	f882 c03d 	strb.w	ip, [r2, #61]	; 0x3d
    hpcd->IN_ep[i].num = i;
 8001fce:	f882 303c 	strb.w	r3, [r2, #60]	; 0x3c
    hpcd->IN_ep[i].tx_fifo_num = i;
 8001fd2:	f8a2 3044 	strh.w	r3, [r2, #68]	; 0x44
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8001fd6:	f882 1040 	strb.w	r1, [r2, #64]	; 0x40
    hpcd->IN_ep[i].maxpacket = 0U;
 8001fda:	6491      	str	r1, [r2, #72]	; 0x48
    hpcd->IN_ep[i].xfer_buff = 0U;
 8001fdc:	64d1      	str	r1, [r2, #76]	; 0x4c
    hpcd->IN_ep[i].xfer_len = 0U;
 8001fde:	eb03 02c3 	add.w	r2, r3, r3, lsl #3
 8001fe2:	eb05 0282 	add.w	r2, r5, r2, lsl #2
 8001fe6:	6551      	str	r1, [r2, #84]	; 0x54
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001fe8:	3301      	adds	r3, #1
 8001fea:	b2db      	uxtb	r3, r3
 8001fec:	4283      	cmp	r3, r0
 8001fee:	d3e8      	bcc.n	8001fc2 <HAL_PCD_Init+0x82>
    hpcd->OUT_ep[i].is_in = 0U;
 8001ff0:	2200      	movs	r2, #0
 8001ff2:	eb04 03c4 	add.w	r3, r4, r4, lsl #3
 8001ff6:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 8001ffa:	f883 227d 	strb.w	r2, [r3, #637]	; 0x27d
    hpcd->OUT_ep[i].num = i;
 8001ffe:	f883 427c 	strb.w	r4, [r3, #636]	; 0x27c
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8002002:	f883 2280 	strb.w	r2, [r3, #640]	; 0x280
    hpcd->OUT_ep[i].maxpacket = 0U;
 8002006:	f8c3 2288 	str.w	r2, [r3, #648]	; 0x288
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800200a:	f8c3 228c 	str.w	r2, [r3, #652]	; 0x28c
    hpcd->OUT_ep[i].xfer_len = 0U;
 800200e:	eb04 03c4 	add.w	r3, r4, r4, lsl #3
 8002012:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 8002016:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800201a:	3401      	adds	r4, #1
 800201c:	b2e4      	uxtb	r4, r4
 800201e:	4284      	cmp	r4, r0
 8002020:	d3e7      	bcc.n	8001ff2 <HAL_PCD_Init+0xb2>
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002022:	462c      	mov	r4, r5
 8002024:	f854 6b10 	ldr.w	r6, [r4], #16
 8002028:	46ec      	mov	ip, sp
 800202a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800202c:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8002030:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002032:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8002036:	e894 0003 	ldmia.w	r4, {r0, r1}
 800203a:	e88c 0003 	stmia.w	ip, {r0, r1}
 800203e:	1d2b      	adds	r3, r5, #4
 8002040:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002042:	4630      	mov	r0, r6
 8002044:	f000 ff8c 	bl	8002f60 <USB_DevInit>
 8002048:	4604      	mov	r4, r0
 800204a:	b120      	cbz	r0, 8002056 <HAL_PCD_Init+0x116>
    hpcd->State = HAL_PCD_STATE_ERROR;
 800204c:	2302      	movs	r3, #2
 800204e:	f885 34bd 	strb.w	r3, [r5, #1213]	; 0x4bd
    return HAL_ERROR;
 8002052:	2401      	movs	r4, #1
 8002054:	e7a3      	b.n	8001f9e <HAL_PCD_Init+0x5e>
  hpcd->USB_Address = 0U;
 8002056:	2300      	movs	r3, #0
 8002058:	f885 3038 	strb.w	r3, [r5, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 800205c:	2301      	movs	r3, #1
 800205e:	f885 34bd 	strb.w	r3, [r5, #1213]	; 0x4bd
  (void)USB_DevDisconnect(hpcd->Instance);
 8002062:	6828      	ldr	r0, [r5, #0]
 8002064:	f001 f848 	bl	80030f8 <USB_DevDisconnect>
  return HAL_OK;
 8002068:	e799      	b.n	8001f9e <HAL_PCD_Init+0x5e>
    return HAL_ERROR;
 800206a:	2401      	movs	r4, #1
 800206c:	e797      	b.n	8001f9e <HAL_PCD_Init+0x5e>
	...

08002070 <HAL_RCC_OscConfig>:
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002070:	2800      	cmp	r0, #0
 8002072:	f000 81e1 	beq.w	8002438 <HAL_RCC_OscConfig+0x3c8>
{
 8002076:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800207a:	b082      	sub	sp, #8
 800207c:	4604      	mov	r4, r0
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800207e:	6803      	ldr	r3, [r0, #0]
 8002080:	f013 0f01 	tst.w	r3, #1
 8002084:	d03b      	beq.n	80020fe <HAL_RCC_OscConfig+0x8e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002086:	4b9f      	ldr	r3, [pc, #636]	; (8002304 <HAL_RCC_OscConfig+0x294>)
 8002088:	689b      	ldr	r3, [r3, #8]
 800208a:	f003 030c 	and.w	r3, r3, #12
 800208e:	2b04      	cmp	r3, #4
 8002090:	d02c      	beq.n	80020ec <HAL_RCC_OscConfig+0x7c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002092:	4b9c      	ldr	r3, [pc, #624]	; (8002304 <HAL_RCC_OscConfig+0x294>)
 8002094:	689b      	ldr	r3, [r3, #8]
 8002096:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800209a:	2b08      	cmp	r3, #8
 800209c:	d021      	beq.n	80020e2 <HAL_RCC_OscConfig+0x72>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800209e:	6863      	ldr	r3, [r4, #4]
 80020a0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80020a4:	d04f      	beq.n	8002146 <HAL_RCC_OscConfig+0xd6>
 80020a6:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80020aa:	d052      	beq.n	8002152 <HAL_RCC_OscConfig+0xe2>
 80020ac:	4b95      	ldr	r3, [pc, #596]	; (8002304 <HAL_RCC_OscConfig+0x294>)
 80020ae:	681a      	ldr	r2, [r3, #0]
 80020b0:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80020b4:	601a      	str	r2, [r3, #0]
 80020b6:	681a      	ldr	r2, [r3, #0]
 80020b8:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80020bc:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80020be:	6863      	ldr	r3, [r4, #4]
 80020c0:	2b00      	cmp	r3, #0
 80020c2:	d050      	beq.n	8002166 <HAL_RCC_OscConfig+0xf6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80020c4:	f7fe ff1a 	bl	8000efc <HAL_GetTick>
 80020c8:	4605      	mov	r5, r0

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80020ca:	4e8e      	ldr	r6, [pc, #568]	; (8002304 <HAL_RCC_OscConfig+0x294>)
 80020cc:	6833      	ldr	r3, [r6, #0]
 80020ce:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 80020d2:	d114      	bne.n	80020fe <HAL_RCC_OscConfig+0x8e>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80020d4:	f7fe ff12 	bl	8000efc <HAL_GetTick>
 80020d8:	1b40      	subs	r0, r0, r5
 80020da:	2864      	cmp	r0, #100	; 0x64
 80020dc:	d9f6      	bls.n	80020cc <HAL_RCC_OscConfig+0x5c>
          {
            return HAL_TIMEOUT;
 80020de:	2003      	movs	r0, #3
 80020e0:	e1b1      	b.n	8002446 <HAL_RCC_OscConfig+0x3d6>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80020e2:	4b88      	ldr	r3, [pc, #544]	; (8002304 <HAL_RCC_OscConfig+0x294>)
 80020e4:	685b      	ldr	r3, [r3, #4]
 80020e6:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
 80020ea:	d0d8      	beq.n	800209e <HAL_RCC_OscConfig+0x2e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80020ec:	4b85      	ldr	r3, [pc, #532]	; (8002304 <HAL_RCC_OscConfig+0x294>)
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 80020f4:	d003      	beq.n	80020fe <HAL_RCC_OscConfig+0x8e>
 80020f6:	6863      	ldr	r3, [r4, #4]
 80020f8:	2b00      	cmp	r3, #0
 80020fa:	f000 819f 	beq.w	800243c <HAL_RCC_OscConfig+0x3cc>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80020fe:	6823      	ldr	r3, [r4, #0]
 8002100:	f013 0f02 	tst.w	r3, #2
 8002104:	d054      	beq.n	80021b0 <HAL_RCC_OscConfig+0x140>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002106:	4b7f      	ldr	r3, [pc, #508]	; (8002304 <HAL_RCC_OscConfig+0x294>)
 8002108:	689b      	ldr	r3, [r3, #8]
 800210a:	f013 0f0c 	tst.w	r3, #12
 800210e:	d03e      	beq.n	800218e <HAL_RCC_OscConfig+0x11e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002110:	4b7c      	ldr	r3, [pc, #496]	; (8002304 <HAL_RCC_OscConfig+0x294>)
 8002112:	689b      	ldr	r3, [r3, #8]
 8002114:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002118:	2b08      	cmp	r3, #8
 800211a:	d033      	beq.n	8002184 <HAL_RCC_OscConfig+0x114>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800211c:	68e3      	ldr	r3, [r4, #12]
 800211e:	2b00      	cmp	r3, #0
 8002120:	d068      	beq.n	80021f4 <HAL_RCC_OscConfig+0x184>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002122:	4b79      	ldr	r3, [pc, #484]	; (8002308 <HAL_RCC_OscConfig+0x298>)
 8002124:	2201      	movs	r2, #1
 8002126:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002128:	f7fe fee8 	bl	8000efc <HAL_GetTick>
 800212c:	4605      	mov	r5, r0

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800212e:	4e75      	ldr	r6, [pc, #468]	; (8002304 <HAL_RCC_OscConfig+0x294>)
 8002130:	6833      	ldr	r3, [r6, #0]
 8002132:	f013 0f02 	tst.w	r3, #2
 8002136:	d154      	bne.n	80021e2 <HAL_RCC_OscConfig+0x172>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002138:	f7fe fee0 	bl	8000efc <HAL_GetTick>
 800213c:	1b40      	subs	r0, r0, r5
 800213e:	2802      	cmp	r0, #2
 8002140:	d9f6      	bls.n	8002130 <HAL_RCC_OscConfig+0xc0>
          {
            return HAL_TIMEOUT;
 8002142:	2003      	movs	r0, #3
 8002144:	e17f      	b.n	8002446 <HAL_RCC_OscConfig+0x3d6>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002146:	4a6f      	ldr	r2, [pc, #444]	; (8002304 <HAL_RCC_OscConfig+0x294>)
 8002148:	6813      	ldr	r3, [r2, #0]
 800214a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800214e:	6013      	str	r3, [r2, #0]
 8002150:	e7b5      	b.n	80020be <HAL_RCC_OscConfig+0x4e>
 8002152:	4b6c      	ldr	r3, [pc, #432]	; (8002304 <HAL_RCC_OscConfig+0x294>)
 8002154:	681a      	ldr	r2, [r3, #0]
 8002156:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 800215a:	601a      	str	r2, [r3, #0]
 800215c:	681a      	ldr	r2, [r3, #0]
 800215e:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8002162:	601a      	str	r2, [r3, #0]
 8002164:	e7ab      	b.n	80020be <HAL_RCC_OscConfig+0x4e>
        tickstart = HAL_GetTick();
 8002166:	f7fe fec9 	bl	8000efc <HAL_GetTick>
 800216a:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800216c:	4e65      	ldr	r6, [pc, #404]	; (8002304 <HAL_RCC_OscConfig+0x294>)
 800216e:	6833      	ldr	r3, [r6, #0]
 8002170:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8002174:	d0c3      	beq.n	80020fe <HAL_RCC_OscConfig+0x8e>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002176:	f7fe fec1 	bl	8000efc <HAL_GetTick>
 800217a:	1b40      	subs	r0, r0, r5
 800217c:	2864      	cmp	r0, #100	; 0x64
 800217e:	d9f6      	bls.n	800216e <HAL_RCC_OscConfig+0xfe>
            return HAL_TIMEOUT;
 8002180:	2003      	movs	r0, #3
 8002182:	e160      	b.n	8002446 <HAL_RCC_OscConfig+0x3d6>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002184:	4b5f      	ldr	r3, [pc, #380]	; (8002304 <HAL_RCC_OscConfig+0x294>)
 8002186:	685b      	ldr	r3, [r3, #4]
 8002188:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
 800218c:	d1c6      	bne.n	800211c <HAL_RCC_OscConfig+0xac>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800218e:	4b5d      	ldr	r3, [pc, #372]	; (8002304 <HAL_RCC_OscConfig+0x294>)
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	f013 0f02 	tst.w	r3, #2
 8002196:	d003      	beq.n	80021a0 <HAL_RCC_OscConfig+0x130>
 8002198:	68e3      	ldr	r3, [r4, #12]
 800219a:	2b01      	cmp	r3, #1
 800219c:	f040 8150 	bne.w	8002440 <HAL_RCC_OscConfig+0x3d0>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80021a0:	4a58      	ldr	r2, [pc, #352]	; (8002304 <HAL_RCC_OscConfig+0x294>)
 80021a2:	6813      	ldr	r3, [r2, #0]
 80021a4:	6921      	ldr	r1, [r4, #16]
 80021a6:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 80021aa:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 80021ae:	6013      	str	r3, [r2, #0]
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80021b0:	6823      	ldr	r3, [r4, #0]
 80021b2:	f013 0f08 	tst.w	r3, #8
 80021b6:	d042      	beq.n	800223e <HAL_RCC_OscConfig+0x1ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80021b8:	6963      	ldr	r3, [r4, #20]
 80021ba:	b36b      	cbz	r3, 8002218 <HAL_RCC_OscConfig+0x1a8>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80021bc:	4b52      	ldr	r3, [pc, #328]	; (8002308 <HAL_RCC_OscConfig+0x298>)
 80021be:	2201      	movs	r2, #1
 80021c0:	f8c3 2e80 	str.w	r2, [r3, #3712]	; 0xe80

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80021c4:	f7fe fe9a 	bl	8000efc <HAL_GetTick>
 80021c8:	4605      	mov	r5, r0

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80021ca:	4e4e      	ldr	r6, [pc, #312]	; (8002304 <HAL_RCC_OscConfig+0x294>)
 80021cc:	6f73      	ldr	r3, [r6, #116]	; 0x74
 80021ce:	f013 0f02 	tst.w	r3, #2
 80021d2:	d134      	bne.n	800223e <HAL_RCC_OscConfig+0x1ce>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80021d4:	f7fe fe92 	bl	8000efc <HAL_GetTick>
 80021d8:	1b40      	subs	r0, r0, r5
 80021da:	2802      	cmp	r0, #2
 80021dc:	d9f6      	bls.n	80021cc <HAL_RCC_OscConfig+0x15c>
        {
          return HAL_TIMEOUT;
 80021de:	2003      	movs	r0, #3
 80021e0:	e131      	b.n	8002446 <HAL_RCC_OscConfig+0x3d6>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80021e2:	4a48      	ldr	r2, [pc, #288]	; (8002304 <HAL_RCC_OscConfig+0x294>)
 80021e4:	6813      	ldr	r3, [r2, #0]
 80021e6:	6921      	ldr	r1, [r4, #16]
 80021e8:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 80021ec:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 80021f0:	6013      	str	r3, [r2, #0]
 80021f2:	e7dd      	b.n	80021b0 <HAL_RCC_OscConfig+0x140>
        __HAL_RCC_HSI_DISABLE();
 80021f4:	4b44      	ldr	r3, [pc, #272]	; (8002308 <HAL_RCC_OscConfig+0x298>)
 80021f6:	2200      	movs	r2, #0
 80021f8:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 80021fa:	f7fe fe7f 	bl	8000efc <HAL_GetTick>
 80021fe:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002200:	4e40      	ldr	r6, [pc, #256]	; (8002304 <HAL_RCC_OscConfig+0x294>)
 8002202:	6833      	ldr	r3, [r6, #0]
 8002204:	f013 0f02 	tst.w	r3, #2
 8002208:	d0d2      	beq.n	80021b0 <HAL_RCC_OscConfig+0x140>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800220a:	f7fe fe77 	bl	8000efc <HAL_GetTick>
 800220e:	1b40      	subs	r0, r0, r5
 8002210:	2802      	cmp	r0, #2
 8002212:	d9f6      	bls.n	8002202 <HAL_RCC_OscConfig+0x192>
            return HAL_TIMEOUT;
 8002214:	2003      	movs	r0, #3
 8002216:	e116      	b.n	8002446 <HAL_RCC_OscConfig+0x3d6>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002218:	4b3b      	ldr	r3, [pc, #236]	; (8002308 <HAL_RCC_OscConfig+0x298>)
 800221a:	2200      	movs	r2, #0
 800221c:	f8c3 2e80 	str.w	r2, [r3, #3712]	; 0xe80

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002220:	f7fe fe6c 	bl	8000efc <HAL_GetTick>
 8002224:	4605      	mov	r5, r0

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002226:	4e37      	ldr	r6, [pc, #220]	; (8002304 <HAL_RCC_OscConfig+0x294>)
 8002228:	6f73      	ldr	r3, [r6, #116]	; 0x74
 800222a:	f013 0f02 	tst.w	r3, #2
 800222e:	d006      	beq.n	800223e <HAL_RCC_OscConfig+0x1ce>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002230:	f7fe fe64 	bl	8000efc <HAL_GetTick>
 8002234:	1b40      	subs	r0, r0, r5
 8002236:	2802      	cmp	r0, #2
 8002238:	d9f6      	bls.n	8002228 <HAL_RCC_OscConfig+0x1b8>
        {
          return HAL_TIMEOUT;
 800223a:	2003      	movs	r0, #3
 800223c:	e103      	b.n	8002446 <HAL_RCC_OscConfig+0x3d6>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800223e:	6823      	ldr	r3, [r4, #0]
 8002240:	f013 0f04 	tst.w	r3, #4
 8002244:	d076      	beq.n	8002334 <HAL_RCC_OscConfig+0x2c4>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002246:	4b2f      	ldr	r3, [pc, #188]	; (8002304 <HAL_RCC_OscConfig+0x294>)
 8002248:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800224a:	f013 5f80 	tst.w	r3, #268435456	; 0x10000000
 800224e:	d133      	bne.n	80022b8 <HAL_RCC_OscConfig+0x248>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002250:	2300      	movs	r3, #0
 8002252:	9301      	str	r3, [sp, #4]
 8002254:	4b2b      	ldr	r3, [pc, #172]	; (8002304 <HAL_RCC_OscConfig+0x294>)
 8002256:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002258:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800225c:	641a      	str	r2, [r3, #64]	; 0x40
 800225e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002260:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002264:	9301      	str	r3, [sp, #4]
 8002266:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8002268:	2501      	movs	r5, #1
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800226a:	4b28      	ldr	r3, [pc, #160]	; (800230c <HAL_RCC_OscConfig+0x29c>)
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	f413 7f80 	tst.w	r3, #256	; 0x100
 8002272:	d023      	beq.n	80022bc <HAL_RCC_OscConfig+0x24c>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002274:	68a3      	ldr	r3, [r4, #8]
 8002276:	2b01      	cmp	r3, #1
 8002278:	d034      	beq.n	80022e4 <HAL_RCC_OscConfig+0x274>
 800227a:	2b05      	cmp	r3, #5
 800227c:	d038      	beq.n	80022f0 <HAL_RCC_OscConfig+0x280>
 800227e:	4b21      	ldr	r3, [pc, #132]	; (8002304 <HAL_RCC_OscConfig+0x294>)
 8002280:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8002282:	f022 0201 	bic.w	r2, r2, #1
 8002286:	671a      	str	r2, [r3, #112]	; 0x70
 8002288:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800228a:	f022 0204 	bic.w	r2, r2, #4
 800228e:	671a      	str	r2, [r3, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002290:	68a3      	ldr	r3, [r4, #8]
 8002292:	2b00      	cmp	r3, #0
 8002294:	d03c      	beq.n	8002310 <HAL_RCC_OscConfig+0x2a0>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002296:	f7fe fe31 	bl	8000efc <HAL_GetTick>
 800229a:	4606      	mov	r6, r0

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800229c:	4f19      	ldr	r7, [pc, #100]	; (8002304 <HAL_RCC_OscConfig+0x294>)
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800229e:	f241 3888 	movw	r8, #5000	; 0x1388
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80022a2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80022a4:	f013 0f02 	tst.w	r3, #2
 80022a8:	d143      	bne.n	8002332 <HAL_RCC_OscConfig+0x2c2>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80022aa:	f7fe fe27 	bl	8000efc <HAL_GetTick>
 80022ae:	1b80      	subs	r0, r0, r6
 80022b0:	4540      	cmp	r0, r8
 80022b2:	d9f6      	bls.n	80022a2 <HAL_RCC_OscConfig+0x232>
        {
          return HAL_TIMEOUT;
 80022b4:	2003      	movs	r0, #3
 80022b6:	e0c6      	b.n	8002446 <HAL_RCC_OscConfig+0x3d6>
    FlagStatus       pwrclkchanged = RESET;
 80022b8:	2500      	movs	r5, #0
 80022ba:	e7d6      	b.n	800226a <HAL_RCC_OscConfig+0x1fa>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80022bc:	4a13      	ldr	r2, [pc, #76]	; (800230c <HAL_RCC_OscConfig+0x29c>)
 80022be:	6813      	ldr	r3, [r2, #0]
 80022c0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80022c4:	6013      	str	r3, [r2, #0]
      tickstart = HAL_GetTick();
 80022c6:	f7fe fe19 	bl	8000efc <HAL_GetTick>
 80022ca:	4606      	mov	r6, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80022cc:	4f0f      	ldr	r7, [pc, #60]	; (800230c <HAL_RCC_OscConfig+0x29c>)
 80022ce:	683b      	ldr	r3, [r7, #0]
 80022d0:	f413 7f80 	tst.w	r3, #256	; 0x100
 80022d4:	d1ce      	bne.n	8002274 <HAL_RCC_OscConfig+0x204>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80022d6:	f7fe fe11 	bl	8000efc <HAL_GetTick>
 80022da:	1b80      	subs	r0, r0, r6
 80022dc:	2802      	cmp	r0, #2
 80022de:	d9f6      	bls.n	80022ce <HAL_RCC_OscConfig+0x25e>
          return HAL_TIMEOUT;
 80022e0:	2003      	movs	r0, #3
 80022e2:	e0b0      	b.n	8002446 <HAL_RCC_OscConfig+0x3d6>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80022e4:	4a07      	ldr	r2, [pc, #28]	; (8002304 <HAL_RCC_OscConfig+0x294>)
 80022e6:	6f13      	ldr	r3, [r2, #112]	; 0x70
 80022e8:	f043 0301 	orr.w	r3, r3, #1
 80022ec:	6713      	str	r3, [r2, #112]	; 0x70
 80022ee:	e7cf      	b.n	8002290 <HAL_RCC_OscConfig+0x220>
 80022f0:	4b04      	ldr	r3, [pc, #16]	; (8002304 <HAL_RCC_OscConfig+0x294>)
 80022f2:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80022f4:	f042 0204 	orr.w	r2, r2, #4
 80022f8:	671a      	str	r2, [r3, #112]	; 0x70
 80022fa:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80022fc:	f042 0201 	orr.w	r2, r2, #1
 8002300:	671a      	str	r2, [r3, #112]	; 0x70
 8002302:	e7c5      	b.n	8002290 <HAL_RCC_OscConfig+0x220>
 8002304:	40023800 	.word	0x40023800
 8002308:	42470000 	.word	0x42470000
 800230c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002310:	f7fe fdf4 	bl	8000efc <HAL_GetTick>
 8002314:	4606      	mov	r6, r0

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002316:	4f52      	ldr	r7, [pc, #328]	; (8002460 <HAL_RCC_OscConfig+0x3f0>)
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002318:	f241 3888 	movw	r8, #5000	; 0x1388
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800231c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800231e:	f013 0f02 	tst.w	r3, #2
 8002322:	d006      	beq.n	8002332 <HAL_RCC_OscConfig+0x2c2>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002324:	f7fe fdea 	bl	8000efc <HAL_GetTick>
 8002328:	1b80      	subs	r0, r0, r6
 800232a:	4540      	cmp	r0, r8
 800232c:	d9f6      	bls.n	800231c <HAL_RCC_OscConfig+0x2ac>
        {
          return HAL_TIMEOUT;
 800232e:	2003      	movs	r0, #3
 8002330:	e089      	b.n	8002446 <HAL_RCC_OscConfig+0x3d6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002332:	b9ed      	cbnz	r5, 8002370 <HAL_RCC_OscConfig+0x300>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002334:	69a3      	ldr	r3, [r4, #24]
 8002336:	2b00      	cmp	r3, #0
 8002338:	f000 8084 	beq.w	8002444 <HAL_RCC_OscConfig+0x3d4>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800233c:	4a48      	ldr	r2, [pc, #288]	; (8002460 <HAL_RCC_OscConfig+0x3f0>)
 800233e:	6892      	ldr	r2, [r2, #8]
 8002340:	f002 020c 	and.w	r2, r2, #12
 8002344:	2a08      	cmp	r2, #8
 8002346:	d051      	beq.n	80023ec <HAL_RCC_OscConfig+0x37c>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002348:	2b02      	cmp	r3, #2
 800234a:	d017      	beq.n	800237c <HAL_RCC_OscConfig+0x30c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800234c:	4b45      	ldr	r3, [pc, #276]	; (8002464 <HAL_RCC_OscConfig+0x3f4>)
 800234e:	2200      	movs	r2, #0
 8002350:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002352:	f7fe fdd3 	bl	8000efc <HAL_GetTick>
 8002356:	4604      	mov	r4, r0

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002358:	4d41      	ldr	r5, [pc, #260]	; (8002460 <HAL_RCC_OscConfig+0x3f0>)
 800235a:	682b      	ldr	r3, [r5, #0]
 800235c:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8002360:	d042      	beq.n	80023e8 <HAL_RCC_OscConfig+0x378>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002362:	f7fe fdcb 	bl	8000efc <HAL_GetTick>
 8002366:	1b00      	subs	r0, r0, r4
 8002368:	2802      	cmp	r0, #2
 800236a:	d9f6      	bls.n	800235a <HAL_RCC_OscConfig+0x2ea>
          {
            return HAL_TIMEOUT;
 800236c:	2003      	movs	r0, #3
 800236e:	e06a      	b.n	8002446 <HAL_RCC_OscConfig+0x3d6>
      __HAL_RCC_PWR_CLK_DISABLE();
 8002370:	4a3b      	ldr	r2, [pc, #236]	; (8002460 <HAL_RCC_OscConfig+0x3f0>)
 8002372:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8002374:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002378:	6413      	str	r3, [r2, #64]	; 0x40
 800237a:	e7db      	b.n	8002334 <HAL_RCC_OscConfig+0x2c4>
        __HAL_RCC_PLL_DISABLE();
 800237c:	4b39      	ldr	r3, [pc, #228]	; (8002464 <HAL_RCC_OscConfig+0x3f4>)
 800237e:	2200      	movs	r2, #0
 8002380:	661a      	str	r2, [r3, #96]	; 0x60
        tickstart = HAL_GetTick();
 8002382:	f7fe fdbb 	bl	8000efc <HAL_GetTick>
 8002386:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002388:	4e35      	ldr	r6, [pc, #212]	; (8002460 <HAL_RCC_OscConfig+0x3f0>)
 800238a:	6833      	ldr	r3, [r6, #0]
 800238c:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8002390:	d006      	beq.n	80023a0 <HAL_RCC_OscConfig+0x330>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002392:	f7fe fdb3 	bl	8000efc <HAL_GetTick>
 8002396:	1b40      	subs	r0, r0, r5
 8002398:	2802      	cmp	r0, #2
 800239a:	d9f6      	bls.n	800238a <HAL_RCC_OscConfig+0x31a>
            return HAL_TIMEOUT;
 800239c:	2003      	movs	r0, #3
 800239e:	e052      	b.n	8002446 <HAL_RCC_OscConfig+0x3d6>
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80023a0:	69e3      	ldr	r3, [r4, #28]
 80023a2:	6a22      	ldr	r2, [r4, #32]
 80023a4:	4313      	orrs	r3, r2
 80023a6:	6a62      	ldr	r2, [r4, #36]	; 0x24
 80023a8:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 80023ac:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 80023ae:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 80023b2:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 80023b4:	0852      	lsrs	r2, r2, #1
 80023b6:	3a01      	subs	r2, #1
 80023b8:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80023bc:	4a28      	ldr	r2, [pc, #160]	; (8002460 <HAL_RCC_OscConfig+0x3f0>)
 80023be:	6053      	str	r3, [r2, #4]
        __HAL_RCC_PLL_ENABLE();
 80023c0:	4b28      	ldr	r3, [pc, #160]	; (8002464 <HAL_RCC_OscConfig+0x3f4>)
 80023c2:	2201      	movs	r2, #1
 80023c4:	661a      	str	r2, [r3, #96]	; 0x60
        tickstart = HAL_GetTick();
 80023c6:	f7fe fd99 	bl	8000efc <HAL_GetTick>
 80023ca:	4604      	mov	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80023cc:	4d24      	ldr	r5, [pc, #144]	; (8002460 <HAL_RCC_OscConfig+0x3f0>)
 80023ce:	682b      	ldr	r3, [r5, #0]
 80023d0:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 80023d4:	d106      	bne.n	80023e4 <HAL_RCC_OscConfig+0x374>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80023d6:	f7fe fd91 	bl	8000efc <HAL_GetTick>
 80023da:	1b00      	subs	r0, r0, r4
 80023dc:	2802      	cmp	r0, #2
 80023de:	d9f6      	bls.n	80023ce <HAL_RCC_OscConfig+0x35e>
            return HAL_TIMEOUT;
 80023e0:	2003      	movs	r0, #3
 80023e2:	e030      	b.n	8002446 <HAL_RCC_OscConfig+0x3d6>
          return HAL_ERROR;
        }
      }
    }
  }
  return HAL_OK;
 80023e4:	2000      	movs	r0, #0
 80023e6:	e02e      	b.n	8002446 <HAL_RCC_OscConfig+0x3d6>
 80023e8:	2000      	movs	r0, #0
 80023ea:	e02c      	b.n	8002446 <HAL_RCC_OscConfig+0x3d6>
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80023ec:	2b01      	cmp	r3, #1
 80023ee:	d02d      	beq.n	800244c <HAL_RCC_OscConfig+0x3dc>
        pll_config = RCC->PLLCFGR;
 80023f0:	4b1b      	ldr	r3, [pc, #108]	; (8002460 <HAL_RCC_OscConfig+0x3f0>)
 80023f2:	685b      	ldr	r3, [r3, #4]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80023f4:	f403 0180 	and.w	r1, r3, #4194304	; 0x400000
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80023f8:	69e2      	ldr	r2, [r4, #28]
 80023fa:	4291      	cmp	r1, r2
 80023fc:	d128      	bne.n	8002450 <HAL_RCC_OscConfig+0x3e0>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80023fe:	f003 023f 	and.w	r2, r3, #63	; 0x3f
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002402:	6a21      	ldr	r1, [r4, #32]
 8002404:	428a      	cmp	r2, r1
 8002406:	d125      	bne.n	8002454 <HAL_RCC_OscConfig+0x3e4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002408:	6a61      	ldr	r1, [r4, #36]	; 0x24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800240a:	f647 72c0 	movw	r2, #32704	; 0x7fc0
 800240e:	401a      	ands	r2, r3
 8002410:	ebb2 1f81 	cmp.w	r2, r1, lsl #6
 8002414:	d120      	bne.n	8002458 <HAL_RCC_OscConfig+0x3e8>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002416:	f403 3140 	and.w	r1, r3, #196608	; 0x30000
 800241a:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 800241c:	0852      	lsrs	r2, r2, #1
 800241e:	3a01      	subs	r2, #1
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002420:	ebb1 4f02 	cmp.w	r1, r2, lsl #16
 8002424:	d11a      	bne.n	800245c <HAL_RCC_OscConfig+0x3ec>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002426:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8002428:	f003 6370 	and.w	r3, r3, #251658240	; 0xf000000
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800242c:	ebb3 6f02 	cmp.w	r3, r2, lsl #24
        return HAL_ERROR;
 8002430:	bf14      	ite	ne
 8002432:	2001      	movne	r0, #1
 8002434:	2000      	moveq	r0, #0
 8002436:	e006      	b.n	8002446 <HAL_RCC_OscConfig+0x3d6>
    return HAL_ERROR;
 8002438:	2001      	movs	r0, #1
}
 800243a:	4770      	bx	lr
        return HAL_ERROR;
 800243c:	2001      	movs	r0, #1
 800243e:	e002      	b.n	8002446 <HAL_RCC_OscConfig+0x3d6>
        return HAL_ERROR;
 8002440:	2001      	movs	r0, #1
 8002442:	e000      	b.n	8002446 <HAL_RCC_OscConfig+0x3d6>
  return HAL_OK;
 8002444:	2000      	movs	r0, #0
}
 8002446:	b002      	add	sp, #8
 8002448:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        return HAL_ERROR;
 800244c:	2001      	movs	r0, #1
 800244e:	e7fa      	b.n	8002446 <HAL_RCC_OscConfig+0x3d6>
          return HAL_ERROR;
 8002450:	2001      	movs	r0, #1
 8002452:	e7f8      	b.n	8002446 <HAL_RCC_OscConfig+0x3d6>
 8002454:	2001      	movs	r0, #1
 8002456:	e7f6      	b.n	8002446 <HAL_RCC_OscConfig+0x3d6>
 8002458:	2001      	movs	r0, #1
 800245a:	e7f4      	b.n	8002446 <HAL_RCC_OscConfig+0x3d6>
 800245c:	2001      	movs	r0, #1
 800245e:	e7f2      	b.n	8002446 <HAL_RCC_OscConfig+0x3d6>
 8002460:	40023800 	.word	0x40023800
 8002464:	42470000 	.word	0x42470000

08002468 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002468:	b508      	push	{r3, lr}
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
  uint32_t sysclockfreq = 0U;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800246a:	4b31      	ldr	r3, [pc, #196]	; (8002530 <HAL_RCC_GetSysClockFreq+0xc8>)
 800246c:	689b      	ldr	r3, [r3, #8]
 800246e:	f003 030c 	and.w	r3, r3, #12
 8002472:	2b04      	cmp	r3, #4
 8002474:	d057      	beq.n	8002526 <HAL_RCC_GetSysClockFreq+0xbe>
 8002476:	2b08      	cmp	r3, #8
 8002478:	d157      	bne.n	800252a <HAL_RCC_GetSysClockFreq+0xc2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800247a:	4b2d      	ldr	r3, [pc, #180]	; (8002530 <HAL_RCC_GetSysClockFreq+0xc8>)
 800247c:	685a      	ldr	r2, [r3, #4]
 800247e:	f002 023f 	and.w	r2, r2, #63	; 0x3f
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002482:	685b      	ldr	r3, [r3, #4]
 8002484:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
 8002488:	d02a      	beq.n	80024e0 <HAL_RCC_GetSysClockFreq+0x78>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800248a:	4b29      	ldr	r3, [pc, #164]	; (8002530 <HAL_RCC_GetSysClockFreq+0xc8>)
 800248c:	6859      	ldr	r1, [r3, #4]
 800248e:	f3c1 1c88 	ubfx	ip, r1, #6, #9
 8002492:	ea4f 114c 	mov.w	r1, ip, lsl #5
 8002496:	ebb1 000c 	subs.w	r0, r1, ip
 800249a:	eb6e 0e0e 	sbc.w	lr, lr, lr
 800249e:	ea4f 138e 	mov.w	r3, lr, lsl #6
 80024a2:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80024a6:	0181      	lsls	r1, r0, #6
 80024a8:	1a09      	subs	r1, r1, r0
 80024aa:	eb63 030e 	sbc.w	r3, r3, lr
 80024ae:	00db      	lsls	r3, r3, #3
 80024b0:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80024b4:	00c9      	lsls	r1, r1, #3
 80024b6:	eb11 0c0c 	adds.w	ip, r1, ip
 80024ba:	f143 0300 	adc.w	r3, r3, #0
 80024be:	0259      	lsls	r1, r3, #9
 80024c0:	2300      	movs	r3, #0
 80024c2:	ea4f 204c 	mov.w	r0, ip, lsl #9
 80024c6:	ea41 51dc 	orr.w	r1, r1, ip, lsr #23
 80024ca:	f7fd fee9 	bl	80002a0 <__aeabi_uldivmod>
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80024ce:	4b18      	ldr	r3, [pc, #96]	; (8002530 <HAL_RCC_GetSysClockFreq+0xc8>)
 80024d0:	685b      	ldr	r3, [r3, #4]
 80024d2:	f3c3 4301 	ubfx	r3, r3, #16, #2
 80024d6:	3301      	adds	r3, #1
 80024d8:	005b      	lsls	r3, r3, #1

      sysclockfreq = pllvco/pllp;
 80024da:	fbb0 f0f3 	udiv	r0, r0, r3
      break;
 80024de:	e025      	b.n	800252c <HAL_RCC_GetSysClockFreq+0xc4>
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80024e0:	4b13      	ldr	r3, [pc, #76]	; (8002530 <HAL_RCC_GetSysClockFreq+0xc8>)
 80024e2:	6859      	ldr	r1, [r3, #4]
 80024e4:	f3c1 1c88 	ubfx	ip, r1, #6, #9
 80024e8:	ea4f 114c 	mov.w	r1, ip, lsl #5
 80024ec:	ebb1 000c 	subs.w	r0, r1, ip
 80024f0:	eb6e 0e0e 	sbc.w	lr, lr, lr
 80024f4:	ea4f 138e 	mov.w	r3, lr, lsl #6
 80024f8:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80024fc:	0181      	lsls	r1, r0, #6
 80024fe:	1a09      	subs	r1, r1, r0
 8002500:	eb63 030e 	sbc.w	r3, r3, lr
 8002504:	00db      	lsls	r3, r3, #3
 8002506:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800250a:	00c9      	lsls	r1, r1, #3
 800250c:	eb11 0c0c 	adds.w	ip, r1, ip
 8002510:	f143 0300 	adc.w	r3, r3, #0
 8002514:	0299      	lsls	r1, r3, #10
 8002516:	2300      	movs	r3, #0
 8002518:	ea4f 208c 	mov.w	r0, ip, lsl #10
 800251c:	ea41 519c 	orr.w	r1, r1, ip, lsr #22
 8002520:	f7fd febe 	bl	80002a0 <__aeabi_uldivmod>
 8002524:	e7d3      	b.n	80024ce <HAL_RCC_GetSysClockFreq+0x66>
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002526:	4803      	ldr	r0, [pc, #12]	; (8002534 <HAL_RCC_GetSysClockFreq+0xcc>)
 8002528:	e000      	b.n	800252c <HAL_RCC_GetSysClockFreq+0xc4>
      sysclockfreq = HSI_VALUE;
 800252a:	4803      	ldr	r0, [pc, #12]	; (8002538 <HAL_RCC_GetSysClockFreq+0xd0>)
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 800252c:	bd08      	pop	{r3, pc}
 800252e:	bf00      	nop
 8002530:	40023800 	.word	0x40023800
 8002534:	007a1200 	.word	0x007a1200
 8002538:	00f42400 	.word	0x00f42400

0800253c <HAL_RCC_ClockConfig>:
  if(RCC_ClkInitStruct == NULL)
 800253c:	2800      	cmp	r0, #0
 800253e:	f000 809d 	beq.w	800267c <HAL_RCC_ClockConfig+0x140>
{
 8002542:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002546:	460d      	mov	r5, r1
 8002548:	4604      	mov	r4, r0
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800254a:	4b50      	ldr	r3, [pc, #320]	; (800268c <HAL_RCC_ClockConfig+0x150>)
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	f003 030f 	and.w	r3, r3, #15
 8002552:	428b      	cmp	r3, r1
 8002554:	d208      	bcs.n	8002568 <HAL_RCC_ClockConfig+0x2c>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002556:	b2cb      	uxtb	r3, r1
 8002558:	4a4c      	ldr	r2, [pc, #304]	; (800268c <HAL_RCC_ClockConfig+0x150>)
 800255a:	7013      	strb	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800255c:	6813      	ldr	r3, [r2, #0]
 800255e:	f003 030f 	and.w	r3, r3, #15
 8002562:	428b      	cmp	r3, r1
 8002564:	f040 808c 	bne.w	8002680 <HAL_RCC_ClockConfig+0x144>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002568:	6823      	ldr	r3, [r4, #0]
 800256a:	f013 0f02 	tst.w	r3, #2
 800256e:	d017      	beq.n	80025a0 <HAL_RCC_ClockConfig+0x64>
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002570:	f013 0f04 	tst.w	r3, #4
 8002574:	d004      	beq.n	8002580 <HAL_RCC_ClockConfig+0x44>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002576:	4a46      	ldr	r2, [pc, #280]	; (8002690 <HAL_RCC_ClockConfig+0x154>)
 8002578:	6893      	ldr	r3, [r2, #8]
 800257a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800257e:	6093      	str	r3, [r2, #8]
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002580:	6823      	ldr	r3, [r4, #0]
 8002582:	f013 0f08 	tst.w	r3, #8
 8002586:	d004      	beq.n	8002592 <HAL_RCC_ClockConfig+0x56>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002588:	4a41      	ldr	r2, [pc, #260]	; (8002690 <HAL_RCC_ClockConfig+0x154>)
 800258a:	6893      	ldr	r3, [r2, #8]
 800258c:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002590:	6093      	str	r3, [r2, #8]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002592:	4a3f      	ldr	r2, [pc, #252]	; (8002690 <HAL_RCC_ClockConfig+0x154>)
 8002594:	6893      	ldr	r3, [r2, #8]
 8002596:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800259a:	68a1      	ldr	r1, [r4, #8]
 800259c:	430b      	orrs	r3, r1
 800259e:	6093      	str	r3, [r2, #8]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80025a0:	6823      	ldr	r3, [r4, #0]
 80025a2:	f013 0f01 	tst.w	r3, #1
 80025a6:	d032      	beq.n	800260e <HAL_RCC_ClockConfig+0xd2>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80025a8:	6862      	ldr	r2, [r4, #4]
 80025aa:	2a01      	cmp	r2, #1
 80025ac:	d021      	beq.n	80025f2 <HAL_RCC_ClockConfig+0xb6>
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80025ae:	1e93      	subs	r3, r2, #2
 80025b0:	2b01      	cmp	r3, #1
 80025b2:	d925      	bls.n	8002600 <HAL_RCC_ClockConfig+0xc4>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80025b4:	4b36      	ldr	r3, [pc, #216]	; (8002690 <HAL_RCC_ClockConfig+0x154>)
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	f013 0f02 	tst.w	r3, #2
 80025bc:	d062      	beq.n	8002684 <HAL_RCC_ClockConfig+0x148>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80025be:	4934      	ldr	r1, [pc, #208]	; (8002690 <HAL_RCC_ClockConfig+0x154>)
 80025c0:	688b      	ldr	r3, [r1, #8]
 80025c2:	f023 0303 	bic.w	r3, r3, #3
 80025c6:	4313      	orrs	r3, r2
 80025c8:	608b      	str	r3, [r1, #8]
    tickstart = HAL_GetTick();
 80025ca:	f7fe fc97 	bl	8000efc <HAL_GetTick>
 80025ce:	4606      	mov	r6, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80025d0:	4f2f      	ldr	r7, [pc, #188]	; (8002690 <HAL_RCC_ClockConfig+0x154>)
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80025d2:	f241 3888 	movw	r8, #5000	; 0x1388
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80025d6:	68bb      	ldr	r3, [r7, #8]
 80025d8:	f003 030c 	and.w	r3, r3, #12
 80025dc:	6862      	ldr	r2, [r4, #4]
 80025de:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 80025e2:	d014      	beq.n	800260e <HAL_RCC_ClockConfig+0xd2>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80025e4:	f7fe fc8a 	bl	8000efc <HAL_GetTick>
 80025e8:	1b80      	subs	r0, r0, r6
 80025ea:	4540      	cmp	r0, r8
 80025ec:	d9f3      	bls.n	80025d6 <HAL_RCC_ClockConfig+0x9a>
        return HAL_TIMEOUT;
 80025ee:	2003      	movs	r0, #3
 80025f0:	e042      	b.n	8002678 <HAL_RCC_ClockConfig+0x13c>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80025f2:	4b27      	ldr	r3, [pc, #156]	; (8002690 <HAL_RCC_ClockConfig+0x154>)
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 80025fa:	d1e0      	bne.n	80025be <HAL_RCC_ClockConfig+0x82>
        return HAL_ERROR;
 80025fc:	2001      	movs	r0, #1
 80025fe:	e03b      	b.n	8002678 <HAL_RCC_ClockConfig+0x13c>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002600:	4b23      	ldr	r3, [pc, #140]	; (8002690 <HAL_RCC_ClockConfig+0x154>)
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8002608:	d1d9      	bne.n	80025be <HAL_RCC_ClockConfig+0x82>
        return HAL_ERROR;
 800260a:	2001      	movs	r0, #1
 800260c:	e034      	b.n	8002678 <HAL_RCC_ClockConfig+0x13c>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800260e:	4b1f      	ldr	r3, [pc, #124]	; (800268c <HAL_RCC_ClockConfig+0x150>)
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	f003 030f 	and.w	r3, r3, #15
 8002616:	42ab      	cmp	r3, r5
 8002618:	d907      	bls.n	800262a <HAL_RCC_ClockConfig+0xee>
    __HAL_FLASH_SET_LATENCY(FLatency);
 800261a:	b2ea      	uxtb	r2, r5
 800261c:	4b1b      	ldr	r3, [pc, #108]	; (800268c <HAL_RCC_ClockConfig+0x150>)
 800261e:	701a      	strb	r2, [r3, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	f003 030f 	and.w	r3, r3, #15
 8002626:	42ab      	cmp	r3, r5
 8002628:	d12e      	bne.n	8002688 <HAL_RCC_ClockConfig+0x14c>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800262a:	6823      	ldr	r3, [r4, #0]
 800262c:	f013 0f04 	tst.w	r3, #4
 8002630:	d006      	beq.n	8002640 <HAL_RCC_ClockConfig+0x104>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002632:	4a17      	ldr	r2, [pc, #92]	; (8002690 <HAL_RCC_ClockConfig+0x154>)
 8002634:	6893      	ldr	r3, [r2, #8]
 8002636:	f423 53e0 	bic.w	r3, r3, #7168	; 0x1c00
 800263a:	68e1      	ldr	r1, [r4, #12]
 800263c:	430b      	orrs	r3, r1
 800263e:	6093      	str	r3, [r2, #8]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002640:	6823      	ldr	r3, [r4, #0]
 8002642:	f013 0f08 	tst.w	r3, #8
 8002646:	d007      	beq.n	8002658 <HAL_RCC_ClockConfig+0x11c>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002648:	4a11      	ldr	r2, [pc, #68]	; (8002690 <HAL_RCC_ClockConfig+0x154>)
 800264a:	6893      	ldr	r3, [r2, #8]
 800264c:	6921      	ldr	r1, [r4, #16]
 800264e:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 8002652:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8002656:	6093      	str	r3, [r2, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002658:	f7ff ff06 	bl	8002468 <HAL_RCC_GetSysClockFreq>
 800265c:	4b0c      	ldr	r3, [pc, #48]	; (8002690 <HAL_RCC_ClockConfig+0x154>)
 800265e:	689b      	ldr	r3, [r3, #8]
 8002660:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8002664:	4a0b      	ldr	r2, [pc, #44]	; (8002694 <HAL_RCC_ClockConfig+0x158>)
 8002666:	5cd3      	ldrb	r3, [r2, r3]
 8002668:	40d8      	lsrs	r0, r3
 800266a:	4b0b      	ldr	r3, [pc, #44]	; (8002698 <HAL_RCC_ClockConfig+0x15c>)
 800266c:	6018      	str	r0, [r3, #0]
  HAL_InitTick (uwTickPrio);
 800266e:	4b0b      	ldr	r3, [pc, #44]	; (800269c <HAL_RCC_ClockConfig+0x160>)
 8002670:	6818      	ldr	r0, [r3, #0]
 8002672:	f7fe f96f 	bl	8000954 <HAL_InitTick>
  return HAL_OK;
 8002676:	2000      	movs	r0, #0
}
 8002678:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return HAL_ERROR;
 800267c:	2001      	movs	r0, #1
}
 800267e:	4770      	bx	lr
      return HAL_ERROR;
 8002680:	2001      	movs	r0, #1
 8002682:	e7f9      	b.n	8002678 <HAL_RCC_ClockConfig+0x13c>
        return HAL_ERROR;
 8002684:	2001      	movs	r0, #1
 8002686:	e7f7      	b.n	8002678 <HAL_RCC_ClockConfig+0x13c>
      return HAL_ERROR;
 8002688:	2001      	movs	r0, #1
 800268a:	e7f5      	b.n	8002678 <HAL_RCC_ClockConfig+0x13c>
 800268c:	40023c00 	.word	0x40023c00
 8002690:	40023800 	.word	0x40023800
 8002694:	08010328 	.word	0x08010328
 8002698:	20000000 	.word	0x20000000
 800269c:	20000008 	.word	0x20000008

080026a0 <HAL_RCC_GetHCLKFreq>:
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
  return SystemCoreClock;
}
 80026a0:	4b01      	ldr	r3, [pc, #4]	; (80026a8 <HAL_RCC_GetHCLKFreq+0x8>)
 80026a2:	6818      	ldr	r0, [r3, #0]
 80026a4:	4770      	bx	lr
 80026a6:	bf00      	nop
 80026a8:	20000000 	.word	0x20000000

080026ac <HAL_RCC_GetPCLK1Freq>:
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80026ac:	4b04      	ldr	r3, [pc, #16]	; (80026c0 <HAL_RCC_GetPCLK1Freq+0x14>)
 80026ae:	689b      	ldr	r3, [r3, #8]
 80026b0:	f3c3 2382 	ubfx	r3, r3, #10, #3
 80026b4:	4a03      	ldr	r2, [pc, #12]	; (80026c4 <HAL_RCC_GetPCLK1Freq+0x18>)
 80026b6:	5cd3      	ldrb	r3, [r2, r3]
 80026b8:	4a03      	ldr	r2, [pc, #12]	; (80026c8 <HAL_RCC_GetPCLK1Freq+0x1c>)
 80026ba:	6810      	ldr	r0, [r2, #0]
}
 80026bc:	40d8      	lsrs	r0, r3
 80026be:	4770      	bx	lr
 80026c0:	40023800 	.word	0x40023800
 80026c4:	08010338 	.word	0x08010338
 80026c8:	20000000 	.word	0x20000000

080026cc <HAL_RCC_GetPCLK2Freq>:
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80026cc:	4b04      	ldr	r3, [pc, #16]	; (80026e0 <HAL_RCC_GetPCLK2Freq+0x14>)
 80026ce:	689b      	ldr	r3, [r3, #8]
 80026d0:	f3c3 3342 	ubfx	r3, r3, #13, #3
 80026d4:	4a03      	ldr	r2, [pc, #12]	; (80026e4 <HAL_RCC_GetPCLK2Freq+0x18>)
 80026d6:	5cd3      	ldrb	r3, [r2, r3]
 80026d8:	4a03      	ldr	r2, [pc, #12]	; (80026e8 <HAL_RCC_GetPCLK2Freq+0x1c>)
 80026da:	6810      	ldr	r0, [r2, #0]
}
 80026dc:	40d8      	lsrs	r0, r3
 80026de:	4770      	bx	lr
 80026e0:	40023800 	.word	0x40023800
 80026e4:	08010338 	.word	0x08010338
 80026e8:	20000000 	.word	0x20000000

080026ec <HAL_RCC_GetClockConfig>:
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80026ec:	230f      	movs	r3, #15
 80026ee:	6003      	str	r3, [r0, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80026f0:	4b0b      	ldr	r3, [pc, #44]	; (8002720 <HAL_RCC_GetClockConfig+0x34>)
 80026f2:	689a      	ldr	r2, [r3, #8]
 80026f4:	f002 0203 	and.w	r2, r2, #3
 80026f8:	6042      	str	r2, [r0, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80026fa:	689a      	ldr	r2, [r3, #8]
 80026fc:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
 8002700:	6082      	str	r2, [r0, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8002702:	689a      	ldr	r2, [r3, #8]
 8002704:	f402 52e0 	and.w	r2, r2, #7168	; 0x1c00
 8002708:	60c2      	str	r2, [r0, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 800270a:	689b      	ldr	r3, [r3, #8]
 800270c:	08db      	lsrs	r3, r3, #3
 800270e:	f403 53e0 	and.w	r3, r3, #7168	; 0x1c00
 8002712:	6103      	str	r3, [r0, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8002714:	4b03      	ldr	r3, [pc, #12]	; (8002724 <HAL_RCC_GetClockConfig+0x38>)
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	f003 030f 	and.w	r3, r3, #15
 800271c:	600b      	str	r3, [r1, #0]
}
 800271e:	4770      	bx	lr
 8002720:	40023800 	.word	0x40023800
 8002724:	40023c00 	.word	0x40023c00

08002728 <HAL_TIM_Base_MspInit>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8002728:	4770      	bx	lr
	...

0800272c <HAL_TIM_Base_Start_IT>:

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800272c:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8002730:	b2db      	uxtb	r3, r3
 8002732:	2b01      	cmp	r3, #1
 8002734:	d137      	bne.n	80027a6 <HAL_TIM_Base_Start_IT+0x7a>
  {
    return HAL_ERROR;
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002736:	2302      	movs	r3, #2
 8002738:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800273c:	6802      	ldr	r2, [r0, #0]
 800273e:	68d3      	ldr	r3, [r2, #12]
 8002740:	f043 0301 	orr.w	r3, r3, #1
 8002744:	60d3      	str	r3, [r2, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002746:	6803      	ldr	r3, [r0, #0]
 8002748:	4a19      	ldr	r2, [pc, #100]	; (80027b0 <HAL_TIM_Base_Start_IT+0x84>)
 800274a:	4293      	cmp	r3, r2
 800274c:	d020      	beq.n	8002790 <HAL_TIM_Base_Start_IT+0x64>
 800274e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002752:	d01d      	beq.n	8002790 <HAL_TIM_Base_Start_IT+0x64>
 8002754:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 8002758:	4293      	cmp	r3, r2
 800275a:	d019      	beq.n	8002790 <HAL_TIM_Base_Start_IT+0x64>
 800275c:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8002760:	4293      	cmp	r3, r2
 8002762:	d015      	beq.n	8002790 <HAL_TIM_Base_Start_IT+0x64>
 8002764:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8002768:	4293      	cmp	r3, r2
 800276a:	d011      	beq.n	8002790 <HAL_TIM_Base_Start_IT+0x64>
 800276c:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 8002770:	4293      	cmp	r3, r2
 8002772:	d00d      	beq.n	8002790 <HAL_TIM_Base_Start_IT+0x64>
 8002774:	f502 5270 	add.w	r2, r2, #15360	; 0x3c00
 8002778:	4293      	cmp	r3, r2
 800277a:	d009      	beq.n	8002790 <HAL_TIM_Base_Start_IT+0x64>
 800277c:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 8002780:	4293      	cmp	r3, r2
 8002782:	d005      	beq.n	8002790 <HAL_TIM_Base_Start_IT+0x64>
      __HAL_TIM_ENABLE(htim);
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002784:	681a      	ldr	r2, [r3, #0]
 8002786:	f042 0201 	orr.w	r2, r2, #1
 800278a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800278c:	2000      	movs	r0, #0
 800278e:	4770      	bx	lr
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002790:	689a      	ldr	r2, [r3, #8]
 8002792:	f002 0207 	and.w	r2, r2, #7
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002796:	2a06      	cmp	r2, #6
 8002798:	d007      	beq.n	80027aa <HAL_TIM_Base_Start_IT+0x7e>
      __HAL_TIM_ENABLE(htim);
 800279a:	681a      	ldr	r2, [r3, #0]
 800279c:	f042 0201 	orr.w	r2, r2, #1
 80027a0:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 80027a2:	2000      	movs	r0, #0
 80027a4:	4770      	bx	lr
    return HAL_ERROR;
 80027a6:	2001      	movs	r0, #1
 80027a8:	4770      	bx	lr
  return HAL_OK;
 80027aa:	2000      	movs	r0, #0
}
 80027ac:	4770      	bx	lr
 80027ae:	bf00      	nop
 80027b0:	40010000 	.word	0x40010000

080027b4 <HAL_TIM_OC_DelayElapsedCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80027b4:	4770      	bx	lr

080027b6 <HAL_TIM_IC_CaptureCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80027b6:	4770      	bx	lr

080027b8 <HAL_TIM_PWM_PulseFinishedCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80027b8:	4770      	bx	lr

080027ba <HAL_TIM_TriggerCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80027ba:	4770      	bx	lr

080027bc <HAL_TIM_IRQHandler>:
{
 80027bc:	b510      	push	{r4, lr}
 80027be:	4604      	mov	r4, r0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80027c0:	6803      	ldr	r3, [r0, #0]
 80027c2:	691a      	ldr	r2, [r3, #16]
 80027c4:	f012 0f02 	tst.w	r2, #2
 80027c8:	d011      	beq.n	80027ee <HAL_TIM_IRQHandler+0x32>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80027ca:	68da      	ldr	r2, [r3, #12]
 80027cc:	f012 0f02 	tst.w	r2, #2
 80027d0:	d00d      	beq.n	80027ee <HAL_TIM_IRQHandler+0x32>
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80027d2:	f06f 0202 	mvn.w	r2, #2
 80027d6:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80027d8:	2301      	movs	r3, #1
 80027da:	7703      	strb	r3, [r0, #28]
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80027dc:	6803      	ldr	r3, [r0, #0]
 80027de:	699b      	ldr	r3, [r3, #24]
 80027e0:	f013 0f03 	tst.w	r3, #3
 80027e4:	d070      	beq.n	80028c8 <HAL_TIM_IRQHandler+0x10c>
          HAL_TIM_IC_CaptureCallback(htim);
 80027e6:	f7ff ffe6 	bl	80027b6 <HAL_TIM_IC_CaptureCallback>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80027ea:	2300      	movs	r3, #0
 80027ec:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80027ee:	6823      	ldr	r3, [r4, #0]
 80027f0:	691a      	ldr	r2, [r3, #16]
 80027f2:	f012 0f04 	tst.w	r2, #4
 80027f6:	d012      	beq.n	800281e <HAL_TIM_IRQHandler+0x62>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80027f8:	68da      	ldr	r2, [r3, #12]
 80027fa:	f012 0f04 	tst.w	r2, #4
 80027fe:	d00e      	beq.n	800281e <HAL_TIM_IRQHandler+0x62>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002800:	f06f 0204 	mvn.w	r2, #4
 8002804:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002806:	2302      	movs	r3, #2
 8002808:	7723      	strb	r3, [r4, #28]
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800280a:	6823      	ldr	r3, [r4, #0]
 800280c:	699b      	ldr	r3, [r3, #24]
 800280e:	f413 7f40 	tst.w	r3, #768	; 0x300
 8002812:	d05f      	beq.n	80028d4 <HAL_TIM_IRQHandler+0x118>
        HAL_TIM_IC_CaptureCallback(htim);
 8002814:	4620      	mov	r0, r4
 8002816:	f7ff ffce 	bl	80027b6 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800281a:	2300      	movs	r3, #0
 800281c:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800281e:	6823      	ldr	r3, [r4, #0]
 8002820:	691a      	ldr	r2, [r3, #16]
 8002822:	f012 0f08 	tst.w	r2, #8
 8002826:	d012      	beq.n	800284e <HAL_TIM_IRQHandler+0x92>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002828:	68da      	ldr	r2, [r3, #12]
 800282a:	f012 0f08 	tst.w	r2, #8
 800282e:	d00e      	beq.n	800284e <HAL_TIM_IRQHandler+0x92>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002830:	f06f 0208 	mvn.w	r2, #8
 8002834:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002836:	2304      	movs	r3, #4
 8002838:	7723      	strb	r3, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800283a:	6823      	ldr	r3, [r4, #0]
 800283c:	69db      	ldr	r3, [r3, #28]
 800283e:	f013 0f03 	tst.w	r3, #3
 8002842:	d04e      	beq.n	80028e2 <HAL_TIM_IRQHandler+0x126>
        HAL_TIM_IC_CaptureCallback(htim);
 8002844:	4620      	mov	r0, r4
 8002846:	f7ff ffb6 	bl	80027b6 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800284a:	2300      	movs	r3, #0
 800284c:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800284e:	6823      	ldr	r3, [r4, #0]
 8002850:	691a      	ldr	r2, [r3, #16]
 8002852:	f012 0f10 	tst.w	r2, #16
 8002856:	d012      	beq.n	800287e <HAL_TIM_IRQHandler+0xc2>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002858:	68da      	ldr	r2, [r3, #12]
 800285a:	f012 0f10 	tst.w	r2, #16
 800285e:	d00e      	beq.n	800287e <HAL_TIM_IRQHandler+0xc2>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002860:	f06f 0210 	mvn.w	r2, #16
 8002864:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002866:	2308      	movs	r3, #8
 8002868:	7723      	strb	r3, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800286a:	6823      	ldr	r3, [r4, #0]
 800286c:	69db      	ldr	r3, [r3, #28]
 800286e:	f413 7f40 	tst.w	r3, #768	; 0x300
 8002872:	d03d      	beq.n	80028f0 <HAL_TIM_IRQHandler+0x134>
        HAL_TIM_IC_CaptureCallback(htim);
 8002874:	4620      	mov	r0, r4
 8002876:	f7ff ff9e 	bl	80027b6 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800287a:	2300      	movs	r3, #0
 800287c:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800287e:	6823      	ldr	r3, [r4, #0]
 8002880:	691a      	ldr	r2, [r3, #16]
 8002882:	f012 0f01 	tst.w	r2, #1
 8002886:	d003      	beq.n	8002890 <HAL_TIM_IRQHandler+0xd4>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002888:	68da      	ldr	r2, [r3, #12]
 800288a:	f012 0f01 	tst.w	r2, #1
 800288e:	d136      	bne.n	80028fe <HAL_TIM_IRQHandler+0x142>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002890:	6823      	ldr	r3, [r4, #0]
 8002892:	691a      	ldr	r2, [r3, #16]
 8002894:	f012 0f80 	tst.w	r2, #128	; 0x80
 8002898:	d003      	beq.n	80028a2 <HAL_TIM_IRQHandler+0xe6>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800289a:	68da      	ldr	r2, [r3, #12]
 800289c:	f012 0f80 	tst.w	r2, #128	; 0x80
 80028a0:	d134      	bne.n	800290c <HAL_TIM_IRQHandler+0x150>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80028a2:	6823      	ldr	r3, [r4, #0]
 80028a4:	691a      	ldr	r2, [r3, #16]
 80028a6:	f012 0f40 	tst.w	r2, #64	; 0x40
 80028aa:	d003      	beq.n	80028b4 <HAL_TIM_IRQHandler+0xf8>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80028ac:	68da      	ldr	r2, [r3, #12]
 80028ae:	f012 0f40 	tst.w	r2, #64	; 0x40
 80028b2:	d132      	bne.n	800291a <HAL_TIM_IRQHandler+0x15e>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80028b4:	6823      	ldr	r3, [r4, #0]
 80028b6:	691a      	ldr	r2, [r3, #16]
 80028b8:	f012 0f20 	tst.w	r2, #32
 80028bc:	d003      	beq.n	80028c6 <HAL_TIM_IRQHandler+0x10a>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80028be:	68da      	ldr	r2, [r3, #12]
 80028c0:	f012 0f20 	tst.w	r2, #32
 80028c4:	d130      	bne.n	8002928 <HAL_TIM_IRQHandler+0x16c>
}
 80028c6:	bd10      	pop	{r4, pc}
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80028c8:	f7ff ff74 	bl	80027b4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80028cc:	4620      	mov	r0, r4
 80028ce:	f7ff ff73 	bl	80027b8 <HAL_TIM_PWM_PulseFinishedCallback>
 80028d2:	e78a      	b.n	80027ea <HAL_TIM_IRQHandler+0x2e>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80028d4:	4620      	mov	r0, r4
 80028d6:	f7ff ff6d 	bl	80027b4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80028da:	4620      	mov	r0, r4
 80028dc:	f7ff ff6c 	bl	80027b8 <HAL_TIM_PWM_PulseFinishedCallback>
 80028e0:	e79b      	b.n	800281a <HAL_TIM_IRQHandler+0x5e>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80028e2:	4620      	mov	r0, r4
 80028e4:	f7ff ff66 	bl	80027b4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80028e8:	4620      	mov	r0, r4
 80028ea:	f7ff ff65 	bl	80027b8 <HAL_TIM_PWM_PulseFinishedCallback>
 80028ee:	e7ac      	b.n	800284a <HAL_TIM_IRQHandler+0x8e>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80028f0:	4620      	mov	r0, r4
 80028f2:	f7ff ff5f 	bl	80027b4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80028f6:	4620      	mov	r0, r4
 80028f8:	f7ff ff5e 	bl	80027b8 <HAL_TIM_PWM_PulseFinishedCallback>
 80028fc:	e7bd      	b.n	800287a <HAL_TIM_IRQHandler+0xbe>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80028fe:	f06f 0201 	mvn.w	r2, #1
 8002902:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 8002904:	4620      	mov	r0, r4
 8002906:	f7fd ff79 	bl	80007fc <HAL_TIM_PeriodElapsedCallback>
 800290a:	e7c1      	b.n	8002890 <HAL_TIM_IRQHandler+0xd4>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800290c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002910:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 8002912:	4620      	mov	r0, r4
 8002914:	f000 f8c1 	bl	8002a9a <HAL_TIMEx_BreakCallback>
 8002918:	e7c3      	b.n	80028a2 <HAL_TIM_IRQHandler+0xe6>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800291a:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800291e:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 8002920:	4620      	mov	r0, r4
 8002922:	f7ff ff4a 	bl	80027ba <HAL_TIM_TriggerCallback>
 8002926:	e7c5      	b.n	80028b4 <HAL_TIM_IRQHandler+0xf8>
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002928:	f06f 0220 	mvn.w	r2, #32
 800292c:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_CommutCallback(htim);
 800292e:	4620      	mov	r0, r4
 8002930:	f000 f8b2 	bl	8002a98 <HAL_TIMEx_CommutCallback>
}
 8002934:	e7c7      	b.n	80028c6 <HAL_TIM_IRQHandler+0x10a>
	...

08002938 <TIM_Base_SetConfig>:
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002938:	6803      	ldr	r3, [r0, #0]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800293a:	4a40      	ldr	r2, [pc, #256]	; (8002a3c <TIM_Base_SetConfig+0x104>)
 800293c:	4290      	cmp	r0, r2
 800293e:	d05d      	beq.n	80029fc <TIM_Base_SetConfig+0xc4>
 8002940:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8002944:	d031      	beq.n	80029aa <TIM_Base_SetConfig+0x72>
 8002946:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 800294a:	4290      	cmp	r0, r2
 800294c:	d051      	beq.n	80029f2 <TIM_Base_SetConfig+0xba>
 800294e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8002952:	4290      	cmp	r0, r2
 8002954:	d06d      	beq.n	8002a32 <TIM_Base_SetConfig+0xfa>
 8002956:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800295a:	4290      	cmp	r0, r2
 800295c:	d064      	beq.n	8002a28 <TIM_Base_SetConfig+0xf0>
 800295e:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 8002962:	4290      	cmp	r0, r2
 8002964:	d033      	beq.n	80029ce <TIM_Base_SetConfig+0x96>
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
    tmpcr1 |= Structure->CounterMode;
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002966:	f502 5270 	add.w	r2, r2, #15360	; 0x3c00
 800296a:	4290      	cmp	r0, r2
 800296c:	d021      	beq.n	80029b2 <TIM_Base_SetConfig+0x7a>
 800296e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8002972:	4290      	cmp	r0, r2
 8002974:	d01d      	beq.n	80029b2 <TIM_Base_SetConfig+0x7a>
 8002976:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800297a:	4290      	cmp	r0, r2
 800297c:	d019      	beq.n	80029b2 <TIM_Base_SetConfig+0x7a>
 800297e:	f5a2 3298 	sub.w	r2, r2, #77824	; 0x13000
 8002982:	4290      	cmp	r0, r2
 8002984:	d015      	beq.n	80029b2 <TIM_Base_SetConfig+0x7a>
 8002986:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800298a:	4290      	cmp	r0, r2
 800298c:	d011      	beq.n	80029b2 <TIM_Base_SetConfig+0x7a>
 800298e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8002992:	4290      	cmp	r0, r2
 8002994:	d00d      	beq.n	80029b2 <TIM_Base_SetConfig+0x7a>
    tmpcr1 &= ~TIM_CR1_CKD;
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002996:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800299a:	694a      	ldr	r2, [r1, #20]
 800299c:	4313      	orrs	r3, r2

  TIMx->CR1 = tmpcr1;
 800299e:	6003      	str	r3, [r0, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80029a0:	688b      	ldr	r3, [r1, #8]
 80029a2:	62c3      	str	r3, [r0, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80029a4:	680b      	ldr	r3, [r1, #0]
 80029a6:	6283      	str	r3, [r0, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80029a8:	e03b      	b.n	8002a22 <TIM_Base_SetConfig+0xea>
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80029aa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 80029ae:	684a      	ldr	r2, [r1, #4]
 80029b0:	4313      	orrs	r3, r2
    tmpcr1 &= ~TIM_CR1_CKD;
 80029b2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80029b6:	68ca      	ldr	r2, [r1, #12]
 80029b8:	4313      	orrs	r3, r2
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80029ba:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80029be:	694a      	ldr	r2, [r1, #20]
 80029c0:	4313      	orrs	r3, r2
  TIMx->CR1 = tmpcr1;
 80029c2:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 80029c4:	688b      	ldr	r3, [r1, #8]
 80029c6:	62c3      	str	r3, [r0, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 80029c8:	680b      	ldr	r3, [r1, #0]
 80029ca:	6283      	str	r3, [r0, #40]	; 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80029cc:	e029      	b.n	8002a22 <TIM_Base_SetConfig+0xea>
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80029ce:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 80029d2:	684a      	ldr	r2, [r1, #4]
 80029d4:	4313      	orrs	r3, r2
    tmpcr1 &= ~TIM_CR1_CKD;
 80029d6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80029da:	68ca      	ldr	r2, [r1, #12]
 80029dc:	4313      	orrs	r3, r2
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80029de:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80029e2:	694a      	ldr	r2, [r1, #20]
 80029e4:	4313      	orrs	r3, r2
  TIMx->CR1 = tmpcr1;
 80029e6:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 80029e8:	688b      	ldr	r3, [r1, #8]
 80029ea:	62c3      	str	r3, [r0, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 80029ec:	680b      	ldr	r3, [r1, #0]
 80029ee:	6283      	str	r3, [r0, #40]	; 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80029f0:	e015      	b.n	8002a1e <TIM_Base_SetConfig+0xe6>
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80029f2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 80029f6:	684a      	ldr	r2, [r1, #4]
 80029f8:	4313      	orrs	r3, r2
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80029fa:	e7da      	b.n	80029b2 <TIM_Base_SetConfig+0x7a>
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80029fc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8002a00:	684a      	ldr	r2, [r1, #4]
 8002a02:	4313      	orrs	r3, r2
    tmpcr1 &= ~TIM_CR1_CKD;
 8002a04:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002a08:	68ca      	ldr	r2, [r1, #12]
 8002a0a:	4313      	orrs	r3, r2
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002a0c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002a10:	694a      	ldr	r2, [r1, #20]
 8002a12:	4313      	orrs	r3, r2
  TIMx->CR1 = tmpcr1;
 8002a14:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002a16:	688b      	ldr	r3, [r1, #8]
 8002a18:	62c3      	str	r3, [r0, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 8002a1a:	680b      	ldr	r3, [r1, #0]
 8002a1c:	6283      	str	r3, [r0, #40]	; 0x28
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002a1e:	690b      	ldr	r3, [r1, #16]
 8002a20:	6303      	str	r3, [r0, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002a22:	2301      	movs	r3, #1
 8002a24:	6143      	str	r3, [r0, #20]
}
 8002a26:	4770      	bx	lr
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002a28:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8002a2c:	684a      	ldr	r2, [r1, #4]
 8002a2e:	4313      	orrs	r3, r2
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002a30:	e7bf      	b.n	80029b2 <TIM_Base_SetConfig+0x7a>
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002a32:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8002a36:	684a      	ldr	r2, [r1, #4]
 8002a38:	4313      	orrs	r3, r2
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002a3a:	e7ba      	b.n	80029b2 <TIM_Base_SetConfig+0x7a>
 8002a3c:	40010000 	.word	0x40010000

08002a40 <HAL_TIM_Base_Init>:
  if (htim == NULL)
 8002a40:	b340      	cbz	r0, 8002a94 <HAL_TIM_Base_Init+0x54>
{
 8002a42:	b510      	push	{r4, lr}
 8002a44:	4604      	mov	r4, r0
  if (htim->State == HAL_TIM_STATE_RESET)
 8002a46:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8002a4a:	b1f3      	cbz	r3, 8002a8a <HAL_TIM_Base_Init+0x4a>
  htim->State = HAL_TIM_STATE_BUSY;
 8002a4c:	2302      	movs	r3, #2
 8002a4e:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002a52:	4621      	mov	r1, r4
 8002a54:	f851 0b04 	ldr.w	r0, [r1], #4
 8002a58:	f7ff ff6e 	bl	8002938 <TIM_Base_SetConfig>
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002a5c:	2301      	movs	r3, #1
 8002a5e:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002a62:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
 8002a66:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
 8002a6a:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 8002a6e:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002a72:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8002a76:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8002a7a:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 8002a7e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
  htim->State = HAL_TIM_STATE_READY;
 8002a82:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 8002a86:	2000      	movs	r0, #0
}
 8002a88:	bd10      	pop	{r4, pc}
    htim->Lock = HAL_UNLOCKED;
 8002a8a:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
    HAL_TIM_Base_MspInit(htim);
 8002a8e:	f7ff fe4b 	bl	8002728 <HAL_TIM_Base_MspInit>
 8002a92:	e7db      	b.n	8002a4c <HAL_TIM_Base_Init+0xc>
    return HAL_ERROR;
 8002a94:	2001      	movs	r0, #1
}
 8002a96:	4770      	bx	lr

08002a98 <HAL_TIMEx_CommutCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002a98:	4770      	bx	lr

08002a9a <HAL_TIMEx_BreakCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002a9a:	4770      	bx	lr

08002a9c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002a9c:	b538      	push	{r3, r4, r5, lr}
 8002a9e:	4604      	mov	r4, r0
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002aa0:	6802      	ldr	r2, [r0, #0]
 8002aa2:	6913      	ldr	r3, [r2, #16]
 8002aa4:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002aa8:	68c1      	ldr	r1, [r0, #12]
 8002aaa:	430b      	orrs	r3, r1
 8002aac:	6113      	str	r3, [r2, #16]
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
 8002aae:	6801      	ldr	r1, [r0, #0]
 8002ab0:	68ca      	ldr	r2, [r1, #12]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8002ab2:	6883      	ldr	r3, [r0, #8]
 8002ab4:	6900      	ldr	r0, [r0, #16]
 8002ab6:	4303      	orrs	r3, r0
 8002ab8:	6960      	ldr	r0, [r4, #20]
 8002aba:	4303      	orrs	r3, r0
 8002abc:	69e0      	ldr	r0, [r4, #28]
 8002abe:	4303      	orrs	r3, r0
  MODIFY_REG(huart->Instance->CR1,
 8002ac0:	f422 4216 	bic.w	r2, r2, #38400	; 0x9600
 8002ac4:	f022 020c 	bic.w	r2, r2, #12
 8002ac8:	4313      	orrs	r3, r2
 8002aca:	60cb      	str	r3, [r1, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002acc:	6822      	ldr	r2, [r4, #0]
 8002ace:	6953      	ldr	r3, [r2, #20]
 8002ad0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002ad4:	69a1      	ldr	r1, [r4, #24]
 8002ad6:	430b      	orrs	r3, r1
 8002ad8:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8002ada:	6823      	ldr	r3, [r4, #0]
 8002adc:	4a2e      	ldr	r2, [pc, #184]	; (8002b98 <UART_SetConfig+0xfc>)
 8002ade:	4293      	cmp	r3, r2
 8002ae0:	d006      	beq.n	8002af0 <UART_SetConfig+0x54>
 8002ae2:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8002ae6:	4293      	cmp	r3, r2
 8002ae8:	d002      	beq.n	8002af0 <UART_SetConfig+0x54>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8002aea:	f7ff fddf 	bl	80026ac <HAL_RCC_GetPCLK1Freq>
 8002aee:	e001      	b.n	8002af4 <UART_SetConfig+0x58>
      pclk = HAL_RCC_GetPCLK2Freq();
 8002af0:	f7ff fdec 	bl	80026cc <HAL_RCC_GetPCLK2Freq>
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002af4:	69e3      	ldr	r3, [r4, #28]
 8002af6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002afa:	d024      	beq.n	8002b46 <UART_SetConfig+0xaa>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002afc:	2100      	movs	r1, #0
 8002afe:	1803      	adds	r3, r0, r0
 8002b00:	4149      	adcs	r1, r1
 8002b02:	181b      	adds	r3, r3, r0
 8002b04:	f141 0100 	adc.w	r1, r1, #0
 8002b08:	00c9      	lsls	r1, r1, #3
 8002b0a:	ea41 7153 	orr.w	r1, r1, r3, lsr #29
 8002b0e:	00db      	lsls	r3, r3, #3
 8002b10:	1818      	adds	r0, r3, r0
 8002b12:	6863      	ldr	r3, [r4, #4]
 8002b14:	ea4f 0283 	mov.w	r2, r3, lsl #2
 8002b18:	ea4f 7393 	mov.w	r3, r3, lsr #30
 8002b1c:	f141 0100 	adc.w	r1, r1, #0
 8002b20:	f7fd fbbe 	bl	80002a0 <__aeabi_uldivmod>
 8002b24:	6821      	ldr	r1, [r4, #0]
 8002b26:	4a1d      	ldr	r2, [pc, #116]	; (8002b9c <UART_SetConfig+0x100>)
 8002b28:	fba2 4300 	umull	r4, r3, r2, r0
 8002b2c:	095b      	lsrs	r3, r3, #5
 8002b2e:	2464      	movs	r4, #100	; 0x64
 8002b30:	fb04 0013 	mls	r0, r4, r3, r0
 8002b34:	0100      	lsls	r0, r0, #4
 8002b36:	3032      	adds	r0, #50	; 0x32
 8002b38:	fba2 2000 	umull	r2, r0, r2, r0
 8002b3c:	011b      	lsls	r3, r3, #4
 8002b3e:	eb03 1050 	add.w	r0, r3, r0, lsr #5
 8002b42:	6088      	str	r0, [r1, #8]
  }
}
 8002b44:	bd38      	pop	{r3, r4, r5, pc}
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8002b46:	2300      	movs	r3, #0
 8002b48:	1802      	adds	r2, r0, r0
 8002b4a:	eb43 0103 	adc.w	r1, r3, r3
 8002b4e:	1812      	adds	r2, r2, r0
 8002b50:	f141 0100 	adc.w	r1, r1, #0
 8002b54:	00c9      	lsls	r1, r1, #3
 8002b56:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8002b5a:	00d2      	lsls	r2, r2, #3
 8002b5c:	1810      	adds	r0, r2, r0
 8002b5e:	f141 0100 	adc.w	r1, r1, #0
 8002b62:	6862      	ldr	r2, [r4, #4]
 8002b64:	1892      	adds	r2, r2, r2
 8002b66:	415b      	adcs	r3, r3
 8002b68:	f7fd fb9a 	bl	80002a0 <__aeabi_uldivmod>
 8002b6c:	4d0b      	ldr	r5, [pc, #44]	; (8002b9c <UART_SetConfig+0x100>)
 8002b6e:	fba5 3200 	umull	r3, r2, r5, r0
 8002b72:	0951      	lsrs	r1, r2, #5
 8002b74:	2364      	movs	r3, #100	; 0x64
 8002b76:	fb03 0311 	mls	r3, r3, r1, r0
 8002b7a:	00db      	lsls	r3, r3, #3
 8002b7c:	3332      	adds	r3, #50	; 0x32
 8002b7e:	fba5 2303 	umull	r2, r3, r5, r3
 8002b82:	6820      	ldr	r0, [r4, #0]
 8002b84:	f3c3 1242 	ubfx	r2, r3, #5, #3
 8002b88:	eb02 1201 	add.w	r2, r2, r1, lsl #4
 8002b8c:	091b      	lsrs	r3, r3, #4
 8002b8e:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8002b92:	4413      	add	r3, r2
 8002b94:	6083      	str	r3, [r0, #8]
 8002b96:	e7d5      	b.n	8002b44 <UART_SetConfig+0xa8>
 8002b98:	40011000 	.word	0x40011000
 8002b9c:	51eb851f 	.word	0x51eb851f

08002ba0 <UART_WaitOnFlagUntilTimeout>:
{
 8002ba0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8002ba4:	4680      	mov	r8, r0
 8002ba6:	460e      	mov	r6, r1
 8002ba8:	4615      	mov	r5, r2
 8002baa:	4699      	mov	r9, r3
 8002bac:	9f08      	ldr	r7, [sp, #32]
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002bae:	f8d8 2000 	ldr.w	r2, [r8]
 8002bb2:	6814      	ldr	r4, [r2, #0]
 8002bb4:	ea36 0304 	bics.w	r3, r6, r4
 8002bb8:	bf0c      	ite	eq
 8002bba:	f04f 0c01 	moveq.w	ip, #1
 8002bbe:	f04f 0c00 	movne.w	ip, #0
 8002bc2:	45ac      	cmp	ip, r5
 8002bc4:	d12d      	bne.n	8002c22 <UART_WaitOnFlagUntilTimeout+0x82>
    if (Timeout != HAL_MAX_DELAY)
 8002bc6:	f1b7 3fff 	cmp.w	r7, #4294967295
 8002bca:	d0f2      	beq.n	8002bb2 <UART_WaitOnFlagUntilTimeout+0x12>
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8002bcc:	b12f      	cbz	r7, 8002bda <UART_WaitOnFlagUntilTimeout+0x3a>
 8002bce:	f7fe f995 	bl	8000efc <HAL_GetTick>
 8002bd2:	eba0 0009 	sub.w	r0, r0, r9
 8002bd6:	42b8      	cmp	r0, r7
 8002bd8:	d9e9      	bls.n	8002bae <UART_WaitOnFlagUntilTimeout+0xe>
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002bda:	f8d8 2000 	ldr.w	r2, [r8]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002bde:	f102 030c 	add.w	r3, r2, #12
 8002be2:	e853 3f00 	ldrex	r3, [r3]
 8002be6:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002bea:	320c      	adds	r2, #12
 8002bec:	e842 3100 	strex	r1, r3, [r2]
 8002bf0:	2900      	cmp	r1, #0
 8002bf2:	d1f2      	bne.n	8002bda <UART_WaitOnFlagUntilTimeout+0x3a>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002bf4:	f8d8 2000 	ldr.w	r2, [r8]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002bf8:	f102 0314 	add.w	r3, r2, #20
 8002bfc:	e853 3f00 	ldrex	r3, [r3]
 8002c00:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002c04:	3214      	adds	r2, #20
 8002c06:	e842 3100 	strex	r1, r3, [r2]
 8002c0a:	2900      	cmp	r1, #0
 8002c0c:	d1f2      	bne.n	8002bf4 <UART_WaitOnFlagUntilTimeout+0x54>
        huart->gState  = HAL_UART_STATE_READY;
 8002c0e:	2320      	movs	r3, #32
 8002c10:	f888 303d 	strb.w	r3, [r8, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8002c14:	f888 303e 	strb.w	r3, [r8, #62]	; 0x3e
        __HAL_UNLOCK(huart);
 8002c18:	2300      	movs	r3, #0
 8002c1a:	f888 303c 	strb.w	r3, [r8, #60]	; 0x3c
        return HAL_TIMEOUT;
 8002c1e:	2003      	movs	r0, #3
 8002c20:	e000      	b.n	8002c24 <UART_WaitOnFlagUntilTimeout+0x84>
  return HAL_OK;
 8002c22:	2000      	movs	r0, #0
}
 8002c24:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

08002c28 <HAL_UART_Init>:
  if (huart == NULL)
 8002c28:	b358      	cbz	r0, 8002c82 <HAL_UART_Init+0x5a>
{
 8002c2a:	b510      	push	{r4, lr}
 8002c2c:	4604      	mov	r4, r0
  if (huart->gState == HAL_UART_STATE_RESET)
 8002c2e:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8002c32:	b30b      	cbz	r3, 8002c78 <HAL_UART_Init+0x50>
  huart->gState = HAL_UART_STATE_BUSY;
 8002c34:	2324      	movs	r3, #36	; 0x24
 8002c36:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_UART_DISABLE(huart);
 8002c3a:	6822      	ldr	r2, [r4, #0]
 8002c3c:	68d3      	ldr	r3, [r2, #12]
 8002c3e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8002c42:	60d3      	str	r3, [r2, #12]
  UART_SetConfig(huart);
 8002c44:	4620      	mov	r0, r4
 8002c46:	f7ff ff29 	bl	8002a9c <UART_SetConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002c4a:	6822      	ldr	r2, [r4, #0]
 8002c4c:	6913      	ldr	r3, [r2, #16]
 8002c4e:	f423 4390 	bic.w	r3, r3, #18432	; 0x4800
 8002c52:	6113      	str	r3, [r2, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002c54:	6822      	ldr	r2, [r4, #0]
 8002c56:	6953      	ldr	r3, [r2, #20]
 8002c58:	f023 032a 	bic.w	r3, r3, #42	; 0x2a
 8002c5c:	6153      	str	r3, [r2, #20]
  __HAL_UART_ENABLE(huart);
 8002c5e:	6822      	ldr	r2, [r4, #0]
 8002c60:	68d3      	ldr	r3, [r2, #12]
 8002c62:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8002c66:	60d3      	str	r3, [r2, #12]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002c68:	2000      	movs	r0, #0
 8002c6a:	6420      	str	r0, [r4, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8002c6c:	2320      	movs	r3, #32
 8002c6e:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8002c72:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
}
 8002c76:	bd10      	pop	{r4, pc}
    huart->Lock = HAL_UNLOCKED;
 8002c78:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
    HAL_UART_MspInit(huart);
 8002c7c:	f7fd fdee 	bl	800085c <HAL_UART_MspInit>
 8002c80:	e7d8      	b.n	8002c34 <HAL_UART_Init+0xc>
    return HAL_ERROR;
 8002c82:	2001      	movs	r0, #1
}
 8002c84:	4770      	bx	lr

08002c86 <HAL_UART_Transmit>:
{
 8002c86:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002c8a:	b082      	sub	sp, #8
 8002c8c:	461e      	mov	r6, r3
  if (huart->gState == HAL_UART_STATE_READY)
 8002c8e:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8002c92:	b2db      	uxtb	r3, r3
 8002c94:	2b20      	cmp	r3, #32
 8002c96:	d15a      	bne.n	8002d4e <HAL_UART_Transmit+0xc8>
 8002c98:	4604      	mov	r4, r0
 8002c9a:	460d      	mov	r5, r1
 8002c9c:	4690      	mov	r8, r2
    if ((pData == NULL) || (Size == 0U))
 8002c9e:	2900      	cmp	r1, #0
 8002ca0:	d059      	beq.n	8002d56 <HAL_UART_Transmit+0xd0>
 8002ca2:	2a00      	cmp	r2, #0
 8002ca4:	d059      	beq.n	8002d5a <HAL_UART_Transmit+0xd4>
    __HAL_LOCK(huart);
 8002ca6:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8002caa:	2b01      	cmp	r3, #1
 8002cac:	d057      	beq.n	8002d5e <HAL_UART_Transmit+0xd8>
 8002cae:	2301      	movs	r3, #1
 8002cb0:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002cb4:	2300      	movs	r3, #0
 8002cb6:	6403      	str	r3, [r0, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002cb8:	2321      	movs	r3, #33	; 0x21
 8002cba:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
    tickstart = HAL_GetTick();
 8002cbe:	f7fe f91d 	bl	8000efc <HAL_GetTick>
 8002cc2:	4607      	mov	r7, r0
    huart->TxXferSize = Size;
 8002cc4:	f8a4 8024 	strh.w	r8, [r4, #36]	; 0x24
    huart->TxXferCount = Size;
 8002cc8:	f8a4 8026 	strh.w	r8, [r4, #38]	; 0x26
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002ccc:	68a3      	ldr	r3, [r4, #8]
 8002cce:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002cd2:	d00c      	beq.n	8002cee <HAL_UART_Transmit+0x68>
      pdata16bits = NULL;
 8002cd4:	f04f 0a00 	mov.w	sl, #0
    __HAL_UNLOCK(huart);
 8002cd8:	2300      	movs	r3, #0
 8002cda:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    while (huart->TxXferCount > 0U)
 8002cde:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
 8002ce0:	b29b      	uxth	r3, r3
 8002ce2:	b343      	cbz	r3, 8002d36 <HAL_UART_Transmit+0xb0>
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002ce4:	f04f 0900 	mov.w	r9, #0
 8002ce8:	f04f 0880 	mov.w	r8, #128	; 0x80
 8002cec:	e014      	b.n	8002d18 <HAL_UART_Transmit+0x92>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002cee:	6923      	ldr	r3, [r4, #16]
 8002cf0:	b913      	cbnz	r3, 8002cf8 <HAL_UART_Transmit+0x72>
      pdata16bits = (const uint16_t *) pData;
 8002cf2:	46aa      	mov	sl, r5
      pdata8bits  = NULL;
 8002cf4:	2500      	movs	r5, #0
 8002cf6:	e7ef      	b.n	8002cd8 <HAL_UART_Transmit+0x52>
      pdata16bits = NULL;
 8002cf8:	f04f 0a00 	mov.w	sl, #0
 8002cfc:	e7ec      	b.n	8002cd8 <HAL_UART_Transmit+0x52>
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002cfe:	6822      	ldr	r2, [r4, #0]
 8002d00:	f83a 3b02 	ldrh.w	r3, [sl], #2
 8002d04:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002d08:	6053      	str	r3, [r2, #4]
      huart->TxXferCount--;
 8002d0a:	8ce2      	ldrh	r2, [r4, #38]	; 0x26
 8002d0c:	3a01      	subs	r2, #1
 8002d0e:	b292      	uxth	r2, r2
 8002d10:	84e2      	strh	r2, [r4, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8002d12:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
 8002d14:	b29b      	uxth	r3, r3
 8002d16:	b173      	cbz	r3, 8002d36 <HAL_UART_Transmit+0xb0>
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002d18:	9600      	str	r6, [sp, #0]
 8002d1a:	463b      	mov	r3, r7
 8002d1c:	464a      	mov	r2, r9
 8002d1e:	4641      	mov	r1, r8
 8002d20:	4620      	mov	r0, r4
 8002d22:	f7ff ff3d 	bl	8002ba0 <UART_WaitOnFlagUntilTimeout>
 8002d26:	b9e0      	cbnz	r0, 8002d62 <HAL_UART_Transmit+0xdc>
      if (pdata8bits == NULL)
 8002d28:	2d00      	cmp	r5, #0
 8002d2a:	d0e8      	beq.n	8002cfe <HAL_UART_Transmit+0x78>
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8002d2c:	6823      	ldr	r3, [r4, #0]
 8002d2e:	f815 2b01 	ldrb.w	r2, [r5], #1
 8002d32:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8002d34:	e7e9      	b.n	8002d0a <HAL_UART_Transmit+0x84>
    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002d36:	9600      	str	r6, [sp, #0]
 8002d38:	463b      	mov	r3, r7
 8002d3a:	2200      	movs	r2, #0
 8002d3c:	2140      	movs	r1, #64	; 0x40
 8002d3e:	4620      	mov	r0, r4
 8002d40:	f7ff ff2e 	bl	8002ba0 <UART_WaitOnFlagUntilTimeout>
 8002d44:	b978      	cbnz	r0, 8002d66 <HAL_UART_Transmit+0xe0>
    huart->gState = HAL_UART_STATE_READY;
 8002d46:	2320      	movs	r3, #32
 8002d48:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
    return HAL_OK;
 8002d4c:	e000      	b.n	8002d50 <HAL_UART_Transmit+0xca>
    return HAL_BUSY;
 8002d4e:	2002      	movs	r0, #2
}
 8002d50:	b002      	add	sp, #8
 8002d52:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      return  HAL_ERROR;
 8002d56:	2001      	movs	r0, #1
 8002d58:	e7fa      	b.n	8002d50 <HAL_UART_Transmit+0xca>
 8002d5a:	2001      	movs	r0, #1
 8002d5c:	e7f8      	b.n	8002d50 <HAL_UART_Transmit+0xca>
    __HAL_LOCK(huart);
 8002d5e:	2002      	movs	r0, #2
 8002d60:	e7f6      	b.n	8002d50 <HAL_UART_Transmit+0xca>
        return HAL_TIMEOUT;
 8002d62:	2003      	movs	r0, #3
 8002d64:	e7f4      	b.n	8002d50 <HAL_UART_Transmit+0xca>
      return HAL_TIMEOUT;
 8002d66:	2003      	movs	r0, #3
 8002d68:	e7f2      	b.n	8002d50 <HAL_UART_Transmit+0xca>
	...

08002d6c <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8002d6c:	b082      	sub	sp, #8
  __IO uint32_t count = 0U;
 8002d6e:	2300      	movs	r3, #0
 8002d70:	9301      	str	r3, [sp, #4]
  /* Wait for AHB master IDLE state. */
  do
  {
    count++;

    if (count > 200000U)
 8002d72:	4a11      	ldr	r2, [pc, #68]	; (8002db8 <USB_CoreReset+0x4c>)
    count++;
 8002d74:	9b01      	ldr	r3, [sp, #4]
 8002d76:	3301      	adds	r3, #1
 8002d78:	9301      	str	r3, [sp, #4]
    if (count > 200000U)
 8002d7a:	9b01      	ldr	r3, [sp, #4]
 8002d7c:	4293      	cmp	r3, r2
 8002d7e:	d815      	bhi.n	8002dac <USB_CoreReset+0x40>
    {
      return HAL_TIMEOUT;
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8002d80:	6903      	ldr	r3, [r0, #16]
 8002d82:	2b00      	cmp	r3, #0
 8002d84:	daf6      	bge.n	8002d74 <USB_CoreReset+0x8>

  /* Core Soft Reset */
  count = 0U;
 8002d86:	2300      	movs	r3, #0
 8002d88:	9301      	str	r3, [sp, #4]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8002d8a:	6903      	ldr	r3, [r0, #16]
 8002d8c:	f043 0301 	orr.w	r3, r3, #1
 8002d90:	6103      	str	r3, [r0, #16]

  do
  {
    count++;

    if (count > 200000U)
 8002d92:	4a09      	ldr	r2, [pc, #36]	; (8002db8 <USB_CoreReset+0x4c>)
    count++;
 8002d94:	9b01      	ldr	r3, [sp, #4]
 8002d96:	3301      	adds	r3, #1
 8002d98:	9301      	str	r3, [sp, #4]
    if (count > 200000U)
 8002d9a:	9b01      	ldr	r3, [sp, #4]
 8002d9c:	4293      	cmp	r3, r2
 8002d9e:	d808      	bhi.n	8002db2 <USB_CoreReset+0x46>
    {
      return HAL_TIMEOUT;
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8002da0:	6903      	ldr	r3, [r0, #16]
 8002da2:	f013 0f01 	tst.w	r3, #1
 8002da6:	d1f5      	bne.n	8002d94 <USB_CoreReset+0x28>

  return HAL_OK;
 8002da8:	2000      	movs	r0, #0
 8002daa:	e000      	b.n	8002dae <USB_CoreReset+0x42>
      return HAL_TIMEOUT;
 8002dac:	2003      	movs	r0, #3
}
 8002dae:	b002      	add	sp, #8
 8002db0:	4770      	bx	lr
      return HAL_TIMEOUT;
 8002db2:	2003      	movs	r0, #3
 8002db4:	e7fb      	b.n	8002dae <USB_CoreReset+0x42>
 8002db6:	bf00      	nop
 8002db8:	00030d40 	.word	0x00030d40

08002dbc <USB_CoreInit>:
{
 8002dbc:	b084      	sub	sp, #16
 8002dbe:	b510      	push	{r4, lr}
 8002dc0:	4604      	mov	r4, r0
 8002dc2:	a803      	add	r0, sp, #12
 8002dc4:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8002dc8:	9b08      	ldr	r3, [sp, #32]
 8002dca:	2b01      	cmp	r3, #1
 8002dcc:	d11f      	bne.n	8002e0e <USB_CoreInit+0x52>
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8002dce:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8002dd0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002dd4:	63a3      	str	r3, [r4, #56]	; 0x38
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8002dd6:	68e3      	ldr	r3, [r4, #12]
 8002dd8:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8002ddc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002de0:	60e3      	str	r3, [r4, #12]
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8002de2:	68e3      	ldr	r3, [r4, #12]
 8002de4:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8002de8:	60e3      	str	r3, [r4, #12]
    if (cfg.use_external_vbus == 1U)
 8002dea:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8002dec:	2b01      	cmp	r3, #1
 8002dee:	d009      	beq.n	8002e04 <USB_CoreInit+0x48>
    ret = USB_CoreReset(USBx);
 8002df0:	4620      	mov	r0, r4
 8002df2:	f7ff ffbb 	bl	8002d6c <USB_CoreReset>
  if (cfg.dma_enable == 1U)
 8002df6:	9b06      	ldr	r3, [sp, #24]
 8002df8:	2b01      	cmp	r3, #1
 8002dfa:	d01b      	beq.n	8002e34 <USB_CoreInit+0x78>
}
 8002dfc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002e00:	b004      	add	sp, #16
 8002e02:	4770      	bx	lr
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8002e04:	68e3      	ldr	r3, [r4, #12]
 8002e06:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002e0a:	60e3      	str	r3, [r4, #12]
 8002e0c:	e7f0      	b.n	8002df0 <USB_CoreInit+0x34>
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8002e0e:	68e3      	ldr	r3, [r4, #12]
 8002e10:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002e14:	60e3      	str	r3, [r4, #12]
    ret = USB_CoreReset(USBx);
 8002e16:	4620      	mov	r0, r4
 8002e18:	f7ff ffa8 	bl	8002d6c <USB_CoreReset>
    if (cfg.battery_charging_enable == 0U)
 8002e1c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8002e1e:	b923      	cbnz	r3, 8002e2a <USB_CoreInit+0x6e>
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8002e20:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8002e22:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002e26:	63a3      	str	r3, [r4, #56]	; 0x38
 8002e28:	e7e5      	b.n	8002df6 <USB_CoreInit+0x3a>
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8002e2a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8002e2c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002e30:	63a3      	str	r3, [r4, #56]	; 0x38
 8002e32:	e7e0      	b.n	8002df6 <USB_CoreInit+0x3a>
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8002e34:	68a3      	ldr	r3, [r4, #8]
 8002e36:	f043 0306 	orr.w	r3, r3, #6
 8002e3a:	60a3      	str	r3, [r4, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8002e3c:	68a3      	ldr	r3, [r4, #8]
 8002e3e:	f043 0320 	orr.w	r3, r3, #32
 8002e42:	60a3      	str	r3, [r4, #8]
 8002e44:	e7da      	b.n	8002dfc <USB_CoreInit+0x40>

08002e46 <USB_DisableGlobalInt>:
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8002e46:	6883      	ldr	r3, [r0, #8]
 8002e48:	f023 0301 	bic.w	r3, r3, #1
 8002e4c:	6083      	str	r3, [r0, #8]
}
 8002e4e:	2000      	movs	r0, #0
 8002e50:	4770      	bx	lr

08002e52 <USB_SetCurrentMode>:
{
 8002e52:	b570      	push	{r4, r5, r6, lr}
 8002e54:	4605      	mov	r5, r0
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8002e56:	68c3      	ldr	r3, [r0, #12]
 8002e58:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8002e5c:	60c3      	str	r3, [r0, #12]
  if (mode == USB_HOST_MODE)
 8002e5e:	2901      	cmp	r1, #1
 8002e60:	d015      	beq.n	8002e8e <USB_SetCurrentMode+0x3c>
  else if (mode == USB_DEVICE_MODE)
 8002e62:	bb29      	cbnz	r1, 8002eb0 <USB_SetCurrentMode+0x5e>
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8002e64:	68c3      	ldr	r3, [r0, #12]
 8002e66:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8002e6a:	60c3      	str	r3, [r0, #12]
  uint32_t ms = 0U;
 8002e6c:	2400      	movs	r4, #0
      HAL_Delay(1U);
 8002e6e:	2601      	movs	r6, #1
 8002e70:	4630      	mov	r0, r6
 8002e72:	f7fe f849 	bl	8000f08 <HAL_Delay>
      ms++;
 8002e76:	3401      	adds	r4, #1
  return ((USBx->GINTSTS) & 0x1U);
 8002e78:	696b      	ldr	r3, [r5, #20]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8002e7a:	f013 0f01 	tst.w	r3, #1
 8002e7e:	d001      	beq.n	8002e84 <USB_SetCurrentMode+0x32>
 8002e80:	2c32      	cmp	r4, #50	; 0x32
 8002e82:	d1f5      	bne.n	8002e70 <USB_SetCurrentMode+0x1e>
    return HAL_ERROR;
 8002e84:	2c32      	cmp	r4, #50	; 0x32
 8002e86:	bf14      	ite	ne
 8002e88:	2000      	movne	r0, #0
 8002e8a:	2001      	moveq	r0, #1
}
 8002e8c:	bd70      	pop	{r4, r5, r6, pc}
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8002e8e:	68c3      	ldr	r3, [r0, #12]
 8002e90:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8002e94:	60c3      	str	r3, [r0, #12]
  uint32_t ms = 0U;
 8002e96:	2400      	movs	r4, #0
      HAL_Delay(1U);
 8002e98:	2601      	movs	r6, #1
 8002e9a:	4630      	mov	r0, r6
 8002e9c:	f7fe f834 	bl	8000f08 <HAL_Delay>
      ms++;
 8002ea0:	3401      	adds	r4, #1
  return ((USBx->GINTSTS) & 0x1U);
 8002ea2:	696b      	ldr	r3, [r5, #20]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8002ea4:	f013 0f01 	tst.w	r3, #1
 8002ea8:	d1ec      	bne.n	8002e84 <USB_SetCurrentMode+0x32>
 8002eaa:	2c32      	cmp	r4, #50	; 0x32
 8002eac:	d1f5      	bne.n	8002e9a <USB_SetCurrentMode+0x48>
 8002eae:	e7e9      	b.n	8002e84 <USB_SetCurrentMode+0x32>
    return HAL_ERROR;
 8002eb0:	2001      	movs	r0, #1
 8002eb2:	e7eb      	b.n	8002e8c <USB_SetCurrentMode+0x3a>

08002eb4 <USB_FlushTxFifo>:
{
 8002eb4:	b082      	sub	sp, #8
  __IO uint32_t count = 0U;
 8002eb6:	2300      	movs	r3, #0
 8002eb8:	9301      	str	r3, [sp, #4]
    if (count > 200000U)
 8002eba:	4a11      	ldr	r2, [pc, #68]	; (8002f00 <USB_FlushTxFifo+0x4c>)
    count++;
 8002ebc:	9b01      	ldr	r3, [sp, #4]
 8002ebe:	3301      	adds	r3, #1
 8002ec0:	9301      	str	r3, [sp, #4]
    if (count > 200000U)
 8002ec2:	9b01      	ldr	r3, [sp, #4]
 8002ec4:	4293      	cmp	r3, r2
 8002ec6:	d815      	bhi.n	8002ef4 <USB_FlushTxFifo+0x40>
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8002ec8:	6903      	ldr	r3, [r0, #16]
 8002eca:	2b00      	cmp	r3, #0
 8002ecc:	daf6      	bge.n	8002ebc <USB_FlushTxFifo+0x8>
  count = 0U;
 8002ece:	2300      	movs	r3, #0
 8002ed0:	9301      	str	r3, [sp, #4]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8002ed2:	0189      	lsls	r1, r1, #6
 8002ed4:	f041 0120 	orr.w	r1, r1, #32
 8002ed8:	6101      	str	r1, [r0, #16]
    if (count > 200000U)
 8002eda:	4a09      	ldr	r2, [pc, #36]	; (8002f00 <USB_FlushTxFifo+0x4c>)
    count++;
 8002edc:	9b01      	ldr	r3, [sp, #4]
 8002ede:	3301      	adds	r3, #1
 8002ee0:	9301      	str	r3, [sp, #4]
    if (count > 200000U)
 8002ee2:	9b01      	ldr	r3, [sp, #4]
 8002ee4:	4293      	cmp	r3, r2
 8002ee6:	d808      	bhi.n	8002efa <USB_FlushTxFifo+0x46>
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8002ee8:	6903      	ldr	r3, [r0, #16]
 8002eea:	f013 0f20 	tst.w	r3, #32
 8002eee:	d1f5      	bne.n	8002edc <USB_FlushTxFifo+0x28>
  return HAL_OK;
 8002ef0:	2000      	movs	r0, #0
 8002ef2:	e000      	b.n	8002ef6 <USB_FlushTxFifo+0x42>
      return HAL_TIMEOUT;
 8002ef4:	2003      	movs	r0, #3
}
 8002ef6:	b002      	add	sp, #8
 8002ef8:	4770      	bx	lr
      return HAL_TIMEOUT;
 8002efa:	2003      	movs	r0, #3
 8002efc:	e7fb      	b.n	8002ef6 <USB_FlushTxFifo+0x42>
 8002efe:	bf00      	nop
 8002f00:	00030d40 	.word	0x00030d40

08002f04 <USB_FlushRxFifo>:
{
 8002f04:	b082      	sub	sp, #8
  __IO uint32_t count = 0U;
 8002f06:	2300      	movs	r3, #0
 8002f08:	9301      	str	r3, [sp, #4]
    if (count > 200000U)
 8002f0a:	4a10      	ldr	r2, [pc, #64]	; (8002f4c <USB_FlushRxFifo+0x48>)
    count++;
 8002f0c:	9b01      	ldr	r3, [sp, #4]
 8002f0e:	3301      	adds	r3, #1
 8002f10:	9301      	str	r3, [sp, #4]
    if (count > 200000U)
 8002f12:	9b01      	ldr	r3, [sp, #4]
 8002f14:	4293      	cmp	r3, r2
 8002f16:	d813      	bhi.n	8002f40 <USB_FlushRxFifo+0x3c>
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8002f18:	6903      	ldr	r3, [r0, #16]
 8002f1a:	2b00      	cmp	r3, #0
 8002f1c:	daf6      	bge.n	8002f0c <USB_FlushRxFifo+0x8>
  count = 0U;
 8002f1e:	2300      	movs	r3, #0
 8002f20:	9301      	str	r3, [sp, #4]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8002f22:	2310      	movs	r3, #16
 8002f24:	6103      	str	r3, [r0, #16]
    if (count > 200000U)
 8002f26:	4a09      	ldr	r2, [pc, #36]	; (8002f4c <USB_FlushRxFifo+0x48>)
    count++;
 8002f28:	9b01      	ldr	r3, [sp, #4]
 8002f2a:	3301      	adds	r3, #1
 8002f2c:	9301      	str	r3, [sp, #4]
    if (count > 200000U)
 8002f2e:	9b01      	ldr	r3, [sp, #4]
 8002f30:	4293      	cmp	r3, r2
 8002f32:	d808      	bhi.n	8002f46 <USB_FlushRxFifo+0x42>
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8002f34:	6903      	ldr	r3, [r0, #16]
 8002f36:	f013 0f10 	tst.w	r3, #16
 8002f3a:	d1f5      	bne.n	8002f28 <USB_FlushRxFifo+0x24>
  return HAL_OK;
 8002f3c:	2000      	movs	r0, #0
 8002f3e:	e000      	b.n	8002f42 <USB_FlushRxFifo+0x3e>
      return HAL_TIMEOUT;
 8002f40:	2003      	movs	r0, #3
}
 8002f42:	b002      	add	sp, #8
 8002f44:	4770      	bx	lr
      return HAL_TIMEOUT;
 8002f46:	2003      	movs	r0, #3
 8002f48:	e7fb      	b.n	8002f42 <USB_FlushRxFifo+0x3e>
 8002f4a:	bf00      	nop
 8002f4c:	00030d40 	.word	0x00030d40

08002f50 <USB_SetDevSpeed>:
  USBx_DEVICE->DCFG |= speed;
 8002f50:	f8d0 3800 	ldr.w	r3, [r0, #2048]	; 0x800
 8002f54:	4319      	orrs	r1, r3
 8002f56:	f8c0 1800 	str.w	r1, [r0, #2048]	; 0x800
}
 8002f5a:	2000      	movs	r0, #0
 8002f5c:	4770      	bx	lr
	...

08002f60 <USB_DevInit>:
{
 8002f60:	b084      	sub	sp, #16
 8002f62:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002f66:	4604      	mov	r4, r0
 8002f68:	a809      	add	r0, sp, #36	; 0x24
 8002f6a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
 8002f6e:	460d      	mov	r5, r1
 8002f70:	9e13      	ldr	r6, [sp, #76]	; 0x4c
  for (i = 0U; i < 15U; i++)
 8002f72:	2300      	movs	r3, #0
    USBx->DIEPTXF[i] = 0U;
 8002f74:	4619      	mov	r1, r3
 8002f76:	f103 0240 	add.w	r2, r3, #64	; 0x40
 8002f7a:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 8002f7e:	6051      	str	r1, [r2, #4]
  for (i = 0U; i < 15U; i++)
 8002f80:	3301      	adds	r3, #1
 8002f82:	2b0f      	cmp	r3, #15
 8002f84:	d1f7      	bne.n	8002f76 <USB_DevInit+0x16>
  if (cfg.vbus_sensing_enable == 0U)
 8002f86:	bb26      	cbnz	r6, 8002fd2 <USB_DevInit+0x72>
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8002f88:	f8d4 3804 	ldr.w	r3, [r4, #2052]	; 0x804
 8002f8c:	f043 0302 	orr.w	r3, r3, #2
 8002f90:	f8c4 3804 	str.w	r3, [r4, #2052]	; 0x804
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8002f94:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8002f96:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002f9a:	63a3      	str	r3, [r4, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8002f9c:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8002f9e:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
 8002fa2:	63a3      	str	r3, [r4, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8002fa4:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8002fa6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002faa:	63a3      	str	r3, [r4, #56]	; 0x38
  USBx_PCGCCTL = 0U;
 8002fac:	2300      	movs	r3, #0
 8002fae:	f8c4 3e00 	str.w	r3, [r4, #3584]	; 0xe00
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8002fb2:	f504 6700 	add.w	r7, r4, #2048	; 0x800
 8002fb6:	f8d4 3800 	ldr.w	r3, [r4, #2048]	; 0x800
 8002fba:	f8c4 3800 	str.w	r3, [r4, #2048]	; 0x800
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8002fbe:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8002fc0:	2b01      	cmp	r3, #1
 8002fc2:	d114      	bne.n	8002fee <USB_DevInit+0x8e>
    if (cfg.speed == USBD_HS_SPEED)
 8002fc4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8002fc6:	b96b      	cbnz	r3, 8002fe4 <USB_DevInit+0x84>
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8002fc8:	2100      	movs	r1, #0
 8002fca:	4620      	mov	r0, r4
 8002fcc:	f7ff ffc0 	bl	8002f50 <USB_SetDevSpeed>
 8002fd0:	e011      	b.n	8002ff6 <USB_DevInit+0x96>
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8002fd2:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8002fd4:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8002fd8:	63a3      	str	r3, [r4, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8002fda:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8002fdc:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8002fe0:	63a3      	str	r3, [r4, #56]	; 0x38
 8002fe2:	e7e3      	b.n	8002fac <USB_DevInit+0x4c>
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8002fe4:	2101      	movs	r1, #1
 8002fe6:	4620      	mov	r0, r4
 8002fe8:	f7ff ffb2 	bl	8002f50 <USB_SetDevSpeed>
 8002fec:	e003      	b.n	8002ff6 <USB_DevInit+0x96>
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8002fee:	2103      	movs	r1, #3
 8002ff0:	4620      	mov	r0, r4
 8002ff2:	f7ff ffad 	bl	8002f50 <USB_SetDevSpeed>
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8002ff6:	2110      	movs	r1, #16
 8002ff8:	4620      	mov	r0, r4
 8002ffa:	f7ff ff5b 	bl	8002eb4 <USB_FlushTxFifo>
 8002ffe:	4680      	mov	r8, r0
  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8003000:	4620      	mov	r0, r4
 8003002:	f7ff ff7f 	bl	8002f04 <USB_FlushRxFifo>
 8003006:	ea48 0800 	orr.w	r8, r8, r0
 800300a:	f018 0fff 	tst.w	r8, #255	; 0xff
    ret = HAL_ERROR;
 800300e:	bf14      	ite	ne
 8003010:	f04f 0e01 	movne.w	lr, #1
 8003014:	f04f 0e00 	moveq.w	lr, #0
  USBx_DEVICE->DIEPMSK = 0U;
 8003018:	2300      	movs	r3, #0
 800301a:	613b      	str	r3, [r7, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800301c:	617b      	str	r3, [r7, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800301e:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003020:	2d00      	cmp	r5, #0
 8003022:	d03f      	beq.n	80030a4 <USB_DevInit+0x144>
 8003024:	f504 6310 	add.w	r3, r4, #2304	; 0x900
 8003028:	2200      	movs	r2, #0
      USBx_INEP(i)->DIEPCTL = 0U;
 800302a:	4694      	mov	ip, r2
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800302c:	f04f 4990 	mov.w	r9, #1207959552	; 0x48000000
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8003030:	f04f 6a00 	mov.w	sl, #134217728	; 0x8000000
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8003034:	f64f 387f 	movw	r8, #64383	; 0xfb7f
 8003038:	e00a      	b.n	8003050 <USB_DevInit+0xf0>
      if (i == 0U)
 800303a:	b182      	cbz	r2, 800305e <USB_DevInit+0xfe>
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800303c:	f8c3 9000 	str.w	r9, [r3]
    USBx_INEP(i)->DIEPTSIZ = 0U;
 8003040:	f8c1 c010 	str.w	ip, [r1, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8003044:	f8c1 8008 	str.w	r8, [r1, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003048:	3201      	adds	r2, #1
 800304a:	3320      	adds	r3, #32
 800304c:	4295      	cmp	r5, r2
 800304e:	d009      	beq.n	8003064 <USB_DevInit+0x104>
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8003050:	4619      	mov	r1, r3
 8003052:	6818      	ldr	r0, [r3, #0]
 8003054:	2800      	cmp	r0, #0
 8003056:	dbf0      	blt.n	800303a <USB_DevInit+0xda>
      USBx_INEP(i)->DIEPCTL = 0U;
 8003058:	f8c3 c000 	str.w	ip, [r3]
 800305c:	e7f0      	b.n	8003040 <USB_DevInit+0xe0>
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800305e:	f8c3 a000 	str.w	sl, [r3]
 8003062:	e7ed      	b.n	8003040 <USB_DevInit+0xe0>
 8003064:	f504 6330 	add.w	r3, r4, #2816	; 0xb00
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003068:	2200      	movs	r2, #0
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800306a:	4694      	mov	ip, r2
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800306c:	f04f 4990 	mov.w	r9, #1207959552	; 0x48000000
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8003070:	f04f 6a00 	mov.w	sl, #134217728	; 0x8000000
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8003074:	f64f 387f 	movw	r8, #64383	; 0xfb7f
 8003078:	e00a      	b.n	8003090 <USB_DevInit+0x130>
      if (i == 0U)
 800307a:	b182      	cbz	r2, 800309e <USB_DevInit+0x13e>
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800307c:	f8c3 9000 	str.w	r9, [r3]
    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8003080:	f8c1 c010 	str.w	ip, [r1, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8003084:	f8c1 8008 	str.w	r8, [r1, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003088:	3201      	adds	r2, #1
 800308a:	3320      	adds	r3, #32
 800308c:	4295      	cmp	r5, r2
 800308e:	d009      	beq.n	80030a4 <USB_DevInit+0x144>
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8003090:	4619      	mov	r1, r3
 8003092:	6818      	ldr	r0, [r3, #0]
 8003094:	2800      	cmp	r0, #0
 8003096:	dbf0      	blt.n	800307a <USB_DevInit+0x11a>
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8003098:	f8c3 c000 	str.w	ip, [r3]
 800309c:	e7f0      	b.n	8003080 <USB_DevInit+0x120>
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800309e:	f8c3 a000 	str.w	sl, [r3]
 80030a2:	e7ed      	b.n	8003080 <USB_DevInit+0x120>
  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 80030a4:	693b      	ldr	r3, [r7, #16]
 80030a6:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80030aa:	613b      	str	r3, [r7, #16]
  USBx->GINTMSK = 0U;
 80030ac:	2300      	movs	r3, #0
 80030ae:	61a3      	str	r3, [r4, #24]
  USBx->GINTSTS = 0xBFFFFFFFU;
 80030b0:	f06f 4380 	mvn.w	r3, #1073741824	; 0x40000000
 80030b4:	6163      	str	r3, [r4, #20]
  if (cfg.dma_enable == 0U)
 80030b6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80030b8:	b91b      	cbnz	r3, 80030c2 <USB_DevInit+0x162>
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80030ba:	69a3      	ldr	r3, [r4, #24]
 80030bc:	f043 0310 	orr.w	r3, r3, #16
 80030c0:	61a3      	str	r3, [r4, #24]
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 80030c2:	69a2      	ldr	r2, [r4, #24]
 80030c4:	4b0b      	ldr	r3, [pc, #44]	; (80030f4 <USB_DevInit+0x194>)
 80030c6:	4313      	orrs	r3, r2
 80030c8:	61a3      	str	r3, [r4, #24]
  if (cfg.Sof_enable != 0U)
 80030ca:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80030cc:	b11b      	cbz	r3, 80030d6 <USB_DevInit+0x176>
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 80030ce:	69a3      	ldr	r3, [r4, #24]
 80030d0:	f043 0308 	orr.w	r3, r3, #8
 80030d4:	61a3      	str	r3, [r4, #24]
  if (cfg.vbus_sensing_enable == 1U)
 80030d6:	2e01      	cmp	r6, #1
 80030d8:	d004      	beq.n	80030e4 <USB_DevInit+0x184>
}
 80030da:	4670      	mov	r0, lr
 80030dc:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80030e0:	b004      	add	sp, #16
 80030e2:	4770      	bx	lr
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 80030e4:	69a3      	ldr	r3, [r4, #24]
 80030e6:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80030ea:	f043 0304 	orr.w	r3, r3, #4
 80030ee:	61a3      	str	r3, [r4, #24]
 80030f0:	e7f3      	b.n	80030da <USB_DevInit+0x17a>
 80030f2:	bf00      	nop
 80030f4:	803c3800 	.word	0x803c3800

080030f8 <USB_DevDisconnect>:
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80030f8:	f8d0 3e00 	ldr.w	r3, [r0, #3584]	; 0xe00
 80030fc:	f023 0303 	bic.w	r3, r3, #3
 8003100:	f8c0 3e00 	str.w	r3, [r0, #3584]	; 0xe00
  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8003104:	f8d0 3804 	ldr.w	r3, [r0, #2052]	; 0x804
 8003108:	f043 0302 	orr.w	r3, r3, #2
 800310c:	f8c0 3804 	str.w	r3, [r0, #2052]	; 0x804
}
 8003110:	2000      	movs	r0, #0
 8003112:	4770      	bx	lr

08003114 <ethernet_link_status_updated>:
  else /* netif is down */
  {
/* USER CODE BEGIN 6 */
/* USER CODE END 6 */
  }
}
 8003114:	4770      	bx	lr
	...

08003118 <MX_LWIP_Init>:
{
 8003118:	b5f0      	push	{r4, r5, r6, r7, lr}
 800311a:	b085      	sub	sp, #20
  IP_ADDRESS[0] = 169;
 800311c:	4e37      	ldr	r6, [pc, #220]	; (80031fc <MX_LWIP_Init+0xe4>)
 800311e:	20a9      	movs	r0, #169	; 0xa9
 8003120:	7030      	strb	r0, [r6, #0]
  IP_ADDRESS[1] = 254;
 8003122:	21fe      	movs	r1, #254	; 0xfe
 8003124:	7071      	strb	r1, [r6, #1]
  IP_ADDRESS[2] = 228;
 8003126:	22e4      	movs	r2, #228	; 0xe4
 8003128:	70b2      	strb	r2, [r6, #2]
  IP_ADDRESS[3] = 34;
 800312a:	2322      	movs	r3, #34	; 0x22
 800312c:	70f3      	strb	r3, [r6, #3]
  NETMASK_ADDRESS[0] = 255;
 800312e:	4d34      	ldr	r5, [pc, #208]	; (8003200 <MX_LWIP_Init+0xe8>)
 8003130:	23ff      	movs	r3, #255	; 0xff
 8003132:	702b      	strb	r3, [r5, #0]
  NETMASK_ADDRESS[1] = 255;
 8003134:	706b      	strb	r3, [r5, #1]
  NETMASK_ADDRESS[2] = 255;
 8003136:	70ab      	strb	r3, [r5, #2]
  NETMASK_ADDRESS[3] = 0;
 8003138:	2700      	movs	r7, #0
 800313a:	70ef      	strb	r7, [r5, #3]
  GATEWAY_ADDRESS[0] = 169;
 800313c:	4c31      	ldr	r4, [pc, #196]	; (8003204 <MX_LWIP_Init+0xec>)
 800313e:	7020      	strb	r0, [r4, #0]
  GATEWAY_ADDRESS[1] = 254;
 8003140:	7061      	strb	r1, [r4, #1]
  GATEWAY_ADDRESS[2] = 228;
 8003142:	70a2      	strb	r2, [r4, #2]
  GATEWAY_ADDRESS[3] = 1;
 8003144:	2301      	movs	r3, #1
 8003146:	70e3      	strb	r3, [r4, #3]
  tcpip_init( NULL, NULL );
 8003148:	4639      	mov	r1, r7
 800314a:	4638      	mov	r0, r7
 800314c:	f004 fc5a 	bl	8007a04 <tcpip_init>
  IP4_ADDR(&ipaddr, IP_ADDRESS[0], IP_ADDRESS[1], IP_ADDRESS[2], IP_ADDRESS[3]);
 8003150:	7833      	ldrb	r3, [r6, #0]
 8003152:	7872      	ldrb	r2, [r6, #1]
 8003154:	f896 c003 	ldrb.w	ip, [r6, #3]
 8003158:	78b0      	ldrb	r0, [r6, #2]
 800315a:	492b      	ldr	r1, [pc, #172]	; (8003208 <MX_LWIP_Init+0xf0>)
 800315c:	ea43 630c 	orr.w	r3, r3, ip, lsl #24
 8003160:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8003164:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8003168:	600b      	str	r3, [r1, #0]
  IP4_ADDR(&netmask, NETMASK_ADDRESS[0], NETMASK_ADDRESS[1] , NETMASK_ADDRESS[2], NETMASK_ADDRESS[3]);
 800316a:	782b      	ldrb	r3, [r5, #0]
 800316c:	7868      	ldrb	r0, [r5, #1]
 800316e:	78ee      	ldrb	r6, [r5, #3]
 8003170:	78ad      	ldrb	r5, [r5, #2]
 8003172:	4a26      	ldr	r2, [pc, #152]	; (800320c <MX_LWIP_Init+0xf4>)
 8003174:	ea43 6306 	orr.w	r3, r3, r6, lsl #24
 8003178:	ea43 4305 	orr.w	r3, r3, r5, lsl #16
 800317c:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
 8003180:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&gw, GATEWAY_ADDRESS[0], GATEWAY_ADDRESS[1], GATEWAY_ADDRESS[2], GATEWAY_ADDRESS[3]);
 8003182:	7820      	ldrb	r0, [r4, #0]
 8003184:	7865      	ldrb	r5, [r4, #1]
 8003186:	78e6      	ldrb	r6, [r4, #3]
 8003188:	78a4      	ldrb	r4, [r4, #2]
 800318a:	4b21      	ldr	r3, [pc, #132]	; (8003210 <MX_LWIP_Init+0xf8>)
 800318c:	ea40 6006 	orr.w	r0, r0, r6, lsl #24
 8003190:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8003194:	ea40 2005 	orr.w	r0, r0, r5, lsl #8
 8003198:	6018      	str	r0, [r3, #0]
  netif_add(&gnetif, &ipaddr, &netmask, &gw, NULL, &ethernetif_init, &tcpip_input);
 800319a:	4c1e      	ldr	r4, [pc, #120]	; (8003214 <MX_LWIP_Init+0xfc>)
 800319c:	481e      	ldr	r0, [pc, #120]	; (8003218 <MX_LWIP_Init+0x100>)
 800319e:	9002      	str	r0, [sp, #8]
 80031a0:	481e      	ldr	r0, [pc, #120]	; (800321c <MX_LWIP_Init+0x104>)
 80031a2:	9001      	str	r0, [sp, #4]
 80031a4:	9700      	str	r7, [sp, #0]
 80031a6:	4620      	mov	r0, r4
 80031a8:	f005 f898 	bl	80082dc <netif_add>
  netif_set_default(&gnetif);
 80031ac:	4620      	mov	r0, r4
 80031ae:	f005 f92d 	bl	800840c <netif_set_default>
  if (netif_is_link_up(&gnetif))
 80031b2:	f894 302d 	ldrb.w	r3, [r4, #45]	; 0x2d
 80031b6:	f013 0f04 	tst.w	r3, #4
 80031ba:	d01b      	beq.n	80031f4 <MX_LWIP_Init+0xdc>
    netif_set_up(&gnetif);
 80031bc:	4620      	mov	r0, r4
 80031be:	f005 f92b 	bl	8008418 <netif_set_up>
  netif_set_link_callback(&gnetif, ethernet_link_status_updated);
 80031c2:	4d14      	ldr	r5, [pc, #80]	; (8003214 <MX_LWIP_Init+0xfc>)
 80031c4:	4916      	ldr	r1, [pc, #88]	; (8003220 <MX_LWIP_Init+0x108>)
 80031c6:	4628      	mov	r0, r5
 80031c8:	f005 f9a6 	bl	8008518 <netif_set_link_callback>
  memset(&attributes, 0x0, sizeof(osThreadAttr_t));
 80031cc:	4c15      	ldr	r4, [pc, #84]	; (8003224 <MX_LWIP_Init+0x10c>)
 80031ce:	2220      	movs	r2, #32
 80031d0:	2100      	movs	r1, #0
 80031d2:	1d20      	adds	r0, r4, #4
 80031d4:	f00b fef1 	bl	800efba <memset>
  attributes.name = "EthLink";
 80031d8:	4b13      	ldr	r3, [pc, #76]	; (8003228 <MX_LWIP_Init+0x110>)
 80031da:	6023      	str	r3, [r4, #0]
  attributes.stack_size = INTERFACE_THREAD_STACK_SIZE;
 80031dc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80031e0:	6163      	str	r3, [r4, #20]
  attributes.priority = osPriorityBelowNormal;
 80031e2:	2310      	movs	r3, #16
 80031e4:	61a3      	str	r3, [r4, #24]
  osThreadNew(ethernet_link_thread, &gnetif, &attributes);
 80031e6:	4622      	mov	r2, r4
 80031e8:	4629      	mov	r1, r5
 80031ea:	4810      	ldr	r0, [pc, #64]	; (800322c <MX_LWIP_Init+0x114>)
 80031ec:	f000 fb82 	bl	80038f4 <osThreadNew>
}
 80031f0:	b005      	add	sp, #20
 80031f2:	bdf0      	pop	{r4, r5, r6, r7, pc}
    netif_set_down(&gnetif);
 80031f4:	4807      	ldr	r0, [pc, #28]	; (8003214 <MX_LWIP_Init+0xfc>)
 80031f6:	f005 f92d 	bl	8008454 <netif_set_down>
 80031fa:	e7e2      	b.n	80031c2 <MX_LWIP_Init+0xaa>
 80031fc:	2000078c 	.word	0x2000078c
 8003200:	20000790 	.word	0x20000790
 8003204:	20000788 	.word	0x20000788
 8003208:	200007f0 	.word	0x200007f0
 800320c:	200007f4 	.word	0x200007f4
 8003210:	200007ec 	.word	0x200007ec
 8003214:	200007b8 	.word	0x200007b8
 8003218:	08007965 	.word	0x08007965
 800321c:	080033f9 	.word	0x080033f9
 8003220:	08003115 	.word	0x08003115
 8003224:	20000794 	.word	0x20000794
 8003228:	08010370 	.word	0x08010370
 800322c:	08003719 	.word	0x08003719

08003230 <ETH_PHY_IO_DeInit>:
  * @retval 0 if OK, -1 if ERROR
  */
int32_t ETH_PHY_IO_DeInit (void)
{
  return 0;
}
 8003230:	2000      	movs	r0, #0
 8003232:	4770      	bx	lr

08003234 <ethernetif_input>:
{
 8003234:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8003238:	b083      	sub	sp, #12
 800323a:	4606      	mov	r6, r0
    if (osSemaphoreAcquire(RxPktSemaphore, TIME_WAITING_FOR_INPUT) == osOK)
 800323c:	4d12      	ldr	r5, [pc, #72]	; (8003288 <ethernetif_input+0x54>)
    HAL_ETH_ReadData(&heth, (void **)&p);
 800323e:	4f13      	ldr	r7, [pc, #76]	; (800328c <ethernetif_input+0x58>)
 8003240:	e010      	b.n	8003264 <ethernetif_input+0x30>
 8003242:	a901      	add	r1, sp, #4
 8003244:	4638      	mov	r0, r7
 8003246:	f7fe fb05 	bl	8001854 <HAL_ETH_ReadData>
  return p;
 800324a:	9c01      	ldr	r4, [sp, #4]
        if (p != NULL)
 800324c:	b154      	cbz	r4, 8003264 <ethernetif_input+0x30>
          if (netif->input( p, netif) != ERR_OK )
 800324e:	6933      	ldr	r3, [r6, #16]
 8003250:	4631      	mov	r1, r6
 8003252:	4620      	mov	r0, r4
 8003254:	4798      	blx	r3
 8003256:	b990      	cbnz	r0, 800327e <ethernetif_input+0x4a>
  struct pbuf *p = NULL;
 8003258:	f8cd 9004 	str.w	r9, [sp, #4]
  if(RxAllocStatus == RX_ALLOC_OK)
 800325c:	f898 3000 	ldrb.w	r3, [r8]
 8003260:	2b00      	cmp	r3, #0
 8003262:	d0ee      	beq.n	8003242 <ethernetif_input+0xe>
    if (osSemaphoreAcquire(RxPktSemaphore, TIME_WAITING_FOR_INPUT) == osOK)
 8003264:	f04f 34ff 	mov.w	r4, #4294967295
 8003268:	4621      	mov	r1, r4
 800326a:	6828      	ldr	r0, [r5, #0]
 800326c:	f000 fc8a 	bl	8003b84 <osSemaphoreAcquire>
 8003270:	2800      	cmp	r0, #0
 8003272:	d1f9      	bne.n	8003268 <ethernetif_input+0x34>
  struct pbuf *p = NULL;
 8003274:	f04f 0900 	mov.w	r9, #0
  if(RxAllocStatus == RX_ALLOC_OK)
 8003278:	f8df 8014 	ldr.w	r8, [pc, #20]	; 8003290 <ethernetif_input+0x5c>
 800327c:	e7ec      	b.n	8003258 <ethernetif_input+0x24>
            pbuf_free(p);
 800327e:	4620      	mov	r0, r4
 8003280:	f005 fa42 	bl	8008708 <pbuf_free>
      } while(p!=NULL);
 8003284:	e7e8      	b.n	8003258 <ethernetif_input+0x24>
 8003286:	bf00      	nop
 8003288:	2000095c 	.word	0x2000095c
 800328c:	2000099c 	.word	0x2000099c
 8003290:	20000958 	.word	0x20000958

08003294 <low_level_output>:
{
 8003294:	b530      	push	{r4, r5, lr}
 8003296:	b08d      	sub	sp, #52	; 0x34
 8003298:	460c      	mov	r4, r1
  ETH_BufferTypeDef Txbuffer[ETH_TX_DESC_CNT] = {0};
 800329a:	2230      	movs	r2, #48	; 0x30
 800329c:	2100      	movs	r1, #0
 800329e:	4668      	mov	r0, sp
 80032a0:	f00b fe8b 	bl	800efba <memset>
  for(q = p; q != NULL; q = q->next)
 80032a4:	b32c      	cbz	r4, 80032f2 <low_level_output+0x5e>
    Txbuffer[i].buffer = q->payload;
 80032a6:	6863      	ldr	r3, [r4, #4]
 80032a8:	9300      	str	r3, [sp, #0]
    Txbuffer[i].len = q->len;
 80032aa:	8963      	ldrh	r3, [r4, #10]
 80032ac:	9301      	str	r3, [sp, #4]
    if(i>0)
 80032ae:	a803      	add	r0, sp, #12
  for(q = p; q != NULL; q = q->next)
 80032b0:	4621      	mov	r1, r4
    Txbuffer[i].len = q->len;
 80032b2:	2301      	movs	r3, #1
      Txbuffer[i].next = NULL;
 80032b4:	2500      	movs	r5, #0
 80032b6:	e002      	b.n	80032be <low_level_output+0x2a>
 80032b8:	300c      	adds	r0, #12
 80032ba:	3301      	adds	r3, #1
{
 80032bc:	4611      	mov	r1, r2
    if(q->next == NULL)
 80032be:	680a      	ldr	r2, [r1, #0]
 80032c0:	b192      	cbz	r2, 80032e8 <low_level_output+0x54>
    if(i >= ETH_TX_DESC_CNT)
 80032c2:	2b04      	cmp	r3, #4
 80032c4:	d030      	beq.n	8003328 <low_level_output+0x94>
    Txbuffer[i].buffer = q->payload;
 80032c6:	6851      	ldr	r1, [r2, #4]
 80032c8:	eb03 0c43 	add.w	ip, r3, r3, lsl #1
 80032cc:	f10d 0e30 	add.w	lr, sp, #48	; 0x30
 80032d0:	eb0e 0c8c 	add.w	ip, lr, ip, lsl #2
 80032d4:	f84c 1c30 	str.w	r1, [ip, #-48]
    Txbuffer[i].len = q->len;
 80032d8:	8951      	ldrh	r1, [r2, #10]
 80032da:	f84c 1c2c 	str.w	r1, [ip, #-44]
    if(i>0)
 80032de:	2b00      	cmp	r3, #0
 80032e0:	d0ea      	beq.n	80032b8 <low_level_output+0x24>
      Txbuffer[i-1].next = &Txbuffer[i];
 80032e2:	f840 0c04 	str.w	r0, [r0, #-4]
 80032e6:	e7e7      	b.n	80032b8 <low_level_output+0x24>
      Txbuffer[i].next = NULL;
 80032e8:	f840 5c04 	str.w	r5, [r0, #-4]
  for(q = p; q != NULL; q = q->next)
 80032ec:	680a      	ldr	r2, [r1, #0]
 80032ee:	2a00      	cmp	r2, #0
 80032f0:	d1e7      	bne.n	80032c2 <low_level_output+0x2e>
  TxConfig.Length = p->tot_len;
 80032f2:	4d0f      	ldr	r5, [pc, #60]	; (8003330 <low_level_output+0x9c>)
 80032f4:	8923      	ldrh	r3, [r4, #8]
 80032f6:	606b      	str	r3, [r5, #4]
  TxConfig.TxBuffer = Txbuffer;
 80032f8:	f8c5 d008 	str.w	sp, [r5, #8]
  TxConfig.pData = p;
 80032fc:	636c      	str	r4, [r5, #52]	; 0x34
  pbuf_ref(p);
 80032fe:	4620      	mov	r0, r4
 8003300:	f005 fb86 	bl	8008a10 <pbuf_ref>
  HAL_ETH_Transmit_IT(&heth, &TxConfig);
 8003304:	4629      	mov	r1, r5
 8003306:	480b      	ldr	r0, [pc, #44]	; (8003334 <low_level_output+0xa0>)
 8003308:	f7fe fa68 	bl	80017dc <HAL_ETH_Transmit_IT>
  while(osSemaphoreAcquire(TxPktSemaphore, TIME_WAITING_FOR_INPUT)!=osOK)
 800330c:	4d0a      	ldr	r5, [pc, #40]	; (8003338 <low_level_output+0xa4>)
 800330e:	f04f 34ff 	mov.w	r4, #4294967295
 8003312:	4621      	mov	r1, r4
 8003314:	6828      	ldr	r0, [r5, #0]
 8003316:	f000 fc35 	bl	8003b84 <osSemaphoreAcquire>
 800331a:	2800      	cmp	r0, #0
 800331c:	d1f9      	bne.n	8003312 <low_level_output+0x7e>
  HAL_ETH_ReleaseTxPacket(&heth);
 800331e:	4805      	ldr	r0, [pc, #20]	; (8003334 <low_level_output+0xa0>)
 8003320:	f7fe fb35 	bl	800198e <HAL_ETH_ReleaseTxPacket>
  return errval;
 8003324:	2000      	movs	r0, #0
 8003326:	e001      	b.n	800332c <low_level_output+0x98>
      return ERR_IF;
 8003328:	f06f 000b 	mvn.w	r0, #11
}
 800332c:	b00d      	add	sp, #52	; 0x34
 800332e:	bd30      	pop	{r4, r5, pc}
 8003330:	20000960 	.word	0x20000960
 8003334:	2000099c 	.word	0x2000099c
 8003338:	20000998 	.word	0x20000998

0800333c <pbuf_free_custom>:
{
 800333c:	b508      	push	{r3, lr}
 800333e:	4601      	mov	r1, r0
  LWIP_MEMPOOL_FREE(RX_POOL, custom_pbuf);
 8003340:	4807      	ldr	r0, [pc, #28]	; (8003360 <pbuf_free_custom+0x24>)
 8003342:	f004 ff09 	bl	8008158 <memp_free_pool>
  if (RxAllocStatus == RX_ALLOC_ERROR)
 8003346:	4b07      	ldr	r3, [pc, #28]	; (8003364 <pbuf_free_custom+0x28>)
 8003348:	781b      	ldrb	r3, [r3, #0]
 800334a:	2b01      	cmp	r3, #1
 800334c:	d000      	beq.n	8003350 <pbuf_free_custom+0x14>
}
 800334e:	bd08      	pop	{r3, pc}
    RxAllocStatus = RX_ALLOC_OK;
 8003350:	4b04      	ldr	r3, [pc, #16]	; (8003364 <pbuf_free_custom+0x28>)
 8003352:	2200      	movs	r2, #0
 8003354:	701a      	strb	r2, [r3, #0]
    osSemaphoreRelease(RxPktSemaphore);
 8003356:	4b04      	ldr	r3, [pc, #16]	; (8003368 <pbuf_free_custom+0x2c>)
 8003358:	6818      	ldr	r0, [r3, #0]
 800335a:	f000 fc47 	bl	8003bec <osSemaphoreRelease>
}
 800335e:	e7f6      	b.n	800334e <pbuf_free_custom+0x12>
 8003360:	080103d4 	.word	0x080103d4
 8003364:	20000958 	.word	0x20000958
 8003368:	2000095c 	.word	0x2000095c

0800336c <ETH_PHY_IO_GetTick>:
/**
  * @brief  Get the time in millisecons used for internal PHY driver process.
  * @retval Time value
  */
int32_t ETH_PHY_IO_GetTick(void)
{
 800336c:	b508      	push	{r3, lr}
  return HAL_GetTick();
 800336e:	f7fd fdc5 	bl	8000efc <HAL_GetTick>
}
 8003372:	bd08      	pop	{r3, pc}

08003374 <ETH_PHY_IO_Init>:
{
 8003374:	b508      	push	{r3, lr}
  HAL_ETH_SetMDIOClockRange(&heth);
 8003376:	4802      	ldr	r0, [pc, #8]	; (8003380 <ETH_PHY_IO_Init+0xc>)
 8003378:	f7fe fc8a 	bl	8001c90 <HAL_ETH_SetMDIOClockRange>
}
 800337c:	2000      	movs	r0, #0
 800337e:	bd08      	pop	{r3, pc}
 8003380:	2000099c 	.word	0x2000099c

08003384 <ETH_PHY_IO_ReadReg>:
{
 8003384:	b508      	push	{r3, lr}
 8003386:	4613      	mov	r3, r2
  if(HAL_ETH_ReadPHYRegister(&heth, DevAddr, RegAddr, pRegVal) != HAL_OK)
 8003388:	460a      	mov	r2, r1
 800338a:	4601      	mov	r1, r0
 800338c:	4803      	ldr	r0, [pc, #12]	; (800339c <ETH_PHY_IO_ReadReg+0x18>)
 800338e:	f7fe fbb1 	bl	8001af4 <HAL_ETH_ReadPHYRegister>
 8003392:	3800      	subs	r0, #0
 8003394:	bf18      	it	ne
 8003396:	2001      	movne	r0, #1
}
 8003398:	4240      	negs	r0, r0
 800339a:	bd08      	pop	{r3, pc}
 800339c:	2000099c 	.word	0x2000099c

080033a0 <ETH_PHY_IO_WriteReg>:
{
 80033a0:	b508      	push	{r3, lr}
 80033a2:	4613      	mov	r3, r2
  if(HAL_ETH_WritePHYRegister(&heth, DevAddr, RegAddr, RegVal) != HAL_OK)
 80033a4:	460a      	mov	r2, r1
 80033a6:	4601      	mov	r1, r0
 80033a8:	4803      	ldr	r0, [pc, #12]	; (80033b8 <ETH_PHY_IO_WriteReg+0x18>)
 80033aa:	f7fe fbc9 	bl	8001b40 <HAL_ETH_WritePHYRegister>
 80033ae:	3800      	subs	r0, #0
 80033b0:	bf18      	it	ne
 80033b2:	2001      	movne	r0, #1
}
 80033b4:	4240      	negs	r0, r0
 80033b6:	bd08      	pop	{r3, pc}
 80033b8:	2000099c 	.word	0x2000099c

080033bc <HAL_ETH_RxCpltCallback>:
{
 80033bc:	b508      	push	{r3, lr}
  osSemaphoreRelease(RxPktSemaphore);
 80033be:	4b02      	ldr	r3, [pc, #8]	; (80033c8 <HAL_ETH_RxCpltCallback+0xc>)
 80033c0:	6818      	ldr	r0, [r3, #0]
 80033c2:	f000 fc13 	bl	8003bec <osSemaphoreRelease>
}
 80033c6:	bd08      	pop	{r3, pc}
 80033c8:	2000095c 	.word	0x2000095c

080033cc <HAL_ETH_TxCpltCallback>:
{
 80033cc:	b508      	push	{r3, lr}
  osSemaphoreRelease(TxPktSemaphore);
 80033ce:	4b02      	ldr	r3, [pc, #8]	; (80033d8 <HAL_ETH_TxCpltCallback+0xc>)
 80033d0:	6818      	ldr	r0, [r3, #0]
 80033d2:	f000 fc0b 	bl	8003bec <osSemaphoreRelease>
}
 80033d6:	bd08      	pop	{r3, pc}
 80033d8:	20000998 	.word	0x20000998

080033dc <HAL_ETH_ErrorCallback>:
{
 80033dc:	b508      	push	{r3, lr}
  if((HAL_ETH_GetDMAError(handlerEth) & ETH_DMASR_RBUS) == ETH_DMASR_RBUS)
 80033de:	f7fe fc91 	bl	8001d04 <HAL_ETH_GetDMAError>
 80033e2:	f010 0f80 	tst.w	r0, #128	; 0x80
 80033e6:	d100      	bne.n	80033ea <HAL_ETH_ErrorCallback+0xe>
}
 80033e8:	bd08      	pop	{r3, pc}
     osSemaphoreRelease(RxPktSemaphore);
 80033ea:	4b02      	ldr	r3, [pc, #8]	; (80033f4 <HAL_ETH_ErrorCallback+0x18>)
 80033ec:	6818      	ldr	r0, [r3, #0]
 80033ee:	f000 fbfd 	bl	8003bec <osSemaphoreRelease>
}
 80033f2:	e7f9      	b.n	80033e8 <HAL_ETH_ErrorCallback+0xc>
 80033f4:	2000095c 	.word	0x2000095c

080033f8 <ethernetif_init>:
{
 80033f8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80033fc:	b0a4      	sub	sp, #144	; 0x90
  LWIP_ASSERT("netif != NULL", (netif != NULL));
 80033fe:	4604      	mov	r4, r0
 8003400:	2800      	cmp	r0, #0
 8003402:	f000 80b0 	beq.w	8003566 <ethernetif_init+0x16e>
  netif->name[0] = IFNAME0;
 8003406:	2373      	movs	r3, #115	; 0x73
 8003408:	f884 302e 	strb.w	r3, [r4, #46]	; 0x2e
  netif->name[1] = IFNAME1;
 800340c:	2374      	movs	r3, #116	; 0x74
 800340e:	f884 302f 	strb.w	r3, [r4, #47]	; 0x2f
  netif->output = etharp_output;
 8003412:	4b63      	ldr	r3, [pc, #396]	; (80035a0 <ethernetif_init+0x1a8>)
 8003414:	6163      	str	r3, [r4, #20]
  netif->linkoutput = low_level_output;
 8003416:	4b63      	ldr	r3, [pc, #396]	; (80035a4 <ethernetif_init+0x1ac>)
 8003418:	61a3      	str	r3, [r4, #24]
  ETH_MACConfigTypeDef MACConf = {0};
 800341a:	2264      	movs	r2, #100	; 0x64
 800341c:	2100      	movs	r1, #0
 800341e:	a80b      	add	r0, sp, #44	; 0x2c
 8003420:	f00b fdcb 	bl	800efba <memset>
  heth.Instance = ETH;
 8003424:	4e60      	ldr	r6, [pc, #384]	; (80035a8 <ethernetif_init+0x1b0>)
 8003426:	4b61      	ldr	r3, [pc, #388]	; (80035ac <ethernetif_init+0x1b4>)
 8003428:	6033      	str	r3, [r6, #0]
  MACAddr[0] = 0x00;
 800342a:	2500      	movs	r5, #0
 800342c:	f88d 5000 	strb.w	r5, [sp]
  MACAddr[1] = 0x80;
 8003430:	2380      	movs	r3, #128	; 0x80
 8003432:	f88d 3001 	strb.w	r3, [sp, #1]
  MACAddr[2] = 0xE1;
 8003436:	23e1      	movs	r3, #225	; 0xe1
 8003438:	f88d 3002 	strb.w	r3, [sp, #2]
  MACAddr[3] = 0x00;
 800343c:	f88d 5003 	strb.w	r5, [sp, #3]
  MACAddr[4] = 0x00;
 8003440:	f88d 5004 	strb.w	r5, [sp, #4]
  MACAddr[5] = 0x00;
 8003444:	f88d 5005 	strb.w	r5, [sp, #5]
  heth.Init.MACAddr = &MACAddr[0];
 8003448:	f8c6 d004 	str.w	sp, [r6, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 800344c:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 8003450:	60b3      	str	r3, [r6, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 8003452:	4b57      	ldr	r3, [pc, #348]	; (80035b0 <ethernetif_init+0x1b8>)
 8003454:	60f3      	str	r3, [r6, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 8003456:	4b57      	ldr	r3, [pc, #348]	; (80035b4 <ethernetif_init+0x1bc>)
 8003458:	6133      	str	r3, [r6, #16]
  heth.Init.RxBuffLen = 1536;
 800345a:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 800345e:	6173      	str	r3, [r6, #20]
  hal_eth_init_status = HAL_ETH_Init(&heth);
 8003460:	4630      	mov	r0, r6
 8003462:	f7fd ffc1 	bl	80013e8 <HAL_ETH_Init>
 8003466:	4607      	mov	r7, r0
  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 8003468:	f8df 8174 	ldr.w	r8, [pc, #372]	; 80035e0 <ethernetif_init+0x1e8>
 800346c:	2234      	movs	r2, #52	; 0x34
 800346e:	4629      	mov	r1, r5
 8003470:	f108 0004 	add.w	r0, r8, #4
 8003474:	f00b fda1 	bl	800efba <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 8003478:	2321      	movs	r3, #33	; 0x21
 800347a:	f8c8 3000 	str.w	r3, [r8]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 800347e:	f44f 0340 	mov.w	r3, #12582912	; 0xc00000
 8003482:	f8c8 3014 	str.w	r3, [r8, #20]
  LWIP_MEMPOOL_INIT(RX_POOL);
 8003486:	484c      	ldr	r0, [pc, #304]	; (80035b8 <ethernetif_init+0x1c0>)
 8003488:	f004 fe12 	bl	80080b0 <memp_init_pool>
  netif->hwaddr_len = ETH_HWADDR_LEN;
 800348c:	2306      	movs	r3, #6
 800348e:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
  netif->hwaddr[0] =  heth.Init.MACAddr[0];
 8003492:	6873      	ldr	r3, [r6, #4]
 8003494:	781a      	ldrb	r2, [r3, #0]
 8003496:	f884 2026 	strb.w	r2, [r4, #38]	; 0x26
  netif->hwaddr[1] =  heth.Init.MACAddr[1];
 800349a:	785a      	ldrb	r2, [r3, #1]
 800349c:	f884 2027 	strb.w	r2, [r4, #39]	; 0x27
  netif->hwaddr[2] =  heth.Init.MACAddr[2];
 80034a0:	789a      	ldrb	r2, [r3, #2]
 80034a2:	f884 2028 	strb.w	r2, [r4, #40]	; 0x28
  netif->hwaddr[3] =  heth.Init.MACAddr[3];
 80034a6:	78da      	ldrb	r2, [r3, #3]
 80034a8:	f884 2029 	strb.w	r2, [r4, #41]	; 0x29
  netif->hwaddr[4] =  heth.Init.MACAddr[4];
 80034ac:	791a      	ldrb	r2, [r3, #4]
 80034ae:	f884 202a 	strb.w	r2, [r4, #42]	; 0x2a
  netif->hwaddr[5] =  heth.Init.MACAddr[5];
 80034b2:	795b      	ldrb	r3, [r3, #5]
 80034b4:	f884 302b 	strb.w	r3, [r4, #43]	; 0x2b
  netif->mtu = ETH_MAX_PAYLOAD;
 80034b8:	f240 53dc 	movw	r3, #1500	; 0x5dc
 80034bc:	84a3      	strh	r3, [r4, #36]	; 0x24
    netif->flags |= NETIF_FLAG_BROADCAST | NETIF_FLAG_ETHARP;
 80034be:	f894 302d 	ldrb.w	r3, [r4, #45]	; 0x2d
 80034c2:	f043 030a 	orr.w	r3, r3, #10
 80034c6:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
  RxPktSemaphore = osSemaphoreNew(1, 1, NULL);
 80034ca:	462a      	mov	r2, r5
 80034cc:	2101      	movs	r1, #1
 80034ce:	4608      	mov	r0, r1
 80034d0:	f000 fafa 	bl	8003ac8 <osSemaphoreNew>
 80034d4:	4b39      	ldr	r3, [pc, #228]	; (80035bc <ethernetif_init+0x1c4>)
 80034d6:	6018      	str	r0, [r3, #0]
  TxPktSemaphore = osSemaphoreNew(1, 1, NULL);
 80034d8:	462a      	mov	r2, r5
 80034da:	2101      	movs	r1, #1
 80034dc:	4608      	mov	r0, r1
 80034de:	f000 faf3 	bl	8003ac8 <osSemaphoreNew>
 80034e2:	4b37      	ldr	r3, [pc, #220]	; (80035c0 <ethernetif_init+0x1c8>)
 80034e4:	6018      	str	r0, [r3, #0]
  memset(&attributes, 0x0, sizeof(osThreadAttr_t));
 80034e6:	2220      	movs	r2, #32
 80034e8:	4629      	mov	r1, r5
 80034ea:	a803      	add	r0, sp, #12
 80034ec:	f00b fd65 	bl	800efba <memset>
  attributes.name = "EthIf";
 80034f0:	4b34      	ldr	r3, [pc, #208]	; (80035c4 <ethernetif_init+0x1cc>)
 80034f2:	9302      	str	r3, [sp, #8]
  attributes.stack_size = INTERFACE_THREAD_STACK_SIZE;
 80034f4:	f44f 73af 	mov.w	r3, #350	; 0x15e
 80034f8:	9307      	str	r3, [sp, #28]
  attributes.priority = osPriorityRealtime;
 80034fa:	2330      	movs	r3, #48	; 0x30
 80034fc:	9308      	str	r3, [sp, #32]
  osThreadNew(ethernetif_input, netif, &attributes);
 80034fe:	aa02      	add	r2, sp, #8
 8003500:	4621      	mov	r1, r4
 8003502:	4831      	ldr	r0, [pc, #196]	; (80035c8 <ethernetif_init+0x1d0>)
 8003504:	f000 f9f6 	bl	80038f4 <osThreadNew>
  LAN8742_RegisterBusIO(&LAN8742, &LAN8742_IOCtx);
 8003508:	4d30      	ldr	r5, [pc, #192]	; (80035cc <ethernetif_init+0x1d4>)
 800350a:	4931      	ldr	r1, [pc, #196]	; (80035d0 <ethernetif_init+0x1d8>)
 800350c:	4628      	mov	r0, r5
 800350e:	f7fd fbe4 	bl	8000cda <LAN8742_RegisterBusIO>
  LAN8742_Init(&LAN8742);
 8003512:	4628      	mov	r0, r5
 8003514:	f7fd fc00 	bl	8000d18 <LAN8742_Init>
  if (hal_eth_init_status == HAL_OK)
 8003518:	2f00      	cmp	r7, #0
 800351a:	d13a      	bne.n	8003592 <ethernetif_init+0x19a>
    PHYLinkState = LAN8742_GetLinkState(&LAN8742);
 800351c:	4628      	mov	r0, r5
 800351e:	f7fd fc67 	bl	8000df0 <LAN8742_GetLinkState>
    if(PHYLinkState <= LAN8742_STATUS_LINK_DOWN)
 8003522:	2801      	cmp	r0, #1
 8003524:	dd27      	ble.n	8003576 <ethernetif_init+0x17e>
      switch (PHYLinkState)
 8003526:	2804      	cmp	r0, #4
 8003528:	d02c      	beq.n	8003584 <ethernetif_init+0x18c>
 800352a:	2805      	cmp	r0, #5
 800352c:	d02e      	beq.n	800358c <ethernetif_init+0x194>
 800352e:	f44f 4680 	mov.w	r6, #16384	; 0x4000
 8003532:	2803      	cmp	r0, #3
 8003534:	bf14      	ite	ne
 8003536:	f44f 6700 	movne.w	r7, #2048	; 0x800
 800353a:	2700      	moveq	r7, #0
    HAL_ETH_GetMACConfig(&heth, &MACConf);
 800353c:	4d1a      	ldr	r5, [pc, #104]	; (80035a8 <ethernetif_init+0x1b0>)
 800353e:	a90b      	add	r1, sp, #44	; 0x2c
 8003540:	4628      	mov	r0, r5
 8003542:	f7fe fb22 	bl	8001b8a <HAL_ETH_GetMACConfig>
    MACConf.DuplexMode = duplex;
 8003546:	9711      	str	r7, [sp, #68]	; 0x44
    MACConf.Speed = speed;
 8003548:	9610      	str	r6, [sp, #64]	; 0x40
    HAL_ETH_SetMACConfig(&heth, &MACConf);
 800354a:	a90b      	add	r1, sp, #44	; 0x2c
 800354c:	4628      	mov	r0, r5
 800354e:	f7fe fb90 	bl	8001c72 <HAL_ETH_SetMACConfig>
    HAL_ETH_Start_IT(&heth);
 8003552:	4628      	mov	r0, r5
 8003554:	f7fe f898 	bl	8001688 <HAL_ETH_Start_IT>
    netif_set_up(netif);
 8003558:	4620      	mov	r0, r4
 800355a:	f004 ff5d 	bl	8008418 <netif_set_up>
    netif_set_link_up(netif);
 800355e:	4620      	mov	r0, r4
 8003560:	f004 ff98 	bl	8008494 <netif_set_link_up>
 8003564:	e017      	b.n	8003596 <ethernetif_init+0x19e>
  LWIP_ASSERT("netif != NULL", (netif != NULL));
 8003566:	4b1b      	ldr	r3, [pc, #108]	; (80035d4 <ethernetif_init+0x1dc>)
 8003568:	f240 12e5 	movw	r2, #485	; 0x1e5
 800356c:	491a      	ldr	r1, [pc, #104]	; (80035d8 <ethernetif_init+0x1e0>)
 800356e:	481b      	ldr	r0, [pc, #108]	; (80035dc <ethernetif_init+0x1e4>)
 8003570:	f00b fdc0 	bl	800f0f4 <iprintf>
 8003574:	e747      	b.n	8003406 <ethernetif_init+0xe>
      netif_set_link_down(netif);
 8003576:	4620      	mov	r0, r4
 8003578:	f004 ffb0 	bl	80084dc <netif_set_link_down>
      netif_set_down(netif);
 800357c:	4620      	mov	r0, r4
 800357e:	f004 ff69 	bl	8008454 <netif_set_down>
 8003582:	e008      	b.n	8003596 <ethernetif_init+0x19e>
        speed = ETH_SPEED_10M;
 8003584:	2600      	movs	r6, #0
        duplex = ETH_FULLDUPLEX_MODE;
 8003586:	f44f 6700 	mov.w	r7, #2048	; 0x800
 800358a:	e7d7      	b.n	800353c <ethernetif_init+0x144>
        speed = ETH_SPEED_10M;
 800358c:	2600      	movs	r6, #0
        duplex = ETH_HALFDUPLEX_MODE;
 800358e:	4637      	mov	r7, r6
 8003590:	e7d4      	b.n	800353c <ethernetif_init+0x144>
    Error_Handler();
 8003592:	f7fd f93f 	bl	8000814 <Error_Handler>
}
 8003596:	2000      	movs	r0, #0
 8003598:	b024      	add	sp, #144	; 0x90
 800359a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800359e:	bf00      	nop
 80035a0:	0800da3d 	.word	0x0800da3d
 80035a4:	08003295 	.word	0x08003295
 80035a8:	2000099c 	.word	0x2000099c
 80035ac:	40028000 	.word	0x40028000
 80035b0:	20000898 	.word	0x20000898
 80035b4:	200007f8 	.word	0x200007f8
 80035b8:	080103d4 	.word	0x080103d4
 80035bc:	2000095c 	.word	0x2000095c
 80035c0:	20000998 	.word	0x20000998
 80035c4:	080103cc 	.word	0x080103cc
 80035c8:	08003235 	.word	0x08003235
 80035cc:	20000938 	.word	0x20000938
 80035d0:	2000000c 	.word	0x2000000c
 80035d4:	08010378 	.word	0x08010378
 80035d8:	08010394 	.word	0x08010394
 80035dc:	080103a4 	.word	0x080103a4
 80035e0:	20000960 	.word	0x20000960

080035e4 <sys_now>:
{
 80035e4:	b508      	push	{r3, lr}
  return HAL_GetTick();
 80035e6:	f7fd fc89 	bl	8000efc <HAL_GetTick>
}
 80035ea:	bd08      	pop	{r3, pc}

080035ec <HAL_ETH_MspInit>:
{
 80035ec:	b5f0      	push	{r4, r5, r6, r7, lr}
 80035ee:	b08d      	sub	sp, #52	; 0x34
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80035f0:	2300      	movs	r3, #0
 80035f2:	9307      	str	r3, [sp, #28]
 80035f4:	9308      	str	r3, [sp, #32]
 80035f6:	9309      	str	r3, [sp, #36]	; 0x24
 80035f8:	930a      	str	r3, [sp, #40]	; 0x28
 80035fa:	930b      	str	r3, [sp, #44]	; 0x2c
  if(ethHandle->Instance==ETH)
 80035fc:	6802      	ldr	r2, [r0, #0]
 80035fe:	4b41      	ldr	r3, [pc, #260]	; (8003704 <HAL_ETH_MspInit+0x118>)
 8003600:	429a      	cmp	r2, r3
 8003602:	d001      	beq.n	8003608 <HAL_ETH_MspInit+0x1c>
}
 8003604:	b00d      	add	sp, #52	; 0x34
 8003606:	bdf0      	pop	{r4, r5, r6, r7, pc}
    __HAL_RCC_ETH_CLK_ENABLE();
 8003608:	2400      	movs	r4, #0
 800360a:	9400      	str	r4, [sp, #0]
 800360c:	f5a3 4390 	sub.w	r3, r3, #18432	; 0x4800
 8003610:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003612:	f042 7200 	orr.w	r2, r2, #33554432	; 0x2000000
 8003616:	631a      	str	r2, [r3, #48]	; 0x30
 8003618:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800361a:	f002 7200 	and.w	r2, r2, #33554432	; 0x2000000
 800361e:	9200      	str	r2, [sp, #0]
 8003620:	9a00      	ldr	r2, [sp, #0]
 8003622:	9401      	str	r4, [sp, #4]
 8003624:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003626:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 800362a:	631a      	str	r2, [r3, #48]	; 0x30
 800362c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800362e:	f002 6280 	and.w	r2, r2, #67108864	; 0x4000000
 8003632:	9201      	str	r2, [sp, #4]
 8003634:	9a01      	ldr	r2, [sp, #4]
 8003636:	9402      	str	r4, [sp, #8]
 8003638:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800363a:	f042 6200 	orr.w	r2, r2, #134217728	; 0x8000000
 800363e:	631a      	str	r2, [r3, #48]	; 0x30
 8003640:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003642:	f002 6200 	and.w	r2, r2, #134217728	; 0x8000000
 8003646:	9202      	str	r2, [sp, #8]
 8003648:	9a02      	ldr	r2, [sp, #8]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800364a:	9403      	str	r4, [sp, #12]
 800364c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800364e:	f042 0204 	orr.w	r2, r2, #4
 8003652:	631a      	str	r2, [r3, #48]	; 0x30
 8003654:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003656:	f002 0204 	and.w	r2, r2, #4
 800365a:	9203      	str	r2, [sp, #12]
 800365c:	9a03      	ldr	r2, [sp, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800365e:	9404      	str	r4, [sp, #16]
 8003660:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003662:	f042 0201 	orr.w	r2, r2, #1
 8003666:	631a      	str	r2, [r3, #48]	; 0x30
 8003668:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800366a:	f002 0201 	and.w	r2, r2, #1
 800366e:	9204      	str	r2, [sp, #16]
 8003670:	9a04      	ldr	r2, [sp, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003672:	9405      	str	r4, [sp, #20]
 8003674:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003676:	f042 0202 	orr.w	r2, r2, #2
 800367a:	631a      	str	r2, [r3, #48]	; 0x30
 800367c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800367e:	f002 0202 	and.w	r2, r2, #2
 8003682:	9205      	str	r2, [sp, #20]
 8003684:	9a05      	ldr	r2, [sp, #20]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8003686:	9406      	str	r4, [sp, #24]
 8003688:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800368a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800368e:	631a      	str	r2, [r3, #48]	; 0x30
 8003690:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003692:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003696:	9306      	str	r3, [sp, #24]
 8003698:	9b06      	ldr	r3, [sp, #24]
    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 800369a:	2332      	movs	r3, #50	; 0x32
 800369c:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800369e:	2702      	movs	r7, #2
 80036a0:	9708      	str	r7, [sp, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80036a2:	2603      	movs	r6, #3
 80036a4:	960a      	str	r6, [sp, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80036a6:	250b      	movs	r5, #11
 80036a8:	950b      	str	r5, [sp, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80036aa:	a907      	add	r1, sp, #28
 80036ac:	4816      	ldr	r0, [pc, #88]	; (8003708 <HAL_ETH_MspInit+0x11c>)
 80036ae:	f7fe fb2d 	bl	8001d0c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 80036b2:	2386      	movs	r3, #134	; 0x86
 80036b4:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80036b6:	9708      	str	r7, [sp, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80036b8:	9409      	str	r4, [sp, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80036ba:	960a      	str	r6, [sp, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80036bc:	950b      	str	r5, [sp, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80036be:	a907      	add	r1, sp, #28
 80036c0:	4812      	ldr	r0, [pc, #72]	; (800370c <HAL_ETH_MspInit+0x120>)
 80036c2:	f7fe fb23 	bl	8001d0c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 80036c6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80036ca:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80036cc:	9708      	str	r7, [sp, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80036ce:	9409      	str	r4, [sp, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80036d0:	960a      	str	r6, [sp, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80036d2:	950b      	str	r5, [sp, #44]	; 0x2c
    HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 80036d4:	a907      	add	r1, sp, #28
 80036d6:	480e      	ldr	r0, [pc, #56]	; (8003710 <HAL_ETH_MspInit+0x124>)
 80036d8:	f7fe fb18 	bl	8001d0c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 80036dc:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 80036e0:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80036e2:	9708      	str	r7, [sp, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80036e4:	9409      	str	r4, [sp, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80036e6:	960a      	str	r6, [sp, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80036e8:	950b      	str	r5, [sp, #44]	; 0x2c
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80036ea:	a907      	add	r1, sp, #28
 80036ec:	4809      	ldr	r0, [pc, #36]	; (8003714 <HAL_ETH_MspInit+0x128>)
 80036ee:	f7fe fb0d 	bl	8001d0c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(ETH_IRQn, 5, 0);
 80036f2:	4622      	mov	r2, r4
 80036f4:	2105      	movs	r1, #5
 80036f6:	203d      	movs	r0, #61	; 0x3d
 80036f8:	f7fd fc2c 	bl	8000f54 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ETH_IRQn);
 80036fc:	203d      	movs	r0, #61	; 0x3d
 80036fe:	f7fd fc5f 	bl	8000fc0 <HAL_NVIC_EnableIRQ>
}
 8003702:	e77f      	b.n	8003604 <HAL_ETH_MspInit+0x18>
 8003704:	40028000 	.word	0x40028000
 8003708:	40020800 	.word	0x40020800
 800370c:	40020000 	.word	0x40020000
 8003710:	40020400 	.word	0x40020400
 8003714:	40021800 	.word	0x40021800

08003718 <ethernet_link_thread>:
/**
  * @brief  Check the ETH link state then update ETH driver and netif link accordingly.
  * @retval None
  */
void ethernet_link_thread(void* argument)
{
 8003718:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800371c:	b09a      	sub	sp, #104	; 0x68
 800371e:	4604      	mov	r4, r0
  ETH_MACConfigTypeDef MACConf = {0};
 8003720:	2264      	movs	r2, #100	; 0x64
 8003722:	2100      	movs	r1, #0
 8003724:	a801      	add	r0, sp, #4
 8003726:	f00b fc48 	bl	800efba <memset>
  int32_t PHYLinkState = 0;
  uint32_t linkchanged = 0U, speed = 0U, duplex = 0U;
 800372a:	2700      	movs	r7, #0
 800372c:	46b8      	mov	r8, r7
 800372e:	46ba      	mov	sl, r7

/* USER CODE END ETH link init */

  for(;;)
  {
  PHYLinkState = LAN8742_GetLinkState(&LAN8742);
 8003730:	4d29      	ldr	r5, [pc, #164]	; (80037d8 <ethernet_link_thread+0xc0>)
      duplex = ETH_HALFDUPLEX_MODE;
      speed = ETH_SPEED_100M;
      linkchanged = 1;
      break;
    case LAN8742_STATUS_10MBITS_FULLDUPLEX:
      duplex = ETH_FULLDUPLEX_MODE;
 8003732:	f44f 6900 	mov.w	r9, #2048	; 0x800
    }

    if(linkchanged)
    {
      /* Get MAC Config MAC */
      HAL_ETH_GetMACConfig(&heth, &MACConf);
 8003736:	4e29      	ldr	r6, [pc, #164]	; (80037dc <ethernet_link_thread+0xc4>)
 8003738:	e00b      	b.n	8003752 <ethernet_link_thread+0x3a>
    HAL_ETH_Stop_IT(&heth);
 800373a:	4630      	mov	r0, r6
 800373c:	f7fe f800 	bl	8001740 <HAL_ETH_Stop_IT>
    netif_set_down(netif);
 8003740:	4620      	mov	r0, r4
 8003742:	f004 fe87 	bl	8008454 <netif_set_down>
    netif_set_link_down(netif);
 8003746:	4620      	mov	r0, r4
 8003748:	f004 fec8 	bl	80084dc <netif_set_link_down>

/* USER CODE BEGIN ETH link Thread core code for User BSP */

/* USER CODE END ETH link Thread core code for User BSP */

    osDelay(100);
 800374c:	2064      	movs	r0, #100	; 0x64
 800374e:	f000 f91d 	bl	800398c <osDelay>
  PHYLinkState = LAN8742_GetLinkState(&LAN8742);
 8003752:	4628      	mov	r0, r5
 8003754:	f7fd fb4c 	bl	8000df0 <LAN8742_GetLinkState>
  if(netif_is_link_up(netif) && (PHYLinkState <= LAN8742_STATUS_LINK_DOWN))
 8003758:	f894 302d 	ldrb.w	r3, [r4, #45]	; 0x2d
 800375c:	f013 0f04 	tst.w	r3, #4
 8003760:	d00b      	beq.n	800377a <ethernet_link_thread+0x62>
 8003762:	2801      	cmp	r0, #1
 8003764:	dde9      	ble.n	800373a <ethernet_link_thread+0x22>
  else if(!netif_is_link_up(netif) && (PHYLinkState > LAN8742_STATUS_LINK_DOWN))
 8003766:	f013 0f04 	tst.w	r3, #4
 800376a:	d1ef      	bne.n	800374c <ethernet_link_thread+0x34>
    switch (PHYLinkState)
 800376c:	3802      	subs	r0, #2
 800376e:	2803      	cmp	r0, #3
 8003770:	d826      	bhi.n	80037c0 <ethernet_link_thread+0xa8>
 8003772:	e8df f000 	tbb	[pc, r0]
 8003776:	0829      	.short	0x0829
 8003778:	222d      	.short	0x222d
  else if(!netif_is_link_up(netif) && (PHYLinkState > LAN8742_STATUS_LINK_DOWN))
 800377a:	f013 0f04 	tst.w	r3, #4
 800377e:	d1e5      	bne.n	800374c <ethernet_link_thread+0x34>
 8003780:	2801      	cmp	r0, #1
 8003782:	dde3      	ble.n	800374c <ethernet_link_thread+0x34>
 8003784:	e7f2      	b.n	800376c <ethernet_link_thread+0x54>
    switch (PHYLinkState)
 8003786:	2700      	movs	r7, #0
 8003788:	f44f 4880 	mov.w	r8, #16384	; 0x4000
      HAL_ETH_GetMACConfig(&heth, &MACConf);
 800378c:	a901      	add	r1, sp, #4
 800378e:	4630      	mov	r0, r6
 8003790:	f7fe f9fb 	bl	8001b8a <HAL_ETH_GetMACConfig>
      MACConf.DuplexMode = duplex;
 8003794:	9707      	str	r7, [sp, #28]
      MACConf.Speed = speed;
 8003796:	f8cd 8018 	str.w	r8, [sp, #24]
      HAL_ETH_SetMACConfig(&heth, &MACConf);
 800379a:	a901      	add	r1, sp, #4
 800379c:	4630      	mov	r0, r6
 800379e:	f7fe fa68 	bl	8001c72 <HAL_ETH_SetMACConfig>
      HAL_ETH_Start(&heth);
 80037a2:	4630      	mov	r0, r6
 80037a4:	f7fd ff34 	bl	8001610 <HAL_ETH_Start>
      netif_set_up(netif);
 80037a8:	4620      	mov	r0, r4
 80037aa:	f004 fe35 	bl	8008418 <netif_set_up>
      netif_set_link_up(netif);
 80037ae:	4620      	mov	r0, r4
 80037b0:	f004 fe70 	bl	8008494 <netif_set_link_up>
 80037b4:	f04f 0a01 	mov.w	sl, #1
 80037b8:	e7c8      	b.n	800374c <ethernet_link_thread+0x34>
      duplex = ETH_HALFDUPLEX_MODE;
 80037ba:	2700      	movs	r7, #0
      speed = ETH_SPEED_10M;
 80037bc:	46b8      	mov	r8, r7
      break;
 80037be:	e7e5      	b.n	800378c <ethernet_link_thread+0x74>
    if(linkchanged)
 80037c0:	f1ba 0f00 	cmp.w	sl, #0
 80037c4:	d0c2      	beq.n	800374c <ethernet_link_thread+0x34>
 80037c6:	e7e1      	b.n	800378c <ethernet_link_thread+0x74>
      duplex = ETH_FULLDUPLEX_MODE;
 80037c8:	464f      	mov	r7, r9
      speed = ETH_SPEED_100M;
 80037ca:	f44f 4880 	mov.w	r8, #16384	; 0x4000
 80037ce:	e7dd      	b.n	800378c <ethernet_link_thread+0x74>
      duplex = ETH_FULLDUPLEX_MODE;
 80037d0:	464f      	mov	r7, r9
      speed = ETH_SPEED_10M;
 80037d2:	f04f 0800 	mov.w	r8, #0
    if(linkchanged)
 80037d6:	e7d9      	b.n	800378c <ethernet_link_thread+0x74>
 80037d8:	20000938 	.word	0x20000938
 80037dc:	2000099c 	.word	0x2000099c

080037e0 <HAL_ETH_RxAllocateCallback>:
  }
}

void HAL_ETH_RxAllocateCallback(uint8_t **buff)
{
 80037e0:	b510      	push	{r4, lr}
 80037e2:	b082      	sub	sp, #8
 80037e4:	4604      	mov	r4, r0
/* USER CODE BEGIN HAL ETH RxAllocateCallback */
  struct pbuf_custom *p = LWIP_MEMPOOL_ALLOC(RX_POOL);
 80037e6:	480e      	ldr	r0, [pc, #56]	; (8003820 <HAL_ETH_RxAllocateCallback+0x40>)
 80037e8:	f004 fc86 	bl	80080f8 <memp_malloc_pool>
  if (p)
 80037ec:	b188      	cbz	r0, 8003812 <HAL_ETH_RxAllocateCallback+0x32>
 80037ee:	4603      	mov	r3, r0
  {
    /* Get the buff from the struct pbuf address. */
    *buff = (uint8_t *)p + offsetof(RxBuff_t, buff);
 80037f0:	f100 0220 	add.w	r2, r0, #32
 80037f4:	6022      	str	r2, [r4, #0]
    p->custom_free_function = pbuf_free_custom;
 80037f6:	4a0b      	ldr	r2, [pc, #44]	; (8003824 <HAL_ETH_RxAllocateCallback+0x44>)
 80037f8:	6102      	str	r2, [r0, #16]
    /* Initialize the struct pbuf.
    * This must be performed whenever a buffer's allocated because it may be
    * changed by lwIP or the app, e.g., pbuf_free decrements ref. */
    pbuf_alloced_custom(PBUF_RAW, 0, PBUF_REF, p, *buff, ETH_RX_BUFFER_SIZE);
 80037fa:	f44f 62c0 	mov.w	r2, #1536	; 0x600
 80037fe:	9201      	str	r2, [sp, #4]
 8003800:	6822      	ldr	r2, [r4, #0]
 8003802:	9200      	str	r2, [sp, #0]
 8003804:	2241      	movs	r2, #65	; 0x41
 8003806:	2100      	movs	r1, #0
 8003808:	4608      	mov	r0, r1
 800380a:	f004 ff1b 	bl	8008644 <pbuf_alloced_custom>
  {
    RxAllocStatus = RX_ALLOC_ERROR;
    *buff = NULL;
  }
/* USER CODE END HAL ETH RxAllocateCallback */
}
 800380e:	b002      	add	sp, #8
 8003810:	bd10      	pop	{r4, pc}
    RxAllocStatus = RX_ALLOC_ERROR;
 8003812:	4b05      	ldr	r3, [pc, #20]	; (8003828 <HAL_ETH_RxAllocateCallback+0x48>)
 8003814:	2201      	movs	r2, #1
 8003816:	701a      	strb	r2, [r3, #0]
    *buff = NULL;
 8003818:	2300      	movs	r3, #0
 800381a:	6023      	str	r3, [r4, #0]
}
 800381c:	e7f7      	b.n	800380e <HAL_ETH_RxAllocateCallback+0x2e>
 800381e:	bf00      	nop
 8003820:	080103d4 	.word	0x080103d4
 8003824:	0800333d 	.word	0x0800333d
 8003828:	20000958 	.word	0x20000958

0800382c <HAL_ETH_RxLinkCallback>:

void HAL_ETH_RxLinkCallback(void **pStart, void **pEnd, uint8_t *buff, uint16_t Length)
{
 800382c:	b430      	push	{r4, r5}
  struct pbuf **ppStart = (struct pbuf **)pStart;
  struct pbuf **ppEnd = (struct pbuf **)pEnd;
  struct pbuf *p = NULL;

  /* Get the struct pbuf from the buff address. */
  p = (struct pbuf *)(buff - offsetof(RxBuff_t, buff));
 800382e:	f1a2 0420 	sub.w	r4, r2, #32
  p->next = NULL;
 8003832:	2500      	movs	r5, #0
 8003834:	f842 5c20 	str.w	r5, [r2, #-32]
  p->tot_len = 0;
 8003838:	f822 5c18 	strh.w	r5, [r2, #-24]
  p->len = Length;
 800383c:	f822 3c16 	strh.w	r3, [r2, #-22]

  /* Chain the buffer. */
  if (!*ppStart)
 8003840:	6802      	ldr	r2, [r0, #0]
 8003842:	b162      	cbz	r2, 800385e <HAL_ETH_RxLinkCallback+0x32>
    *ppStart = p;
  }
  else
  {
    /* Chain the buffer to the end of the packet. */
    (*ppEnd)->next = p;
 8003844:	680a      	ldr	r2, [r1, #0]
 8003846:	6014      	str	r4, [r2, #0]
  }
  *ppEnd  = p;
 8003848:	600c      	str	r4, [r1, #0]

  /* Update the total length of all the buffers of the chain. Each pbuf in the chain should have its tot_len
   * set to its own length, plus the length of all the following pbufs in the chain. */
  for (p = *ppStart; p != NULL; p = p->next)
 800384a:	6802      	ldr	r2, [r0, #0]
 800384c:	b12a      	cbz	r2, 800385a <HAL_ETH_RxLinkCallback+0x2e>
  {
    p->tot_len += Length;
 800384e:	8911      	ldrh	r1, [r2, #8]
 8003850:	4419      	add	r1, r3
 8003852:	8111      	strh	r1, [r2, #8]
  for (p = *ppStart; p != NULL; p = p->next)
 8003854:	6812      	ldr	r2, [r2, #0]
 8003856:	2a00      	cmp	r2, #0
 8003858:	d1f9      	bne.n	800384e <HAL_ETH_RxLinkCallback+0x22>
  }

/* USER CODE END HAL ETH RxLinkCallback */
}
 800385a:	bc30      	pop	{r4, r5}
 800385c:	4770      	bx	lr
    *ppStart = p;
 800385e:	6004      	str	r4, [r0, #0]
 8003860:	e7f2      	b.n	8003848 <HAL_ETH_RxLinkCallback+0x1c>

08003862 <HAL_ETH_TxFreeCallback>:

void HAL_ETH_TxFreeCallback(uint32_t * buff)
{
 8003862:	b508      	push	{r3, lr}
/* USER CODE BEGIN HAL ETH TxFreeCallback */

  pbuf_free((struct pbuf *)buff);
 8003864:	f004 ff50 	bl	8008708 <pbuf_free>

/* USER CODE END HAL ETH TxFreeCallback */
}
 8003868:	bd08      	pop	{r3, pc}

0800386a <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 800386a:	b508      	push	{r3, lr}
  /* Clear overflow flag */
  SysTick->CTRL;
 800386c:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8003870:	691b      	ldr	r3, [r3, #16]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8003872:	f001 fdf5 	bl	8005460 <xTaskGetSchedulerState>
 8003876:	2801      	cmp	r0, #1
 8003878:	d100      	bne.n	800387c <SysTick_Handler+0x12>
    /* Call tick handler */
    xPortSysTickHandler();
  }
}
 800387a:	bd08      	pop	{r3, pc}
    xPortSysTickHandler();
 800387c:	f002 f9da 	bl	8005c34 <xPortSysTickHandler>
}
 8003880:	e7fb      	b.n	800387a <SysTick_Handler+0x10>
	...

08003884 <osKernelInitialize>:
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003884:	f3ef 8305 	mrs	r3, IPSR
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
  osStatus_t stat;

  if (IS_IRQ()) {
 8003888:	b92b      	cbnz	r3, 8003896 <osKernelInitialize+0x12>
    stat = osErrorISR;
  }
  else {
    if (KernelState == osKernelInactive) {
 800388a:	4b06      	ldr	r3, [pc, #24]	; (80038a4 <osKernelInitialize+0x20>)
 800388c:	6818      	ldr	r0, [r3, #0]
 800388e:	b928      	cbnz	r0, 800389c <osKernelInitialize+0x18>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8003890:	2201      	movs	r2, #1
 8003892:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8003894:	4770      	bx	lr
    stat = osErrorISR;
 8003896:	f06f 0005 	mvn.w	r0, #5
 800389a:	4770      	bx	lr
    } else {
      stat = osError;
 800389c:	f04f 30ff 	mov.w	r0, #4294967295
    }
  }

  return (stat);
}
 80038a0:	4770      	bx	lr
 80038a2:	bf00      	nop
 80038a4:	20005c90 	.word	0x20005c90

080038a8 <osKernelStart>:
 80038a8:	f3ef 8305 	mrs	r3, IPSR
}

osStatus_t osKernelStart (void) {
  osStatus_t stat;

  if (IS_IRQ()) {
 80038ac:	b973      	cbnz	r3, 80038cc <osKernelStart+0x24>
    stat = osErrorISR;
  }
  else {
    if (KernelState == osKernelReady) {
 80038ae:	4b0a      	ldr	r3, [pc, #40]	; (80038d8 <osKernelStart+0x30>)
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	2b01      	cmp	r3, #1
 80038b4:	d10d      	bne.n	80038d2 <osKernelStart+0x2a>
osStatus_t osKernelStart (void) {
 80038b6:	b510      	push	{r4, lr}
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80038b8:	2400      	movs	r4, #0
 80038ba:	4b08      	ldr	r3, [pc, #32]	; (80038dc <osKernelStart+0x34>)
 80038bc:	77dc      	strb	r4, [r3, #31]
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 80038be:	4b06      	ldr	r3, [pc, #24]	; (80038d8 <osKernelStart+0x30>)
 80038c0:	2202      	movs	r2, #2
 80038c2:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 80038c4:	f001 fafc 	bl	8004ec0 <vTaskStartScheduler>
      stat = osOK;
 80038c8:	4620      	mov	r0, r4
      stat = osError;
    }
  }

  return (stat);
}
 80038ca:	bd10      	pop	{r4, pc}
    stat = osErrorISR;
 80038cc:	f06f 0005 	mvn.w	r0, #5
 80038d0:	4770      	bx	lr
      stat = osError;
 80038d2:	f04f 30ff 	mov.w	r0, #4294967295
}
 80038d6:	4770      	bx	lr
 80038d8:	20005c90 	.word	0x20005c90
 80038dc:	e000ed00 	.word	0xe000ed00

080038e0 <osKernelGetTickCount>:
  }

  return (lock);
}

uint32_t osKernelGetTickCount (void) {
 80038e0:	b508      	push	{r3, lr}
 80038e2:	f3ef 8305 	mrs	r3, IPSR
  TickType_t ticks;

  if (IS_IRQ()) {
 80038e6:	b113      	cbz	r3, 80038ee <osKernelGetTickCount+0xe>
    ticks = xTaskGetTickCountFromISR();
 80038e8:	f001 fb46 	bl	8004f78 <xTaskGetTickCountFromISR>
  } else {
    ticks = xTaskGetTickCount();
  }

  return (ticks);
}
 80038ec:	bd08      	pop	{r3, pc}
    ticks = xTaskGetTickCount();
 80038ee:	f001 fb3d 	bl	8004f6c <xTaskGetTickCount>
  return (ticks);
 80038f2:	e7fb      	b.n	80038ec <osKernelGetTickCount+0xc>

080038f4 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 80038f4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80038f6:	b087      	sub	sp, #28
 80038f8:	4614      	mov	r4, r2
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 80038fa:	2200      	movs	r2, #0
 80038fc:	9205      	str	r2, [sp, #20]
 80038fe:	f3ef 8205 	mrs	r2, IPSR

  if (!IS_IRQ() && (func != NULL)) {
 8003902:	2a00      	cmp	r2, #0
 8003904:	d13d      	bne.n	8003982 <osThreadNew+0x8e>
 8003906:	2800      	cmp	r0, #0
 8003908:	d03b      	beq.n	8003982 <osThreadNew+0x8e>
    prio  = (UBaseType_t)osPriorityNormal;

    name = NULL;
    mem  = -1;

    if (attr != NULL) {
 800390a:	b35c      	cbz	r4, 8003964 <osThreadNew+0x70>
      if (attr->name != NULL) {
        name = attr->name;
      }
      if (attr->priority != osPriorityNone) {
 800390c:	69a3      	ldr	r3, [r4, #24]
 800390e:	b12b      	cbz	r3, 800391c <osThreadNew+0x28>
        prio = (UBaseType_t)attr->priority;
 8003910:	461d      	mov	r5, r3
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8003912:	3b01      	subs	r3, #1
 8003914:	2b37      	cmp	r3, #55	; 0x37
 8003916:	d902      	bls.n	800391e <osThreadNew+0x2a>
        return (NULL);
 8003918:	2000      	movs	r0, #0
 800391a:	e033      	b.n	8003984 <osThreadNew+0x90>
 800391c:	2518      	movs	r5, #24
      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800391e:	6863      	ldr	r3, [r4, #4]
 8003920:	f013 0f01 	tst.w	r3, #1
 8003924:	d130      	bne.n	8003988 <osThreadNew+0x94>
      }

      if (attr->stack_size > 0U) {
 8003926:	6963      	ldr	r3, [r4, #20]
 8003928:	b19b      	cbz	r3, 8003952 <osThreadNew+0x5e>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800392a:	089a      	lsrs	r2, r3, #2
      if (attr->name != NULL) {
 800392c:	f8d4 c000 	ldr.w	ip, [r4]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8003930:	68a6      	ldr	r6, [r4, #8]
 8003932:	b18e      	cbz	r6, 8003958 <osThreadNew+0x64>
 8003934:	68e7      	ldr	r7, [r4, #12]
 8003936:	2fbb      	cmp	r7, #187	; 0xbb
 8003938:	d923      	bls.n	8003982 <osThreadNew+0x8e>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800393a:	6924      	ldr	r4, [r4, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800393c:	b30c      	cbz	r4, 8003982 <osThreadNew+0x8e>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800393e:	b303      	cbz	r3, 8003982 <osThreadNew+0x8e>
      mem = 0;
    }

    if (mem == 1) {
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8003940:	9602      	str	r6, [sp, #8]
 8003942:	9401      	str	r4, [sp, #4]
 8003944:	9500      	str	r5, [sp, #0]
 8003946:	460b      	mov	r3, r1
 8003948:	4661      	mov	r1, ip
 800394a:	f001 fa4b 	bl	8004de4 <xTaskCreateStatic>
 800394e:	9005      	str	r0, [sp, #20]
 8003950:	e017      	b.n	8003982 <osThreadNew+0x8e>
    stack = configMINIMAL_STACK_SIZE;
 8003952:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003956:	e7e9      	b.n	800392c <osThreadNew+0x38>
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8003958:	68e3      	ldr	r3, [r4, #12]
 800395a:	b993      	cbnz	r3, 8003982 <osThreadNew+0x8e>
                                                                                      (StaticTask_t *)attr->cb_mem);
      #endif
    }
    else {
      if (mem == 0) {
 800395c:	6923      	ldr	r3, [r4, #16]
 800395e:	4664      	mov	r4, ip
 8003960:	b97b      	cbnz	r3, 8003982 <osThreadNew+0x8e>
 8003962:	e002      	b.n	800396a <osThreadNew+0x76>
    prio  = (UBaseType_t)osPriorityNormal;
 8003964:	2518      	movs	r5, #24
    stack = configMINIMAL_STACK_SIZE;
 8003966:	f44f 7200 	mov.w	r2, #512	; 0x200
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800396a:	ab05      	add	r3, sp, #20
 800396c:	9301      	str	r3, [sp, #4]
 800396e:	9500      	str	r5, [sp, #0]
 8003970:	460b      	mov	r3, r1
 8003972:	b292      	uxth	r2, r2
 8003974:	4621      	mov	r1, r4
 8003976:	f001 fa70 	bl	8004e5a <xTaskCreate>
 800397a:	2801      	cmp	r0, #1
            hTask = NULL;
 800397c:	bf1c      	itt	ne
 800397e:	2300      	movne	r3, #0
 8003980:	9305      	strne	r3, [sp, #20]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8003982:	9805      	ldr	r0, [sp, #20]
}
 8003984:	b007      	add	sp, #28
 8003986:	bdf0      	pop	{r4, r5, r6, r7, pc}
        return (NULL);
 8003988:	2000      	movs	r0, #0
 800398a:	e7fb      	b.n	8003984 <osThreadNew+0x90>

0800398c <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 800398c:	b508      	push	{r3, lr}
 800398e:	f3ef 8305 	mrs	r3, IPSR
  osStatus_t stat;

  if (IS_IRQ()) {
 8003992:	b933      	cbnz	r3, 80039a2 <osDelay+0x16>
    stat = osErrorISR;
  }
  else {
    stat = osOK;

    if (ticks != 0U) {
 8003994:	b908      	cbnz	r0, 800399a <osDelay+0xe>
    stat = osOK;
 8003996:	2000      	movs	r0, #0
      vTaskDelay(ticks);
    }
  }

  return (stat);
}
 8003998:	bd08      	pop	{r3, pc}
      vTaskDelay(ticks);
 800399a:	f001 fc11 	bl	80051c0 <vTaskDelay>
    stat = osOK;
 800399e:	2000      	movs	r0, #0
 80039a0:	e7fa      	b.n	8003998 <osDelay+0xc>
    stat = osErrorISR;
 80039a2:	f06f 0005 	mvn.w	r0, #5
 80039a6:	e7f7      	b.n	8003998 <osDelay+0xc>

080039a8 <osMutexNew>:
}

/*---------------------------------------------------------------------------*/
#if (configUSE_OS2_MUTEX == 1)

osMutexId_t osMutexNew (const osMutexAttr_t *attr) {
 80039a8:	b570      	push	{r4, r5, r6, lr}
 80039aa:	f3ef 8605 	mrs	r6, IPSR
  const char *name;
  #endif

  hMutex = NULL;

  if (!IS_IRQ()) {
 80039ae:	2e00      	cmp	r6, #0
 80039b0:	d135      	bne.n	8003a1e <osMutexNew+0x76>
 80039b2:	4604      	mov	r4, r0
    if (attr != NULL) {
 80039b4:	b370      	cbz	r0, 8003a14 <osMutexNew+0x6c>
      type = attr->attr_bits;
 80039b6:	6843      	ldr	r3, [r0, #4]
      rmtx = 1U;
    } else {
      rmtx = 0U;
    }

    if ((type & osMutexRobust) != osMutexRobust) {
 80039b8:	f013 0f08 	tst.w	r3, #8
 80039bc:	d132      	bne.n	8003a24 <osMutexNew+0x7c>
    if ((type & osMutexRecursive) == osMutexRecursive) {
 80039be:	f003 0301 	and.w	r3, r3, #1
      rmtx = 1U;
 80039c2:	461e      	mov	r6, r3
      mem = -1;

      if (attr != NULL) {
        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 80039c4:	6881      	ldr	r1, [r0, #8]
 80039c6:	b121      	cbz	r1, 80039d2 <osMutexNew+0x2a>
 80039c8:	68c2      	ldr	r2, [r0, #12]
 80039ca:	2a4f      	cmp	r2, #79	; 0x4f
 80039cc:	d80d      	bhi.n	80039ea <osMutexNew+0x42>
  hMutex = NULL;
 80039ce:	2500      	movs	r5, #0
 80039d0:	e026      	b.n	8003a20 <osMutexNew+0x78>
            hMutex = xSemaphoreCreateMutexStatic (attr->cb_mem);
          }
        #endif
      }
      else {
        if (mem == 0) {
 80039d2:	68c2      	ldr	r2, [r0, #12]
 80039d4:	2a00      	cmp	r2, #0
 80039d6:	d1fa      	bne.n	80039ce <osMutexNew+0x26>
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            if (rmtx != 0U) {
 80039d8:	b1e3      	cbz	r3, 8003a14 <osMutexNew+0x6c>
              #if (configUSE_RECURSIVE_MUTEXES == 1)
              hMutex = xSemaphoreCreateRecursiveMutex ();
 80039da:	2004      	movs	r0, #4
 80039dc:	f000 fcfa 	bl	80043d4 <xQueueCreateMutex>
 80039e0:	4605      	mov	r5, r0
          #endif
        }
      }

      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hMutex != NULL) {
 80039e2:	2d00      	cmp	r5, #0
 80039e4:	d0f3      	beq.n	80039ce <osMutexNew+0x26>
        if (attr != NULL) {
 80039e6:	b93c      	cbnz	r4, 80039f8 <osMutexNew+0x50>
 80039e8:	e007      	b.n	80039fa <osMutexNew+0x52>
          if (rmtx != 0U) {
 80039ea:	b173      	cbz	r3, 8003a0a <osMutexNew+0x62>
            hMutex = xSemaphoreCreateRecursiveMutexStatic (attr->cb_mem);
 80039ec:	2004      	movs	r0, #4
 80039ee:	f000 fcfc 	bl	80043ea <xQueueCreateMutexStatic>
 80039f2:	4605      	mov	r5, r0
      if (hMutex != NULL) {
 80039f4:	2d00      	cmp	r5, #0
 80039f6:	d0ea      	beq.n	80039ce <osMutexNew+0x26>
          name = attr->name;
 80039f8:	6824      	ldr	r4, [r4, #0]
        } else {
          name = NULL;
        }
        vQueueAddToRegistry (hMutex, name);
 80039fa:	4621      	mov	r1, r4
 80039fc:	4628      	mov	r0, r5
 80039fe:	f000 fffb 	bl	80049f8 <vQueueAddToRegistry>
      }
      #endif

      if ((hMutex != NULL) && (rmtx != 0U)) {
 8003a02:	b16e      	cbz	r6, 8003a20 <osMutexNew+0x78>
        hMutex = (SemaphoreHandle_t)((uint32_t)hMutex | 1U);
 8003a04:	f045 0501 	orr.w	r5, r5, #1
 8003a08:	e00a      	b.n	8003a20 <osMutexNew+0x78>
            hMutex = xSemaphoreCreateMutexStatic (attr->cb_mem);
 8003a0a:	2001      	movs	r0, #1
 8003a0c:	f000 fced 	bl	80043ea <xQueueCreateMutexStatic>
 8003a10:	4605      	mov	r5, r0
 8003a12:	e7ef      	b.n	80039f4 <osMutexNew+0x4c>
              hMutex = xSemaphoreCreateMutex ();
 8003a14:	2001      	movs	r0, #1
 8003a16:	f000 fcdd 	bl	80043d4 <xQueueCreateMutex>
 8003a1a:	4605      	mov	r5, r0
 8003a1c:	e7e1      	b.n	80039e2 <osMutexNew+0x3a>
  hMutex = NULL;
 8003a1e:	2500      	movs	r5, #0
      }
    }
  }

  return ((osMutexId_t)hMutex);
}
 8003a20:	4628      	mov	r0, r5
 8003a22:	bd70      	pop	{r4, r5, r6, pc}
  hMutex = NULL;
 8003a24:	2500      	movs	r5, #0
  return ((osMutexId_t)hMutex);
 8003a26:	e7fb      	b.n	8003a20 <osMutexNew+0x78>

08003a28 <osMutexAcquire>:
 8003a28:	f3ef 8205 	mrs	r2, IPSR

  rmtx = (uint32_t)mutex_id & 1U;

  stat = osOK;

  if (IS_IRQ()) {
 8003a2c:	b9f2      	cbnz	r2, 8003a6c <osMutexAcquire+0x44>
osStatus_t osMutexAcquire (osMutexId_t mutex_id, uint32_t timeout) {
 8003a2e:	b510      	push	{r4, lr}
 8003a30:	4603      	mov	r3, r0
 8003a32:	460c      	mov	r4, r1
 8003a34:	f020 0001 	bic.w	r0, r0, #1
 8003a38:	f003 0301 	and.w	r3, r3, #1
    stat = osErrorISR;
  }
  else if (hMutex == NULL) {
 8003a3c:	b1c8      	cbz	r0, 8003a72 <osMutexAcquire+0x4a>
    stat = osErrorParameter;
  }
  else {
    if (rmtx != 0U) {
 8003a3e:	b153      	cbz	r3, 8003a56 <osMutexAcquire+0x2e>
      #if (configUSE_RECURSIVE_MUTEXES == 1)
      if (xSemaphoreTakeRecursive (hMutex, timeout) != pdPASS) {
 8003a40:	f000 ff47 	bl	80048d2 <xQueueTakeMutexRecursive>
 8003a44:	2801      	cmp	r0, #1
 8003a46:	d017      	beq.n	8003a78 <osMutexAcquire+0x50>
        if (timeout != 0U) {
          stat = osErrorTimeout;
        } else {
          stat = osErrorResource;
 8003a48:	2c00      	cmp	r4, #0
 8003a4a:	bf14      	ite	ne
 8003a4c:	f06f 0001 	mvnne.w	r0, #1
 8003a50:	f06f 0002 	mvneq.w	r0, #2
      }
    }
  }

  return (stat);
}
 8003a54:	bd10      	pop	{r4, pc}
      if (xSemaphoreTake (hMutex, timeout) != pdPASS) {
 8003a56:	f000 fe69 	bl	800472c <xQueueSemaphoreTake>
 8003a5a:	2801      	cmp	r0, #1
 8003a5c:	d00e      	beq.n	8003a7c <osMutexAcquire+0x54>
          stat = osErrorResource;
 8003a5e:	2c00      	cmp	r4, #0
 8003a60:	bf14      	ite	ne
 8003a62:	f06f 0001 	mvnne.w	r0, #1
 8003a66:	f06f 0002 	mvneq.w	r0, #2
 8003a6a:	e7f3      	b.n	8003a54 <osMutexAcquire+0x2c>
    stat = osErrorISR;
 8003a6c:	f06f 0005 	mvn.w	r0, #5
}
 8003a70:	4770      	bx	lr
    stat = osErrorParameter;
 8003a72:	f06f 0003 	mvn.w	r0, #3
 8003a76:	e7ed      	b.n	8003a54 <osMutexAcquire+0x2c>
  stat = osOK;
 8003a78:	2000      	movs	r0, #0
 8003a7a:	e7eb      	b.n	8003a54 <osMutexAcquire+0x2c>
 8003a7c:	2000      	movs	r0, #0
 8003a7e:	e7e9      	b.n	8003a54 <osMutexAcquire+0x2c>

08003a80 <osMutexRelease>:
 8003a80:	f3ef 8205 	mrs	r2, IPSR

  rmtx = (uint32_t)mutex_id & 1U;

  stat = osOK;

  if (IS_IRQ()) {
 8003a84:	b9d2      	cbnz	r2, 8003abc <osMutexRelease+0x3c>
osStatus_t osMutexRelease (osMutexId_t mutex_id) {
 8003a86:	b508      	push	{r3, lr}
 8003a88:	4603      	mov	r3, r0
 8003a8a:	f020 0001 	bic.w	r0, r0, #1
 8003a8e:	f003 0301 	and.w	r3, r3, #1
    stat = osErrorISR;
  }
  else if (hMutex == NULL) {
 8003a92:	b1b0      	cbz	r0, 8003ac2 <osMutexRelease+0x42>
    stat = osErrorParameter;
  }
  else {
    if (rmtx != 0U) {
 8003a94:	b13b      	cbz	r3, 8003aa6 <osMutexRelease+0x26>
      #if (configUSE_RECURSIVE_MUTEXES == 1)
      if (xSemaphoreGiveRecursive (hMutex) != pdPASS) {
 8003a96:	f000 fcb7 	bl	8004408 <xQueueGiveMutexRecursive>
        stat = osErrorResource;
 8003a9a:	2801      	cmp	r0, #1
 8003a9c:	bf0c      	ite	eq
 8003a9e:	2000      	moveq	r0, #0
 8003aa0:	f06f 0002 	mvnne.w	r0, #2
      }
    }
  }

  return (stat);
}
 8003aa4:	bd08      	pop	{r3, pc}
      if (xSemaphoreGive (hMutex) != pdPASS) {
 8003aa6:	2300      	movs	r3, #0
 8003aa8:	461a      	mov	r2, r3
 8003aaa:	4619      	mov	r1, r3
 8003aac:	f000 fbba 	bl	8004224 <xQueueGenericSend>
        stat = osErrorResource;
 8003ab0:	2801      	cmp	r0, #1
 8003ab2:	bf0c      	ite	eq
 8003ab4:	2000      	moveq	r0, #0
 8003ab6:	f06f 0002 	mvnne.w	r0, #2
 8003aba:	e7f3      	b.n	8003aa4 <osMutexRelease+0x24>
    stat = osErrorISR;
 8003abc:	f06f 0005 	mvn.w	r0, #5
}
 8003ac0:	4770      	bx	lr
    stat = osErrorParameter;
 8003ac2:	f06f 0003 	mvn.w	r0, #3
 8003ac6:	e7ed      	b.n	8003aa4 <osMutexRelease+0x24>

08003ac8 <osSemaphoreNew>:
}
#endif /* (configUSE_OS2_MUTEX == 1) */

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 8003ac8:	b570      	push	{r4, r5, r6, lr}
 8003aca:	b082      	sub	sp, #8
 8003acc:	f3ef 8305 	mrs	r3, IPSR
  const char *name;
  #endif

  hSemaphore = NULL;

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 8003ad0:	2b00      	cmp	r3, #0
 8003ad2:	d138      	bne.n	8003b46 <osSemaphoreNew+0x7e>
 8003ad4:	460e      	mov	r6, r1
 8003ad6:	4614      	mov	r4, r2
 8003ad8:	2800      	cmp	r0, #0
 8003ada:	d038      	beq.n	8003b4e <osSemaphoreNew+0x86>
 8003adc:	4288      	cmp	r0, r1
 8003ade:	d338      	bcc.n	8003b52 <osSemaphoreNew+0x8a>
    mem = -1;

    if (attr != NULL) {
 8003ae0:	2a00      	cmp	r2, #0
 8003ae2:	d041      	beq.n	8003b68 <osSemaphoreNew+0xa0>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 8003ae4:	6895      	ldr	r5, [r2, #8]
 8003ae6:	b125      	cbz	r5, 8003af2 <osSemaphoreNew+0x2a>
 8003ae8:	68d3      	ldr	r3, [r2, #12]
 8003aea:	2b4f      	cmp	r3, #79	; 0x4f
 8003aec:	d833      	bhi.n	8003b56 <osSemaphoreNew+0x8e>
  hSemaphore = NULL;
 8003aee:	2500      	movs	r5, #0
 8003af0:	e02a      	b.n	8003b48 <osSemaphoreNew+0x80>
        mem = 1;
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8003af2:	68d3      	ldr	r3, [r2, #12]
 8003af4:	bb43      	cbnz	r3, 8003b48 <osSemaphoreNew+0x80>
    else {
      mem = 0;
    }

    if (mem != -1) {
      if (max_count == 1U) {
 8003af6:	2801      	cmp	r0, #1
 8003af8:	d13e      	bne.n	8003b78 <osSemaphoreNew+0xb0>
            hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinary();
 8003afa:	2203      	movs	r2, #3
 8003afc:	2100      	movs	r1, #0
 8003afe:	2001      	movs	r0, #1
 8003b00:	f000 fb27 	bl	8004152 <xQueueGenericCreate>
 8003b04:	4605      	mov	r5, r0
          #endif
        }

        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 8003b06:	b1fd      	cbz	r5, 8003b48 <osSemaphoreNew+0x80>
 8003b08:	b986      	cbnz	r6, 8003b2c <osSemaphoreNew+0x64>
        }
      }
      
      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hSemaphore != NULL) {
        if (attr != NULL) {
 8003b0a:	b104      	cbz	r4, 8003b0e <osSemaphoreNew+0x46>
          name = attr->name;
 8003b0c:	6824      	ldr	r4, [r4, #0]
        } else {
          name = NULL;
        }
        vQueueAddToRegistry (hSemaphore, name);
 8003b0e:	4621      	mov	r1, r4
 8003b10:	4628      	mov	r0, r5
 8003b12:	f000 ff71 	bl	80049f8 <vQueueAddToRegistry>
 8003b16:	e017      	b.n	8003b48 <osSemaphoreNew+0x80>
            hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 8003b18:	2303      	movs	r3, #3
 8003b1a:	9300      	str	r3, [sp, #0]
 8003b1c:	462b      	mov	r3, r5
 8003b1e:	2200      	movs	r2, #0
 8003b20:	4611      	mov	r1, r2
 8003b22:	2001      	movs	r0, #1
 8003b24:	f000 fabd 	bl	80040a2 <xQueueGenericCreateStatic>
 8003b28:	4605      	mov	r5, r0
 8003b2a:	e7ec      	b.n	8003b06 <osSemaphoreNew+0x3e>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 8003b2c:	2300      	movs	r3, #0
 8003b2e:	461a      	mov	r2, r3
 8003b30:	4619      	mov	r1, r3
 8003b32:	4628      	mov	r0, r5
 8003b34:	f000 fb76 	bl	8004224 <xQueueGenericSend>
 8003b38:	2801      	cmp	r0, #1
 8003b3a:	d0e6      	beq.n	8003b0a <osSemaphoreNew+0x42>
            vSemaphoreDelete (hSemaphore);
 8003b3c:	4628      	mov	r0, r5
 8003b3e:	f000 ff87 	bl	8004a50 <vQueueDelete>
            hSemaphore = NULL;
 8003b42:	2500      	movs	r5, #0
 8003b44:	e000      	b.n	8003b48 <osSemaphoreNew+0x80>
  hSemaphore = NULL;
 8003b46:	2500      	movs	r5, #0
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
}
 8003b48:	4628      	mov	r0, r5
 8003b4a:	b002      	add	sp, #8
 8003b4c:	bd70      	pop	{r4, r5, r6, pc}
  hSemaphore = NULL;
 8003b4e:	2500      	movs	r5, #0
 8003b50:	e7fa      	b.n	8003b48 <osSemaphoreNew+0x80>
 8003b52:	2500      	movs	r5, #0
  return ((osSemaphoreId_t)hSemaphore);
 8003b54:	e7f8      	b.n	8003b48 <osSemaphoreNew+0x80>
      if (max_count == 1U) {
 8003b56:	2801      	cmp	r0, #1
 8003b58:	d0de      	beq.n	8003b18 <osSemaphoreNew+0x50>
            hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 8003b5a:	462a      	mov	r2, r5
 8003b5c:	f000 fb21 	bl	80041a2 <xQueueCreateCountingSemaphoreStatic>
      if (hSemaphore != NULL) {
 8003b60:	4605      	mov	r5, r0
 8003b62:	2800      	cmp	r0, #0
 8003b64:	d1d2      	bne.n	8003b0c <osSemaphoreNew+0x44>
 8003b66:	e7ef      	b.n	8003b48 <osSemaphoreNew+0x80>
      if (max_count == 1U) {
 8003b68:	2801      	cmp	r0, #1
 8003b6a:	d0c6      	beq.n	8003afa <osSemaphoreNew+0x32>
            hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 8003b6c:	f000 fb3c 	bl	80041e8 <xQueueCreateCountingSemaphore>
      if (hSemaphore != NULL) {
 8003b70:	4605      	mov	r5, r0
 8003b72:	2800      	cmp	r0, #0
 8003b74:	d0e8      	beq.n	8003b48 <osSemaphoreNew+0x80>
 8003b76:	e7ca      	b.n	8003b0e <osSemaphoreNew+0x46>
            hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 8003b78:	f000 fb36 	bl	80041e8 <xQueueCreateCountingSemaphore>
      if (hSemaphore != NULL) {
 8003b7c:	4605      	mov	r5, r0
 8003b7e:	2800      	cmp	r0, #0
 8003b80:	d1c4      	bne.n	8003b0c <osSemaphoreNew+0x44>
 8003b82:	e7e1      	b.n	8003b48 <osSemaphoreNew+0x80>

08003b84 <osSemaphoreAcquire>:
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;

  if (hSemaphore == NULL) {
 8003b84:	b338      	cbz	r0, 8003bd6 <osSemaphoreAcquire+0x52>
osStatus_t osSemaphoreAcquire (osSemaphoreId_t semaphore_id, uint32_t timeout) {
 8003b86:	b510      	push	{r4, lr}
 8003b88:	b082      	sub	sp, #8
 8003b8a:	460c      	mov	r4, r1
 8003b8c:	f3ef 8305 	mrs	r3, IPSR
    stat = osErrorParameter;
  }
  else if (IS_IRQ()) {
 8003b90:	b1b3      	cbz	r3, 8003bc0 <osSemaphoreAcquire+0x3c>
    if (timeout != 0U) {
 8003b92:	bb19      	cbnz	r1, 8003bdc <osSemaphoreAcquire+0x58>
      stat = osErrorParameter;
    }
    else {
      yield = pdFALSE;
 8003b94:	2100      	movs	r1, #0
 8003b96:	9101      	str	r1, [sp, #4]

      if (xSemaphoreTakeFromISR (hSemaphore, &yield) != pdPASS) {
 8003b98:	aa01      	add	r2, sp, #4
 8003b9a:	f000 feba 	bl	8004912 <xQueueReceiveFromISR>
 8003b9e:	2801      	cmp	r0, #1
 8003ba0:	d11f      	bne.n	8003be2 <osSemaphoreAcquire+0x5e>
        stat = osErrorResource;
      } else {
        portYIELD_FROM_ISR (yield);
 8003ba2:	9801      	ldr	r0, [sp, #4]
 8003ba4:	b150      	cbz	r0, 8003bbc <osSemaphoreAcquire+0x38>
 8003ba6:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8003baa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003bae:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 8003bb2:	f3bf 8f4f 	dsb	sy
 8003bb6:	f3bf 8f6f 	isb	sy
  stat = osOK;
 8003bba:	2000      	movs	r0, #0
      }
    }
  }

  return (stat);
}
 8003bbc:	b002      	add	sp, #8
 8003bbe:	bd10      	pop	{r4, pc}
    if (xSemaphoreTake (hSemaphore, (TickType_t)timeout) != pdPASS) {
 8003bc0:	f000 fdb4 	bl	800472c <xQueueSemaphoreTake>
 8003bc4:	2801      	cmp	r0, #1
 8003bc6:	d00f      	beq.n	8003be8 <osSemaphoreAcquire+0x64>
        stat = osErrorResource;
 8003bc8:	2c00      	cmp	r4, #0
 8003bca:	bf14      	ite	ne
 8003bcc:	f06f 0001 	mvnne.w	r0, #1
 8003bd0:	f06f 0002 	mvneq.w	r0, #2
 8003bd4:	e7f2      	b.n	8003bbc <osSemaphoreAcquire+0x38>
    stat = osErrorParameter;
 8003bd6:	f06f 0003 	mvn.w	r0, #3
}
 8003bda:	4770      	bx	lr
      stat = osErrorParameter;
 8003bdc:	f06f 0003 	mvn.w	r0, #3
 8003be0:	e7ec      	b.n	8003bbc <osSemaphoreAcquire+0x38>
        stat = osErrorResource;
 8003be2:	f06f 0002 	mvn.w	r0, #2
 8003be6:	e7e9      	b.n	8003bbc <osSemaphoreAcquire+0x38>
  stat = osOK;
 8003be8:	2000      	movs	r0, #0
 8003bea:	e7e7      	b.n	8003bbc <osSemaphoreAcquire+0x38>

08003bec <osSemaphoreRelease>:
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;

  if (hSemaphore == NULL) {
 8003bec:	b330      	cbz	r0, 8003c3c <osSemaphoreRelease+0x50>
osStatus_t osSemaphoreRelease (osSemaphoreId_t semaphore_id) {
 8003bee:	b500      	push	{lr}
 8003bf0:	b083      	sub	sp, #12
 8003bf2:	f3ef 8305 	mrs	r3, IPSR
    stat = osErrorParameter;
  }
  else if (IS_IRQ()) {
 8003bf6:	b1a3      	cbz	r3, 8003c22 <osSemaphoreRelease+0x36>
    yield = pdFALSE;
 8003bf8:	2300      	movs	r3, #0
 8003bfa:	9301      	str	r3, [sp, #4]

    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 8003bfc:	a901      	add	r1, sp, #4
 8003bfe:	f000 fc8a 	bl	8004516 <xQueueGiveFromISR>
 8003c02:	2801      	cmp	r0, #1
 8003c04:	d11d      	bne.n	8003c42 <osSemaphoreRelease+0x56>
      stat = osErrorResource;
    } else {
      portYIELD_FROM_ISR (yield);
 8003c06:	9801      	ldr	r0, [sp, #4]
 8003c08:	b1a8      	cbz	r0, 8003c36 <osSemaphoreRelease+0x4a>
 8003c0a:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8003c0e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003c12:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 8003c16:	f3bf 8f4f 	dsb	sy
 8003c1a:	f3bf 8f6f 	isb	sy
  stat = osOK;
 8003c1e:	2000      	movs	r0, #0
 8003c20:	e009      	b.n	8003c36 <osSemaphoreRelease+0x4a>
    }
  }
  else {
    if (xSemaphoreGive (hSemaphore) != pdPASS) {
 8003c22:	2300      	movs	r3, #0
 8003c24:	461a      	mov	r2, r3
 8003c26:	4619      	mov	r1, r3
 8003c28:	f000 fafc 	bl	8004224 <xQueueGenericSend>
      stat = osErrorResource;
 8003c2c:	2801      	cmp	r0, #1
 8003c2e:	bf0c      	ite	eq
 8003c30:	2000      	moveq	r0, #0
 8003c32:	f06f 0002 	mvnne.w	r0, #2
    }
  }

  return (stat);
}
 8003c36:	b003      	add	sp, #12
 8003c38:	f85d fb04 	ldr.w	pc, [sp], #4
    stat = osErrorParameter;
 8003c3c:	f06f 0003 	mvn.w	r0, #3
}
 8003c40:	4770      	bx	lr
      stat = osErrorResource;
 8003c42:	f06f 0002 	mvn.w	r0, #2
 8003c46:	e7f6      	b.n	8003c36 <osSemaphoreRelease+0x4a>

08003c48 <osSemaphoreDelete>:
 8003c48:	f3ef 8305 	mrs	r3, IPSR
osStatus_t osSemaphoreDelete (osSemaphoreId_t semaphore_id) {
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
  osStatus_t stat;

#ifndef USE_FreeRTOS_HEAP_1
  if (IS_IRQ()) {
 8003c4c:	b94b      	cbnz	r3, 8003c62 <osSemaphoreDelete+0x1a>
osStatus_t osSemaphoreDelete (osSemaphoreId_t semaphore_id) {
 8003c4e:	b510      	push	{r4, lr}
 8003c50:	4604      	mov	r4, r0
    stat = osErrorISR;
  }
  else if (hSemaphore == NULL) {
 8003c52:	b148      	cbz	r0, 8003c68 <osSemaphoreDelete+0x20>
    stat = osErrorParameter;
  }
  else {
    #if (configQUEUE_REGISTRY_SIZE > 0)
    vQueueUnregisterQueue (hSemaphore);
 8003c54:	f000 fee6 	bl	8004a24 <vQueueUnregisterQueue>
    #endif

    stat = osOK;
    vSemaphoreDelete (hSemaphore);
 8003c58:	4620      	mov	r0, r4
 8003c5a:	f000 fef9 	bl	8004a50 <vQueueDelete>
    stat = osOK;
 8003c5e:	2000      	movs	r0, #0
#else
  stat = osError;
#endif

  return (stat);
}
 8003c60:	bd10      	pop	{r4, pc}
    stat = osErrorISR;
 8003c62:	f06f 0005 	mvn.w	r0, #5
}
 8003c66:	4770      	bx	lr
    stat = osErrorParameter;
 8003c68:	f06f 0003 	mvn.w	r0, #3
  return (stat);
 8003c6c:	e7f8      	b.n	8003c60 <osSemaphoreDelete+0x18>

08003c6e <osMessageQueueNew>:

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 8003c6e:	b570      	push	{r4, r5, r6, lr}
 8003c70:	b082      	sub	sp, #8
 8003c72:	f3ef 8305 	mrs	r3, IPSR
  const char *name;
  #endif

  hQueue = NULL;

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 8003c76:	bb6b      	cbnz	r3, 8003cd4 <osMessageQueueNew+0x66>
 8003c78:	4614      	mov	r4, r2
 8003c7a:	b378      	cbz	r0, 8003cdc <osMessageQueueNew+0x6e>
 8003c7c:	b381      	cbz	r1, 8003ce0 <osMessageQueueNew+0x72>
    mem = -1;

    if (attr != NULL) {
 8003c7e:	2a00      	cmp	r2, #0
 8003c80:	d034      	beq.n	8003cec <osMessageQueueNew+0x7e>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8003c82:	6895      	ldr	r5, [r2, #8]
 8003c84:	b15d      	cbz	r5, 8003c9e <osMessageQueueNew+0x30>
 8003c86:	68d3      	ldr	r3, [r2, #12]
 8003c88:	2b4f      	cmp	r3, #79	; 0x4f
 8003c8a:	d92b      	bls.n	8003ce4 <osMessageQueueNew+0x76>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8003c8c:	6912      	ldr	r2, [r2, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8003c8e:	b35a      	cbz	r2, 8003ce8 <osMessageQueueNew+0x7a>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8003c90:	fb01 f300 	mul.w	r3, r1, r0
 8003c94:	6966      	ldr	r6, [r4, #20]
 8003c96:	429e      	cmp	r6, r3
 8003c98:	d213      	bcs.n	8003cc2 <osMessageQueueNew+0x54>
  hQueue = NULL;
 8003c9a:	2500      	movs	r5, #0
 8003c9c:	e01b      	b.n	8003cd6 <osMessageQueueNew+0x68>
        mem = 1;
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8003c9e:	68d3      	ldr	r3, [r2, #12]
 8003ca0:	b9cb      	cbnz	r3, 8003cd6 <osMessageQueueNew+0x68>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8003ca2:	6912      	ldr	r2, [r2, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8003ca4:	b9ba      	cbnz	r2, 8003cd6 <osMessageQueueNew+0x68>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
      #endif
    }
    else {
      if (mem == 0) {
 8003ca6:	6963      	ldr	r3, [r4, #20]
  hQueue = NULL;
 8003ca8:	4615      	mov	r5, r2
      if (mem == 0) {
 8003caa:	b9a3      	cbnz	r3, 8003cd6 <osMessageQueueNew+0x68>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hQueue = xQueueCreate (msg_count, msg_size);
 8003cac:	2200      	movs	r2, #0
 8003cae:	f000 fa50 	bl	8004152 <xQueueGenericCreate>
        #endif
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 8003cb2:	4605      	mov	r5, r0
 8003cb4:	b178      	cbz	r0, 8003cd6 <osMessageQueueNew+0x68>
      if (attr != NULL) {
        name = attr->name;
 8003cb6:	6824      	ldr	r4, [r4, #0]
      } else {
        name = NULL;
      }
      vQueueAddToRegistry (hQueue, name);
 8003cb8:	4621      	mov	r1, r4
 8003cba:	4628      	mov	r0, r5
 8003cbc:	f000 fe9c 	bl	80049f8 <vQueueAddToRegistry>
 8003cc0:	e009      	b.n	8003cd6 <osMessageQueueNew+0x68>
        hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 8003cc2:	2300      	movs	r3, #0
 8003cc4:	9300      	str	r3, [sp, #0]
 8003cc6:	462b      	mov	r3, r5
 8003cc8:	f000 f9eb 	bl	80040a2 <xQueueGenericCreateStatic>
    if (hQueue != NULL) {
 8003ccc:	4605      	mov	r5, r0
 8003cce:	2800      	cmp	r0, #0
 8003cd0:	d1f1      	bne.n	8003cb6 <osMessageQueueNew+0x48>
 8003cd2:	e000      	b.n	8003cd6 <osMessageQueueNew+0x68>
  hQueue = NULL;
 8003cd4:	2500      	movs	r5, #0
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
}
 8003cd6:	4628      	mov	r0, r5
 8003cd8:	b002      	add	sp, #8
 8003cda:	bd70      	pop	{r4, r5, r6, pc}
  hQueue = NULL;
 8003cdc:	2500      	movs	r5, #0
 8003cde:	e7fa      	b.n	8003cd6 <osMessageQueueNew+0x68>
 8003ce0:	2500      	movs	r5, #0
 8003ce2:	e7f8      	b.n	8003cd6 <osMessageQueueNew+0x68>
 8003ce4:	2500      	movs	r5, #0
 8003ce6:	e7f6      	b.n	8003cd6 <osMessageQueueNew+0x68>
 8003ce8:	4615      	mov	r5, r2
  return ((osMessageQueueId_t)hQueue);
 8003cea:	e7f4      	b.n	8003cd6 <osMessageQueueNew+0x68>
          hQueue = xQueueCreate (msg_count, msg_size);
 8003cec:	2200      	movs	r2, #0
 8003cee:	f000 fa30 	bl	8004152 <xQueueGenericCreate>
    if (hQueue != NULL) {
 8003cf2:	4605      	mov	r5, r0
 8003cf4:	2800      	cmp	r0, #0
 8003cf6:	d0ee      	beq.n	8003cd6 <osMessageQueueNew+0x68>
 8003cf8:	e7de      	b.n	8003cb8 <osMessageQueueNew+0x4a>

08003cfa <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 8003cfa:	b510      	push	{r4, lr}
 8003cfc:	b082      	sub	sp, #8
 8003cfe:	461c      	mov	r4, r3
 8003d00:	f3ef 8305 	mrs	r3, IPSR

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;

  if (IS_IRQ()) {
 8003d04:	b1bb      	cbz	r3, 8003d36 <osMessageQueuePut+0x3c>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8003d06:	b330      	cbz	r0, 8003d56 <osMessageQueuePut+0x5c>
 8003d08:	b341      	cbz	r1, 8003d5c <osMessageQueuePut+0x62>
 8003d0a:	bb54      	cbnz	r4, 8003d62 <osMessageQueuePut+0x68>
      stat = osErrorParameter;
    }
    else {
      yield = pdFALSE;
 8003d0c:	2300      	movs	r3, #0
 8003d0e:	9301      	str	r3, [sp, #4]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 8003d10:	aa01      	add	r2, sp, #4
 8003d12:	f000 fb99 	bl	8004448 <xQueueGenericSendFromISR>
 8003d16:	2801      	cmp	r0, #1
 8003d18:	d126      	bne.n	8003d68 <osMessageQueuePut+0x6e>
        stat = osErrorResource;
      } else {
        portYIELD_FROM_ISR (yield);
 8003d1a:	9801      	ldr	r0, [sp, #4]
 8003d1c:	b1c8      	cbz	r0, 8003d52 <osMessageQueuePut+0x58>
 8003d1e:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8003d22:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003d26:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 8003d2a:	f3bf 8f4f 	dsb	sy
 8003d2e:	f3bf 8f6f 	isb	sy
  stat = osOK;
 8003d32:	2000      	movs	r0, #0
 8003d34:	e00d      	b.n	8003d52 <osMessageQueuePut+0x58>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8003d36:	b1d0      	cbz	r0, 8003d6e <osMessageQueuePut+0x74>
 8003d38:	b1e1      	cbz	r1, 8003d74 <osMessageQueuePut+0x7a>
      stat = osErrorParameter;
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8003d3a:	2300      	movs	r3, #0
 8003d3c:	4622      	mov	r2, r4
 8003d3e:	f000 fa71 	bl	8004224 <xQueueGenericSend>
 8003d42:	2801      	cmp	r0, #1
 8003d44:	d019      	beq.n	8003d7a <osMessageQueuePut+0x80>
        if (timeout != 0U) {
          stat = osErrorTimeout;
        } else {
          stat = osErrorResource;
 8003d46:	2c00      	cmp	r4, #0
 8003d48:	bf14      	ite	ne
 8003d4a:	f06f 0001 	mvnne.w	r0, #1
 8003d4e:	f06f 0002 	mvneq.w	r0, #2
      }
    }
  }

  return (stat);
}
 8003d52:	b002      	add	sp, #8
 8003d54:	bd10      	pop	{r4, pc}
      stat = osErrorParameter;
 8003d56:	f06f 0003 	mvn.w	r0, #3
 8003d5a:	e7fa      	b.n	8003d52 <osMessageQueuePut+0x58>
 8003d5c:	f06f 0003 	mvn.w	r0, #3
 8003d60:	e7f7      	b.n	8003d52 <osMessageQueuePut+0x58>
 8003d62:	f06f 0003 	mvn.w	r0, #3
 8003d66:	e7f4      	b.n	8003d52 <osMessageQueuePut+0x58>
        stat = osErrorResource;
 8003d68:	f06f 0002 	mvn.w	r0, #2
 8003d6c:	e7f1      	b.n	8003d52 <osMessageQueuePut+0x58>
      stat = osErrorParameter;
 8003d6e:	f06f 0003 	mvn.w	r0, #3
 8003d72:	e7ee      	b.n	8003d52 <osMessageQueuePut+0x58>
 8003d74:	f06f 0003 	mvn.w	r0, #3
 8003d78:	e7eb      	b.n	8003d52 <osMessageQueuePut+0x58>
  stat = osOK;
 8003d7a:	2000      	movs	r0, #0
 8003d7c:	e7e9      	b.n	8003d52 <osMessageQueuePut+0x58>

08003d7e <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 8003d7e:	b510      	push	{r4, lr}
 8003d80:	b082      	sub	sp, #8
 8003d82:	461c      	mov	r4, r3
 8003d84:	f3ef 8305 	mrs	r3, IPSR

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;

  if (IS_IRQ()) {
 8003d88:	b1bb      	cbz	r3, 8003dba <osMessageQueueGet+0x3c>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8003d8a:	b328      	cbz	r0, 8003dd8 <osMessageQueueGet+0x5a>
 8003d8c:	b339      	cbz	r1, 8003dde <osMessageQueueGet+0x60>
 8003d8e:	bb4c      	cbnz	r4, 8003de4 <osMessageQueueGet+0x66>
      stat = osErrorParameter;
    }
    else {
      yield = pdFALSE;
 8003d90:	2300      	movs	r3, #0
 8003d92:	9301      	str	r3, [sp, #4]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 8003d94:	aa01      	add	r2, sp, #4
 8003d96:	f000 fdbc 	bl	8004912 <xQueueReceiveFromISR>
 8003d9a:	2801      	cmp	r0, #1
 8003d9c:	d125      	bne.n	8003dea <osMessageQueueGet+0x6c>
        stat = osErrorResource;
      } else {
        portYIELD_FROM_ISR (yield);
 8003d9e:	9801      	ldr	r0, [sp, #4]
 8003da0:	b1c0      	cbz	r0, 8003dd4 <osMessageQueueGet+0x56>
 8003da2:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8003da6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003daa:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 8003dae:	f3bf 8f4f 	dsb	sy
 8003db2:	f3bf 8f6f 	isb	sy
  stat = osOK;
 8003db6:	2000      	movs	r0, #0
 8003db8:	e00c      	b.n	8003dd4 <osMessageQueueGet+0x56>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8003dba:	b1c8      	cbz	r0, 8003df0 <osMessageQueueGet+0x72>
 8003dbc:	b1d9      	cbz	r1, 8003df6 <osMessageQueueGet+0x78>
      stat = osErrorParameter;
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8003dbe:	4622      	mov	r2, r4
 8003dc0:	f000 fc02 	bl	80045c8 <xQueueReceive>
 8003dc4:	2801      	cmp	r0, #1
 8003dc6:	d019      	beq.n	8003dfc <osMessageQueueGet+0x7e>
        if (timeout != 0U) {
          stat = osErrorTimeout;
        } else {
          stat = osErrorResource;
 8003dc8:	2c00      	cmp	r4, #0
 8003dca:	bf14      	ite	ne
 8003dcc:	f06f 0001 	mvnne.w	r0, #1
 8003dd0:	f06f 0002 	mvneq.w	r0, #2
      }
    }
  }

  return (stat);
}
 8003dd4:	b002      	add	sp, #8
 8003dd6:	bd10      	pop	{r4, pc}
      stat = osErrorParameter;
 8003dd8:	f06f 0003 	mvn.w	r0, #3
 8003ddc:	e7fa      	b.n	8003dd4 <osMessageQueueGet+0x56>
 8003dde:	f06f 0003 	mvn.w	r0, #3
 8003de2:	e7f7      	b.n	8003dd4 <osMessageQueueGet+0x56>
 8003de4:	f06f 0003 	mvn.w	r0, #3
 8003de8:	e7f4      	b.n	8003dd4 <osMessageQueueGet+0x56>
        stat = osErrorResource;
 8003dea:	f06f 0002 	mvn.w	r0, #2
 8003dee:	e7f1      	b.n	8003dd4 <osMessageQueueGet+0x56>
      stat = osErrorParameter;
 8003df0:	f06f 0003 	mvn.w	r0, #3
 8003df4:	e7ee      	b.n	8003dd4 <osMessageQueueGet+0x56>
 8003df6:	f06f 0003 	mvn.w	r0, #3
 8003dfa:	e7eb      	b.n	8003dd4 <osMessageQueueGet+0x56>
  stat = osOK;
 8003dfc:	2000      	movs	r0, #0
 8003dfe:	e7e9      	b.n	8003dd4 <osMessageQueueGet+0x56>

08003e00 <osMessageQueueGetCount>:

uint32_t osMessageQueueGetCount (osMessageQueueId_t mq_id) {
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
  UBaseType_t count;

  if (hQueue == NULL) {
 8003e00:	b148      	cbz	r0, 8003e16 <osMessageQueueGetCount+0x16>
uint32_t osMessageQueueGetCount (osMessageQueueId_t mq_id) {
 8003e02:	b508      	push	{r3, lr}
 8003e04:	f3ef 8205 	mrs	r2, IPSR
    count = 0U;
  }
  else if (IS_IRQ()) {
 8003e08:	b112      	cbz	r2, 8003e10 <osMessageQueueGetCount+0x10>
    count = uxQueueMessagesWaitingFromISR (hQueue);
 8003e0a:	f000 fde9 	bl	80049e0 <uxQueueMessagesWaitingFromISR>
  else {
    count = uxQueueMessagesWaiting (hQueue);
  }

  return ((uint32_t)count);
}
 8003e0e:	bd08      	pop	{r3, pc}
    count = uxQueueMessagesWaiting (hQueue);
 8003e10:	f000 fdd3 	bl	80049ba <uxQueueMessagesWaiting>
 8003e14:	e7fb      	b.n	8003e0e <osMessageQueueGetCount+0xe>
    count = 0U;
 8003e16:	2000      	movs	r0, #0
}
 8003e18:	4770      	bx	lr

08003e1a <osMessageQueueDelete>:
 8003e1a:	f3ef 8305 	mrs	r3, IPSR
osStatus_t osMessageQueueDelete (osMessageQueueId_t mq_id) {
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
  osStatus_t stat;

#ifndef USE_FreeRTOS_HEAP_1
  if (IS_IRQ()) {
 8003e1e:	b94b      	cbnz	r3, 8003e34 <osMessageQueueDelete+0x1a>
osStatus_t osMessageQueueDelete (osMessageQueueId_t mq_id) {
 8003e20:	b510      	push	{r4, lr}
 8003e22:	4604      	mov	r4, r0
    stat = osErrorISR;
  }
  else if (hQueue == NULL) {
 8003e24:	b148      	cbz	r0, 8003e3a <osMessageQueueDelete+0x20>
    stat = osErrorParameter;
  }
  else {
    #if (configQUEUE_REGISTRY_SIZE > 0)
    vQueueUnregisterQueue (hQueue);
 8003e26:	f000 fdfd 	bl	8004a24 <vQueueUnregisterQueue>
    #endif

    stat = osOK;
    vQueueDelete (hQueue);
 8003e2a:	4620      	mov	r0, r4
 8003e2c:	f000 fe10 	bl	8004a50 <vQueueDelete>
    stat = osOK;
 8003e30:	2000      	movs	r0, #0
#else
  stat = osError;
#endif

  return (stat);
}
 8003e32:	bd10      	pop	{r4, pc}
    stat = osErrorISR;
 8003e34:	f06f 0005 	mvn.w	r0, #5
}
 8003e38:	4770      	bx	lr
    stat = osErrorParameter;
 8003e3a:	f06f 0003 	mvn.w	r0, #3
  return (stat);
 8003e3e:	e7f8      	b.n	8003e32 <osMessageQueueDelete+0x18>

08003e40 <vApplicationGetIdleTaskMemory>:
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8003e40:	4b03      	ldr	r3, [pc, #12]	; (8003e50 <vApplicationGetIdleTaskMemory+0x10>)
 8003e42:	6003      	str	r3, [r0, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8003e44:	4b03      	ldr	r3, [pc, #12]	; (8003e54 <vApplicationGetIdleTaskMemory+0x14>)
 8003e46:	600b      	str	r3, [r1, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8003e48:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003e4c:	6013      	str	r3, [r2, #0]
}
 8003e4e:	4770      	bx	lr
 8003e50:	20005bd4 	.word	0x20005bd4
 8003e54:	200053d4 	.word	0x200053d4

08003e58 <vApplicationGetTimerTaskMemory>:
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8003e58:	4b03      	ldr	r3, [pc, #12]	; (8003e68 <vApplicationGetTimerTaskMemory+0x10>)
 8003e5a:	6003      	str	r3, [r0, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8003e5c:	4b03      	ldr	r3, [pc, #12]	; (8003e6c <vApplicationGetTimerTaskMemory+0x14>)
 8003e5e:	600b      	str	r3, [r1, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8003e60:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003e64:	6013      	str	r3, [r2, #0]
}
 8003e66:	4770      	bx	lr
 8003e68:	20006c94 	.word	0x20006c94
 8003e6c:	20005c94 	.word	0x20005c94

08003e70 <vListInitialise>:
void vListInitialise( List_t * const pxList )
{
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003e70:	f100 0308 	add.w	r3, r0, #8
 8003e74:	6043      	str	r3, [r0, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8003e76:	f04f 32ff 	mov.w	r2, #4294967295
 8003e7a:	6082      	str	r2, [r0, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003e7c:	60c3      	str	r3, [r0, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003e7e:	6103      	str	r3, [r0, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8003e80:	2300      	movs	r3, #0
 8003e82:	6003      	str	r3, [r0, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8003e84:	4770      	bx	lr

08003e86 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8003e86:	2300      	movs	r3, #0
 8003e88:	6103      	str	r3, [r0, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8003e8a:	4770      	bx	lr

08003e8c <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
ListItem_t * const pxIndex = pxList->pxIndex;
 8003e8c:	6843      	ldr	r3, [r0, #4]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8003e8e:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8003e90:	689a      	ldr	r2, [r3, #8]
 8003e92:	608a      	str	r2, [r1, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8003e94:	6051      	str	r1, [r2, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8003e96:	6099      	str	r1, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8003e98:	6108      	str	r0, [r1, #16]

	( pxList->uxNumberOfItems )++;
 8003e9a:	6803      	ldr	r3, [r0, #0]
 8003e9c:	3301      	adds	r3, #1
 8003e9e:	6003      	str	r3, [r0, #0]
}
 8003ea0:	4770      	bx	lr

08003ea2 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8003ea2:	b430      	push	{r4, r5}
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8003ea4:	680d      	ldr	r5, [r1, #0]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8003ea6:	f1b5 3fff 	cmp.w	r5, #4294967295
 8003eaa:	d011      	beq.n	8003ed0 <vListInsert+0x2e>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8003eac:	f100 0308 	add.w	r3, r0, #8
 8003eb0:	461c      	mov	r4, r3
 8003eb2:	685b      	ldr	r3, [r3, #4]
 8003eb4:	681a      	ldr	r2, [r3, #0]
 8003eb6:	42aa      	cmp	r2, r5
 8003eb8:	d9fa      	bls.n	8003eb0 <vListInsert+0xe>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8003eba:	6863      	ldr	r3, [r4, #4]
 8003ebc:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8003ebe:	6099      	str	r1, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8003ec0:	608c      	str	r4, [r1, #8]
	pxIterator->pxNext = pxNewListItem;
 8003ec2:	6061      	str	r1, [r4, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8003ec4:	6108      	str	r0, [r1, #16]

	( pxList->uxNumberOfItems )++;
 8003ec6:	6803      	ldr	r3, [r0, #0]
 8003ec8:	3301      	adds	r3, #1
 8003eca:	6003      	str	r3, [r0, #0]
}
 8003ecc:	bc30      	pop	{r4, r5}
 8003ece:	4770      	bx	lr
		pxIterator = pxList->xListEnd.pxPrevious;
 8003ed0:	6904      	ldr	r4, [r0, #16]
 8003ed2:	e7f2      	b.n	8003eba <vListInsert+0x18>

08003ed4 <uxListRemove>:

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8003ed4:	6903      	ldr	r3, [r0, #16]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8003ed6:	6841      	ldr	r1, [r0, #4]
 8003ed8:	6882      	ldr	r2, [r0, #8]
 8003eda:	608a      	str	r2, [r1, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8003edc:	6841      	ldr	r1, [r0, #4]
 8003ede:	6051      	str	r1, [r2, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8003ee0:	685a      	ldr	r2, [r3, #4]
 8003ee2:	4282      	cmp	r2, r0
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8003ee4:	bf04      	itt	eq
 8003ee6:	6882      	ldreq	r2, [r0, #8]
 8003ee8:	605a      	streq	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8003eea:	2200      	movs	r2, #0
 8003eec:	6102      	str	r2, [r0, #16]
	( pxList->uxNumberOfItems )--;
 8003eee:	681a      	ldr	r2, [r3, #0]
 8003ef0:	3a01      	subs	r2, #1
 8003ef2:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8003ef4:	6818      	ldr	r0, [r3, #0]
}
 8003ef6:	4770      	bx	lr

08003ef8 <prvIsQueueEmpty>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8003ef8:	b510      	push	{r4, lr}
 8003efa:	4604      	mov	r4, r0
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8003efc:	f001 fe2a 	bl	8005b54 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8003f00:	6ba4      	ldr	r4, [r4, #56]	; 0x38
		else
		{
			xReturn = pdFALSE;
		}
	}
	taskEXIT_CRITICAL();
 8003f02:	f001 fe49 	bl	8005b98 <vPortExitCritical>

	return xReturn;
}
 8003f06:	fab4 f084 	clz	r0, r4
 8003f0a:	0940      	lsrs	r0, r0, #5
 8003f0c:	bd10      	pop	{r4, pc}

08003f0e <prvCopyDataToQueue>:
{
 8003f0e:	b570      	push	{r4, r5, r6, lr}
 8003f10:	4604      	mov	r4, r0
 8003f12:	4615      	mov	r5, r2
	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003f14:	6b86      	ldr	r6, [r0, #56]	; 0x38
	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8003f16:	6c02      	ldr	r2, [r0, #64]	; 0x40
 8003f18:	b95a      	cbnz	r2, 8003f32 <prvCopyDataToQueue+0x24>
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8003f1a:	6803      	ldr	r3, [r0, #0]
 8003f1c:	b11b      	cbz	r3, 8003f26 <prvCopyDataToQueue+0x18>
BaseType_t xReturn = pdFALSE;
 8003f1e:	2000      	movs	r0, #0
	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8003f20:	3601      	adds	r6, #1
 8003f22:	63a6      	str	r6, [r4, #56]	; 0x38
}
 8003f24:	bd70      	pop	{r4, r5, r6, pc}
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8003f26:	6880      	ldr	r0, [r0, #8]
 8003f28:	f001 faf4 	bl	8005514 <xTaskPriorityDisinherit>
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8003f2c:	2300      	movs	r3, #0
 8003f2e:	60a3      	str	r3, [r4, #8]
 8003f30:	e7f6      	b.n	8003f20 <prvCopyDataToQueue+0x12>
	else if( xPosition == queueSEND_TO_BACK )
 8003f32:	b96d      	cbnz	r5, 8003f50 <prvCopyDataToQueue+0x42>
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8003f34:	6840      	ldr	r0, [r0, #4]
 8003f36:	f00b f818 	bl	800ef6a <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8003f3a:	6863      	ldr	r3, [r4, #4]
 8003f3c:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8003f3e:	4413      	add	r3, r2
 8003f40:	6063      	str	r3, [r4, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8003f42:	68a2      	ldr	r2, [r4, #8]
 8003f44:	4293      	cmp	r3, r2
 8003f46:	d319      	bcc.n	8003f7c <prvCopyDataToQueue+0x6e>
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8003f48:	6823      	ldr	r3, [r4, #0]
 8003f4a:	6063      	str	r3, [r4, #4]
BaseType_t xReturn = pdFALSE;
 8003f4c:	4628      	mov	r0, r5
 8003f4e:	e7e7      	b.n	8003f20 <prvCopyDataToQueue+0x12>
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8003f50:	68c0      	ldr	r0, [r0, #12]
 8003f52:	f00b f80a 	bl	800ef6a <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8003f56:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8003f58:	4251      	negs	r1, r2
 8003f5a:	68e3      	ldr	r3, [r4, #12]
 8003f5c:	1a9b      	subs	r3, r3, r2
 8003f5e:	60e3      	str	r3, [r4, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8003f60:	6822      	ldr	r2, [r4, #0]
 8003f62:	4293      	cmp	r3, r2
 8003f64:	d202      	bcs.n	8003f6c <prvCopyDataToQueue+0x5e>
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8003f66:	68a3      	ldr	r3, [r4, #8]
 8003f68:	440b      	add	r3, r1
 8003f6a:	60e3      	str	r3, [r4, #12]
		if( xPosition == queueOVERWRITE )
 8003f6c:	2d02      	cmp	r5, #2
 8003f6e:	d001      	beq.n	8003f74 <prvCopyDataToQueue+0x66>
BaseType_t xReturn = pdFALSE;
 8003f70:	2000      	movs	r0, #0
 8003f72:	e7d5      	b.n	8003f20 <prvCopyDataToQueue+0x12>
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8003f74:	b126      	cbz	r6, 8003f80 <prvCopyDataToQueue+0x72>
				--uxMessagesWaiting;
 8003f76:	3e01      	subs	r6, #1
BaseType_t xReturn = pdFALSE;
 8003f78:	2000      	movs	r0, #0
 8003f7a:	e7d1      	b.n	8003f20 <prvCopyDataToQueue+0x12>
 8003f7c:	4628      	mov	r0, r5
 8003f7e:	e7cf      	b.n	8003f20 <prvCopyDataToQueue+0x12>
 8003f80:	2000      	movs	r0, #0
 8003f82:	e7cd      	b.n	8003f20 <prvCopyDataToQueue+0x12>

08003f84 <prvCopyDataFromQueue>:
{
 8003f84:	4603      	mov	r3, r0
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8003f86:	6c02      	ldr	r2, [r0, #64]	; 0x40
 8003f88:	b16a      	cbz	r2, 8003fa6 <prvCopyDataFromQueue+0x22>
{
 8003f8a:	b510      	push	{r4, lr}
 8003f8c:	4608      	mov	r0, r1
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8003f8e:	68d9      	ldr	r1, [r3, #12]
 8003f90:	4411      	add	r1, r2
 8003f92:	60d9      	str	r1, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8003f94:	689c      	ldr	r4, [r3, #8]
 8003f96:	42a1      	cmp	r1, r4
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8003f98:	bf24      	itt	cs
 8003f9a:	6819      	ldrcs	r1, [r3, #0]
 8003f9c:	60d9      	strcs	r1, [r3, #12]
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8003f9e:	68d9      	ldr	r1, [r3, #12]
 8003fa0:	f00a ffe3 	bl	800ef6a <memcpy>
}
 8003fa4:	bd10      	pop	{r4, pc}
 8003fa6:	4770      	bx	lr

08003fa8 <prvUnlockQueue>:
{
 8003fa8:	b570      	push	{r4, r5, r6, lr}
 8003faa:	4605      	mov	r5, r0
	taskENTER_CRITICAL();
 8003fac:	f001 fdd2 	bl	8005b54 <vPortEnterCritical>
		int8_t cTxLock = pxQueue->cTxLock;
 8003fb0:	f895 4045 	ldrb.w	r4, [r5, #69]	; 0x45
 8003fb4:	b264      	sxtb	r4, r4
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8003fb6:	2c00      	cmp	r4, #0
 8003fb8:	dd0f      	ble.n	8003fda <prvUnlockQueue+0x32>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003fba:	f105 0624 	add.w	r6, r5, #36	; 0x24
 8003fbe:	e002      	b.n	8003fc6 <prvUnlockQueue+0x1e>
			--cTxLock;
 8003fc0:	3c01      	subs	r4, #1
 8003fc2:	b264      	sxtb	r4, r4
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8003fc4:	b14c      	cbz	r4, 8003fda <prvUnlockQueue+0x32>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003fc6:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8003fc8:	b13b      	cbz	r3, 8003fda <prvUnlockQueue+0x32>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003fca:	4630      	mov	r0, r6
 8003fcc:	f001 f9aa 	bl	8005324 <xTaskRemoveFromEventList>
 8003fd0:	2800      	cmp	r0, #0
 8003fd2:	d0f5      	beq.n	8003fc0 <prvUnlockQueue+0x18>
						vTaskMissedYield();
 8003fd4:	f001 fa38 	bl	8005448 <vTaskMissedYield>
 8003fd8:	e7f2      	b.n	8003fc0 <prvUnlockQueue+0x18>
		pxQueue->cTxLock = queueUNLOCKED;
 8003fda:	23ff      	movs	r3, #255	; 0xff
 8003fdc:	f885 3045 	strb.w	r3, [r5, #69]	; 0x45
	taskEXIT_CRITICAL();
 8003fe0:	f001 fdda 	bl	8005b98 <vPortExitCritical>
	taskENTER_CRITICAL();
 8003fe4:	f001 fdb6 	bl	8005b54 <vPortEnterCritical>
		int8_t cRxLock = pxQueue->cRxLock;
 8003fe8:	f895 4044 	ldrb.w	r4, [r5, #68]	; 0x44
 8003fec:	b264      	sxtb	r4, r4
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8003fee:	2c00      	cmp	r4, #0
 8003ff0:	dd0f      	ble.n	8004012 <prvUnlockQueue+0x6a>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003ff2:	f105 0610 	add.w	r6, r5, #16
 8003ff6:	e002      	b.n	8003ffe <prvUnlockQueue+0x56>
				--cRxLock;
 8003ff8:	3c01      	subs	r4, #1
 8003ffa:	b264      	sxtb	r4, r4
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8003ffc:	b14c      	cbz	r4, 8004012 <prvUnlockQueue+0x6a>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003ffe:	692b      	ldr	r3, [r5, #16]
 8004000:	b13b      	cbz	r3, 8004012 <prvUnlockQueue+0x6a>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004002:	4630      	mov	r0, r6
 8004004:	f001 f98e 	bl	8005324 <xTaskRemoveFromEventList>
 8004008:	2800      	cmp	r0, #0
 800400a:	d0f5      	beq.n	8003ff8 <prvUnlockQueue+0x50>
					vTaskMissedYield();
 800400c:	f001 fa1c 	bl	8005448 <vTaskMissedYield>
 8004010:	e7f2      	b.n	8003ff8 <prvUnlockQueue+0x50>
		pxQueue->cRxLock = queueUNLOCKED;
 8004012:	23ff      	movs	r3, #255	; 0xff
 8004014:	f885 3044 	strb.w	r3, [r5, #68]	; 0x44
	taskEXIT_CRITICAL();
 8004018:	f001 fdbe 	bl	8005b98 <vPortExitCritical>
}
 800401c:	bd70      	pop	{r4, r5, r6, pc}

0800401e <xQueueGenericReset>:
{
 800401e:	b538      	push	{r3, r4, r5, lr}
	configASSERT( pxQueue );
 8004020:	b1e0      	cbz	r0, 800405c <xQueueGenericReset+0x3e>
 8004022:	460d      	mov	r5, r1
 8004024:	4604      	mov	r4, r0
	taskENTER_CRITICAL();
 8004026:	f001 fd95 	bl	8005b54 <vPortEnterCritical>
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800402a:	6822      	ldr	r2, [r4, #0]
 800402c:	6c21      	ldr	r1, [r4, #64]	; 0x40
 800402e:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8004030:	fb01 f303 	mul.w	r3, r1, r3
 8004034:	18d0      	adds	r0, r2, r3
 8004036:	60a0      	str	r0, [r4, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8004038:	2000      	movs	r0, #0
 800403a:	63a0      	str	r0, [r4, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800403c:	6062      	str	r2, [r4, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800403e:	1a5b      	subs	r3, r3, r1
 8004040:	4413      	add	r3, r2
 8004042:	60e3      	str	r3, [r4, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8004044:	23ff      	movs	r3, #255	; 0xff
 8004046:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800404a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
		if( xNewQueue == pdFALSE )
 800404e:	b9fd      	cbnz	r5, 8004090 <xQueueGenericReset+0x72>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004050:	6923      	ldr	r3, [r4, #16]
 8004052:	b963      	cbnz	r3, 800406e <xQueueGenericReset+0x50>
	taskEXIT_CRITICAL();
 8004054:	f001 fda0 	bl	8005b98 <vPortExitCritical>
}
 8004058:	2001      	movs	r0, #1
 800405a:	bd38      	pop	{r3, r4, r5, pc}

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800405c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004060:	f383 8811 	msr	BASEPRI, r3
 8004064:	f3bf 8f6f 	isb	sy
 8004068:	f3bf 8f4f 	dsb	sy
	configASSERT( pxQueue );
 800406c:	e7fe      	b.n	800406c <xQueueGenericReset+0x4e>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800406e:	f104 0010 	add.w	r0, r4, #16
 8004072:	f001 f957 	bl	8005324 <xTaskRemoveFromEventList>
 8004076:	2800      	cmp	r0, #0
 8004078:	d0ec      	beq.n	8004054 <xQueueGenericReset+0x36>
					queueYIELD_IF_USING_PREEMPTION();
 800407a:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 800407e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004082:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 8004086:	f3bf 8f4f 	dsb	sy
 800408a:	f3bf 8f6f 	isb	sy
 800408e:	e7e1      	b.n	8004054 <xQueueGenericReset+0x36>
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8004090:	f104 0010 	add.w	r0, r4, #16
 8004094:	f7ff feec 	bl	8003e70 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8004098:	f104 0024 	add.w	r0, r4, #36	; 0x24
 800409c:	f7ff fee8 	bl	8003e70 <vListInitialise>
 80040a0:	e7d8      	b.n	8004054 <xQueueGenericReset+0x36>

080040a2 <xQueueGenericCreateStatic>:
		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80040a2:	b940      	cbnz	r0, 80040b6 <xQueueGenericCreateStatic+0x14>
 80040a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80040a8:	f383 8811 	msr	BASEPRI, r3
 80040ac:	f3bf 8f6f 	isb	sy
 80040b0:	f3bf 8f4f 	dsb	sy
 80040b4:	e7fe      	b.n	80040b4 <xQueueGenericCreateStatic+0x12>
	{
 80040b6:	b510      	push	{r4, lr}
 80040b8:	b082      	sub	sp, #8
 80040ba:	461c      	mov	r4, r3
 80040bc:	4603      	mov	r3, r0
		configASSERT( pxStaticQueue != NULL );
 80040be:	b154      	cbz	r4, 80040d6 <xQueueGenericCreateStatic+0x34>
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 80040c0:	b192      	cbz	r2, 80040e8 <xQueueGenericCreateStatic+0x46>
 80040c2:	b9d9      	cbnz	r1, 80040fc <xQueueGenericCreateStatic+0x5a>
 80040c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80040c8:	f383 8811 	msr	BASEPRI, r3
 80040cc:	f3bf 8f6f 	isb	sy
 80040d0:	f3bf 8f4f 	dsb	sy
 80040d4:	e7fe      	b.n	80040d4 <xQueueGenericCreateStatic+0x32>
 80040d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80040da:	f383 8811 	msr	BASEPRI, r3
 80040de:	f3bf 8f6f 	isb	sy
 80040e2:	f3bf 8f4f 	dsb	sy
		configASSERT( pxStaticQueue != NULL );
 80040e6:	e7fe      	b.n	80040e6 <xQueueGenericCreateStatic+0x44>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80040e8:	b341      	cbz	r1, 800413c <xQueueGenericCreateStatic+0x9a>
 80040ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80040ee:	f383 8811 	msr	BASEPRI, r3
 80040f2:	f3bf 8f6f 	isb	sy
 80040f6:	f3bf 8f4f 	dsb	sy
 80040fa:	e7fe      	b.n	80040fa <xQueueGenericCreateStatic+0x58>
			volatile size_t xSize = sizeof( StaticQueue_t );
 80040fc:	2050      	movs	r0, #80	; 0x50
 80040fe:	9001      	str	r0, [sp, #4]
			configASSERT( xSize == sizeof( Queue_t ) );
 8004100:	9801      	ldr	r0, [sp, #4]
 8004102:	2850      	cmp	r0, #80	; 0x50
 8004104:	d008      	beq.n	8004118 <xQueueGenericCreateStatic+0x76>
 8004106:	f04f 0350 	mov.w	r3, #80	; 0x50
 800410a:	f383 8811 	msr	BASEPRI, r3
 800410e:	f3bf 8f6f 	isb	sy
 8004112:	f3bf 8f4f 	dsb	sy
 8004116:	e7fe      	b.n	8004116 <xQueueGenericCreateStatic+0x74>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8004118:	9801      	ldr	r0, [sp, #4]
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800411a:	2001      	movs	r0, #1
 800411c:	f884 0046 	strb.w	r0, [r4, #70]	; 0x46
	if( uxItemSize == ( UBaseType_t ) 0 )
 8004120:	6022      	str	r2, [r4, #0]
	pxNewQueue->uxLength = uxQueueLength;
 8004122:	63e3      	str	r3, [r4, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8004124:	6421      	str	r1, [r4, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8004126:	2101      	movs	r1, #1
 8004128:	4620      	mov	r0, r4
 800412a:	f7ff ff78 	bl	800401e <xQueueGenericReset>
		pxNewQueue->ucQueueType = ucQueueType;
 800412e:	f89d 3010 	ldrb.w	r3, [sp, #16]
 8004132:	f884 304c 	strb.w	r3, [r4, #76]	; 0x4c
	}
 8004136:	4620      	mov	r0, r4
 8004138:	b002      	add	sp, #8
 800413a:	bd10      	pop	{r4, pc}
			volatile size_t xSize = sizeof( StaticQueue_t );
 800413c:	2250      	movs	r2, #80	; 0x50
 800413e:	9201      	str	r2, [sp, #4]
			configASSERT( xSize == sizeof( Queue_t ) );
 8004140:	9a01      	ldr	r2, [sp, #4]
 8004142:	2a50      	cmp	r2, #80	; 0x50
 8004144:	d1df      	bne.n	8004106 <xQueueGenericCreateStatic+0x64>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8004146:	9a01      	ldr	r2, [sp, #4]
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8004148:	2201      	movs	r2, #1
 800414a:	f884 2046 	strb.w	r2, [r4, #70]	; 0x46
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800414e:	4622      	mov	r2, r4
 8004150:	e7e6      	b.n	8004120 <xQueueGenericCreateStatic+0x7e>

08004152 <xQueueGenericCreate>:
	{
 8004152:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8004154:	b940      	cbnz	r0, 8004168 <xQueueGenericCreate+0x16>
 8004156:	f04f 0350 	mov.w	r3, #80	; 0x50
 800415a:	f383 8811 	msr	BASEPRI, r3
 800415e:	f3bf 8f6f 	isb	sy
 8004162:	f3bf 8f4f 	dsb	sy
 8004166:	e7fe      	b.n	8004166 <xQueueGenericCreate+0x14>
 8004168:	460d      	mov	r5, r1
 800416a:	4614      	mov	r4, r2
 800416c:	4607      	mov	r7, r0
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800416e:	fb01 f000 	mul.w	r0, r1, r0
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8004172:	3050      	adds	r0, #80	; 0x50
 8004174:	f001 fe74 	bl	8005e60 <pvPortMalloc>
		if( pxNewQueue != NULL )
 8004178:	4606      	mov	r6, r0
 800417a:	b170      	cbz	r0, 800419a <xQueueGenericCreate+0x48>
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800417c:	2300      	movs	r3, #0
 800417e:	f880 3046 	strb.w	r3, [r0, #70]	; 0x46
	if( uxItemSize == ( UBaseType_t ) 0 )
 8004182:	b165      	cbz	r5, 800419e <xQueueGenericCreate+0x4c>
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8004184:	f100 0350 	add.w	r3, r0, #80	; 0x50
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8004188:	6033      	str	r3, [r6, #0]
	pxNewQueue->uxLength = uxQueueLength;
 800418a:	63f7      	str	r7, [r6, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800418c:	6435      	str	r5, [r6, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800418e:	2101      	movs	r1, #1
 8004190:	4630      	mov	r0, r6
 8004192:	f7ff ff44 	bl	800401e <xQueueGenericReset>
		pxNewQueue->ucQueueType = ucQueueType;
 8004196:	f886 404c 	strb.w	r4, [r6, #76]	; 0x4c
	}
 800419a:	4630      	mov	r0, r6
 800419c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800419e:	4603      	mov	r3, r0
 80041a0:	e7f2      	b.n	8004188 <xQueueGenericCreate+0x36>

080041a2 <xQueueCreateCountingSemaphoreStatic>:
		configASSERT( uxMaxCount != 0 );
 80041a2:	b940      	cbnz	r0, 80041b6 <xQueueCreateCountingSemaphoreStatic+0x14>
 80041a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80041a8:	f383 8811 	msr	BASEPRI, r3
 80041ac:	f3bf 8f6f 	isb	sy
 80041b0:	f3bf 8f4f 	dsb	sy
 80041b4:	e7fe      	b.n	80041b4 <xQueueCreateCountingSemaphoreStatic+0x12>
	{
 80041b6:	b510      	push	{r4, lr}
 80041b8:	b082      	sub	sp, #8
 80041ba:	460c      	mov	r4, r1
		configASSERT( uxInitialCount <= uxMaxCount );
 80041bc:	4288      	cmp	r0, r1
 80041be:	d208      	bcs.n	80041d2 <xQueueCreateCountingSemaphoreStatic+0x30>
 80041c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80041c4:	f383 8811 	msr	BASEPRI, r3
 80041c8:	f3bf 8f6f 	isb	sy
 80041cc:	f3bf 8f4f 	dsb	sy
 80041d0:	e7fe      	b.n	80041d0 <xQueueCreateCountingSemaphoreStatic+0x2e>
		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 80041d2:	2302      	movs	r3, #2
 80041d4:	9300      	str	r3, [sp, #0]
 80041d6:	4613      	mov	r3, r2
 80041d8:	2200      	movs	r2, #0
 80041da:	4611      	mov	r1, r2
 80041dc:	f7ff ff61 	bl	80040a2 <xQueueGenericCreateStatic>
		if( xHandle != NULL )
 80041e0:	b100      	cbz	r0, 80041e4 <xQueueCreateCountingSemaphoreStatic+0x42>
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 80041e2:	6384      	str	r4, [r0, #56]	; 0x38
	}
 80041e4:	b002      	add	sp, #8
 80041e6:	bd10      	pop	{r4, pc}

080041e8 <xQueueCreateCountingSemaphore>:
		configASSERT( uxMaxCount != 0 );
 80041e8:	b940      	cbnz	r0, 80041fc <xQueueCreateCountingSemaphore+0x14>
 80041ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80041ee:	f383 8811 	msr	BASEPRI, r3
 80041f2:	f3bf 8f6f 	isb	sy
 80041f6:	f3bf 8f4f 	dsb	sy
 80041fa:	e7fe      	b.n	80041fa <xQueueCreateCountingSemaphore+0x12>
	{
 80041fc:	b510      	push	{r4, lr}
 80041fe:	460c      	mov	r4, r1
		configASSERT( uxInitialCount <= uxMaxCount );
 8004200:	4288      	cmp	r0, r1
 8004202:	d208      	bcs.n	8004216 <xQueueCreateCountingSemaphore+0x2e>
 8004204:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004208:	f383 8811 	msr	BASEPRI, r3
 800420c:	f3bf 8f6f 	isb	sy
 8004210:	f3bf 8f4f 	dsb	sy
 8004214:	e7fe      	b.n	8004214 <xQueueCreateCountingSemaphore+0x2c>
		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8004216:	2202      	movs	r2, #2
 8004218:	2100      	movs	r1, #0
 800421a:	f7ff ff9a 	bl	8004152 <xQueueGenericCreate>
		if( xHandle != NULL )
 800421e:	b100      	cbz	r0, 8004222 <xQueueCreateCountingSemaphore+0x3a>
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8004220:	6384      	str	r4, [r0, #56]	; 0x38
	}
 8004222:	bd10      	pop	{r4, pc}

08004224 <xQueueGenericSend>:
{
 8004224:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8004228:	b085      	sub	sp, #20
 800422a:	9201      	str	r2, [sp, #4]
	configASSERT( pxQueue );
 800422c:	b188      	cbz	r0, 8004252 <xQueueGenericSend+0x2e>
 800422e:	460e      	mov	r6, r1
 8004230:	461d      	mov	r5, r3
 8004232:	4604      	mov	r4, r0
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004234:	b1b1      	cbz	r1, 8004264 <xQueueGenericSend+0x40>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8004236:	2d02      	cmp	r5, #2
 8004238:	d120      	bne.n	800427c <xQueueGenericSend+0x58>
 800423a:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800423c:	2b01      	cmp	r3, #1
 800423e:	d01d      	beq.n	800427c <xQueueGenericSend+0x58>
 8004240:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004244:	f383 8811 	msr	BASEPRI, r3
 8004248:	f3bf 8f6f 	isb	sy
 800424c:	f3bf 8f4f 	dsb	sy
 8004250:	e7fe      	b.n	8004250 <xQueueGenericSend+0x2c>
 8004252:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004256:	f383 8811 	msr	BASEPRI, r3
 800425a:	f3bf 8f6f 	isb	sy
 800425e:	f3bf 8f4f 	dsb	sy
	configASSERT( pxQueue );
 8004262:	e7fe      	b.n	8004262 <xQueueGenericSend+0x3e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004264:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8004266:	2b00      	cmp	r3, #0
 8004268:	d0e5      	beq.n	8004236 <xQueueGenericSend+0x12>
 800426a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800426e:	f383 8811 	msr	BASEPRI, r3
 8004272:	f3bf 8f6f 	isb	sy
 8004276:	f3bf 8f4f 	dsb	sy
 800427a:	e7fe      	b.n	800427a <xQueueGenericSend+0x56>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800427c:	f001 f8f0 	bl	8005460 <xTaskGetSchedulerState>
 8004280:	b950      	cbnz	r0, 8004298 <xQueueGenericSend+0x74>
 8004282:	9b01      	ldr	r3, [sp, #4]
 8004284:	b163      	cbz	r3, 80042a0 <xQueueGenericSend+0x7c>
 8004286:	f04f 0350 	mov.w	r3, #80	; 0x50
 800428a:	f383 8811 	msr	BASEPRI, r3
 800428e:	f3bf 8f6f 	isb	sy
 8004292:	f3bf 8f4f 	dsb	sy
 8004296:	e7fe      	b.n	8004296 <xQueueGenericSend+0x72>
 8004298:	f04f 0800 	mov.w	r8, #0
		prvLockQueue( pxQueue );
 800429c:	2700      	movs	r7, #0
 800429e:	e03a      	b.n	8004316 <xQueueGenericSend+0xf2>
 80042a0:	f04f 0800 	mov.w	r8, #0
 80042a4:	e7fa      	b.n	800429c <xQueueGenericSend+0x78>
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80042a6:	462a      	mov	r2, r5
 80042a8:	4631      	mov	r1, r6
 80042aa:	4620      	mov	r0, r4
 80042ac:	f7ff fe2f 	bl	8003f0e <prvCopyDataToQueue>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80042b0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80042b2:	b983      	cbnz	r3, 80042d6 <xQueueGenericSend+0xb2>
					else if( xYieldRequired != pdFALSE )
 80042b4:	b148      	cbz	r0, 80042ca <xQueueGenericSend+0xa6>
						queueYIELD_IF_USING_PREEMPTION();
 80042b6:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 80042ba:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80042be:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 80042c2:	f3bf 8f4f 	dsb	sy
 80042c6:	f3bf 8f6f 	isb	sy
				taskEXIT_CRITICAL();
 80042ca:	f001 fc65 	bl	8005b98 <vPortExitCritical>
				return pdPASS;
 80042ce:	2001      	movs	r0, #1
}
 80042d0:	b005      	add	sp, #20
 80042d2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80042d6:	f104 0024 	add.w	r0, r4, #36	; 0x24
 80042da:	f001 f823 	bl	8005324 <xTaskRemoveFromEventList>
 80042de:	2800      	cmp	r0, #0
 80042e0:	d0f3      	beq.n	80042ca <xQueueGenericSend+0xa6>
							queueYIELD_IF_USING_PREEMPTION();
 80042e2:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 80042e6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80042ea:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 80042ee:	f3bf 8f4f 	dsb	sy
 80042f2:	f3bf 8f6f 	isb	sy
 80042f6:	e7e8      	b.n	80042ca <xQueueGenericSend+0xa6>
					taskEXIT_CRITICAL();
 80042f8:	f001 fc4e 	bl	8005b98 <vPortExitCritical>
					return errQUEUE_FULL;
 80042fc:	2000      	movs	r0, #0
 80042fe:	e7e7      	b.n	80042d0 <xQueueGenericSend+0xac>
					vTaskInternalSetTimeOutState( &xTimeOut );
 8004300:	a802      	add	r0, sp, #8
 8004302:	f001 f853 	bl	80053ac <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8004306:	e014      	b.n	8004332 <xQueueGenericSend+0x10e>
				prvUnlockQueue( pxQueue );
 8004308:	4620      	mov	r0, r4
 800430a:	f7ff fe4d 	bl	8003fa8 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800430e:	f000 fed5 	bl	80050bc <xTaskResumeAll>
 8004312:	f04f 0801 	mov.w	r8, #1
		taskENTER_CRITICAL();
 8004316:	f001 fc1d 	bl	8005b54 <vPortEnterCritical>
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800431a:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 800431c:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800431e:	429a      	cmp	r2, r3
 8004320:	d3c1      	bcc.n	80042a6 <xQueueGenericSend+0x82>
 8004322:	2d02      	cmp	r5, #2
 8004324:	d0bf      	beq.n	80042a6 <xQueueGenericSend+0x82>
				if( xTicksToWait == ( TickType_t ) 0 )
 8004326:	9b01      	ldr	r3, [sp, #4]
 8004328:	2b00      	cmp	r3, #0
 800432a:	d0e5      	beq.n	80042f8 <xQueueGenericSend+0xd4>
				else if( xEntryTimeSet == pdFALSE )
 800432c:	f1b8 0f00 	cmp.w	r8, #0
 8004330:	d0e6      	beq.n	8004300 <xQueueGenericSend+0xdc>
		taskEXIT_CRITICAL();
 8004332:	f001 fc31 	bl	8005b98 <vPortExitCritical>
		vTaskSuspendAll();
 8004336:	f000 fe11 	bl	8004f5c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800433a:	f001 fc0b 	bl	8005b54 <vPortEnterCritical>
 800433e:	f894 2044 	ldrb.w	r2, [r4, #68]	; 0x44
 8004342:	b252      	sxtb	r2, r2
 8004344:	f1b2 3fff 	cmp.w	r2, #4294967295
 8004348:	bf08      	it	eq
 800434a:	f884 7044 	strbeq.w	r7, [r4, #68]	; 0x44
 800434e:	f894 2045 	ldrb.w	r2, [r4, #69]	; 0x45
 8004352:	b252      	sxtb	r2, r2
 8004354:	f1b2 3fff 	cmp.w	r2, #4294967295
 8004358:	bf08      	it	eq
 800435a:	f884 7045 	strbeq.w	r7, [r4, #69]	; 0x45
 800435e:	f001 fc1b 	bl	8005b98 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8004362:	a901      	add	r1, sp, #4
 8004364:	a802      	add	r0, sp, #8
 8004366:	f001 f82d 	bl	80053c4 <xTaskCheckForTimeOut>
 800436a:	bb00      	cbnz	r0, 80043ae <xQueueGenericSend+0x18a>

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800436c:	f001 fbf2 	bl	8005b54 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8004370:	f8d4 9038 	ldr.w	r9, [r4, #56]	; 0x38
 8004374:	f8d4 803c 	ldr.w	r8, [r4, #60]	; 0x3c
		else
		{
			xReturn = pdFALSE;
		}
	}
	taskEXIT_CRITICAL();
 8004378:	f001 fc0e 	bl	8005b98 <vPortExitCritical>
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800437c:	45c1      	cmp	r9, r8
 800437e:	d1c3      	bne.n	8004308 <xQueueGenericSend+0xe4>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8004380:	9901      	ldr	r1, [sp, #4]
 8004382:	f104 0010 	add.w	r0, r4, #16
 8004386:	f000 ff97 	bl	80052b8 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800438a:	4620      	mov	r0, r4
 800438c:	f7ff fe0c 	bl	8003fa8 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8004390:	f000 fe94 	bl	80050bc <xTaskResumeAll>
 8004394:	2800      	cmp	r0, #0
 8004396:	d1bc      	bne.n	8004312 <xQueueGenericSend+0xee>
					portYIELD_WITHIN_API();
 8004398:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 800439c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80043a0:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 80043a4:	f3bf 8f4f 	dsb	sy
 80043a8:	f3bf 8f6f 	isb	sy
 80043ac:	e7b1      	b.n	8004312 <xQueueGenericSend+0xee>
			prvUnlockQueue( pxQueue );
 80043ae:	4620      	mov	r0, r4
 80043b0:	f7ff fdfa 	bl	8003fa8 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80043b4:	f000 fe82 	bl	80050bc <xTaskResumeAll>
			return errQUEUE_FULL;
 80043b8:	2000      	movs	r0, #0
 80043ba:	e789      	b.n	80042d0 <xQueueGenericSend+0xac>

080043bc <prvInitialiseMutex>:
		if( pxNewQueue != NULL )
 80043bc:	b148      	cbz	r0, 80043d2 <prvInitialiseMutex+0x16>
	{
 80043be:	b508      	push	{r3, lr}
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 80043c0:	2100      	movs	r1, #0
 80043c2:	6081      	str	r1, [r0, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 80043c4:	6001      	str	r1, [r0, #0]
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 80043c6:	60c1      	str	r1, [r0, #12]
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 80043c8:	460b      	mov	r3, r1
 80043ca:	460a      	mov	r2, r1
 80043cc:	f7ff ff2a 	bl	8004224 <xQueueGenericSend>
	}
 80043d0:	bd08      	pop	{r3, pc}
 80043d2:	4770      	bx	lr

080043d4 <xQueueCreateMutex>:
	{
 80043d4:	b510      	push	{r4, lr}
 80043d6:	4602      	mov	r2, r0
		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 80043d8:	2100      	movs	r1, #0
 80043da:	2001      	movs	r0, #1
 80043dc:	f7ff feb9 	bl	8004152 <xQueueGenericCreate>
 80043e0:	4604      	mov	r4, r0
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 80043e2:	f7ff ffeb 	bl	80043bc <prvInitialiseMutex>
	}
 80043e6:	4620      	mov	r0, r4
 80043e8:	bd10      	pop	{r4, pc}

080043ea <xQueueCreateMutexStatic>:
	{
 80043ea:	b510      	push	{r4, lr}
 80043ec:	b082      	sub	sp, #8
 80043ee:	460b      	mov	r3, r1
		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 80043f0:	9000      	str	r0, [sp, #0]
 80043f2:	2200      	movs	r2, #0
 80043f4:	4611      	mov	r1, r2
 80043f6:	2001      	movs	r0, #1
 80043f8:	f7ff fe53 	bl	80040a2 <xQueueGenericCreateStatic>
 80043fc:	4604      	mov	r4, r0
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 80043fe:	f7ff ffdd 	bl	80043bc <prvInitialiseMutex>
	}
 8004402:	4620      	mov	r0, r4
 8004404:	b002      	add	sp, #8
 8004406:	bd10      	pop	{r4, pc}

08004408 <xQueueGiveMutexRecursive>:
	{
 8004408:	b538      	push	{r3, r4, r5, lr}
		configASSERT( pxMutex );
 800440a:	b138      	cbz	r0, 800441c <xQueueGiveMutexRecursive+0x14>
 800440c:	4604      	mov	r4, r0
		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 800440e:	6885      	ldr	r5, [r0, #8]
 8004410:	f001 f820 	bl	8005454 <xTaskGetCurrentTaskHandle>
 8004414:	4285      	cmp	r5, r0
 8004416:	d00a      	beq.n	800442e <xQueueGiveMutexRecursive+0x26>
			xReturn = pdFAIL;
 8004418:	2000      	movs	r0, #0
	}
 800441a:	bd38      	pop	{r3, r4, r5, pc}
 800441c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004420:	f383 8811 	msr	BASEPRI, r3
 8004424:	f3bf 8f6f 	isb	sy
 8004428:	f3bf 8f4f 	dsb	sy
		configASSERT( pxMutex );
 800442c:	e7fe      	b.n	800442c <xQueueGiveMutexRecursive+0x24>
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )--;
 800442e:	68e3      	ldr	r3, [r4, #12]
 8004430:	3b01      	subs	r3, #1
 8004432:	60e3      	str	r3, [r4, #12]
			if( pxMutex->u.xSemaphore.uxRecursiveCallCount == ( UBaseType_t ) 0 )
 8004434:	b10b      	cbz	r3, 800443a <xQueueGiveMutexRecursive+0x32>
			xReturn = pdPASS;
 8004436:	2001      	movs	r0, #1
		return xReturn;
 8004438:	e7ef      	b.n	800441a <xQueueGiveMutexRecursive+0x12>
				( void ) xQueueGenericSend( pxMutex, NULL, queueMUTEX_GIVE_BLOCK_TIME, queueSEND_TO_BACK );
 800443a:	461a      	mov	r2, r3
 800443c:	4619      	mov	r1, r3
 800443e:	4620      	mov	r0, r4
 8004440:	f7ff fef0 	bl	8004224 <xQueueGenericSend>
			xReturn = pdPASS;
 8004444:	2001      	movs	r0, #1
 8004446:	e7e8      	b.n	800441a <xQueueGiveMutexRecursive+0x12>

08004448 <xQueueGenericSendFromISR>:
{
 8004448:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	configASSERT( pxQueue );
 800444c:	b190      	cbz	r0, 8004474 <xQueueGenericSendFromISR+0x2c>
 800444e:	460f      	mov	r7, r1
 8004450:	4616      	mov	r6, r2
 8004452:	461c      	mov	r4, r3
 8004454:	4605      	mov	r5, r0
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004456:	b1b1      	cbz	r1, 8004486 <xQueueGenericSendFromISR+0x3e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8004458:	2c02      	cmp	r4, #2
 800445a:	d120      	bne.n	800449e <xQueueGenericSendFromISR+0x56>
 800445c:	6beb      	ldr	r3, [r5, #60]	; 0x3c
 800445e:	2b01      	cmp	r3, #1
 8004460:	d01d      	beq.n	800449e <xQueueGenericSendFromISR+0x56>
 8004462:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004466:	f383 8811 	msr	BASEPRI, r3
 800446a:	f3bf 8f6f 	isb	sy
 800446e:	f3bf 8f4f 	dsb	sy
 8004472:	e7fe      	b.n	8004472 <xQueueGenericSendFromISR+0x2a>
 8004474:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004478:	f383 8811 	msr	BASEPRI, r3
 800447c:	f3bf 8f6f 	isb	sy
 8004480:	f3bf 8f4f 	dsb	sy
	configASSERT( pxQueue );
 8004484:	e7fe      	b.n	8004484 <xQueueGenericSendFromISR+0x3c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004486:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8004488:	2b00      	cmp	r3, #0
 800448a:	d0e5      	beq.n	8004458 <xQueueGenericSendFromISR+0x10>
 800448c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004490:	f383 8811 	msr	BASEPRI, r3
 8004494:	f3bf 8f6f 	isb	sy
 8004498:	f3bf 8f4f 	dsb	sy
 800449c:	e7fe      	b.n	800449c <xQueueGenericSendFromISR+0x54>
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800449e:	f001 fc81 	bl	8005da4 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 80044a2:	f3ef 8911 	mrs	r9, BASEPRI
 80044a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80044aa:	f383 8811 	msr	BASEPRI, r3
 80044ae:	f3bf 8f6f 	isb	sy
 80044b2:	f3bf 8f4f 	dsb	sy
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80044b6:	6baa      	ldr	r2, [r5, #56]	; 0x38
 80044b8:	6beb      	ldr	r3, [r5, #60]	; 0x3c
 80044ba:	429a      	cmp	r2, r3
 80044bc:	d306      	bcc.n	80044cc <xQueueGenericSendFromISR+0x84>
 80044be:	2c02      	cmp	r4, #2
 80044c0:	d004      	beq.n	80044cc <xQueueGenericSendFromISR+0x84>
			xReturn = errQUEUE_FULL;
 80044c2:	2000      	movs	r0, #0
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80044c4:	f389 8811 	msr	BASEPRI, r9
}
 80044c8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			const int8_t cTxLock = pxQueue->cTxLock;
 80044cc:	f895 8045 	ldrb.w	r8, [r5, #69]	; 0x45
 80044d0:	fa4f f888 	sxtb.w	r8, r8
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 80044d4:	6bab      	ldr	r3, [r5, #56]	; 0x38
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80044d6:	4622      	mov	r2, r4
 80044d8:	4639      	mov	r1, r7
 80044da:	4628      	mov	r0, r5
 80044dc:	f7ff fd17 	bl	8003f0e <prvCopyDataToQueue>
			if( cTxLock == queueUNLOCKED )
 80044e0:	f1b8 3fff 	cmp.w	r8, #4294967295
 80044e4:	d006      	beq.n	80044f4 <xQueueGenericSendFromISR+0xac>
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80044e6:	f108 0301 	add.w	r3, r8, #1
 80044ea:	b25b      	sxtb	r3, r3
 80044ec:	f885 3045 	strb.w	r3, [r5, #69]	; 0x45
			xReturn = pdPASS;
 80044f0:	2001      	movs	r0, #1
 80044f2:	e7e7      	b.n	80044c4 <xQueueGenericSendFromISR+0x7c>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80044f4:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80044f6:	b90b      	cbnz	r3, 80044fc <xQueueGenericSendFromISR+0xb4>
			xReturn = pdPASS;
 80044f8:	2001      	movs	r0, #1
 80044fa:	e7e3      	b.n	80044c4 <xQueueGenericSendFromISR+0x7c>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80044fc:	f105 0024 	add.w	r0, r5, #36	; 0x24
 8004500:	f000 ff10 	bl	8005324 <xTaskRemoveFromEventList>
 8004504:	b118      	cbz	r0, 800450e <xQueueGenericSendFromISR+0xc6>
							if( pxHigherPriorityTaskWoken != NULL )
 8004506:	b126      	cbz	r6, 8004512 <xQueueGenericSendFromISR+0xca>
								*pxHigherPriorityTaskWoken = pdTRUE;
 8004508:	2001      	movs	r0, #1
 800450a:	6030      	str	r0, [r6, #0]
 800450c:	e7da      	b.n	80044c4 <xQueueGenericSendFromISR+0x7c>
			xReturn = pdPASS;
 800450e:	2001      	movs	r0, #1
 8004510:	e7d8      	b.n	80044c4 <xQueueGenericSendFromISR+0x7c>
 8004512:	2001      	movs	r0, #1
 8004514:	e7d6      	b.n	80044c4 <xQueueGenericSendFromISR+0x7c>

08004516 <xQueueGiveFromISR>:
	configASSERT( pxQueue );
 8004516:	b168      	cbz	r0, 8004534 <xQueueGiveFromISR+0x1e>
{
 8004518:	b570      	push	{r4, r5, r6, lr}
 800451a:	460c      	mov	r4, r1
 800451c:	4605      	mov	r5, r0
	configASSERT( pxQueue->uxItemSize == 0 );
 800451e:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8004520:	b18b      	cbz	r3, 8004546 <xQueueGiveFromISR+0x30>
	__asm volatile
 8004522:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004526:	f383 8811 	msr	BASEPRI, r3
 800452a:	f3bf 8f6f 	isb	sy
 800452e:	f3bf 8f4f 	dsb	sy
 8004532:	e7fe      	b.n	8004532 <xQueueGiveFromISR+0x1c>
 8004534:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004538:	f383 8811 	msr	BASEPRI, r3
 800453c:	f3bf 8f6f 	isb	sy
 8004540:	f3bf 8f4f 	dsb	sy
	configASSERT( pxQueue );
 8004544:	e7fe      	b.n	8004544 <xQueueGiveFromISR+0x2e>
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 8004546:	6803      	ldr	r3, [r0, #0]
 8004548:	b1eb      	cbz	r3, 8004586 <xQueueGiveFromISR+0x70>
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800454a:	f001 fc2b 	bl	8005da4 <vPortValidateInterruptPriority>
	__asm volatile
 800454e:	f3ef 8611 	mrs	r6, BASEPRI
 8004552:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004556:	f383 8811 	msr	BASEPRI, r3
 800455a:	f3bf 8f6f 	isb	sy
 800455e:	f3bf 8f4f 	dsb	sy
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004562:	6baa      	ldr	r2, [r5, #56]	; 0x38
		if( uxMessagesWaiting < pxQueue->uxLength )
 8004564:	6beb      	ldr	r3, [r5, #60]	; 0x3c
 8004566:	4293      	cmp	r3, r2
 8004568:	d926      	bls.n	80045b8 <xQueueGiveFromISR+0xa2>
			const int8_t cTxLock = pxQueue->cTxLock;
 800456a:	f895 3045 	ldrb.w	r3, [r5, #69]	; 0x45
 800456e:	b25b      	sxtb	r3, r3
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8004570:	3201      	adds	r2, #1
 8004572:	63aa      	str	r2, [r5, #56]	; 0x38
			if( cTxLock == queueUNLOCKED )
 8004574:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004578:	d011      	beq.n	800459e <xQueueGiveFromISR+0x88>
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800457a:	3301      	adds	r3, #1
 800457c:	b25b      	sxtb	r3, r3
 800457e:	f885 3045 	strb.w	r3, [r5, #69]	; 0x45
			xReturn = pdPASS;
 8004582:	2001      	movs	r0, #1
 8004584:	e019      	b.n	80045ba <xQueueGiveFromISR+0xa4>
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 8004586:	6883      	ldr	r3, [r0, #8]
 8004588:	2b00      	cmp	r3, #0
 800458a:	d0de      	beq.n	800454a <xQueueGiveFromISR+0x34>
	__asm volatile
 800458c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004590:	f383 8811 	msr	BASEPRI, r3
 8004594:	f3bf 8f6f 	isb	sy
 8004598:	f3bf 8f4f 	dsb	sy
 800459c:	e7fe      	b.n	800459c <xQueueGiveFromISR+0x86>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800459e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80045a0:	b90b      	cbnz	r3, 80045a6 <xQueueGiveFromISR+0x90>
			xReturn = pdPASS;
 80045a2:	2001      	movs	r0, #1
 80045a4:	e009      	b.n	80045ba <xQueueGiveFromISR+0xa4>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80045a6:	f105 0024 	add.w	r0, r5, #36	; 0x24
 80045aa:	f000 febb 	bl	8005324 <xTaskRemoveFromEventList>
 80045ae:	b138      	cbz	r0, 80045c0 <xQueueGiveFromISR+0xaa>
							if( pxHigherPriorityTaskWoken != NULL )
 80045b0:	b144      	cbz	r4, 80045c4 <xQueueGiveFromISR+0xae>
								*pxHigherPriorityTaskWoken = pdTRUE;
 80045b2:	2001      	movs	r0, #1
 80045b4:	6020      	str	r0, [r4, #0]
 80045b6:	e000      	b.n	80045ba <xQueueGiveFromISR+0xa4>
			xReturn = errQUEUE_FULL;
 80045b8:	2000      	movs	r0, #0
	__asm volatile
 80045ba:	f386 8811 	msr	BASEPRI, r6
}
 80045be:	bd70      	pop	{r4, r5, r6, pc}
			xReturn = pdPASS;
 80045c0:	2001      	movs	r0, #1
 80045c2:	e7fa      	b.n	80045ba <xQueueGiveFromISR+0xa4>
 80045c4:	2001      	movs	r0, #1
 80045c6:	e7f8      	b.n	80045ba <xQueueGiveFromISR+0xa4>

080045c8 <xQueueReceive>:
{
 80045c8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80045cc:	b084      	sub	sp, #16
 80045ce:	9201      	str	r2, [sp, #4]
	configASSERT( ( pxQueue ) );
 80045d0:	b180      	cbz	r0, 80045f4 <xQueueReceive+0x2c>
 80045d2:	460e      	mov	r6, r1
 80045d4:	4604      	mov	r4, r0
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80045d6:	b1b1      	cbz	r1, 8004606 <xQueueReceive+0x3e>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80045d8:	f000 ff42 	bl	8005460 <xTaskGetSchedulerState>
 80045dc:	b9f8      	cbnz	r0, 800461e <xQueueReceive+0x56>
 80045de:	9b01      	ldr	r3, [sp, #4]
 80045e0:	b30b      	cbz	r3, 8004626 <xQueueReceive+0x5e>
	__asm volatile
 80045e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80045e6:	f383 8811 	msr	BASEPRI, r3
 80045ea:	f3bf 8f6f 	isb	sy
 80045ee:	f3bf 8f4f 	dsb	sy
 80045f2:	e7fe      	b.n	80045f2 <xQueueReceive+0x2a>
 80045f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80045f8:	f383 8811 	msr	BASEPRI, r3
 80045fc:	f3bf 8f6f 	isb	sy
 8004600:	f3bf 8f4f 	dsb	sy
	configASSERT( ( pxQueue ) );
 8004604:	e7fe      	b.n	8004604 <xQueueReceive+0x3c>
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004606:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8004608:	2b00      	cmp	r3, #0
 800460a:	d0e5      	beq.n	80045d8 <xQueueReceive+0x10>
 800460c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004610:	f383 8811 	msr	BASEPRI, r3
 8004614:	f3bf 8f6f 	isb	sy
 8004618:	f3bf 8f4f 	dsb	sy
 800461c:	e7fe      	b.n	800461c <xQueueReceive+0x54>
 800461e:	f04f 0800 	mov.w	r8, #0
		prvLockQueue( pxQueue );
 8004622:	2700      	movs	r7, #0
 8004624:	e03b      	b.n	800469e <xQueueReceive+0xd6>
 8004626:	f04f 0800 	mov.w	r8, #0
 800462a:	e7fa      	b.n	8004622 <xQueueReceive+0x5a>
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800462c:	4631      	mov	r1, r6
 800462e:	4620      	mov	r0, r4
 8004630:	f7ff fca8 	bl	8003f84 <prvCopyDataFromQueue>
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8004634:	3d01      	subs	r5, #1
 8004636:	63a5      	str	r5, [r4, #56]	; 0x38
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004638:	6923      	ldr	r3, [r4, #16]
 800463a:	b92b      	cbnz	r3, 8004648 <xQueueReceive+0x80>
				taskEXIT_CRITICAL();
 800463c:	f001 faac 	bl	8005b98 <vPortExitCritical>
				return pdPASS;
 8004640:	2001      	movs	r0, #1
}
 8004642:	b004      	add	sp, #16
 8004644:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004648:	f104 0010 	add.w	r0, r4, #16
 800464c:	f000 fe6a 	bl	8005324 <xTaskRemoveFromEventList>
 8004650:	2800      	cmp	r0, #0
 8004652:	d0f3      	beq.n	800463c <xQueueReceive+0x74>
						queueYIELD_IF_USING_PREEMPTION();
 8004654:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8004658:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800465c:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 8004660:	f3bf 8f4f 	dsb	sy
 8004664:	f3bf 8f6f 	isb	sy
 8004668:	e7e8      	b.n	800463c <xQueueReceive+0x74>
					taskEXIT_CRITICAL();
 800466a:	f001 fa95 	bl	8005b98 <vPortExitCritical>
					return errQUEUE_EMPTY;
 800466e:	2000      	movs	r0, #0
 8004670:	e7e7      	b.n	8004642 <xQueueReceive+0x7a>
					vTaskInternalSetTimeOutState( &xTimeOut );
 8004672:	a802      	add	r0, sp, #8
 8004674:	f000 fe9a 	bl	80053ac <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8004678:	e01c      	b.n	80046b4 <xQueueReceive+0xec>
				prvUnlockQueue( pxQueue );
 800467a:	4620      	mov	r0, r4
 800467c:	f7ff fc94 	bl	8003fa8 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8004680:	f000 fd1c 	bl	80050bc <xTaskResumeAll>
 8004684:	e009      	b.n	800469a <xQueueReceive+0xd2>
			prvUnlockQueue( pxQueue );
 8004686:	4620      	mov	r0, r4
 8004688:	f7ff fc8e 	bl	8003fa8 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800468c:	f000 fd16 	bl	80050bc <xTaskResumeAll>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004690:	4620      	mov	r0, r4
 8004692:	f7ff fc31 	bl	8003ef8 <prvIsQueueEmpty>
 8004696:	2800      	cmp	r0, #0
 8004698:	d146      	bne.n	8004728 <xQueueReceive+0x160>
 800469a:	f04f 0801 	mov.w	r8, #1
		taskENTER_CRITICAL();
 800469e:	f001 fa59 	bl	8005b54 <vPortEnterCritical>
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80046a2:	6ba5      	ldr	r5, [r4, #56]	; 0x38
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80046a4:	2d00      	cmp	r5, #0
 80046a6:	d1c1      	bne.n	800462c <xQueueReceive+0x64>
				if( xTicksToWait == ( TickType_t ) 0 )
 80046a8:	9b01      	ldr	r3, [sp, #4]
 80046aa:	2b00      	cmp	r3, #0
 80046ac:	d0dd      	beq.n	800466a <xQueueReceive+0xa2>
				else if( xEntryTimeSet == pdFALSE )
 80046ae:	f1b8 0f00 	cmp.w	r8, #0
 80046b2:	d0de      	beq.n	8004672 <xQueueReceive+0xaa>
		taskEXIT_CRITICAL();
 80046b4:	f001 fa70 	bl	8005b98 <vPortExitCritical>
		vTaskSuspendAll();
 80046b8:	f000 fc50 	bl	8004f5c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80046bc:	f001 fa4a 	bl	8005b54 <vPortEnterCritical>
 80046c0:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 80046c4:	b25b      	sxtb	r3, r3
 80046c6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80046ca:	bf08      	it	eq
 80046cc:	f884 7044 	strbeq.w	r7, [r4, #68]	; 0x44
 80046d0:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 80046d4:	b25b      	sxtb	r3, r3
 80046d6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80046da:	bf08      	it	eq
 80046dc:	f884 7045 	strbeq.w	r7, [r4, #69]	; 0x45
 80046e0:	f001 fa5a 	bl	8005b98 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80046e4:	a901      	add	r1, sp, #4
 80046e6:	a802      	add	r0, sp, #8
 80046e8:	f000 fe6c 	bl	80053c4 <xTaskCheckForTimeOut>
 80046ec:	2800      	cmp	r0, #0
 80046ee:	d1ca      	bne.n	8004686 <xQueueReceive+0xbe>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80046f0:	4620      	mov	r0, r4
 80046f2:	f7ff fc01 	bl	8003ef8 <prvIsQueueEmpty>
 80046f6:	2800      	cmp	r0, #0
 80046f8:	d0bf      	beq.n	800467a <xQueueReceive+0xb2>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80046fa:	9901      	ldr	r1, [sp, #4]
 80046fc:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8004700:	f000 fdda 	bl	80052b8 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8004704:	4620      	mov	r0, r4
 8004706:	f7ff fc4f 	bl	8003fa8 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800470a:	f000 fcd7 	bl	80050bc <xTaskResumeAll>
 800470e:	2800      	cmp	r0, #0
 8004710:	d1c3      	bne.n	800469a <xQueueReceive+0xd2>
					portYIELD_WITHIN_API();
 8004712:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8004716:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800471a:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 800471e:	f3bf 8f4f 	dsb	sy
 8004722:	f3bf 8f6f 	isb	sy
 8004726:	e7b8      	b.n	800469a <xQueueReceive+0xd2>
				return errQUEUE_EMPTY;
 8004728:	2000      	movs	r0, #0
 800472a:	e78a      	b.n	8004642 <xQueueReceive+0x7a>

0800472c <xQueueSemaphoreTake>:
{
 800472c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800472e:	b085      	sub	sp, #20
 8004730:	9101      	str	r1, [sp, #4]
	configASSERT( ( pxQueue ) );
 8004732:	b158      	cbz	r0, 800474c <xQueueSemaphoreTake+0x20>
 8004734:	4604      	mov	r4, r0
	configASSERT( pxQueue->uxItemSize == 0 );
 8004736:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8004738:	b18b      	cbz	r3, 800475e <xQueueSemaphoreTake+0x32>
 800473a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800473e:	f383 8811 	msr	BASEPRI, r3
 8004742:	f3bf 8f6f 	isb	sy
 8004746:	f3bf 8f4f 	dsb	sy
 800474a:	e7fe      	b.n	800474a <xQueueSemaphoreTake+0x1e>
 800474c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004750:	f383 8811 	msr	BASEPRI, r3
 8004754:	f3bf 8f6f 	isb	sy
 8004758:	f3bf 8f4f 	dsb	sy
	configASSERT( ( pxQueue ) );
 800475c:	e7fe      	b.n	800475c <xQueueSemaphoreTake+0x30>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800475e:	f000 fe7f 	bl	8005460 <xTaskGetSchedulerState>
 8004762:	b950      	cbnz	r0, 800477a <xQueueSemaphoreTake+0x4e>
 8004764:	9b01      	ldr	r3, [sp, #4]
 8004766:	b163      	cbz	r3, 8004782 <xQueueSemaphoreTake+0x56>
 8004768:	f04f 0350 	mov.w	r3, #80	; 0x50
 800476c:	f383 8811 	msr	BASEPRI, r3
 8004770:	f3bf 8f6f 	isb	sy
 8004774:	f3bf 8f4f 	dsb	sy
 8004778:	e7fe      	b.n	8004778 <xQueueSemaphoreTake+0x4c>
 800477a:	2600      	movs	r6, #0
 800477c:	4637      	mov	r7, r6
		prvLockQueue( pxQueue );
 800477e:	2500      	movs	r5, #0
 8004780:	e04e      	b.n	8004820 <xQueueSemaphoreTake+0xf4>
 8004782:	2600      	movs	r6, #0
 8004784:	4637      	mov	r7, r6
 8004786:	e7fa      	b.n	800477e <xQueueSemaphoreTake+0x52>
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8004788:	3b01      	subs	r3, #1
 800478a:	63a3      	str	r3, [r4, #56]	; 0x38
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800478c:	6823      	ldr	r3, [r4, #0]
 800478e:	b13b      	cbz	r3, 80047a0 <xQueueSemaphoreTake+0x74>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004790:	6923      	ldr	r3, [r4, #16]
 8004792:	b94b      	cbnz	r3, 80047a8 <xQueueSemaphoreTake+0x7c>
				taskEXIT_CRITICAL();
 8004794:	f001 fa00 	bl	8005b98 <vPortExitCritical>
				return pdPASS;
 8004798:	2601      	movs	r6, #1
}
 800479a:	4630      	mov	r0, r6
 800479c:	b005      	add	sp, #20
 800479e:	bdf0      	pop	{r4, r5, r6, r7, pc}
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 80047a0:	f000 ff50 	bl	8005644 <pvTaskIncrementMutexHeldCount>
 80047a4:	60a0      	str	r0, [r4, #8]
 80047a6:	e7f3      	b.n	8004790 <xQueueSemaphoreTake+0x64>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80047a8:	f104 0010 	add.w	r0, r4, #16
 80047ac:	f000 fdba 	bl	8005324 <xTaskRemoveFromEventList>
 80047b0:	2800      	cmp	r0, #0
 80047b2:	d0ef      	beq.n	8004794 <xQueueSemaphoreTake+0x68>
						queueYIELD_IF_USING_PREEMPTION();
 80047b4:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 80047b8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80047bc:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 80047c0:	f3bf 8f4f 	dsb	sy
 80047c4:	f3bf 8f6f 	isb	sy
 80047c8:	e7e4      	b.n	8004794 <xQueueSemaphoreTake+0x68>
						configASSERT( xInheritanceOccurred == pdFALSE );
 80047ca:	b146      	cbz	r6, 80047de <xQueueSemaphoreTake+0xb2>
 80047cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80047d0:	f383 8811 	msr	BASEPRI, r3
 80047d4:	f3bf 8f6f 	isb	sy
 80047d8:	f3bf 8f4f 	dsb	sy
 80047dc:	e7fe      	b.n	80047dc <xQueueSemaphoreTake+0xb0>
					taskEXIT_CRITICAL();
 80047de:	f001 f9db 	bl	8005b98 <vPortExitCritical>
					return errQUEUE_EMPTY;
 80047e2:	e7da      	b.n	800479a <xQueueSemaphoreTake+0x6e>
					vTaskInternalSetTimeOutState( &xTimeOut );
 80047e4:	a802      	add	r0, sp, #8
 80047e6:	f000 fde1 	bl	80053ac <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80047ea:	e023      	b.n	8004834 <xQueueSemaphoreTake+0x108>
						taskENTER_CRITICAL();
 80047ec:	f001 f9b2 	bl	8005b54 <vPortEnterCritical>
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 80047f0:	68a0      	ldr	r0, [r4, #8]
 80047f2:	f000 fe45 	bl	8005480 <xTaskPriorityInherit>
 80047f6:	4606      	mov	r6, r0
						taskEXIT_CRITICAL();
 80047f8:	f001 f9ce 	bl	8005b98 <vPortExitCritical>
 80047fc:	e040      	b.n	8004880 <xQueueSemaphoreTake+0x154>
				prvUnlockQueue( pxQueue );
 80047fe:	4620      	mov	r0, r4
 8004800:	f7ff fbd2 	bl	8003fa8 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8004804:	f000 fc5a 	bl	80050bc <xTaskResumeAll>
 8004808:	e009      	b.n	800481e <xQueueSemaphoreTake+0xf2>
			prvUnlockQueue( pxQueue );
 800480a:	4620      	mov	r0, r4
 800480c:	f7ff fbcc 	bl	8003fa8 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8004810:	f000 fc54 	bl	80050bc <xTaskResumeAll>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004814:	4620      	mov	r0, r4
 8004816:	f7ff fb6f 	bl	8003ef8 <prvIsQueueEmpty>
 800481a:	2800      	cmp	r0, #0
 800481c:	d147      	bne.n	80048ae <xQueueSemaphoreTake+0x182>
 800481e:	2701      	movs	r7, #1
		taskENTER_CRITICAL();
 8004820:	f001 f998 	bl	8005b54 <vPortEnterCritical>
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8004824:	6ba3      	ldr	r3, [r4, #56]	; 0x38
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8004826:	2b00      	cmp	r3, #0
 8004828:	d1ae      	bne.n	8004788 <xQueueSemaphoreTake+0x5c>
				if( xTicksToWait == ( TickType_t ) 0 )
 800482a:	9b01      	ldr	r3, [sp, #4]
 800482c:	2b00      	cmp	r3, #0
 800482e:	d0cc      	beq.n	80047ca <xQueueSemaphoreTake+0x9e>
				else if( xEntryTimeSet == pdFALSE )
 8004830:	2f00      	cmp	r7, #0
 8004832:	d0d7      	beq.n	80047e4 <xQueueSemaphoreTake+0xb8>
		taskEXIT_CRITICAL();
 8004834:	f001 f9b0 	bl	8005b98 <vPortExitCritical>
		vTaskSuspendAll();
 8004838:	f000 fb90 	bl	8004f5c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800483c:	f001 f98a 	bl	8005b54 <vPortEnterCritical>
 8004840:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8004844:	b25b      	sxtb	r3, r3
 8004846:	f1b3 3fff 	cmp.w	r3, #4294967295
 800484a:	bf08      	it	eq
 800484c:	f884 5044 	strbeq.w	r5, [r4, #68]	; 0x44
 8004850:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 8004854:	b25b      	sxtb	r3, r3
 8004856:	f1b3 3fff 	cmp.w	r3, #4294967295
 800485a:	bf08      	it	eq
 800485c:	f884 5045 	strbeq.w	r5, [r4, #69]	; 0x45
 8004860:	f001 f99a 	bl	8005b98 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8004864:	a901      	add	r1, sp, #4
 8004866:	a802      	add	r0, sp, #8
 8004868:	f000 fdac 	bl	80053c4 <xTaskCheckForTimeOut>
 800486c:	2800      	cmp	r0, #0
 800486e:	d1cc      	bne.n	800480a <xQueueSemaphoreTake+0xde>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004870:	4620      	mov	r0, r4
 8004872:	f7ff fb41 	bl	8003ef8 <prvIsQueueEmpty>
 8004876:	2800      	cmp	r0, #0
 8004878:	d0c1      	beq.n	80047fe <xQueueSemaphoreTake+0xd2>
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800487a:	6823      	ldr	r3, [r4, #0]
 800487c:	2b00      	cmp	r3, #0
 800487e:	d0b5      	beq.n	80047ec <xQueueSemaphoreTake+0xc0>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8004880:	9901      	ldr	r1, [sp, #4]
 8004882:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8004886:	f000 fd17 	bl	80052b8 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800488a:	4620      	mov	r0, r4
 800488c:	f7ff fb8c 	bl	8003fa8 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8004890:	f000 fc14 	bl	80050bc <xTaskResumeAll>
 8004894:	2800      	cmp	r0, #0
 8004896:	d1c2      	bne.n	800481e <xQueueSemaphoreTake+0xf2>
					portYIELD_WITHIN_API();
 8004898:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 800489c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80048a0:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 80048a4:	f3bf 8f4f 	dsb	sy
 80048a8:	f3bf 8f6f 	isb	sy
 80048ac:	e7b7      	b.n	800481e <xQueueSemaphoreTake+0xf2>
					if( xInheritanceOccurred != pdFALSE )
 80048ae:	2e00      	cmp	r6, #0
 80048b0:	f43f af73 	beq.w	800479a <xQueueSemaphoreTake+0x6e>
						taskENTER_CRITICAL();
 80048b4:	f001 f94e 	bl	8005b54 <vPortEnterCritical>
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 80048b8:	6a61      	ldr	r1, [r4, #36]	; 0x24
 80048ba:	b119      	cbz	r1, 80048c4 <xQueueSemaphoreTake+0x198>
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 80048bc:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80048be:	6819      	ldr	r1, [r3, #0]
 80048c0:	f1c1 0138 	rsb	r1, r1, #56	; 0x38
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 80048c4:	68a0      	ldr	r0, [r4, #8]
 80048c6:	f000 fe6d 	bl	80055a4 <vTaskPriorityDisinheritAfterTimeout>
						taskEXIT_CRITICAL();
 80048ca:	f001 f965 	bl	8005b98 <vPortExitCritical>
				return errQUEUE_EMPTY;
 80048ce:	2600      	movs	r6, #0
 80048d0:	e763      	b.n	800479a <xQueueSemaphoreTake+0x6e>

080048d2 <xQueueTakeMutexRecursive>:
		configASSERT( pxMutex );
 80048d2:	b180      	cbz	r0, 80048f6 <xQueueTakeMutexRecursive+0x24>
	{
 80048d4:	b570      	push	{r4, r5, r6, lr}
 80048d6:	460c      	mov	r4, r1
 80048d8:	4605      	mov	r5, r0
		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 80048da:	6886      	ldr	r6, [r0, #8]
 80048dc:	f000 fdba 	bl	8005454 <xTaskGetCurrentTaskHandle>
 80048e0:	4286      	cmp	r6, r0
 80048e2:	d011      	beq.n	8004908 <xQueueTakeMutexRecursive+0x36>
			xReturn = xQueueSemaphoreTake( pxMutex, xTicksToWait );
 80048e4:	4621      	mov	r1, r4
 80048e6:	4628      	mov	r0, r5
 80048e8:	f7ff ff20 	bl	800472c <xQueueSemaphoreTake>
			if( xReturn != pdFAIL )
 80048ec:	b180      	cbz	r0, 8004910 <xQueueTakeMutexRecursive+0x3e>
				( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 80048ee:	68eb      	ldr	r3, [r5, #12]
 80048f0:	3301      	adds	r3, #1
 80048f2:	60eb      	str	r3, [r5, #12]
		return xReturn;
 80048f4:	e00c      	b.n	8004910 <xQueueTakeMutexRecursive+0x3e>
 80048f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80048fa:	f383 8811 	msr	BASEPRI, r3
 80048fe:	f3bf 8f6f 	isb	sy
 8004902:	f3bf 8f4f 	dsb	sy
		configASSERT( pxMutex );
 8004906:	e7fe      	b.n	8004906 <xQueueTakeMutexRecursive+0x34>
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 8004908:	68eb      	ldr	r3, [r5, #12]
 800490a:	3301      	adds	r3, #1
 800490c:	60eb      	str	r3, [r5, #12]
			xReturn = pdPASS;
 800490e:	2001      	movs	r0, #1
	}
 8004910:	bd70      	pop	{r4, r5, r6, pc}

08004912 <xQueueReceiveFromISR>:
{
 8004912:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	configASSERT( pxQueue );
 8004916:	b1b0      	cbz	r0, 8004946 <xQueueReceiveFromISR+0x34>
 8004918:	460d      	mov	r5, r1
 800491a:	4616      	mov	r6, r2
 800491c:	4604      	mov	r4, r0
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800491e:	b1d9      	cbz	r1, 8004958 <xQueueReceiveFromISR+0x46>
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8004920:	f001 fa40 	bl	8005da4 <vPortValidateInterruptPriority>
	__asm volatile
 8004924:	f3ef 8811 	mrs	r8, BASEPRI
 8004928:	f04f 0350 	mov.w	r3, #80	; 0x50
 800492c:	f383 8811 	msr	BASEPRI, r3
 8004930:	f3bf 8f6f 	isb	sy
 8004934:	f3bf 8f4f 	dsb	sy
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004938:	6ba7      	ldr	r7, [r4, #56]	; 0x38
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800493a:	b9cf      	cbnz	r7, 8004970 <xQueueReceiveFromISR+0x5e>
			xReturn = pdFAIL;
 800493c:	2000      	movs	r0, #0
	__asm volatile
 800493e:	f388 8811 	msr	BASEPRI, r8
}
 8004942:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	__asm volatile
 8004946:	f04f 0350 	mov.w	r3, #80	; 0x50
 800494a:	f383 8811 	msr	BASEPRI, r3
 800494e:	f3bf 8f6f 	isb	sy
 8004952:	f3bf 8f4f 	dsb	sy
	configASSERT( pxQueue );
 8004956:	e7fe      	b.n	8004956 <xQueueReceiveFromISR+0x44>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004958:	6c03      	ldr	r3, [r0, #64]	; 0x40
 800495a:	2b00      	cmp	r3, #0
 800495c:	d0e0      	beq.n	8004920 <xQueueReceiveFromISR+0xe>
 800495e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004962:	f383 8811 	msr	BASEPRI, r3
 8004966:	f3bf 8f6f 	isb	sy
 800496a:	f3bf 8f4f 	dsb	sy
 800496e:	e7fe      	b.n	800496e <xQueueReceiveFromISR+0x5c>
			const int8_t cRxLock = pxQueue->cRxLock;
 8004970:	f894 9044 	ldrb.w	r9, [r4, #68]	; 0x44
 8004974:	fa4f f989 	sxtb.w	r9, r9
			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8004978:	4629      	mov	r1, r5
 800497a:	4620      	mov	r0, r4
 800497c:	f7ff fb02 	bl	8003f84 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8004980:	3f01      	subs	r7, #1
 8004982:	63a7      	str	r7, [r4, #56]	; 0x38
			if( cRxLock == queueUNLOCKED )
 8004984:	f1b9 3fff 	cmp.w	r9, #4294967295
 8004988:	d006      	beq.n	8004998 <xQueueReceiveFromISR+0x86>
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 800498a:	f109 0301 	add.w	r3, r9, #1
 800498e:	b25b      	sxtb	r3, r3
 8004990:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
			xReturn = pdPASS;
 8004994:	2001      	movs	r0, #1
 8004996:	e7d2      	b.n	800493e <xQueueReceiveFromISR+0x2c>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004998:	6923      	ldr	r3, [r4, #16]
 800499a:	b90b      	cbnz	r3, 80049a0 <xQueueReceiveFromISR+0x8e>
			xReturn = pdPASS;
 800499c:	2001      	movs	r0, #1
 800499e:	e7ce      	b.n	800493e <xQueueReceiveFromISR+0x2c>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80049a0:	f104 0010 	add.w	r0, r4, #16
 80049a4:	f000 fcbe 	bl	8005324 <xTaskRemoveFromEventList>
 80049a8:	b118      	cbz	r0, 80049b2 <xQueueReceiveFromISR+0xa0>
						if( pxHigherPriorityTaskWoken != NULL )
 80049aa:	b126      	cbz	r6, 80049b6 <xQueueReceiveFromISR+0xa4>
							*pxHigherPriorityTaskWoken = pdTRUE;
 80049ac:	2001      	movs	r0, #1
 80049ae:	6030      	str	r0, [r6, #0]
 80049b0:	e7c5      	b.n	800493e <xQueueReceiveFromISR+0x2c>
			xReturn = pdPASS;
 80049b2:	2001      	movs	r0, #1
 80049b4:	e7c3      	b.n	800493e <xQueueReceiveFromISR+0x2c>
 80049b6:	2001      	movs	r0, #1
 80049b8:	e7c1      	b.n	800493e <xQueueReceiveFromISR+0x2c>

080049ba <uxQueueMessagesWaiting>:
	configASSERT( xQueue );
 80049ba:	b140      	cbz	r0, 80049ce <uxQueueMessagesWaiting+0x14>
{
 80049bc:	b510      	push	{r4, lr}
 80049be:	4604      	mov	r4, r0
	taskENTER_CRITICAL();
 80049c0:	f001 f8c8 	bl	8005b54 <vPortEnterCritical>
		uxReturn = ( ( Queue_t * ) xQueue )->uxMessagesWaiting;
 80049c4:	6ba4      	ldr	r4, [r4, #56]	; 0x38
	taskEXIT_CRITICAL();
 80049c6:	f001 f8e7 	bl	8005b98 <vPortExitCritical>
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 80049ca:	4620      	mov	r0, r4
 80049cc:	bd10      	pop	{r4, pc}
 80049ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80049d2:	f383 8811 	msr	BASEPRI, r3
 80049d6:	f3bf 8f6f 	isb	sy
 80049da:	f3bf 8f4f 	dsb	sy
	configASSERT( xQueue );
 80049de:	e7fe      	b.n	80049de <uxQueueMessagesWaiting+0x24>

080049e0 <uxQueueMessagesWaitingFromISR>:
	configASSERT( pxQueue );
 80049e0:	b108      	cbz	r0, 80049e6 <uxQueueMessagesWaitingFromISR+0x6>
	uxReturn = pxQueue->uxMessagesWaiting;
 80049e2:	6b80      	ldr	r0, [r0, #56]	; 0x38
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 80049e4:	4770      	bx	lr
 80049e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80049ea:	f383 8811 	msr	BASEPRI, r3
 80049ee:	f3bf 8f6f 	isb	sy
 80049f2:	f3bf 8f4f 	dsb	sy
	configASSERT( pxQueue );
 80049f6:	e7fe      	b.n	80049f6 <uxQueueMessagesWaitingFromISR+0x16>

080049f8 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 80049f8:	b410      	push	{r4}
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80049fa:	2300      	movs	r3, #0
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 80049fc:	4c08      	ldr	r4, [pc, #32]	; (8004a20 <vQueueAddToRegistry+0x28>)
 80049fe:	f854 2033 	ldr.w	r2, [r4, r3, lsl #3]
 8004a02:	b12a      	cbz	r2, 8004a10 <vQueueAddToRegistry+0x18>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8004a04:	3301      	adds	r3, #1
 8004a06:	2b08      	cmp	r3, #8
 8004a08:	d1f9      	bne.n	80049fe <vQueueAddToRegistry+0x6>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8004a0a:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004a0e:	4770      	bx	lr
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8004a10:	4a03      	ldr	r2, [pc, #12]	; (8004a20 <vQueueAddToRegistry+0x28>)
 8004a12:	f842 1033 	str.w	r1, [r2, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8004a16:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8004a1a:	6058      	str	r0, [r3, #4]
				break;
 8004a1c:	e7f5      	b.n	8004a0a <vQueueAddToRegistry+0x12>
 8004a1e:	bf00      	nop
 8004a20:	20006d50 	.word	0x20006d50

08004a24 <vQueueUnregisterQueue>:
	{
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8004a24:	2300      	movs	r3, #0
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 8004a26:	4909      	ldr	r1, [pc, #36]	; (8004a4c <vQueueUnregisterQueue+0x28>)
 8004a28:	eb01 02c3 	add.w	r2, r1, r3, lsl #3
 8004a2c:	6852      	ldr	r2, [r2, #4]
 8004a2e:	4282      	cmp	r2, r0
 8004a30:	d003      	beq.n	8004a3a <vQueueUnregisterQueue+0x16>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8004a32:	3301      	adds	r3, #1
 8004a34:	2b08      	cmp	r3, #8
 8004a36:	d1f7      	bne.n	8004a28 <vQueueUnregisterQueue+0x4>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 8004a38:	4770      	bx	lr
				xQueueRegistry[ ux ].pcQueueName = NULL;
 8004a3a:	4a04      	ldr	r2, [pc, #16]	; (8004a4c <vQueueUnregisterQueue+0x28>)
 8004a3c:	2100      	movs	r1, #0
 8004a3e:	f842 1033 	str.w	r1, [r2, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 8004a42:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8004a46:	6059      	str	r1, [r3, #4]
				break;
 8004a48:	4770      	bx	lr
 8004a4a:	bf00      	nop
 8004a4c:	20006d50 	.word	0x20006d50

08004a50 <vQueueDelete>:
	configASSERT( pxQueue );
 8004a50:	b138      	cbz	r0, 8004a62 <vQueueDelete+0x12>
{
 8004a52:	b510      	push	{r4, lr}
 8004a54:	4604      	mov	r4, r0
		vQueueUnregisterQueue( pxQueue );
 8004a56:	f7ff ffe5 	bl	8004a24 <vQueueUnregisterQueue>
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 8004a5a:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 8004a5e:	b14b      	cbz	r3, 8004a74 <vQueueDelete+0x24>
}
 8004a60:	bd10      	pop	{r4, pc}
 8004a62:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a66:	f383 8811 	msr	BASEPRI, r3
 8004a6a:	f3bf 8f6f 	isb	sy
 8004a6e:	f3bf 8f4f 	dsb	sy
	configASSERT( pxQueue );
 8004a72:	e7fe      	b.n	8004a72 <vQueueDelete+0x22>
			vPortFree( pxQueue );
 8004a74:	4620      	mov	r0, r4
 8004a76:	f001 fa8f 	bl	8005f98 <vPortFree>
}
 8004a7a:	e7f1      	b.n	8004a60 <vQueueDelete+0x10>

08004a7c <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8004a7c:	b570      	push	{r4, r5, r6, lr}
 8004a7e:	4604      	mov	r4, r0
 8004a80:	460d      	mov	r5, r1
 8004a82:	4616      	mov	r6, r2
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8004a84:	f001 f866 	bl	8005b54 <vPortEnterCritical>
 8004a88:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8004a8c:	b25b      	sxtb	r3, r3
 8004a8e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004a92:	bf04      	itt	eq
 8004a94:	2300      	moveq	r3, #0
 8004a96:	f884 3044 	strbeq.w	r3, [r4, #68]	; 0x44
 8004a9a:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 8004a9e:	b25b      	sxtb	r3, r3
 8004aa0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004aa4:	bf04      	itt	eq
 8004aa6:	2300      	moveq	r3, #0
 8004aa8:	f884 3045 	strbeq.w	r3, [r4, #69]	; 0x45
 8004aac:	f001 f874 	bl	8005b98 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8004ab0:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8004ab2:	b11b      	cbz	r3, 8004abc <vQueueWaitForMessageRestricted+0x40>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8004ab4:	4620      	mov	r0, r4
 8004ab6:	f7ff fa77 	bl	8003fa8 <prvUnlockQueue>
	}
 8004aba:	bd70      	pop	{r4, r5, r6, pc}
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8004abc:	4632      	mov	r2, r6
 8004abe:	4629      	mov	r1, r5
 8004ac0:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8004ac4:	f000 fc10 	bl	80052e8 <vTaskPlaceOnEventListRestricted>
 8004ac8:	e7f4      	b.n	8004ab4 <vQueueWaitForMessageRestricted+0x38>
	...

08004acc <prvResetNextTaskUnblockTime>:

static void prvResetNextTaskUnblockTime( void )
{
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004acc:	4b08      	ldr	r3, [pc, #32]	; (8004af0 <prvResetNextTaskUnblockTime+0x24>)
 8004ace:	681b      	ldr	r3, [r3, #0]
 8004ad0:	681b      	ldr	r3, [r3, #0]
 8004ad2:	b923      	cbnz	r3, 8004ade <prvResetNextTaskUnblockTime+0x12>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8004ad4:	4b07      	ldr	r3, [pc, #28]	; (8004af4 <prvResetNextTaskUnblockTime+0x28>)
 8004ad6:	f04f 32ff 	mov.w	r2, #4294967295
 8004ada:	601a      	str	r2, [r3, #0]
 8004adc:	4770      	bx	lr
	{
		/* The new current delayed list is not empty, get the value of
		the item at the head of the delayed list.  This is the time at
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004ade:	4b04      	ldr	r3, [pc, #16]	; (8004af0 <prvResetNextTaskUnblockTime+0x24>)
 8004ae0:	681b      	ldr	r3, [r3, #0]
 8004ae2:	68db      	ldr	r3, [r3, #12]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8004ae4:	68db      	ldr	r3, [r3, #12]
 8004ae6:	685a      	ldr	r2, [r3, #4]
 8004ae8:	4b02      	ldr	r3, [pc, #8]	; (8004af4 <prvResetNextTaskUnblockTime+0x28>)
 8004aea:	601a      	str	r2, [r3, #0]
	}
}
 8004aec:	4770      	bx	lr
 8004aee:	bf00      	nop
 8004af0:	20006d94 	.word	0x20006d94
 8004af4:	20007238 	.word	0x20007238

08004af8 <prvInitialiseNewTask>:
{
 8004af8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004afc:	4606      	mov	r6, r0
 8004afe:	4689      	mov	r9, r1
 8004b00:	461f      	mov	r7, r3
 8004b02:	f8dd 8024 	ldr.w	r8, [sp, #36]	; 0x24
 8004b06:	9c0a      	ldr	r4, [sp, #40]	; 0x28
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8004b08:	0095      	lsls	r5, r2, #2
 8004b0a:	462a      	mov	r2, r5
 8004b0c:	21a5      	movs	r1, #165	; 0xa5
 8004b0e:	6b20      	ldr	r0, [r4, #48]	; 0x30
 8004b10:	f00a fa53 	bl	800efba <memset>
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8004b14:	3d04      	subs	r5, #4
 8004b16:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8004b18:	441d      	add	r5, r3
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8004b1a:	f025 0507 	bic.w	r5, r5, #7
	if( pcName != NULL )
 8004b1e:	f1b9 0f00 	cmp.w	r9, #0
 8004b22:	d043      	beq.n	8004bac <prvInitialiseNewTask+0xb4>
 8004b24:	f109 3cff 	add.w	ip, r9, #4294967295
 8004b28:	f104 0e33 	add.w	lr, r4, #51	; 0x33
 8004b2c:	f109 010f 	add.w	r1, r9, #15
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8004b30:	f81c 2f01 	ldrb.w	r2, [ip, #1]!
 8004b34:	f80e 2f01 	strb.w	r2, [lr, #1]!
			if( pcName[ x ] == ( char ) 0x00 )
 8004b38:	b10a      	cbz	r2, 8004b3e <prvInitialiseNewTask+0x46>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8004b3a:	458c      	cmp	ip, r1
 8004b3c:	d1f8      	bne.n	8004b30 <prvInitialiseNewTask+0x38>
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8004b3e:	2300      	movs	r3, #0
 8004b40:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8004b44:	9b08      	ldr	r3, [sp, #32]
 8004b46:	2b37      	cmp	r3, #55	; 0x37
 8004b48:	bf28      	it	cs
 8004b4a:	2337      	movcs	r3, #55	; 0x37
 8004b4c:	4699      	mov	r9, r3
	pxNewTCB->uxPriority = uxPriority;
 8004b4e:	62e3      	str	r3, [r4, #44]	; 0x2c
		pxNewTCB->uxBasePriority = uxPriority;
 8004b50:	64e3      	str	r3, [r4, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8004b52:	f04f 0a00 	mov.w	sl, #0
 8004b56:	f8c4 a050 	str.w	sl, [r4, #80]	; 0x50
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8004b5a:	1d20      	adds	r0, r4, #4
 8004b5c:	f7ff f993 	bl	8003e86 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8004b60:	f104 0018 	add.w	r0, r4, #24
 8004b64:	f7ff f98f 	bl	8003e86 <vListInitialiseItem>
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8004b68:	6124      	str	r4, [r4, #16]
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004b6a:	f1c9 0338 	rsb	r3, r9, #56	; 0x38
 8004b6e:	61a3      	str	r3, [r4, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8004b70:	6264      	str	r4, [r4, #36]	; 0x24
		pxNewTCB->ulNotifiedValue = 0;
 8004b72:	f8c4 a0b4 	str.w	sl, [r4, #180]	; 0xb4
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8004b76:	f884 a0b8 	strb.w	sl, [r4, #184]	; 0xb8
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8004b7a:	2260      	movs	r2, #96	; 0x60
 8004b7c:	4651      	mov	r1, sl
 8004b7e:	f104 0054 	add.w	r0, r4, #84	; 0x54
 8004b82:	f00a fa1a 	bl	800efba <memset>
 8004b86:	4b0b      	ldr	r3, [pc, #44]	; (8004bb4 <prvInitialiseNewTask+0xbc>)
 8004b88:	65a3      	str	r3, [r4, #88]	; 0x58
 8004b8a:	4b0b      	ldr	r3, [pc, #44]	; (8004bb8 <prvInitialiseNewTask+0xc0>)
 8004b8c:	65e3      	str	r3, [r4, #92]	; 0x5c
 8004b8e:	4b0b      	ldr	r3, [pc, #44]	; (8004bbc <prvInitialiseNewTask+0xc4>)
 8004b90:	6623      	str	r3, [r4, #96]	; 0x60
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8004b92:	463a      	mov	r2, r7
 8004b94:	4631      	mov	r1, r6
 8004b96:	4628      	mov	r0, r5
 8004b98:	f000 ffb2 	bl	8005b00 <pxPortInitialiseStack>
 8004b9c:	6020      	str	r0, [r4, #0]
	if( pxCreatedTask != NULL )
 8004b9e:	f1b8 0f00 	cmp.w	r8, #0
 8004ba2:	d001      	beq.n	8004ba8 <prvInitialiseNewTask+0xb0>
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8004ba4:	f8c8 4000 	str.w	r4, [r8]
}
 8004ba8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8004bac:	2300      	movs	r3, #0
 8004bae:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
 8004bb2:	e7c7      	b.n	8004b44 <prvInitialiseNewTask+0x4c>
 8004bb4:	08012c20 	.word	0x08012c20
 8004bb8:	08012c40 	.word	0x08012c40
 8004bbc:	08012c00 	.word	0x08012c00

08004bc0 <prvAddNewTaskToReadyList>:
{
 8004bc0:	b570      	push	{r4, r5, r6, lr}
 8004bc2:	4605      	mov	r5, r0
	taskENTER_CRITICAL();
 8004bc4:	f000 ffc6 	bl	8005b54 <vPortEnterCritical>
		uxCurrentNumberOfTasks++;
 8004bc8:	4a30      	ldr	r2, [pc, #192]	; (8004c8c <prvAddNewTaskToReadyList+0xcc>)
 8004bca:	6813      	ldr	r3, [r2, #0]
 8004bcc:	3301      	adds	r3, #1
 8004bce:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8004bd0:	4b2f      	ldr	r3, [pc, #188]	; (8004c90 <prvAddNewTaskToReadyList+0xd0>)
 8004bd2:	681b      	ldr	r3, [r3, #0]
 8004bd4:	2b00      	cmp	r3, #0
 8004bd6:	d034      	beq.n	8004c42 <prvAddNewTaskToReadyList+0x82>
			if( xSchedulerRunning == pdFALSE )
 8004bd8:	4b2e      	ldr	r3, [pc, #184]	; (8004c94 <prvAddNewTaskToReadyList+0xd4>)
 8004bda:	681b      	ldr	r3, [r3, #0]
 8004bdc:	b93b      	cbnz	r3, 8004bee <prvAddNewTaskToReadyList+0x2e>
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8004bde:	4b2c      	ldr	r3, [pc, #176]	; (8004c90 <prvAddNewTaskToReadyList+0xd0>)
 8004be0:	681b      	ldr	r3, [r3, #0]
 8004be2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004be4:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 8004be6:	429a      	cmp	r2, r3
					pxCurrentTCB = pxNewTCB;
 8004be8:	bf9c      	itt	ls
 8004bea:	4b29      	ldrls	r3, [pc, #164]	; (8004c90 <prvAddNewTaskToReadyList+0xd0>)
 8004bec:	601d      	strls	r5, [r3, #0]
		uxTaskNumber++;
 8004bee:	4a2a      	ldr	r2, [pc, #168]	; (8004c98 <prvAddNewTaskToReadyList+0xd8>)
 8004bf0:	6813      	ldr	r3, [r2, #0]
 8004bf2:	3301      	adds	r3, #1
 8004bf4:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8004bf6:	646b      	str	r3, [r5, #68]	; 0x44
		prvAddTaskToReadyList( pxNewTCB );
 8004bf8:	6ae8      	ldr	r0, [r5, #44]	; 0x2c
 8004bfa:	4b28      	ldr	r3, [pc, #160]	; (8004c9c <prvAddNewTaskToReadyList+0xdc>)
 8004bfc:	681b      	ldr	r3, [r3, #0]
 8004bfe:	4298      	cmp	r0, r3
 8004c00:	bf84      	itt	hi
 8004c02:	4b26      	ldrhi	r3, [pc, #152]	; (8004c9c <prvAddNewTaskToReadyList+0xdc>)
 8004c04:	6018      	strhi	r0, [r3, #0]
 8004c06:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8004c0a:	1d29      	adds	r1, r5, #4
 8004c0c:	4b24      	ldr	r3, [pc, #144]	; (8004ca0 <prvAddNewTaskToReadyList+0xe0>)
 8004c0e:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8004c12:	f7ff f93b 	bl	8003e8c <vListInsertEnd>
	taskEXIT_CRITICAL();
 8004c16:	f000 ffbf 	bl	8005b98 <vPortExitCritical>
	if( xSchedulerRunning != pdFALSE )
 8004c1a:	4b1e      	ldr	r3, [pc, #120]	; (8004c94 <prvAddNewTaskToReadyList+0xd4>)
 8004c1c:	681b      	ldr	r3, [r3, #0]
 8004c1e:	b17b      	cbz	r3, 8004c40 <prvAddNewTaskToReadyList+0x80>
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8004c20:	4b1b      	ldr	r3, [pc, #108]	; (8004c90 <prvAddNewTaskToReadyList+0xd0>)
 8004c22:	681b      	ldr	r3, [r3, #0]
 8004c24:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004c26:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 8004c28:	429a      	cmp	r2, r3
 8004c2a:	d209      	bcs.n	8004c40 <prvAddNewTaskToReadyList+0x80>
			taskYIELD_IF_USING_PREEMPTION();
 8004c2c:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8004c30:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004c34:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 8004c38:	f3bf 8f4f 	dsb	sy
 8004c3c:	f3bf 8f6f 	isb	sy
}
 8004c40:	bd70      	pop	{r4, r5, r6, pc}
			pxCurrentTCB = pxNewTCB;
 8004c42:	4b13      	ldr	r3, [pc, #76]	; (8004c90 <prvAddNewTaskToReadyList+0xd0>)
 8004c44:	601d      	str	r5, [r3, #0]
			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8004c46:	6813      	ldr	r3, [r2, #0]
 8004c48:	2b01      	cmp	r3, #1
 8004c4a:	d1d0      	bne.n	8004bee <prvAddNewTaskToReadyList+0x2e>
 8004c4c:	4c14      	ldr	r4, [pc, #80]	; (8004ca0 <prvAddNewTaskToReadyList+0xe0>)
 8004c4e:	f504 668c 	add.w	r6, r4, #1120	; 0x460
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8004c52:	4620      	mov	r0, r4
 8004c54:	f7ff f90c 	bl	8003e70 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004c58:	3414      	adds	r4, #20
 8004c5a:	42b4      	cmp	r4, r6
 8004c5c:	d1f9      	bne.n	8004c52 <prvAddNewTaskToReadyList+0x92>
	vListInitialise( &xDelayedTaskList1 );
 8004c5e:	4e11      	ldr	r6, [pc, #68]	; (8004ca4 <prvAddNewTaskToReadyList+0xe4>)
 8004c60:	4630      	mov	r0, r6
 8004c62:	f7ff f905 	bl	8003e70 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8004c66:	4c10      	ldr	r4, [pc, #64]	; (8004ca8 <prvAddNewTaskToReadyList+0xe8>)
 8004c68:	4620      	mov	r0, r4
 8004c6a:	f7ff f901 	bl	8003e70 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8004c6e:	480f      	ldr	r0, [pc, #60]	; (8004cac <prvAddNewTaskToReadyList+0xec>)
 8004c70:	f7ff f8fe 	bl	8003e70 <vListInitialise>
		vListInitialise( &xTasksWaitingTermination );
 8004c74:	480e      	ldr	r0, [pc, #56]	; (8004cb0 <prvAddNewTaskToReadyList+0xf0>)
 8004c76:	f7ff f8fb 	bl	8003e70 <vListInitialise>
		vListInitialise( &xSuspendedTaskList );
 8004c7a:	480e      	ldr	r0, [pc, #56]	; (8004cb4 <prvAddNewTaskToReadyList+0xf4>)
 8004c7c:	f7ff f8f8 	bl	8003e70 <vListInitialise>
	pxDelayedTaskList = &xDelayedTaskList1;
 8004c80:	4b0d      	ldr	r3, [pc, #52]	; (8004cb8 <prvAddNewTaskToReadyList+0xf8>)
 8004c82:	601e      	str	r6, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8004c84:	4b0d      	ldr	r3, [pc, #52]	; (8004cbc <prvAddNewTaskToReadyList+0xfc>)
 8004c86:	601c      	str	r4, [r3, #0]
}
 8004c88:	e7b1      	b.n	8004bee <prvAddNewTaskToReadyList+0x2e>
 8004c8a:	bf00      	nop
 8004c8c:	200071fc 	.word	0x200071fc
 8004c90:	20006d90 	.word	0x20006d90
 8004c94:	20007258 	.word	0x20007258
 8004c98:	20007208 	.word	0x20007208
 8004c9c:	2000720c 	.word	0x2000720c
 8004ca0:	20006d9c 	.word	0x20006d9c
 8004ca4:	20007210 	.word	0x20007210
 8004ca8:	20007224 	.word	0x20007224
 8004cac:	20007244 	.word	0x20007244
 8004cb0:	20007270 	.word	0x20007270
 8004cb4:	2000725c 	.word	0x2000725c
 8004cb8:	20006d94 	.word	0x20006d94
 8004cbc:	20006d98 	.word	0x20006d98

08004cc0 <prvDeleteTCB>:
	{
 8004cc0:	b510      	push	{r4, lr}
 8004cc2:	4604      	mov	r4, r0
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8004cc4:	3054      	adds	r0, #84	; 0x54
 8004cc6:	f00a fa79 	bl	800f1bc <_reclaim_reent>
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8004cca:	f894 30b9 	ldrb.w	r3, [r4, #185]	; 0xb9
 8004cce:	b163      	cbz	r3, 8004cea <prvDeleteTCB+0x2a>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8004cd0:	2b01      	cmp	r3, #1
 8004cd2:	d011      	beq.n	8004cf8 <prvDeleteTCB+0x38>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8004cd4:	2b02      	cmp	r3, #2
 8004cd6:	d00e      	beq.n	8004cf6 <prvDeleteTCB+0x36>
 8004cd8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004cdc:	f383 8811 	msr	BASEPRI, r3
 8004ce0:	f3bf 8f6f 	isb	sy
 8004ce4:	f3bf 8f4f 	dsb	sy
 8004ce8:	e7fe      	b.n	8004ce8 <prvDeleteTCB+0x28>
				vPortFree( pxTCB->pxStack );
 8004cea:	6b20      	ldr	r0, [r4, #48]	; 0x30
 8004cec:	f001 f954 	bl	8005f98 <vPortFree>
				vPortFree( pxTCB );
 8004cf0:	4620      	mov	r0, r4
 8004cf2:	f001 f951 	bl	8005f98 <vPortFree>
	}
 8004cf6:	bd10      	pop	{r4, pc}
				vPortFree( pxTCB );
 8004cf8:	4620      	mov	r0, r4
 8004cfa:	f001 f94d 	bl	8005f98 <vPortFree>
 8004cfe:	e7fa      	b.n	8004cf6 <prvDeleteTCB+0x36>

08004d00 <prvIdleTask>:
{
 8004d00:	b580      	push	{r7, lr}
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004d02:	4c15      	ldr	r4, [pc, #84]	; (8004d58 <prvIdleTask+0x58>)
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004d04:	4f15      	ldr	r7, [pc, #84]	; (8004d5c <prvIdleTask+0x5c>)
				--uxCurrentNumberOfTasks;
 8004d06:	4e16      	ldr	r6, [pc, #88]	; (8004d60 <prvIdleTask+0x60>)
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8004d08:	f8df 8058 	ldr.w	r8, [pc, #88]	; 8004d64 <prvIdleTask+0x64>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004d0c:	6823      	ldr	r3, [r4, #0]
 8004d0e:	b1a3      	cbz	r3, 8004d3a <prvIdleTask+0x3a>
			taskENTER_CRITICAL();
 8004d10:	f000 ff20 	bl	8005b54 <vPortEnterCritical>
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004d14:	68fb      	ldr	r3, [r7, #12]
 8004d16:	68dd      	ldr	r5, [r3, #12]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004d18:	1d28      	adds	r0, r5, #4
 8004d1a:	f7ff f8db 	bl	8003ed4 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8004d1e:	6833      	ldr	r3, [r6, #0]
 8004d20:	3b01      	subs	r3, #1
 8004d22:	6033      	str	r3, [r6, #0]
				--uxDeletedTasksWaitingCleanUp;
 8004d24:	6823      	ldr	r3, [r4, #0]
 8004d26:	3b01      	subs	r3, #1
 8004d28:	6023      	str	r3, [r4, #0]
			taskEXIT_CRITICAL();
 8004d2a:	f000 ff35 	bl	8005b98 <vPortExitCritical>
			prvDeleteTCB( pxTCB );
 8004d2e:	4628      	mov	r0, r5
 8004d30:	f7ff ffc6 	bl	8004cc0 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004d34:	6823      	ldr	r3, [r4, #0]
 8004d36:	2b00      	cmp	r3, #0
 8004d38:	d1ea      	bne.n	8004d10 <prvIdleTask+0x10>
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8004d3a:	f8d8 3000 	ldr.w	r3, [r8]
 8004d3e:	2b01      	cmp	r3, #1
 8004d40:	d9e4      	bls.n	8004d0c <prvIdleTask+0xc>
				taskYIELD();
 8004d42:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8004d46:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004d4a:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 8004d4e:	f3bf 8f4f 	dsb	sy
 8004d52:	f3bf 8f6f 	isb	sy
 8004d56:	e7d9      	b.n	8004d0c <prvIdleTask+0xc>
 8004d58:	20007200 	.word	0x20007200
 8004d5c:	20007270 	.word	0x20007270
 8004d60:	200071fc 	.word	0x200071fc
 8004d64:	20006d9c 	.word	0x20006d9c

08004d68 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8004d68:	b570      	push	{r4, r5, r6, lr}
 8004d6a:	4604      	mov	r4, r0
 8004d6c:	460d      	mov	r5, r1
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8004d6e:	4b17      	ldr	r3, [pc, #92]	; (8004dcc <prvAddCurrentTaskToDelayedList+0x64>)
 8004d70:	681e      	ldr	r6, [r3, #0]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004d72:	4b17      	ldr	r3, [pc, #92]	; (8004dd0 <prvAddCurrentTaskToDelayedList+0x68>)
 8004d74:	6818      	ldr	r0, [r3, #0]
 8004d76:	3004      	adds	r0, #4
 8004d78:	f7ff f8ac 	bl	8003ed4 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8004d7c:	f1b4 3fff 	cmp.w	r4, #4294967295
 8004d80:	d00d      	beq.n	8004d9e <prvAddCurrentTaskToDelayedList+0x36>
		else
		{
			/* Calculate the time at which the task should be woken if the event
			does not occur.  This may overflow but this doesn't matter, the
			kernel will manage it correctly. */
			xTimeToWake = xConstTickCount + xTicksToWait;
 8004d82:	4434      	add	r4, r6

			/* The list item will be inserted in wake time order. */
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8004d84:	4b12      	ldr	r3, [pc, #72]	; (8004dd0 <prvAddCurrentTaskToDelayedList+0x68>)
 8004d86:	681b      	ldr	r3, [r3, #0]
 8004d88:	605c      	str	r4, [r3, #4]

			if( xTimeToWake < xConstTickCount )
 8004d8a:	42a6      	cmp	r6, r4
 8004d8c:	d910      	bls.n	8004db0 <prvAddCurrentTaskToDelayedList+0x48>
			{
				/* Wake time has overflowed.  Place this item in the overflow
				list. */
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004d8e:	4b11      	ldr	r3, [pc, #68]	; (8004dd4 <prvAddCurrentTaskToDelayedList+0x6c>)
 8004d90:	6818      	ldr	r0, [r3, #0]
 8004d92:	4b0f      	ldr	r3, [pc, #60]	; (8004dd0 <prvAddCurrentTaskToDelayedList+0x68>)
 8004d94:	6819      	ldr	r1, [r3, #0]
 8004d96:	3104      	adds	r1, #4
 8004d98:	f7ff f883 	bl	8003ea2 <vListInsert>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8004d9c:	bd70      	pop	{r4, r5, r6, pc}
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8004d9e:	2d00      	cmp	r5, #0
 8004da0:	d0ef      	beq.n	8004d82 <prvAddCurrentTaskToDelayedList+0x1a>
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004da2:	4b0b      	ldr	r3, [pc, #44]	; (8004dd0 <prvAddCurrentTaskToDelayedList+0x68>)
 8004da4:	6819      	ldr	r1, [r3, #0]
 8004da6:	3104      	adds	r1, #4
 8004da8:	480b      	ldr	r0, [pc, #44]	; (8004dd8 <prvAddCurrentTaskToDelayedList+0x70>)
 8004daa:	f7ff f86f 	bl	8003e8c <vListInsertEnd>
 8004dae:	e7f5      	b.n	8004d9c <prvAddCurrentTaskToDelayedList+0x34>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004db0:	4b0a      	ldr	r3, [pc, #40]	; (8004ddc <prvAddCurrentTaskToDelayedList+0x74>)
 8004db2:	6818      	ldr	r0, [r3, #0]
 8004db4:	4b06      	ldr	r3, [pc, #24]	; (8004dd0 <prvAddCurrentTaskToDelayedList+0x68>)
 8004db6:	6819      	ldr	r1, [r3, #0]
 8004db8:	3104      	adds	r1, #4
 8004dba:	f7ff f872 	bl	8003ea2 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8004dbe:	4b08      	ldr	r3, [pc, #32]	; (8004de0 <prvAddCurrentTaskToDelayedList+0x78>)
 8004dc0:	681b      	ldr	r3, [r3, #0]
 8004dc2:	42a3      	cmp	r3, r4
					xNextTaskUnblockTime = xTimeToWake;
 8004dc4:	bf84      	itt	hi
 8004dc6:	4b06      	ldrhi	r3, [pc, #24]	; (8004de0 <prvAddCurrentTaskToDelayedList+0x78>)
 8004dc8:	601c      	strhi	r4, [r3, #0]
}
 8004dca:	e7e7      	b.n	8004d9c <prvAddCurrentTaskToDelayedList+0x34>
 8004dcc:	20007284 	.word	0x20007284
 8004dd0:	20006d90 	.word	0x20006d90
 8004dd4:	20006d98 	.word	0x20006d98
 8004dd8:	2000725c 	.word	0x2000725c
 8004ddc:	20006d94 	.word	0x20006d94
 8004de0:	20007238 	.word	0x20007238

08004de4 <xTaskCreateStatic>:
	{
 8004de4:	b530      	push	{r4, r5, lr}
 8004de6:	b087      	sub	sp, #28
 8004de8:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
		configASSERT( puxStackBuffer != NULL );
 8004dea:	b17c      	cbz	r4, 8004e0c <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8004dec:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8004dee:	b1b5      	cbz	r5, 8004e1e <xTaskCreateStatic+0x3a>
			volatile size_t xSize = sizeof( StaticTask_t );
 8004df0:	25bc      	movs	r5, #188	; 0xbc
 8004df2:	9504      	str	r5, [sp, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8004df4:	9d04      	ldr	r5, [sp, #16]
 8004df6:	2dbc      	cmp	r5, #188	; 0xbc
 8004df8:	d01a      	beq.n	8004e30 <xTaskCreateStatic+0x4c>
 8004dfa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004dfe:	f383 8811 	msr	BASEPRI, r3
 8004e02:	f3bf 8f6f 	isb	sy
 8004e06:	f3bf 8f4f 	dsb	sy
 8004e0a:	e7fe      	b.n	8004e0a <xTaskCreateStatic+0x26>
 8004e0c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e10:	f383 8811 	msr	BASEPRI, r3
 8004e14:	f3bf 8f6f 	isb	sy
 8004e18:	f3bf 8f4f 	dsb	sy
		configASSERT( puxStackBuffer != NULL );
 8004e1c:	e7fe      	b.n	8004e1c <xTaskCreateStatic+0x38>
 8004e1e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e22:	f383 8811 	msr	BASEPRI, r3
 8004e26:	f3bf 8f6f 	isb	sy
 8004e2a:	f3bf 8f4f 	dsb	sy
		configASSERT( pxTaskBuffer != NULL );
 8004e2e:	e7fe      	b.n	8004e2e <xTaskCreateStatic+0x4a>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8004e30:	9d04      	ldr	r5, [sp, #16]
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8004e32:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8004e34:	632c      	str	r4, [r5, #48]	; 0x30
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8004e36:	2402      	movs	r4, #2
 8004e38:	f885 40b9 	strb.w	r4, [r5, #185]	; 0xb9
			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8004e3c:	2400      	movs	r4, #0
 8004e3e:	9403      	str	r4, [sp, #12]
 8004e40:	9502      	str	r5, [sp, #8]
 8004e42:	ac05      	add	r4, sp, #20
 8004e44:	9401      	str	r4, [sp, #4]
 8004e46:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8004e48:	9400      	str	r4, [sp, #0]
 8004e4a:	f7ff fe55 	bl	8004af8 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8004e4e:	980c      	ldr	r0, [sp, #48]	; 0x30
 8004e50:	f7ff feb6 	bl	8004bc0 <prvAddNewTaskToReadyList>
	}
 8004e54:	9805      	ldr	r0, [sp, #20]
 8004e56:	b007      	add	sp, #28
 8004e58:	bd30      	pop	{r4, r5, pc}

08004e5a <xTaskCreate>:
	{
 8004e5a:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8004e5e:	b085      	sub	sp, #20
 8004e60:	4607      	mov	r7, r0
 8004e62:	4688      	mov	r8, r1
 8004e64:	4614      	mov	r4, r2
 8004e66:	461e      	mov	r6, r3
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8004e68:	0090      	lsls	r0, r2, #2
 8004e6a:	f000 fff9 	bl	8005e60 <pvPortMalloc>
			if( pxStack != NULL )
 8004e6e:	b308      	cbz	r0, 8004eb4 <xTaskCreate+0x5a>
 8004e70:	4681      	mov	r9, r0
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8004e72:	20bc      	movs	r0, #188	; 0xbc
 8004e74:	f000 fff4 	bl	8005e60 <pvPortMalloc>
				if( pxNewTCB != NULL )
 8004e78:	4605      	mov	r5, r0
 8004e7a:	b1a8      	cbz	r0, 8004ea8 <xTaskCreate+0x4e>
					pxNewTCB->pxStack = pxStack;
 8004e7c:	f8c0 9030 	str.w	r9, [r0, #48]	; 0x30
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8004e80:	2300      	movs	r3, #0
 8004e82:	f880 30b9 	strb.w	r3, [r0, #185]	; 0xb9
			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8004e86:	9303      	str	r3, [sp, #12]
 8004e88:	9002      	str	r0, [sp, #8]
 8004e8a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8004e8c:	9301      	str	r3, [sp, #4]
 8004e8e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8004e90:	9300      	str	r3, [sp, #0]
 8004e92:	4633      	mov	r3, r6
 8004e94:	4622      	mov	r2, r4
 8004e96:	4641      	mov	r1, r8
 8004e98:	4638      	mov	r0, r7
 8004e9a:	f7ff fe2d 	bl	8004af8 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8004e9e:	4628      	mov	r0, r5
 8004ea0:	f7ff fe8e 	bl	8004bc0 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8004ea4:	2001      	movs	r0, #1
 8004ea6:	e007      	b.n	8004eb8 <xTaskCreate+0x5e>
					vPortFree( pxStack );
 8004ea8:	4648      	mov	r0, r9
 8004eaa:	f001 f875 	bl	8005f98 <vPortFree>
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8004eae:	f04f 30ff 	mov.w	r0, #4294967295
 8004eb2:	e001      	b.n	8004eb8 <xTaskCreate+0x5e>
 8004eb4:	f04f 30ff 	mov.w	r0, #4294967295
	}
 8004eb8:	b005      	add	sp, #20
 8004eba:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	...

08004ec0 <vTaskStartScheduler>:
{
 8004ec0:	b510      	push	{r4, lr}
 8004ec2:	b088      	sub	sp, #32
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8004ec4:	2400      	movs	r4, #0
 8004ec6:	9405      	str	r4, [sp, #20]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8004ec8:	9406      	str	r4, [sp, #24]
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8004eca:	aa07      	add	r2, sp, #28
 8004ecc:	a906      	add	r1, sp, #24
 8004ece:	a805      	add	r0, sp, #20
 8004ed0:	f7fe ffb6 	bl	8003e40 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8004ed4:	9b05      	ldr	r3, [sp, #20]
 8004ed6:	9302      	str	r3, [sp, #8]
 8004ed8:	9b06      	ldr	r3, [sp, #24]
 8004eda:	9301      	str	r3, [sp, #4]
 8004edc:	9400      	str	r4, [sp, #0]
 8004ede:	4623      	mov	r3, r4
 8004ee0:	9a07      	ldr	r2, [sp, #28]
 8004ee2:	4917      	ldr	r1, [pc, #92]	; (8004f40 <vTaskStartScheduler+0x80>)
 8004ee4:	4817      	ldr	r0, [pc, #92]	; (8004f44 <vTaskStartScheduler+0x84>)
 8004ee6:	f7ff ff7d 	bl	8004de4 <xTaskCreateStatic>
		if( xIdleTaskHandle != NULL )
 8004eea:	b338      	cbz	r0, 8004f3c <vTaskStartScheduler+0x7c>
			xReturn = xTimerCreateTimerTask();
 8004eec:	f000 fc14 	bl	8005718 <xTimerCreateTimerTask>
	if( xReturn == pdPASS )
 8004ef0:	2801      	cmp	r0, #1
 8004ef2:	d00b      	beq.n	8004f0c <vTaskStartScheduler+0x4c>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8004ef4:	f1b0 3fff 	cmp.w	r0, #4294967295
 8004ef8:	d120      	bne.n	8004f3c <vTaskStartScheduler+0x7c>
 8004efa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004efe:	f383 8811 	msr	BASEPRI, r3
 8004f02:	f3bf 8f6f 	isb	sy
 8004f06:	f3bf 8f4f 	dsb	sy
 8004f0a:	e7fe      	b.n	8004f0a <vTaskStartScheduler+0x4a>
 8004f0c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f10:	f383 8811 	msr	BASEPRI, r3
 8004f14:	f3bf 8f6f 	isb	sy
 8004f18:	f3bf 8f4f 	dsb	sy
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8004f1c:	4b0a      	ldr	r3, [pc, #40]	; (8004f48 <vTaskStartScheduler+0x88>)
 8004f1e:	681b      	ldr	r3, [r3, #0]
 8004f20:	3354      	adds	r3, #84	; 0x54
 8004f22:	4a0a      	ldr	r2, [pc, #40]	; (8004f4c <vTaskStartScheduler+0x8c>)
 8004f24:	6013      	str	r3, [r2, #0]
		xNextTaskUnblockTime = portMAX_DELAY;
 8004f26:	4b0a      	ldr	r3, [pc, #40]	; (8004f50 <vTaskStartScheduler+0x90>)
 8004f28:	f04f 32ff 	mov.w	r2, #4294967295
 8004f2c:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8004f2e:	4b09      	ldr	r3, [pc, #36]	; (8004f54 <vTaskStartScheduler+0x94>)
 8004f30:	2201      	movs	r2, #1
 8004f32:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8004f34:	4b08      	ldr	r3, [pc, #32]	; (8004f58 <vTaskStartScheduler+0x98>)
 8004f36:	601c      	str	r4, [r3, #0]
		if( xPortStartScheduler() != pdFALSE )
 8004f38:	f000 fea6 	bl	8005c88 <xPortStartScheduler>
}
 8004f3c:	b008      	add	sp, #32
 8004f3e:	bd10      	pop	{r4, pc}
 8004f40:	080103e0 	.word	0x080103e0
 8004f44:	08004d01 	.word	0x08004d01
 8004f48:	20006d90 	.word	0x20006d90
 8004f4c:	2000002c 	.word	0x2000002c
 8004f50:	20007238 	.word	0x20007238
 8004f54:	20007258 	.word	0x20007258
 8004f58:	20007284 	.word	0x20007284

08004f5c <vTaskSuspendAll>:
	++uxSchedulerSuspended;
 8004f5c:	4a02      	ldr	r2, [pc, #8]	; (8004f68 <vTaskSuspendAll+0xc>)
 8004f5e:	6813      	ldr	r3, [r2, #0]
 8004f60:	3301      	adds	r3, #1
 8004f62:	6013      	str	r3, [r2, #0]
}
 8004f64:	4770      	bx	lr
 8004f66:	bf00      	nop
 8004f68:	20007204 	.word	0x20007204

08004f6c <xTaskGetTickCount>:
		xTicks = xTickCount;
 8004f6c:	4b01      	ldr	r3, [pc, #4]	; (8004f74 <xTaskGetTickCount+0x8>)
 8004f6e:	6818      	ldr	r0, [r3, #0]
}
 8004f70:	4770      	bx	lr
 8004f72:	bf00      	nop
 8004f74:	20007284 	.word	0x20007284

08004f78 <xTaskGetTickCountFromISR>:
{
 8004f78:	b508      	push	{r3, lr}
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8004f7a:	f000 ff13 	bl	8005da4 <vPortValidateInterruptPriority>
		xReturn = xTickCount;
 8004f7e:	4b01      	ldr	r3, [pc, #4]	; (8004f84 <xTaskGetTickCountFromISR+0xc>)
 8004f80:	6818      	ldr	r0, [r3, #0]
}
 8004f82:	bd08      	pop	{r3, pc}
 8004f84:	20007284 	.word	0x20007284

08004f88 <xTaskIncrementTick>:
{
 8004f88:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004f8c:	4b40      	ldr	r3, [pc, #256]	; (8005090 <xTaskIncrementTick+0x108>)
 8004f8e:	681b      	ldr	r3, [r3, #0]
 8004f90:	2b00      	cmp	r3, #0
 8004f92:	d175      	bne.n	8005080 <xTaskIncrementTick+0xf8>
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8004f94:	4b3f      	ldr	r3, [pc, #252]	; (8005094 <xTaskIncrementTick+0x10c>)
 8004f96:	681e      	ldr	r6, [r3, #0]
 8004f98:	3601      	adds	r6, #1
		xTickCount = xConstTickCount;
 8004f9a:	601e      	str	r6, [r3, #0]
		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8004f9c:	b9c6      	cbnz	r6, 8004fd0 <xTaskIncrementTick+0x48>
			taskSWITCH_DELAYED_LISTS();
 8004f9e:	4b3e      	ldr	r3, [pc, #248]	; (8005098 <xTaskIncrementTick+0x110>)
 8004fa0:	681b      	ldr	r3, [r3, #0]
 8004fa2:	681b      	ldr	r3, [r3, #0]
 8004fa4:	b143      	cbz	r3, 8004fb8 <xTaskIncrementTick+0x30>
 8004fa6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004faa:	f383 8811 	msr	BASEPRI, r3
 8004fae:	f3bf 8f6f 	isb	sy
 8004fb2:	f3bf 8f4f 	dsb	sy
 8004fb6:	e7fe      	b.n	8004fb6 <xTaskIncrementTick+0x2e>
 8004fb8:	4a37      	ldr	r2, [pc, #220]	; (8005098 <xTaskIncrementTick+0x110>)
 8004fba:	6811      	ldr	r1, [r2, #0]
 8004fbc:	4b37      	ldr	r3, [pc, #220]	; (800509c <xTaskIncrementTick+0x114>)
 8004fbe:	6818      	ldr	r0, [r3, #0]
 8004fc0:	6010      	str	r0, [r2, #0]
 8004fc2:	6019      	str	r1, [r3, #0]
 8004fc4:	4a36      	ldr	r2, [pc, #216]	; (80050a0 <xTaskIncrementTick+0x118>)
 8004fc6:	6813      	ldr	r3, [r2, #0]
 8004fc8:	3301      	adds	r3, #1
 8004fca:	6013      	str	r3, [r2, #0]
 8004fcc:	f7ff fd7e 	bl	8004acc <prvResetNextTaskUnblockTime>
		if( xConstTickCount >= xNextTaskUnblockTime )
 8004fd0:	4b34      	ldr	r3, [pc, #208]	; (80050a4 <xTaskIncrementTick+0x11c>)
 8004fd2:	681b      	ldr	r3, [r3, #0]
 8004fd4:	42b3      	cmp	r3, r6
 8004fd6:	d841      	bhi.n	800505c <xTaskIncrementTick+0xd4>
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004fd8:	4b2f      	ldr	r3, [pc, #188]	; (8005098 <xTaskIncrementTick+0x110>)
 8004fda:	681b      	ldr	r3, [r3, #0]
 8004fdc:	681b      	ldr	r3, [r3, #0]
 8004fde:	b13b      	cbz	r3, 8004ff0 <xTaskIncrementTick+0x68>
BaseType_t xSwitchRequired = pdFALSE;
 8004fe0:	2500      	movs	r5, #0
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004fe2:	f8df 80b4 	ldr.w	r8, [pc, #180]	; 8005098 <xTaskIncrementTick+0x110>
					prvAddTaskToReadyList( pxTCB );
 8004fe6:	f8df 90d0 	ldr.w	r9, [pc, #208]	; 80050b8 <xTaskIncrementTick+0x130>
 8004fea:	f8df a0c0 	ldr.w	sl, [pc, #192]	; 80050ac <xTaskIncrementTick+0x124>
 8004fee:	e022      	b.n	8005036 <xTaskIncrementTick+0xae>
BaseType_t xSwitchRequired = pdFALSE;
 8004ff0:	2500      	movs	r5, #0
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004ff2:	4b2c      	ldr	r3, [pc, #176]	; (80050a4 <xTaskIncrementTick+0x11c>)
 8004ff4:	f04f 32ff 	mov.w	r2, #4294967295
 8004ff8:	601a      	str	r2, [r3, #0]
					break;
 8004ffa:	e030      	b.n	800505e <xTaskIncrementTick+0xd6>
						xNextTaskUnblockTime = xItemValue;
 8004ffc:	4a29      	ldr	r2, [pc, #164]	; (80050a4 <xTaskIncrementTick+0x11c>)
 8004ffe:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8005000:	e02d      	b.n	800505e <xTaskIncrementTick+0xd6>
					prvAddTaskToReadyList( pxTCB );
 8005002:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 8005004:	f8d9 3000 	ldr.w	r3, [r9]
 8005008:	4298      	cmp	r0, r3
 800500a:	bf88      	it	hi
 800500c:	f8c9 0000 	strhi.w	r0, [r9]
 8005010:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8005014:	4639      	mov	r1, r7
 8005016:	eb0a 0080 	add.w	r0, sl, r0, lsl #2
 800501a:	f7fe ff37 	bl	8003e8c <vListInsertEnd>
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800501e:	4b22      	ldr	r3, [pc, #136]	; (80050a8 <xTaskIncrementTick+0x120>)
 8005020:	681b      	ldr	r3, [r3, #0]
 8005022:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8005024:	6adb      	ldr	r3, [r3, #44]	; 0x2c
							xSwitchRequired = pdTRUE;
 8005026:	429a      	cmp	r2, r3
 8005028:	bf28      	it	cs
 800502a:	2501      	movcs	r5, #1
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800502c:	f8d8 3000 	ldr.w	r3, [r8]
 8005030:	681b      	ldr	r3, [r3, #0]
 8005032:	2b00      	cmp	r3, #0
 8005034:	d0dd      	beq.n	8004ff2 <xTaskIncrementTick+0x6a>
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005036:	f8d8 3000 	ldr.w	r3, [r8]
 800503a:	68db      	ldr	r3, [r3, #12]
 800503c:	68dc      	ldr	r4, [r3, #12]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800503e:	6863      	ldr	r3, [r4, #4]
					if( xConstTickCount < xItemValue )
 8005040:	429e      	cmp	r6, r3
 8005042:	d3db      	bcc.n	8004ffc <xTaskIncrementTick+0x74>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005044:	1d27      	adds	r7, r4, #4
 8005046:	4638      	mov	r0, r7
 8005048:	f7fe ff44 	bl	8003ed4 <uxListRemove>
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800504c:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800504e:	2b00      	cmp	r3, #0
 8005050:	d0d7      	beq.n	8005002 <xTaskIncrementTick+0x7a>
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005052:	f104 0018 	add.w	r0, r4, #24
 8005056:	f7fe ff3d 	bl	8003ed4 <uxListRemove>
 800505a:	e7d2      	b.n	8005002 <xTaskIncrementTick+0x7a>
BaseType_t xSwitchRequired = pdFALSE;
 800505c:	2500      	movs	r5, #0
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800505e:	4b12      	ldr	r3, [pc, #72]	; (80050a8 <xTaskIncrementTick+0x120>)
 8005060:	681b      	ldr	r3, [r3, #0]
 8005062:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005064:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8005068:	009b      	lsls	r3, r3, #2
 800506a:	4a10      	ldr	r2, [pc, #64]	; (80050ac <xTaskIncrementTick+0x124>)
 800506c:	58d3      	ldr	r3, [r2, r3]
				xSwitchRequired = pdTRUE;
 800506e:	2b02      	cmp	r3, #2
 8005070:	bf28      	it	cs
 8005072:	2501      	movcs	r5, #1
			if( xYieldPending != pdFALSE )
 8005074:	4b0e      	ldr	r3, [pc, #56]	; (80050b0 <xTaskIncrementTick+0x128>)
 8005076:	681b      	ldr	r3, [r3, #0]
				xSwitchRequired = pdTRUE;
 8005078:	2b00      	cmp	r3, #0
 800507a:	bf18      	it	ne
 800507c:	2501      	movne	r5, #1
 800507e:	e004      	b.n	800508a <xTaskIncrementTick+0x102>
		++xPendedTicks;
 8005080:	4a0c      	ldr	r2, [pc, #48]	; (80050b4 <xTaskIncrementTick+0x12c>)
 8005082:	6813      	ldr	r3, [r2, #0]
 8005084:	3301      	adds	r3, #1
 8005086:	6013      	str	r3, [r2, #0]
BaseType_t xSwitchRequired = pdFALSE;
 8005088:	2500      	movs	r5, #0
}
 800508a:	4628      	mov	r0, r5
 800508c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005090:	20007204 	.word	0x20007204
 8005094:	20007284 	.word	0x20007284
 8005098:	20006d94 	.word	0x20006d94
 800509c:	20006d98 	.word	0x20006d98
 80050a0:	2000723c 	.word	0x2000723c
 80050a4:	20007238 	.word	0x20007238
 80050a8:	20006d90 	.word	0x20006d90
 80050ac:	20006d9c 	.word	0x20006d9c
 80050b0:	20007288 	.word	0x20007288
 80050b4:	20007240 	.word	0x20007240
 80050b8:	2000720c 	.word	0x2000720c

080050bc <xTaskResumeAll>:
	configASSERT( uxSchedulerSuspended );
 80050bc:	4b38      	ldr	r3, [pc, #224]	; (80051a0 <xTaskResumeAll+0xe4>)
 80050be:	681b      	ldr	r3, [r3, #0]
 80050c0:	b943      	cbnz	r3, 80050d4 <xTaskResumeAll+0x18>
 80050c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80050c6:	f383 8811 	msr	BASEPRI, r3
 80050ca:	f3bf 8f6f 	isb	sy
 80050ce:	f3bf 8f4f 	dsb	sy
 80050d2:	e7fe      	b.n	80050d2 <xTaskResumeAll+0x16>
{
 80050d4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	taskENTER_CRITICAL();
 80050d8:	f000 fd3c 	bl	8005b54 <vPortEnterCritical>
		--uxSchedulerSuspended;
 80050dc:	4b30      	ldr	r3, [pc, #192]	; (80051a0 <xTaskResumeAll+0xe4>)
 80050de:	681a      	ldr	r2, [r3, #0]
 80050e0:	3a01      	subs	r2, #1
 80050e2:	601a      	str	r2, [r3, #0]
		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80050e4:	681b      	ldr	r3, [r3, #0]
 80050e6:	2b00      	cmp	r3, #0
 80050e8:	d149      	bne.n	800517e <xTaskResumeAll+0xc2>
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80050ea:	4b2e      	ldr	r3, [pc, #184]	; (80051a4 <xTaskResumeAll+0xe8>)
 80050ec:	681b      	ldr	r3, [r3, #0]
 80050ee:	2b00      	cmp	r3, #0
 80050f0:	d04b      	beq.n	800518a <xTaskResumeAll+0xce>
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80050f2:	4b2d      	ldr	r3, [pc, #180]	; (80051a8 <xTaskResumeAll+0xec>)
 80050f4:	681b      	ldr	r3, [r3, #0]
 80050f6:	2b00      	cmp	r3, #0
 80050f8:	d04b      	beq.n	8005192 <xTaskResumeAll+0xd6>
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80050fa:	4e2b      	ldr	r6, [pc, #172]	; (80051a8 <xTaskResumeAll+0xec>)
					prvAddTaskToReadyList( pxTCB );
 80050fc:	4f2b      	ldr	r7, [pc, #172]	; (80051ac <xTaskResumeAll+0xf0>)
 80050fe:	f8df 80bc 	ldr.w	r8, [pc, #188]	; 80051bc <xTaskResumeAll+0x100>
 8005102:	e002      	b.n	800510a <xTaskResumeAll+0x4e>
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8005104:	6833      	ldr	r3, [r6, #0]
 8005106:	2b00      	cmp	r3, #0
 8005108:	d041      	beq.n	800518e <xTaskResumeAll+0xd2>
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800510a:	68f3      	ldr	r3, [r6, #12]
 800510c:	68dc      	ldr	r4, [r3, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800510e:	f104 0018 	add.w	r0, r4, #24
 8005112:	f7fe fedf 	bl	8003ed4 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005116:	1d25      	adds	r5, r4, #4
 8005118:	4628      	mov	r0, r5
 800511a:	f7fe fedb 	bl	8003ed4 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800511e:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 8005120:	683b      	ldr	r3, [r7, #0]
 8005122:	4298      	cmp	r0, r3
 8005124:	bf88      	it	hi
 8005126:	6038      	strhi	r0, [r7, #0]
 8005128:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 800512c:	4629      	mov	r1, r5
 800512e:	eb08 0080 	add.w	r0, r8, r0, lsl #2
 8005132:	f7fe feab 	bl	8003e8c <vListInsertEnd>
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005136:	4b1e      	ldr	r3, [pc, #120]	; (80051b0 <xTaskResumeAll+0xf4>)
 8005138:	681b      	ldr	r3, [r3, #0]
 800513a:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 800513c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800513e:	429a      	cmp	r2, r3
 8005140:	d3e0      	bcc.n	8005104 <xTaskResumeAll+0x48>
						xYieldPending = pdTRUE;
 8005142:	4b1c      	ldr	r3, [pc, #112]	; (80051b4 <xTaskResumeAll+0xf8>)
 8005144:	2201      	movs	r2, #1
 8005146:	601a      	str	r2, [r3, #0]
 8005148:	e7dc      	b.n	8005104 <xTaskResumeAll+0x48>
						} while( xPendedCounts > ( TickType_t ) 0U );
 800514a:	3c01      	subs	r4, #1
 800514c:	d005      	beq.n	800515a <xTaskResumeAll+0x9e>
							if( xTaskIncrementTick() != pdFALSE )
 800514e:	f7ff ff1b 	bl	8004f88 <xTaskIncrementTick>
 8005152:	2800      	cmp	r0, #0
 8005154:	d0f9      	beq.n	800514a <xTaskResumeAll+0x8e>
								xYieldPending = pdTRUE;
 8005156:	6035      	str	r5, [r6, #0]
 8005158:	e7f7      	b.n	800514a <xTaskResumeAll+0x8e>
						xPendedTicks = 0;
 800515a:	4b17      	ldr	r3, [pc, #92]	; (80051b8 <xTaskResumeAll+0xfc>)
 800515c:	2200      	movs	r2, #0
 800515e:	601a      	str	r2, [r3, #0]
				if( xYieldPending != pdFALSE )
 8005160:	4b14      	ldr	r3, [pc, #80]	; (80051b4 <xTaskResumeAll+0xf8>)
 8005162:	681c      	ldr	r4, [r3, #0]
 8005164:	b164      	cbz	r4, 8005180 <xTaskResumeAll+0xc4>
					taskYIELD_IF_USING_PREEMPTION();
 8005166:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 800516a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800516e:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 8005172:	f3bf 8f4f 	dsb	sy
 8005176:	f3bf 8f6f 	isb	sy
						xAlreadyYielded = pdTRUE;
 800517a:	2401      	movs	r4, #1
 800517c:	e000      	b.n	8005180 <xTaskResumeAll+0xc4>
BaseType_t xAlreadyYielded = pdFALSE;
 800517e:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
 8005180:	f000 fd0a 	bl	8005b98 <vPortExitCritical>
}
 8005184:	4620      	mov	r0, r4
 8005186:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
BaseType_t xAlreadyYielded = pdFALSE;
 800518a:	2400      	movs	r4, #0
 800518c:	e7f8      	b.n	8005180 <xTaskResumeAll+0xc4>
					prvResetNextTaskUnblockTime();
 800518e:	f7ff fc9d 	bl	8004acc <prvResetNextTaskUnblockTime>
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8005192:	4b09      	ldr	r3, [pc, #36]	; (80051b8 <xTaskResumeAll+0xfc>)
 8005194:	681c      	ldr	r4, [r3, #0]
					if( xPendedCounts > ( TickType_t ) 0U )
 8005196:	2c00      	cmp	r4, #0
 8005198:	d0e2      	beq.n	8005160 <xTaskResumeAll+0xa4>
								xYieldPending = pdTRUE;
 800519a:	4e06      	ldr	r6, [pc, #24]	; (80051b4 <xTaskResumeAll+0xf8>)
 800519c:	2501      	movs	r5, #1
 800519e:	e7d6      	b.n	800514e <xTaskResumeAll+0x92>
 80051a0:	20007204 	.word	0x20007204
 80051a4:	200071fc 	.word	0x200071fc
 80051a8:	20007244 	.word	0x20007244
 80051ac:	2000720c 	.word	0x2000720c
 80051b0:	20006d90 	.word	0x20006d90
 80051b4:	20007288 	.word	0x20007288
 80051b8:	20007240 	.word	0x20007240
 80051bc:	20006d9c 	.word	0x20006d9c

080051c0 <vTaskDelay>:
	{
 80051c0:	b510      	push	{r4, lr}
		if( xTicksToDelay > ( TickType_t ) 0U )
 80051c2:	b1a8      	cbz	r0, 80051f0 <vTaskDelay+0x30>
 80051c4:	4604      	mov	r4, r0
			configASSERT( uxSchedulerSuspended == 0 );
 80051c6:	4b10      	ldr	r3, [pc, #64]	; (8005208 <vTaskDelay+0x48>)
 80051c8:	681b      	ldr	r3, [r3, #0]
 80051ca:	b143      	cbz	r3, 80051de <vTaskDelay+0x1e>
 80051cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80051d0:	f383 8811 	msr	BASEPRI, r3
 80051d4:	f3bf 8f6f 	isb	sy
 80051d8:	f3bf 8f4f 	dsb	sy
 80051dc:	e7fe      	b.n	80051dc <vTaskDelay+0x1c>
			vTaskSuspendAll();
 80051de:	f7ff febd 	bl	8004f5c <vTaskSuspendAll>
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80051e2:	2100      	movs	r1, #0
 80051e4:	4620      	mov	r0, r4
 80051e6:	f7ff fdbf 	bl	8004d68 <prvAddCurrentTaskToDelayedList>
			xAlreadyYielded = xTaskResumeAll();
 80051ea:	f7ff ff67 	bl	80050bc <xTaskResumeAll>
		if( xAlreadyYielded == pdFALSE )
 80051ee:	b948      	cbnz	r0, 8005204 <vTaskDelay+0x44>
			portYIELD_WITHIN_API();
 80051f0:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 80051f4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80051f8:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 80051fc:	f3bf 8f4f 	dsb	sy
 8005200:	f3bf 8f6f 	isb	sy
	}
 8005204:	bd10      	pop	{r4, pc}
 8005206:	bf00      	nop
 8005208:	20007204 	.word	0x20007204

0800520c <vTaskSwitchContext>:
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800520c:	4b24      	ldr	r3, [pc, #144]	; (80052a0 <vTaskSwitchContext+0x94>)
 800520e:	681b      	ldr	r3, [r3, #0]
 8005210:	b11b      	cbz	r3, 800521a <vTaskSwitchContext+0xe>
		xYieldPending = pdTRUE;
 8005212:	4b24      	ldr	r3, [pc, #144]	; (80052a4 <vTaskSwitchContext+0x98>)
 8005214:	2201      	movs	r2, #1
 8005216:	601a      	str	r2, [r3, #0]
 8005218:	4770      	bx	lr
		xYieldPending = pdFALSE;
 800521a:	4b22      	ldr	r3, [pc, #136]	; (80052a4 <vTaskSwitchContext+0x98>)
 800521c:	2200      	movs	r2, #0
 800521e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005220:	4b21      	ldr	r3, [pc, #132]	; (80052a8 <vTaskSwitchContext+0x9c>)
 8005222:	681b      	ldr	r3, [r3, #0]
 8005224:	eb03 0283 	add.w	r2, r3, r3, lsl #2
 8005228:	0092      	lsls	r2, r2, #2
 800522a:	4920      	ldr	r1, [pc, #128]	; (80052ac <vTaskSwitchContext+0xa0>)
 800522c:	588a      	ldr	r2, [r1, r2]
 800522e:	b98a      	cbnz	r2, 8005254 <vTaskSwitchContext+0x48>
 8005230:	b13b      	cbz	r3, 8005242 <vTaskSwitchContext+0x36>
 8005232:	3b01      	subs	r3, #1
 8005234:	eb03 0283 	add.w	r2, r3, r3, lsl #2
 8005238:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 800523c:	b952      	cbnz	r2, 8005254 <vTaskSwitchContext+0x48>
 800523e:	2b00      	cmp	r3, #0
 8005240:	d1f7      	bne.n	8005232 <vTaskSwitchContext+0x26>
 8005242:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005246:	f383 8811 	msr	BASEPRI, r3
 800524a:	f3bf 8f6f 	isb	sy
 800524e:	f3bf 8f4f 	dsb	sy
 8005252:	e7fe      	b.n	8005252 <vTaskSwitchContext+0x46>
 8005254:	4a15      	ldr	r2, [pc, #84]	; (80052ac <vTaskSwitchContext+0xa0>)
 8005256:	eb03 0183 	add.w	r1, r3, r3, lsl #2
 800525a:	eb02 0181 	add.w	r1, r2, r1, lsl #2
 800525e:	6848      	ldr	r0, [r1, #4]
 8005260:	6840      	ldr	r0, [r0, #4]
 8005262:	6048      	str	r0, [r1, #4]
 8005264:	eb03 0183 	add.w	r1, r3, r3, lsl #2
 8005268:	eb02 0281 	add.w	r2, r2, r1, lsl #2
 800526c:	3208      	adds	r2, #8
 800526e:	4290      	cmp	r0, r2
 8005270:	d00f      	beq.n	8005292 <vTaskSwitchContext+0x86>
 8005272:	eb03 0183 	add.w	r1, r3, r3, lsl #2
 8005276:	4a0d      	ldr	r2, [pc, #52]	; (80052ac <vTaskSwitchContext+0xa0>)
 8005278:	eb02 0281 	add.w	r2, r2, r1, lsl #2
 800527c:	6852      	ldr	r2, [r2, #4]
 800527e:	68d1      	ldr	r1, [r2, #12]
 8005280:	4a0b      	ldr	r2, [pc, #44]	; (80052b0 <vTaskSwitchContext+0xa4>)
 8005282:	6011      	str	r1, [r2, #0]
 8005284:	4908      	ldr	r1, [pc, #32]	; (80052a8 <vTaskSwitchContext+0x9c>)
 8005286:	600b      	str	r3, [r1, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8005288:	6813      	ldr	r3, [r2, #0]
 800528a:	3354      	adds	r3, #84	; 0x54
 800528c:	4a09      	ldr	r2, [pc, #36]	; (80052b4 <vTaskSwitchContext+0xa8>)
 800528e:	6013      	str	r3, [r2, #0]
}
 8005290:	4770      	bx	lr
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005292:	6840      	ldr	r0, [r0, #4]
 8005294:	4a05      	ldr	r2, [pc, #20]	; (80052ac <vTaskSwitchContext+0xa0>)
 8005296:	eb02 0281 	add.w	r2, r2, r1, lsl #2
 800529a:	6050      	str	r0, [r2, #4]
 800529c:	e7e9      	b.n	8005272 <vTaskSwitchContext+0x66>
 800529e:	bf00      	nop
 80052a0:	20007204 	.word	0x20007204
 80052a4:	20007288 	.word	0x20007288
 80052a8:	2000720c 	.word	0x2000720c
 80052ac:	20006d9c 	.word	0x20006d9c
 80052b0:	20006d90 	.word	0x20006d90
 80052b4:	2000002c 	.word	0x2000002c

080052b8 <vTaskPlaceOnEventList>:
	configASSERT( pxEventList );
 80052b8:	b158      	cbz	r0, 80052d2 <vTaskPlaceOnEventList+0x1a>
{
 80052ba:	b510      	push	{r4, lr}
 80052bc:	460c      	mov	r4, r1
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80052be:	4a09      	ldr	r2, [pc, #36]	; (80052e4 <vTaskPlaceOnEventList+0x2c>)
 80052c0:	6811      	ldr	r1, [r2, #0]
 80052c2:	3118      	adds	r1, #24
 80052c4:	f7fe fded 	bl	8003ea2 <vListInsert>
	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80052c8:	2101      	movs	r1, #1
 80052ca:	4620      	mov	r0, r4
 80052cc:	f7ff fd4c 	bl	8004d68 <prvAddCurrentTaskToDelayedList>
}
 80052d0:	bd10      	pop	{r4, pc}
 80052d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80052d6:	f383 8811 	msr	BASEPRI, r3
 80052da:	f3bf 8f6f 	isb	sy
 80052de:	f3bf 8f4f 	dsb	sy
	configASSERT( pxEventList );
 80052e2:	e7fe      	b.n	80052e2 <vTaskPlaceOnEventList+0x2a>
 80052e4:	20006d90 	.word	0x20006d90

080052e8 <vTaskPlaceOnEventListRestricted>:
	{
 80052e8:	b538      	push	{r3, r4, r5, lr}
		configASSERT( pxEventList );
 80052ea:	b178      	cbz	r0, 800530c <vTaskPlaceOnEventListRestricted+0x24>
 80052ec:	460d      	mov	r5, r1
 80052ee:	4614      	mov	r4, r2
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80052f0:	4a0b      	ldr	r2, [pc, #44]	; (8005320 <vTaskPlaceOnEventListRestricted+0x38>)
 80052f2:	6811      	ldr	r1, [r2, #0]
 80052f4:	3118      	adds	r1, #24
 80052f6:	f7fe fdc9 	bl	8003e8c <vListInsertEnd>
			xTicksToWait = portMAX_DELAY;
 80052fa:	2c00      	cmp	r4, #0
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 80052fc:	4621      	mov	r1, r4
 80052fe:	bf0c      	ite	eq
 8005300:	4628      	moveq	r0, r5
 8005302:	f04f 30ff 	movne.w	r0, #4294967295
 8005306:	f7ff fd2f 	bl	8004d68 <prvAddCurrentTaskToDelayedList>
	}
 800530a:	bd38      	pop	{r3, r4, r5, pc}
 800530c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005310:	f383 8811 	msr	BASEPRI, r3
 8005314:	f3bf 8f6f 	isb	sy
 8005318:	f3bf 8f4f 	dsb	sy
		configASSERT( pxEventList );
 800531c:	e7fe      	b.n	800531c <vTaskPlaceOnEventListRestricted+0x34>
 800531e:	bf00      	nop
 8005320:	20006d90 	.word	0x20006d90

08005324 <xTaskRemoveFromEventList>:
{
 8005324:	b538      	push	{r3, r4, r5, lr}
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005326:	68c3      	ldr	r3, [r0, #12]
 8005328:	68dc      	ldr	r4, [r3, #12]
	configASSERT( pxUnblockedTCB );
 800532a:	b32c      	cbz	r4, 8005378 <xTaskRemoveFromEventList+0x54>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800532c:	f104 0518 	add.w	r5, r4, #24
 8005330:	4628      	mov	r0, r5
 8005332:	f7fe fdcf 	bl	8003ed4 <uxListRemove>
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005336:	4b17      	ldr	r3, [pc, #92]	; (8005394 <xTaskRemoveFromEventList+0x70>)
 8005338:	681b      	ldr	r3, [r3, #0]
 800533a:	bb33      	cbnz	r3, 800538a <xTaskRemoveFromEventList+0x66>
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800533c:	1d25      	adds	r5, r4, #4
 800533e:	4628      	mov	r0, r5
 8005340:	f7fe fdc8 	bl	8003ed4 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8005344:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 8005346:	4b14      	ldr	r3, [pc, #80]	; (8005398 <xTaskRemoveFromEventList+0x74>)
 8005348:	681b      	ldr	r3, [r3, #0]
 800534a:	4298      	cmp	r0, r3
 800534c:	bf84      	itt	hi
 800534e:	4b12      	ldrhi	r3, [pc, #72]	; (8005398 <xTaskRemoveFromEventList+0x74>)
 8005350:	6018      	strhi	r0, [r3, #0]
 8005352:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8005356:	4629      	mov	r1, r5
 8005358:	4b10      	ldr	r3, [pc, #64]	; (800539c <xTaskRemoveFromEventList+0x78>)
 800535a:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800535e:	f7fe fd95 	bl	8003e8c <vListInsertEnd>
	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8005362:	4b0f      	ldr	r3, [pc, #60]	; (80053a0 <xTaskRemoveFromEventList+0x7c>)
 8005364:	681b      	ldr	r3, [r3, #0]
 8005366:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8005368:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800536a:	429a      	cmp	r2, r3
		xYieldPending = pdTRUE;
 800536c:	bf83      	ittte	hi
 800536e:	2001      	movhi	r0, #1
 8005370:	4b0c      	ldrhi	r3, [pc, #48]	; (80053a4 <xTaskRemoveFromEventList+0x80>)
 8005372:	6018      	strhi	r0, [r3, #0]
		xReturn = pdFALSE;
 8005374:	2000      	movls	r0, #0
}
 8005376:	bd38      	pop	{r3, r4, r5, pc}
 8005378:	f04f 0350 	mov.w	r3, #80	; 0x50
 800537c:	f383 8811 	msr	BASEPRI, r3
 8005380:	f3bf 8f6f 	isb	sy
 8005384:	f3bf 8f4f 	dsb	sy
	configASSERT( pxUnblockedTCB );
 8005388:	e7fe      	b.n	8005388 <xTaskRemoveFromEventList+0x64>
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800538a:	4629      	mov	r1, r5
 800538c:	4806      	ldr	r0, [pc, #24]	; (80053a8 <xTaskRemoveFromEventList+0x84>)
 800538e:	f7fe fd7d 	bl	8003e8c <vListInsertEnd>
 8005392:	e7e6      	b.n	8005362 <xTaskRemoveFromEventList+0x3e>
 8005394:	20007204 	.word	0x20007204
 8005398:	2000720c 	.word	0x2000720c
 800539c:	20006d9c 	.word	0x20006d9c
 80053a0:	20006d90 	.word	0x20006d90
 80053a4:	20007288 	.word	0x20007288
 80053a8:	20007244 	.word	0x20007244

080053ac <vTaskInternalSetTimeOutState>:
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80053ac:	4b03      	ldr	r3, [pc, #12]	; (80053bc <vTaskInternalSetTimeOutState+0x10>)
 80053ae:	681b      	ldr	r3, [r3, #0]
 80053b0:	6003      	str	r3, [r0, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80053b2:	4b03      	ldr	r3, [pc, #12]	; (80053c0 <vTaskInternalSetTimeOutState+0x14>)
 80053b4:	681b      	ldr	r3, [r3, #0]
 80053b6:	6043      	str	r3, [r0, #4]
}
 80053b8:	4770      	bx	lr
 80053ba:	bf00      	nop
 80053bc:	2000723c 	.word	0x2000723c
 80053c0:	20007284 	.word	0x20007284

080053c4 <xTaskCheckForTimeOut>:
	configASSERT( pxTimeOut );
 80053c4:	b1d0      	cbz	r0, 80053fc <xTaskCheckForTimeOut+0x38>
{
 80053c6:	b570      	push	{r4, r5, r6, lr}
 80053c8:	460c      	mov	r4, r1
 80053ca:	4605      	mov	r5, r0
	configASSERT( pxTicksToWait );
 80053cc:	b1f9      	cbz	r1, 800540e <xTaskCheckForTimeOut+0x4a>
	taskENTER_CRITICAL();
 80053ce:	f000 fbc1 	bl	8005b54 <vPortEnterCritical>
		const TickType_t xConstTickCount = xTickCount;
 80053d2:	4b1b      	ldr	r3, [pc, #108]	; (8005440 <xTaskCheckForTimeOut+0x7c>)
 80053d4:	681a      	ldr	r2, [r3, #0]
			if( *pxTicksToWait == portMAX_DELAY )
 80053d6:	6823      	ldr	r3, [r4, #0]
 80053d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80053dc:	d028      	beq.n	8005430 <xTaskCheckForTimeOut+0x6c>
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80053de:	6869      	ldr	r1, [r5, #4]
		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80053e0:	4818      	ldr	r0, [pc, #96]	; (8005444 <xTaskCheckForTimeOut+0x80>)
 80053e2:	6800      	ldr	r0, [r0, #0]
 80053e4:	682e      	ldr	r6, [r5, #0]
 80053e6:	4286      	cmp	r6, r0
 80053e8:	d001      	beq.n	80053ee <xTaskCheckForTimeOut+0x2a>
 80053ea:	4291      	cmp	r1, r2
 80053ec:	d925      	bls.n	800543a <xTaskCheckForTimeOut+0x76>
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80053ee:	1a50      	subs	r0, r2, r1
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80053f0:	4283      	cmp	r3, r0
 80053f2:	d815      	bhi.n	8005420 <xTaskCheckForTimeOut+0x5c>
			*pxTicksToWait = 0;
 80053f4:	2300      	movs	r3, #0
 80053f6:	6023      	str	r3, [r4, #0]
			xReturn = pdTRUE;
 80053f8:	2401      	movs	r4, #1
 80053fa:	e01a      	b.n	8005432 <xTaskCheckForTimeOut+0x6e>
 80053fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005400:	f383 8811 	msr	BASEPRI, r3
 8005404:	f3bf 8f6f 	isb	sy
 8005408:	f3bf 8f4f 	dsb	sy
	configASSERT( pxTimeOut );
 800540c:	e7fe      	b.n	800540c <xTaskCheckForTimeOut+0x48>
 800540e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005412:	f383 8811 	msr	BASEPRI, r3
 8005416:	f3bf 8f6f 	isb	sy
 800541a:	f3bf 8f4f 	dsb	sy
	configASSERT( pxTicksToWait );
 800541e:	e7fe      	b.n	800541e <xTaskCheckForTimeOut+0x5a>
			*pxTicksToWait -= xElapsedTime;
 8005420:	1a9b      	subs	r3, r3, r2
 8005422:	440b      	add	r3, r1
 8005424:	6023      	str	r3, [r4, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8005426:	4628      	mov	r0, r5
 8005428:	f7ff ffc0 	bl	80053ac <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800542c:	2400      	movs	r4, #0
 800542e:	e000      	b.n	8005432 <xTaskCheckForTimeOut+0x6e>
				xReturn = pdFALSE;
 8005430:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
 8005432:	f000 fbb1 	bl	8005b98 <vPortExitCritical>
}
 8005436:	4620      	mov	r0, r4
 8005438:	bd70      	pop	{r4, r5, r6, pc}
			xReturn = pdTRUE;
 800543a:	2401      	movs	r4, #1
 800543c:	e7f9      	b.n	8005432 <xTaskCheckForTimeOut+0x6e>
 800543e:	bf00      	nop
 8005440:	20007284 	.word	0x20007284
 8005444:	2000723c 	.word	0x2000723c

08005448 <vTaskMissedYield>:
	xYieldPending = pdTRUE;
 8005448:	4b01      	ldr	r3, [pc, #4]	; (8005450 <vTaskMissedYield+0x8>)
 800544a:	2201      	movs	r2, #1
 800544c:	601a      	str	r2, [r3, #0]
}
 800544e:	4770      	bx	lr
 8005450:	20007288 	.word	0x20007288

08005454 <xTaskGetCurrentTaskHandle>:
		xReturn = pxCurrentTCB;
 8005454:	4b01      	ldr	r3, [pc, #4]	; (800545c <xTaskGetCurrentTaskHandle+0x8>)
 8005456:	6818      	ldr	r0, [r3, #0]
	}
 8005458:	4770      	bx	lr
 800545a:	bf00      	nop
 800545c:	20006d90 	.word	0x20006d90

08005460 <xTaskGetSchedulerState>:
		if( xSchedulerRunning == pdFALSE )
 8005460:	4b05      	ldr	r3, [pc, #20]	; (8005478 <xTaskGetSchedulerState+0x18>)
 8005462:	681b      	ldr	r3, [r3, #0]
 8005464:	b133      	cbz	r3, 8005474 <xTaskGetSchedulerState+0x14>
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005466:	4b05      	ldr	r3, [pc, #20]	; (800547c <xTaskGetSchedulerState+0x1c>)
 8005468:	681b      	ldr	r3, [r3, #0]
				xReturn = taskSCHEDULER_SUSPENDED;
 800546a:	2b00      	cmp	r3, #0
 800546c:	bf0c      	ite	eq
 800546e:	2002      	moveq	r0, #2
 8005470:	2000      	movne	r0, #0
 8005472:	4770      	bx	lr
			xReturn = taskSCHEDULER_NOT_STARTED;
 8005474:	2001      	movs	r0, #1
	}
 8005476:	4770      	bx	lr
 8005478:	20007258 	.word	0x20007258
 800547c:	20007204 	.word	0x20007204

08005480 <xTaskPriorityInherit>:
		if( pxMutexHolder != NULL )
 8005480:	2800      	cmp	r0, #0
 8005482:	d03f      	beq.n	8005504 <xTaskPriorityInherit+0x84>
	{
 8005484:	b538      	push	{r3, r4, r5, lr}
 8005486:	4604      	mov	r4, r0
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8005488:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 800548a:	4a1f      	ldr	r2, [pc, #124]	; (8005508 <xTaskPriorityInherit+0x88>)
 800548c:	6812      	ldr	r2, [r2, #0]
 800548e:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8005490:	4293      	cmp	r3, r2
 8005492:	d22e      	bcs.n	80054f2 <xTaskPriorityInherit+0x72>
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8005494:	6982      	ldr	r2, [r0, #24]
 8005496:	2a00      	cmp	r2, #0
 8005498:	db05      	blt.n	80054a6 <xTaskPriorityInherit+0x26>
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800549a:	4a1b      	ldr	r2, [pc, #108]	; (8005508 <xTaskPriorityInherit+0x88>)
 800549c:	6812      	ldr	r2, [r2, #0]
 800549e:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80054a0:	f1c2 0238 	rsb	r2, r2, #56	; 0x38
 80054a4:	6182      	str	r2, [r0, #24]
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 80054a6:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 80054aa:	4a18      	ldr	r2, [pc, #96]	; (800550c <xTaskPriorityInherit+0x8c>)
 80054ac:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 80054b0:	6962      	ldr	r2, [r4, #20]
 80054b2:	429a      	cmp	r2, r3
 80054b4:	d005      	beq.n	80054c2 <xTaskPriorityInherit+0x42>
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 80054b6:	4b14      	ldr	r3, [pc, #80]	; (8005508 <xTaskPriorityInherit+0x88>)
 80054b8:	681b      	ldr	r3, [r3, #0]
 80054ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80054bc:	62e3      	str	r3, [r4, #44]	; 0x2c
				xReturn = pdTRUE;
 80054be:	2001      	movs	r0, #1
 80054c0:	e01f      	b.n	8005502 <xTaskPriorityInherit+0x82>
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80054c2:	1d25      	adds	r5, r4, #4
 80054c4:	4628      	mov	r0, r5
 80054c6:	f7fe fd05 	bl	8003ed4 <uxListRemove>
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 80054ca:	4b0f      	ldr	r3, [pc, #60]	; (8005508 <xTaskPriorityInherit+0x88>)
 80054cc:	681b      	ldr	r3, [r3, #0]
 80054ce:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 80054d0:	62e0      	str	r0, [r4, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 80054d2:	4b0f      	ldr	r3, [pc, #60]	; (8005510 <xTaskPriorityInherit+0x90>)
 80054d4:	681b      	ldr	r3, [r3, #0]
 80054d6:	4298      	cmp	r0, r3
 80054d8:	bf84      	itt	hi
 80054da:	4b0d      	ldrhi	r3, [pc, #52]	; (8005510 <xTaskPriorityInherit+0x90>)
 80054dc:	6018      	strhi	r0, [r3, #0]
 80054de:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 80054e2:	4629      	mov	r1, r5
 80054e4:	4b09      	ldr	r3, [pc, #36]	; (800550c <xTaskPriorityInherit+0x8c>)
 80054e6:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 80054ea:	f7fe fccf 	bl	8003e8c <vListInsertEnd>
				xReturn = pdTRUE;
 80054ee:	2001      	movs	r0, #1
 80054f0:	e007      	b.n	8005502 <xTaskPriorityInherit+0x82>
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 80054f2:	4b05      	ldr	r3, [pc, #20]	; (8005508 <xTaskPriorityInherit+0x88>)
 80054f4:	681b      	ldr	r3, [r3, #0]
 80054f6:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
 80054f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80054fa:	4298      	cmp	r0, r3
 80054fc:	bf2c      	ite	cs
 80054fe:	2000      	movcs	r0, #0
 8005500:	2001      	movcc	r0, #1
	}
 8005502:	bd38      	pop	{r3, r4, r5, pc}
	BaseType_t xReturn = pdFALSE;
 8005504:	2000      	movs	r0, #0
	}
 8005506:	4770      	bx	lr
 8005508:	20006d90 	.word	0x20006d90
 800550c:	20006d9c 	.word	0x20006d9c
 8005510:	2000720c 	.word	0x2000720c

08005514 <xTaskPriorityDisinherit>:
		if( pxMutexHolder != NULL )
 8005514:	2800      	cmp	r0, #0
 8005516:	d03b      	beq.n	8005590 <xTaskPriorityDisinherit+0x7c>
	{
 8005518:	b538      	push	{r3, r4, r5, lr}
 800551a:	4604      	mov	r4, r0
			configASSERT( pxTCB == pxCurrentTCB );
 800551c:	4b1e      	ldr	r3, [pc, #120]	; (8005598 <xTaskPriorityDisinherit+0x84>)
 800551e:	681b      	ldr	r3, [r3, #0]
 8005520:	4283      	cmp	r3, r0
 8005522:	d008      	beq.n	8005536 <xTaskPriorityDisinherit+0x22>
 8005524:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005528:	f383 8811 	msr	BASEPRI, r3
 800552c:	f3bf 8f6f 	isb	sy
 8005530:	f3bf 8f4f 	dsb	sy
 8005534:	e7fe      	b.n	8005534 <xTaskPriorityDisinherit+0x20>
			configASSERT( pxTCB->uxMutexesHeld );
 8005536:	6d03      	ldr	r3, [r0, #80]	; 0x50
 8005538:	b943      	cbnz	r3, 800554c <xTaskPriorityDisinherit+0x38>
 800553a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800553e:	f383 8811 	msr	BASEPRI, r3
 8005542:	f3bf 8f6f 	isb	sy
 8005546:	f3bf 8f4f 	dsb	sy
 800554a:	e7fe      	b.n	800554a <xTaskPriorityDisinherit+0x36>
			( pxTCB->uxMutexesHeld )--;
 800554c:	3b01      	subs	r3, #1
 800554e:	6503      	str	r3, [r0, #80]	; 0x50
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8005550:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
 8005552:	6cc2      	ldr	r2, [r0, #76]	; 0x4c
 8005554:	4291      	cmp	r1, r2
 8005556:	d01d      	beq.n	8005594 <xTaskPriorityDisinherit+0x80>
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8005558:	b10b      	cbz	r3, 800555e <xTaskPriorityDisinherit+0x4a>
	BaseType_t xReturn = pdFALSE;
 800555a:	2000      	movs	r0, #0
	}
 800555c:	bd38      	pop	{r3, r4, r5, pc}
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800555e:	1d05      	adds	r5, r0, #4
 8005560:	4628      	mov	r0, r5
 8005562:	f7fe fcb7 	bl	8003ed4 <uxListRemove>
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8005566:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
 8005568:	62e0      	str	r0, [r4, #44]	; 0x2c
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800556a:	f1c0 0338 	rsb	r3, r0, #56	; 0x38
 800556e:	61a3      	str	r3, [r4, #24]
					prvAddTaskToReadyList( pxTCB );
 8005570:	4b0a      	ldr	r3, [pc, #40]	; (800559c <xTaskPriorityDisinherit+0x88>)
 8005572:	681b      	ldr	r3, [r3, #0]
 8005574:	4298      	cmp	r0, r3
 8005576:	bf84      	itt	hi
 8005578:	4b08      	ldrhi	r3, [pc, #32]	; (800559c <xTaskPriorityDisinherit+0x88>)
 800557a:	6018      	strhi	r0, [r3, #0]
 800557c:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8005580:	4629      	mov	r1, r5
 8005582:	4b07      	ldr	r3, [pc, #28]	; (80055a0 <xTaskPriorityDisinherit+0x8c>)
 8005584:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8005588:	f7fe fc80 	bl	8003e8c <vListInsertEnd>
					xReturn = pdTRUE;
 800558c:	2001      	movs	r0, #1
 800558e:	e7e5      	b.n	800555c <xTaskPriorityDisinherit+0x48>
	BaseType_t xReturn = pdFALSE;
 8005590:	2000      	movs	r0, #0
	}
 8005592:	4770      	bx	lr
	BaseType_t xReturn = pdFALSE;
 8005594:	2000      	movs	r0, #0
 8005596:	e7e1      	b.n	800555c <xTaskPriorityDisinherit+0x48>
 8005598:	20006d90 	.word	0x20006d90
 800559c:	2000720c 	.word	0x2000720c
 80055a0:	20006d9c 	.word	0x20006d9c

080055a4 <vTaskPriorityDisinheritAfterTimeout>:
		if( pxMutexHolder != NULL )
 80055a4:	2800      	cmp	r0, #0
 80055a6:	d046      	beq.n	8005636 <vTaskPriorityDisinheritAfterTimeout+0x92>
	{
 80055a8:	b538      	push	{r3, r4, r5, lr}
 80055aa:	4604      	mov	r4, r0
			configASSERT( pxTCB->uxMutexesHeld );
 80055ac:	6d03      	ldr	r3, [r0, #80]	; 0x50
 80055ae:	b943      	cbnz	r3, 80055c2 <vTaskPriorityDisinheritAfterTimeout+0x1e>
 80055b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80055b4:	f383 8811 	msr	BASEPRI, r3
 80055b8:	f3bf 8f6f 	isb	sy
 80055bc:	f3bf 8f4f 	dsb	sy
 80055c0:	e7fe      	b.n	80055c0 <vTaskPriorityDisinheritAfterTimeout+0x1c>
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 80055c2:	6cc2      	ldr	r2, [r0, #76]	; 0x4c
 80055c4:	4291      	cmp	r1, r2
 80055c6:	bf38      	it	cc
 80055c8:	4611      	movcc	r1, r2
			if( pxTCB->uxPriority != uxPriorityToUse )
 80055ca:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
 80055cc:	428a      	cmp	r2, r1
 80055ce:	d001      	beq.n	80055d4 <vTaskPriorityDisinheritAfterTimeout+0x30>
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 80055d0:	2b01      	cmp	r3, #1
 80055d2:	d000      	beq.n	80055d6 <vTaskPriorityDisinheritAfterTimeout+0x32>
	}
 80055d4:	bd38      	pop	{r3, r4, r5, pc}
					configASSERT( pxTCB != pxCurrentTCB );
 80055d6:	4b18      	ldr	r3, [pc, #96]	; (8005638 <vTaskPriorityDisinheritAfterTimeout+0x94>)
 80055d8:	681b      	ldr	r3, [r3, #0]
 80055da:	4283      	cmp	r3, r0
 80055dc:	d022      	beq.n	8005624 <vTaskPriorityDisinheritAfterTimeout+0x80>
					pxTCB->uxPriority = uxPriorityToUse;
 80055de:	62c1      	str	r1, [r0, #44]	; 0x2c
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 80055e0:	6983      	ldr	r3, [r0, #24]
 80055e2:	2b00      	cmp	r3, #0
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80055e4:	bfa4      	itt	ge
 80055e6:	f1c1 0138 	rsbge	r1, r1, #56	; 0x38
 80055ea:	6181      	strge	r1, [r0, #24]
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 80055ec:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 80055f0:	4b12      	ldr	r3, [pc, #72]	; (800563c <vTaskPriorityDisinheritAfterTimeout+0x98>)
 80055f2:	eb03 0282 	add.w	r2, r3, r2, lsl #2
 80055f6:	6943      	ldr	r3, [r0, #20]
 80055f8:	4293      	cmp	r3, r2
 80055fa:	d1eb      	bne.n	80055d4 <vTaskPriorityDisinheritAfterTimeout+0x30>
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80055fc:	1d05      	adds	r5, r0, #4
 80055fe:	4628      	mov	r0, r5
 8005600:	f7fe fc68 	bl	8003ed4 <uxListRemove>
						prvAddTaskToReadyList( pxTCB );
 8005604:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 8005606:	4b0e      	ldr	r3, [pc, #56]	; (8005640 <vTaskPriorityDisinheritAfterTimeout+0x9c>)
 8005608:	681b      	ldr	r3, [r3, #0]
 800560a:	4298      	cmp	r0, r3
 800560c:	bf84      	itt	hi
 800560e:	4b0c      	ldrhi	r3, [pc, #48]	; (8005640 <vTaskPriorityDisinheritAfterTimeout+0x9c>)
 8005610:	6018      	strhi	r0, [r3, #0]
 8005612:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8005616:	4629      	mov	r1, r5
 8005618:	4b08      	ldr	r3, [pc, #32]	; (800563c <vTaskPriorityDisinheritAfterTimeout+0x98>)
 800561a:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800561e:	f7fe fc35 	bl	8003e8c <vListInsertEnd>
	}
 8005622:	e7d7      	b.n	80055d4 <vTaskPriorityDisinheritAfterTimeout+0x30>
 8005624:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005628:	f383 8811 	msr	BASEPRI, r3
 800562c:	f3bf 8f6f 	isb	sy
 8005630:	f3bf 8f4f 	dsb	sy
					configASSERT( pxTCB != pxCurrentTCB );
 8005634:	e7fe      	b.n	8005634 <vTaskPriorityDisinheritAfterTimeout+0x90>
 8005636:	4770      	bx	lr
 8005638:	20006d90 	.word	0x20006d90
 800563c:	20006d9c 	.word	0x20006d9c
 8005640:	2000720c 	.word	0x2000720c

08005644 <pvTaskIncrementMutexHeldCount>:
		if( pxCurrentTCB != NULL )
 8005644:	4b05      	ldr	r3, [pc, #20]	; (800565c <pvTaskIncrementMutexHeldCount+0x18>)
 8005646:	681b      	ldr	r3, [r3, #0]
 8005648:	b123      	cbz	r3, 8005654 <pvTaskIncrementMutexHeldCount+0x10>
			( pxCurrentTCB->uxMutexesHeld )++;
 800564a:	4b04      	ldr	r3, [pc, #16]	; (800565c <pvTaskIncrementMutexHeldCount+0x18>)
 800564c:	681a      	ldr	r2, [r3, #0]
 800564e:	6d13      	ldr	r3, [r2, #80]	; 0x50
 8005650:	3301      	adds	r3, #1
 8005652:	6513      	str	r3, [r2, #80]	; 0x50
		return pxCurrentTCB;
 8005654:	4b01      	ldr	r3, [pc, #4]	; (800565c <pvTaskIncrementMutexHeldCount+0x18>)
 8005656:	6818      	ldr	r0, [r3, #0]
	}
 8005658:	4770      	bx	lr
 800565a:	bf00      	nop
 800565c:	20006d90 	.word	0x20006d90

08005660 <prvInsertTimerInActiveList>:
	return xTimeNow;
}
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8005660:	b508      	push	{r3, lr}
BaseType_t xProcessTimerNow = pdFALSE;

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8005662:	6041      	str	r1, [r0, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8005664:	6100      	str	r0, [r0, #16]

	if( xNextExpiryTime <= xTimeNow )
 8005666:	4291      	cmp	r1, r2
 8005668:	d80c      	bhi.n	8005684 <prvInsertTimerInActiveList+0x24>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800566a:	1ad2      	subs	r2, r2, r3
 800566c:	6983      	ldr	r3, [r0, #24]
 800566e:	429a      	cmp	r2, r3
 8005670:	d301      	bcc.n	8005676 <prvInsertTimerInActiveList+0x16>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8005672:	2001      	movs	r0, #1
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
		}
	}

	return xProcessTimerNow;
}
 8005674:	bd08      	pop	{r3, pc}
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8005676:	1d01      	adds	r1, r0, #4
 8005678:	4b09      	ldr	r3, [pc, #36]	; (80056a0 <prvInsertTimerInActiveList+0x40>)
 800567a:	6818      	ldr	r0, [r3, #0]
 800567c:	f7fe fc11 	bl	8003ea2 <vListInsert>
BaseType_t xProcessTimerNow = pdFALSE;
 8005680:	2000      	movs	r0, #0
 8005682:	e7f7      	b.n	8005674 <prvInsertTimerInActiveList+0x14>
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8005684:	429a      	cmp	r2, r3
 8005686:	d201      	bcs.n	800568c <prvInsertTimerInActiveList+0x2c>
 8005688:	4299      	cmp	r1, r3
 800568a:	d206      	bcs.n	800569a <prvInsertTimerInActiveList+0x3a>
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800568c:	1d01      	adds	r1, r0, #4
 800568e:	4b05      	ldr	r3, [pc, #20]	; (80056a4 <prvInsertTimerInActiveList+0x44>)
 8005690:	6818      	ldr	r0, [r3, #0]
 8005692:	f7fe fc06 	bl	8003ea2 <vListInsert>
BaseType_t xProcessTimerNow = pdFALSE;
 8005696:	2000      	movs	r0, #0
 8005698:	e7ec      	b.n	8005674 <prvInsertTimerInActiveList+0x14>
			xProcessTimerNow = pdTRUE;
 800569a:	2001      	movs	r0, #1
	return xProcessTimerNow;
 800569c:	e7ea      	b.n	8005674 <prvInsertTimerInActiveList+0x14>
 800569e:	bf00      	nop
 80056a0:	20007290 	.word	0x20007290
 80056a4:	2000728c 	.word	0x2000728c

080056a8 <prvCheckForValidListAndQueue>:
	pxOverflowTimerList = pxTemp;
}
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 80056a8:	b530      	push	{r4, r5, lr}
 80056aa:	b083      	sub	sp, #12
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 80056ac:	f000 fa52 	bl	8005b54 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 80056b0:	4b11      	ldr	r3, [pc, #68]	; (80056f8 <prvCheckForValidListAndQueue+0x50>)
 80056b2:	681b      	ldr	r3, [r3, #0]
 80056b4:	b11b      	cbz	r3, 80056be <prvCheckForValidListAndQueue+0x16>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80056b6:	f000 fa6f 	bl	8005b98 <vPortExitCritical>
}
 80056ba:	b003      	add	sp, #12
 80056bc:	bd30      	pop	{r4, r5, pc}
			vListInitialise( &xActiveTimerList1 );
 80056be:	4d0f      	ldr	r5, [pc, #60]	; (80056fc <prvCheckForValidListAndQueue+0x54>)
 80056c0:	4628      	mov	r0, r5
 80056c2:	f7fe fbd5 	bl	8003e70 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 80056c6:	4c0e      	ldr	r4, [pc, #56]	; (8005700 <prvCheckForValidListAndQueue+0x58>)
 80056c8:	4620      	mov	r0, r4
 80056ca:	f7fe fbd1 	bl	8003e70 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 80056ce:	4b0d      	ldr	r3, [pc, #52]	; (8005704 <prvCheckForValidListAndQueue+0x5c>)
 80056d0:	601d      	str	r5, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 80056d2:	4b0d      	ldr	r3, [pc, #52]	; (8005708 <prvCheckForValidListAndQueue+0x60>)
 80056d4:	601c      	str	r4, [r3, #0]
				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 80056d6:	2300      	movs	r3, #0
 80056d8:	9300      	str	r3, [sp, #0]
 80056da:	4b0c      	ldr	r3, [pc, #48]	; (800570c <prvCheckForValidListAndQueue+0x64>)
 80056dc:	4a0c      	ldr	r2, [pc, #48]	; (8005710 <prvCheckForValidListAndQueue+0x68>)
 80056de:	2110      	movs	r1, #16
 80056e0:	200a      	movs	r0, #10
 80056e2:	f7fe fcde 	bl	80040a2 <xQueueGenericCreateStatic>
 80056e6:	4b04      	ldr	r3, [pc, #16]	; (80056f8 <prvCheckForValidListAndQueue+0x50>)
 80056e8:	6018      	str	r0, [r3, #0]
				if( xTimerQueue != NULL )
 80056ea:	2800      	cmp	r0, #0
 80056ec:	d0e3      	beq.n	80056b6 <prvCheckForValidListAndQueue+0xe>
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 80056ee:	4909      	ldr	r1, [pc, #36]	; (8005714 <prvCheckForValidListAndQueue+0x6c>)
 80056f0:	f7ff f982 	bl	80049f8 <vQueueAddToRegistry>
 80056f4:	e7df      	b.n	80056b6 <prvCheckForValidListAndQueue+0xe>
 80056f6:	bf00      	nop
 80056f8:	200073b0 	.word	0x200073b0
 80056fc:	20007334 	.word	0x20007334
 8005700:	20007348 	.word	0x20007348
 8005704:	2000728c 	.word	0x2000728c
 8005708:	20007290 	.word	0x20007290
 800570c:	20007360 	.word	0x20007360
 8005710:	20007294 	.word	0x20007294
 8005714:	080103e8 	.word	0x080103e8

08005718 <xTimerCreateTimerTask>:
{
 8005718:	b510      	push	{r4, lr}
 800571a:	b088      	sub	sp, #32
	prvCheckForValidListAndQueue();
 800571c:	f7ff ffc4 	bl	80056a8 <prvCheckForValidListAndQueue>
	if( xTimerQueue != NULL )
 8005720:	4b12      	ldr	r3, [pc, #72]	; (800576c <xTimerCreateTimerTask+0x54>)
 8005722:	681b      	ldr	r3, [r3, #0]
 8005724:	b1cb      	cbz	r3, 800575a <xTimerCreateTimerTask+0x42>
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8005726:	2400      	movs	r4, #0
 8005728:	9405      	str	r4, [sp, #20]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800572a:	9406      	str	r4, [sp, #24]
			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800572c:	aa07      	add	r2, sp, #28
 800572e:	a906      	add	r1, sp, #24
 8005730:	a805      	add	r0, sp, #20
 8005732:	f7fe fb91 	bl	8003e58 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8005736:	9b05      	ldr	r3, [sp, #20]
 8005738:	9302      	str	r3, [sp, #8]
 800573a:	9b06      	ldr	r3, [sp, #24]
 800573c:	9301      	str	r3, [sp, #4]
 800573e:	2302      	movs	r3, #2
 8005740:	9300      	str	r3, [sp, #0]
 8005742:	4623      	mov	r3, r4
 8005744:	9a07      	ldr	r2, [sp, #28]
 8005746:	490a      	ldr	r1, [pc, #40]	; (8005770 <xTimerCreateTimerTask+0x58>)
 8005748:	480a      	ldr	r0, [pc, #40]	; (8005774 <xTimerCreateTimerTask+0x5c>)
 800574a:	f7ff fb4b 	bl	8004de4 <xTaskCreateStatic>
 800574e:	4b0a      	ldr	r3, [pc, #40]	; (8005778 <xTimerCreateTimerTask+0x60>)
 8005750:	6018      	str	r0, [r3, #0]
			if( xTimerTaskHandle != NULL )
 8005752:	b110      	cbz	r0, 800575a <xTimerCreateTimerTask+0x42>
}
 8005754:	2001      	movs	r0, #1
 8005756:	b008      	add	sp, #32
 8005758:	bd10      	pop	{r4, pc}
 800575a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800575e:	f383 8811 	msr	BASEPRI, r3
 8005762:	f3bf 8f6f 	isb	sy
 8005766:	f3bf 8f4f 	dsb	sy
	configASSERT( xReturn );
 800576a:	e7fe      	b.n	800576a <xTimerCreateTimerTask+0x52>
 800576c:	200073b0 	.word	0x200073b0
 8005770:	080103f0 	.word	0x080103f0
 8005774:	0800588d 	.word	0x0800588d
 8005778:	200073b4 	.word	0x200073b4

0800577c <xTimerGenericCommand>:
	configASSERT( xTimer );
 800577c:	b1d8      	cbz	r0, 80057b6 <xTimerGenericCommand+0x3a>
 800577e:	469c      	mov	ip, r3
 8005780:	4603      	mov	r3, r0
	if( xTimerQueue != NULL )
 8005782:	4815      	ldr	r0, [pc, #84]	; (80057d8 <xTimerGenericCommand+0x5c>)
 8005784:	6800      	ldr	r0, [r0, #0]
 8005786:	b328      	cbz	r0, 80057d4 <xTimerGenericCommand+0x58>
{
 8005788:	b500      	push	{lr}
 800578a:	b085      	sub	sp, #20
		xMessage.xMessageID = xCommandID;
 800578c:	9100      	str	r1, [sp, #0]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800578e:	9201      	str	r2, [sp, #4]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8005790:	9302      	str	r3, [sp, #8]
		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8005792:	2905      	cmp	r1, #5
 8005794:	dc18      	bgt.n	80057c8 <xTimerGenericCommand+0x4c>
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8005796:	f7ff fe63 	bl	8005460 <xTaskGetSchedulerState>
 800579a:	2802      	cmp	r0, #2
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800579c:	f04f 0300 	mov.w	r3, #0
 80057a0:	bf0c      	ite	eq
 80057a2:	9a06      	ldreq	r2, [sp, #24]
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 80057a4:	461a      	movne	r2, r3
 80057a6:	4669      	mov	r1, sp
 80057a8:	480b      	ldr	r0, [pc, #44]	; (80057d8 <xTimerGenericCommand+0x5c>)
 80057aa:	6800      	ldr	r0, [r0, #0]
 80057ac:	f7fe fd3a 	bl	8004224 <xQueueGenericSend>
}
 80057b0:	b005      	add	sp, #20
 80057b2:	f85d fb04 	ldr.w	pc, [sp], #4
 80057b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80057ba:	f383 8811 	msr	BASEPRI, r3
 80057be:	f3bf 8f6f 	isb	sy
 80057c2:	f3bf 8f4f 	dsb	sy
	configASSERT( xTimer );
 80057c6:	e7fe      	b.n	80057c6 <xTimerGenericCommand+0x4a>
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 80057c8:	2300      	movs	r3, #0
 80057ca:	4662      	mov	r2, ip
 80057cc:	4669      	mov	r1, sp
 80057ce:	f7fe fe3b 	bl	8004448 <xQueueGenericSendFromISR>
 80057d2:	e7ed      	b.n	80057b0 <xTimerGenericCommand+0x34>
BaseType_t xReturn = pdFAIL;
 80057d4:	2000      	movs	r0, #0
}
 80057d6:	4770      	bx	lr
 80057d8:	200073b0 	.word	0x200073b0

080057dc <prvSampleTimeNow>:
{
 80057dc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80057e0:	b082      	sub	sp, #8
 80057e2:	4682      	mov	sl, r0
	xTimeNow = xTaskGetTickCount();
 80057e4:	f7ff fbc2 	bl	8004f6c <xTaskGetTickCount>
 80057e8:	4606      	mov	r6, r0
	if( xTimeNow < xLastTime )
 80057ea:	4b25      	ldr	r3, [pc, #148]	; (8005880 <prvSampleTimeNow+0xa4>)
 80057ec:	681b      	ldr	r3, [r3, #0]
 80057ee:	4283      	cmp	r3, r0
 80057f0:	d808      	bhi.n	8005804 <prvSampleTimeNow+0x28>
		*pxTimerListsWereSwitched = pdFALSE;
 80057f2:	2300      	movs	r3, #0
 80057f4:	f8ca 3000 	str.w	r3, [sl]
	xLastTime = xTimeNow;
 80057f8:	4b21      	ldr	r3, [pc, #132]	; (8005880 <prvSampleTimeNow+0xa4>)
 80057fa:	601e      	str	r6, [r3, #0]
}
 80057fc:	4630      	mov	r0, r6
 80057fe:	b002      	add	sp, #8
 8005800:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8005804:	4d1f      	ldr	r5, [pc, #124]	; (8005884 <prvSampleTimeNow+0xa8>)
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8005806:	f04f 0800 	mov.w	r8, #0
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800580a:	682b      	ldr	r3, [r5, #0]
 800580c:	681a      	ldr	r2, [r3, #0]
 800580e:	b36a      	cbz	r2, 800586c <prvSampleTimeNow+0x90>
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8005810:	68db      	ldr	r3, [r3, #12]
 8005812:	681f      	ldr	r7, [r3, #0]
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005814:	68dc      	ldr	r4, [r3, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8005816:	f104 0904 	add.w	r9, r4, #4
 800581a:	4648      	mov	r0, r9
 800581c:	f7fe fb5a 	bl	8003ed4 <uxListRemove>
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8005820:	6a23      	ldr	r3, [r4, #32]
 8005822:	4620      	mov	r0, r4
 8005824:	4798      	blx	r3
		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8005826:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
 800582a:	f013 0f04 	tst.w	r3, #4
 800582e:	d0ec      	beq.n	800580a <prvSampleTimeNow+0x2e>
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8005830:	69a3      	ldr	r3, [r4, #24]
 8005832:	443b      	add	r3, r7
			if( xReloadTime > xNextExpireTime )
 8005834:	429f      	cmp	r7, r3
 8005836:	d206      	bcs.n	8005846 <prvSampleTimeNow+0x6a>
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8005838:	6063      	str	r3, [r4, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800583a:	6124      	str	r4, [r4, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800583c:	4649      	mov	r1, r9
 800583e:	6828      	ldr	r0, [r5, #0]
 8005840:	f7fe fb2f 	bl	8003ea2 <vListInsert>
 8005844:	e7e1      	b.n	800580a <prvSampleTimeNow+0x2e>
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8005846:	f8cd 8000 	str.w	r8, [sp]
 800584a:	4643      	mov	r3, r8
 800584c:	463a      	mov	r2, r7
 800584e:	4641      	mov	r1, r8
 8005850:	4620      	mov	r0, r4
 8005852:	f7ff ff93 	bl	800577c <xTimerGenericCommand>
				configASSERT( xResult );
 8005856:	2800      	cmp	r0, #0
 8005858:	d1d7      	bne.n	800580a <prvSampleTimeNow+0x2e>
 800585a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800585e:	f383 8811 	msr	BASEPRI, r3
 8005862:	f3bf 8f6f 	isb	sy
 8005866:	f3bf 8f4f 	dsb	sy
 800586a:	e7fe      	b.n	800586a <prvSampleTimeNow+0x8e>
	pxCurrentTimerList = pxOverflowTimerList;
 800586c:	4a06      	ldr	r2, [pc, #24]	; (8005888 <prvSampleTimeNow+0xac>)
 800586e:	6810      	ldr	r0, [r2, #0]
 8005870:	4904      	ldr	r1, [pc, #16]	; (8005884 <prvSampleTimeNow+0xa8>)
 8005872:	6008      	str	r0, [r1, #0]
	pxOverflowTimerList = pxTemp;
 8005874:	6013      	str	r3, [r2, #0]
		*pxTimerListsWereSwitched = pdTRUE;
 8005876:	2301      	movs	r3, #1
 8005878:	f8ca 3000 	str.w	r3, [sl]
 800587c:	e7bc      	b.n	80057f8 <prvSampleTimeNow+0x1c>
 800587e:	bf00      	nop
 8005880:	2000735c 	.word	0x2000735c
 8005884:	2000728c 	.word	0x2000728c
 8005888:	20007290 	.word	0x20007290

0800588c <prvTimerTask>:
{
 800588c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8005890:	b089      	sub	sp, #36	; 0x24
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8005892:	4e79      	ldr	r6, [pc, #484]	; (8005a78 <prvTimerTask+0x1ec>)
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8005894:	4d79      	ldr	r5, [pc, #484]	; (8005a7c <prvTimerTask+0x1f0>)
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8005896:	4f7a      	ldr	r7, [pc, #488]	; (8005a80 <prvTimerTask+0x1f4>)
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8005898:	6833      	ldr	r3, [r6, #0]
 800589a:	f8d3 8000 	ldr.w	r8, [r3]
	if( *pxListWasEmpty == pdFALSE )
 800589e:	f1b8 0f00 	cmp.w	r8, #0
 80058a2:	d025      	beq.n	80058f0 <prvTimerTask+0x64>
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80058a4:	68db      	ldr	r3, [r3, #12]
 80058a6:	f8d3 8000 	ldr.w	r8, [r3]
	vTaskSuspendAll();
 80058aa:	f7ff fb57 	bl	8004f5c <vTaskSuspendAll>
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80058ae:	a804      	add	r0, sp, #16
 80058b0:	f7ff ff94 	bl	80057dc <prvSampleTimeNow>
 80058b4:	4604      	mov	r4, r0
		if( xTimerListsWereSwitched == pdFALSE )
 80058b6:	9a04      	ldr	r2, [sp, #16]
 80058b8:	2a00      	cmp	r2, #0
 80058ba:	d155      	bne.n	8005968 <prvTimerTask+0xdc>
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 80058bc:	4580      	cmp	r8, r0
 80058be:	d824      	bhi.n	800590a <prvTimerTask+0x7e>
				( void ) xTaskResumeAll();
 80058c0:	f7ff fbfc 	bl	80050bc <xTaskResumeAll>
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80058c4:	6833      	ldr	r3, [r6, #0]
 80058c6:	68db      	ldr	r3, [r3, #12]
 80058c8:	f8d3 900c 	ldr.w	r9, [r3, #12]
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80058cc:	f109 0004 	add.w	r0, r9, #4
 80058d0:	f7fe fb00 	bl	8003ed4 <uxListRemove>
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80058d4:	f899 3028 	ldrb.w	r3, [r9, #40]	; 0x28
 80058d8:	f013 0f04 	tst.w	r3, #4
 80058dc:	d128      	bne.n	8005930 <prvTimerTask+0xa4>
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80058de:	f023 0301 	bic.w	r3, r3, #1
 80058e2:	f889 3028 	strb.w	r3, [r9, #40]	; 0x28
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80058e6:	f8d9 3020 	ldr.w	r3, [r9, #32]
 80058ea:	4648      	mov	r0, r9
 80058ec:	4798      	blx	r3
}
 80058ee:	e03d      	b.n	800596c <prvTimerTask+0xe0>
	vTaskSuspendAll();
 80058f0:	f7ff fb34 	bl	8004f5c <vTaskSuspendAll>
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80058f4:	a804      	add	r0, sp, #16
 80058f6:	f7ff ff71 	bl	80057dc <prvSampleTimeNow>
 80058fa:	4604      	mov	r4, r0
		if( xTimerListsWereSwitched == pdFALSE )
 80058fc:	9b04      	ldr	r3, [sp, #16]
 80058fe:	bb9b      	cbnz	r3, 8005968 <prvTimerTask+0xdc>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8005900:	683b      	ldr	r3, [r7, #0]
 8005902:	681a      	ldr	r2, [r3, #0]
 8005904:	fab2 f282 	clz	r2, r2
 8005908:	0952      	lsrs	r2, r2, #5
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800590a:	eba8 0104 	sub.w	r1, r8, r4
 800590e:	6828      	ldr	r0, [r5, #0]
 8005910:	f7ff f8b4 	bl	8004a7c <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8005914:	f7ff fbd2 	bl	80050bc <xTaskResumeAll>
 8005918:	bb40      	cbnz	r0, 800596c <prvTimerTask+0xe0>
					portYIELD_WITHIN_API();
 800591a:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 800591e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005922:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 8005926:	f3bf 8f4f 	dsb	sy
 800592a:	f3bf 8f6f 	isb	sy
 800592e:	e01d      	b.n	800596c <prvTimerTask+0xe0>
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8005930:	f8d9 1018 	ldr.w	r1, [r9, #24]
 8005934:	4643      	mov	r3, r8
 8005936:	4622      	mov	r2, r4
 8005938:	4441      	add	r1, r8
 800593a:	4648      	mov	r0, r9
 800593c:	f7ff fe90 	bl	8005660 <prvInsertTimerInActiveList>
 8005940:	2800      	cmp	r0, #0
 8005942:	d0d0      	beq.n	80058e6 <prvTimerTask+0x5a>
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8005944:	2100      	movs	r1, #0
 8005946:	9100      	str	r1, [sp, #0]
 8005948:	460b      	mov	r3, r1
 800594a:	4642      	mov	r2, r8
 800594c:	4648      	mov	r0, r9
 800594e:	f7ff ff15 	bl	800577c <xTimerGenericCommand>
			configASSERT( xResult );
 8005952:	2800      	cmp	r0, #0
 8005954:	d1c7      	bne.n	80058e6 <prvTimerTask+0x5a>
 8005956:	f04f 0350 	mov.w	r3, #80	; 0x50
 800595a:	f383 8811 	msr	BASEPRI, r3
 800595e:	f3bf 8f6f 	isb	sy
 8005962:	f3bf 8f4f 	dsb	sy
 8005966:	e7fe      	b.n	8005966 <prvTimerTask+0xda>
			( void ) xTaskResumeAll();
 8005968:	f7ff fba8 	bl	80050bc <xTaskResumeAll>
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800596c:	2400      	movs	r4, #0
}
 800596e:	e006      	b.n	800597e <prvTimerTask+0xf2>
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8005970:	9907      	ldr	r1, [sp, #28]
 8005972:	9806      	ldr	r0, [sp, #24]
 8005974:	9b05      	ldr	r3, [sp, #20]
 8005976:	4798      	blx	r3
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8005978:	9b04      	ldr	r3, [sp, #16]
 800597a:	2b00      	cmp	r3, #0
 800597c:	da09      	bge.n	8005992 <prvTimerTask+0x106>
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800597e:	4622      	mov	r2, r4
 8005980:	a904      	add	r1, sp, #16
 8005982:	6828      	ldr	r0, [r5, #0]
 8005984:	f7fe fe20 	bl	80045c8 <xQueueReceive>
 8005988:	2800      	cmp	r0, #0
 800598a:	d085      	beq.n	8005898 <prvTimerTask+0xc>
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800598c:	9b04      	ldr	r3, [sp, #16]
 800598e:	2b00      	cmp	r3, #0
 8005990:	dbee      	blt.n	8005970 <prvTimerTask+0xe4>
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8005992:	f8dd 8018 	ldr.w	r8, [sp, #24]
			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8005996:	f8d8 3014 	ldr.w	r3, [r8, #20]
 800599a:	b11b      	cbz	r3, 80059a4 <prvTimerTask+0x118>
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800599c:	f108 0004 	add.w	r0, r8, #4
 80059a0:	f7fe fa98 	bl	8003ed4 <uxListRemove>
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80059a4:	a803      	add	r0, sp, #12
 80059a6:	f7ff ff19 	bl	80057dc <prvSampleTimeNow>
			switch( xMessage.xMessageID )
 80059aa:	9b04      	ldr	r3, [sp, #16]
 80059ac:	2b09      	cmp	r3, #9
 80059ae:	d8e6      	bhi.n	800597e <prvTimerTask+0xf2>
 80059b0:	e8df f003 	tbb	[pc, r3]
 80059b4:	33050505 	.word	0x33050505
 80059b8:	0505543a 	.word	0x0505543a
 80059bc:	3a33      	.short	0x3a33
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80059be:	f898 3028 	ldrb.w	r3, [r8, #40]	; 0x28
 80059c2:	f043 0301 	orr.w	r3, r3, #1
 80059c6:	f888 3028 	strb.w	r3, [r8, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 80059ca:	9b05      	ldr	r3, [sp, #20]
 80059cc:	f8d8 1018 	ldr.w	r1, [r8, #24]
 80059d0:	4602      	mov	r2, r0
 80059d2:	4419      	add	r1, r3
 80059d4:	4640      	mov	r0, r8
 80059d6:	f7ff fe43 	bl	8005660 <prvInsertTimerInActiveList>
 80059da:	2800      	cmp	r0, #0
 80059dc:	d0cf      	beq.n	800597e <prvTimerTask+0xf2>
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80059de:	f8d8 3020 	ldr.w	r3, [r8, #32]
 80059e2:	4640      	mov	r0, r8
 80059e4:	4798      	blx	r3
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80059e6:	f898 3028 	ldrb.w	r3, [r8, #40]	; 0x28
 80059ea:	f013 0f04 	tst.w	r3, #4
 80059ee:	d0c6      	beq.n	800597e <prvTimerTask+0xf2>
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 80059f0:	f8d8 2018 	ldr.w	r2, [r8, #24]
 80059f4:	9400      	str	r4, [sp, #0]
 80059f6:	4623      	mov	r3, r4
 80059f8:	9905      	ldr	r1, [sp, #20]
 80059fa:	440a      	add	r2, r1
 80059fc:	4621      	mov	r1, r4
 80059fe:	4640      	mov	r0, r8
 8005a00:	f7ff febc 	bl	800577c <xTimerGenericCommand>
							configASSERT( xResult );
 8005a04:	2800      	cmp	r0, #0
 8005a06:	d1ba      	bne.n	800597e <prvTimerTask+0xf2>
 8005a08:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a0c:	f383 8811 	msr	BASEPRI, r3
 8005a10:	f3bf 8f6f 	isb	sy
 8005a14:	f3bf 8f4f 	dsb	sy
 8005a18:	e7fe      	b.n	8005a18 <prvTimerTask+0x18c>
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8005a1a:	f898 3028 	ldrb.w	r3, [r8, #40]	; 0x28
 8005a1e:	f023 0301 	bic.w	r3, r3, #1
 8005a22:	f888 3028 	strb.w	r3, [r8, #40]	; 0x28
					break;
 8005a26:	e7aa      	b.n	800597e <prvTimerTask+0xf2>
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8005a28:	f898 3028 	ldrb.w	r3, [r8, #40]	; 0x28
 8005a2c:	f043 0301 	orr.w	r3, r3, #1
 8005a30:	f888 3028 	strb.w	r3, [r8, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8005a34:	9905      	ldr	r1, [sp, #20]
 8005a36:	f8c8 1018 	str.w	r1, [r8, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8005a3a:	b131      	cbz	r1, 8005a4a <prvTimerTask+0x1be>
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8005a3c:	4603      	mov	r3, r0
 8005a3e:	4602      	mov	r2, r0
 8005a40:	4401      	add	r1, r0
 8005a42:	4640      	mov	r0, r8
 8005a44:	f7ff fe0c 	bl	8005660 <prvInsertTimerInActiveList>
					break;
 8005a48:	e799      	b.n	800597e <prvTimerTask+0xf2>
 8005a4a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a4e:	f383 8811 	msr	BASEPRI, r3
 8005a52:	f3bf 8f6f 	isb	sy
 8005a56:	f3bf 8f4f 	dsb	sy
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8005a5a:	e7fe      	b.n	8005a5a <prvTimerTask+0x1ce>
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8005a5c:	f898 3028 	ldrb.w	r3, [r8, #40]	; 0x28
 8005a60:	f013 0f02 	tst.w	r3, #2
 8005a64:	d004      	beq.n	8005a70 <prvTimerTask+0x1e4>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8005a66:	f023 0301 	bic.w	r3, r3, #1
 8005a6a:	f888 3028 	strb.w	r3, [r8, #40]	; 0x28
 8005a6e:	e786      	b.n	800597e <prvTimerTask+0xf2>
							vPortFree( pxTimer );
 8005a70:	4640      	mov	r0, r8
 8005a72:	f000 fa91 	bl	8005f98 <vPortFree>
 8005a76:	e782      	b.n	800597e <prvTimerTask+0xf2>
 8005a78:	2000728c 	.word	0x2000728c
 8005a7c:	200073b0 	.word	0x200073b0
 8005a80:	20007290 	.word	0x20007290

08005a84 <prvTaskExitError>:
	return pxTopOfStack;
}
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8005a84:	b082      	sub	sp, #8
volatile uint32_t ulDummy = 0;
 8005a86:	2300      	movs	r3, #0
 8005a88:	9301      	str	r3, [sp, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8005a8a:	4b0d      	ldr	r3, [pc, #52]	; (8005ac0 <prvTaskExitError+0x3c>)
 8005a8c:	681b      	ldr	r3, [r3, #0]
 8005a8e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005a92:	d008      	beq.n	8005aa6 <prvTaskExitError+0x22>
 8005a94:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a98:	f383 8811 	msr	BASEPRI, r3
 8005a9c:	f3bf 8f6f 	isb	sy
 8005aa0:	f3bf 8f4f 	dsb	sy
 8005aa4:	e7fe      	b.n	8005aa4 <prvTaskExitError+0x20>
 8005aa6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005aaa:	f383 8811 	msr	BASEPRI, r3
 8005aae:	f3bf 8f6f 	isb	sy
 8005ab2:	f3bf 8f4f 	dsb	sy
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8005ab6:	9b01      	ldr	r3, [sp, #4]
 8005ab8:	2b00      	cmp	r3, #0
 8005aba:	d0fc      	beq.n	8005ab6 <prvTaskExitError+0x32>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8005abc:	b002      	add	sp, #8
 8005abe:	4770      	bx	lr
 8005ac0:	20000020 	.word	0x20000020

08005ac4 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8005ac4:	4808      	ldr	r0, [pc, #32]	; (8005ae8 <prvPortStartFirstTask+0x24>)
 8005ac6:	6800      	ldr	r0, [r0, #0]
 8005ac8:	6800      	ldr	r0, [r0, #0]
 8005aca:	f380 8808 	msr	MSP, r0
 8005ace:	f04f 0000 	mov.w	r0, #0
 8005ad2:	f380 8814 	msr	CONTROL, r0
 8005ad6:	b662      	cpsie	i
 8005ad8:	b661      	cpsie	f
 8005ada:	f3bf 8f4f 	dsb	sy
 8005ade:	f3bf 8f6f 	isb	sy
 8005ae2:	df00      	svc	0
 8005ae4:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8005ae6:	0000      	.short	0x0000
 8005ae8:	e000ed08 	.word	0xe000ed08

08005aec <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8005aec:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8005afc <vPortEnableVFP+0x10>
 8005af0:	6801      	ldr	r1, [r0, #0]
 8005af2:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8005af6:	6001      	str	r1, [r0, #0]
 8005af8:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8005afa:	0000      	.short	0x0000
 8005afc:	e000ed88 	.word	0xe000ed88

08005b00 <pxPortInitialiseStack>:
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8005b00:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8005b04:	f840 3c04 	str.w	r3, [r0, #-4]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8005b08:	f021 0101 	bic.w	r1, r1, #1
 8005b0c:	f840 1c08 	str.w	r1, [r0, #-8]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8005b10:	4b05      	ldr	r3, [pc, #20]	; (8005b28 <pxPortInitialiseStack+0x28>)
 8005b12:	f840 3c0c 	str.w	r3, [r0, #-12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8005b16:	f840 2c20 	str.w	r2, [r0, #-32]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8005b1a:	f06f 0302 	mvn.w	r3, #2
 8005b1e:	f840 3c24 	str.w	r3, [r0, #-36]
}
 8005b22:	3844      	subs	r0, #68	; 0x44
 8005b24:	4770      	bx	lr
 8005b26:	bf00      	nop
 8005b28:	08005a85 	.word	0x08005a85
 8005b2c:	00000000 	.word	0x00000000

08005b30 <SVC_Handler>:
	__asm volatile (
 8005b30:	4b07      	ldr	r3, [pc, #28]	; (8005b50 <pxCurrentTCBConst2>)
 8005b32:	6819      	ldr	r1, [r3, #0]
 8005b34:	6808      	ldr	r0, [r1, #0]
 8005b36:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005b3a:	f380 8809 	msr	PSP, r0
 8005b3e:	f3bf 8f6f 	isb	sy
 8005b42:	f04f 0000 	mov.w	r0, #0
 8005b46:	f380 8811 	msr	BASEPRI, r0
 8005b4a:	4770      	bx	lr
 8005b4c:	f3af 8000 	nop.w

08005b50 <pxCurrentTCBConst2>:
 8005b50:	20006d90 	.word	0x20006d90

08005b54 <vPortEnterCritical>:
 8005b54:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b58:	f383 8811 	msr	BASEPRI, r3
 8005b5c:	f3bf 8f6f 	isb	sy
 8005b60:	f3bf 8f4f 	dsb	sy
	uxCriticalNesting++;
 8005b64:	4a0b      	ldr	r2, [pc, #44]	; (8005b94 <vPortEnterCritical+0x40>)
 8005b66:	6813      	ldr	r3, [r2, #0]
 8005b68:	3301      	adds	r3, #1
 8005b6a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 1 )
 8005b6c:	2b01      	cmp	r3, #1
 8005b6e:	d000      	beq.n	8005b72 <vPortEnterCritical+0x1e>
}
 8005b70:	4770      	bx	lr
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8005b72:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8005b76:	f8d3 3d04 	ldr.w	r3, [r3, #3332]	; 0xd04
 8005b7a:	f013 0fff 	tst.w	r3, #255	; 0xff
 8005b7e:	d0f7      	beq.n	8005b70 <vPortEnterCritical+0x1c>
 8005b80:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b84:	f383 8811 	msr	BASEPRI, r3
 8005b88:	f3bf 8f6f 	isb	sy
 8005b8c:	f3bf 8f4f 	dsb	sy
 8005b90:	e7fe      	b.n	8005b90 <vPortEnterCritical+0x3c>
 8005b92:	bf00      	nop
 8005b94:	20000020 	.word	0x20000020

08005b98 <vPortExitCritical>:
	configASSERT( uxCriticalNesting );
 8005b98:	4b09      	ldr	r3, [pc, #36]	; (8005bc0 <vPortExitCritical+0x28>)
 8005b9a:	681b      	ldr	r3, [r3, #0]
 8005b9c:	b943      	cbnz	r3, 8005bb0 <vPortExitCritical+0x18>
 8005b9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ba2:	f383 8811 	msr	BASEPRI, r3
 8005ba6:	f3bf 8f6f 	isb	sy
 8005baa:	f3bf 8f4f 	dsb	sy
 8005bae:	e7fe      	b.n	8005bae <vPortExitCritical+0x16>
	uxCriticalNesting--;
 8005bb0:	3b01      	subs	r3, #1
 8005bb2:	4a03      	ldr	r2, [pc, #12]	; (8005bc0 <vPortExitCritical+0x28>)
 8005bb4:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8005bb6:	b90b      	cbnz	r3, 8005bbc <vPortExitCritical+0x24>
	__asm volatile
 8005bb8:	f383 8811 	msr	BASEPRI, r3
}
 8005bbc:	4770      	bx	lr
 8005bbe:	bf00      	nop
 8005bc0:	20000020 	.word	0x20000020
	...

08005bd0 <PendSV_Handler>:
	__asm volatile
 8005bd0:	f3ef 8009 	mrs	r0, PSP
 8005bd4:	f3bf 8f6f 	isb	sy
 8005bd8:	4b15      	ldr	r3, [pc, #84]	; (8005c30 <pxCurrentTCBConst>)
 8005bda:	681a      	ldr	r2, [r3, #0]
 8005bdc:	f01e 0f10 	tst.w	lr, #16
 8005be0:	bf08      	it	eq
 8005be2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8005be6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005bea:	6010      	str	r0, [r2, #0]
 8005bec:	e92d 0009 	stmdb	sp!, {r0, r3}
 8005bf0:	f04f 0050 	mov.w	r0, #80	; 0x50
 8005bf4:	f380 8811 	msr	BASEPRI, r0
 8005bf8:	f3bf 8f4f 	dsb	sy
 8005bfc:	f3bf 8f6f 	isb	sy
 8005c00:	f7ff fb04 	bl	800520c <vTaskSwitchContext>
 8005c04:	f04f 0000 	mov.w	r0, #0
 8005c08:	f380 8811 	msr	BASEPRI, r0
 8005c0c:	bc09      	pop	{r0, r3}
 8005c0e:	6819      	ldr	r1, [r3, #0]
 8005c10:	6808      	ldr	r0, [r1, #0]
 8005c12:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005c16:	f01e 0f10 	tst.w	lr, #16
 8005c1a:	bf08      	it	eq
 8005c1c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8005c20:	f380 8809 	msr	PSP, r0
 8005c24:	f3bf 8f6f 	isb	sy
 8005c28:	4770      	bx	lr
 8005c2a:	bf00      	nop
 8005c2c:	f3af 8000 	nop.w

08005c30 <pxCurrentTCBConst>:
 8005c30:	20006d90 	.word	0x20006d90

08005c34 <xPortSysTickHandler>:
{
 8005c34:	b508      	push	{r3, lr}
	__asm volatile
 8005c36:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c3a:	f383 8811 	msr	BASEPRI, r3
 8005c3e:	f3bf 8f6f 	isb	sy
 8005c42:	f3bf 8f4f 	dsb	sy
		if( xTaskIncrementTick() != pdFALSE )
 8005c46:	f7ff f99f 	bl	8004f88 <xTaskIncrementTick>
 8005c4a:	b128      	cbz	r0, 8005c58 <xPortSysTickHandler+0x24>
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8005c4c:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8005c50:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005c54:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
	__asm volatile
 8005c58:	2300      	movs	r3, #0
 8005c5a:	f383 8811 	msr	BASEPRI, r3
}
 8005c5e:	bd08      	pop	{r3, pc}

08005c60 <vPortSetupTimerInterrupt>:
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8005c60:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
 8005c64:	2300      	movs	r3, #0
 8005c66:	6113      	str	r3, [r2, #16]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8005c68:	6193      	str	r3, [r2, #24]
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8005c6a:	4b05      	ldr	r3, [pc, #20]	; (8005c80 <vPortSetupTimerInterrupt+0x20>)
 8005c6c:	681b      	ldr	r3, [r3, #0]
 8005c6e:	4905      	ldr	r1, [pc, #20]	; (8005c84 <vPortSetupTimerInterrupt+0x24>)
 8005c70:	fba1 1303 	umull	r1, r3, r1, r3
 8005c74:	099b      	lsrs	r3, r3, #6
 8005c76:	3b01      	subs	r3, #1
 8005c78:	6153      	str	r3, [r2, #20]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8005c7a:	2307      	movs	r3, #7
 8005c7c:	6113      	str	r3, [r2, #16]
}
 8005c7e:	4770      	bx	lr
 8005c80:	20000000 	.word	0x20000000
 8005c84:	10624dd3 	.word	0x10624dd3

08005c88 <xPortStartScheduler>:
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8005c88:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8005c8c:	f8d3 2d00 	ldr.w	r2, [r3, #3328]	; 0xd00
 8005c90:	4b3e      	ldr	r3, [pc, #248]	; (8005d8c <xPortStartScheduler+0x104>)
 8005c92:	429a      	cmp	r2, r3
 8005c94:	d03b      	beq.n	8005d0e <xPortStartScheduler+0x86>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8005c96:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8005c9a:	f8d3 2d00 	ldr.w	r2, [r3, #3328]	; 0xd00
 8005c9e:	4b3c      	ldr	r3, [pc, #240]	; (8005d90 <xPortStartScheduler+0x108>)
 8005ca0:	429a      	cmp	r2, r3
 8005ca2:	d03d      	beq.n	8005d20 <xPortStartScheduler+0x98>
{
 8005ca4:	b530      	push	{r4, r5, lr}
 8005ca6:	b083      	sub	sp, #12
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8005ca8:	4b3a      	ldr	r3, [pc, #232]	; (8005d94 <xPortStartScheduler+0x10c>)
 8005caa:	781a      	ldrb	r2, [r3, #0]
 8005cac:	b2d2      	uxtb	r2, r2
 8005cae:	9201      	str	r2, [sp, #4]
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8005cb0:	22ff      	movs	r2, #255	; 0xff
 8005cb2:	701a      	strb	r2, [r3, #0]
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8005cb4:	781b      	ldrb	r3, [r3, #0]
 8005cb6:	b2db      	uxtb	r3, r3
 8005cb8:	f88d 3003 	strb.w	r3, [sp, #3]
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8005cbc:	f89d 3003 	ldrb.w	r3, [sp, #3]
 8005cc0:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8005cc4:	4a34      	ldr	r2, [pc, #208]	; (8005d98 <xPortStartScheduler+0x110>)
 8005cc6:	7013      	strb	r3, [r2, #0]
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8005cc8:	4b34      	ldr	r3, [pc, #208]	; (8005d9c <xPortStartScheduler+0x114>)
 8005cca:	2207      	movs	r2, #7
 8005ccc:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8005cce:	f89d 3003 	ldrb.w	r3, [sp, #3]
 8005cd2:	f013 0f80 	tst.w	r3, #128	; 0x80
 8005cd6:	d011      	beq.n	8005cfc <xPortStartScheduler+0x74>
 8005cd8:	2206      	movs	r2, #6
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8005cda:	f89d 3003 	ldrb.w	r3, [sp, #3]
 8005cde:	005b      	lsls	r3, r3, #1
 8005ce0:	b2db      	uxtb	r3, r3
 8005ce2:	f88d 3003 	strb.w	r3, [sp, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8005ce6:	f89d 3003 	ldrb.w	r3, [sp, #3]
 8005cea:	4611      	mov	r1, r2
 8005cec:	3a01      	subs	r2, #1
 8005cee:	f013 0f80 	tst.w	r3, #128	; 0x80
 8005cf2:	d1f2      	bne.n	8005cda <xPortStartScheduler+0x52>
 8005cf4:	4b29      	ldr	r3, [pc, #164]	; (8005d9c <xPortStartScheduler+0x114>)
 8005cf6:	6019      	str	r1, [r3, #0]
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8005cf8:	2903      	cmp	r1, #3
 8005cfa:	d01a      	beq.n	8005d32 <xPortStartScheduler+0xaa>
	__asm volatile
 8005cfc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d00:	f383 8811 	msr	BASEPRI, r3
 8005d04:	f3bf 8f6f 	isb	sy
 8005d08:	f3bf 8f4f 	dsb	sy
 8005d0c:	e7fe      	b.n	8005d0c <xPortStartScheduler+0x84>
 8005d0e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d12:	f383 8811 	msr	BASEPRI, r3
 8005d16:	f3bf 8f6f 	isb	sy
 8005d1a:	f3bf 8f4f 	dsb	sy
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8005d1e:	e7fe      	b.n	8005d1e <xPortStartScheduler+0x96>
 8005d20:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d24:	f383 8811 	msr	BASEPRI, r3
 8005d28:	f3bf 8f6f 	isb	sy
 8005d2c:	f3bf 8f4f 	dsb	sy
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8005d30:	e7fe      	b.n	8005d30 <xPortStartScheduler+0xa8>
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8005d32:	4b1a      	ldr	r3, [pc, #104]	; (8005d9c <xPortStartScheduler+0x114>)
 8005d34:	f44f 7240 	mov.w	r2, #768	; 0x300
 8005d38:	601a      	str	r2, [r3, #0]
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8005d3a:	9b01      	ldr	r3, [sp, #4]
 8005d3c:	b2db      	uxtb	r3, r3
 8005d3e:	4a15      	ldr	r2, [pc, #84]	; (8005d94 <xPortStartScheduler+0x10c>)
 8005d40:	7013      	strb	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8005d42:	f04f 24e0 	mov.w	r4, #3758153728	; 0xe000e000
 8005d46:	f8d4 3d20 	ldr.w	r3, [r4, #3360]	; 0xd20
 8005d4a:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8005d4e:	f8c4 3d20 	str.w	r3, [r4, #3360]	; 0xd20
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8005d52:	f8d4 3d20 	ldr.w	r3, [r4, #3360]	; 0xd20
 8005d56:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8005d5a:	f8c4 3d20 	str.w	r3, [r4, #3360]	; 0xd20
	vPortSetupTimerInterrupt();
 8005d5e:	f7ff ff7f 	bl	8005c60 <vPortSetupTimerInterrupt>
	uxCriticalNesting = 0;
 8005d62:	2500      	movs	r5, #0
 8005d64:	4b0e      	ldr	r3, [pc, #56]	; (8005da0 <xPortStartScheduler+0x118>)
 8005d66:	601d      	str	r5, [r3, #0]
	vPortEnableVFP();
 8005d68:	f7ff fec0 	bl	8005aec <vPortEnableVFP>
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8005d6c:	f8d4 3f34 	ldr.w	r3, [r4, #3892]	; 0xf34
 8005d70:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8005d74:	f8c4 3f34 	str.w	r3, [r4, #3892]	; 0xf34
	prvPortStartFirstTask();
 8005d78:	f7ff fea4 	bl	8005ac4 <prvPortStartFirstTask>
	vTaskSwitchContext();
 8005d7c:	f7ff fa46 	bl	800520c <vTaskSwitchContext>
	prvTaskExitError();
 8005d80:	f7ff fe80 	bl	8005a84 <prvTaskExitError>
}
 8005d84:	4628      	mov	r0, r5
 8005d86:	b003      	add	sp, #12
 8005d88:	bd30      	pop	{r4, r5, pc}
 8005d8a:	bf00      	nop
 8005d8c:	410fc271 	.word	0x410fc271
 8005d90:	410fc270 	.word	0x410fc270
 8005d94:	e000e400 	.word	0xe000e400
 8005d98:	200073b8 	.word	0x200073b8
 8005d9c:	200073bc 	.word	0x200073bc
 8005da0:	20000020 	.word	0x20000020

08005da4 <vPortValidateInterruptPriority>:
	{
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8005da4:	f3ef 8305 	mrs	r3, IPSR

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8005da8:	2b0f      	cmp	r3, #15
 8005daa:	d90f      	bls.n	8005dcc <vPortValidateInterruptPriority+0x28>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8005dac:	4a11      	ldr	r2, [pc, #68]	; (8005df4 <vPortValidateInterruptPriority+0x50>)
 8005dae:	5c9b      	ldrb	r3, [r3, r2]
 8005db0:	b2db      	uxtb	r3, r3
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8005db2:	4a11      	ldr	r2, [pc, #68]	; (8005df8 <vPortValidateInterruptPriority+0x54>)
 8005db4:	7812      	ldrb	r2, [r2, #0]
 8005db6:	429a      	cmp	r2, r3
 8005db8:	d908      	bls.n	8005dcc <vPortValidateInterruptPriority+0x28>
 8005dba:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005dbe:	f383 8811 	msr	BASEPRI, r3
 8005dc2:	f3bf 8f6f 	isb	sy
 8005dc6:	f3bf 8f4f 	dsb	sy
 8005dca:	e7fe      	b.n	8005dca <vPortValidateInterruptPriority+0x26>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8005dcc:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8005dd0:	f8d3 3d0c 	ldr.w	r3, [r3, #3340]	; 0xd0c
 8005dd4:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8005dd8:	4a08      	ldr	r2, [pc, #32]	; (8005dfc <vPortValidateInterruptPriority+0x58>)
 8005dda:	6812      	ldr	r2, [r2, #0]
 8005ddc:	4293      	cmp	r3, r2
 8005dde:	d908      	bls.n	8005df2 <vPortValidateInterruptPriority+0x4e>
 8005de0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005de4:	f383 8811 	msr	BASEPRI, r3
 8005de8:	f3bf 8f6f 	isb	sy
 8005dec:	f3bf 8f4f 	dsb	sy
 8005df0:	e7fe      	b.n	8005df0 <vPortValidateInterruptPriority+0x4c>
	}
 8005df2:	4770      	bx	lr
 8005df4:	e000e3f0 	.word	0xe000e3f0
 8005df8:	200073b8 	.word	0x200073b8
 8005dfc:	200073bc 	.word	0x200073bc

08005e00 <prvInsertBlockIntoFreeList>:
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8005e00:	4b15      	ldr	r3, [pc, #84]	; (8005e58 <prvInsertBlockIntoFreeList+0x58>)
 8005e02:	461a      	mov	r2, r3
 8005e04:	681b      	ldr	r3, [r3, #0]
 8005e06:	4283      	cmp	r3, r0
 8005e08:	d3fb      	bcc.n	8005e02 <prvInsertBlockIntoFreeList+0x2>
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8005e0a:	6851      	ldr	r1, [r2, #4]
 8005e0c:	eb02 0c01 	add.w	ip, r2, r1
 8005e10:	4560      	cmp	r0, ip
 8005e12:	d009      	beq.n	8005e28 <prvInsertBlockIntoFreeList+0x28>
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8005e14:	6841      	ldr	r1, [r0, #4]
 8005e16:	eb00 0c01 	add.w	ip, r0, r1
 8005e1a:	4563      	cmp	r3, ip
 8005e1c:	d009      	beq.n	8005e32 <prvInsertBlockIntoFreeList+0x32>
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8005e1e:	6003      	str	r3, [r0, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8005e20:	4290      	cmp	r0, r2
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8005e22:	bf18      	it	ne
 8005e24:	6010      	strne	r0, [r2, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
 8005e26:	4770      	bx	lr
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8005e28:	6840      	ldr	r0, [r0, #4]
 8005e2a:	4401      	add	r1, r0
 8005e2c:	6051      	str	r1, [r2, #4]
		pxBlockToInsert = pxIterator;
 8005e2e:	4610      	mov	r0, r2
 8005e30:	e7f0      	b.n	8005e14 <prvInsertBlockIntoFreeList+0x14>
{
 8005e32:	b410      	push	{r4}
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8005e34:	4c09      	ldr	r4, [pc, #36]	; (8005e5c <prvInsertBlockIntoFreeList+0x5c>)
 8005e36:	6824      	ldr	r4, [r4, #0]
 8005e38:	42a3      	cmp	r3, r4
 8005e3a:	d00b      	beq.n	8005e54 <prvInsertBlockIntoFreeList+0x54>
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8005e3c:	685b      	ldr	r3, [r3, #4]
 8005e3e:	4419      	add	r1, r3
 8005e40:	6041      	str	r1, [r0, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8005e42:	6813      	ldr	r3, [r2, #0]
 8005e44:	681b      	ldr	r3, [r3, #0]
 8005e46:	6003      	str	r3, [r0, #0]
	if( pxIterator != pxBlockToInsert )
 8005e48:	4290      	cmp	r0, r2
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8005e4a:	bf18      	it	ne
 8005e4c:	6010      	strne	r0, [r2, #0]
	}
}
 8005e4e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005e52:	4770      	bx	lr
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8005e54:	6004      	str	r4, [r0, #0]
 8005e56:	e7f7      	b.n	8005e48 <prvInsertBlockIntoFreeList+0x48>
 8005e58:	2000afd8 	.word	0x2000afd8
 8005e5c:	200073c0 	.word	0x200073c0

08005e60 <pvPortMalloc>:
{
 8005e60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005e62:	4604      	mov	r4, r0
	vTaskSuspendAll();
 8005e64:	f7ff f87a 	bl	8004f5c <vTaskSuspendAll>
		if( pxEnd == NULL )
 8005e68:	4b44      	ldr	r3, [pc, #272]	; (8005f7c <pvPortMalloc+0x11c>)
 8005e6a:	681b      	ldr	r3, [r3, #0]
 8005e6c:	b1b3      	cbz	r3, 8005e9c <pvPortMalloc+0x3c>
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8005e6e:	4b44      	ldr	r3, [pc, #272]	; (8005f80 <pvPortMalloc+0x120>)
 8005e70:	681d      	ldr	r5, [r3, #0]
 8005e72:	4225      	tst	r5, r4
 8005e74:	d17d      	bne.n	8005f72 <pvPortMalloc+0x112>
			if( xWantedSize > 0 )
 8005e76:	2c00      	cmp	r4, #0
 8005e78:	d07b      	beq.n	8005f72 <pvPortMalloc+0x112>
				xWantedSize += xHeapStructSize;
 8005e7a:	f104 0208 	add.w	r2, r4, #8
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8005e7e:	f014 0f07 	tst.w	r4, #7
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8005e82:	bf1c      	itt	ne
 8005e84:	f022 0207 	bicne.w	r2, r2, #7
 8005e88:	3208      	addne	r2, #8
			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8005e8a:	2a00      	cmp	r2, #0
 8005e8c:	d071      	beq.n	8005f72 <pvPortMalloc+0x112>
 8005e8e:	4b3d      	ldr	r3, [pc, #244]	; (8005f84 <pvPortMalloc+0x124>)
 8005e90:	681e      	ldr	r6, [r3, #0]
 8005e92:	4296      	cmp	r6, r2
 8005e94:	d36d      	bcc.n	8005f72 <pvPortMalloc+0x112>
				pxBlock = xStart.pxNextFreeBlock;
 8005e96:	493c      	ldr	r1, [pc, #240]	; (8005f88 <pvPortMalloc+0x128>)
 8005e98:	680c      	ldr	r4, [r1, #0]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8005e9a:	e027      	b.n	8005eec <pvPortMalloc+0x8c>
	uxAddress = ( size_t ) ucHeap;
 8005e9c:	4a3b      	ldr	r2, [pc, #236]	; (8005f8c <pvPortMalloc+0x12c>)
	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8005e9e:	f012 0f07 	tst.w	r2, #7
 8005ea2:	d007      	beq.n	8005eb4 <pvPortMalloc+0x54>
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8005ea4:	1dd1      	adds	r1, r2, #7
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005ea6:	f021 0107 	bic.w	r1, r1, #7
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8005eaa:	f502 5370 	add.w	r3, r2, #15360	; 0x3c00
 8005eae:	1a5b      	subs	r3, r3, r1
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005eb0:	460a      	mov	r2, r1
 8005eb2:	e001      	b.n	8005eb8 <pvPortMalloc+0x58>
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8005eb4:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8005eb8:	4833      	ldr	r0, [pc, #204]	; (8005f88 <pvPortMalloc+0x128>)
 8005eba:	6002      	str	r2, [r0, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8005ebc:	2100      	movs	r1, #0
 8005ebe:	6041      	str	r1, [r0, #4]
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8005ec0:	4413      	add	r3, r2
	uxAddress -= xHeapStructSize;
 8005ec2:	3b08      	subs	r3, #8
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005ec4:	f023 0307 	bic.w	r3, r3, #7
	pxEnd = ( void * ) uxAddress;
 8005ec8:	482c      	ldr	r0, [pc, #176]	; (8005f7c <pvPortMalloc+0x11c>)
 8005eca:	6003      	str	r3, [r0, #0]
	pxEnd->xBlockSize = 0;
 8005ecc:	6059      	str	r1, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8005ece:	6019      	str	r1, [r3, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8005ed0:	1a99      	subs	r1, r3, r2
 8005ed2:	6051      	str	r1, [r2, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8005ed4:	6013      	str	r3, [r2, #0]
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005ed6:	4b2e      	ldr	r3, [pc, #184]	; (8005f90 <pvPortMalloc+0x130>)
 8005ed8:	6019      	str	r1, [r3, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005eda:	4b2a      	ldr	r3, [pc, #168]	; (8005f84 <pvPortMalloc+0x124>)
 8005edc:	6019      	str	r1, [r3, #0]
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8005ede:	4b28      	ldr	r3, [pc, #160]	; (8005f80 <pvPortMalloc+0x120>)
 8005ee0:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8005ee4:	601a      	str	r2, [r3, #0]
}
 8005ee6:	e7c2      	b.n	8005e6e <pvPortMalloc+0xe>
 8005ee8:	4621      	mov	r1, r4
					pxBlock = pxBlock->pxNextFreeBlock;
 8005eea:	461c      	mov	r4, r3
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8005eec:	6863      	ldr	r3, [r4, #4]
 8005eee:	4293      	cmp	r3, r2
 8005ef0:	d202      	bcs.n	8005ef8 <pvPortMalloc+0x98>
 8005ef2:	6823      	ldr	r3, [r4, #0]
 8005ef4:	2b00      	cmp	r3, #0
 8005ef6:	d1f7      	bne.n	8005ee8 <pvPortMalloc+0x88>
				if( pxBlock != pxEnd )
 8005ef8:	4b20      	ldr	r3, [pc, #128]	; (8005f7c <pvPortMalloc+0x11c>)
 8005efa:	681b      	ldr	r3, [r3, #0]
 8005efc:	42a3      	cmp	r3, r4
 8005efe:	d038      	beq.n	8005f72 <pvPortMalloc+0x112>
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8005f00:	680f      	ldr	r7, [r1, #0]
 8005f02:	3708      	adds	r7, #8
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8005f04:	6823      	ldr	r3, [r4, #0]
 8005f06:	600b      	str	r3, [r1, #0]
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8005f08:	6863      	ldr	r3, [r4, #4]
 8005f0a:	1a9b      	subs	r3, r3, r2
 8005f0c:	2b10      	cmp	r3, #16
 8005f0e:	d910      	bls.n	8005f32 <pvPortMalloc+0xd2>
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8005f10:	18a0      	adds	r0, r4, r2
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005f12:	f010 0f07 	tst.w	r0, #7
 8005f16:	d008      	beq.n	8005f2a <pvPortMalloc+0xca>
 8005f18:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f1c:	f383 8811 	msr	BASEPRI, r3
 8005f20:	f3bf 8f6f 	isb	sy
 8005f24:	f3bf 8f4f 	dsb	sy
 8005f28:	e7fe      	b.n	8005f28 <pvPortMalloc+0xc8>
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8005f2a:	6043      	str	r3, [r0, #4]
						pxBlock->xBlockSize = xWantedSize;
 8005f2c:	6062      	str	r2, [r4, #4]
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8005f2e:	f7ff ff67 	bl	8005e00 <prvInsertBlockIntoFreeList>
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8005f32:	6863      	ldr	r3, [r4, #4]
 8005f34:	1af6      	subs	r6, r6, r3
 8005f36:	4a13      	ldr	r2, [pc, #76]	; (8005f84 <pvPortMalloc+0x124>)
 8005f38:	6016      	str	r6, [r2, #0]
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8005f3a:	4a15      	ldr	r2, [pc, #84]	; (8005f90 <pvPortMalloc+0x130>)
 8005f3c:	6812      	ldr	r2, [r2, #0]
 8005f3e:	4296      	cmp	r6, r2
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8005f40:	bf3c      	itt	cc
 8005f42:	4a13      	ldrcc	r2, [pc, #76]	; (8005f90 <pvPortMalloc+0x130>)
 8005f44:	6016      	strcc	r6, [r2, #0]
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8005f46:	431d      	orrs	r5, r3
 8005f48:	6065      	str	r5, [r4, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8005f4a:	2300      	movs	r3, #0
 8005f4c:	6023      	str	r3, [r4, #0]
					xNumberOfSuccessfulAllocations++;
 8005f4e:	4a11      	ldr	r2, [pc, #68]	; (8005f94 <pvPortMalloc+0x134>)
 8005f50:	6813      	ldr	r3, [r2, #0]
 8005f52:	3301      	adds	r3, #1
 8005f54:	6013      	str	r3, [r2, #0]
	( void ) xTaskResumeAll();
 8005f56:	f7ff f8b1 	bl	80050bc <xTaskResumeAll>
	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8005f5a:	f017 0f07 	tst.w	r7, #7
 8005f5e:	d00b      	beq.n	8005f78 <pvPortMalloc+0x118>
 8005f60:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f64:	f383 8811 	msr	BASEPRI, r3
 8005f68:	f3bf 8f6f 	isb	sy
 8005f6c:	f3bf 8f4f 	dsb	sy
 8005f70:	e7fe      	b.n	8005f70 <pvPortMalloc+0x110>
	( void ) xTaskResumeAll();
 8005f72:	f7ff f8a3 	bl	80050bc <xTaskResumeAll>
 8005f76:	2700      	movs	r7, #0
}
 8005f78:	4638      	mov	r0, r7
 8005f7a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005f7c:	200073c0 	.word	0x200073c0
 8005f80:	2000afc4 	.word	0x2000afc4
 8005f84:	2000afc8 	.word	0x2000afc8
 8005f88:	2000afd8 	.word	0x2000afd8
 8005f8c:	200073c4 	.word	0x200073c4
 8005f90:	2000afcc 	.word	0x2000afcc
 8005f94:	2000afd0 	.word	0x2000afd0

08005f98 <vPortFree>:
	if( pv != NULL )
 8005f98:	2800      	cmp	r0, #0
 8005f9a:	d033      	beq.n	8006004 <vPortFree+0x6c>
{
 8005f9c:	b510      	push	{r4, lr}
 8005f9e:	4604      	mov	r4, r0
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8005fa0:	f850 3c04 	ldr.w	r3, [r0, #-4]
 8005fa4:	4a18      	ldr	r2, [pc, #96]	; (8006008 <vPortFree+0x70>)
 8005fa6:	6812      	ldr	r2, [r2, #0]
 8005fa8:	4213      	tst	r3, r2
 8005faa:	d108      	bne.n	8005fbe <vPortFree+0x26>
 8005fac:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005fb0:	f383 8811 	msr	BASEPRI, r3
 8005fb4:	f3bf 8f6f 	isb	sy
 8005fb8:	f3bf 8f4f 	dsb	sy
 8005fbc:	e7fe      	b.n	8005fbc <vPortFree+0x24>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8005fbe:	f850 1c08 	ldr.w	r1, [r0, #-8]
 8005fc2:	b141      	cbz	r1, 8005fd6 <vPortFree+0x3e>
 8005fc4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005fc8:	f383 8811 	msr	BASEPRI, r3
 8005fcc:	f3bf 8f6f 	isb	sy
 8005fd0:	f3bf 8f4f 	dsb	sy
 8005fd4:	e7fe      	b.n	8005fd4 <vPortFree+0x3c>
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8005fd6:	ea23 0302 	bic.w	r3, r3, r2
 8005fda:	f840 3c04 	str.w	r3, [r0, #-4]
				vTaskSuspendAll();
 8005fde:	f7fe ffbd 	bl	8004f5c <vTaskSuspendAll>
					xFreeBytesRemaining += pxLink->xBlockSize;
 8005fe2:	4a0a      	ldr	r2, [pc, #40]	; (800600c <vPortFree+0x74>)
 8005fe4:	f854 3c04 	ldr.w	r3, [r4, #-4]
 8005fe8:	6811      	ldr	r1, [r2, #0]
 8005fea:	440b      	add	r3, r1
 8005fec:	6013      	str	r3, [r2, #0]
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8005fee:	f1a4 0008 	sub.w	r0, r4, #8
 8005ff2:	f7ff ff05 	bl	8005e00 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8005ff6:	4a06      	ldr	r2, [pc, #24]	; (8006010 <vPortFree+0x78>)
 8005ff8:	6813      	ldr	r3, [r2, #0]
 8005ffa:	3301      	adds	r3, #1
 8005ffc:	6013      	str	r3, [r2, #0]
				( void ) xTaskResumeAll();
 8005ffe:	f7ff f85d 	bl	80050bc <xTaskResumeAll>
}
 8006002:	bd10      	pop	{r4, pc}
 8006004:	4770      	bx	lr
 8006006:	bf00      	nop
 8006008:	2000afc4 	.word	0x2000afc4
 800600c:	2000afc8 	.word	0x2000afc8
 8006010:	2000afd4 	.word	0x2000afd4

08006014 <netconn_apimsg>:
 * @param apimsg a struct containing the function to call and its parameters
 * @return ERR_OK if the function was called, another err_t if not
 */
static err_t
netconn_apimsg(tcpip_callback_fn fn, struct api_msg *apimsg)
{
 8006014:	b510      	push	{r4, lr}
 8006016:	460c      	mov	r4, r1

#if LWIP_NETCONN_SEM_PER_THREAD
  apimsg->op_completed_sem = LWIP_NETCONN_THREAD_SEM_GET();
#endif /* LWIP_NETCONN_SEM_PER_THREAD */

  err = tcpip_send_msg_wait_sem(fn, apimsg, LWIP_API_MSG_SEM(apimsg));
 8006018:	680a      	ldr	r2, [r1, #0]
 800601a:	320c      	adds	r2, #12
 800601c:	f001 fce2 	bl	80079e4 <tcpip_send_msg_wait_sem>
  if (err == ERR_OK) {
 8006020:	b100      	cbz	r0, 8006024 <netconn_apimsg+0x10>
    return apimsg->err;
  }
  return err;
}
 8006022:	bd10      	pop	{r4, pc}
    return apimsg->err;
 8006024:	f994 0004 	ldrsb.w	r0, [r4, #4]
 8006028:	e7fb      	b.n	8006022 <netconn_apimsg+0xe>
	...

0800602c <netconn_tcp_recvd_msg>:
}

#if LWIP_TCP
static err_t
netconn_tcp_recvd_msg(struct netconn *conn, size_t len, struct api_msg *msg)
{
 800602c:	b510      	push	{r4, lr}
  LWIP_ERROR("netconn_recv_tcp_pbuf: invalid conn", (conn != NULL) &&
 800602e:	b160      	cbz	r0, 800604a <netconn_tcp_recvd_msg+0x1e>
 8006030:	460c      	mov	r4, r1
 8006032:	4611      	mov	r1, r2
 8006034:	7803      	ldrb	r3, [r0, #0]
 8006036:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800603a:	2b10      	cmp	r3, #16
 800603c:	d105      	bne.n	800604a <netconn_tcp_recvd_msg+0x1e>
             NETCONNTYPE_GROUP(netconn_type(conn)) == NETCONN_TCP, return ERR_ARG;);

  msg->conn = conn;
 800603e:	6010      	str	r0, [r2, #0]
  msg->msg.r.len = len;
 8006040:	6094      	str	r4, [r2, #8]

  return netconn_apimsg(lwip_netconn_do_recv, msg);
 8006042:	4807      	ldr	r0, [pc, #28]	; (8006060 <netconn_tcp_recvd_msg+0x34>)
 8006044:	f7ff ffe6 	bl	8006014 <netconn_apimsg>
}
 8006048:	bd10      	pop	{r4, pc}
  LWIP_ERROR("netconn_recv_tcp_pbuf: invalid conn", (conn != NULL) &&
 800604a:	4b06      	ldr	r3, [pc, #24]	; (8006064 <netconn_tcp_recvd_msg+0x38>)
 800604c:	f240 22a7 	movw	r2, #679	; 0x2a7
 8006050:	4905      	ldr	r1, [pc, #20]	; (8006068 <netconn_tcp_recvd_msg+0x3c>)
 8006052:	4806      	ldr	r0, [pc, #24]	; (800606c <netconn_tcp_recvd_msg+0x40>)
 8006054:	f009 f84e 	bl	800f0f4 <iprintf>
 8006058:	f06f 000f 	mvn.w	r0, #15
 800605c:	e7f4      	b.n	8006048 <netconn_tcp_recvd_msg+0x1c>
 800605e:	bf00      	nop
 8006060:	080075e1 	.word	0x080075e1
 8006064:	080103f8 	.word	0x080103f8
 8006068:	0801042c 	.word	0x0801042c
 800606c:	080103a4 	.word	0x080103a4

08006070 <netconn_close_shutdown>:
 * @param how fully close or only shutdown one side?
 * @return ERR_OK if the netconn was closed, any other err_t on error
 */
static err_t
netconn_close_shutdown(struct netconn *conn, u8_t how)
{
 8006070:	b500      	push	{lr}
 8006072:	b089      	sub	sp, #36	; 0x24
  API_MSG_VAR_DECLARE(msg);
  err_t err;
  LWIP_UNUSED_ARG(how);

  LWIP_ERROR("netconn_close: invalid conn",  (conn != NULL), return ERR_ARG;);
 8006074:	b160      	cbz	r0, 8006090 <netconn_close_shutdown+0x20>

  API_MSG_VAR_ALLOC(msg);
  API_MSG_VAR_REF(msg).conn = conn;
 8006076:	9000      	str	r0, [sp, #0]
#if LWIP_TCP
  /* shutting down both ends is the same as closing */
  API_MSG_VAR_REF(msg).msg.sd.shut = how;
 8006078:	f88d 1008 	strb.w	r1, [sp, #8]
#if LWIP_SO_SNDTIMEO || LWIP_SO_LINGER
  /* get the time we started, which is later compared to
     sys_now() + conn->send_timeout */
  API_MSG_VAR_REF(msg).msg.sd.time_started = sys_now();
#else /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
  API_MSG_VAR_REF(msg).msg.sd.polls_left =
 800607c:	2329      	movs	r3, #41	; 0x29
 800607e:	f88d 3009 	strb.w	r3, [sp, #9]
    ((LWIP_TCP_CLOSE_TIMEOUT_MS_DEFAULT + TCP_SLOW_INTERVAL - 1) / TCP_SLOW_INTERVAL) + 1;
#endif /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
#endif /* LWIP_TCP */
  err = netconn_apimsg(lwip_netconn_do_close, &API_MSG_VAR_REF(msg));
 8006082:	4669      	mov	r1, sp
 8006084:	4807      	ldr	r0, [pc, #28]	; (80060a4 <netconn_close_shutdown+0x34>)
 8006086:	f7ff ffc5 	bl	8006014 <netconn_apimsg>
  API_MSG_VAR_FREE(msg);

  return err;
}
 800608a:	b009      	add	sp, #36	; 0x24
 800608c:	f85d fb04 	ldr.w	pc, [sp], #4
  LWIP_ERROR("netconn_close: invalid conn",  (conn != NULL), return ERR_ARG;);
 8006090:	4b05      	ldr	r3, [pc, #20]	; (80060a8 <netconn_close_shutdown+0x38>)
 8006092:	f240 4247 	movw	r2, #1095	; 0x447
 8006096:	4905      	ldr	r1, [pc, #20]	; (80060ac <netconn_close_shutdown+0x3c>)
 8006098:	4805      	ldr	r0, [pc, #20]	; (80060b0 <netconn_close_shutdown+0x40>)
 800609a:	f009 f82b 	bl	800f0f4 <iprintf>
 800609e:	f06f 000f 	mvn.w	r0, #15
 80060a2:	e7f2      	b.n	800608a <netconn_close_shutdown+0x1a>
 80060a4:	080076f1 	.word	0x080076f1
 80060a8:	080103f8 	.word	0x080103f8
 80060ac:	08010450 	.word	0x08010450
 80060b0:	080103a4 	.word	0x080103a4

080060b4 <netconn_new_with_proto_and_callback>:
{
 80060b4:	b570      	push	{r4, r5, r6, lr}
 80060b6:	b088      	sub	sp, #32
 80060b8:	460c      	mov	r4, r1
  conn = netconn_alloc(t, callback);
 80060ba:	4611      	mov	r1, r2
 80060bc:	f001 f816 	bl	80070ec <netconn_alloc>
  if (conn != NULL) {
 80060c0:	4605      	mov	r5, r0
 80060c2:	b138      	cbz	r0, 80060d4 <netconn_new_with_proto_and_callback+0x20>
    API_MSG_VAR_REF(msg).msg.n.proto = proto;
 80060c4:	f88d 4008 	strb.w	r4, [sp, #8]
    API_MSG_VAR_REF(msg).conn = conn;
 80060c8:	9000      	str	r0, [sp, #0]
    err = netconn_apimsg(lwip_netconn_do_newconn, &API_MSG_VAR_REF(msg));
 80060ca:	4669      	mov	r1, sp
 80060cc:	4820      	ldr	r0, [pc, #128]	; (8006150 <netconn_new_with_proto_and_callback+0x9c>)
 80060ce:	f7ff ffa1 	bl	8006014 <netconn_apimsg>
    if (err != ERR_OK) {
 80060d2:	b910      	cbnz	r0, 80060da <netconn_new_with_proto_and_callback+0x26>
}
 80060d4:	4628      	mov	r0, r5
 80060d6:	b008      	add	sp, #32
 80060d8:	bd70      	pop	{r4, r5, r6, pc}
      LWIP_ASSERT("freeing conn without freeing pcb", conn->pcb.tcp == NULL);
 80060da:	686b      	ldr	r3, [r5, #4]
 80060dc:	b12b      	cbz	r3, 80060ea <netconn_new_with_proto_and_callback+0x36>
 80060de:	4b1d      	ldr	r3, [pc, #116]	; (8006154 <netconn_new_with_proto_and_callback+0xa0>)
 80060e0:	22a3      	movs	r2, #163	; 0xa3
 80060e2:	491d      	ldr	r1, [pc, #116]	; (8006158 <netconn_new_with_proto_and_callback+0xa4>)
 80060e4:	481d      	ldr	r0, [pc, #116]	; (800615c <netconn_new_with_proto_and_callback+0xa8>)
 80060e6:	f009 f805 	bl	800f0f4 <iprintf>
      LWIP_ASSERT("conn has no recvmbox", sys_mbox_valid(&conn->recvmbox));
 80060ea:	f105 0410 	add.w	r4, r5, #16
 80060ee:	4620      	mov	r0, r4
 80060f0:	f008 fd74 	bl	800ebdc <sys_mbox_valid>
 80060f4:	b1b0      	cbz	r0, 8006124 <netconn_new_with_proto_and_callback+0x70>
      LWIP_ASSERT("conn->acceptmbox shouldn't exist", !sys_mbox_valid(&conn->acceptmbox));
 80060f6:	f105 0014 	add.w	r0, r5, #20
 80060fa:	f008 fd6f 	bl	800ebdc <sys_mbox_valid>
 80060fe:	b9c0      	cbnz	r0, 8006132 <netconn_new_with_proto_and_callback+0x7e>
      LWIP_ASSERT("conn has no op_completed", sys_sem_valid(&conn->op_completed));
 8006100:	f105 060c 	add.w	r6, r5, #12
 8006104:	4630      	mov	r0, r6
 8006106:	f008 fdaf 	bl	800ec68 <sys_sem_valid>
 800610a:	b1c8      	cbz	r0, 8006140 <netconn_new_with_proto_and_callback+0x8c>
      sys_sem_free(&conn->op_completed);
 800610c:	4630      	mov	r0, r6
 800610e:	f008 fda6 	bl	800ec5e <sys_sem_free>
      sys_mbox_free(&conn->recvmbox);
 8006112:	4620      	mov	r0, r4
 8006114:	f008 fd1d 	bl	800eb52 <sys_mbox_free>
      memp_free(MEMP_NETCONN, conn);
 8006118:	4629      	mov	r1, r5
 800611a:	2007      	movs	r0, #7
 800611c:	f002 f832 	bl	8008184 <memp_free>
      return NULL;
 8006120:	2500      	movs	r5, #0
 8006122:	e7d7      	b.n	80060d4 <netconn_new_with_proto_and_callback+0x20>
      LWIP_ASSERT("conn has no recvmbox", sys_mbox_valid(&conn->recvmbox));
 8006124:	4b0b      	ldr	r3, [pc, #44]	; (8006154 <netconn_new_with_proto_and_callback+0xa0>)
 8006126:	22a4      	movs	r2, #164	; 0xa4
 8006128:	490d      	ldr	r1, [pc, #52]	; (8006160 <netconn_new_with_proto_and_callback+0xac>)
 800612a:	480c      	ldr	r0, [pc, #48]	; (800615c <netconn_new_with_proto_and_callback+0xa8>)
 800612c:	f008 ffe2 	bl	800f0f4 <iprintf>
 8006130:	e7e1      	b.n	80060f6 <netconn_new_with_proto_and_callback+0x42>
      LWIP_ASSERT("conn->acceptmbox shouldn't exist", !sys_mbox_valid(&conn->acceptmbox));
 8006132:	4b08      	ldr	r3, [pc, #32]	; (8006154 <netconn_new_with_proto_and_callback+0xa0>)
 8006134:	22a6      	movs	r2, #166	; 0xa6
 8006136:	490b      	ldr	r1, [pc, #44]	; (8006164 <netconn_new_with_proto_and_callback+0xb0>)
 8006138:	4808      	ldr	r0, [pc, #32]	; (800615c <netconn_new_with_proto_and_callback+0xa8>)
 800613a:	f008 ffdb 	bl	800f0f4 <iprintf>
 800613e:	e7df      	b.n	8006100 <netconn_new_with_proto_and_callback+0x4c>
      LWIP_ASSERT("conn has no op_completed", sys_sem_valid(&conn->op_completed));
 8006140:	4b04      	ldr	r3, [pc, #16]	; (8006154 <netconn_new_with_proto_and_callback+0xa0>)
 8006142:	22a9      	movs	r2, #169	; 0xa9
 8006144:	4908      	ldr	r1, [pc, #32]	; (8006168 <netconn_new_with_proto_and_callback+0xb4>)
 8006146:	4805      	ldr	r0, [pc, #20]	; (800615c <netconn_new_with_proto_and_callback+0xa8>)
 8006148:	f008 ffd4 	bl	800f0f4 <iprintf>
 800614c:	e7de      	b.n	800610c <netconn_new_with_proto_and_callback+0x58>
 800614e:	bf00      	nop
 8006150:	0800707d 	.word	0x0800707d
 8006154:	080103f8 	.word	0x080103f8
 8006158:	0801046c 	.word	0x0801046c
 800615c:	080103a4 	.word	0x080103a4
 8006160:	08010490 	.word	0x08010490
 8006164:	080104a8 	.word	0x080104a8
 8006168:	080104cc 	.word	0x080104cc

0800616c <netconn_prepare_delete>:
  if (conn == NULL) {
 800616c:	b160      	cbz	r0, 8006188 <netconn_prepare_delete+0x1c>
{
 800616e:	b500      	push	{lr}
 8006170:	b089      	sub	sp, #36	; 0x24
  API_MSG_VAR_REF(msg).conn = conn;
 8006172:	9000      	str	r0, [sp, #0]
  API_MSG_VAR_REF(msg).msg.sd.polls_left =
 8006174:	2329      	movs	r3, #41	; 0x29
 8006176:	f88d 3009 	strb.w	r3, [sp, #9]
  err = netconn_apimsg(lwip_netconn_do_delconn, &API_MSG_VAR_REF(msg));
 800617a:	4669      	mov	r1, sp
 800617c:	4803      	ldr	r0, [pc, #12]	; (800618c <netconn_prepare_delete+0x20>)
 800617e:	f7ff ff49 	bl	8006014 <netconn_apimsg>
}
 8006182:	b009      	add	sp, #36	; 0x24
 8006184:	f85d fb04 	ldr.w	pc, [sp], #4
    return ERR_OK;
 8006188:	2000      	movs	r0, #0
}
 800618a:	4770      	bx	lr
 800618c:	080073b1 	.word	0x080073b1

08006190 <netconn_delete>:
{
 8006190:	b538      	push	{r3, r4, r5, lr}
  if (conn == NULL) {
 8006192:	b150      	cbz	r0, 80061aa <netconn_delete+0x1a>
 8006194:	4605      	mov	r5, r0
    err = netconn_prepare_delete(conn);
 8006196:	f7ff ffe9 	bl	800616c <netconn_prepare_delete>
  if (err == ERR_OK) {
 800619a:	4604      	mov	r4, r0
 800619c:	b108      	cbz	r0, 80061a2 <netconn_delete+0x12>
}
 800619e:	4620      	mov	r0, r4
 80061a0:	bd38      	pop	{r3, r4, r5, pc}
    netconn_free(conn);
 80061a2:	4628      	mov	r0, r5
 80061a4:	f000 ffe6 	bl	8007174 <netconn_free>
 80061a8:	e7f9      	b.n	800619e <netconn_delete+0xe>
    return ERR_OK;
 80061aa:	2400      	movs	r4, #0
 80061ac:	e7f7      	b.n	800619e <netconn_delete+0xe>
	...

080061b0 <netconn_bind>:
{
 80061b0:	b500      	push	{lr}
 80061b2:	b089      	sub	sp, #36	; 0x24
  LWIP_ERROR("netconn_bind: invalid conn", (conn != NULL), return ERR_ARG;);
 80061b4:	b178      	cbz	r0, 80061d6 <netconn_bind+0x26>
 80061b6:	4603      	mov	r3, r0
    addr = IP4_ADDR_ANY;
 80061b8:	480c      	ldr	r0, [pc, #48]	; (80061ec <netconn_bind+0x3c>)
 80061ba:	2900      	cmp	r1, #0
 80061bc:	bf08      	it	eq
 80061be:	4601      	moveq	r1, r0
  API_MSG_VAR_REF(msg).conn = conn;
 80061c0:	9300      	str	r3, [sp, #0]
  API_MSG_VAR_REF(msg).msg.bc.ipaddr = API_MSG_VAR_REF(addr);
 80061c2:	9102      	str	r1, [sp, #8]
  API_MSG_VAR_REF(msg).msg.bc.port = port;
 80061c4:	f8ad 200c 	strh.w	r2, [sp, #12]
  err = netconn_apimsg(lwip_netconn_do_bind, &API_MSG_VAR_REF(msg));
 80061c8:	4669      	mov	r1, sp
 80061ca:	4809      	ldr	r0, [pc, #36]	; (80061f0 <netconn_bind+0x40>)
 80061cc:	f7ff ff22 	bl	8006014 <netconn_apimsg>
}
 80061d0:	b009      	add	sp, #36	; 0x24
 80061d2:	f85d fb04 	ldr.w	pc, [sp], #4
  LWIP_ERROR("netconn_bind: invalid conn", (conn != NULL), return ERR_ARG;);
 80061d6:	4b07      	ldr	r3, [pc, #28]	; (80061f4 <netconn_bind+0x44>)
 80061d8:	f44f 729c 	mov.w	r2, #312	; 0x138
 80061dc:	4906      	ldr	r1, [pc, #24]	; (80061f8 <netconn_bind+0x48>)
 80061de:	4807      	ldr	r0, [pc, #28]	; (80061fc <netconn_bind+0x4c>)
 80061e0:	f008 ff88 	bl	800f0f4 <iprintf>
 80061e4:	f06f 000f 	mvn.w	r0, #15
 80061e8:	e7f2      	b.n	80061d0 <netconn_bind+0x20>
 80061ea:	bf00      	nop
 80061ec:	080129f0 	.word	0x080129f0
 80061f0:	080074d1 	.word	0x080074d1
 80061f4:	080103f8 	.word	0x080103f8
 80061f8:	080104e8 	.word	0x080104e8
 80061fc:	080103a4 	.word	0x080103a4

08006200 <netconn_listen_with_backlog>:
{
 8006200:	b500      	push	{lr}
 8006202:	b089      	sub	sp, #36	; 0x24
  LWIP_ERROR("netconn_listen: invalid conn", (conn != NULL), return ERR_ARG;);
 8006204:	b138      	cbz	r0, 8006216 <netconn_listen_with_backlog+0x16>
  API_MSG_VAR_REF(msg).conn = conn;
 8006206:	9000      	str	r0, [sp, #0]
  err = netconn_apimsg(lwip_netconn_do_listen, &API_MSG_VAR_REF(msg));
 8006208:	4669      	mov	r1, sp
 800620a:	4808      	ldr	r0, [pc, #32]	; (800622c <netconn_listen_with_backlog+0x2c>)
 800620c:	f7ff ff02 	bl	8006014 <netconn_apimsg>
}
 8006210:	b009      	add	sp, #36	; 0x24
 8006212:	f85d fb04 	ldr.w	pc, [sp], #4
  LWIP_ERROR("netconn_listen: invalid conn", (conn != NULL), return ERR_ARG;);
 8006216:	4b06      	ldr	r3, [pc, #24]	; (8006230 <netconn_listen_with_backlog+0x30>)
 8006218:	f240 12bb 	movw	r2, #443	; 0x1bb
 800621c:	4905      	ldr	r1, [pc, #20]	; (8006234 <netconn_listen_with_backlog+0x34>)
 800621e:	4806      	ldr	r0, [pc, #24]	; (8006238 <netconn_listen_with_backlog+0x38>)
 8006220:	f008 ff68 	bl	800f0f4 <iprintf>
 8006224:	f06f 000f 	mvn.w	r0, #15
 8006228:	e7f2      	b.n	8006210 <netconn_listen_with_backlog+0x10>
 800622a:	bf00      	nop
 800622c:	0800750d 	.word	0x0800750d
 8006230:	080103f8 	.word	0x080103f8
 8006234:	08010504 	.word	0x08010504
 8006238:	080103a4 	.word	0x080103a4

0800623c <netconn_write_vectors_partly>:
{
 800623c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800623e:	b089      	sub	sp, #36	; 0x24
  LWIP_ERROR("netconn_write: invalid conn",  (conn != NULL), return ERR_ARG;);
 8006240:	b308      	cbz	r0, 8006286 <netconn_write_vectors_partly+0x4a>
 8006242:	4605      	mov	r5, r0
  LWIP_ERROR("netconn_write: invalid conn->type",  (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP), return ERR_VAL;);
 8006244:	7800      	ldrb	r0, [r0, #0]
 8006246:	f000 00f0 	and.w	r0, r0, #240	; 0xf0
 800624a:	2810      	cmp	r0, #16
 800624c:	d125      	bne.n	800629a <netconn_write_vectors_partly+0x5e>
  dontblock = netconn_is_nonblocking(conn) || (apiflags & NETCONN_DONTBLOCK);
 800624e:	7f28      	ldrb	r0, [r5, #28]
 8006250:	f010 0f02 	tst.w	r0, #2
 8006254:	d12b      	bne.n	80062ae <netconn_write_vectors_partly+0x72>
 8006256:	f003 0004 	and.w	r0, r3, #4
 800625a:	2800      	cmp	r0, #0
 800625c:	bf14      	ite	ne
 800625e:	2601      	movne	r6, #1
 8006260:	2600      	moveq	r6, #0
  if (dontblock && !bytes_written) {
 8006262:	d125      	bne.n	80062b0 <netconn_write_vectors_partly+0x74>
    return ERR_OK;
 8006264:	2000      	movs	r0, #0
  for (i = 0; i < vectorcnt; i++) {
 8006266:	b162      	cbz	r2, 8006282 <netconn_write_vectors_partly+0x46>
    size += vectors[i].len;
 8006268:	468c      	mov	ip, r1
 800626a:	f85c 4f04 	ldr.w	r4, [ip, #4]!
 800626e:	2000      	movs	r0, #0
  for (i = 0; i < vectorcnt; i++) {
 8006270:	3001      	adds	r0, #1
 8006272:	4290      	cmp	r0, r2
 8006274:	d022      	beq.n	80062bc <netconn_write_vectors_partly+0x80>
    if (size < vectors[i].len) {
 8006276:	f85c 7030 	ldr.w	r7, [ip, r0, lsl #3]
 800627a:	19e4      	adds	r4, r4, r7
 800627c:	d3f8      	bcc.n	8006270 <netconn_write_vectors_partly+0x34>
      return ERR_VAL;
 800627e:	f06f 0005 	mvn.w	r0, #5
}
 8006282:	b009      	add	sp, #36	; 0x24
 8006284:	bdf0      	pop	{r4, r5, r6, r7, pc}
  LWIP_ERROR("netconn_write: invalid conn",  (conn != NULL), return ERR_ARG;);
 8006286:	4b31      	ldr	r3, [pc, #196]	; (800634c <netconn_write_vectors_partly+0x110>)
 8006288:	f240 32ee 	movw	r2, #1006	; 0x3ee
 800628c:	4930      	ldr	r1, [pc, #192]	; (8006350 <netconn_write_vectors_partly+0x114>)
 800628e:	4831      	ldr	r0, [pc, #196]	; (8006354 <netconn_write_vectors_partly+0x118>)
 8006290:	f008 ff30 	bl	800f0f4 <iprintf>
 8006294:	f06f 000f 	mvn.w	r0, #15
 8006298:	e7f3      	b.n	8006282 <netconn_write_vectors_partly+0x46>
  LWIP_ERROR("netconn_write: invalid conn->type",  (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP), return ERR_VAL;);
 800629a:	4b2c      	ldr	r3, [pc, #176]	; (800634c <netconn_write_vectors_partly+0x110>)
 800629c:	f240 32ef 	movw	r2, #1007	; 0x3ef
 80062a0:	492d      	ldr	r1, [pc, #180]	; (8006358 <netconn_write_vectors_partly+0x11c>)
 80062a2:	482c      	ldr	r0, [pc, #176]	; (8006354 <netconn_write_vectors_partly+0x118>)
 80062a4:	f008 ff26 	bl	800f0f4 <iprintf>
 80062a8:	f06f 0005 	mvn.w	r0, #5
 80062ac:	e7e9      	b.n	8006282 <netconn_write_vectors_partly+0x46>
  dontblock = netconn_is_nonblocking(conn) || (apiflags & NETCONN_DONTBLOCK);
 80062ae:	2601      	movs	r6, #1
  if (dontblock && !bytes_written) {
 80062b0:	980e      	ldr	r0, [sp, #56]	; 0x38
 80062b2:	2800      	cmp	r0, #0
 80062b4:	d1d6      	bne.n	8006264 <netconn_write_vectors_partly+0x28>
    return ERR_VAL;
 80062b6:	f06f 0005 	mvn.w	r0, #5
 80062ba:	e7e2      	b.n	8006282 <netconn_write_vectors_partly+0x46>
  if (size == 0) {
 80062bc:	2c00      	cmp	r4, #0
 80062be:	d03e      	beq.n	800633e <netconn_write_vectors_partly+0x102>
  } else if (size > SSIZE_MAX) {
 80062c0:	2c00      	cmp	r4, #0
 80062c2:	da1f      	bge.n	8006304 <netconn_write_vectors_partly+0xc8>
    if (!bytes_written) {
 80062c4:	980e      	ldr	r0, [sp, #56]	; 0x38
 80062c6:	2800      	cmp	r0, #0
 80062c8:	d03b      	beq.n	8006342 <netconn_write_vectors_partly+0x106>
  API_MSG_VAR_REF(msg).conn = conn;
 80062ca:	9500      	str	r5, [sp, #0]
  API_MSG_VAR_REF(msg).msg.w.vector = vectors;
 80062cc:	9102      	str	r1, [sp, #8]
  API_MSG_VAR_REF(msg).msg.w.vector_cnt = vectorcnt;
 80062ce:	f8ad 200c 	strh.w	r2, [sp, #12]
  API_MSG_VAR_REF(msg).msg.w.vector_off = 0;
 80062d2:	2200      	movs	r2, #0
 80062d4:	9204      	str	r2, [sp, #16]
  API_MSG_VAR_REF(msg).msg.w.apiflags = apiflags;
 80062d6:	f88d 301c 	strb.w	r3, [sp, #28]
  API_MSG_VAR_REF(msg).msg.w.len = size;
 80062da:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 80062de:	9305      	str	r3, [sp, #20]
  API_MSG_VAR_REF(msg).msg.w.offset = 0;
 80062e0:	9206      	str	r2, [sp, #24]
  err = netconn_apimsg(lwip_netconn_do_write, &API_MSG_VAR_REF(msg));
 80062e2:	4669      	mov	r1, sp
 80062e4:	481d      	ldr	r0, [pc, #116]	; (800635c <netconn_write_vectors_partly+0x120>)
 80062e6:	f7ff fe95 	bl	8006014 <netconn_apimsg>
  if (err == ERR_OK) {
 80062ea:	2800      	cmp	r0, #0
 80062ec:	d1c9      	bne.n	8006282 <netconn_write_vectors_partly+0x46>
    size = (size_t)limited;
 80062ee:	f06f 4400 	mvn.w	r4, #2147483648	; 0x80000000
      *bytes_written = API_MSG_VAR_REF(msg).msg.w.offset;
 80062f2:	9b06      	ldr	r3, [sp, #24]
 80062f4:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80062f6:	6013      	str	r3, [r2, #0]
    if (!dontblock) {
 80062f8:	bb36      	cbnz	r6, 8006348 <netconn_write_vectors_partly+0x10c>
      LWIP_ASSERT("do_write failed to write all bytes", API_MSG_VAR_REF(msg).msg.w.offset == size);
 80062fa:	9b06      	ldr	r3, [sp, #24]
 80062fc:	42a3      	cmp	r3, r4
 80062fe:	d115      	bne.n	800632c <netconn_write_vectors_partly+0xf0>
  return err;
 8006300:	2000      	movs	r0, #0
 8006302:	e7be      	b.n	8006282 <netconn_write_vectors_partly+0x46>
  API_MSG_VAR_REF(msg).conn = conn;
 8006304:	9500      	str	r5, [sp, #0]
  API_MSG_VAR_REF(msg).msg.w.vector = vectors;
 8006306:	9102      	str	r1, [sp, #8]
  API_MSG_VAR_REF(msg).msg.w.vector_cnt = vectorcnt;
 8006308:	f8ad 200c 	strh.w	r2, [sp, #12]
  API_MSG_VAR_REF(msg).msg.w.vector_off = 0;
 800630c:	2200      	movs	r2, #0
 800630e:	9204      	str	r2, [sp, #16]
  API_MSG_VAR_REF(msg).msg.w.apiflags = apiflags;
 8006310:	f88d 301c 	strb.w	r3, [sp, #28]
  API_MSG_VAR_REF(msg).msg.w.len = size;
 8006314:	9405      	str	r4, [sp, #20]
  API_MSG_VAR_REF(msg).msg.w.offset = 0;
 8006316:	9206      	str	r2, [sp, #24]
  err = netconn_apimsg(lwip_netconn_do_write, &API_MSG_VAR_REF(msg));
 8006318:	4669      	mov	r1, sp
 800631a:	4810      	ldr	r0, [pc, #64]	; (800635c <netconn_write_vectors_partly+0x120>)
 800631c:	f7ff fe7a 	bl	8006014 <netconn_apimsg>
  if (err == ERR_OK) {
 8006320:	2800      	cmp	r0, #0
 8006322:	d1ae      	bne.n	8006282 <netconn_write_vectors_partly+0x46>
    if (bytes_written != NULL) {
 8006324:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006326:	2b00      	cmp	r3, #0
 8006328:	d0e6      	beq.n	80062f8 <netconn_write_vectors_partly+0xbc>
 800632a:	e7e2      	b.n	80062f2 <netconn_write_vectors_partly+0xb6>
      LWIP_ASSERT("do_write failed to write all bytes", API_MSG_VAR_REF(msg).msg.w.offset == size);
 800632c:	4b07      	ldr	r3, [pc, #28]	; (800634c <netconn_write_vectors_partly+0x110>)
 800632e:	f44f 6286 	mov.w	r2, #1072	; 0x430
 8006332:	490b      	ldr	r1, [pc, #44]	; (8006360 <netconn_write_vectors_partly+0x124>)
 8006334:	4807      	ldr	r0, [pc, #28]	; (8006354 <netconn_write_vectors_partly+0x118>)
 8006336:	f008 fedd 	bl	800f0f4 <iprintf>
  return err;
 800633a:	2000      	movs	r0, #0
 800633c:	e7a1      	b.n	8006282 <netconn_write_vectors_partly+0x46>
    return ERR_OK;
 800633e:	2000      	movs	r0, #0
 8006340:	e79f      	b.n	8006282 <netconn_write_vectors_partly+0x46>
      return ERR_VAL;
 8006342:	f06f 0005 	mvn.w	r0, #5
 8006346:	e79c      	b.n	8006282 <netconn_write_vectors_partly+0x46>
  return err;
 8006348:	2000      	movs	r0, #0
 800634a:	e79a      	b.n	8006282 <netconn_write_vectors_partly+0x46>
 800634c:	080103f8 	.word	0x080103f8
 8006350:	08010524 	.word	0x08010524
 8006354:	080103a4 	.word	0x080103a4
 8006358:	08010540 	.word	0x08010540
 800635c:	08007619 	.word	0x08007619
 8006360:	08010564 	.word	0x08010564

08006364 <netconn_write_partly>:
{
 8006364:	b500      	push	{lr}
 8006366:	b085      	sub	sp, #20
  vector.ptr = dataptr;
 8006368:	9102      	str	r1, [sp, #8]
  vector.len = size;
 800636a:	9203      	str	r2, [sp, #12]
  return netconn_write_vectors_partly(conn, &vector, 1, apiflags, bytes_written);
 800636c:	9a06      	ldr	r2, [sp, #24]
 800636e:	9200      	str	r2, [sp, #0]
 8006370:	2201      	movs	r2, #1
 8006372:	a902      	add	r1, sp, #8
 8006374:	f7ff ff62 	bl	800623c <netconn_write_vectors_partly>
}
 8006378:	b005      	add	sp, #20
 800637a:	f85d fb04 	ldr.w	pc, [sp], #4

0800637e <netconn_close>:
 * @param conn the TCP netconn to close
 * @return ERR_OK if the netconn was closed, any other err_t on error
 */
err_t
netconn_close(struct netconn *conn)
{
 800637e:	b508      	push	{r3, lr}
  /* shutting down both ends is the same as closing */
  return netconn_close_shutdown(conn, NETCONN_SHUT_RDWR);
 8006380:	2103      	movs	r1, #3
 8006382:	f7ff fe75 	bl	8006070 <netconn_close_shutdown>
}
 8006386:	bd08      	pop	{r3, pc}

08006388 <netconn_err>:
 * @param conn the netconn to get the error from
 * @return and pending error or ERR_OK if no error was pending
 */
err_t
netconn_err(struct netconn *conn)
{
 8006388:	b538      	push	{r3, r4, r5, lr}
  err_t err;
  SYS_ARCH_DECL_PROTECT(lev);
  if (conn == NULL) {
 800638a:	b150      	cbz	r0, 80063a2 <netconn_err+0x1a>
 800638c:	4604      	mov	r4, r0
    return ERR_OK;
  }
  SYS_ARCH_PROTECT(lev);
 800638e:	f008 fcab 	bl	800ece8 <sys_arch_protect>
  err = conn->pending_err;
 8006392:	f994 5008 	ldrsb.w	r5, [r4, #8]
  conn->pending_err = ERR_OK;
 8006396:	2300      	movs	r3, #0
 8006398:	7223      	strb	r3, [r4, #8]
  SYS_ARCH_UNPROTECT(lev);
 800639a:	f008 fcb1 	bl	800ed00 <sys_arch_unprotect>
  return err;
}
 800639e:	4628      	mov	r0, r5
 80063a0:	bd38      	pop	{r3, r4, r5, pc}
    return ERR_OK;
 80063a2:	2500      	movs	r5, #0
 80063a4:	e7fb      	b.n	800639e <netconn_err+0x16>
	...

080063a8 <netconn_accept>:
{
 80063a8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80063aa:	b083      	sub	sp, #12
  LWIP_ERROR("netconn_accept: invalid pointer",    (new_conn != NULL),                  return ERR_ARG;);
 80063ac:	b169      	cbz	r1, 80063ca <netconn_accept+0x22>
 80063ae:	4604      	mov	r4, r0
 80063b0:	460e      	mov	r6, r1
  *new_conn = NULL;
 80063b2:	2300      	movs	r3, #0
 80063b4:	600b      	str	r3, [r1, #0]
  LWIP_ERROR("netconn_accept: invalid conn",       (conn != NULL),                      return ERR_ARG;);
 80063b6:	b190      	cbz	r0, 80063de <netconn_accept+0x36>
  err = netconn_err(conn);
 80063b8:	f7ff ffe6 	bl	8006388 <netconn_err>
 80063bc:	4605      	mov	r5, r0
 80063be:	f88d 0007 	strb.w	r0, [sp, #7]
  if (err != ERR_OK) {
 80063c2:	b1b0      	cbz	r0, 80063f2 <netconn_accept+0x4a>
}
 80063c4:	4628      	mov	r0, r5
 80063c6:	b003      	add	sp, #12
 80063c8:	bdf0      	pop	{r4, r5, r6, r7, pc}
  LWIP_ERROR("netconn_accept: invalid pointer",    (new_conn != NULL),                  return ERR_ARG;);
 80063ca:	4b26      	ldr	r3, [pc, #152]	; (8006464 <netconn_accept+0xbc>)
 80063cc:	f240 12e1 	movw	r2, #481	; 0x1e1
 80063d0:	4925      	ldr	r1, [pc, #148]	; (8006468 <netconn_accept+0xc0>)
 80063d2:	4826      	ldr	r0, [pc, #152]	; (800646c <netconn_accept+0xc4>)
 80063d4:	f008 fe8e 	bl	800f0f4 <iprintf>
 80063d8:	f06f 050f 	mvn.w	r5, #15
 80063dc:	e7f2      	b.n	80063c4 <netconn_accept+0x1c>
  LWIP_ERROR("netconn_accept: invalid conn",       (conn != NULL),                      return ERR_ARG;);
 80063de:	4b21      	ldr	r3, [pc, #132]	; (8006464 <netconn_accept+0xbc>)
 80063e0:	f240 12e3 	movw	r2, #483	; 0x1e3
 80063e4:	4922      	ldr	r1, [pc, #136]	; (8006470 <netconn_accept+0xc8>)
 80063e6:	4821      	ldr	r0, [pc, #132]	; (800646c <netconn_accept+0xc4>)
 80063e8:	f008 fe84 	bl	800f0f4 <iprintf>
 80063ec:	f06f 050f 	mvn.w	r5, #15
 80063f0:	e7e8      	b.n	80063c4 <netconn_accept+0x1c>
  if (!NETCONN_ACCEPTMBOX_WAITABLE(conn)) {
 80063f2:	f104 0714 	add.w	r7, r4, #20
 80063f6:	4638      	mov	r0, r7
 80063f8:	f008 fbf0 	bl	800ebdc <sys_mbox_valid>
 80063fc:	b340      	cbz	r0, 8006450 <netconn_accept+0xa8>
 80063fe:	7f23      	ldrb	r3, [r4, #28]
 8006400:	f013 0f01 	tst.w	r3, #1
 8006404:	d127      	bne.n	8006456 <netconn_accept+0xae>
  if (netconn_is_nonblocking(conn)) {
 8006406:	f013 0f02 	tst.w	r3, #2
 800640a:	d009      	beq.n	8006420 <netconn_accept+0x78>
    if (sys_arch_mbox_tryfetch(&conn->acceptmbox, &accept_ptr) == SYS_ARCH_TIMEOUT) {
 800640c:	4669      	mov	r1, sp
 800640e:	4638      	mov	r0, r7
 8006410:	f008 fbd9 	bl	800ebc6 <sys_arch_mbox_tryfetch>
 8006414:	f1b0 3fff 	cmp.w	r0, #4294967295
 8006418:	d107      	bne.n	800642a <netconn_accept+0x82>
      return ERR_WOULDBLOCK;
 800641a:	f06f 0506 	mvn.w	r5, #6
 800641e:	e7d1      	b.n	80063c4 <netconn_accept+0x1c>
    sys_arch_mbox_fetch(&conn->acceptmbox, &accept_ptr, 0);
 8006420:	2200      	movs	r2, #0
 8006422:	4669      	mov	r1, sp
 8006424:	4638      	mov	r0, r7
 8006426:	f008 fbad 	bl	800eb84 <sys_arch_mbox_fetch>
  API_EVENT(conn, NETCONN_EVT_RCVMINUS, 0);
 800642a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800642c:	b11b      	cbz	r3, 8006436 <netconn_accept+0x8e>
 800642e:	2200      	movs	r2, #0
 8006430:	2101      	movs	r1, #1
 8006432:	4620      	mov	r0, r4
 8006434:	4798      	blx	r3
  if (lwip_netconn_is_err_msg(accept_ptr, &err)) {
 8006436:	f10d 0107 	add.w	r1, sp, #7
 800643a:	9800      	ldr	r0, [sp, #0]
 800643c:	f000 fdf0 	bl	8007020 <lwip_netconn_is_err_msg>
 8006440:	b918      	cbnz	r0, 800644a <netconn_accept+0xa2>
  if (accept_ptr == NULL) {
 8006442:	9b00      	ldr	r3, [sp, #0]
 8006444:	b153      	cbz	r3, 800645c <netconn_accept+0xb4>
  *new_conn = newconn;
 8006446:	6033      	str	r3, [r6, #0]
  return ERR_OK;
 8006448:	e7bc      	b.n	80063c4 <netconn_accept+0x1c>
    return err;
 800644a:	f99d 5007 	ldrsb.w	r5, [sp, #7]
 800644e:	e7b9      	b.n	80063c4 <netconn_accept+0x1c>
    return ERR_CLSD;
 8006450:	f06f 050e 	mvn.w	r5, #14
 8006454:	e7b6      	b.n	80063c4 <netconn_accept+0x1c>
 8006456:	f06f 050e 	mvn.w	r5, #14
 800645a:	e7b3      	b.n	80063c4 <netconn_accept+0x1c>
    return ERR_CLSD;
 800645c:	f06f 050e 	mvn.w	r5, #14
 8006460:	e7b0      	b.n	80063c4 <netconn_accept+0x1c>
 8006462:	bf00      	nop
 8006464:	080103f8 	.word	0x080103f8
 8006468:	08010588 	.word	0x08010588
 800646c:	080103a4 	.word	0x080103a4
 8006470:	080105a8 	.word	0x080105a8

08006474 <netconn_recv_data>:
{
 8006474:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006476:	b083      	sub	sp, #12
  void *buf = NULL;
 8006478:	2300      	movs	r3, #0
 800647a:	9301      	str	r3, [sp, #4]
  LWIP_ERROR("netconn_recv: invalid pointer", (new_buf != NULL), return ERR_ARG;);
 800647c:	2900      	cmp	r1, #0
 800647e:	d034      	beq.n	80064ea <netconn_recv_data+0x76>
 8006480:	4604      	mov	r4, r0
 8006482:	4617      	mov	r7, r2
 8006484:	460e      	mov	r6, r1
  *new_buf = NULL;
 8006486:	2300      	movs	r3, #0
 8006488:	600b      	str	r3, [r1, #0]
  LWIP_ERROR("netconn_recv: invalid conn",    (conn != NULL),    return ERR_ARG;);
 800648a:	2800      	cmp	r0, #0
 800648c:	d037      	beq.n	80064fe <netconn_recv_data+0x8a>
  if (!NETCONN_RECVMBOX_WAITABLE(conn)) {
 800648e:	f100 0510 	add.w	r5, r0, #16
 8006492:	4628      	mov	r0, r5
 8006494:	f008 fba2 	bl	800ebdc <sys_mbox_valid>
 8006498:	2800      	cmp	r0, #0
 800649a:	d03a      	beq.n	8006512 <netconn_recv_data+0x9e>
  if (netconn_is_nonblocking(conn) || (apiflags & NETCONN_DONTBLOCK) ||
 800649c:	7f23      	ldrb	r3, [r4, #28]
 800649e:	f003 0303 	and.w	r3, r3, #3
 80064a2:	f007 0204 	and.w	r2, r7, #4
 80064a6:	4313      	orrs	r3, r2
 80064a8:	d103      	bne.n	80064b2 <netconn_recv_data+0x3e>
      (conn->flags & NETCONN_FLAG_MBOXCLOSED) || (conn->pending_err != ERR_OK)) {
 80064aa:	f994 3008 	ldrsb.w	r3, [r4, #8]
 80064ae:	2b00      	cmp	r3, #0
 80064b0:	d045      	beq.n	800653e <netconn_recv_data+0xca>
    if (sys_arch_mbox_tryfetch(&conn->recvmbox, &buf) == SYS_ARCH_TIMEOUT) {
 80064b2:	a901      	add	r1, sp, #4
 80064b4:	4628      	mov	r0, r5
 80064b6:	f008 fb86 	bl	800ebc6 <sys_arch_mbox_tryfetch>
 80064ba:	f1b0 3fff 	cmp.w	r0, #4294967295
 80064be:	d030      	beq.n	8006522 <netconn_recv_data+0xae>
  if (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP)
 80064c0:	7823      	ldrb	r3, [r4, #0]
 80064c2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80064c6:	2b10      	cmp	r3, #16
 80064c8:	d03f      	beq.n	800654a <netconn_recv_data+0xd6>
    LWIP_ASSERT("buf != NULL", buf != NULL);
 80064ca:	9b01      	ldr	r3, [sp, #4]
 80064cc:	2b00      	cmp	r3, #0
 80064ce:	d04c      	beq.n	800656a <netconn_recv_data+0xf6>
    len = netbuf_len((struct netbuf *)buf);
 80064d0:	9b01      	ldr	r3, [sp, #4]
 80064d2:	681b      	ldr	r3, [r3, #0]
 80064d4:	891a      	ldrh	r2, [r3, #8]
  API_EVENT(conn, NETCONN_EVT_RCVMINUS, len);
 80064d6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80064d8:	b113      	cbz	r3, 80064e0 <netconn_recv_data+0x6c>
 80064da:	2101      	movs	r1, #1
 80064dc:	4620      	mov	r0, r4
 80064de:	4798      	blx	r3
  *new_buf = buf;
 80064e0:	9b01      	ldr	r3, [sp, #4]
 80064e2:	6033      	str	r3, [r6, #0]
  return ERR_OK;
 80064e4:	2000      	movs	r0, #0
}
 80064e6:	b003      	add	sp, #12
 80064e8:	bdf0      	pop	{r4, r5, r6, r7, pc}
  LWIP_ERROR("netconn_recv: invalid pointer", (new_buf != NULL), return ERR_ARG;);
 80064ea:	4b24      	ldr	r3, [pc, #144]	; (800657c <netconn_recv_data+0x108>)
 80064ec:	f44f 7212 	mov.w	r2, #584	; 0x248
 80064f0:	4923      	ldr	r1, [pc, #140]	; (8006580 <netconn_recv_data+0x10c>)
 80064f2:	4824      	ldr	r0, [pc, #144]	; (8006584 <netconn_recv_data+0x110>)
 80064f4:	f008 fdfe 	bl	800f0f4 <iprintf>
 80064f8:	f06f 000f 	mvn.w	r0, #15
 80064fc:	e7f3      	b.n	80064e6 <netconn_recv_data+0x72>
  LWIP_ERROR("netconn_recv: invalid conn",    (conn != NULL),    return ERR_ARG;);
 80064fe:	4b1f      	ldr	r3, [pc, #124]	; (800657c <netconn_recv_data+0x108>)
 8006500:	f240 224a 	movw	r2, #586	; 0x24a
 8006504:	4920      	ldr	r1, [pc, #128]	; (8006588 <netconn_recv_data+0x114>)
 8006506:	481f      	ldr	r0, [pc, #124]	; (8006584 <netconn_recv_data+0x110>)
 8006508:	f008 fdf4 	bl	800f0f4 <iprintf>
 800650c:	f06f 000f 	mvn.w	r0, #15
 8006510:	e7e9      	b.n	80064e6 <netconn_recv_data+0x72>
    err_t err = netconn_err(conn);
 8006512:	4620      	mov	r0, r4
 8006514:	f7ff ff38 	bl	8006388 <netconn_err>
    return ERR_CONN;
 8006518:	2800      	cmp	r0, #0
 800651a:	bf08      	it	eq
 800651c:	f06f 000a 	mvneq.w	r0, #10
 8006520:	e7e1      	b.n	80064e6 <netconn_recv_data+0x72>
      err = netconn_err(conn);
 8006522:	4620      	mov	r0, r4
 8006524:	f7ff ff30 	bl	8006388 <netconn_err>
      if (err != ERR_OK) {
 8006528:	2800      	cmp	r0, #0
 800652a:	d1dc      	bne.n	80064e6 <netconn_recv_data+0x72>
      if (conn->flags & NETCONN_FLAG_MBOXCLOSED) {
 800652c:	7f23      	ldrb	r3, [r4, #28]
      return ERR_WOULDBLOCK;
 800652e:	f013 0f01 	tst.w	r3, #1
 8006532:	bf14      	ite	ne
 8006534:	f06f 000a 	mvnne.w	r0, #10
 8006538:	f06f 0006 	mvneq.w	r0, #6
 800653c:	e7d3      	b.n	80064e6 <netconn_recv_data+0x72>
    sys_arch_mbox_fetch(&conn->recvmbox, &buf, 0);
 800653e:	2200      	movs	r2, #0
 8006540:	a901      	add	r1, sp, #4
 8006542:	4628      	mov	r0, r5
 8006544:	f008 fb1e 	bl	800eb84 <sys_arch_mbox_fetch>
 8006548:	e7ba      	b.n	80064c0 <netconn_recv_data+0x4c>
    if (lwip_netconn_is_err_msg(buf, &err)) {
 800654a:	f10d 0103 	add.w	r1, sp, #3
 800654e:	9801      	ldr	r0, [sp, #4]
 8006550:	f000 fd66 	bl	8007020 <lwip_netconn_is_err_msg>
 8006554:	b130      	cbz	r0, 8006564 <netconn_recv_data+0xf0>
      if (err == ERR_CLSD) {
 8006556:	f99d 0003 	ldrsb.w	r0, [sp, #3]
        return ERR_OK;
 800655a:	f110 0f0f 	cmn.w	r0, #15
 800655e:	bf08      	it	eq
 8006560:	2000      	moveq	r0, #0
 8006562:	e7c0      	b.n	80064e6 <netconn_recv_data+0x72>
    len = ((struct pbuf *)buf)->tot_len;
 8006564:	9b01      	ldr	r3, [sp, #4]
 8006566:	891a      	ldrh	r2, [r3, #8]
 8006568:	e7b5      	b.n	80064d6 <netconn_recv_data+0x62>
    LWIP_ASSERT("buf != NULL", buf != NULL);
 800656a:	4b04      	ldr	r3, [pc, #16]	; (800657c <netconn_recv_data+0x108>)
 800656c:	f240 2291 	movw	r2, #657	; 0x291
 8006570:	4906      	ldr	r1, [pc, #24]	; (800658c <netconn_recv_data+0x118>)
 8006572:	4804      	ldr	r0, [pc, #16]	; (8006584 <netconn_recv_data+0x110>)
 8006574:	f008 fdbe 	bl	800f0f4 <iprintf>
 8006578:	e7aa      	b.n	80064d0 <netconn_recv_data+0x5c>
 800657a:	bf00      	nop
 800657c:	080103f8 	.word	0x080103f8
 8006580:	080105c8 	.word	0x080105c8
 8006584:	080103a4 	.word	0x080103a4
 8006588:	080105e8 	.word	0x080105e8
 800658c:	08010604 	.word	0x08010604

08006590 <netconn_recv_data_tcp>:
{
 8006590:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006592:	b089      	sub	sp, #36	; 0x24
 8006594:	4604      	mov	r4, r0
 8006596:	460f      	mov	r7, r1
 8006598:	4616      	mov	r6, r2
  if (!NETCONN_RECVMBOX_WAITABLE(conn)) {
 800659a:	3010      	adds	r0, #16
 800659c:	f008 fb1e 	bl	800ebdc <sys_mbox_valid>
 80065a0:	2800      	cmp	r0, #0
 80065a2:	d03e      	beq.n	8006622 <netconn_recv_data_tcp+0x92>
  if (netconn_is_flag_set(conn, NETCONN_FIN_RX_PENDING)) {
 80065a4:	7f23      	ldrb	r3, [r4, #28]
 80065a6:	f994 201c 	ldrsb.w	r2, [r4, #28]
 80065aa:	2a00      	cmp	r2, #0
 80065ac:	db1b      	blt.n	80065e6 <netconn_recv_data_tcp+0x56>
  err = netconn_recv_data(conn, (void **)new_buf, apiflags);
 80065ae:	4632      	mov	r2, r6
 80065b0:	4639      	mov	r1, r7
 80065b2:	4620      	mov	r0, r4
 80065b4:	f7ff ff5e 	bl	8006474 <netconn_recv_data>
  if (err != ERR_OK) {
 80065b8:	4605      	mov	r5, r0
 80065ba:	bb30      	cbnz	r0, 800660a <netconn_recv_data_tcp+0x7a>
  buf = *new_buf;
 80065bc:	683f      	ldr	r7, [r7, #0]
  if (!(apiflags & NETCONN_NOAUTORCVD)) {
 80065be:	f016 0f08 	tst.w	r6, #8
 80065c2:	d105      	bne.n	80065d0 <netconn_recv_data_tcp+0x40>
    u16_t len = buf ? buf->tot_len : 1;
 80065c4:	b327      	cbz	r7, 8006610 <netconn_recv_data_tcp+0x80>
 80065c6:	8939      	ldrh	r1, [r7, #8]
    netconn_tcp_recvd_msg(conn, len,  &API_VAR_REF(msg));
 80065c8:	466a      	mov	r2, sp
 80065ca:	4620      	mov	r0, r4
 80065cc:	f7ff fd2e 	bl	800602c <netconn_tcp_recvd_msg>
  if (buf == NULL) {
 80065d0:	b9df      	cbnz	r7, 800660a <netconn_recv_data_tcp+0x7a>
    if (apiflags & NETCONN_NOFIN) {
 80065d2:	f016 0f10 	tst.w	r6, #16
 80065d6:	d009      	beq.n	80065ec <netconn_recv_data_tcp+0x5c>
      netconn_set_flags(conn, NETCONN_FIN_RX_PENDING);
 80065d8:	7f23      	ldrb	r3, [r4, #28]
 80065da:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80065de:	7723      	strb	r3, [r4, #28]
      return ERR_WOULDBLOCK;
 80065e0:	f06f 0506 	mvn.w	r5, #6
 80065e4:	e011      	b.n	800660a <netconn_recv_data_tcp+0x7a>
    netconn_clear_flags(conn, NETCONN_FIN_RX_PENDING);
 80065e6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80065ea:	7723      	strb	r3, [r4, #28]
      API_EVENT(conn, NETCONN_EVT_RCVMINUS, 0);
 80065ec:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80065ee:	b11b      	cbz	r3, 80065f8 <netconn_recv_data_tcp+0x68>
 80065f0:	2200      	movs	r2, #0
 80065f2:	2101      	movs	r1, #1
 80065f4:	4620      	mov	r0, r4
 80065f6:	4798      	blx	r3
      if (conn->pcb.ip == NULL) {
 80065f8:	6863      	ldr	r3, [r4, #4]
 80065fa:	b95b      	cbnz	r3, 8006614 <netconn_recv_data_tcp+0x84>
        err = netconn_err(conn);
 80065fc:	4620      	mov	r0, r4
 80065fe:	f7ff fec3 	bl	8006388 <netconn_err>
        return ERR_RST;
 8006602:	1e05      	subs	r5, r0, #0
 8006604:	bf08      	it	eq
 8006606:	f06f 050d 	mvneq.w	r5, #13
}
 800660a:	4628      	mov	r0, r5
 800660c:	b009      	add	sp, #36	; 0x24
 800660e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    u16_t len = buf ? buf->tot_len : 1;
 8006610:	2101      	movs	r1, #1
 8006612:	e7d9      	b.n	80065c8 <netconn_recv_data_tcp+0x38>
      netconn_close_shutdown(conn, NETCONN_SHUT_RD);
 8006614:	2101      	movs	r1, #1
 8006616:	4620      	mov	r0, r4
 8006618:	f7ff fd2a 	bl	8006070 <netconn_close_shutdown>
      return ERR_CLSD;
 800661c:	f06f 050e 	mvn.w	r5, #14
 8006620:	e7f3      	b.n	800660a <netconn_recv_data_tcp+0x7a>
    return ERR_CONN;
 8006622:	f06f 050a 	mvn.w	r5, #10
 8006626:	e7f0      	b.n	800660a <netconn_recv_data_tcp+0x7a>

08006628 <netconn_recv>:
{
 8006628:	b570      	push	{r4, r5, r6, lr}
 800662a:	b082      	sub	sp, #8
  LWIP_ERROR("netconn_recv: invalid pointer", (new_buf != NULL), return ERR_ARG;);
 800662c:	b311      	cbz	r1, 8006674 <netconn_recv+0x4c>
 800662e:	4604      	mov	r4, r0
 8006630:	460d      	mov	r5, r1
  *new_buf = NULL;
 8006632:	2300      	movs	r3, #0
 8006634:	600b      	str	r3, [r1, #0]
  LWIP_ERROR("netconn_recv: invalid conn",    (conn != NULL),    return ERR_ARG;);
 8006636:	b338      	cbz	r0, 8006688 <netconn_recv+0x60>
  if (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP)
 8006638:	7803      	ldrb	r3, [r0, #0]
 800663a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800663e:	2b10      	cmp	r3, #16
 8006640:	d13c      	bne.n	80066bc <netconn_recv+0x94>
    struct pbuf *p = NULL;
 8006642:	2300      	movs	r3, #0
 8006644:	9301      	str	r3, [sp, #4]
    buf = (struct netbuf *)memp_malloc(MEMP_NETBUF);
 8006646:	2006      	movs	r0, #6
 8006648:	f001 fd6c 	bl	8008124 <memp_malloc>
    if (buf == NULL) {
 800664c:	4606      	mov	r6, r0
 800664e:	2800      	cmp	r0, #0
 8006650:	d031      	beq.n	80066b6 <netconn_recv+0x8e>
    err = netconn_recv_data_tcp(conn, &p, 0);
 8006652:	2200      	movs	r2, #0
 8006654:	a901      	add	r1, sp, #4
 8006656:	4620      	mov	r0, r4
 8006658:	f7ff ff9a 	bl	8006590 <netconn_recv_data_tcp>
    if (err != ERR_OK) {
 800665c:	4604      	mov	r4, r0
 800665e:	b9e8      	cbnz	r0, 800669c <netconn_recv+0x74>
    LWIP_ASSERT("p != NULL", p != NULL);
 8006660:	9b01      	ldr	r3, [sp, #4]
 8006662:	b303      	cbz	r3, 80066a6 <netconn_recv+0x7e>
    buf->p = p;
 8006664:	9b01      	ldr	r3, [sp, #4]
 8006666:	6033      	str	r3, [r6, #0]
    buf->ptr = p;
 8006668:	6073      	str	r3, [r6, #4]
    buf->port = 0;
 800666a:	2300      	movs	r3, #0
 800666c:	81b3      	strh	r3, [r6, #12]
    ip_addr_set_zero(&buf->addr);
 800666e:	60b3      	str	r3, [r6, #8]
    *new_buf = buf;
 8006670:	602e      	str	r6, [r5, #0]
    return ERR_OK;
 8006672:	e027      	b.n	80066c4 <netconn_recv+0x9c>
  LWIP_ERROR("netconn_recv: invalid pointer", (new_buf != NULL), return ERR_ARG;);
 8006674:	4b15      	ldr	r3, [pc, #84]	; (80066cc <netconn_recv+0xa4>)
 8006676:	f240 3263 	movw	r2, #867	; 0x363
 800667a:	4915      	ldr	r1, [pc, #84]	; (80066d0 <netconn_recv+0xa8>)
 800667c:	4815      	ldr	r0, [pc, #84]	; (80066d4 <netconn_recv+0xac>)
 800667e:	f008 fd39 	bl	800f0f4 <iprintf>
 8006682:	f06f 040f 	mvn.w	r4, #15
 8006686:	e01d      	b.n	80066c4 <netconn_recv+0x9c>
  LWIP_ERROR("netconn_recv: invalid conn",    (conn != NULL),    return ERR_ARG;);
 8006688:	4b10      	ldr	r3, [pc, #64]	; (80066cc <netconn_recv+0xa4>)
 800668a:	f240 3265 	movw	r2, #869	; 0x365
 800668e:	4912      	ldr	r1, [pc, #72]	; (80066d8 <netconn_recv+0xb0>)
 8006690:	4810      	ldr	r0, [pc, #64]	; (80066d4 <netconn_recv+0xac>)
 8006692:	f008 fd2f 	bl	800f0f4 <iprintf>
 8006696:	f06f 040f 	mvn.w	r4, #15
 800669a:	e013      	b.n	80066c4 <netconn_recv+0x9c>
      memp_free(MEMP_NETBUF, buf);
 800669c:	4631      	mov	r1, r6
 800669e:	2006      	movs	r0, #6
 80066a0:	f001 fd70 	bl	8008184 <memp_free>
      return err;
 80066a4:	e00e      	b.n	80066c4 <netconn_recv+0x9c>
    LWIP_ASSERT("p != NULL", p != NULL);
 80066a6:	4b09      	ldr	r3, [pc, #36]	; (80066cc <netconn_recv+0xa4>)
 80066a8:	f240 3279 	movw	r2, #889	; 0x379
 80066ac:	490b      	ldr	r1, [pc, #44]	; (80066dc <netconn_recv+0xb4>)
 80066ae:	4809      	ldr	r0, [pc, #36]	; (80066d4 <netconn_recv+0xac>)
 80066b0:	f008 fd20 	bl	800f0f4 <iprintf>
 80066b4:	e7d6      	b.n	8006664 <netconn_recv+0x3c>
      return ERR_MEM;
 80066b6:	f04f 34ff 	mov.w	r4, #4294967295
 80066ba:	e003      	b.n	80066c4 <netconn_recv+0x9c>
    return netconn_recv_data(conn, (void **)new_buf, 0);
 80066bc:	2200      	movs	r2, #0
 80066be:	f7ff fed9 	bl	8006474 <netconn_recv_data>
 80066c2:	4604      	mov	r4, r0
}
 80066c4:	4620      	mov	r0, r4
 80066c6:	b002      	add	sp, #8
 80066c8:	bd70      	pop	{r4, r5, r6, pc}
 80066ca:	bf00      	nop
 80066cc:	080103f8 	.word	0x080103f8
 80066d0:	080105c8 	.word	0x080105c8
 80066d4:	080103a4 	.word	0x080103a4
 80066d8:	080105e8 	.word	0x080105e8
 80066dc:	08010748 	.word	0x08010748

080066e0 <recv_udp>:
 * @see udp.h (struct udp_pcb.recv) for parameters
 */
static void
recv_udp(void *arg, struct udp_pcb *pcb, struct pbuf *p,
         const ip_addr_t *addr, u16_t port)
{
 80066e0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80066e4:	4604      	mov	r4, r0
 80066e6:	4615      	mov	r5, r2
 80066e8:	4698      	mov	r8, r3
#if LWIP_SO_RCVBUF
  int recv_avail;
#endif /* LWIP_SO_RCVBUF */

  LWIP_UNUSED_ARG(pcb); /* only used for asserts... */
  LWIP_ASSERT("recv_udp must have a pcb argument", pcb != NULL);
 80066ea:	460e      	mov	r6, r1
 80066ec:	b369      	cbz	r1, 800674a <recv_udp+0x6a>
  LWIP_ASSERT("recv_udp must have an argument", arg != NULL);
 80066ee:	2c00      	cmp	r4, #0
 80066f0:	d032      	beq.n	8006758 <recv_udp+0x78>
  if (conn == NULL) {
    pbuf_free(p);
    return;
  }

  LWIP_ASSERT("recv_udp: recv for wrong pcb!", conn->pcb.udp == pcb);
 80066f2:	6863      	ldr	r3, [r4, #4]
 80066f4:	42b3      	cmp	r3, r6
 80066f6:	d005      	beq.n	8006704 <recv_udp+0x24>
 80066f8:	4b24      	ldr	r3, [pc, #144]	; (800678c <recv_udp+0xac>)
 80066fa:	22ee      	movs	r2, #238	; 0xee
 80066fc:	4924      	ldr	r1, [pc, #144]	; (8006790 <recv_udp+0xb0>)
 80066fe:	4825      	ldr	r0, [pc, #148]	; (8006794 <recv_udp+0xb4>)
 8006700:	f008 fcf8 	bl	800f0f4 <iprintf>
#if LWIP_SO_RCVBUF
  SYS_ARCH_GET(conn->recv_avail, recv_avail);
  if (!NETCONN_MBOX_VALID(conn, &conn->recvmbox) ||
      ((recv_avail + (int)(p->tot_len)) > conn->recv_bufsize)) {
#else  /* LWIP_SO_RCVBUF */
  if (!NETCONN_MBOX_VALID(conn, &conn->recvmbox)) {
 8006704:	f104 0710 	add.w	r7, r4, #16
 8006708:	4638      	mov	r0, r7
 800670a:	f008 fa67 	bl	800ebdc <sys_mbox_valid>
 800670e:	b368      	cbz	r0, 800676c <recv_udp+0x8c>
#endif /* LWIP_SO_RCVBUF */
    pbuf_free(p);
    return;
  }

  buf = (struct netbuf *)memp_malloc(MEMP_NETBUF);
 8006710:	2006      	movs	r0, #6
 8006712:	f001 fd07 	bl	8008124 <memp_malloc>
  if (buf == NULL) {
 8006716:	4606      	mov	r6, r0
 8006718:	b368      	cbz	r0, 8006776 <recv_udp+0x96>
    pbuf_free(p);
    return;
  } else {
    buf->p = p;
 800671a:	6005      	str	r5, [r0, #0]
    buf->ptr = p;
 800671c:	6045      	str	r5, [r0, #4]
    ip_addr_set(&buf->addr, addr);
 800671e:	f1b8 0f00 	cmp.w	r8, #0
 8006722:	d02c      	beq.n	800677e <recv_udp+0x9e>
 8006724:	f8d8 3000 	ldr.w	r3, [r8]
 8006728:	60b3      	str	r3, [r6, #8]
    buf->port = port;
 800672a:	f8bd 3018 	ldrh.w	r3, [sp, #24]
 800672e:	81b3      	strh	r3, [r6, #12]
      buf->toport_chksum = udphdr->dest;
    }
#endif /* LWIP_NETBUF_RECVINFO */
  }

  len = p->tot_len;
 8006730:	892d      	ldrh	r5, [r5, #8]
  if (sys_mbox_trypost(&conn->recvmbox, buf) != ERR_OK) {
 8006732:	4631      	mov	r1, r6
 8006734:	4638      	mov	r0, r7
 8006736:	f008 fa15 	bl	800eb64 <sys_mbox_trypost>
 800673a:	bb10      	cbnz	r0, 8006782 <recv_udp+0xa2>
  } else {
#if LWIP_SO_RCVBUF
    SYS_ARCH_INC(conn->recv_avail, len);
#endif /* LWIP_SO_RCVBUF */
    /* Register event with callback */
    API_EVENT(conn, NETCONN_EVT_RCVPLUS, len);
 800673c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800673e:	b1c3      	cbz	r3, 8006772 <recv_udp+0x92>
 8006740:	462a      	mov	r2, r5
 8006742:	2100      	movs	r1, #0
 8006744:	4620      	mov	r0, r4
 8006746:	4798      	blx	r3
 8006748:	e013      	b.n	8006772 <recv_udp+0x92>
  LWIP_ASSERT("recv_udp must have a pcb argument", pcb != NULL);
 800674a:	4b10      	ldr	r3, [pc, #64]	; (800678c <recv_udp+0xac>)
 800674c:	22e5      	movs	r2, #229	; 0xe5
 800674e:	4912      	ldr	r1, [pc, #72]	; (8006798 <recv_udp+0xb8>)
 8006750:	4810      	ldr	r0, [pc, #64]	; (8006794 <recv_udp+0xb4>)
 8006752:	f008 fccf 	bl	800f0f4 <iprintf>
 8006756:	e7ca      	b.n	80066ee <recv_udp+0xe>
  LWIP_ASSERT("recv_udp must have an argument", arg != NULL);
 8006758:	4b0c      	ldr	r3, [pc, #48]	; (800678c <recv_udp+0xac>)
 800675a:	22e6      	movs	r2, #230	; 0xe6
 800675c:	490f      	ldr	r1, [pc, #60]	; (800679c <recv_udp+0xbc>)
 800675e:	480d      	ldr	r0, [pc, #52]	; (8006794 <recv_udp+0xb4>)
 8006760:	f008 fcc8 	bl	800f0f4 <iprintf>
    pbuf_free(p);
 8006764:	4628      	mov	r0, r5
 8006766:	f001 ffcf 	bl	8008708 <pbuf_free>
    return;
 800676a:	e002      	b.n	8006772 <recv_udp+0x92>
    pbuf_free(p);
 800676c:	4628      	mov	r0, r5
 800676e:	f001 ffcb 	bl	8008708 <pbuf_free>
  }
}
 8006772:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    pbuf_free(p);
 8006776:	4628      	mov	r0, r5
 8006778:	f001 ffc6 	bl	8008708 <pbuf_free>
    return;
 800677c:	e7f9      	b.n	8006772 <recv_udp+0x92>
    ip_addr_set(&buf->addr, addr);
 800677e:	2300      	movs	r3, #0
 8006780:	e7d2      	b.n	8006728 <recv_udp+0x48>
    netbuf_delete(buf);
 8006782:	4630      	mov	r0, r6
 8006784:	f001 f81a 	bl	80077bc <netbuf_delete>
    return;
 8006788:	e7f3      	b.n	8006772 <recv_udp+0x92>
 800678a:	bf00      	nop
 800678c:	08010610 	.word	0x08010610
 8006790:	08010688 	.word	0x08010688
 8006794:	080103a4 	.word	0x080103a4
 8006798:	08010644 	.word	0x08010644
 800679c:	08010668 	.word	0x08010668

080067a0 <setup_tcp>:
 *
 * @param conn the TCP netconn to setup
 */
static void
setup_tcp(struct netconn *conn)
{
 80067a0:	b510      	push	{r4, lr}
 80067a2:	4601      	mov	r1, r0
  struct tcp_pcb *pcb;

  pcb = conn->pcb.tcp;
 80067a4:	6844      	ldr	r4, [r0, #4]
  tcp_arg(pcb, conn);
 80067a6:	4620      	mov	r0, r4
 80067a8:	f002 fca4 	bl	80090f4 <tcp_arg>
  tcp_recv(pcb, recv_tcp);
 80067ac:	4908      	ldr	r1, [pc, #32]	; (80067d0 <setup_tcp+0x30>)
 80067ae:	4620      	mov	r0, r4
 80067b0:	f002 fca4 	bl	80090fc <tcp_recv>
  tcp_sent(pcb, sent_tcp);
 80067b4:	4907      	ldr	r1, [pc, #28]	; (80067d4 <setup_tcp+0x34>)
 80067b6:	4620      	mov	r0, r4
 80067b8:	f002 fcba 	bl	8009130 <tcp_sent>
  tcp_poll(pcb, poll_tcp, NETCONN_TCP_POLL_INTERVAL);
 80067bc:	2202      	movs	r2, #2
 80067be:	4906      	ldr	r1, [pc, #24]	; (80067d8 <setup_tcp+0x38>)
 80067c0:	4620      	mov	r0, r4
 80067c2:	f002 fcef 	bl	80091a4 <tcp_poll>
  tcp_err(pcb, err_tcp);
 80067c6:	4905      	ldr	r1, [pc, #20]	; (80067dc <setup_tcp+0x3c>)
 80067c8:	4620      	mov	r0, r4
 80067ca:	f002 fccb 	bl	8009164 <tcp_err>
}
 80067ce:	bd10      	pop	{r4, pc}
 80067d0:	08006f3d 	.word	0x08006f3d
 80067d4:	08006ecd 	.word	0x08006ecd
 80067d8:	08006e4d 	.word	0x08006e4d
 80067dc:	080067e1 	.word	0x080067e1

080067e0 <err_tcp>:
{
 80067e0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80067e4:	460d      	mov	r5, r1
  LWIP_ASSERT("conn != NULL", (conn != NULL));
 80067e6:	4604      	mov	r4, r0
 80067e8:	b358      	cbz	r0, 8006842 <err_tcp+0x62>
  SYS_ARCH_PROTECT(lev);
 80067ea:	f008 fa7d 	bl	800ece8 <sys_arch_protect>
  conn->pcb.tcp = NULL;
 80067ee:	2200      	movs	r2, #0
 80067f0:	6062      	str	r2, [r4, #4]
  conn->pending_err = err;
 80067f2:	7225      	strb	r5, [r4, #8]
  conn->flags |= NETCONN_FLAG_MBOXCLOSED;
 80067f4:	7f23      	ldrb	r3, [r4, #28]
 80067f6:	f043 0301 	orr.w	r3, r3, #1
 80067fa:	7723      	strb	r3, [r4, #28]
  old_state = conn->state;
 80067fc:	7866      	ldrb	r6, [r4, #1]
  conn->state = NETCONN_NONE;
 80067fe:	7062      	strb	r2, [r4, #1]
  SYS_ARCH_UNPROTECT(lev);
 8006800:	f008 fa7e 	bl	800ed00 <sys_arch_unprotect>
  API_EVENT(conn, NETCONN_EVT_ERROR, 0);
 8006804:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006806:	b17b      	cbz	r3, 8006828 <err_tcp+0x48>
 8006808:	2200      	movs	r2, #0
 800680a:	2104      	movs	r1, #4
 800680c:	4620      	mov	r0, r4
 800680e:	4798      	blx	r3
  API_EVENT(conn, NETCONN_EVT_RCVPLUS, 0);
 8006810:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006812:	b14b      	cbz	r3, 8006828 <err_tcp+0x48>
 8006814:	2200      	movs	r2, #0
 8006816:	4611      	mov	r1, r2
 8006818:	4620      	mov	r0, r4
 800681a:	4798      	blx	r3
  API_EVENT(conn, NETCONN_EVT_SENDPLUS, 0);
 800681c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800681e:	b11b      	cbz	r3, 8006828 <err_tcp+0x48>
 8006820:	2200      	movs	r2, #0
 8006822:	2102      	movs	r1, #2
 8006824:	4620      	mov	r0, r4
 8006826:	4798      	blx	r3
  switch (err) {
 8006828:	f115 0f0e 	cmn.w	r5, #14
 800682c:	d01a      	beq.n	8006864 <err_tcp+0x84>
 800682e:	f115 0f0d 	cmn.w	r5, #13
 8006832:	d01a      	beq.n	800686a <err_tcp+0x8a>
 8006834:	f115 0f0f 	cmn.w	r5, #15
 8006838:	d035      	beq.n	80068a6 <err_tcp+0xc6>
      LWIP_ASSERT("unhandled error", err == ERR_OK);
 800683a:	b955      	cbnz	r5, 8006852 <err_tcp+0x72>
      return NULL;
 800683c:	f04f 0800 	mov.w	r8, #0
 8006840:	e015      	b.n	800686e <err_tcp+0x8e>
  LWIP_ASSERT("conn != NULL", (conn != NULL));
 8006842:	4b36      	ldr	r3, [pc, #216]	; (800691c <err_tcp+0x13c>)
 8006844:	f44f 72dc 	mov.w	r2, #440	; 0x1b8
 8006848:	4935      	ldr	r1, [pc, #212]	; (8006920 <err_tcp+0x140>)
 800684a:	4836      	ldr	r0, [pc, #216]	; (8006924 <err_tcp+0x144>)
 800684c:	f008 fc52 	bl	800f0f4 <iprintf>
 8006850:	e7cb      	b.n	80067ea <err_tcp+0xa>
      LWIP_ASSERT("unhandled error", err == ERR_OK);
 8006852:	4b32      	ldr	r3, [pc, #200]	; (800691c <err_tcp+0x13c>)
 8006854:	227d      	movs	r2, #125	; 0x7d
 8006856:	4934      	ldr	r1, [pc, #208]	; (8006928 <err_tcp+0x148>)
 8006858:	4832      	ldr	r0, [pc, #200]	; (8006924 <err_tcp+0x144>)
 800685a:	f008 fc4b 	bl	800f0f4 <iprintf>
      return NULL;
 800685e:	f04f 0800 	mov.w	r8, #0
 8006862:	e004      	b.n	800686e <err_tcp+0x8e>
  switch (err) {
 8006864:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8006938 <err_tcp+0x158>
 8006868:	e001      	b.n	800686e <err_tcp+0x8e>
      return LWIP_CONST_CAST(void *, &netconn_aborted);
 800686a:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800693c <err_tcp+0x15c>
  if (NETCONN_MBOX_VALID(conn, &conn->recvmbox)) {
 800686e:	f104 0710 	add.w	r7, r4, #16
 8006872:	4638      	mov	r0, r7
 8006874:	f008 f9b2 	bl	800ebdc <sys_mbox_valid>
 8006878:	b9c0      	cbnz	r0, 80068ac <err_tcp+0xcc>
  if (NETCONN_MBOX_VALID(conn, &conn->acceptmbox)) {
 800687a:	f104 0714 	add.w	r7, r4, #20
 800687e:	4638      	mov	r0, r7
 8006880:	f008 f9ac 	bl	800ebdc <sys_mbox_valid>
 8006884:	b9b8      	cbnz	r0, 80068b6 <err_tcp+0xd6>
  if ((old_state == NETCONN_WRITE) || (old_state == NETCONN_CLOSE) ||
 8006886:	2e01      	cmp	r6, #1
 8006888:	d01a      	beq.n	80068c0 <err_tcp+0xe0>
 800688a:	1ef3      	subs	r3, r6, #3
 800688c:	b2db      	uxtb	r3, r3
 800688e:	2b01      	cmp	r3, #1
 8006890:	d916      	bls.n	80068c0 <err_tcp+0xe0>
    LWIP_ASSERT("conn->current_msg == NULL", conn->current_msg == NULL);
 8006892:	6a23      	ldr	r3, [r4, #32]
 8006894:	b37b      	cbz	r3, 80068f6 <err_tcp+0x116>
 8006896:	4b21      	ldr	r3, [pc, #132]	; (800691c <err_tcp+0x13c>)
 8006898:	f240 12f7 	movw	r2, #503	; 0x1f7
 800689c:	4923      	ldr	r1, [pc, #140]	; (800692c <err_tcp+0x14c>)
 800689e:	4821      	ldr	r0, [pc, #132]	; (8006924 <err_tcp+0x144>)
 80068a0:	f008 fc28 	bl	800f0f4 <iprintf>
}
 80068a4:	e027      	b.n	80068f6 <err_tcp+0x116>
      return LWIP_CONST_CAST(void *, &netconn_closed);
 80068a6:	f8df 8098 	ldr.w	r8, [pc, #152]	; 8006940 <err_tcp+0x160>
 80068aa:	e7e0      	b.n	800686e <err_tcp+0x8e>
    sys_mbox_trypost(&conn->recvmbox, mbox_msg);
 80068ac:	4641      	mov	r1, r8
 80068ae:	4638      	mov	r0, r7
 80068b0:	f008 f958 	bl	800eb64 <sys_mbox_trypost>
 80068b4:	e7e1      	b.n	800687a <err_tcp+0x9a>
    sys_mbox_trypost(&conn->acceptmbox, mbox_msg);
 80068b6:	4641      	mov	r1, r8
 80068b8:	4638      	mov	r0, r7
 80068ba:	f008 f953 	bl	800eb64 <sys_mbox_trypost>
 80068be:	e7e2      	b.n	8006886 <err_tcp+0xa6>
    int was_nonblocking_connect = IN_NONBLOCKING_CONNECT(conn);
 80068c0:	7f23      	ldrb	r3, [r4, #28]
    SET_NONBLOCKING_CONNECT(conn, 0);
 80068c2:	f023 0204 	bic.w	r2, r3, #4
 80068c6:	7722      	strb	r2, [r4, #28]
    if (!was_nonblocking_connect) {
 80068c8:	f013 0f04 	tst.w	r3, #4
 80068cc:	d113      	bne.n	80068f6 <err_tcp+0x116>
      LWIP_ASSERT("conn->current_msg != NULL", conn->current_msg != NULL);
 80068ce:	6a23      	ldr	r3, [r4, #32]
 80068d0:	b19b      	cbz	r3, 80068fa <err_tcp+0x11a>
      if (old_state == NETCONN_CLOSE) {
 80068d2:	2e04      	cmp	r6, #4
        conn->current_msg->err = ERR_OK;
 80068d4:	6a23      	ldr	r3, [r4, #32]
 80068d6:	bf06      	itte	eq
 80068d8:	2200      	moveq	r2, #0
 80068da:	711a      	strbeq	r2, [r3, #4]
        conn->current_msg->err = err;
 80068dc:	711d      	strbne	r5, [r3, #4]
      op_completed_sem = LWIP_API_MSG_SEM(conn->current_msg);
 80068de:	6a23      	ldr	r3, [r4, #32]
 80068e0:	681d      	ldr	r5, [r3, #0]
 80068e2:	350c      	adds	r5, #12
      LWIP_ASSERT("inavlid op_completed_sem", sys_sem_valid(op_completed_sem));
 80068e4:	4628      	mov	r0, r5
 80068e6:	f008 f9bf 	bl	800ec68 <sys_sem_valid>
 80068ea:	b170      	cbz	r0, 800690a <err_tcp+0x12a>
      conn->current_msg = NULL;
 80068ec:	2300      	movs	r3, #0
 80068ee:	6223      	str	r3, [r4, #32]
      sys_sem_signal(op_completed_sem);
 80068f0:	4628      	mov	r0, r5
 80068f2:	f008 f9af 	bl	800ec54 <sys_sem_signal>
}
 80068f6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      LWIP_ASSERT("conn->current_msg != NULL", conn->current_msg != NULL);
 80068fa:	4b08      	ldr	r3, [pc, #32]	; (800691c <err_tcp+0x13c>)
 80068fc:	f44f 72f3 	mov.w	r2, #486	; 0x1e6
 8006900:	490b      	ldr	r1, [pc, #44]	; (8006930 <err_tcp+0x150>)
 8006902:	4808      	ldr	r0, [pc, #32]	; (8006924 <err_tcp+0x144>)
 8006904:	f008 fbf6 	bl	800f0f4 <iprintf>
 8006908:	e7e3      	b.n	80068d2 <err_tcp+0xf2>
      LWIP_ASSERT("inavlid op_completed_sem", sys_sem_valid(op_completed_sem));
 800690a:	4b04      	ldr	r3, [pc, #16]	; (800691c <err_tcp+0x13c>)
 800690c:	f240 12ef 	movw	r2, #495	; 0x1ef
 8006910:	4908      	ldr	r1, [pc, #32]	; (8006934 <err_tcp+0x154>)
 8006912:	4804      	ldr	r0, [pc, #16]	; (8006924 <err_tcp+0x144>)
 8006914:	f008 fbee 	bl	800f0f4 <iprintf>
 8006918:	e7e8      	b.n	80068ec <err_tcp+0x10c>
 800691a:	bf00      	nop
 800691c:	08010610 	.word	0x08010610
 8006920:	080106a8 	.word	0x080106a8
 8006924:	080103a4 	.word	0x080103a4
 8006928:	080106b8 	.word	0x080106b8
 800692c:	08010700 	.word	0x08010700
 8006930:	080106c8 	.word	0x080106c8
 8006934:	080106e4 	.word	0x080106e4
 8006938:	08010a32 	.word	0x08010a32
 800693c:	08010a30 	.word	0x08010a30
 8006940:	08010a31 	.word	0x08010a31

08006944 <lwip_netconn_do_writemore>:
 * @return ERR_OK
 *         ERR_MEM if LWIP_TCPIP_CORE_LOCKING=1 and sending hasn't yet finished
 */
static err_t
lwip_netconn_do_writemore(struct netconn *conn  WRITE_DELAYED_PARAM)
{
 8006944:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006948:	b083      	sub	sp, #12
 800694a:	9101      	str	r1, [sp, #4]
  size_t diff;
  u8_t dontblock;
  u8_t apiflags;
  u8_t write_more;

  LWIP_ASSERT("conn != NULL", conn != NULL);
 800694c:	4605      	mov	r5, r0
 800694e:	b1e8      	cbz	r0, 800698c <lwip_netconn_do_writemore+0x48>
  LWIP_ASSERT("conn->state == NETCONN_WRITE", (conn->state == NETCONN_WRITE));
 8006950:	786b      	ldrb	r3, [r5, #1]
 8006952:	2b01      	cmp	r3, #1
 8006954:	d122      	bne.n	800699c <lwip_netconn_do_writemore+0x58>
  LWIP_ASSERT("conn->current_msg != NULL", conn->current_msg != NULL);
 8006956:	6a2b      	ldr	r3, [r5, #32]
 8006958:	b343      	cbz	r3, 80069ac <lwip_netconn_do_writemore+0x68>
  LWIP_ASSERT("conn->pcb.tcp != NULL", conn->pcb.tcp != NULL);
 800695a:	686b      	ldr	r3, [r5, #4]
 800695c:	b373      	cbz	r3, 80069bc <lwip_netconn_do_writemore+0x78>
  LWIP_ASSERT("conn->current_msg->msg.w.offset < conn->current_msg->msg.w.len",
 800695e:	6a2b      	ldr	r3, [r5, #32]
 8006960:	699a      	ldr	r2, [r3, #24]
 8006962:	695b      	ldr	r3, [r3, #20]
 8006964:	429a      	cmp	r2, r3
 8006966:	d231      	bcs.n	80069cc <lwip_netconn_do_writemore+0x88>
              conn->current_msg->msg.w.offset < conn->current_msg->msg.w.len);
  LWIP_ASSERT("conn->current_msg->msg.w.vector_cnt > 0", conn->current_msg->msg.w.vector_cnt > 0);
 8006968:	6a2b      	ldr	r3, [r5, #32]
 800696a:	899b      	ldrh	r3, [r3, #12]
 800696c:	2b00      	cmp	r3, #0
 800696e:	d035      	beq.n	80069dc <lwip_netconn_do_writemore+0x98>

  apiflags = conn->current_msg->msg.w.apiflags;
 8006970:	6a2b      	ldr	r3, [r5, #32]
 8006972:	f893 801c 	ldrb.w	r8, [r3, #28]
  dontblock = netconn_is_nonblocking(conn) || (apiflags & NETCONN_DONTBLOCK);
 8006976:	f895 a01c 	ldrb.w	sl, [r5, #28]
 800697a:	f00a 0a02 	and.w	sl, sl, #2
 800697e:	f008 0304 	and.w	r3, r8, #4
 8006982:	ea4a 0a03 	orr.w	sl, sl, r3
          }
        } else {
          apiflags |= TCP_WRITE_FLAG_MORE;
        }
      }
      LWIP_ASSERT("lwip_netconn_do_writemore: invalid length!",
 8006986:	f8df b248 	ldr.w	fp, [pc, #584]	; 8006bd0 <lwip_netconn_do_writemore+0x28c>
 800698a:	e103      	b.n	8006b94 <lwip_netconn_do_writemore+0x250>
  LWIP_ASSERT("conn != NULL", conn != NULL);
 800698c:	4b90      	ldr	r3, [pc, #576]	; (8006bd0 <lwip_netconn_do_writemore+0x28c>)
 800698e:	f240 6273 	movw	r2, #1651	; 0x673
 8006992:	4990      	ldr	r1, [pc, #576]	; (8006bd4 <lwip_netconn_do_writemore+0x290>)
 8006994:	4890      	ldr	r0, [pc, #576]	; (8006bd8 <lwip_netconn_do_writemore+0x294>)
 8006996:	f008 fbad 	bl	800f0f4 <iprintf>
 800699a:	e7d9      	b.n	8006950 <lwip_netconn_do_writemore+0xc>
  LWIP_ASSERT("conn->state == NETCONN_WRITE", (conn->state == NETCONN_WRITE));
 800699c:	4b8c      	ldr	r3, [pc, #560]	; (8006bd0 <lwip_netconn_do_writemore+0x28c>)
 800699e:	f240 6274 	movw	r2, #1652	; 0x674
 80069a2:	498e      	ldr	r1, [pc, #568]	; (8006bdc <lwip_netconn_do_writemore+0x298>)
 80069a4:	488c      	ldr	r0, [pc, #560]	; (8006bd8 <lwip_netconn_do_writemore+0x294>)
 80069a6:	f008 fba5 	bl	800f0f4 <iprintf>
 80069aa:	e7d4      	b.n	8006956 <lwip_netconn_do_writemore+0x12>
  LWIP_ASSERT("conn->current_msg != NULL", conn->current_msg != NULL);
 80069ac:	4b88      	ldr	r3, [pc, #544]	; (8006bd0 <lwip_netconn_do_writemore+0x28c>)
 80069ae:	f240 6275 	movw	r2, #1653	; 0x675
 80069b2:	498b      	ldr	r1, [pc, #556]	; (8006be0 <lwip_netconn_do_writemore+0x29c>)
 80069b4:	4888      	ldr	r0, [pc, #544]	; (8006bd8 <lwip_netconn_do_writemore+0x294>)
 80069b6:	f008 fb9d 	bl	800f0f4 <iprintf>
 80069ba:	e7ce      	b.n	800695a <lwip_netconn_do_writemore+0x16>
  LWIP_ASSERT("conn->pcb.tcp != NULL", conn->pcb.tcp != NULL);
 80069bc:	4b84      	ldr	r3, [pc, #528]	; (8006bd0 <lwip_netconn_do_writemore+0x28c>)
 80069be:	f240 6276 	movw	r2, #1654	; 0x676
 80069c2:	4988      	ldr	r1, [pc, #544]	; (8006be4 <lwip_netconn_do_writemore+0x2a0>)
 80069c4:	4884      	ldr	r0, [pc, #528]	; (8006bd8 <lwip_netconn_do_writemore+0x294>)
 80069c6:	f008 fb95 	bl	800f0f4 <iprintf>
 80069ca:	e7c8      	b.n	800695e <lwip_netconn_do_writemore+0x1a>
  LWIP_ASSERT("conn->current_msg->msg.w.offset < conn->current_msg->msg.w.len",
 80069cc:	4b80      	ldr	r3, [pc, #512]	; (8006bd0 <lwip_netconn_do_writemore+0x28c>)
 80069ce:	f240 6277 	movw	r2, #1655	; 0x677
 80069d2:	4985      	ldr	r1, [pc, #532]	; (8006be8 <lwip_netconn_do_writemore+0x2a4>)
 80069d4:	4880      	ldr	r0, [pc, #512]	; (8006bd8 <lwip_netconn_do_writemore+0x294>)
 80069d6:	f008 fb8d 	bl	800f0f4 <iprintf>
 80069da:	e7c5      	b.n	8006968 <lwip_netconn_do_writemore+0x24>
  LWIP_ASSERT("conn->current_msg->msg.w.vector_cnt > 0", conn->current_msg->msg.w.vector_cnt > 0);
 80069dc:	4b7c      	ldr	r3, [pc, #496]	; (8006bd0 <lwip_netconn_do_writemore+0x28c>)
 80069de:	f240 6279 	movw	r2, #1657	; 0x679
 80069e2:	4982      	ldr	r1, [pc, #520]	; (8006bec <lwip_netconn_do_writemore+0x2a8>)
 80069e4:	487c      	ldr	r0, [pc, #496]	; (8006bd8 <lwip_netconn_do_writemore+0x294>)
 80069e6:	f008 fb85 	bl	800f0f4 <iprintf>
 80069ea:	e7c1      	b.n	8006970 <lwip_netconn_do_writemore+0x2c>
            err = (conn->current_msg->msg.w.offset == 0) ? ERR_WOULDBLOCK : ERR_OK;
 80069ec:	6993      	ldr	r3, [r2, #24]
 80069ee:	2b00      	cmp	r3, #0
 80069f0:	bf0c      	ite	eq
 80069f2:	f06f 0406 	mvneq.w	r4, #6
 80069f6:	2400      	movne	r4, #0
      }
    } while (write_more && err == ERR_OK);
    /* if OK or memory error, check available space */
    if ((err == ERR_OK) || (err == ERR_MEM)) {
err_mem:
      if (dontblock && (conn->current_msg->msg.w.offset < conn->current_msg->msg.w.len)) {
 80069f8:	6a2b      	ldr	r3, [r5, #32]
 80069fa:	699a      	ldr	r2, [r3, #24]
 80069fc:	695b      	ldr	r3, [r3, #20]
 80069fe:	429a      	cmp	r2, r3
 8006a00:	d359      	bcc.n	8006ab6 <lwip_netconn_do_writemore+0x172>
 8006a02:	e094      	b.n	8006b2e <lwip_netconn_do_writemore+0x1ea>
          apiflags |= TCP_WRITE_FLAG_MORE;
 8006a04:	f048 0802 	orr.w	r8, r8, #2
        len = available;
 8006a08:	4604      	mov	r4, r0
      LWIP_ASSERT("lwip_netconn_do_writemore: invalid length!",
 8006a0a:	46a1      	mov	r9, r4
 8006a0c:	4423      	add	r3, r4
 8006a0e:	4299      	cmp	r1, r3
 8006a10:	d32b      	bcc.n	8006a6a <lwip_netconn_do_writemore+0x126>
      if ((len == 0xffff && diff > 0xffffUL) ||
 8006a12:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8006a16:	429c      	cmp	r4, r3
 8006a18:	d02f      	beq.n	8006a7a <lwip_netconn_do_writemore+0x136>
 8006a1a:	b2b6      	uxth	r6, r6
 8006a1c:	42a6      	cmp	r6, r4
 8006a1e:	f040 809e 	bne.w	8006b5e <lwip_netconn_do_writemore+0x21a>
          (len == (u16_t)diff && conn->current_msg->msg.w.vector_cnt > 1)) {
 8006a22:	6a2b      	ldr	r3, [r5, #32]
 8006a24:	899b      	ldrh	r3, [r3, #12]
 8006a26:	2b01      	cmp	r3, #1
 8006a28:	f240 8099 	bls.w	8006b5e <lwip_netconn_do_writemore+0x21a>
        apiflags |= TCP_WRITE_FLAG_MORE;
 8006a2c:	f048 0802 	orr.w	r8, r8, #2
      err = tcp_write(conn->pcb.tcp, dataptr, len, apiflags);
 8006a30:	4643      	mov	r3, r8
 8006a32:	4622      	mov	r2, r4
 8006a34:	4639      	mov	r1, r7
 8006a36:	6868      	ldr	r0, [r5, #4]
 8006a38:	f005 f8c6 	bl	800bbc8 <tcp_write>
      if (err == ERR_OK) {
 8006a3c:	4604      	mov	r4, r0
 8006a3e:	b300      	cbz	r0, 8006a82 <lwip_netconn_do_writemore+0x13e>
    if ((err == ERR_OK) || (err == ERR_MEM)) {
 8006a40:	1c43      	adds	r3, r0, #1
 8006a42:	b2db      	uxtb	r3, r3
 8006a44:	2b01      	cmp	r3, #1
 8006a46:	d965      	bls.n	8006b14 <lwip_netconn_do_writemore+0x1d0>
           don't try writing any more but return the error
           to the application thread. */
        err = out_err;
        write_finished = 1;
      }
    } else if (err == ERR_MEM) {
 8006a48:	f1b4 3fff 	cmp.w	r4, #4294967295
 8006a4c:	d03e      	beq.n	8006acc <lwip_netconn_do_writemore+0x188>
    }
  }
  if (write_finished) {
    /* everything was written: set back connection state
       and back to application task */
    sys_sem_t *op_completed_sem = LWIP_API_MSG_SEM(conn->current_msg);
 8006a4e:	6a2b      	ldr	r3, [r5, #32]
 8006a50:	6818      	ldr	r0, [r3, #0]
    conn->current_msg->err = err;
 8006a52:	711c      	strb	r4, [r3, #4]
    conn->current_msg = NULL;
 8006a54:	2300      	movs	r3, #0
 8006a56:	622b      	str	r3, [r5, #32]
    conn->state = NETCONN_NONE;
 8006a58:	706b      	strb	r3, [r5, #1]
#if LWIP_TCPIP_CORE_LOCKING
    if (delayed)
 8006a5a:	9b01      	ldr	r3, [sp, #4]
 8006a5c:	2b00      	cmp	r3, #0
 8006a5e:	d148      	bne.n	8006af2 <lwip_netconn_do_writemore+0x1ae>
#if LWIP_TCPIP_CORE_LOCKING
  else {
    return ERR_MEM;
  }
#endif
  return ERR_OK;
 8006a60:	2400      	movs	r4, #0
}
 8006a62:	4620      	mov	r0, r4
 8006a64:	b003      	add	sp, #12
 8006a66:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      LWIP_ASSERT("lwip_netconn_do_writemore: invalid length!",
 8006a6a:	465b      	mov	r3, fp
 8006a6c:	f240 62a3 	movw	r2, #1699	; 0x6a3
 8006a70:	495f      	ldr	r1, [pc, #380]	; (8006bf0 <lwip_netconn_do_writemore+0x2ac>)
 8006a72:	4859      	ldr	r0, [pc, #356]	; (8006bd8 <lwip_netconn_do_writemore+0x294>)
 8006a74:	f008 fb3e 	bl	800f0f4 <iprintf>
 8006a78:	e7cb      	b.n	8006a12 <lwip_netconn_do_writemore+0xce>
      if ((len == 0xffff && diff > 0xffffUL) ||
 8006a7a:	f5b6 3f80 	cmp.w	r6, #65536	; 0x10000
 8006a7e:	d2d5      	bcs.n	8006a2c <lwip_netconn_do_writemore+0xe8>
 8006a80:	e7cb      	b.n	8006a1a <lwip_netconn_do_writemore+0xd6>
        write_more = 1;
 8006a82:	2101      	movs	r1, #1
 8006a84:	e075      	b.n	8006b72 <lwip_netconn_do_writemore+0x22e>
          conn->current_msg->msg.w.vector_cnt--;
 8006a86:	899a      	ldrh	r2, [r3, #12]
 8006a88:	3a01      	subs	r2, #1
 8006a8a:	819a      	strh	r2, [r3, #12]
          if (conn->current_msg->msg.w.vector_cnt > 0) {
 8006a8c:	6a2b      	ldr	r3, [r5, #32]
 8006a8e:	899a      	ldrh	r2, [r3, #12]
 8006a90:	2a00      	cmp	r2, #0
 8006a92:	d07d      	beq.n	8006b90 <lwip_netconn_do_writemore+0x24c>
            conn->current_msg->msg.w.vector++;
 8006a94:	689a      	ldr	r2, [r3, #8]
 8006a96:	3208      	adds	r2, #8
 8006a98:	609a      	str	r2, [r3, #8]
            conn->current_msg->msg.w.vector_off = 0;
 8006a9a:	6a2b      	ldr	r3, [r5, #32]
 8006a9c:	2200      	movs	r2, #0
 8006a9e:	611a      	str	r2, [r3, #16]
 8006aa0:	e076      	b.n	8006b90 <lwip_netconn_do_writemore+0x24c>
    if ((err == ERR_OK) || (err == ERR_MEM)) {
 8006aa2:	1c63      	adds	r3, r4, #1
 8006aa4:	b2db      	uxtb	r3, r3
 8006aa6:	2b01      	cmp	r3, #1
 8006aa8:	d8ce      	bhi.n	8006a48 <lwip_netconn_do_writemore+0x104>
 8006aaa:	e033      	b.n	8006b14 <lwip_netconn_do_writemore+0x1d0>
      if (dontblock && (conn->current_msg->msg.w.offset < conn->current_msg->msg.w.len)) {
 8006aac:	6a2b      	ldr	r3, [r5, #32]
 8006aae:	699a      	ldr	r2, [r3, #24]
 8006ab0:	695b      	ldr	r3, [r3, #20]
 8006ab2:	429a      	cmp	r2, r3
 8006ab4:	d231      	bcs.n	8006b1a <lwip_netconn_do_writemore+0x1d6>
        API_EVENT(conn, NETCONN_EVT_SENDMINUS, 0);
 8006ab6:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8006ab8:	b11b      	cbz	r3, 8006ac2 <lwip_netconn_do_writemore+0x17e>
 8006aba:	2200      	movs	r2, #0
 8006abc:	2103      	movs	r1, #3
 8006abe:	4628      	mov	r0, r5
 8006ac0:	4798      	blx	r3
        conn->flags |= NETCONN_FLAG_CHECK_WRITESPACE;
 8006ac2:	7f2b      	ldrb	r3, [r5, #28]
 8006ac4:	f043 0310 	orr.w	r3, r3, #16
 8006ac8:	772b      	strb	r3, [r5, #28]
 8006aca:	e036      	b.n	8006b3a <lwip_netconn_do_writemore+0x1f6>
      err_t out_err = tcp_output(conn->pcb.tcp);
 8006acc:	6868      	ldr	r0, [r5, #4]
 8006ace:	f005 feb1 	bl	800c834 <tcp_output>
      if (out_err == ERR_RTE) {
 8006ad2:	f110 0f04 	cmn.w	r0, #4
 8006ad6:	d00a      	beq.n	8006aee <lwip_netconn_do_writemore+0x1aa>
      } else if (dontblock) {
 8006ad8:	f1ba 0f00 	cmp.w	sl, #0
 8006adc:	d0c1      	beq.n	8006a62 <lwip_netconn_do_writemore+0x11e>
        err = (conn->current_msg->msg.w.offset == 0) ? ERR_WOULDBLOCK : ERR_OK;
 8006ade:	6a2b      	ldr	r3, [r5, #32]
 8006ae0:	699b      	ldr	r3, [r3, #24]
 8006ae2:	2b00      	cmp	r3, #0
 8006ae4:	bf0c      	ite	eq
 8006ae6:	f06f 0406 	mvneq.w	r4, #6
 8006aea:	2400      	movne	r4, #0
 8006aec:	e7af      	b.n	8006a4e <lwip_netconn_do_writemore+0x10a>
        err = out_err;
 8006aee:	4604      	mov	r4, r0
 8006af0:	e7ad      	b.n	8006a4e <lwip_netconn_do_writemore+0x10a>
      sys_sem_signal(op_completed_sem);
 8006af2:	300c      	adds	r0, #12
 8006af4:	f008 f8ae 	bl	800ec54 <sys_sem_signal>
  return ERR_OK;
 8006af8:	2400      	movs	r4, #0
 8006afa:	e7b2      	b.n	8006a62 <lwip_netconn_do_writemore+0x11e>
      out_err = tcp_output(conn->pcb.tcp);
 8006afc:	6868      	ldr	r0, [r5, #4]
 8006afe:	f005 fe99 	bl	800c834 <tcp_output>
 8006b02:	4604      	mov	r4, r0
      if (out_err == ERR_RTE) {
 8006b04:	f110 0f04 	cmn.w	r0, #4
    return ERR_MEM;
 8006b08:	bf18      	it	ne
 8006b0a:	f04f 34ff 	movne.w	r4, #4294967295
      if (out_err == ERR_RTE) {
 8006b0e:	d09e      	beq.n	8006a4e <lwip_netconn_do_writemore+0x10a>
 8006b10:	e7a7      	b.n	8006a62 <lwip_netconn_do_writemore+0x11e>
      err = tcp_write(conn->pcb.tcp, dataptr, len, apiflags);
 8006b12:	2400      	movs	r4, #0
      if (dontblock && (conn->current_msg->msg.w.offset < conn->current_msg->msg.w.len)) {
 8006b14:	f1ba 0f00 	cmp.w	sl, #0
 8006b18:	d1c8      	bne.n	8006aac <lwip_netconn_do_writemore+0x168>
      } else if ((tcp_sndbuf(conn->pcb.tcp) <= TCP_SNDLOWAT) ||
 8006b1a:	686b      	ldr	r3, [r5, #4]
 8006b1c:	f8b3 2064 	ldrh.w	r2, [r3, #100]	; 0x64
 8006b20:	f5b2 6f86 	cmp.w	r2, #1072	; 0x430
 8006b24:	d303      	bcc.n	8006b2e <lwip_netconn_do_writemore+0x1ea>
 8006b26:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8006b2a:	2b04      	cmp	r3, #4
 8006b2c:	d905      	bls.n	8006b3a <lwip_netconn_do_writemore+0x1f6>
        API_EVENT(conn, NETCONN_EVT_SENDMINUS, 0);
 8006b2e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8006b30:	b11b      	cbz	r3, 8006b3a <lwip_netconn_do_writemore+0x1f6>
 8006b32:	2200      	movs	r2, #0
 8006b34:	2103      	movs	r1, #3
 8006b36:	4628      	mov	r0, r5
 8006b38:	4798      	blx	r3
    if (err == ERR_OK) {
 8006b3a:	2c00      	cmp	r4, #0
 8006b3c:	d184      	bne.n	8006a48 <lwip_netconn_do_writemore+0x104>
      if ((conn->current_msg->msg.w.offset == conn->current_msg->msg.w.len) || dontblock) {
 8006b3e:	6a2b      	ldr	r3, [r5, #32]
 8006b40:	699a      	ldr	r2, [r3, #24]
 8006b42:	695b      	ldr	r3, [r3, #20]
 8006b44:	429a      	cmp	r2, r3
 8006b46:	d002      	beq.n	8006b4e <lwip_netconn_do_writemore+0x20a>
 8006b48:	f1ba 0f00 	cmp.w	sl, #0
 8006b4c:	d0d6      	beq.n	8006afc <lwip_netconn_do_writemore+0x1b8>
      out_err = tcp_output(conn->pcb.tcp);
 8006b4e:	6868      	ldr	r0, [r5, #4]
 8006b50:	f005 fe70 	bl	800c834 <tcp_output>
        err = out_err;
 8006b54:	f110 0f04 	cmn.w	r0, #4
 8006b58:	bf08      	it	eq
 8006b5a:	4604      	moveq	r4, r0
 8006b5c:	e777      	b.n	8006a4e <lwip_netconn_do_writemore+0x10a>
      err = tcp_write(conn->pcb.tcp, dataptr, len, apiflags);
 8006b5e:	4643      	mov	r3, r8
 8006b60:	4622      	mov	r2, r4
 8006b62:	4639      	mov	r1, r7
 8006b64:	6868      	ldr	r0, [r5, #4]
 8006b66:	f005 f82f 	bl	800bbc8 <tcp_write>
      if (err == ERR_OK) {
 8006b6a:	4604      	mov	r4, r0
 8006b6c:	2800      	cmp	r0, #0
 8006b6e:	d198      	bne.n	8006aa2 <lwip_netconn_do_writemore+0x15e>
 8006b70:	2100      	movs	r1, #0
        conn->current_msg->msg.w.offset += len;
 8006b72:	6a2a      	ldr	r2, [r5, #32]
 8006b74:	6993      	ldr	r3, [r2, #24]
 8006b76:	444b      	add	r3, r9
 8006b78:	6193      	str	r3, [r2, #24]
        conn->current_msg->msg.w.vector_off += len;
 8006b7a:	6a2a      	ldr	r2, [r5, #32]
 8006b7c:	6913      	ldr	r3, [r2, #16]
 8006b7e:	444b      	add	r3, r9
 8006b80:	6113      	str	r3, [r2, #16]
        if (conn->current_msg->msg.w.vector_off == conn->current_msg->msg.w.vector->len) {
 8006b82:	6a2b      	ldr	r3, [r5, #32]
 8006b84:	689a      	ldr	r2, [r3, #8]
 8006b86:	6918      	ldr	r0, [r3, #16]
 8006b88:	6852      	ldr	r2, [r2, #4]
 8006b8a:	4290      	cmp	r0, r2
 8006b8c:	f43f af7b 	beq.w	8006a86 <lwip_netconn_do_writemore+0x142>
    } while (write_more && err == ERR_OK);
 8006b90:	2900      	cmp	r1, #0
 8006b92:	d0be      	beq.n	8006b12 <lwip_netconn_do_writemore+0x1ce>
      dataptr = (const u8_t *)conn->current_msg->msg.w.vector->ptr + conn->current_msg->msg.w.vector_off;
 8006b94:	6a2a      	ldr	r2, [r5, #32]
 8006b96:	6891      	ldr	r1, [r2, #8]
 8006b98:	6913      	ldr	r3, [r2, #16]
 8006b9a:	680f      	ldr	r7, [r1, #0]
 8006b9c:	441f      	add	r7, r3
      diff = conn->current_msg->msg.w.vector->len - conn->current_msg->msg.w.vector_off;
 8006b9e:	6849      	ldr	r1, [r1, #4]
 8006ba0:	1ace      	subs	r6, r1, r3
      if (diff > 0xffffUL) { /* max_u16_t */
 8006ba2:	f5b6 3f80 	cmp.w	r6, #65536	; 0x10000
        apiflags |= TCP_WRITE_FLAG_MORE;
 8006ba6:	bf26      	itte	cs
 8006ba8:	f048 0802 	orrcs.w	r8, r8, #2
        len = 0xffff;
 8006bac:	f64f 74ff 	movwcs	r4, #65535	; 0xffff
        len = (u16_t)diff;
 8006bb0:	b2b4      	uxthcc	r4, r6
      available = tcp_sndbuf(conn->pcb.tcp);
 8006bb2:	6868      	ldr	r0, [r5, #4]
 8006bb4:	f8b0 0064 	ldrh.w	r0, [r0, #100]	; 0x64
      if (available < len) {
 8006bb8:	4284      	cmp	r4, r0
 8006bba:	f67f af26 	bls.w	8006a0a <lwip_netconn_do_writemore+0xc6>
        if (dontblock) {
 8006bbe:	f1ba 0f00 	cmp.w	sl, #0
 8006bc2:	f43f af1f 	beq.w	8006a04 <lwip_netconn_do_writemore+0xc0>
          if (!len) {
 8006bc6:	2800      	cmp	r0, #0
 8006bc8:	f43f af10 	beq.w	80069ec <lwip_netconn_do_writemore+0xa8>
        len = available;
 8006bcc:	4604      	mov	r4, r0
 8006bce:	e71c      	b.n	8006a0a <lwip_netconn_do_writemore+0xc6>
 8006bd0:	08010610 	.word	0x08010610
 8006bd4:	080106a8 	.word	0x080106a8
 8006bd8:	080103a4 	.word	0x080103a4
 8006bdc:	0801071c 	.word	0x0801071c
 8006be0:	080106c8 	.word	0x080106c8
 8006be4:	0801073c 	.word	0x0801073c
 8006be8:	08010754 	.word	0x08010754
 8006bec:	08010794 	.word	0x08010794
 8006bf0:	080107bc 	.word	0x080107bc

08006bf4 <lwip_netconn_do_close_internal>:
{
 8006bf4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006bf8:	460f      	mov	r7, r1
  LWIP_ASSERT("invalid conn", (conn != NULL));
 8006bfa:	4604      	mov	r4, r0
 8006bfc:	2800      	cmp	r0, #0
 8006bfe:	d036      	beq.n	8006c6e <lwip_netconn_do_close_internal+0x7a>
  LWIP_ASSERT("this is for tcp netconns only", (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP));
 8006c00:	7823      	ldrb	r3, [r4, #0]
 8006c02:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006c06:	2b10      	cmp	r3, #16
 8006c08:	d139      	bne.n	8006c7e <lwip_netconn_do_close_internal+0x8a>
  LWIP_ASSERT("conn must be in state NETCONN_CLOSE", (conn->state == NETCONN_CLOSE));
 8006c0a:	7863      	ldrb	r3, [r4, #1]
 8006c0c:	2b04      	cmp	r3, #4
 8006c0e:	d13e      	bne.n	8006c8e <lwip_netconn_do_close_internal+0x9a>
  LWIP_ASSERT("pcb already closed", (conn->pcb.tcp != NULL));
 8006c10:	6863      	ldr	r3, [r4, #4]
 8006c12:	2b00      	cmp	r3, #0
 8006c14:	d043      	beq.n	8006c9e <lwip_netconn_do_close_internal+0xaa>
  LWIP_ASSERT("conn->current_msg != NULL", conn->current_msg != NULL);
 8006c16:	6a23      	ldr	r3, [r4, #32]
 8006c18:	2b00      	cmp	r3, #0
 8006c1a:	d048      	beq.n	8006cae <lwip_netconn_do_close_internal+0xba>
  tpcb = conn->pcb.tcp;
 8006c1c:	6866      	ldr	r6, [r4, #4]
  shut = conn->current_msg->msg.sd.shut;
 8006c1e:	6a23      	ldr	r3, [r4, #32]
 8006c20:	7a1b      	ldrb	r3, [r3, #8]
  shut_rx = shut & NETCONN_SHUT_RD;
 8006c22:	f003 0801 	and.w	r8, r3, #1
  shut_tx = shut & NETCONN_SHUT_WR;
 8006c26:	f003 0902 	and.w	r9, r3, #2
  if (shut == NETCONN_SHUT_RDWR) {
 8006c2a:	2b03      	cmp	r3, #3
 8006c2c:	d012      	beq.n	8006c54 <lwip_netconn_do_close_internal+0x60>
  } else if (shut_rx &&
 8006c2e:	f1b8 0f00 	cmp.w	r8, #0
 8006c32:	d006      	beq.n	8006c42 <lwip_netconn_do_close_internal+0x4e>
             ((tpcb->state == FIN_WAIT_1) ||
 8006c34:	7d32      	ldrb	r2, [r6, #20]
 8006c36:	1f53      	subs	r3, r2, #5
  } else if (shut_rx &&
 8006c38:	b2db      	uxtb	r3, r3
 8006c3a:	2b01      	cmp	r3, #1
 8006c3c:	d90a      	bls.n	8006c54 <lwip_netconn_do_close_internal+0x60>
              (tpcb->state == FIN_WAIT_2) ||
 8006c3e:	2a08      	cmp	r2, #8
 8006c40:	d008      	beq.n	8006c54 <lwip_netconn_do_close_internal+0x60>
  } else if (shut_tx && ((tpcb->flags & TF_RXCLOSED) != 0)) {
 8006c42:	f1b9 0f00 	cmp.w	r9, #0
 8006c46:	f000 80cd 	beq.w	8006de4 <lwip_netconn_do_close_internal+0x1f0>
 8006c4a:	8b73      	ldrh	r3, [r6, #26]
 8006c4c:	f013 0f10 	tst.w	r3, #16
 8006c50:	f000 80c8 	beq.w	8006de4 <lwip_netconn_do_close_internal+0x1f0>
    tcp_arg(tpcb, NULL);
 8006c54:	2100      	movs	r1, #0
 8006c56:	4630      	mov	r0, r6
 8006c58:	f002 fa4c 	bl	80090f4 <tcp_arg>
  if (tpcb->state == LISTEN) {
 8006c5c:	f896 a014 	ldrb.w	sl, [r6, #20]
 8006c60:	f1ba 0f01 	cmp.w	sl, #1
 8006c64:	f000 80d6 	beq.w	8006e14 <lwip_netconn_do_close_internal+0x220>
 8006c68:	f04f 0a01 	mov.w	sl, #1
 8006c6c:	e0bf      	b.n	8006dee <lwip_netconn_do_close_internal+0x1fa>
  LWIP_ASSERT("invalid conn", (conn != NULL));
 8006c6e:	4b6c      	ldr	r3, [pc, #432]	; (8006e20 <lwip_netconn_do_close_internal+0x22c>)
 8006c70:	f240 32a2 	movw	r2, #930	; 0x3a2
 8006c74:	496b      	ldr	r1, [pc, #428]	; (8006e24 <lwip_netconn_do_close_internal+0x230>)
 8006c76:	486c      	ldr	r0, [pc, #432]	; (8006e28 <lwip_netconn_do_close_internal+0x234>)
 8006c78:	f008 fa3c 	bl	800f0f4 <iprintf>
 8006c7c:	e7c0      	b.n	8006c00 <lwip_netconn_do_close_internal+0xc>
  LWIP_ASSERT("this is for tcp netconns only", (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP));
 8006c7e:	4b68      	ldr	r3, [pc, #416]	; (8006e20 <lwip_netconn_do_close_internal+0x22c>)
 8006c80:	f240 32a3 	movw	r2, #931	; 0x3a3
 8006c84:	4969      	ldr	r1, [pc, #420]	; (8006e2c <lwip_netconn_do_close_internal+0x238>)
 8006c86:	4868      	ldr	r0, [pc, #416]	; (8006e28 <lwip_netconn_do_close_internal+0x234>)
 8006c88:	f008 fa34 	bl	800f0f4 <iprintf>
 8006c8c:	e7bd      	b.n	8006c0a <lwip_netconn_do_close_internal+0x16>
  LWIP_ASSERT("conn must be in state NETCONN_CLOSE", (conn->state == NETCONN_CLOSE));
 8006c8e:	4b64      	ldr	r3, [pc, #400]	; (8006e20 <lwip_netconn_do_close_internal+0x22c>)
 8006c90:	f44f 7269 	mov.w	r2, #932	; 0x3a4
 8006c94:	4966      	ldr	r1, [pc, #408]	; (8006e30 <lwip_netconn_do_close_internal+0x23c>)
 8006c96:	4864      	ldr	r0, [pc, #400]	; (8006e28 <lwip_netconn_do_close_internal+0x234>)
 8006c98:	f008 fa2c 	bl	800f0f4 <iprintf>
 8006c9c:	e7b8      	b.n	8006c10 <lwip_netconn_do_close_internal+0x1c>
  LWIP_ASSERT("pcb already closed", (conn->pcb.tcp != NULL));
 8006c9e:	4b60      	ldr	r3, [pc, #384]	; (8006e20 <lwip_netconn_do_close_internal+0x22c>)
 8006ca0:	f240 32a5 	movw	r2, #933	; 0x3a5
 8006ca4:	4963      	ldr	r1, [pc, #396]	; (8006e34 <lwip_netconn_do_close_internal+0x240>)
 8006ca6:	4860      	ldr	r0, [pc, #384]	; (8006e28 <lwip_netconn_do_close_internal+0x234>)
 8006ca8:	f008 fa24 	bl	800f0f4 <iprintf>
 8006cac:	e7b3      	b.n	8006c16 <lwip_netconn_do_close_internal+0x22>
  LWIP_ASSERT("conn->current_msg != NULL", conn->current_msg != NULL);
 8006cae:	4b5c      	ldr	r3, [pc, #368]	; (8006e20 <lwip_netconn_do_close_internal+0x22c>)
 8006cb0:	f240 32a6 	movw	r2, #934	; 0x3a6
 8006cb4:	4960      	ldr	r1, [pc, #384]	; (8006e38 <lwip_netconn_do_close_internal+0x244>)
 8006cb6:	485c      	ldr	r0, [pc, #368]	; (8006e28 <lwip_netconn_do_close_internal+0x234>)
 8006cb8:	f008 fa1c 	bl	800f0f4 <iprintf>
 8006cbc:	e7ae      	b.n	8006c1c <lwip_netconn_do_close_internal+0x28>
      tcp_recv(tpcb, NULL);
 8006cbe:	2100      	movs	r1, #0
 8006cc0:	4630      	mov	r0, r6
 8006cc2:	f002 fa1b 	bl	80090fc <tcp_recv>
      tcp_accept(tpcb, NULL);
 8006cc6:	2100      	movs	r1, #0
 8006cc8:	4630      	mov	r0, r6
 8006cca:	f002 fa65 	bl	8009198 <tcp_accept>
 8006cce:	e092      	b.n	8006df6 <lwip_netconn_do_close_internal+0x202>
      tcp_sent(tpcb, NULL);
 8006cd0:	2100      	movs	r1, #0
 8006cd2:	4630      	mov	r0, r6
 8006cd4:	f002 fa2c 	bl	8009130 <tcp_sent>
 8006cd8:	e091      	b.n	8006dfe <lwip_netconn_do_close_internal+0x20a>
      tcp_poll(tpcb, NULL, 0);
 8006cda:	2200      	movs	r2, #0
 8006cdc:	4611      	mov	r1, r2
 8006cde:	4630      	mov	r0, r6
 8006ce0:	f002 fa60 	bl	80091a4 <tcp_poll>
      tcp_err(tpcb, NULL);
 8006ce4:	2100      	movs	r1, #0
 8006ce6:	4630      	mov	r0, r6
 8006ce8:	f002 fa3c 	bl	8009164 <tcp_err>
      err = tcp_close(tpcb);
 8006cec:	4630      	mov	r0, r6
 8006cee:	f002 fdef 	bl	80098d0 <tcp_close>
 8006cf2:	4605      	mov	r5, r0
    if (err == ERR_MEM) {
 8006cf4:	f1b5 3fff 	cmp.w	r5, #4294967295
 8006cf8:	d022      	beq.n	8006d40 <lwip_netconn_do_close_internal+0x14c>
    sys_sem_t *op_completed_sem = LWIP_API_MSG_SEM(conn->current_msg);
 8006cfa:	6a23      	ldr	r3, [r4, #32]
 8006cfc:	681e      	ldr	r6, [r3, #0]
 8006cfe:	360c      	adds	r6, #12
    conn->current_msg->err = err;
 8006d00:	711d      	strb	r5, [r3, #4]
    conn->current_msg = NULL;
 8006d02:	2300      	movs	r3, #0
 8006d04:	6223      	str	r3, [r4, #32]
    conn->state = NETCONN_NONE;
 8006d06:	7063      	strb	r3, [r4, #1]
    if (err == ERR_OK) {
 8006d08:	b9a5      	cbnz	r5, 8006d34 <lwip_netconn_do_close_internal+0x140>
      if (shut_close) {
 8006d0a:	f1ba 0f00 	cmp.w	sl, #0
 8006d0e:	d143      	bne.n	8006d98 <lwip_netconn_do_close_internal+0x1a4>
      if (shut_rx) {
 8006d10:	f1b8 0f00 	cmp.w	r8, #0
 8006d14:	d005      	beq.n	8006d22 <lwip_netconn_do_close_internal+0x12e>
        API_EVENT(conn, NETCONN_EVT_RCVPLUS, 0);
 8006d16:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006d18:	b163      	cbz	r3, 8006d34 <lwip_netconn_do_close_internal+0x140>
 8006d1a:	2200      	movs	r2, #0
 8006d1c:	4611      	mov	r1, r2
 8006d1e:	4620      	mov	r0, r4
 8006d20:	4798      	blx	r3
      if (shut_tx) {
 8006d22:	f1b9 0f00 	cmp.w	r9, #0
 8006d26:	d005      	beq.n	8006d34 <lwip_netconn_do_close_internal+0x140>
        API_EVENT(conn, NETCONN_EVT_SENDPLUS, 0);
 8006d28:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006d2a:	b11b      	cbz	r3, 8006d34 <lwip_netconn_do_close_internal+0x140>
 8006d2c:	2200      	movs	r2, #0
 8006d2e:	2102      	movs	r1, #2
 8006d30:	4620      	mov	r0, r4
 8006d32:	4798      	blx	r3
    if (delayed)
 8006d34:	2f00      	cmp	r7, #0
 8006d36:	d138      	bne.n	8006daa <lwip_netconn_do_close_internal+0x1b6>
    return ERR_OK;
 8006d38:	2500      	movs	r5, #0
}
 8006d3a:	4628      	mov	r0, r5
 8006d3c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      if (conn->current_msg->msg.sd.polls_left == 0) {
 8006d40:	6a23      	ldr	r3, [r4, #32]
 8006d42:	7a5a      	ldrb	r2, [r3, #9]
 8006d44:	b19a      	cbz	r2, 8006d6e <lwip_netconn_do_close_internal+0x17a>
    LWIP_ASSERT("Closing a listen pcb may not fail!", (tpcb->state != LISTEN));
 8006d46:	7d33      	ldrb	r3, [r6, #20]
 8006d48:	2b01      	cmp	r3, #1
 8006d4a:	d033      	beq.n	8006db4 <lwip_netconn_do_close_internal+0x1c0>
    if (shut_tx) {
 8006d4c:	f1b9 0f00 	cmp.w	r9, #0
 8006d50:	d138      	bne.n	8006dc4 <lwip_netconn_do_close_internal+0x1d0>
    tcp_poll(tpcb, poll_tcp, 1);
 8006d52:	2201      	movs	r2, #1
 8006d54:	4939      	ldr	r1, [pc, #228]	; (8006e3c <lwip_netconn_do_close_internal+0x248>)
 8006d56:	4630      	mov	r0, r6
 8006d58:	f002 fa24 	bl	80091a4 <tcp_poll>
    tcp_err(tpcb, err_tcp);
 8006d5c:	4938      	ldr	r1, [pc, #224]	; (8006e40 <lwip_netconn_do_close_internal+0x24c>)
 8006d5e:	4630      	mov	r0, r6
 8006d60:	f002 fa00 	bl	8009164 <tcp_err>
    tcp_arg(tpcb, conn);
 8006d64:	4621      	mov	r1, r4
 8006d66:	4630      	mov	r0, r6
 8006d68:	f002 f9c4 	bl	80090f4 <tcp_arg>
  return err;
 8006d6c:	e7e5      	b.n	8006d3a <lwip_netconn_do_close_internal+0x146>
        if (shut_close) {
 8006d6e:	f1ba 0f00 	cmp.w	sl, #0
 8006d72:	d107      	bne.n	8006d84 <lwip_netconn_do_close_internal+0x190>
    sys_sem_t *op_completed_sem = LWIP_API_MSG_SEM(conn->current_msg);
 8006d74:	681e      	ldr	r6, [r3, #0]
 8006d76:	360c      	adds	r6, #12
    conn->current_msg->err = err;
 8006d78:	22ff      	movs	r2, #255	; 0xff
 8006d7a:	711a      	strb	r2, [r3, #4]
    conn->current_msg = NULL;
 8006d7c:	2300      	movs	r3, #0
 8006d7e:	6223      	str	r3, [r4, #32]
    conn->state = NETCONN_NONE;
 8006d80:	7063      	strb	r3, [r4, #1]
    if (err == ERR_OK) {
 8006d82:	e7d7      	b.n	8006d34 <lwip_netconn_do_close_internal+0x140>
          tcp_abort(tpcb);
 8006d84:	4630      	mov	r0, r6
 8006d86:	f002 fb95 	bl	80094b4 <tcp_abort>
    sys_sem_t *op_completed_sem = LWIP_API_MSG_SEM(conn->current_msg);
 8006d8a:	6a22      	ldr	r2, [r4, #32]
 8006d8c:	6816      	ldr	r6, [r2, #0]
 8006d8e:	360c      	adds	r6, #12
    conn->current_msg->err = err;
 8006d90:	2300      	movs	r3, #0
 8006d92:	7113      	strb	r3, [r2, #4]
    conn->current_msg = NULL;
 8006d94:	6223      	str	r3, [r4, #32]
    conn->state = NETCONN_NONE;
 8006d96:	7063      	strb	r3, [r4, #1]
        conn->pcb.tcp = NULL;
 8006d98:	2300      	movs	r3, #0
 8006d9a:	6063      	str	r3, [r4, #4]
        API_EVENT(conn, NETCONN_EVT_ERROR, 0);
 8006d9c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006d9e:	b1b3      	cbz	r3, 8006dce <lwip_netconn_do_close_internal+0x1da>
 8006da0:	2200      	movs	r2, #0
 8006da2:	2104      	movs	r1, #4
 8006da4:	4620      	mov	r0, r4
 8006da6:	4798      	blx	r3
 8006da8:	e7b2      	b.n	8006d10 <lwip_netconn_do_close_internal+0x11c>
      sys_sem_signal(op_completed_sem);
 8006daa:	4630      	mov	r0, r6
 8006dac:	f007 ff52 	bl	800ec54 <sys_sem_signal>
    return ERR_OK;
 8006db0:	2500      	movs	r5, #0
 8006db2:	e7c2      	b.n	8006d3a <lwip_netconn_do_close_internal+0x146>
    LWIP_ASSERT("Closing a listen pcb may not fail!", (tpcb->state != LISTEN));
 8006db4:	4b1a      	ldr	r3, [pc, #104]	; (8006e20 <lwip_netconn_do_close_internal+0x22c>)
 8006db6:	f240 4241 	movw	r2, #1089	; 0x441
 8006dba:	4922      	ldr	r1, [pc, #136]	; (8006e44 <lwip_netconn_do_close_internal+0x250>)
 8006dbc:	481a      	ldr	r0, [pc, #104]	; (8006e28 <lwip_netconn_do_close_internal+0x234>)
 8006dbe:	f008 f999 	bl	800f0f4 <iprintf>
 8006dc2:	e7c3      	b.n	8006d4c <lwip_netconn_do_close_internal+0x158>
      tcp_sent(tpcb, sent_tcp);
 8006dc4:	4920      	ldr	r1, [pc, #128]	; (8006e48 <lwip_netconn_do_close_internal+0x254>)
 8006dc6:	4630      	mov	r0, r6
 8006dc8:	f002 f9b2 	bl	8009130 <tcp_sent>
 8006dcc:	e7c1      	b.n	8006d52 <lwip_netconn_do_close_internal+0x15e>
      if (shut_rx) {
 8006dce:	f1b8 0f00 	cmp.w	r8, #0
 8006dd2:	d1af      	bne.n	8006d34 <lwip_netconn_do_close_internal+0x140>
 8006dd4:	e7a5      	b.n	8006d22 <lwip_netconn_do_close_internal+0x12e>
    tcp_accept(tpcb, NULL);
 8006dd6:	2100      	movs	r1, #0
 8006dd8:	4630      	mov	r0, r6
 8006dda:	f002 f9dd 	bl	8009198 <tcp_accept>
 8006dde:	f04f 0a00 	mov.w	sl, #0
 8006de2:	e010      	b.n	8006e06 <lwip_netconn_do_close_internal+0x212>
  if (tpcb->state == LISTEN) {
 8006de4:	7d33      	ldrb	r3, [r6, #20]
 8006de6:	2b01      	cmp	r3, #1
 8006de8:	d0f5      	beq.n	8006dd6 <lwip_netconn_do_close_internal+0x1e2>
 8006dea:	f04f 0a00 	mov.w	sl, #0
    if (shut_rx) {
 8006dee:	f1b8 0f00 	cmp.w	r8, #0
 8006df2:	f47f af64 	bne.w	8006cbe <lwip_netconn_do_close_internal+0xca>
    if (shut_tx) {
 8006df6:	f1b9 0f00 	cmp.w	r9, #0
 8006dfa:	f47f af69 	bne.w	8006cd0 <lwip_netconn_do_close_internal+0xdc>
    if (shut_close) {
 8006dfe:	f1ba 0f00 	cmp.w	sl, #0
 8006e02:	f47f af6a 	bne.w	8006cda <lwip_netconn_do_close_internal+0xe6>
    err = tcp_shutdown(tpcb, shut_rx, shut_tx);
 8006e06:	464a      	mov	r2, r9
 8006e08:	4641      	mov	r1, r8
 8006e0a:	4630      	mov	r0, r6
 8006e0c:	f002 fe32 	bl	8009a74 <tcp_shutdown>
 8006e10:	4605      	mov	r5, r0
 8006e12:	e76f      	b.n	8006cf4 <lwip_netconn_do_close_internal+0x100>
    tcp_accept(tpcb, NULL);
 8006e14:	2100      	movs	r1, #0
 8006e16:	4630      	mov	r0, r6
 8006e18:	f002 f9be 	bl	8009198 <tcp_accept>
  if (shut_close) {
 8006e1c:	e766      	b.n	8006cec <lwip_netconn_do_close_internal+0xf8>
 8006e1e:	bf00      	nop
 8006e20:	08010610 	.word	0x08010610
 8006e24:	08010514 	.word	0x08010514
 8006e28:	080103a4 	.word	0x080103a4
 8006e2c:	080107e8 	.word	0x080107e8
 8006e30:	08010808 	.word	0x08010808
 8006e34:	0801082c 	.word	0x0801082c
 8006e38:	080106c8 	.word	0x080106c8
 8006e3c:	08006e4d 	.word	0x08006e4d
 8006e40:	080067e1 	.word	0x080067e1
 8006e44:	08010840 	.word	0x08010840
 8006e48:	08006ecd 	.word	0x08006ecd

08006e4c <poll_tcp>:
{
 8006e4c:	b510      	push	{r4, lr}
  LWIP_ASSERT("conn != NULL", (conn != NULL));
 8006e4e:	4604      	mov	r4, r0
 8006e50:	b1f0      	cbz	r0, 8006e90 <poll_tcp+0x44>
  if (conn->state == NETCONN_WRITE) {
 8006e52:	7863      	ldrb	r3, [r4, #1]
 8006e54:	2b01      	cmp	r3, #1
 8006e56:	d023      	beq.n	8006ea0 <poll_tcp+0x54>
  } else if (conn->state == NETCONN_CLOSE) {
 8006e58:	2b04      	cmp	r3, #4
 8006e5a:	d026      	beq.n	8006eaa <poll_tcp+0x5e>
  if (conn->flags & NETCONN_FLAG_CHECK_WRITESPACE) {
 8006e5c:	7f23      	ldrb	r3, [r4, #28]
 8006e5e:	f013 0f10 	tst.w	r3, #16
 8006e62:	d013      	beq.n	8006e8c <poll_tcp+0x40>
    if ((conn->pcb.tcp != NULL) && (tcp_sndbuf(conn->pcb.tcp) > TCP_SNDLOWAT) &&
 8006e64:	6862      	ldr	r2, [r4, #4]
 8006e66:	b18a      	cbz	r2, 8006e8c <poll_tcp+0x40>
 8006e68:	f8b2 1064 	ldrh.w	r1, [r2, #100]	; 0x64
 8006e6c:	f5b1 6f86 	cmp.w	r1, #1072	; 0x430
 8006e70:	d30c      	bcc.n	8006e8c <poll_tcp+0x40>
 8006e72:	f8b2 2066 	ldrh.w	r2, [r2, #102]	; 0x66
 8006e76:	2a04      	cmp	r2, #4
 8006e78:	d808      	bhi.n	8006e8c <poll_tcp+0x40>
      netconn_clear_flags(conn, NETCONN_FLAG_CHECK_WRITESPACE);
 8006e7a:	f023 0310 	bic.w	r3, r3, #16
 8006e7e:	7723      	strb	r3, [r4, #28]
      API_EVENT(conn, NETCONN_EVT_SENDPLUS, 0);
 8006e80:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006e82:	b11b      	cbz	r3, 8006e8c <poll_tcp+0x40>
 8006e84:	2200      	movs	r2, #0
 8006e86:	2102      	movs	r1, #2
 8006e88:	4620      	mov	r0, r4
 8006e8a:	4798      	blx	r3
}
 8006e8c:	2000      	movs	r0, #0
 8006e8e:	bd10      	pop	{r4, pc}
  LWIP_ASSERT("conn != NULL", (conn != NULL));
 8006e90:	4b0b      	ldr	r3, [pc, #44]	; (8006ec0 <poll_tcp+0x74>)
 8006e92:	f44f 72b5 	mov.w	r2, #362	; 0x16a
 8006e96:	490b      	ldr	r1, [pc, #44]	; (8006ec4 <poll_tcp+0x78>)
 8006e98:	480b      	ldr	r0, [pc, #44]	; (8006ec8 <poll_tcp+0x7c>)
 8006e9a:	f008 f92b 	bl	800f0f4 <iprintf>
 8006e9e:	e7d8      	b.n	8006e52 <poll_tcp+0x6>
    lwip_netconn_do_writemore(conn  WRITE_DELAYED);
 8006ea0:	2101      	movs	r1, #1
 8006ea2:	4620      	mov	r0, r4
 8006ea4:	f7ff fd4e 	bl	8006944 <lwip_netconn_do_writemore>
 8006ea8:	e7d8      	b.n	8006e5c <poll_tcp+0x10>
    if (conn->current_msg && conn->current_msg->msg.sd.polls_left) {
 8006eaa:	6a23      	ldr	r3, [r4, #32]
 8006eac:	b11b      	cbz	r3, 8006eb6 <poll_tcp+0x6a>
 8006eae:	7a5a      	ldrb	r2, [r3, #9]
 8006eb0:	b10a      	cbz	r2, 8006eb6 <poll_tcp+0x6a>
      conn->current_msg->msg.sd.polls_left--;
 8006eb2:	3a01      	subs	r2, #1
 8006eb4:	725a      	strb	r2, [r3, #9]
    lwip_netconn_do_close_internal(conn  WRITE_DELAYED);
 8006eb6:	2101      	movs	r1, #1
 8006eb8:	4620      	mov	r0, r4
 8006eba:	f7ff fe9b 	bl	8006bf4 <lwip_netconn_do_close_internal>
 8006ebe:	e7cd      	b.n	8006e5c <poll_tcp+0x10>
 8006ec0:	08010610 	.word	0x08010610
 8006ec4:	080106a8 	.word	0x080106a8
 8006ec8:	080103a4 	.word	0x080103a4

08006ecc <sent_tcp>:
{
 8006ecc:	b538      	push	{r3, r4, r5, lr}
  LWIP_ASSERT("conn != NULL", (conn != NULL));
 8006ece:	b1e0      	cbz	r0, 8006f0a <sent_tcp+0x3e>
 8006ed0:	4615      	mov	r5, r2
 8006ed2:	4604      	mov	r4, r0
    if (conn->state == NETCONN_WRITE) {
 8006ed4:	7843      	ldrb	r3, [r0, #1]
 8006ed6:	2b01      	cmp	r3, #1
 8006ed8:	d020      	beq.n	8006f1c <sent_tcp+0x50>
    } else if (conn->state == NETCONN_CLOSE) {
 8006eda:	2b04      	cmp	r3, #4
 8006edc:	d023      	beq.n	8006f26 <sent_tcp+0x5a>
    if ((conn->pcb.tcp != NULL) && (tcp_sndbuf(conn->pcb.tcp) > TCP_SNDLOWAT) &&
 8006ede:	6863      	ldr	r3, [r4, #4]
 8006ee0:	b1d3      	cbz	r3, 8006f18 <sent_tcp+0x4c>
 8006ee2:	f8b3 2064 	ldrh.w	r2, [r3, #100]	; 0x64
 8006ee6:	f5b2 6f86 	cmp.w	r2, #1072	; 0x430
 8006eea:	d315      	bcc.n	8006f18 <sent_tcp+0x4c>
 8006eec:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8006ef0:	2b04      	cmp	r3, #4
 8006ef2:	d811      	bhi.n	8006f18 <sent_tcp+0x4c>
      netconn_clear_flags(conn, NETCONN_FLAG_CHECK_WRITESPACE);
 8006ef4:	7f23      	ldrb	r3, [r4, #28]
 8006ef6:	f023 0310 	bic.w	r3, r3, #16
 8006efa:	7723      	strb	r3, [r4, #28]
      API_EVENT(conn, NETCONN_EVT_SENDPLUS, len);
 8006efc:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006efe:	b15b      	cbz	r3, 8006f18 <sent_tcp+0x4c>
 8006f00:	462a      	mov	r2, r5
 8006f02:	2102      	movs	r1, #2
 8006f04:	4620      	mov	r0, r4
 8006f06:	4798      	blx	r3
  return ERR_OK;
 8006f08:	e006      	b.n	8006f18 <sent_tcp+0x4c>
  LWIP_ASSERT("conn != NULL", (conn != NULL));
 8006f0a:	4b09      	ldr	r3, [pc, #36]	; (8006f30 <sent_tcp+0x64>)
 8006f0c:	f240 1293 	movw	r2, #403	; 0x193
 8006f10:	4908      	ldr	r1, [pc, #32]	; (8006f34 <sent_tcp+0x68>)
 8006f12:	4809      	ldr	r0, [pc, #36]	; (8006f38 <sent_tcp+0x6c>)
 8006f14:	f008 f8ee 	bl	800f0f4 <iprintf>
}
 8006f18:	2000      	movs	r0, #0
 8006f1a:	bd38      	pop	{r3, r4, r5, pc}
      lwip_netconn_do_writemore(conn  WRITE_DELAYED);
 8006f1c:	2101      	movs	r1, #1
 8006f1e:	4620      	mov	r0, r4
 8006f20:	f7ff fd10 	bl	8006944 <lwip_netconn_do_writemore>
 8006f24:	e7db      	b.n	8006ede <sent_tcp+0x12>
      lwip_netconn_do_close_internal(conn  WRITE_DELAYED);
 8006f26:	2101      	movs	r1, #1
 8006f28:	4620      	mov	r0, r4
 8006f2a:	f7ff fe63 	bl	8006bf4 <lwip_netconn_do_close_internal>
 8006f2e:	e7d6      	b.n	8006ede <sent_tcp+0x12>
 8006f30:	08010610 	.word	0x08010610
 8006f34:	080106a8 	.word	0x080106a8
 8006f38:	080103a4 	.word	0x080103a4

08006f3c <recv_tcp>:
{
 8006f3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006f3e:	4604      	mov	r4, r0
 8006f40:	4615      	mov	r5, r2
 8006f42:	461e      	mov	r6, r3
  LWIP_ASSERT("recv_tcp must have a pcb argument", pcb != NULL);
 8006f44:	460f      	mov	r7, r1
 8006f46:	b329      	cbz	r1, 8006f94 <recv_tcp+0x58>
  LWIP_ASSERT("recv_tcp must have an argument", arg != NULL);
 8006f48:	b364      	cbz	r4, 8006fa4 <recv_tcp+0x68>
  LWIP_ASSERT("err != ERR_OK unhandled", err == ERR_OK);
 8006f4a:	2e00      	cmp	r6, #0
 8006f4c:	d151      	bne.n	8006ff2 <recv_tcp+0xb6>
  LWIP_ASSERT("recv_tcp: recv for wrong pcb!", conn->pcb.tcp == pcb);
 8006f4e:	6863      	ldr	r3, [r4, #4]
 8006f50:	42bb      	cmp	r3, r7
 8006f52:	d006      	beq.n	8006f62 <recv_tcp+0x26>
 8006f54:	4b2b      	ldr	r3, [pc, #172]	; (8007004 <recv_tcp+0xc8>)
 8006f56:	f240 1235 	movw	r2, #309	; 0x135
 8006f5a:	492b      	ldr	r1, [pc, #172]	; (8007008 <recv_tcp+0xcc>)
 8006f5c:	482b      	ldr	r0, [pc, #172]	; (800700c <recv_tcp+0xd0>)
 8006f5e:	f008 f8c9 	bl	800f0f4 <iprintf>
  if (!NETCONN_MBOX_VALID(conn, &conn->recvmbox)) {
 8006f62:	f104 0610 	add.w	r6, r4, #16
 8006f66:	4630      	mov	r0, r6
 8006f68:	f007 fe38 	bl	800ebdc <sys_mbox_valid>
 8006f6c:	2800      	cmp	r0, #0
 8006f6e:	d02e      	beq.n	8006fce <recv_tcp+0x92>
  if (p != NULL) {
 8006f70:	2d00      	cmp	r5, #0
 8006f72:	d036      	beq.n	8006fe2 <recv_tcp+0xa6>
    len = p->tot_len;
 8006f74:	892f      	ldrh	r7, [r5, #8]
  if (sys_mbox_trypost(&conn->recvmbox, msg) != ERR_OK) {
 8006f76:	4629      	mov	r1, r5
 8006f78:	4630      	mov	r0, r6
 8006f7a:	f007 fdf3 	bl	800eb64 <sys_mbox_trypost>
 8006f7e:	4605      	mov	r5, r0
 8006f80:	2800      	cmp	r0, #0
 8006f82:	d133      	bne.n	8006fec <recv_tcp+0xb0>
    API_EVENT(conn, NETCONN_EVT_RCVPLUS, len);
 8006f84:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006f86:	b11b      	cbz	r3, 8006f90 <recv_tcp+0x54>
 8006f88:	463a      	mov	r2, r7
 8006f8a:	2100      	movs	r1, #0
 8006f8c:	4620      	mov	r0, r4
 8006f8e:	4798      	blx	r3
}
 8006f90:	4628      	mov	r0, r5
 8006f92:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  LWIP_ASSERT("recv_tcp must have a pcb argument", pcb != NULL);
 8006f94:	4b1b      	ldr	r3, [pc, #108]	; (8007004 <recv_tcp+0xc8>)
 8006f96:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8006f9a:	491d      	ldr	r1, [pc, #116]	; (8007010 <recv_tcp+0xd4>)
 8006f9c:	481b      	ldr	r0, [pc, #108]	; (800700c <recv_tcp+0xd0>)
 8006f9e:	f008 f8a9 	bl	800f0f4 <iprintf>
 8006fa2:	e7d1      	b.n	8006f48 <recv_tcp+0xc>
  LWIP_ASSERT("recv_tcp must have an argument", arg != NULL);
 8006fa4:	4b17      	ldr	r3, [pc, #92]	; (8007004 <recv_tcp+0xc8>)
 8006fa6:	f240 122d 	movw	r2, #301	; 0x12d
 8006faa:	491a      	ldr	r1, [pc, #104]	; (8007014 <recv_tcp+0xd8>)
 8006fac:	4817      	ldr	r0, [pc, #92]	; (800700c <recv_tcp+0xd0>)
 8006fae:	f008 f8a1 	bl	800f0f4 <iprintf>
    return ERR_VAL;
 8006fb2:	f06f 0505 	mvn.w	r5, #5
  LWIP_ASSERT("err != ERR_OK unhandled", err == ERR_OK);
 8006fb6:	2e00      	cmp	r6, #0
 8006fb8:	d0ea      	beq.n	8006f90 <recv_tcp+0x54>
 8006fba:	4b12      	ldr	r3, [pc, #72]	; (8007004 <recv_tcp+0xc8>)
 8006fbc:	f44f 7297 	mov.w	r2, #302	; 0x12e
 8006fc0:	4915      	ldr	r1, [pc, #84]	; (8007018 <recv_tcp+0xdc>)
 8006fc2:	4812      	ldr	r0, [pc, #72]	; (800700c <recv_tcp+0xd0>)
 8006fc4:	f008 f896 	bl	800f0f4 <iprintf>
    return ERR_VAL;
 8006fc8:	f06f 0505 	mvn.w	r5, #5
 8006fcc:	e7e0      	b.n	8006f90 <recv_tcp+0x54>
    if (p != NULL) {
 8006fce:	b15d      	cbz	r5, 8006fe8 <recv_tcp+0xac>
      tcp_recved(pcb, p->tot_len);
 8006fd0:	8929      	ldrh	r1, [r5, #8]
 8006fd2:	4638      	mov	r0, r7
 8006fd4:	f002 f816 	bl	8009004 <tcp_recved>
      pbuf_free(p);
 8006fd8:	4628      	mov	r0, r5
 8006fda:	f001 fb95 	bl	8008708 <pbuf_free>
    return ERR_OK;
 8006fde:	2500      	movs	r5, #0
 8006fe0:	e7d6      	b.n	8006f90 <recv_tcp+0x54>
    msg = LWIP_CONST_CAST(void *, &netconn_closed);
 8006fe2:	4d0e      	ldr	r5, [pc, #56]	; (800701c <recv_tcp+0xe0>)
    len = 0;
 8006fe4:	2700      	movs	r7, #0
 8006fe6:	e7c6      	b.n	8006f76 <recv_tcp+0x3a>
    return ERR_OK;
 8006fe8:	2500      	movs	r5, #0
 8006fea:	e7d1      	b.n	8006f90 <recv_tcp+0x54>
    return ERR_MEM;
 8006fec:	f04f 35ff 	mov.w	r5, #4294967295
 8006ff0:	e7ce      	b.n	8006f90 <recv_tcp+0x54>
  LWIP_ASSERT("err != ERR_OK unhandled", err == ERR_OK);
 8006ff2:	4b04      	ldr	r3, [pc, #16]	; (8007004 <recv_tcp+0xc8>)
 8006ff4:	f44f 7297 	mov.w	r2, #302	; 0x12e
 8006ff8:	4907      	ldr	r1, [pc, #28]	; (8007018 <recv_tcp+0xdc>)
 8006ffa:	4804      	ldr	r0, [pc, #16]	; (800700c <recv_tcp+0xd0>)
 8006ffc:	f008 f87a 	bl	800f0f4 <iprintf>
  if (conn == NULL) {
 8007000:	e7a5      	b.n	8006f4e <recv_tcp+0x12>
 8007002:	bf00      	nop
 8007004:	08010610 	.word	0x08010610
 8007008:	080108a8 	.word	0x080108a8
 800700c:	080103a4 	.word	0x080103a4
 8007010:	08010864 	.word	0x08010864
 8007014:	08010888 	.word	0x08010888
 8007018:	080108c8 	.word	0x080108c8
 800701c:	08010a31 	.word	0x08010a31

08007020 <lwip_netconn_is_err_msg>:
{
 8007020:	b538      	push	{r3, r4, r5, lr}
 8007022:	4604      	mov	r4, r0
  LWIP_ASSERT("err != NULL", err != NULL);
 8007024:	460d      	mov	r5, r1
 8007026:	b169      	cbz	r1, 8007044 <lwip_netconn_is_err_msg+0x24>
  if (msg == &netconn_aborted) {
 8007028:	4b0e      	ldr	r3, [pc, #56]	; (8007064 <lwip_netconn_is_err_msg+0x44>)
 800702a:	429c      	cmp	r4, r3
 800702c:	d011      	beq.n	8007052 <lwip_netconn_is_err_msg+0x32>
  } else if (msg == &netconn_reset) {
 800702e:	4b0e      	ldr	r3, [pc, #56]	; (8007068 <lwip_netconn_is_err_msg+0x48>)
 8007030:	429c      	cmp	r4, r3
 8007032:	d012      	beq.n	800705a <lwip_netconn_is_err_msg+0x3a>
  } else if (msg == &netconn_closed) {
 8007034:	4b0d      	ldr	r3, [pc, #52]	; (800706c <lwip_netconn_is_err_msg+0x4c>)
 8007036:	429c      	cmp	r4, r3
    *err = ERR_CLSD;
 8007038:	bf03      	ittte	eq
 800703a:	23f1      	moveq	r3, #241	; 0xf1
 800703c:	702b      	strbeq	r3, [r5, #0]
    return 1;
 800703e:	2001      	moveq	r0, #1
  return 0;
 8007040:	2000      	movne	r0, #0
}
 8007042:	bd38      	pop	{r3, r4, r5, pc}
  LWIP_ASSERT("err != NULL", err != NULL);
 8007044:	4b0a      	ldr	r3, [pc, #40]	; (8007070 <lwip_netconn_is_err_msg+0x50>)
 8007046:	2285      	movs	r2, #133	; 0x85
 8007048:	490a      	ldr	r1, [pc, #40]	; (8007074 <lwip_netconn_is_err_msg+0x54>)
 800704a:	480b      	ldr	r0, [pc, #44]	; (8007078 <lwip_netconn_is_err_msg+0x58>)
 800704c:	f008 f852 	bl	800f0f4 <iprintf>
 8007050:	e7ea      	b.n	8007028 <lwip_netconn_is_err_msg+0x8>
    *err = ERR_ABRT;
 8007052:	23f3      	movs	r3, #243	; 0xf3
 8007054:	702b      	strb	r3, [r5, #0]
    return 1;
 8007056:	2001      	movs	r0, #1
 8007058:	e7f3      	b.n	8007042 <lwip_netconn_is_err_msg+0x22>
    *err = ERR_RST;
 800705a:	23f2      	movs	r3, #242	; 0xf2
 800705c:	702b      	strb	r3, [r5, #0]
    return 1;
 800705e:	2001      	movs	r0, #1
 8007060:	e7ef      	b.n	8007042 <lwip_netconn_is_err_msg+0x22>
 8007062:	bf00      	nop
 8007064:	08010a30 	.word	0x08010a30
 8007068:	08010a32 	.word	0x08010a32
 800706c:	08010a31 	.word	0x08010a31
 8007070:	08010610 	.word	0x08010610
 8007074:	080108e0 	.word	0x080108e0
 8007078:	080103a4 	.word	0x080103a4

0800707c <lwip_netconn_do_newconn>:
{
 800707c:	b538      	push	{r3, r4, r5, lr}
  msg->err = ERR_OK;
 800707e:	2300      	movs	r3, #0
 8007080:	7103      	strb	r3, [r0, #4]
  if (msg->conn->pcb.tcp == NULL) {
 8007082:	6805      	ldr	r5, [r0, #0]
 8007084:	686b      	ldr	r3, [r5, #4]
 8007086:	b103      	cbz	r3, 800708a <lwip_netconn_do_newconn+0xe>
}
 8007088:	bd38      	pop	{r3, r4, r5, pc}
 800708a:	4604      	mov	r4, r0
  switch (NETCONNTYPE_GROUP(msg->conn->type)) {
 800708c:	782b      	ldrb	r3, [r5, #0]
 800708e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8007092:	2b10      	cmp	r3, #16
 8007094:	d019      	beq.n	80070ca <lwip_netconn_do_newconn+0x4e>
 8007096:	2b20      	cmp	r3, #32
 8007098:	d122      	bne.n	80070e0 <lwip_netconn_do_newconn+0x64>
      msg->conn->pcb.udp = udp_new_ip_type(iptype);
 800709a:	2000      	movs	r0, #0
 800709c:	f006 f93e 	bl	800d31c <udp_new_ip_type>
 80070a0:	6068      	str	r0, [r5, #4]
      if (msg->conn->pcb.udp != NULL) {
 80070a2:	6823      	ldr	r3, [r4, #0]
 80070a4:	685a      	ldr	r2, [r3, #4]
 80070a6:	b16a      	cbz	r2, 80070c4 <lwip_netconn_do_newconn+0x48>
        if (NETCONNTYPE_ISUDPNOCHKSUM(msg->conn->type)) {
 80070a8:	781b      	ldrb	r3, [r3, #0]
 80070aa:	2b22      	cmp	r3, #34	; 0x22
          udp_setflags(msg->conn->pcb.udp, UDP_FLAGS_NOCHKSUM);
 80070ac:	bf04      	itt	eq
 80070ae:	2301      	moveq	r3, #1
 80070b0:	7413      	strbeq	r3, [r2, #16]
        udp_recv(msg->conn->pcb.udp, recv_udp, msg->conn);
 80070b2:	6822      	ldr	r2, [r4, #0]
 80070b4:	490c      	ldr	r1, [pc, #48]	; (80070e8 <lwip_netconn_do_newconn+0x6c>)
 80070b6:	6850      	ldr	r0, [r2, #4]
 80070b8:	f006 f8e6 	bl	800d288 <udp_recv>
  if (msg->conn->pcb.ip == NULL) {
 80070bc:	6823      	ldr	r3, [r4, #0]
 80070be:	685b      	ldr	r3, [r3, #4]
 80070c0:	2b00      	cmp	r3, #0
 80070c2:	d1e1      	bne.n	8007088 <lwip_netconn_do_newconn+0xc>
    msg->err = ERR_MEM;
 80070c4:	23ff      	movs	r3, #255	; 0xff
 80070c6:	7123      	strb	r3, [r4, #4]
}
 80070c8:	e7de      	b.n	8007088 <lwip_netconn_do_newconn+0xc>
      msg->conn->pcb.tcp = tcp_new_ip_type(iptype);
 80070ca:	2000      	movs	r0, #0
 80070cc:	f002 fb36 	bl	800973c <tcp_new_ip_type>
 80070d0:	6068      	str	r0, [r5, #4]
      if (msg->conn->pcb.tcp != NULL) {
 80070d2:	6820      	ldr	r0, [r4, #0]
 80070d4:	6843      	ldr	r3, [r0, #4]
 80070d6:	2b00      	cmp	r3, #0
 80070d8:	d0f4      	beq.n	80070c4 <lwip_netconn_do_newconn+0x48>
        setup_tcp(msg->conn);
 80070da:	f7ff fb61 	bl	80067a0 <setup_tcp>
 80070de:	e7ed      	b.n	80070bc <lwip_netconn_do_newconn+0x40>
      msg->err = ERR_VAL;
 80070e0:	23fa      	movs	r3, #250	; 0xfa
 80070e2:	7103      	strb	r3, [r0, #4]
      return;
 80070e4:	e7d0      	b.n	8007088 <lwip_netconn_do_newconn+0xc>
 80070e6:	bf00      	nop
 80070e8:	080066e1 	.word	0x080066e1

080070ec <netconn_alloc>:
{
 80070ec:	b570      	push	{r4, r5, r6, lr}
 80070ee:	4605      	mov	r5, r0
 80070f0:	460e      	mov	r6, r1
  conn = (struct netconn *)memp_malloc(MEMP_NETCONN);
 80070f2:	2007      	movs	r0, #7
 80070f4:	f001 f816 	bl	8008124 <memp_malloc>
  if (conn == NULL) {
 80070f8:	4604      	mov	r4, r0
 80070fa:	b378      	cbz	r0, 800715c <netconn_alloc+0x70>
  conn->pending_err = ERR_OK;
 80070fc:	2300      	movs	r3, #0
 80070fe:	7203      	strb	r3, [r0, #8]
  conn->type = t;
 8007100:	7005      	strb	r5, [r0, #0]
  conn->pcb.tcp = NULL;
 8007102:	6043      	str	r3, [r0, #4]
  switch (NETCONNTYPE_GROUP(t)) {
 8007104:	f005 05f0 	and.w	r5, r5, #240	; 0xf0
 8007108:	2d10      	cmp	r5, #16
 800710a:	d001      	beq.n	8007110 <netconn_alloc+0x24>
 800710c:	2d20      	cmp	r5, #32
 800710e:	d119      	bne.n	8007144 <netconn_alloc+0x58>
  if (sys_mbox_new(&conn->recvmbox, size) != ERR_OK) {
 8007110:	f104 0510 	add.w	r5, r4, #16
 8007114:	2106      	movs	r1, #6
 8007116:	4628      	mov	r0, r5
 8007118:	f007 fd0e 	bl	800eb38 <sys_mbox_new>
 800711c:	b9c8      	cbnz	r0, 8007152 <netconn_alloc+0x66>
  if (sys_sem_new(&conn->op_completed, 0) != ERR_OK) {
 800711e:	2100      	movs	r1, #0
 8007120:	f104 000c 	add.w	r0, r4, #12
 8007124:	f007 fd62 	bl	800ebec <sys_sem_new>
 8007128:	b9d0      	cbnz	r0, 8007160 <netconn_alloc+0x74>
  sys_mbox_set_invalid(&conn->acceptmbox);
 800712a:	f104 0014 	add.w	r0, r4, #20
 800712e:	f007 fd5a 	bl	800ebe6 <sys_mbox_set_invalid>
  conn->state        = NETCONN_NONE;
 8007132:	2300      	movs	r3, #0
 8007134:	7063      	strb	r3, [r4, #1]
  conn->socket       = -1;
 8007136:	f04f 32ff 	mov.w	r2, #4294967295
 800713a:	61a2      	str	r2, [r4, #24]
  conn->callback     = callback;
 800713c:	6266      	str	r6, [r4, #36]	; 0x24
  conn->current_msg  = NULL;
 800713e:	6223      	str	r3, [r4, #32]
  conn->flags = init_flags;
 8007140:	7723      	strb	r3, [r4, #28]
  return conn;
 8007142:	e00b      	b.n	800715c <netconn_alloc+0x70>
      LWIP_ASSERT("netconn_alloc: undefined netconn_type", 0);
 8007144:	4b08      	ldr	r3, [pc, #32]	; (8007168 <netconn_alloc+0x7c>)
 8007146:	f240 22e5 	movw	r2, #741	; 0x2e5
 800714a:	4908      	ldr	r1, [pc, #32]	; (800716c <netconn_alloc+0x80>)
 800714c:	4808      	ldr	r0, [pc, #32]	; (8007170 <netconn_alloc+0x84>)
 800714e:	f007 ffd1 	bl	800f0f4 <iprintf>
  memp_free(MEMP_NETCONN, conn);
 8007152:	4621      	mov	r1, r4
 8007154:	2007      	movs	r0, #7
 8007156:	f001 f815 	bl	8008184 <memp_free>
  return NULL;
 800715a:	2400      	movs	r4, #0
}
 800715c:	4620      	mov	r0, r4
 800715e:	bd70      	pop	{r4, r5, r6, pc}
    sys_mbox_free(&conn->recvmbox);
 8007160:	4628      	mov	r0, r5
 8007162:	f007 fcf6 	bl	800eb52 <sys_mbox_free>
    goto free_and_return;
 8007166:	e7f4      	b.n	8007152 <netconn_alloc+0x66>
 8007168:	08010610 	.word	0x08010610
 800716c:	080108ec 	.word	0x080108ec
 8007170:	080103a4 	.word	0x080103a4

08007174 <netconn_free>:
{
 8007174:	b538      	push	{r3, r4, r5, lr}
 8007176:	4604      	mov	r4, r0
  LWIP_ASSERT("PCB must be deallocated outside this function", conn->pcb.tcp == NULL);
 8007178:	6843      	ldr	r3, [r0, #4]
 800717a:	b133      	cbz	r3, 800718a <netconn_free+0x16>
 800717c:	4b16      	ldr	r3, [pc, #88]	; (80071d8 <netconn_free+0x64>)
 800717e:	f44f 7247 	mov.w	r2, #796	; 0x31c
 8007182:	4916      	ldr	r1, [pc, #88]	; (80071dc <netconn_free+0x68>)
 8007184:	4816      	ldr	r0, [pc, #88]	; (80071e0 <netconn_free+0x6c>)
 8007186:	f007 ffb5 	bl	800f0f4 <iprintf>
  LWIP_ASSERT("recvmbox must be deallocated before calling this function",
 800718a:	f104 0010 	add.w	r0, r4, #16
 800718e:	f007 fd25 	bl	800ebdc <sys_mbox_valid>
 8007192:	b988      	cbnz	r0, 80071b8 <netconn_free+0x44>
  LWIP_ASSERT("acceptmbox must be deallocated before calling this function",
 8007194:	f104 0014 	add.w	r0, r4, #20
 8007198:	f007 fd20 	bl	800ebdc <sys_mbox_valid>
 800719c:	b9a0      	cbnz	r0, 80071c8 <netconn_free+0x54>
  sys_sem_free(&conn->op_completed);
 800719e:	f104 050c 	add.w	r5, r4, #12
 80071a2:	4628      	mov	r0, r5
 80071a4:	f007 fd5b 	bl	800ec5e <sys_sem_free>
  sys_sem_set_invalid(&conn->op_completed);
 80071a8:	4628      	mov	r0, r5
 80071aa:	f007 fd62 	bl	800ec72 <sys_sem_set_invalid>
  memp_free(MEMP_NETCONN, conn);
 80071ae:	4621      	mov	r1, r4
 80071b0:	2007      	movs	r0, #7
 80071b2:	f000 ffe7 	bl	8008184 <memp_free>
}
 80071b6:	bd38      	pop	{r3, r4, r5, pc}
  LWIP_ASSERT("recvmbox must be deallocated before calling this function",
 80071b8:	4b07      	ldr	r3, [pc, #28]	; (80071d8 <netconn_free+0x64>)
 80071ba:	f240 3223 	movw	r2, #803	; 0x323
 80071be:	4909      	ldr	r1, [pc, #36]	; (80071e4 <netconn_free+0x70>)
 80071c0:	4807      	ldr	r0, [pc, #28]	; (80071e0 <netconn_free+0x6c>)
 80071c2:	f007 ff97 	bl	800f0f4 <iprintf>
 80071c6:	e7e5      	b.n	8007194 <netconn_free+0x20>
  LWIP_ASSERT("acceptmbox must be deallocated before calling this function",
 80071c8:	4b03      	ldr	r3, [pc, #12]	; (80071d8 <netconn_free+0x64>)
 80071ca:	f240 3226 	movw	r2, #806	; 0x326
 80071ce:	4906      	ldr	r1, [pc, #24]	; (80071e8 <netconn_free+0x74>)
 80071d0:	4803      	ldr	r0, [pc, #12]	; (80071e0 <netconn_free+0x6c>)
 80071d2:	f007 ff8f 	bl	800f0f4 <iprintf>
 80071d6:	e7e2      	b.n	800719e <netconn_free+0x2a>
 80071d8:	08010610 	.word	0x08010610
 80071dc:	08010914 	.word	0x08010914
 80071e0:	080103a4 	.word	0x080103a4
 80071e4:	08010944 	.word	0x08010944
 80071e8:	08010980 	.word	0x08010980

080071ec <netconn_drain>:
{
 80071ec:	b570      	push	{r4, r5, r6, lr}
 80071ee:	b082      	sub	sp, #8
 80071f0:	4604      	mov	r4, r0
  if (sys_mbox_valid(&conn->recvmbox)) {
 80071f2:	f100 0510 	add.w	r5, r0, #16
 80071f6:	4628      	mov	r0, r5
 80071f8:	f007 fcf0 	bl	800ebdc <sys_mbox_valid>
 80071fc:	b968      	cbnz	r0, 800721a <netconn_drain+0x2e>
  if (sys_mbox_valid(&conn->acceptmbox)) {
 80071fe:	3414      	adds	r4, #20
 8007200:	4620      	mov	r0, r4
 8007202:	f007 fceb 	bl	800ebdc <sys_mbox_valid>
 8007206:	2800      	cmp	r0, #0
 8007208:	d044      	beq.n	8007294 <netconn_drain+0xa8>
            newconn->pcb.tcp = NULL;
 800720a:	2600      	movs	r6, #0
 800720c:	e023      	b.n	8007256 <netconn_drain+0x6a>
          if (!lwip_netconn_is_err_msg(mem, &err)) {
 800720e:	f10d 0103 	add.w	r1, sp, #3
 8007212:	9801      	ldr	r0, [sp, #4]
 8007214:	f7ff ff04 	bl	8007020 <lwip_netconn_is_err_msg>
 8007218:	b178      	cbz	r0, 800723a <netconn_drain+0x4e>
    while (sys_mbox_tryfetch(&conn->recvmbox, &mem) != SYS_MBOX_EMPTY) {
 800721a:	a901      	add	r1, sp, #4
 800721c:	4628      	mov	r0, r5
 800721e:	f007 fcd2 	bl	800ebc6 <sys_arch_mbox_tryfetch>
 8007222:	f1b0 3fff 	cmp.w	r0, #4294967295
 8007226:	d00c      	beq.n	8007242 <netconn_drain+0x56>
        if (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP) {
 8007228:	7823      	ldrb	r3, [r4, #0]
 800722a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800722e:	2b10      	cmp	r3, #16
 8007230:	d0ed      	beq.n	800720e <netconn_drain+0x22>
          netbuf_delete((struct netbuf *)mem);
 8007232:	9801      	ldr	r0, [sp, #4]
 8007234:	f000 fac2 	bl	80077bc <netbuf_delete>
 8007238:	e7ef      	b.n	800721a <netconn_drain+0x2e>
            pbuf_free((struct pbuf *)mem);
 800723a:	9801      	ldr	r0, [sp, #4]
 800723c:	f001 fa64 	bl	8008708 <pbuf_free>
 8007240:	e7eb      	b.n	800721a <netconn_drain+0x2e>
    sys_mbox_free(&conn->recvmbox);
 8007242:	4628      	mov	r0, r5
 8007244:	f007 fc85 	bl	800eb52 <sys_mbox_free>
    sys_mbox_set_invalid(&conn->recvmbox);
 8007248:	4628      	mov	r0, r5
 800724a:	f007 fccc 	bl	800ebe6 <sys_mbox_set_invalid>
 800724e:	e7d6      	b.n	80071fe <netconn_drain+0x12>
          netconn_free(newconn);
 8007250:	4628      	mov	r0, r5
 8007252:	f7ff ff8f 	bl	8007174 <netconn_free>
    while (sys_mbox_tryfetch(&conn->acceptmbox, &mem) != SYS_MBOX_EMPTY) {
 8007256:	a901      	add	r1, sp, #4
 8007258:	4620      	mov	r0, r4
 800725a:	f007 fcb4 	bl	800ebc6 <sys_arch_mbox_tryfetch>
 800725e:	f1b0 3fff 	cmp.w	r0, #4294967295
 8007262:	d011      	beq.n	8007288 <netconn_drain+0x9c>
        if (!lwip_netconn_is_err_msg(mem, &err)) {
 8007264:	f10d 0103 	add.w	r1, sp, #3
 8007268:	9801      	ldr	r0, [sp, #4]
 800726a:	f7ff fed9 	bl	8007020 <lwip_netconn_is_err_msg>
 800726e:	2800      	cmp	r0, #0
 8007270:	d1f1      	bne.n	8007256 <netconn_drain+0x6a>
          struct netconn *newconn = (struct netconn *)mem;
 8007272:	9d01      	ldr	r5, [sp, #4]
          netconn_drain(newconn);
 8007274:	4628      	mov	r0, r5
 8007276:	f7ff ffb9 	bl	80071ec <netconn_drain>
          if (newconn->pcb.tcp != NULL) {
 800727a:	6868      	ldr	r0, [r5, #4]
 800727c:	2800      	cmp	r0, #0
 800727e:	d0e7      	beq.n	8007250 <netconn_drain+0x64>
            tcp_abort(newconn->pcb.tcp);
 8007280:	f002 f918 	bl	80094b4 <tcp_abort>
            newconn->pcb.tcp = NULL;
 8007284:	606e      	str	r6, [r5, #4]
 8007286:	e7e3      	b.n	8007250 <netconn_drain+0x64>
    sys_mbox_free(&conn->acceptmbox);
 8007288:	4620      	mov	r0, r4
 800728a:	f007 fc62 	bl	800eb52 <sys_mbox_free>
    sys_mbox_set_invalid(&conn->acceptmbox);
 800728e:	4620      	mov	r0, r4
 8007290:	f007 fca9 	bl	800ebe6 <sys_mbox_set_invalid>
}
 8007294:	b002      	add	sp, #8
 8007296:	bd70      	pop	{r4, r5, r6, pc}

08007298 <accept_function>:
{
 8007298:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if (conn == NULL) {
 800729a:	2800      	cmp	r0, #0
 800729c:	d06e      	beq.n	800737c <accept_function+0xe4>
 800729e:	460d      	mov	r5, r1
 80072a0:	4616      	mov	r6, r2
 80072a2:	4604      	mov	r4, r0
  if (!NETCONN_MBOX_VALID(conn, &conn->acceptmbox)) {
 80072a4:	f100 0714 	add.w	r7, r0, #20
 80072a8:	4638      	mov	r0, r7
 80072aa:	f007 fc97 	bl	800ebdc <sys_mbox_valid>
 80072ae:	2800      	cmp	r0, #0
 80072b0:	d067      	beq.n	8007382 <accept_function+0xea>
  if (newpcb == NULL) {
 80072b2:	b1bd      	cbz	r5, 80072e4 <accept_function+0x4c>
  LWIP_ASSERT("expect newpcb == NULL or err == ERR_OK", err == ERR_OK);
 80072b4:	bb36      	cbnz	r6, 8007304 <accept_function+0x6c>
  newconn = netconn_alloc(conn->type, conn->callback);
 80072b6:	6a61      	ldr	r1, [r4, #36]	; 0x24
 80072b8:	7820      	ldrb	r0, [r4, #0]
 80072ba:	f7ff ff17 	bl	80070ec <netconn_alloc>
  if (newconn == NULL) {
 80072be:	4606      	mov	r6, r0
 80072c0:	b340      	cbz	r0, 8007314 <accept_function+0x7c>
  newconn->pcb.tcp = newpcb;
 80072c2:	6045      	str	r5, [r0, #4]
  setup_tcp(newconn);
 80072c4:	f7ff fa6c 	bl	80067a0 <setup_tcp>
  if (sys_mbox_trypost(&conn->acceptmbox, newconn) != ERR_OK) {
 80072c8:	4631      	mov	r1, r6
 80072ca:	4638      	mov	r0, r7
 80072cc:	f007 fc4a 	bl	800eb64 <sys_mbox_trypost>
 80072d0:	4605      	mov	r5, r0
 80072d2:	bb68      	cbnz	r0, 8007330 <accept_function+0x98>
    API_EVENT(conn, NETCONN_EVT_RCVPLUS, 0);
 80072d4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80072d6:	b11b      	cbz	r3, 80072e0 <accept_function+0x48>
 80072d8:	2200      	movs	r2, #0
 80072da:	4611      	mov	r1, r2
 80072dc:	4620      	mov	r0, r4
 80072de:	4798      	blx	r3
}
 80072e0:	4628      	mov	r0, r5
 80072e2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if (sys_mbox_trypost(&conn->acceptmbox, lwip_netconn_err_to_msg(ERR_ABRT)) == ERR_OK) {
 80072e4:	492e      	ldr	r1, [pc, #184]	; (80073a0 <accept_function+0x108>)
 80072e6:	4638      	mov	r0, r7
 80072e8:	f007 fc3c 	bl	800eb64 <sys_mbox_trypost>
 80072ec:	2800      	cmp	r0, #0
 80072ee:	d14b      	bne.n	8007388 <accept_function+0xf0>
      API_EVENT(conn, NETCONN_EVT_RCVPLUS, 0);
 80072f0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80072f2:	2b00      	cmp	r3, #0
 80072f4:	d04b      	beq.n	800738e <accept_function+0xf6>
 80072f6:	2200      	movs	r2, #0
 80072f8:	4611      	mov	r1, r2
 80072fa:	4620      	mov	r0, r4
 80072fc:	4798      	blx	r3
    return ERR_VAL;
 80072fe:	f06f 0505 	mvn.w	r5, #5
 8007302:	e7ed      	b.n	80072e0 <accept_function+0x48>
  LWIP_ASSERT("expect newpcb == NULL or err == ERR_OK", err == ERR_OK);
 8007304:	4b27      	ldr	r3, [pc, #156]	; (80073a4 <accept_function+0x10c>)
 8007306:	f240 222a 	movw	r2, #554	; 0x22a
 800730a:	4927      	ldr	r1, [pc, #156]	; (80073a8 <accept_function+0x110>)
 800730c:	4827      	ldr	r0, [pc, #156]	; (80073ac <accept_function+0x114>)
 800730e:	f007 fef1 	bl	800f0f4 <iprintf>
 8007312:	e7d0      	b.n	80072b6 <accept_function+0x1e>
    if (sys_mbox_trypost(&conn->acceptmbox, lwip_netconn_err_to_msg(ERR_ABRT)) == ERR_OK) {
 8007314:	4922      	ldr	r1, [pc, #136]	; (80073a0 <accept_function+0x108>)
 8007316:	4638      	mov	r0, r7
 8007318:	f007 fc24 	bl	800eb64 <sys_mbox_trypost>
 800731c:	bbd0      	cbnz	r0, 8007394 <accept_function+0xfc>
      API_EVENT(conn, NETCONN_EVT_RCVPLUS, 0);
 800731e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007320:	b3db      	cbz	r3, 800739a <accept_function+0x102>
 8007322:	2200      	movs	r2, #0
 8007324:	4611      	mov	r1, r2
 8007326:	4620      	mov	r0, r4
 8007328:	4798      	blx	r3
    return ERR_MEM;
 800732a:	f04f 35ff 	mov.w	r5, #4294967295
 800732e:	e7d7      	b.n	80072e0 <accept_function+0x48>
    struct tcp_pcb *pcb = newconn->pcb.tcp;
 8007330:	6874      	ldr	r4, [r6, #4]
    tcp_arg(pcb, NULL);
 8007332:	2100      	movs	r1, #0
 8007334:	4620      	mov	r0, r4
 8007336:	f001 fedd 	bl	80090f4 <tcp_arg>
    tcp_recv(pcb, NULL);
 800733a:	2100      	movs	r1, #0
 800733c:	4620      	mov	r0, r4
 800733e:	f001 fedd 	bl	80090fc <tcp_recv>
    tcp_sent(pcb, NULL);
 8007342:	2100      	movs	r1, #0
 8007344:	4620      	mov	r0, r4
 8007346:	f001 fef3 	bl	8009130 <tcp_sent>
    tcp_poll(pcb, NULL, 0);
 800734a:	2200      	movs	r2, #0
 800734c:	4611      	mov	r1, r2
 800734e:	4620      	mov	r0, r4
 8007350:	f001 ff28 	bl	80091a4 <tcp_poll>
    tcp_err(pcb, NULL);
 8007354:	2100      	movs	r1, #0
 8007356:	4620      	mov	r0, r4
 8007358:	f001 ff04 	bl	8009164 <tcp_err>
    newconn->pcb.tcp = NULL;
 800735c:	2300      	movs	r3, #0
 800735e:	6073      	str	r3, [r6, #4]
    sys_mbox_free(&newconn->recvmbox);
 8007360:	f106 0410 	add.w	r4, r6, #16
 8007364:	4620      	mov	r0, r4
 8007366:	f007 fbf4 	bl	800eb52 <sys_mbox_free>
    sys_mbox_set_invalid(&newconn->recvmbox);
 800736a:	4620      	mov	r0, r4
 800736c:	f007 fc3b 	bl	800ebe6 <sys_mbox_set_invalid>
    netconn_free(newconn);
 8007370:	4630      	mov	r0, r6
 8007372:	f7ff feff 	bl	8007174 <netconn_free>
    return ERR_MEM;
 8007376:	f04f 35ff 	mov.w	r5, #4294967295
 800737a:	e7b1      	b.n	80072e0 <accept_function+0x48>
    return ERR_VAL;
 800737c:	f06f 0505 	mvn.w	r5, #5
 8007380:	e7ae      	b.n	80072e0 <accept_function+0x48>
    return ERR_VAL;
 8007382:	f06f 0505 	mvn.w	r5, #5
 8007386:	e7ab      	b.n	80072e0 <accept_function+0x48>
    return ERR_VAL;
 8007388:	f06f 0505 	mvn.w	r5, #5
 800738c:	e7a8      	b.n	80072e0 <accept_function+0x48>
 800738e:	f06f 0505 	mvn.w	r5, #5
 8007392:	e7a5      	b.n	80072e0 <accept_function+0x48>
    return ERR_MEM;
 8007394:	f04f 35ff 	mov.w	r5, #4294967295
 8007398:	e7a2      	b.n	80072e0 <accept_function+0x48>
 800739a:	f04f 35ff 	mov.w	r5, #4294967295
 800739e:	e79f      	b.n	80072e0 <accept_function+0x48>
 80073a0:	08010a30 	.word	0x08010a30
 80073a4:	08010610 	.word	0x08010610
 80073a8:	080109bc 	.word	0x080109bc
 80073ac:	080103a4 	.word	0x080103a4

080073b0 <lwip_netconn_do_delconn>:
{
 80073b0:	b538      	push	{r3, r4, r5, lr}
 80073b2:	4604      	mov	r4, r0
  enum netconn_state state = msg->conn->state;
 80073b4:	6803      	ldr	r3, [r0, #0]
 80073b6:	785d      	ldrb	r5, [r3, #1]
  LWIP_ASSERT("netconn state error", /* this only happens for TCP netconns */
 80073b8:	b1e5      	cbz	r5, 80073f4 <lwip_netconn_do_delconn+0x44>
 80073ba:	781b      	ldrb	r3, [r3, #0]
 80073bc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80073c0:	2b10      	cmp	r3, #16
 80073c2:	d10a      	bne.n	80073da <lwip_netconn_do_delconn+0x2a>
  if (((state != NETCONN_NONE) &&
 80073c4:	2d02      	cmp	r5, #2
 80073c6:	d015      	beq.n	80073f4 <lwip_netconn_do_delconn+0x44>
       (state != NETCONN_LISTEN) &&
 80073c8:	2d03      	cmp	r5, #3
 80073ca:	d00e      	beq.n	80073ea <lwip_netconn_do_delconn+0x3a>
    msg->err = ERR_INPROGRESS;
 80073cc:	23fb      	movs	r3, #251	; 0xfb
 80073ce:	7123      	strb	r3, [r4, #4]
  if (sys_sem_valid(LWIP_API_MSG_SEM(msg))) {
 80073d0:	6820      	ldr	r0, [r4, #0]
 80073d2:	300c      	adds	r0, #12
 80073d4:	f007 fc48 	bl	800ec68 <sys_sem_valid>
}
 80073d8:	bd38      	pop	{r3, r4, r5, pc}
  LWIP_ASSERT("netconn state error", /* this only happens for TCP netconns */
 80073da:	4b37      	ldr	r3, [pc, #220]	; (80074b8 <lwip_netconn_do_delconn+0x108>)
 80073dc:	f240 425e 	movw	r2, #1118	; 0x45e
 80073e0:	4936      	ldr	r1, [pc, #216]	; (80074bc <lwip_netconn_do_delconn+0x10c>)
 80073e2:	4837      	ldr	r0, [pc, #220]	; (80074c0 <lwip_netconn_do_delconn+0x110>)
 80073e4:	f007 fe86 	bl	800f0f4 <iprintf>
 80073e8:	e7ec      	b.n	80073c4 <lwip_netconn_do_delconn+0x14>
      ((state == NETCONN_CONNECT) && !IN_NONBLOCKING_CONNECT(msg->conn))) {
 80073ea:	6823      	ldr	r3, [r4, #0]
 80073ec:	7f1b      	ldrb	r3, [r3, #28]
 80073ee:	f013 0f04 	tst.w	r3, #4
 80073f2:	d0eb      	beq.n	80073cc <lwip_netconn_do_delconn+0x1c>
    msg->err = ERR_OK;
 80073f4:	2300      	movs	r3, #0
 80073f6:	7123      	strb	r3, [r4, #4]
    netconn_drain(msg->conn);
 80073f8:	6820      	ldr	r0, [r4, #0]
 80073fa:	f7ff fef7 	bl	80071ec <netconn_drain>
    if (msg->conn->pcb.tcp != NULL) {
 80073fe:	6822      	ldr	r2, [r4, #0]
 8007400:	6851      	ldr	r1, [r2, #4]
 8007402:	b179      	cbz	r1, 8007424 <lwip_netconn_do_delconn+0x74>
      switch (NETCONNTYPE_GROUP(msg->conn->type)) {
 8007404:	7813      	ldrb	r3, [r2, #0]
 8007406:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800740a:	2b10      	cmp	r3, #16
 800740c:	d019      	beq.n	8007442 <lwip_netconn_do_delconn+0x92>
 800740e:	2b20      	cmp	r3, #32
 8007410:	d105      	bne.n	800741e <lwip_netconn_do_delconn+0x6e>
          msg->conn->pcb.udp->recv_arg = NULL;
 8007412:	2300      	movs	r3, #0
 8007414:	61cb      	str	r3, [r1, #28]
          udp_remove(msg->conn->pcb.udp);
 8007416:	6823      	ldr	r3, [r4, #0]
 8007418:	6858      	ldr	r0, [r3, #4]
 800741a:	f005 ff49 	bl	800d2b0 <udp_remove>
      msg->conn->pcb.tcp = NULL;
 800741e:	6823      	ldr	r3, [r4, #0]
 8007420:	2200      	movs	r2, #0
 8007422:	605a      	str	r2, [r3, #4]
    API_EVENT(msg->conn, NETCONN_EVT_RCVPLUS, 0);
 8007424:	6820      	ldr	r0, [r4, #0]
 8007426:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8007428:	2b00      	cmp	r3, #0
 800742a:	d0d1      	beq.n	80073d0 <lwip_netconn_do_delconn+0x20>
 800742c:	2200      	movs	r2, #0
 800742e:	4611      	mov	r1, r2
 8007430:	4798      	blx	r3
    API_EVENT(msg->conn, NETCONN_EVT_SENDPLUS, 0);
 8007432:	6820      	ldr	r0, [r4, #0]
 8007434:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8007436:	2b00      	cmp	r3, #0
 8007438:	d0ca      	beq.n	80073d0 <lwip_netconn_do_delconn+0x20>
 800743a:	2200      	movs	r2, #0
 800743c:	2102      	movs	r1, #2
 800743e:	4798      	blx	r3
 8007440:	e7c6      	b.n	80073d0 <lwip_netconn_do_delconn+0x20>
          LWIP_ASSERT("already writing or closing", msg->conn->current_msg == NULL);
 8007442:	6a13      	ldr	r3, [r2, #32]
 8007444:	b133      	cbz	r3, 8007454 <lwip_netconn_do_delconn+0xa4>
 8007446:	4b1c      	ldr	r3, [pc, #112]	; (80074b8 <lwip_netconn_do_delconn+0x108>)
 8007448:	f240 4294 	movw	r2, #1172	; 0x494
 800744c:	491d      	ldr	r1, [pc, #116]	; (80074c4 <lwip_netconn_do_delconn+0x114>)
 800744e:	481c      	ldr	r0, [pc, #112]	; (80074c0 <lwip_netconn_do_delconn+0x110>)
 8007450:	f007 fe50 	bl	800f0f4 <iprintf>
          msg->conn->state = NETCONN_CLOSE;
 8007454:	6823      	ldr	r3, [r4, #0]
 8007456:	2204      	movs	r2, #4
 8007458:	705a      	strb	r2, [r3, #1]
          msg->msg.sd.shut = NETCONN_SHUT_RDWR;
 800745a:	2303      	movs	r3, #3
 800745c:	7223      	strb	r3, [r4, #8]
          msg->conn->current_msg = msg;
 800745e:	6823      	ldr	r3, [r4, #0]
 8007460:	621c      	str	r4, [r3, #32]
          if (lwip_netconn_do_close_internal(msg->conn, 0) != ERR_OK) {
 8007462:	2100      	movs	r1, #0
 8007464:	6820      	ldr	r0, [r4, #0]
 8007466:	f7ff fbc5 	bl	8006bf4 <lwip_netconn_do_close_internal>
 800746a:	2800      	cmp	r0, #0
 800746c:	d0b4      	beq.n	80073d8 <lwip_netconn_do_delconn+0x28>
            LWIP_ASSERT("state!", msg->conn->state == NETCONN_CLOSE);
 800746e:	6823      	ldr	r3, [r4, #0]
 8007470:	785b      	ldrb	r3, [r3, #1]
 8007472:	2b04      	cmp	r3, #4
 8007474:	d117      	bne.n	80074a6 <lwip_netconn_do_delconn+0xf6>
            UNLOCK_TCPIP_CORE();
 8007476:	4d14      	ldr	r5, [pc, #80]	; (80074c8 <lwip_netconn_do_delconn+0x118>)
 8007478:	4628      	mov	r0, r5
 800747a:	f007 fc19 	bl	800ecb0 <sys_mutex_unlock>
            sys_arch_sem_wait(LWIP_API_MSG_SEM(msg), 0);
 800747e:	6820      	ldr	r0, [r4, #0]
 8007480:	2100      	movs	r1, #0
 8007482:	300c      	adds	r0, #12
 8007484:	f007 fbc7 	bl	800ec16 <sys_arch_sem_wait>
            LOCK_TCPIP_CORE();
 8007488:	4628      	mov	r0, r5
 800748a:	f007 fc0a 	bl	800eca2 <sys_mutex_lock>
            LWIP_ASSERT("state!", msg->conn->state == NETCONN_NONE);
 800748e:	6823      	ldr	r3, [r4, #0]
 8007490:	785b      	ldrb	r3, [r3, #1]
 8007492:	2b00      	cmp	r3, #0
 8007494:	d0a0      	beq.n	80073d8 <lwip_netconn_do_delconn+0x28>
 8007496:	4b08      	ldr	r3, [pc, #32]	; (80074b8 <lwip_netconn_do_delconn+0x108>)
 8007498:	f240 429e 	movw	r2, #1182	; 0x49e
 800749c:	490b      	ldr	r1, [pc, #44]	; (80074cc <lwip_netconn_do_delconn+0x11c>)
 800749e:	4808      	ldr	r0, [pc, #32]	; (80074c0 <lwip_netconn_do_delconn+0x110>)
 80074a0:	f007 fe28 	bl	800f0f4 <iprintf>
 80074a4:	e798      	b.n	80073d8 <lwip_netconn_do_delconn+0x28>
            LWIP_ASSERT("state!", msg->conn->state == NETCONN_CLOSE);
 80074a6:	4b04      	ldr	r3, [pc, #16]	; (80074b8 <lwip_netconn_do_delconn+0x108>)
 80074a8:	f240 429a 	movw	r2, #1178	; 0x49a
 80074ac:	4907      	ldr	r1, [pc, #28]	; (80074cc <lwip_netconn_do_delconn+0x11c>)
 80074ae:	4804      	ldr	r0, [pc, #16]	; (80074c0 <lwip_netconn_do_delconn+0x110>)
 80074b0:	f007 fe20 	bl	800f0f4 <iprintf>
 80074b4:	e7df      	b.n	8007476 <lwip_netconn_do_delconn+0xc6>
 80074b6:	bf00      	nop
 80074b8:	08010610 	.word	0x08010610
 80074bc:	080109e4 	.word	0x080109e4
 80074c0:	080103a4 	.word	0x080103a4
 80074c4:	080109f8 	.word	0x080109f8
 80074c8:	2000afe0 	.word	0x2000afe0
 80074cc:	08010a14 	.word	0x08010a14

080074d0 <lwip_netconn_do_bind>:
{
 80074d0:	b510      	push	{r4, lr}
 80074d2:	4604      	mov	r4, r0
  if (msg->conn->pcb.tcp != NULL) {
 80074d4:	6803      	ldr	r3, [r0, #0]
 80074d6:	6858      	ldr	r0, [r3, #4]
 80074d8:	b180      	cbz	r0, 80074fc <lwip_netconn_do_bind+0x2c>
    switch (NETCONNTYPE_GROUP(msg->conn->type)) {
 80074da:	781b      	ldrb	r3, [r3, #0]
 80074dc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80074e0:	2b10      	cmp	r3, #16
 80074e2:	d006      	beq.n	80074f2 <lwip_netconn_do_bind+0x22>
 80074e4:	2b20      	cmp	r3, #32
 80074e6:	d10c      	bne.n	8007502 <lwip_netconn_do_bind+0x32>
        err = udp_bind(msg->conn->pcb.udp, API_EXPR_REF(msg->msg.bc.ipaddr), msg->msg.bc.port);
 80074e8:	89a2      	ldrh	r2, [r4, #12]
 80074ea:	68a1      	ldr	r1, [r4, #8]
 80074ec:	f005 fe46 	bl	800d17c <udp_bind>
        break;
 80074f0:	e009      	b.n	8007506 <lwip_netconn_do_bind+0x36>
        err = tcp_bind(msg->conn->pcb.tcp, API_EXPR_REF(msg->msg.bc.ipaddr), msg->msg.bc.port);
 80074f2:	89a2      	ldrh	r2, [r4, #12]
 80074f4:	68a1      	ldr	r1, [r4, #8]
 80074f6:	f001 fc7d 	bl	8008df4 <tcp_bind>
        break;
 80074fa:	e004      	b.n	8007506 <lwip_netconn_do_bind+0x36>
    err = ERR_VAL;
 80074fc:	f06f 0005 	mvn.w	r0, #5
 8007500:	e001      	b.n	8007506 <lwip_netconn_do_bind+0x36>
    switch (NETCONNTYPE_GROUP(msg->conn->type)) {
 8007502:	f06f 0005 	mvn.w	r0, #5
  msg->err = err;
 8007506:	7120      	strb	r0, [r4, #4]
}
 8007508:	bd10      	pop	{r4, pc}
	...

0800750c <lwip_netconn_do_listen>:
{
 800750c:	b530      	push	{r4, r5, lr}
 800750e:	b083      	sub	sp, #12
 8007510:	4604      	mov	r4, r0
  if (msg->conn->pcb.tcp != NULL) {
 8007512:	6803      	ldr	r3, [r0, #0]
 8007514:	6858      	ldr	r0, [r3, #4]
 8007516:	2800      	cmp	r0, #0
 8007518:	d05b      	beq.n	80075d2 <lwip_netconn_do_listen+0xc6>
    if (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) {
 800751a:	781a      	ldrb	r2, [r3, #0]
 800751c:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
 8007520:	2a10      	cmp	r2, #16
 8007522:	d007      	beq.n	8007534 <lwip_netconn_do_listen+0x28>
      err = ERR_ARG;
 8007524:	23f0      	movs	r3, #240	; 0xf0
 8007526:	f88d 3007 	strb.w	r3, [sp, #7]
  msg->err = err;
 800752a:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800752e:	7123      	strb	r3, [r4, #4]
}
 8007530:	b003      	add	sp, #12
 8007532:	bd30      	pop	{r4, r5, pc}
      if (msg->conn->state == NETCONN_NONE) {
 8007534:	785b      	ldrb	r3, [r3, #1]
 8007536:	2b00      	cmp	r3, #0
 8007538:	d144      	bne.n	80075c4 <lwip_netconn_do_listen+0xb8>
        if (msg->conn->pcb.tcp->state != CLOSED) {
 800753a:	7d03      	ldrb	r3, [r0, #20]
 800753c:	b11b      	cbz	r3, 8007546 <lwip_netconn_do_listen+0x3a>
          err = ERR_VAL;
 800753e:	23fa      	movs	r3, #250	; 0xfa
 8007540:	f88d 3007 	strb.w	r3, [sp, #7]
 8007544:	e7f1      	b.n	800752a <lwip_netconn_do_listen+0x1e>
          lpcb = tcp_listen_with_backlog_and_err(msg->conn->pcb.tcp, backlog, &err);
 8007546:	f10d 0207 	add.w	r2, sp, #7
 800754a:	21ff      	movs	r1, #255	; 0xff
 800754c:	f001 fcb6 	bl	8008ebc <tcp_listen_with_backlog_and_err>
          if (lpcb == NULL) {
 8007550:	4605      	mov	r5, r0
 8007552:	2800      	cmp	r0, #0
 8007554:	d0e9      	beq.n	800752a <lwip_netconn_do_listen+0x1e>
            if (sys_mbox_valid(&msg->conn->recvmbox)) {
 8007556:	6820      	ldr	r0, [r4, #0]
 8007558:	3010      	adds	r0, #16
 800755a:	f007 fb3f 	bl	800ebdc <sys_mbox_valid>
 800755e:	b9c8      	cbnz	r0, 8007594 <lwip_netconn_do_listen+0x88>
            err = ERR_OK;
 8007560:	2300      	movs	r3, #0
 8007562:	f88d 3007 	strb.w	r3, [sp, #7]
            if (!sys_mbox_valid(&msg->conn->acceptmbox)) {
 8007566:	6820      	ldr	r0, [r4, #0]
 8007568:	3014      	adds	r0, #20
 800756a:	f007 fb37 	bl	800ebdc <sys_mbox_valid>
 800756e:	b1d0      	cbz	r0, 80075a6 <lwip_netconn_do_listen+0x9a>
            if (err == ERR_OK) {
 8007570:	f99d 3007 	ldrsb.w	r3, [sp, #7]
 8007574:	b9fb      	cbnz	r3, 80075b6 <lwip_netconn_do_listen+0xaa>
              msg->conn->state = NETCONN_LISTEN;
 8007576:	6823      	ldr	r3, [r4, #0]
 8007578:	2202      	movs	r2, #2
 800757a:	705a      	strb	r2, [r3, #1]
              msg->conn->pcb.tcp = lpcb;
 800757c:	6823      	ldr	r3, [r4, #0]
 800757e:	605d      	str	r5, [r3, #4]
              tcp_arg(msg->conn->pcb.tcp, msg->conn);
 8007580:	6821      	ldr	r1, [r4, #0]
 8007582:	6848      	ldr	r0, [r1, #4]
 8007584:	f001 fdb6 	bl	80090f4 <tcp_arg>
              tcp_accept(msg->conn->pcb.tcp, accept_function);
 8007588:	6823      	ldr	r3, [r4, #0]
 800758a:	4914      	ldr	r1, [pc, #80]	; (80075dc <lwip_netconn_do_listen+0xd0>)
 800758c:	6858      	ldr	r0, [r3, #4]
 800758e:	f001 fe03 	bl	8009198 <tcp_accept>
 8007592:	e7ca      	b.n	800752a <lwip_netconn_do_listen+0x1e>
              sys_mbox_free(&msg->conn->recvmbox);
 8007594:	6820      	ldr	r0, [r4, #0]
 8007596:	3010      	adds	r0, #16
 8007598:	f007 fadb 	bl	800eb52 <sys_mbox_free>
              sys_mbox_set_invalid(&msg->conn->recvmbox);
 800759c:	6820      	ldr	r0, [r4, #0]
 800759e:	3010      	adds	r0, #16
 80075a0:	f007 fb21 	bl	800ebe6 <sys_mbox_set_invalid>
 80075a4:	e7dc      	b.n	8007560 <lwip_netconn_do_listen+0x54>
              err = sys_mbox_new(&msg->conn->acceptmbox, DEFAULT_ACCEPTMBOX_SIZE);
 80075a6:	6820      	ldr	r0, [r4, #0]
 80075a8:	2106      	movs	r1, #6
 80075aa:	3014      	adds	r0, #20
 80075ac:	f007 fac4 	bl	800eb38 <sys_mbox_new>
 80075b0:	f88d 0007 	strb.w	r0, [sp, #7]
 80075b4:	e7dc      	b.n	8007570 <lwip_netconn_do_listen+0x64>
              tcp_close(lpcb);
 80075b6:	4628      	mov	r0, r5
 80075b8:	f002 f98a 	bl	80098d0 <tcp_close>
              msg->conn->pcb.tcp = NULL;
 80075bc:	6823      	ldr	r3, [r4, #0]
 80075be:	2200      	movs	r2, #0
 80075c0:	605a      	str	r2, [r3, #4]
 80075c2:	e7b2      	b.n	800752a <lwip_netconn_do_listen+0x1e>
      } else if (msg->conn->state == NETCONN_LISTEN) {
 80075c4:	2b02      	cmp	r3, #2
        err = ERR_OK;
 80075c6:	bf0c      	ite	eq
 80075c8:	2300      	moveq	r3, #0
        err = ERR_CONN;
 80075ca:	23f5      	movne	r3, #245	; 0xf5
 80075cc:	f88d 3007 	strb.w	r3, [sp, #7]
 80075d0:	e7ab      	b.n	800752a <lwip_netconn_do_listen+0x1e>
    err = ERR_CONN;
 80075d2:	23f5      	movs	r3, #245	; 0xf5
 80075d4:	f88d 3007 	strb.w	r3, [sp, #7]
 80075d8:	e7a7      	b.n	800752a <lwip_netconn_do_listen+0x1e>
 80075da:	bf00      	nop
 80075dc:	08007299 	.word	0x08007299

080075e0 <lwip_netconn_do_recv>:
{
 80075e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  msg->err = ERR_OK;
 80075e2:	2300      	movs	r3, #0
 80075e4:	7103      	strb	r3, [r0, #4]
  if (msg->conn->pcb.tcp != NULL) {
 80075e6:	6803      	ldr	r3, [r0, #0]
 80075e8:	685a      	ldr	r2, [r3, #4]
 80075ea:	b12a      	cbz	r2, 80075f8 <lwip_netconn_do_recv+0x18>
 80075ec:	4606      	mov	r6, r0
    if (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) {
 80075ee:	781b      	ldrb	r3, [r3, #0]
 80075f0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80075f4:	2b10      	cmp	r3, #16
 80075f6:	d000      	beq.n	80075fa <lwip_netconn_do_recv+0x1a>
}
 80075f8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      size_t remaining = msg->msg.r.len;
 80075fa:	6884      	ldr	r4, [r0, #8]
 80075fc:	f64f 77ff 	movw	r7, #65535	; 0xffff
        u16_t recved = (u16_t)((remaining > 0xffff) ? 0xffff : remaining);
 8007600:	4625      	mov	r5, r4
 8007602:	42bc      	cmp	r4, r7
 8007604:	bf28      	it	cs
 8007606:	463d      	movcs	r5, r7
        tcp_recved(msg->conn->pcb.tcp, recved);
 8007608:	6833      	ldr	r3, [r6, #0]
 800760a:	b2a9      	uxth	r1, r5
 800760c:	6858      	ldr	r0, [r3, #4]
 800760e:	f001 fcf9 	bl	8009004 <tcp_recved>
      } while (remaining != 0);
 8007612:	1b64      	subs	r4, r4, r5
 8007614:	d1f4      	bne.n	8007600 <lwip_netconn_do_recv+0x20>
 8007616:	e7ef      	b.n	80075f8 <lwip_netconn_do_recv+0x18>

08007618 <lwip_netconn_do_write>:
 *
 * @param m the api_msg pointing to the connection
 */
void
lwip_netconn_do_write(void *m)
{
 8007618:	b538      	push	{r3, r4, r5, lr}
 800761a:	4604      	mov	r4, r0
  struct api_msg *msg = (struct api_msg *)m;

  err_t err = netconn_err(msg->conn);
 800761c:	6800      	ldr	r0, [r0, #0]
 800761e:	f7fe feb3 	bl	8006388 <netconn_err>
  if (err == ERR_OK) {
 8007622:	4603      	mov	r3, r0
 8007624:	b938      	cbnz	r0, 8007636 <lwip_netconn_do_write+0x1e>
    if (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) {
 8007626:	6822      	ldr	r2, [r4, #0]
 8007628:	7813      	ldrb	r3, [r2, #0]
 800762a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800762e:	2b10      	cmp	r3, #16
 8007630:	d003      	beq.n	800763a <lwip_netconn_do_write+0x22>
#else /* LWIP_TCP */
      err = ERR_VAL;
#endif /* LWIP_TCP */
#if (LWIP_UDP || LWIP_RAW)
    } else {
      err = ERR_VAL;
 8007632:	f06f 0305 	mvn.w	r3, #5
#endif /* (LWIP_UDP || LWIP_RAW) */
    }
  }
  msg->err = err;
 8007636:	7123      	strb	r3, [r4, #4]
  TCPIP_APIMSG_ACK(msg);
}
 8007638:	bd38      	pop	{r3, r4, r5, pc}
      if (msg->conn->state != NETCONN_NONE) {
 800763a:	7853      	ldrb	r3, [r2, #1]
 800763c:	2b00      	cmp	r3, #0
 800763e:	d144      	bne.n	80076ca <lwip_netconn_do_write+0xb2>
      } else if (msg->conn->pcb.tcp != NULL) {
 8007640:	6853      	ldr	r3, [r2, #4]
 8007642:	2b00      	cmp	r3, #0
 8007644:	d044      	beq.n	80076d0 <lwip_netconn_do_write+0xb8>
        msg->conn->state = NETCONN_WRITE;
 8007646:	2301      	movs	r3, #1
 8007648:	7053      	strb	r3, [r2, #1]
        LWIP_ASSERT("already writing or closing", msg->conn->current_msg == NULL);
 800764a:	6823      	ldr	r3, [r4, #0]
 800764c:	6a1b      	ldr	r3, [r3, #32]
 800764e:	b133      	cbz	r3, 800765e <lwip_netconn_do_write+0x46>
 8007650:	4b21      	ldr	r3, [pc, #132]	; (80076d8 <lwip_netconn_do_write+0xc0>)
 8007652:	f240 7223 	movw	r2, #1827	; 0x723
 8007656:	4921      	ldr	r1, [pc, #132]	; (80076dc <lwip_netconn_do_write+0xc4>)
 8007658:	4821      	ldr	r0, [pc, #132]	; (80076e0 <lwip_netconn_do_write+0xc8>)
 800765a:	f007 fd4b 	bl	800f0f4 <iprintf>
        LWIP_ASSERT("msg->msg.w.len != 0", msg->msg.w.len != 0);
 800765e:	6963      	ldr	r3, [r4, #20]
 8007660:	b31b      	cbz	r3, 80076aa <lwip_netconn_do_write+0x92>
        msg->conn->current_msg = msg;
 8007662:	6823      	ldr	r3, [r4, #0]
 8007664:	621c      	str	r4, [r3, #32]
        if (lwip_netconn_do_writemore(msg->conn, 0) != ERR_OK) {
 8007666:	2100      	movs	r1, #0
 8007668:	6820      	ldr	r0, [r4, #0]
 800766a:	f7ff f96b 	bl	8006944 <lwip_netconn_do_writemore>
 800766e:	2800      	cmp	r0, #0
 8007670:	d0e2      	beq.n	8007638 <lwip_netconn_do_write+0x20>
          LWIP_ASSERT("state!", msg->conn->state == NETCONN_WRITE);
 8007672:	6823      	ldr	r3, [r4, #0]
 8007674:	785b      	ldrb	r3, [r3, #1]
 8007676:	2b01      	cmp	r3, #1
 8007678:	d11f      	bne.n	80076ba <lwip_netconn_do_write+0xa2>
          UNLOCK_TCPIP_CORE();
 800767a:	4d1a      	ldr	r5, [pc, #104]	; (80076e4 <lwip_netconn_do_write+0xcc>)
 800767c:	4628      	mov	r0, r5
 800767e:	f007 fb17 	bl	800ecb0 <sys_mutex_unlock>
          sys_arch_sem_wait(LWIP_API_MSG_SEM(msg), 0);
 8007682:	6820      	ldr	r0, [r4, #0]
 8007684:	2100      	movs	r1, #0
 8007686:	300c      	adds	r0, #12
 8007688:	f007 fac5 	bl	800ec16 <sys_arch_sem_wait>
          LOCK_TCPIP_CORE();
 800768c:	4628      	mov	r0, r5
 800768e:	f007 fb08 	bl	800eca2 <sys_mutex_lock>
          LWIP_ASSERT("state!", msg->conn->state != NETCONN_WRITE);
 8007692:	6823      	ldr	r3, [r4, #0]
 8007694:	785b      	ldrb	r3, [r3, #1]
 8007696:	2b01      	cmp	r3, #1
 8007698:	d1ce      	bne.n	8007638 <lwip_netconn_do_write+0x20>
 800769a:	4b0f      	ldr	r3, [pc, #60]	; (80076d8 <lwip_netconn_do_write+0xc0>)
 800769c:	f240 722c 	movw	r2, #1836	; 0x72c
 80076a0:	4911      	ldr	r1, [pc, #68]	; (80076e8 <lwip_netconn_do_write+0xd0>)
 80076a2:	480f      	ldr	r0, [pc, #60]	; (80076e0 <lwip_netconn_do_write+0xc8>)
 80076a4:	f007 fd26 	bl	800f0f4 <iprintf>
 80076a8:	e7c6      	b.n	8007638 <lwip_netconn_do_write+0x20>
        LWIP_ASSERT("msg->msg.w.len != 0", msg->msg.w.len != 0);
 80076aa:	4b0b      	ldr	r3, [pc, #44]	; (80076d8 <lwip_netconn_do_write+0xc0>)
 80076ac:	f240 7224 	movw	r2, #1828	; 0x724
 80076b0:	490e      	ldr	r1, [pc, #56]	; (80076ec <lwip_netconn_do_write+0xd4>)
 80076b2:	480b      	ldr	r0, [pc, #44]	; (80076e0 <lwip_netconn_do_write+0xc8>)
 80076b4:	f007 fd1e 	bl	800f0f4 <iprintf>
 80076b8:	e7d3      	b.n	8007662 <lwip_netconn_do_write+0x4a>
          LWIP_ASSERT("state!", msg->conn->state == NETCONN_WRITE);
 80076ba:	4b07      	ldr	r3, [pc, #28]	; (80076d8 <lwip_netconn_do_write+0xc0>)
 80076bc:	f44f 62e5 	mov.w	r2, #1832	; 0x728
 80076c0:	4909      	ldr	r1, [pc, #36]	; (80076e8 <lwip_netconn_do_write+0xd0>)
 80076c2:	4807      	ldr	r0, [pc, #28]	; (80076e0 <lwip_netconn_do_write+0xc8>)
 80076c4:	f007 fd16 	bl	800f0f4 <iprintf>
 80076c8:	e7d7      	b.n	800767a <lwip_netconn_do_write+0x62>
        err = ERR_INPROGRESS;
 80076ca:	f06f 0304 	mvn.w	r3, #4
 80076ce:	e7b2      	b.n	8007636 <lwip_netconn_do_write+0x1e>
        err = ERR_CONN;
 80076d0:	f06f 030a 	mvn.w	r3, #10
 80076d4:	e7af      	b.n	8007636 <lwip_netconn_do_write+0x1e>
 80076d6:	bf00      	nop
 80076d8:	08010610 	.word	0x08010610
 80076dc:	080109f8 	.word	0x080109f8
 80076e0:	080103a4 	.word	0x080103a4
 80076e4:	2000afe0 	.word	0x2000afe0
 80076e8:	08010a14 	.word	0x08010a14
 80076ec:	08010a1c 	.word	0x08010a1c

080076f0 <lwip_netconn_do_close>:
 *
 * @param m the api_msg pointing to the connection
 */
void
lwip_netconn_do_close(void *m)
{
 80076f0:	b538      	push	{r3, r4, r5, lr}
 80076f2:	4604      	mov	r4, r0
  struct api_msg *msg = (struct api_msg *)m;

#if LWIP_TCP
  enum netconn_state state = msg->conn->state;
 80076f4:	6800      	ldr	r0, [r0, #0]
  /* First check if this is a TCP netconn and if it is in a correct state
      (LISTEN doesn't support half shutdown) */
  if ((msg->conn->pcb.tcp != NULL) &&
 80076f6:	6843      	ldr	r3, [r0, #4]
 80076f8:	b123      	cbz	r3, 8007704 <lwip_netconn_do_close+0x14>
 80076fa:	7803      	ldrb	r3, [r0, #0]
 80076fc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8007700:	2b10      	cmp	r3, #16
 8007702:	d002      	beq.n	800770a <lwip_netconn_do_close+0x1a>
      return;
    }
  } else
#endif /* LWIP_TCP */
  {
    msg->err = ERR_CONN;
 8007704:	23f5      	movs	r3, #245	; 0xf5
 8007706:	7123      	strb	r3, [r4, #4]
  }
  TCPIP_APIMSG_ACK(msg);
}
 8007708:	bd38      	pop	{r3, r4, r5, pc}
  enum netconn_state state = msg->conn->state;
 800770a:	7843      	ldrb	r3, [r0, #1]
      ((msg->msg.sd.shut == NETCONN_SHUT_RDWR) || (state != NETCONN_LISTEN))) {
 800770c:	7a22      	ldrb	r2, [r4, #8]
      (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) &&
 800770e:	2a03      	cmp	r2, #3
 8007710:	d001      	beq.n	8007716 <lwip_netconn_do_close+0x26>
      ((msg->msg.sd.shut == NETCONN_SHUT_RDWR) || (state != NETCONN_LISTEN))) {
 8007712:	2b02      	cmp	r3, #2
 8007714:	d0f6      	beq.n	8007704 <lwip_netconn_do_close+0x14>
    if (state == NETCONN_CONNECT) {
 8007716:	2b03      	cmp	r3, #3
 8007718:	d004      	beq.n	8007724 <lwip_netconn_do_close+0x34>
    } else if (state == NETCONN_WRITE) {
 800771a:	2b01      	cmp	r3, #1
 800771c:	d105      	bne.n	800772a <lwip_netconn_do_close+0x3a>
      msg->err = ERR_INPROGRESS;
 800771e:	23fb      	movs	r3, #251	; 0xfb
 8007720:	7123      	strb	r3, [r4, #4]
 8007722:	e7f1      	b.n	8007708 <lwip_netconn_do_close+0x18>
      msg->err = ERR_CONN;
 8007724:	23f5      	movs	r3, #245	; 0xf5
 8007726:	7123      	strb	r3, [r4, #4]
 8007728:	e7ee      	b.n	8007708 <lwip_netconn_do_close+0x18>
      if (msg->msg.sd.shut & NETCONN_SHUT_RD) {
 800772a:	f012 0f01 	tst.w	r2, #1
 800772e:	d130      	bne.n	8007792 <lwip_netconn_do_close+0xa2>
      LWIP_ASSERT("already writing or closing", msg->conn->current_msg == NULL);
 8007730:	6823      	ldr	r3, [r4, #0]
 8007732:	6a1b      	ldr	r3, [r3, #32]
 8007734:	b133      	cbz	r3, 8007744 <lwip_netconn_do_close+0x54>
 8007736:	4b1c      	ldr	r3, [pc, #112]	; (80077a8 <lwip_netconn_do_close+0xb8>)
 8007738:	f240 72bd 	movw	r2, #1981	; 0x7bd
 800773c:	491b      	ldr	r1, [pc, #108]	; (80077ac <lwip_netconn_do_close+0xbc>)
 800773e:	481c      	ldr	r0, [pc, #112]	; (80077b0 <lwip_netconn_do_close+0xc0>)
 8007740:	f007 fcd8 	bl	800f0f4 <iprintf>
      msg->conn->state = NETCONN_CLOSE;
 8007744:	6823      	ldr	r3, [r4, #0]
 8007746:	2204      	movs	r2, #4
 8007748:	705a      	strb	r2, [r3, #1]
      msg->conn->current_msg = msg;
 800774a:	6823      	ldr	r3, [r4, #0]
 800774c:	621c      	str	r4, [r3, #32]
      if (lwip_netconn_do_close_internal(msg->conn, 0) != ERR_OK) {
 800774e:	2100      	movs	r1, #0
 8007750:	6820      	ldr	r0, [r4, #0]
 8007752:	f7ff fa4f 	bl	8006bf4 <lwip_netconn_do_close_internal>
 8007756:	2800      	cmp	r0, #0
 8007758:	d0d6      	beq.n	8007708 <lwip_netconn_do_close+0x18>
        LWIP_ASSERT("state!", msg->conn->state == NETCONN_CLOSE);
 800775a:	6823      	ldr	r3, [r4, #0]
 800775c:	785b      	ldrb	r3, [r3, #1]
 800775e:	2b04      	cmp	r3, #4
 8007760:	d11a      	bne.n	8007798 <lwip_netconn_do_close+0xa8>
        UNLOCK_TCPIP_CORE();
 8007762:	4d14      	ldr	r5, [pc, #80]	; (80077b4 <lwip_netconn_do_close+0xc4>)
 8007764:	4628      	mov	r0, r5
 8007766:	f007 faa3 	bl	800ecb0 <sys_mutex_unlock>
        sys_arch_sem_wait(LWIP_API_MSG_SEM(msg), 0);
 800776a:	6820      	ldr	r0, [r4, #0]
 800776c:	2100      	movs	r1, #0
 800776e:	300c      	adds	r0, #12
 8007770:	f007 fa51 	bl	800ec16 <sys_arch_sem_wait>
        LOCK_TCPIP_CORE();
 8007774:	4628      	mov	r0, r5
 8007776:	f007 fa94 	bl	800eca2 <sys_mutex_lock>
        LWIP_ASSERT("state!", msg->conn->state == NETCONN_NONE);
 800777a:	6823      	ldr	r3, [r4, #0]
 800777c:	785b      	ldrb	r3, [r3, #1]
 800777e:	2b00      	cmp	r3, #0
 8007780:	d0c2      	beq.n	8007708 <lwip_netconn_do_close+0x18>
 8007782:	4b09      	ldr	r3, [pc, #36]	; (80077a8 <lwip_netconn_do_close+0xb8>)
 8007784:	f240 72c6 	movw	r2, #1990	; 0x7c6
 8007788:	490b      	ldr	r1, [pc, #44]	; (80077b8 <lwip_netconn_do_close+0xc8>)
 800778a:	4809      	ldr	r0, [pc, #36]	; (80077b0 <lwip_netconn_do_close+0xc0>)
 800778c:	f007 fcb2 	bl	800f0f4 <iprintf>
 8007790:	e7ba      	b.n	8007708 <lwip_netconn_do_close+0x18>
        netconn_drain(msg->conn);
 8007792:	f7ff fd2b 	bl	80071ec <netconn_drain>
 8007796:	e7cb      	b.n	8007730 <lwip_netconn_do_close+0x40>
        LWIP_ASSERT("state!", msg->conn->state == NETCONN_CLOSE);
 8007798:	4b03      	ldr	r3, [pc, #12]	; (80077a8 <lwip_netconn_do_close+0xb8>)
 800779a:	f240 72c2 	movw	r2, #1986	; 0x7c2
 800779e:	4906      	ldr	r1, [pc, #24]	; (80077b8 <lwip_netconn_do_close+0xc8>)
 80077a0:	4803      	ldr	r0, [pc, #12]	; (80077b0 <lwip_netconn_do_close+0xc0>)
 80077a2:	f007 fca7 	bl	800f0f4 <iprintf>
 80077a6:	e7dc      	b.n	8007762 <lwip_netconn_do_close+0x72>
 80077a8:	08010610 	.word	0x08010610
 80077ac:	080109f8 	.word	0x080109f8
 80077b0:	080103a4 	.word	0x080103a4
 80077b4:	2000afe0 	.word	0x2000afe0
 80077b8:	08010a14 	.word	0x08010a14

080077bc <netbuf_delete>:
 * @param buf pointer to a netbuf allocated by netbuf_new()
 */
void
netbuf_delete(struct netbuf *buf)
{
  if (buf != NULL) {
 80077bc:	b168      	cbz	r0, 80077da <netbuf_delete+0x1e>
{
 80077be:	b510      	push	{r4, lr}
 80077c0:	4604      	mov	r4, r0
    if (buf->p != NULL) {
 80077c2:	6800      	ldr	r0, [r0, #0]
 80077c4:	b120      	cbz	r0, 80077d0 <netbuf_delete+0x14>
      pbuf_free(buf->p);
 80077c6:	f000 ff9f 	bl	8008708 <pbuf_free>
      buf->p = buf->ptr = NULL;
 80077ca:	2300      	movs	r3, #0
 80077cc:	6063      	str	r3, [r4, #4]
 80077ce:	6023      	str	r3, [r4, #0]
    }
    memp_free(MEMP_NETBUF, buf);
 80077d0:	4621      	mov	r1, r4
 80077d2:	2006      	movs	r0, #6
 80077d4:	f000 fcd6 	bl	8008184 <memp_free>
  }
}
 80077d8:	bd10      	pop	{r4, pc}
 80077da:	4770      	bx	lr

080077dc <netbuf_next>:
 *         1  if moved to the next part but now there is no next part
 *         0  if moved to the next part and there are still more parts
 */
s8_t
netbuf_next(struct netbuf *buf)
{
 80077dc:	b508      	push	{r3, lr}
  LWIP_ERROR("netbuf_next: invalid buf", (buf != NULL), return -1;);
 80077de:	b140      	cbz	r0, 80077f2 <netbuf_next+0x16>
  if (buf->ptr->next == NULL) {
 80077e0:	6843      	ldr	r3, [r0, #4]
 80077e2:	681b      	ldr	r3, [r3, #0]
 80077e4:	b173      	cbz	r3, 8007804 <netbuf_next+0x28>
    return -1;
  }
  buf->ptr = buf->ptr->next;
 80077e6:	6043      	str	r3, [r0, #4]
  if (buf->ptr->next == NULL) {
 80077e8:	6818      	ldr	r0, [r3, #0]
  LWIP_ERROR("netbuf_next: invalid buf", (buf != NULL), return -1;);
 80077ea:	fab0 f080 	clz	r0, r0
 80077ee:	0940      	lsrs	r0, r0, #5
    return 1;
  }
  return 0;
}
 80077f0:	bd08      	pop	{r3, pc}
  LWIP_ERROR("netbuf_next: invalid buf", (buf != NULL), return -1;);
 80077f2:	4b06      	ldr	r3, [pc, #24]	; (800780c <netbuf_next+0x30>)
 80077f4:	22e0      	movs	r2, #224	; 0xe0
 80077f6:	4906      	ldr	r1, [pc, #24]	; (8007810 <netbuf_next+0x34>)
 80077f8:	4806      	ldr	r0, [pc, #24]	; (8007814 <netbuf_next+0x38>)
 80077fa:	f007 fc7b 	bl	800f0f4 <iprintf>
 80077fe:	f04f 30ff 	mov.w	r0, #4294967295
 8007802:	e7f5      	b.n	80077f0 <netbuf_next+0x14>
    return -1;
 8007804:	f04f 30ff 	mov.w	r0, #4294967295
 8007808:	e7f2      	b.n	80077f0 <netbuf_next+0x14>
 800780a:	bf00      	nop
 800780c:	08010a34 	.word	0x08010a34
 8007810:	08010aa8 	.word	0x08010aa8
 8007814:	080103a4 	.word	0x080103a4

08007818 <tcpip_thread>:
 *
 * @param arg unused argument
 */
static void
tcpip_thread(void *arg)
{
 8007818:	b500      	push	{lr}
 800781a:	b083      	sub	sp, #12
  struct tcpip_msg *msg;
  LWIP_UNUSED_ARG(arg);

  LWIP_MARK_TCPIP_THREAD();

  LOCK_TCPIP_CORE();
 800781c:	4831      	ldr	r0, [pc, #196]	; (80078e4 <tcpip_thread+0xcc>)
 800781e:	f007 fa40 	bl	800eca2 <sys_mutex_lock>
  if (tcpip_init_done != NULL) {
 8007822:	4b31      	ldr	r3, [pc, #196]	; (80078e8 <tcpip_thread+0xd0>)
 8007824:	681b      	ldr	r3, [r3, #0]
 8007826:	b113      	cbz	r3, 800782e <tcpip_thread+0x16>
    tcpip_init_done(tcpip_init_done_arg);
 8007828:	4a30      	ldr	r2, [pc, #192]	; (80078ec <tcpip_thread+0xd4>)
 800782a:	6810      	ldr	r0, [r2, #0]
 800782c:	4798      	blx	r3
  UNLOCK_TCPIP_CORE();
 800782e:	4d2d      	ldr	r5, [pc, #180]	; (80078e4 <tcpip_thread+0xcc>)
  res = sys_arch_mbox_fetch(mbox, msg, sleeptime);
 8007830:	4e2f      	ldr	r6, [pc, #188]	; (80078f0 <tcpip_thread+0xd8>)
tcpip_timeouts_mbox_fetch(sys_mbox_t *mbox, void **msg)
 8007832:	e01e      	b.n	8007872 <tcpip_thread+0x5a>
    UNLOCK_TCPIP_CORE();
 8007834:	4628      	mov	r0, r5
 8007836:	f007 fa3b 	bl	800ecb0 <sys_mutex_unlock>
    sys_arch_mbox_fetch(mbox, msg, 0);
 800783a:	2200      	movs	r2, #0
 800783c:	a901      	add	r1, sp, #4
 800783e:	4630      	mov	r0, r6
 8007840:	f007 f9a0 	bl	800eb84 <sys_arch_mbox_fetch>
    LOCK_TCPIP_CORE();
 8007844:	4628      	mov	r0, r5
 8007846:	f007 fa2c 	bl	800eca2 <sys_mutex_lock>

  while (1) {                          /* MAIN Loop */
    LWIP_TCPIP_THREAD_ALIVE();
    /* wait for a message, timeouts are processed while waiting */
    TCPIP_MBOX_FETCH(&tcpip_mbox, (void **)&msg);
    if (msg == NULL) {
 800784a:	9c01      	ldr	r4, [sp, #4]
 800784c:	b34c      	cbz	r4, 80078a2 <tcpip_thread+0x8a>
 * This is in its own function for access by tests only.
 */
static void
tcpip_thread_handle_msg(struct tcpip_msg *msg)
{
  switch (msg->type) {
 800784e:	7823      	ldrb	r3, [r4, #0]
 8007850:	2b01      	cmp	r3, #1
 8007852:	d03b      	beq.n	80078cc <tcpip_thread+0xb4>
 8007854:	2b02      	cmp	r3, #2
 8007856:	d041      	beq.n	80078dc <tcpip_thread+0xc4>
 8007858:	b353      	cbz	r3, 80078b0 <tcpip_thread+0x98>
      msg->msg.cb.function(msg->msg.cb.ctx);
      break;

    default:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: invalid message: %d\n", msg->type));
      LWIP_ASSERT("tcpip_thread: invalid message", 0);
 800785a:	4b26      	ldr	r3, [pc, #152]	; (80078f4 <tcpip_thread+0xdc>)
 800785c:	22cf      	movs	r2, #207	; 0xcf
 800785e:	4926      	ldr	r1, [pc, #152]	; (80078f8 <tcpip_thread+0xe0>)
 8007860:	4826      	ldr	r0, [pc, #152]	; (80078fc <tcpip_thread+0xe4>)
 8007862:	f007 fc47 	bl	800f0f4 <iprintf>
      break;
 8007866:	e004      	b.n	8007872 <tcpip_thread+0x5a>
    sys_check_timeouts();
 8007868:	f005 fb44 	bl	800cef4 <sys_check_timeouts>
    goto again;
 800786c:	e001      	b.n	8007872 <tcpip_thread+0x5a>
    sys_check_timeouts();
 800786e:	f005 fb41 	bl	800cef4 <sys_check_timeouts>
  sleeptime = sys_timeouts_sleeptime();
 8007872:	f005 fb63 	bl	800cf3c <sys_timeouts_sleeptime>
 8007876:	4604      	mov	r4, r0
  if (sleeptime == SYS_TIMEOUTS_SLEEPTIME_INFINITE) {
 8007878:	f1b0 3fff 	cmp.w	r0, #4294967295
 800787c:	d0da      	beq.n	8007834 <tcpip_thread+0x1c>
  } else if (sleeptime == 0) {
 800787e:	2800      	cmp	r0, #0
 8007880:	d0f2      	beq.n	8007868 <tcpip_thread+0x50>
  UNLOCK_TCPIP_CORE();
 8007882:	4628      	mov	r0, r5
 8007884:	f007 fa14 	bl	800ecb0 <sys_mutex_unlock>
  res = sys_arch_mbox_fetch(mbox, msg, sleeptime);
 8007888:	4622      	mov	r2, r4
 800788a:	a901      	add	r1, sp, #4
 800788c:	4630      	mov	r0, r6
 800788e:	f007 f979 	bl	800eb84 <sys_arch_mbox_fetch>
 8007892:	4604      	mov	r4, r0
  LOCK_TCPIP_CORE();
 8007894:	4628      	mov	r0, r5
 8007896:	f007 fa04 	bl	800eca2 <sys_mutex_lock>
  if (res == SYS_ARCH_TIMEOUT) {
 800789a:	f1b4 3fff 	cmp.w	r4, #4294967295
 800789e:	d0e6      	beq.n	800786e <tcpip_thread+0x56>
 80078a0:	e7d3      	b.n	800784a <tcpip_thread+0x32>
      LWIP_ASSERT("tcpip_thread: invalid message", 0);
 80078a2:	4b14      	ldr	r3, [pc, #80]	; (80078f4 <tcpip_thread+0xdc>)
 80078a4:	2291      	movs	r2, #145	; 0x91
 80078a6:	4914      	ldr	r1, [pc, #80]	; (80078f8 <tcpip_thread+0xe0>)
 80078a8:	4814      	ldr	r0, [pc, #80]	; (80078fc <tcpip_thread+0xe4>)
 80078aa:	f007 fc23 	bl	800f0f4 <iprintf>
      continue;
 80078ae:	e7e0      	b.n	8007872 <tcpip_thread+0x5a>
      if (msg->msg.inp.input_fn(msg->msg.inp.p, msg->msg.inp.netif) != ERR_OK) {
 80078b0:	68e3      	ldr	r3, [r4, #12]
 80078b2:	68a1      	ldr	r1, [r4, #8]
 80078b4:	6860      	ldr	r0, [r4, #4]
 80078b6:	4798      	blx	r3
 80078b8:	b920      	cbnz	r0, 80078c4 <tcpip_thread+0xac>
      memp_free(MEMP_TCPIP_MSG_INPKT, msg);
 80078ba:	4621      	mov	r1, r4
 80078bc:	2009      	movs	r0, #9
 80078be:	f000 fc61 	bl	8008184 <memp_free>
      break;
 80078c2:	e7d6      	b.n	8007872 <tcpip_thread+0x5a>
        pbuf_free(msg->msg.inp.p);
 80078c4:	6860      	ldr	r0, [r4, #4]
 80078c6:	f000 ff1f 	bl	8008708 <pbuf_free>
 80078ca:	e7f6      	b.n	80078ba <tcpip_thread+0xa2>
      msg->msg.cb.function(msg->msg.cb.ctx);
 80078cc:	6863      	ldr	r3, [r4, #4]
 80078ce:	68a0      	ldr	r0, [r4, #8]
 80078d0:	4798      	blx	r3
      memp_free(MEMP_TCPIP_MSG_API, msg);
 80078d2:	4621      	mov	r1, r4
 80078d4:	2008      	movs	r0, #8
 80078d6:	f000 fc55 	bl	8008184 <memp_free>
      break;
 80078da:	e7ca      	b.n	8007872 <tcpip_thread+0x5a>
      msg->msg.cb.function(msg->msg.cb.ctx);
 80078dc:	6863      	ldr	r3, [r4, #4]
 80078de:	68a0      	ldr	r0, [r4, #8]
 80078e0:	4798      	blx	r3
      break;
 80078e2:	e7c6      	b.n	8007872 <tcpip_thread+0x5a>
 80078e4:	2000afe0 	.word	0x2000afe0
 80078e8:	2000afe4 	.word	0x2000afe4
 80078ec:	2000afe8 	.word	0x2000afe8
 80078f0:	2000afec 	.word	0x2000afec
 80078f4:	08010ac4 	.word	0x08010ac4
 80078f8:	08010af4 	.word	0x08010af4
 80078fc:	080103a4 	.word	0x080103a4

08007900 <tcpip_inpkt>:
 * @param inp the network interface on which the packet was received
 * @param input_fn input function to call
 */
err_t
tcpip_inpkt(struct pbuf *p, struct netif *inp, netif_input_fn input_fn)
{
 8007900:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007902:	4607      	mov	r7, r0
 8007904:	460e      	mov	r6, r1
 8007906:	4615      	mov	r5, r2
  UNLOCK_TCPIP_CORE();
  return ret;
#else /* LWIP_TCPIP_CORE_LOCKING_INPUT */
  struct tcpip_msg *msg;

  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(tcpip_mbox));
 8007908:	4812      	ldr	r0, [pc, #72]	; (8007954 <tcpip_inpkt+0x54>)
 800790a:	f007 f967 	bl	800ebdc <sys_mbox_valid>
 800790e:	b178      	cbz	r0, 8007930 <tcpip_inpkt+0x30>

  msg = (struct tcpip_msg *)memp_malloc(MEMP_TCPIP_MSG_INPKT);
 8007910:	2009      	movs	r0, #9
 8007912:	f000 fc07 	bl	8008124 <memp_malloc>
  if (msg == NULL) {
 8007916:	4604      	mov	r4, r0
 8007918:	b1c0      	cbz	r0, 800794c <tcpip_inpkt+0x4c>
    return ERR_MEM;
  }

  msg->type = TCPIP_MSG_INPKT;
 800791a:	2300      	movs	r3, #0
 800791c:	7003      	strb	r3, [r0, #0]
  msg->msg.inp.p = p;
 800791e:	6047      	str	r7, [r0, #4]
  msg->msg.inp.netif = inp;
 8007920:	6086      	str	r6, [r0, #8]
  msg->msg.inp.input_fn = input_fn;
 8007922:	60c5      	str	r5, [r0, #12]
  if (sys_mbox_trypost(&tcpip_mbox, msg) != ERR_OK) {
 8007924:	4601      	mov	r1, r0
 8007926:	480b      	ldr	r0, [pc, #44]	; (8007954 <tcpip_inpkt+0x54>)
 8007928:	f007 f91c 	bl	800eb64 <sys_mbox_trypost>
 800792c:	b938      	cbnz	r0, 800793e <tcpip_inpkt+0x3e>
    memp_free(MEMP_TCPIP_MSG_INPKT, msg);
    return ERR_MEM;
  }
  return ERR_OK;
#endif /* LWIP_TCPIP_CORE_LOCKING_INPUT */
}
 800792e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(tcpip_mbox));
 8007930:	4b09      	ldr	r3, [pc, #36]	; (8007958 <tcpip_inpkt+0x58>)
 8007932:	22fc      	movs	r2, #252	; 0xfc
 8007934:	4909      	ldr	r1, [pc, #36]	; (800795c <tcpip_inpkt+0x5c>)
 8007936:	480a      	ldr	r0, [pc, #40]	; (8007960 <tcpip_inpkt+0x60>)
 8007938:	f007 fbdc 	bl	800f0f4 <iprintf>
 800793c:	e7e8      	b.n	8007910 <tcpip_inpkt+0x10>
    memp_free(MEMP_TCPIP_MSG_INPKT, msg);
 800793e:	4621      	mov	r1, r4
 8007940:	2009      	movs	r0, #9
 8007942:	f000 fc1f 	bl	8008184 <memp_free>
    return ERR_MEM;
 8007946:	f04f 30ff 	mov.w	r0, #4294967295
 800794a:	e7f0      	b.n	800792e <tcpip_inpkt+0x2e>
    return ERR_MEM;
 800794c:	f04f 30ff 	mov.w	r0, #4294967295
 8007950:	e7ed      	b.n	800792e <tcpip_inpkt+0x2e>
 8007952:	bf00      	nop
 8007954:	2000afec 	.word	0x2000afec
 8007958:	08010ac4 	.word	0x08010ac4
 800795c:	08010b14 	.word	0x08010b14
 8007960:	080103a4 	.word	0x080103a4

08007964 <tcpip_input>:
 *          NETIF_FLAG_ETHERNET flags)
 * @param inp the network interface on which the packet was received
 */
err_t
tcpip_input(struct pbuf *p, struct netif *inp)
{
 8007964:	b508      	push	{r3, lr}
#if LWIP_ETHERNET
  if (inp->flags & (NETIF_FLAG_ETHARP | NETIF_FLAG_ETHERNET)) {
 8007966:	f891 302d 	ldrb.w	r3, [r1, #45]	; 0x2d
 800796a:	f013 0f18 	tst.w	r3, #24
    return tcpip_inpkt(p, inp, ethernet_input);
 800796e:	bf14      	ite	ne
 8007970:	4a02      	ldrne	r2, [pc, #8]	; (800797c <tcpip_input+0x18>)
  } else
#endif /* LWIP_ETHERNET */
    return tcpip_inpkt(p, inp, ip_input);
 8007972:	4a03      	ldreq	r2, [pc, #12]	; (8007980 <tcpip_input+0x1c>)
 8007974:	f7ff ffc4 	bl	8007900 <tcpip_inpkt>
}
 8007978:	bd08      	pop	{r3, pc}
 800797a:	bf00      	nop
 800797c:	0800ea21 	.word	0x0800ea21
 8007980:	0800de5d 	.word	0x0800de5d

08007984 <tcpip_try_callback>:
 *
 * @see tcpip_callback
 */
err_t
tcpip_try_callback(tcpip_callback_fn function, void *ctx)
{
 8007984:	b570      	push	{r4, r5, r6, lr}
 8007986:	4606      	mov	r6, r0
 8007988:	460d      	mov	r5, r1
  struct tcpip_msg *msg;

  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(tcpip_mbox));
 800798a:	4812      	ldr	r0, [pc, #72]	; (80079d4 <tcpip_try_callback+0x50>)
 800798c:	f007 f926 	bl	800ebdc <sys_mbox_valid>
 8007990:	b170      	cbz	r0, 80079b0 <tcpip_try_callback+0x2c>

  msg = (struct tcpip_msg *)memp_malloc(MEMP_TCPIP_MSG_API);
 8007992:	2008      	movs	r0, #8
 8007994:	f000 fbc6 	bl	8008124 <memp_malloc>
  if (msg == NULL) {
 8007998:	4604      	mov	r4, r0
 800799a:	b1c0      	cbz	r0, 80079ce <tcpip_try_callback+0x4a>
    return ERR_MEM;
  }

  msg->type = TCPIP_MSG_CALLBACK;
 800799c:	2301      	movs	r3, #1
 800799e:	7003      	strb	r3, [r0, #0]
  msg->msg.cb.function = function;
 80079a0:	6046      	str	r6, [r0, #4]
  msg->msg.cb.ctx = ctx;
 80079a2:	6085      	str	r5, [r0, #8]

  if (sys_mbox_trypost(&tcpip_mbox, msg) != ERR_OK) {
 80079a4:	4601      	mov	r1, r0
 80079a6:	480b      	ldr	r0, [pc, #44]	; (80079d4 <tcpip_try_callback+0x50>)
 80079a8:	f007 f8dc 	bl	800eb64 <sys_mbox_trypost>
 80079ac:	b940      	cbnz	r0, 80079c0 <tcpip_try_callback+0x3c>
    memp_free(MEMP_TCPIP_MSG_API, msg);
    return ERR_MEM;
  }
  return ERR_OK;
}
 80079ae:	bd70      	pop	{r4, r5, r6, pc}
  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(tcpip_mbox));
 80079b0:	4b09      	ldr	r3, [pc, #36]	; (80079d8 <tcpip_try_callback+0x54>)
 80079b2:	f240 125d 	movw	r2, #349	; 0x15d
 80079b6:	4909      	ldr	r1, [pc, #36]	; (80079dc <tcpip_try_callback+0x58>)
 80079b8:	4809      	ldr	r0, [pc, #36]	; (80079e0 <tcpip_try_callback+0x5c>)
 80079ba:	f007 fb9b 	bl	800f0f4 <iprintf>
 80079be:	e7e8      	b.n	8007992 <tcpip_try_callback+0xe>
    memp_free(MEMP_TCPIP_MSG_API, msg);
 80079c0:	4621      	mov	r1, r4
 80079c2:	2008      	movs	r0, #8
 80079c4:	f000 fbde 	bl	8008184 <memp_free>
    return ERR_MEM;
 80079c8:	f04f 30ff 	mov.w	r0, #4294967295
 80079cc:	e7ef      	b.n	80079ae <tcpip_try_callback+0x2a>
    return ERR_MEM;
 80079ce:	f04f 30ff 	mov.w	r0, #4294967295
 80079d2:	e7ec      	b.n	80079ae <tcpip_try_callback+0x2a>
 80079d4:	2000afec 	.word	0x2000afec
 80079d8:	08010ac4 	.word	0x08010ac4
 80079dc:	08010b14 	.word	0x08010b14
 80079e0:	080103a4 	.word	0x080103a4

080079e4 <tcpip_send_msg_wait_sem>:
 * @param sem semaphore to wait on
 * @return ERR_OK if the function was called, another err_t if not
 */
err_t
tcpip_send_msg_wait_sem(tcpip_callback_fn fn, void *apimsg, sys_sem_t *sem)
{
 80079e4:	b570      	push	{r4, r5, r6, lr}
 80079e6:	4604      	mov	r4, r0
 80079e8:	460d      	mov	r5, r1
#if LWIP_TCPIP_CORE_LOCKING
  LWIP_UNUSED_ARG(sem);
  LOCK_TCPIP_CORE();
 80079ea:	4e05      	ldr	r6, [pc, #20]	; (8007a00 <tcpip_send_msg_wait_sem+0x1c>)
 80079ec:	4630      	mov	r0, r6
 80079ee:	f007 f958 	bl	800eca2 <sys_mutex_lock>
  fn(apimsg);
 80079f2:	4628      	mov	r0, r5
 80079f4:	47a0      	blx	r4
  UNLOCK_TCPIP_CORE();
 80079f6:	4630      	mov	r0, r6
 80079f8:	f007 f95a 	bl	800ecb0 <sys_mutex_unlock>
  sys_mbox_post(&tcpip_mbox, &TCPIP_MSG_VAR_REF(msg));
  sys_arch_sem_wait(sem, 0);
  TCPIP_MSG_VAR_FREE(msg);
  return ERR_OK;
#endif /* LWIP_TCPIP_CORE_LOCKING */
}
 80079fc:	2000      	movs	r0, #0
 80079fe:	bd70      	pop	{r4, r5, r6, pc}
 8007a00:	2000afe0 	.word	0x2000afe0

08007a04 <tcpip_init>:
 * @param initfunc a function to call when tcpip_thread is running and finished initializing
 * @param arg argument to pass to initfunc
 */
void
tcpip_init(tcpip_init_done_fn initfunc, void *arg)
{
 8007a04:	b530      	push	{r4, r5, lr}
 8007a06:	b083      	sub	sp, #12
 8007a08:	4605      	mov	r5, r0
 8007a0a:	460c      	mov	r4, r1
  lwip_init();
 8007a0c:	f000 f84d 	bl	8007aaa <lwip_init>

  tcpip_init_done = initfunc;
 8007a10:	4b13      	ldr	r3, [pc, #76]	; (8007a60 <tcpip_init+0x5c>)
 8007a12:	601d      	str	r5, [r3, #0]
  tcpip_init_done_arg = arg;
 8007a14:	4b13      	ldr	r3, [pc, #76]	; (8007a64 <tcpip_init+0x60>)
 8007a16:	601c      	str	r4, [r3, #0]
  if (sys_mbox_new(&tcpip_mbox, TCPIP_MBOX_SIZE) != ERR_OK) {
 8007a18:	2106      	movs	r1, #6
 8007a1a:	4813      	ldr	r0, [pc, #76]	; (8007a68 <tcpip_init+0x64>)
 8007a1c:	f007 f88c 	bl	800eb38 <sys_mbox_new>
 8007a20:	b970      	cbnz	r0, 8007a40 <tcpip_init+0x3c>
    LWIP_ASSERT("failed to create tcpip_thread mbox", 0);
  }
#if LWIP_TCPIP_CORE_LOCKING
  if (sys_mutex_new(&lock_tcpip_core) != ERR_OK) {
 8007a22:	4812      	ldr	r0, [pc, #72]	; (8007a6c <tcpip_init+0x68>)
 8007a24:	f007 f932 	bl	800ec8c <sys_mutex_new>
 8007a28:	b990      	cbnz	r0, 8007a50 <tcpip_init+0x4c>
    LWIP_ASSERT("failed to create lock_tcpip_core", 0);
  }
#endif /* LWIP_TCPIP_CORE_LOCKING */

  sys_thread_new(TCPIP_THREAD_NAME, tcpip_thread, NULL, TCPIP_THREAD_STACKSIZE, TCPIP_THREAD_PRIO);
 8007a2a:	2318      	movs	r3, #24
 8007a2c:	9300      	str	r3, [sp, #0]
 8007a2e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007a32:	2200      	movs	r2, #0
 8007a34:	490e      	ldr	r1, [pc, #56]	; (8007a70 <tcpip_init+0x6c>)
 8007a36:	480f      	ldr	r0, [pc, #60]	; (8007a74 <tcpip_init+0x70>)
 8007a38:	f007 f93f 	bl	800ecba <sys_thread_new>
}
 8007a3c:	b003      	add	sp, #12
 8007a3e:	bd30      	pop	{r4, r5, pc}
    LWIP_ASSERT("failed to create tcpip_thread mbox", 0);
 8007a40:	4b0d      	ldr	r3, [pc, #52]	; (8007a78 <tcpip_init+0x74>)
 8007a42:	f240 2261 	movw	r2, #609	; 0x261
 8007a46:	490d      	ldr	r1, [pc, #52]	; (8007a7c <tcpip_init+0x78>)
 8007a48:	480d      	ldr	r0, [pc, #52]	; (8007a80 <tcpip_init+0x7c>)
 8007a4a:	f007 fb53 	bl	800f0f4 <iprintf>
 8007a4e:	e7e8      	b.n	8007a22 <tcpip_init+0x1e>
    LWIP_ASSERT("failed to create lock_tcpip_core", 0);
 8007a50:	4b09      	ldr	r3, [pc, #36]	; (8007a78 <tcpip_init+0x74>)
 8007a52:	f240 2265 	movw	r2, #613	; 0x265
 8007a56:	490b      	ldr	r1, [pc, #44]	; (8007a84 <tcpip_init+0x80>)
 8007a58:	4809      	ldr	r0, [pc, #36]	; (8007a80 <tcpip_init+0x7c>)
 8007a5a:	f007 fb4b 	bl	800f0f4 <iprintf>
 8007a5e:	e7e4      	b.n	8007a2a <tcpip_init+0x26>
 8007a60:	2000afe4 	.word	0x2000afe4
 8007a64:	2000afe8 	.word	0x2000afe8
 8007a68:	2000afec 	.word	0x2000afec
 8007a6c:	2000afe0 	.word	0x2000afe0
 8007a70:	08007819 	.word	0x08007819
 8007a74:	08010b6c 	.word	0x08010b6c
 8007a78:	08010ac4 	.word	0x08010ac4
 8007a7c:	08010b24 	.word	0x08010b24
 8007a80:	080103a4 	.word	0x080103a4
 8007a84:	08010b48 	.word	0x08010b48

08007a88 <lwip_htons>:
 * @return n in network byte order
 */
u16_t
lwip_htons(u16_t n)
{
  return PP_HTONS(n);
 8007a88:	0a03      	lsrs	r3, r0, #8
 8007a8a:	ea43 2000 	orr.w	r0, r3, r0, lsl #8
}
 8007a8e:	b280      	uxth	r0, r0
 8007a90:	4770      	bx	lr

08007a92 <lwip_htonl>:
 * @return n in network byte order
 */
u32_t
lwip_htonl(u32_t n)
{
  return PP_HTONL(n);
 8007a92:	0e03      	lsrs	r3, r0, #24
 8007a94:	ea43 6300 	orr.w	r3, r3, r0, lsl #24
 8007a98:	0202      	lsls	r2, r0, #8
 8007a9a:	f402 027f 	and.w	r2, r2, #16711680	; 0xff0000
 8007a9e:	4313      	orrs	r3, r2
 8007aa0:	0a00      	lsrs	r0, r0, #8
 8007aa2:	f400 407f 	and.w	r0, r0, #65280	; 0xff00
}
 8007aa6:	4318      	orrs	r0, r3
 8007aa8:	4770      	bx	lr

08007aaa <lwip_init>:
 * Initialize all modules.
 * Use this in NO_SYS mode. Use tcpip_init() otherwise.
 */
void
lwip_init(void)
{
 8007aaa:	b508      	push	{r3, lr}
#endif

  /* Modules initialization */
  stats_init();
#if !NO_SYS
  sys_init();
 8007aac:	f007 f8e4 	bl	800ec78 <sys_init>
#endif /* !NO_SYS */
  mem_init();
 8007ab0:	f000 f80c 	bl	8007acc <mem_init>
  memp_init();
 8007ab4:	f000 fb12 	bl	80080dc <memp_init>
  pbuf_init();
  netif_init();
 8007ab8:	f000 fbde 	bl	8008278 <netif_init>
#endif /* LWIP_IPV4 */
#if LWIP_RAW
  raw_init();
#endif /* LWIP_RAW */
#if LWIP_UDP
  udp_init();
 8007abc:	f005 fa62 	bl	800cf84 <udp_init>
#endif /* LWIP_UDP */
#if LWIP_TCP
  tcp_init();
 8007ac0:	f001 f974 	bl	8008dac <tcp_init>
#if PPP_SUPPORT
  ppp_init();
#endif

#if LWIP_TIMERS
  sys_timeouts_init();
 8007ac4:	f005 fa00 	bl	800cec8 <sys_timeouts_init>
#endif /* LWIP_TIMERS */
}
 8007ac8:	bd08      	pop	{r3, pc}
	...

08007acc <mem_init>:
/**
 * Zero the heap and initialize start, end and lowest-free
 */
void
mem_init(void)
{
 8007acc:	b508      	push	{r3, lr}

  LWIP_ASSERT("Sanity check alignment",
              (SIZEOF_STRUCT_MEM & (MEM_ALIGNMENT - 1)) == 0);

  /* align the heap */
  ram = (u8_t *)LWIP_MEM_ALIGN(LWIP_RAM_HEAP_POINTER);
 8007ace:	4b13      	ldr	r3, [pc, #76]	; (8007b1c <mem_init+0x50>)
 8007ad0:	f023 0303 	bic.w	r3, r3, #3
 8007ad4:	4a12      	ldr	r2, [pc, #72]	; (8007b20 <mem_init+0x54>)
 8007ad6:	6013      	str	r3, [r2, #0]
  /* initialize the start of the heap */
  mem = (struct mem *)(void *)ram;
  mem->next = MEM_SIZE_ALIGNED;
 8007ad8:	f44f 5120 	mov.w	r1, #10240	; 0x2800
 8007adc:	8019      	strh	r1, [r3, #0]
  mem->prev = 0;
 8007ade:	2200      	movs	r2, #0
 8007ae0:	805a      	strh	r2, [r3, #2]
  mem->used = 0;
 8007ae2:	711a      	strb	r2, [r3, #4]
  return (struct mem *)(void *)&ram[ptr];
 8007ae4:	1858      	adds	r0, r3, r1
  /* initialize the end of the heap */
  ram_end = ptr_to_mem(MEM_SIZE_ALIGNED);
 8007ae6:	4a0f      	ldr	r2, [pc, #60]	; (8007b24 <mem_init+0x58>)
 8007ae8:	6010      	str	r0, [r2, #0]
  ram_end->used = 1;
 8007aea:	f503 5200 	add.w	r2, r3, #8192	; 0x2000
 8007aee:	2001      	movs	r0, #1
 8007af0:	f882 0804 	strb.w	r0, [r2, #2052]	; 0x804
  ram_end->next = MEM_SIZE_ALIGNED;
 8007af4:	f8a2 1800 	strh.w	r1, [r2, #2048]	; 0x800
  ram_end->prev = MEM_SIZE_ALIGNED;
 8007af8:	f8a2 1802 	strh.w	r1, [r2, #2050]	; 0x802
  MEM_SANITY();

  /* initialize the lowest-free pointer to the start of the heap */
  lfree = (struct mem *)(void *)ram;
 8007afc:	4a0a      	ldr	r2, [pc, #40]	; (8007b28 <mem_init+0x5c>)
 8007afe:	6013      	str	r3, [r2, #0]

  MEM_STATS_AVAIL(avail, MEM_SIZE_ALIGNED);

  if (sys_mutex_new(&mem_mutex) != ERR_OK) {
 8007b00:	480a      	ldr	r0, [pc, #40]	; (8007b2c <mem_init+0x60>)
 8007b02:	f007 f8c3 	bl	800ec8c <sys_mutex_new>
 8007b06:	b900      	cbnz	r0, 8007b0a <mem_init+0x3e>
    LWIP_ASSERT("failed to create mem_mutex", 0);
  }
}
 8007b08:	bd08      	pop	{r3, pc}
    LWIP_ASSERT("failed to create mem_mutex", 0);
 8007b0a:	4b09      	ldr	r3, [pc, #36]	; (8007b30 <mem_init+0x64>)
 8007b0c:	f240 221f 	movw	r2, #543	; 0x21f
 8007b10:	4908      	ldr	r1, [pc, #32]	; (8007b34 <mem_init+0x68>)
 8007b12:	4809      	ldr	r0, [pc, #36]	; (8007b38 <mem_init+0x6c>)
 8007b14:	f007 faee 	bl	800f0f4 <iprintf>
}
 8007b18:	e7f6      	b.n	8007b08 <mem_init+0x3c>
 8007b1a:	bf00      	nop
 8007b1c:	2000b01b 	.word	0x2000b01b
 8007b20:	2000b010 	.word	0x2000b010
 8007b24:	2000b014 	.word	0x2000b014
 8007b28:	2000b008 	.word	0x2000b008
 8007b2c:	2000b00c 	.word	0x2000b00c
 8007b30:	08010b7c 	.word	0x08010b7c
 8007b34:	08010bac 	.word	0x08010bac
 8007b38:	080103a4 	.word	0x080103a4

08007b3c <mem_free>:
mem_free(void *rmem)
{
  struct mem *mem;
  LWIP_MEM_FREE_DECL_PROTECT();

  if (rmem == NULL) {
 8007b3c:	2800      	cmp	r0, #0
 8007b3e:	f000 80da 	beq.w	8007cf6 <mem_free+0x1ba>
{
 8007b42:	b538      	push	{r3, r4, r5, lr}
 8007b44:	4604      	mov	r4, r0
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("mem_free(p == NULL) was called.\n"));
    return;
  }
  if ((((mem_ptr_t)rmem) & (MEM_ALIGNMENT - 1)) != 0) {
 8007b46:	f010 0f03 	tst.w	r0, #3
 8007b4a:	d117      	bne.n	8007b7c <mem_free+0x40>
    return;
  }

  /* Get the corresponding struct mem: */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 8007b4c:	f1a0 0508 	sub.w	r5, r0, #8

  if ((u8_t *)mem < ram || (u8_t *)rmem + MIN_SIZE_ALIGNED > (u8_t *)ram_end) {
 8007b50:	4b69      	ldr	r3, [pc, #420]	; (8007cf8 <mem_free+0x1bc>)
 8007b52:	681b      	ldr	r3, [r3, #0]
 8007b54:	42ab      	cmp	r3, r5
 8007b56:	d805      	bhi.n	8007b64 <mem_free+0x28>
 8007b58:	f100 030c 	add.w	r3, r0, #12
 8007b5c:	4a67      	ldr	r2, [pc, #412]	; (8007cfc <mem_free+0x1c0>)
 8007b5e:	6812      	ldr	r2, [r2, #0]
 8007b60:	429a      	cmp	r2, r3
 8007b62:	d217      	bcs.n	8007b94 <mem_free+0x58>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory");
 8007b64:	4b66      	ldr	r3, [pc, #408]	; (8007d00 <mem_free+0x1c4>)
 8007b66:	f240 227f 	movw	r2, #639	; 0x27f
 8007b6a:	4966      	ldr	r1, [pc, #408]	; (8007d04 <mem_free+0x1c8>)
 8007b6c:	4866      	ldr	r0, [pc, #408]	; (8007d08 <mem_free+0x1cc>)
 8007b6e:	f007 fac1 	bl	800f0f4 <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 8007b72:	f007 f8b9 	bl	800ece8 <sys_arch_protect>
 8007b76:	f007 f8c3 	bl	800ed00 <sys_arch_unprotect>
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
}
 8007b7a:	bd38      	pop	{r3, r4, r5, pc}
    LWIP_MEM_ILLEGAL_FREE("mem_free: sanity check alignment");
 8007b7c:	4b60      	ldr	r3, [pc, #384]	; (8007d00 <mem_free+0x1c4>)
 8007b7e:	f240 2273 	movw	r2, #627	; 0x273
 8007b82:	4962      	ldr	r1, [pc, #392]	; (8007d0c <mem_free+0x1d0>)
 8007b84:	4860      	ldr	r0, [pc, #384]	; (8007d08 <mem_free+0x1cc>)
 8007b86:	f007 fab5 	bl	800f0f4 <iprintf>
    MEM_STATS_INC_LOCKED(illegal);
 8007b8a:	f007 f8ad 	bl	800ece8 <sys_arch_protect>
 8007b8e:	f007 f8b7 	bl	800ed00 <sys_arch_unprotect>
    return;
 8007b92:	e7f2      	b.n	8007b7a <mem_free+0x3e>
  LWIP_MEM_FREE_PROTECT();
 8007b94:	485e      	ldr	r0, [pc, #376]	; (8007d10 <mem_free+0x1d4>)
 8007b96:	f007 f884 	bl	800eca2 <sys_mutex_lock>
  if (!mem->used) {
 8007b9a:	f814 3c04 	ldrb.w	r3, [r4, #-4]
 8007b9e:	2b00      	cmp	r3, #0
 8007ba0:	d062      	beq.n	8007c68 <mem_free+0x12c>
  nmem = ptr_to_mem(mem->next);
 8007ba2:	f834 3c08 	ldrh.w	r3, [r4, #-8]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 8007ba6:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 8007baa:	f200 8095 	bhi.w	8007cd8 <mem_free+0x19c>
  pmem = ptr_to_mem(mem->prev);
 8007bae:	f834 0c06 	ldrh.w	r0, [r4, #-6]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 8007bb2:	f5b0 5f20 	cmp.w	r0, #10240	; 0x2800
 8007bb6:	f200 808f 	bhi.w	8007cd8 <mem_free+0x19c>
  return (mem_size_t)((u8_t *)mem - ram);
 8007bba:	4a4f      	ldr	r2, [pc, #316]	; (8007cf8 <mem_free+0x1bc>)
 8007bbc:	6812      	ldr	r2, [r2, #0]
 8007bbe:	1aa9      	subs	r1, r5, r2
 8007bc0:	b289      	uxth	r1, r1
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 8007bc2:	4288      	cmp	r0, r1
 8007bc4:	d003      	beq.n	8007bce <mem_free+0x92>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 8007bc6:	5a10      	ldrh	r0, [r2, r0]
 8007bc8:	4288      	cmp	r0, r1
 8007bca:	f040 8085 	bne.w	8007cd8 <mem_free+0x19c>
  return (struct mem *)(void *)&ram[ptr];
 8007bce:	4413      	add	r3, r2
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 8007bd0:	484a      	ldr	r0, [pc, #296]	; (8007cfc <mem_free+0x1c0>)
 8007bd2:	6800      	ldr	r0, [r0, #0]
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 8007bd4:	4298      	cmp	r0, r3
 8007bd6:	d002      	beq.n	8007bde <mem_free+0xa2>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 8007bd8:	885b      	ldrh	r3, [r3, #2]
 8007bda:	428b      	cmp	r3, r1
 8007bdc:	d17c      	bne.n	8007cd8 <mem_free+0x19c>
  mem->used = 0;
 8007bde:	2300      	movs	r3, #0
 8007be0:	f804 3c04 	strb.w	r3, [r4, #-4]
  if (mem < lfree) {
 8007be4:	4b4b      	ldr	r3, [pc, #300]	; (8007d14 <mem_free+0x1d8>)
 8007be6:	681b      	ldr	r3, [r3, #0]
 8007be8:	42ab      	cmp	r3, r5
 8007bea:	d901      	bls.n	8007bf0 <mem_free+0xb4>
    lfree = mem;
 8007bec:	4b49      	ldr	r3, [pc, #292]	; (8007d14 <mem_free+0x1d8>)
 8007bee:	601d      	str	r5, [r3, #0]
  LWIP_ASSERT("plug_holes: mem >= ram", (u8_t *)mem >= ram);
 8007bf0:	4295      	cmp	r5, r2
 8007bf2:	d348      	bcc.n	8007c86 <mem_free+0x14a>
  LWIP_ASSERT("plug_holes: mem < ram_end", (u8_t *)mem < (u8_t *)ram_end);
 8007bf4:	4285      	cmp	r5, r0
 8007bf6:	d251      	bcs.n	8007c9c <mem_free+0x160>
  return (struct mem *)(void *)&ram[ptr];
 8007bf8:	4b3f      	ldr	r3, [pc, #252]	; (8007cf8 <mem_free+0x1bc>)
 8007bfa:	681b      	ldr	r3, [r3, #0]
 8007bfc:	f834 1c08 	ldrh.w	r1, [r4, #-8]
 8007c00:	185a      	adds	r2, r3, r1
  if (mem != nmem && nmem->used == 0 && (u8_t *)nmem != (u8_t *)ram_end) {
 8007c02:	4295      	cmp	r5, r2
 8007c04:	d015      	beq.n	8007c32 <mem_free+0xf6>
 8007c06:	7910      	ldrb	r0, [r2, #4]
 8007c08:	b998      	cbnz	r0, 8007c32 <mem_free+0xf6>
 8007c0a:	483c      	ldr	r0, [pc, #240]	; (8007cfc <mem_free+0x1c0>)
 8007c0c:	6800      	ldr	r0, [r0, #0]
 8007c0e:	4290      	cmp	r0, r2
 8007c10:	d00f      	beq.n	8007c32 <mem_free+0xf6>
    if (lfree == nmem) {
 8007c12:	4840      	ldr	r0, [pc, #256]	; (8007d14 <mem_free+0x1d8>)
 8007c14:	6800      	ldr	r0, [r0, #0]
 8007c16:	4290      	cmp	r0, r2
      lfree = mem;
 8007c18:	bf04      	itt	eq
 8007c1a:	4a3e      	ldreq	r2, [pc, #248]	; (8007d14 <mem_free+0x1d8>)
 8007c1c:	6015      	streq	r5, [r2, #0]
    mem->next = nmem->next;
 8007c1e:	5a5a      	ldrh	r2, [r3, r1]
 8007c20:	f824 2c08 	strh.w	r2, [r4, #-8]
    if (nmem->next != MEM_SIZE_ALIGNED) {
 8007c24:	5a5a      	ldrh	r2, [r3, r1]
 8007c26:	f5b2 5f20 	cmp.w	r2, #10240	; 0x2800
 8007c2a:	d002      	beq.n	8007c32 <mem_free+0xf6>
      ptr_to_mem(nmem->next)->prev = mem_to_ptr(mem);
 8007c2c:	441a      	add	r2, r3
  return (mem_size_t)((u8_t *)mem - ram);
 8007c2e:	1ae9      	subs	r1, r5, r3
 8007c30:	8051      	strh	r1, [r2, #2]
  pmem = ptr_to_mem(mem->prev);
 8007c32:	f834 1c06 	ldrh.w	r1, [r4, #-6]
  return (struct mem *)(void *)&ram[ptr];
 8007c36:	185a      	adds	r2, r3, r1
  if (pmem != mem && pmem->used == 0) {
 8007c38:	4295      	cmp	r5, r2
 8007c3a:	d011      	beq.n	8007c60 <mem_free+0x124>
 8007c3c:	7910      	ldrb	r0, [r2, #4]
 8007c3e:	b978      	cbnz	r0, 8007c60 <mem_free+0x124>
    if (lfree == mem) {
 8007c40:	4834      	ldr	r0, [pc, #208]	; (8007d14 <mem_free+0x1d8>)
 8007c42:	6800      	ldr	r0, [r0, #0]
 8007c44:	4285      	cmp	r5, r0
      lfree = pmem;
 8007c46:	bf04      	itt	eq
 8007c48:	4832      	ldreq	r0, [pc, #200]	; (8007d14 <mem_free+0x1d8>)
 8007c4a:	6002      	streq	r2, [r0, #0]
    pmem->next = mem->next;
 8007c4c:	f834 2c08 	ldrh.w	r2, [r4, #-8]
 8007c50:	525a      	strh	r2, [r3, r1]
    if (mem->next != MEM_SIZE_ALIGNED) {
 8007c52:	f834 2c08 	ldrh.w	r2, [r4, #-8]
 8007c56:	f5b2 5f20 	cmp.w	r2, #10240	; 0x2800
      ptr_to_mem(mem->next)->prev = mem_to_ptr(pmem);
 8007c5a:	bf1c      	itt	ne
 8007c5c:	189b      	addne	r3, r3, r2
 8007c5e:	8059      	strhne	r1, [r3, #2]
  LWIP_MEM_FREE_UNPROTECT();
 8007c60:	482b      	ldr	r0, [pc, #172]	; (8007d10 <mem_free+0x1d4>)
 8007c62:	f007 f825 	bl	800ecb0 <sys_mutex_unlock>
 8007c66:	e788      	b.n	8007b7a <mem_free+0x3e>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: double free");
 8007c68:	4b25      	ldr	r3, [pc, #148]	; (8007d00 <mem_free+0x1c4>)
 8007c6a:	f44f 7223 	mov.w	r2, #652	; 0x28c
 8007c6e:	492a      	ldr	r1, [pc, #168]	; (8007d18 <mem_free+0x1dc>)
 8007c70:	4825      	ldr	r0, [pc, #148]	; (8007d08 <mem_free+0x1cc>)
 8007c72:	f007 fa3f 	bl	800f0f4 <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
 8007c76:	4826      	ldr	r0, [pc, #152]	; (8007d10 <mem_free+0x1d4>)
 8007c78:	f007 f81a 	bl	800ecb0 <sys_mutex_unlock>
    MEM_STATS_INC_LOCKED(illegal);
 8007c7c:	f007 f834 	bl	800ece8 <sys_arch_protect>
 8007c80:	f007 f83e 	bl	800ed00 <sys_arch_unprotect>
    return;
 8007c84:	e779      	b.n	8007b7a <mem_free+0x3e>
  LWIP_ASSERT("plug_holes: mem >= ram", (u8_t *)mem >= ram);
 8007c86:	4b1e      	ldr	r3, [pc, #120]	; (8007d00 <mem_free+0x1c4>)
 8007c88:	f240 12df 	movw	r2, #479	; 0x1df
 8007c8c:	4923      	ldr	r1, [pc, #140]	; (8007d1c <mem_free+0x1e0>)
 8007c8e:	481e      	ldr	r0, [pc, #120]	; (8007d08 <mem_free+0x1cc>)
 8007c90:	f007 fa30 	bl	800f0f4 <iprintf>
  LWIP_ASSERT("plug_holes: mem < ram_end", (u8_t *)mem < (u8_t *)ram_end);
 8007c94:	4b19      	ldr	r3, [pc, #100]	; (8007cfc <mem_free+0x1c0>)
 8007c96:	681b      	ldr	r3, [r3, #0]
 8007c98:	429d      	cmp	r5, r3
 8007c9a:	d306      	bcc.n	8007caa <mem_free+0x16e>
 8007c9c:	4b18      	ldr	r3, [pc, #96]	; (8007d00 <mem_free+0x1c4>)
 8007c9e:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8007ca2:	491f      	ldr	r1, [pc, #124]	; (8007d20 <mem_free+0x1e4>)
 8007ca4:	4818      	ldr	r0, [pc, #96]	; (8007d08 <mem_free+0x1cc>)
 8007ca6:	f007 fa25 	bl	800f0f4 <iprintf>
  LWIP_ASSERT("plug_holes: mem->used == 0", mem->used == 0);
 8007caa:	f814 3c04 	ldrb.w	r3, [r4, #-4]
 8007cae:	b133      	cbz	r3, 8007cbe <mem_free+0x182>
 8007cb0:	4b13      	ldr	r3, [pc, #76]	; (8007d00 <mem_free+0x1c4>)
 8007cb2:	f240 12e1 	movw	r2, #481	; 0x1e1
 8007cb6:	491b      	ldr	r1, [pc, #108]	; (8007d24 <mem_free+0x1e8>)
 8007cb8:	4813      	ldr	r0, [pc, #76]	; (8007d08 <mem_free+0x1cc>)
 8007cba:	f007 fa1b 	bl	800f0f4 <iprintf>
  LWIP_ASSERT("plug_holes: mem->next <= MEM_SIZE_ALIGNED", mem->next <= MEM_SIZE_ALIGNED);
 8007cbe:	f834 3c08 	ldrh.w	r3, [r4, #-8]
 8007cc2:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 8007cc6:	d997      	bls.n	8007bf8 <mem_free+0xbc>
 8007cc8:	4b0d      	ldr	r3, [pc, #52]	; (8007d00 <mem_free+0x1c4>)
 8007cca:	f44f 72f2 	mov.w	r2, #484	; 0x1e4
 8007cce:	4916      	ldr	r1, [pc, #88]	; (8007d28 <mem_free+0x1ec>)
 8007cd0:	480d      	ldr	r0, [pc, #52]	; (8007d08 <mem_free+0x1cc>)
 8007cd2:	f007 fa0f 	bl	800f0f4 <iprintf>
 8007cd6:	e78f      	b.n	8007bf8 <mem_free+0xbc>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: non-linked: double free");
 8007cd8:	4b09      	ldr	r3, [pc, #36]	; (8007d00 <mem_free+0x1c4>)
 8007cda:	f240 2295 	movw	r2, #661	; 0x295
 8007cde:	4913      	ldr	r1, [pc, #76]	; (8007d2c <mem_free+0x1f0>)
 8007ce0:	4809      	ldr	r0, [pc, #36]	; (8007d08 <mem_free+0x1cc>)
 8007ce2:	f007 fa07 	bl	800f0f4 <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
 8007ce6:	480a      	ldr	r0, [pc, #40]	; (8007d10 <mem_free+0x1d4>)
 8007ce8:	f006 ffe2 	bl	800ecb0 <sys_mutex_unlock>
    MEM_STATS_INC_LOCKED(illegal);
 8007cec:	f006 fffc 	bl	800ece8 <sys_arch_protect>
 8007cf0:	f007 f806 	bl	800ed00 <sys_arch_unprotect>
    return;
 8007cf4:	e741      	b.n	8007b7a <mem_free+0x3e>
 8007cf6:	4770      	bx	lr
 8007cf8:	2000b010 	.word	0x2000b010
 8007cfc:	2000b014 	.word	0x2000b014
 8007d00:	08010b7c 	.word	0x08010b7c
 8007d04:	08010bec 	.word	0x08010bec
 8007d08:	080103a4 	.word	0x080103a4
 8007d0c:	08010bc8 	.word	0x08010bc8
 8007d10:	2000b00c 	.word	0x2000b00c
 8007d14:	2000b008 	.word	0x2000b008
 8007d18:	08010c08 	.word	0x08010c08
 8007d1c:	08010c30 	.word	0x08010c30
 8007d20:	08010c48 	.word	0x08010c48
 8007d24:	08010c64 	.word	0x08010c64
 8007d28:	08010c80 	.word	0x08010c80
 8007d2c:	08010cac 	.word	0x08010cac

08007d30 <mem_trim>:
 *         or NULL if newsize is > old size, in which case rmem is NOT touched
 *         or freed!
 */
void *
mem_trim(void *rmem, mem_size_t new_size)
{
 8007d30:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007d34:	4605      	mov	r5, r0
  /* use the FREE_PROTECT here: it protects with sem OR SYS_ARCH_PROTECT */
  LWIP_MEM_FREE_DECL_PROTECT();

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  newsize = (mem_size_t)LWIP_MEM_ALIGN_SIZE(new_size);
 8007d36:	1ccc      	adds	r4, r1, #3
 8007d38:	f024 0403 	bic.w	r4, r4, #3
 8007d3c:	b2a4      	uxth	r4, r4
  if (newsize < MIN_SIZE_ALIGNED) {
 8007d3e:	2c0b      	cmp	r4, #11
 8007d40:	d904      	bls.n	8007d4c <mem_trim+0x1c>
    newsize = MIN_SIZE_ALIGNED;
  }
#if MEM_OVERFLOW_CHECK
  newsize += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((newsize > MEM_SIZE_ALIGNED) || (newsize < new_size)) {
 8007d42:	f5b4 5f20 	cmp.w	r4, #10240	; 0x2800
 8007d46:	d902      	bls.n	8007d4e <mem_trim+0x1e>
    return NULL;
 8007d48:	2000      	movs	r0, #0
 8007d4a:	e01f      	b.n	8007d8c <mem_trim+0x5c>
    newsize = MIN_SIZE_ALIGNED;
 8007d4c:	240c      	movs	r4, #12
  if ((newsize > MEM_SIZE_ALIGNED) || (newsize < new_size)) {
 8007d4e:	42a1      	cmp	r1, r4
 8007d50:	f200 809a 	bhi.w	8007e88 <mem_trim+0x158>
  }

  LWIP_ASSERT("mem_trim: legal memory", (u8_t *)rmem >= (u8_t *)ram &&
 8007d54:	4b4e      	ldr	r3, [pc, #312]	; (8007e90 <mem_trim+0x160>)
 8007d56:	681b      	ldr	r3, [r3, #0]
 8007d58:	42ab      	cmp	r3, r5
 8007d5a:	d803      	bhi.n	8007d64 <mem_trim+0x34>
 8007d5c:	4a4d      	ldr	r2, [pc, #308]	; (8007e94 <mem_trim+0x164>)
 8007d5e:	6812      	ldr	r2, [r2, #0]
 8007d60:	42aa      	cmp	r2, r5
 8007d62:	d815      	bhi.n	8007d90 <mem_trim+0x60>
 8007d64:	4b4c      	ldr	r3, [pc, #304]	; (8007e98 <mem_trim+0x168>)
 8007d66:	f240 22d1 	movw	r2, #721	; 0x2d1
 8007d6a:	494c      	ldr	r1, [pc, #304]	; (8007e9c <mem_trim+0x16c>)
 8007d6c:	484c      	ldr	r0, [pc, #304]	; (8007ea0 <mem_trim+0x170>)
 8007d6e:	f007 f9c1 	bl	800f0f4 <iprintf>
              (u8_t *)rmem < (u8_t *)ram_end);

  if ((u8_t *)rmem < (u8_t *)ram || (u8_t *)rmem >= (u8_t *)ram_end) {
 8007d72:	4b47      	ldr	r3, [pc, #284]	; (8007e90 <mem_trim+0x160>)
 8007d74:	681b      	ldr	r3, [r3, #0]
 8007d76:	42ab      	cmp	r3, r5
 8007d78:	d803      	bhi.n	8007d82 <mem_trim+0x52>
 8007d7a:	4a46      	ldr	r2, [pc, #280]	; (8007e94 <mem_trim+0x164>)
 8007d7c:	6812      	ldr	r2, [r2, #0]
 8007d7e:	42aa      	cmp	r2, r5
 8007d80:	d806      	bhi.n	8007d90 <mem_trim+0x60>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_trim: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 8007d82:	f006 ffb1 	bl	800ece8 <sys_arch_protect>
 8007d86:	f006 ffbb 	bl	800ed00 <sys_arch_unprotect>
    return rmem;
 8007d8a:	4628      	mov	r0, r5
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
  return rmem;
}
 8007d8c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 8007d90:	f1a5 0708 	sub.w	r7, r5, #8
  return (mem_size_t)((u8_t *)mem - ram);
 8007d94:	1afb      	subs	r3, r7, r3
 8007d96:	b29f      	uxth	r7, r3
  size = (mem_size_t)((mem_size_t)(mem->next - ptr) - (SIZEOF_STRUCT_MEM + MEM_SANITY_OVERHEAD));
 8007d98:	f835 6c08 	ldrh.w	r6, [r5, #-8]
 8007d9c:	3e08      	subs	r6, #8
 8007d9e:	1bf6      	subs	r6, r6, r7
 8007da0:	b2b6      	uxth	r6, r6
  LWIP_ASSERT("mem_trim can only shrink memory", newsize <= size);
 8007da2:	42a6      	cmp	r6, r4
 8007da4:	d32f      	bcc.n	8007e06 <mem_trim+0xd6>
  if (newsize == size) {
 8007da6:	42a6      	cmp	r6, r4
 8007da8:	d070      	beq.n	8007e8c <mem_trim+0x15c>
  LWIP_MEM_FREE_PROTECT();
 8007daa:	483e      	ldr	r0, [pc, #248]	; (8007ea4 <mem_trim+0x174>)
 8007dac:	f006 ff79 	bl	800eca2 <sys_mutex_lock>
  mem2 = ptr_to_mem(mem->next);
 8007db0:	f835 8c08 	ldrh.w	r8, [r5, #-8]
  return (struct mem *)(void *)&ram[ptr];
 8007db4:	4b36      	ldr	r3, [pc, #216]	; (8007e90 <mem_trim+0x160>)
 8007db6:	f8d3 a000 	ldr.w	sl, [r3]
 8007dba:	eb0a 0908 	add.w	r9, sl, r8
  if (mem2->used == 0) {
 8007dbe:	f899 3004 	ldrb.w	r3, [r9, #4]
 8007dc2:	2b00      	cmp	r3, #0
 8007dc4:	d136      	bne.n	8007e34 <mem_trim+0x104>
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 8007dc6:	f5b8 5f20 	cmp.w	r8, #10240	; 0x2800
 8007dca:	d025      	beq.n	8007e18 <mem_trim+0xe8>
    next = mem2->next;
 8007dcc:	f83a 1008 	ldrh.w	r1, [sl, r8]
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 8007dd0:	3408      	adds	r4, #8
 8007dd2:	443c      	add	r4, r7
 8007dd4:	b2a4      	uxth	r4, r4
    if (lfree == mem2) {
 8007dd6:	4b34      	ldr	r3, [pc, #208]	; (8007ea8 <mem_trim+0x178>)
 8007dd8:	681b      	ldr	r3, [r3, #0]
 8007dda:	454b      	cmp	r3, r9
 8007ddc:	d024      	beq.n	8007e28 <mem_trim+0xf8>
  return (struct mem *)(void *)&ram[ptr];
 8007dde:	4b2c      	ldr	r3, [pc, #176]	; (8007e90 <mem_trim+0x160>)
 8007de0:	681b      	ldr	r3, [r3, #0]
 8007de2:	191a      	adds	r2, r3, r4
    mem2->used = 0;
 8007de4:	2000      	movs	r0, #0
 8007de6:	7110      	strb	r0, [r2, #4]
    mem2->next = next;
 8007de8:	5319      	strh	r1, [r3, r4]
    mem2->prev = ptr;
 8007dea:	8057      	strh	r7, [r2, #2]
    mem->next = ptr2;
 8007dec:	f825 4c08 	strh.w	r4, [r5, #-8]
    if (mem2->next != MEM_SIZE_ALIGNED) {
 8007df0:	5b1a      	ldrh	r2, [r3, r4]
 8007df2:	f5b2 5f20 	cmp.w	r2, #10240	; 0x2800
 8007df6:	d001      	beq.n	8007dfc <mem_trim+0xcc>
      ptr_to_mem(mem2->next)->prev = ptr2;
 8007df8:	4413      	add	r3, r2
 8007dfa:	805c      	strh	r4, [r3, #2]
  LWIP_MEM_FREE_UNPROTECT();
 8007dfc:	4829      	ldr	r0, [pc, #164]	; (8007ea4 <mem_trim+0x174>)
 8007dfe:	f006 ff57 	bl	800ecb0 <sys_mutex_unlock>
  return rmem;
 8007e02:	4628      	mov	r0, r5
 8007e04:	e7c2      	b.n	8007d8c <mem_trim+0x5c>
  LWIP_ASSERT("mem_trim can only shrink memory", newsize <= size);
 8007e06:	4b24      	ldr	r3, [pc, #144]	; (8007e98 <mem_trim+0x168>)
 8007e08:	f44f 7239 	mov.w	r2, #740	; 0x2e4
 8007e0c:	4927      	ldr	r1, [pc, #156]	; (8007eac <mem_trim+0x17c>)
 8007e0e:	4824      	ldr	r0, [pc, #144]	; (8007ea0 <mem_trim+0x170>)
 8007e10:	f007 f970 	bl	800f0f4 <iprintf>
    return NULL;
 8007e14:	2000      	movs	r0, #0
 8007e16:	e7b9      	b.n	8007d8c <mem_trim+0x5c>
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 8007e18:	4b1f      	ldr	r3, [pc, #124]	; (8007e98 <mem_trim+0x168>)
 8007e1a:	f240 22f5 	movw	r2, #757	; 0x2f5
 8007e1e:	4924      	ldr	r1, [pc, #144]	; (8007eb0 <mem_trim+0x180>)
 8007e20:	481f      	ldr	r0, [pc, #124]	; (8007ea0 <mem_trim+0x170>)
 8007e22:	f007 f967 	bl	800f0f4 <iprintf>
 8007e26:	e7d1      	b.n	8007dcc <mem_trim+0x9c>
  return (struct mem *)(void *)&ram[ptr];
 8007e28:	4b19      	ldr	r3, [pc, #100]	; (8007e90 <mem_trim+0x160>)
 8007e2a:	681b      	ldr	r3, [r3, #0]
 8007e2c:	4423      	add	r3, r4
      lfree = ptr_to_mem(ptr2);
 8007e2e:	4a1e      	ldr	r2, [pc, #120]	; (8007ea8 <mem_trim+0x178>)
 8007e30:	6013      	str	r3, [r2, #0]
 8007e32:	e7d4      	b.n	8007dde <mem_trim+0xae>
  } else if (newsize + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED <= size) {
 8007e34:	f104 0314 	add.w	r3, r4, #20
 8007e38:	42b3      	cmp	r3, r6
 8007e3a:	d8df      	bhi.n	8007dfc <mem_trim+0xcc>
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 8007e3c:	3408      	adds	r4, #8
 8007e3e:	443c      	add	r4, r7
 8007e40:	b2a4      	uxth	r4, r4
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 8007e42:	f5b8 5f20 	cmp.w	r8, #10240	; 0x2800
 8007e46:	d017      	beq.n	8007e78 <mem_trim+0x148>
  return (struct mem *)(void *)&ram[ptr];
 8007e48:	4b11      	ldr	r3, [pc, #68]	; (8007e90 <mem_trim+0x160>)
 8007e4a:	681b      	ldr	r3, [r3, #0]
 8007e4c:	191a      	adds	r2, r3, r4
    if (mem2 < lfree) {
 8007e4e:	4916      	ldr	r1, [pc, #88]	; (8007ea8 <mem_trim+0x178>)
 8007e50:	6809      	ldr	r1, [r1, #0]
 8007e52:	4291      	cmp	r1, r2
      lfree = mem2;
 8007e54:	bf84      	itt	hi
 8007e56:	4914      	ldrhi	r1, [pc, #80]	; (8007ea8 <mem_trim+0x178>)
 8007e58:	600a      	strhi	r2, [r1, #0]
    mem2->used = 0;
 8007e5a:	2100      	movs	r1, #0
 8007e5c:	7111      	strb	r1, [r2, #4]
    mem2->next = mem->next;
 8007e5e:	f835 1c08 	ldrh.w	r1, [r5, #-8]
 8007e62:	5319      	strh	r1, [r3, r4]
    mem2->prev = ptr;
 8007e64:	8057      	strh	r7, [r2, #2]
    mem->next = ptr2;
 8007e66:	f825 4c08 	strh.w	r4, [r5, #-8]
    if (mem2->next != MEM_SIZE_ALIGNED) {
 8007e6a:	5b1a      	ldrh	r2, [r3, r4]
 8007e6c:	f5b2 5f20 	cmp.w	r2, #10240	; 0x2800
      ptr_to_mem(mem2->next)->prev = ptr2;
 8007e70:	bf1c      	itt	ne
 8007e72:	189b      	addne	r3, r3, r2
 8007e74:	805c      	strhne	r4, [r3, #2]
 8007e76:	e7c1      	b.n	8007dfc <mem_trim+0xcc>
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 8007e78:	4b07      	ldr	r3, [pc, #28]	; (8007e98 <mem_trim+0x168>)
 8007e7a:	f240 3216 	movw	r2, #790	; 0x316
 8007e7e:	490c      	ldr	r1, [pc, #48]	; (8007eb0 <mem_trim+0x180>)
 8007e80:	4807      	ldr	r0, [pc, #28]	; (8007ea0 <mem_trim+0x170>)
 8007e82:	f007 f937 	bl	800f0f4 <iprintf>
 8007e86:	e7df      	b.n	8007e48 <mem_trim+0x118>
    return NULL;
 8007e88:	2000      	movs	r0, #0
 8007e8a:	e77f      	b.n	8007d8c <mem_trim+0x5c>
    return rmem;
 8007e8c:	4628      	mov	r0, r5
 8007e8e:	e77d      	b.n	8007d8c <mem_trim+0x5c>
 8007e90:	2000b010 	.word	0x2000b010
 8007e94:	2000b014 	.word	0x2000b014
 8007e98:	08010b7c 	.word	0x08010b7c
 8007e9c:	08010ce0 	.word	0x08010ce0
 8007ea0:	080103a4 	.word	0x080103a4
 8007ea4:	2000b00c 	.word	0x2000b00c
 8007ea8:	2000b008 	.word	0x2000b008
 8007eac:	08010cf8 	.word	0x08010cf8
 8007eb0:	08010d18 	.word	0x08010d18

08007eb4 <mem_malloc>:
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  u8_t local_mem_free_count = 0;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_ALLOC_DECL_PROTECT();

  if (size_in == 0) {
 8007eb4:	2800      	cmp	r0, #0
 8007eb6:	f000 809c 	beq.w	8007ff2 <mem_malloc+0x13e>
{
 8007eba:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007ebc:	4603      	mov	r3, r0
    return NULL;
  }

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  size = (mem_size_t)LWIP_MEM_ALIGN_SIZE(size_in);
 8007ebe:	1cc6      	adds	r6, r0, #3
 8007ec0:	f026 0603 	bic.w	r6, r6, #3
 8007ec4:	b2b6      	uxth	r6, r6
  if (size < MIN_SIZE_ALIGNED) {
 8007ec6:	2e0b      	cmp	r6, #11
 8007ec8:	d904      	bls.n	8007ed4 <mem_malloc+0x20>
    size = MIN_SIZE_ALIGNED;
  }
#if MEM_OVERFLOW_CHECK
  size += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((size > MEM_SIZE_ALIGNED) || (size < size_in)) {
 8007eca:	f5b6 5f20 	cmp.w	r6, #10240	; 0x2800
 8007ece:	d902      	bls.n	8007ed6 <mem_malloc+0x22>
    return NULL;
 8007ed0:	2000      	movs	r0, #0
 8007ed2:	e08d      	b.n	8007ff0 <mem_malloc+0x13c>
    size = MIN_SIZE_ALIGNED;
 8007ed4:	260c      	movs	r6, #12
  if ((size > MEM_SIZE_ALIGNED) || (size < size_in)) {
 8007ed6:	42b3      	cmp	r3, r6
 8007ed8:	f200 808d 	bhi.w	8007ff6 <mem_malloc+0x142>
  }

  /* protect the heap from concurrent access */
  sys_mutex_lock(&mem_mutex);
 8007edc:	4849      	ldr	r0, [pc, #292]	; (8008004 <mem_malloc+0x150>)
 8007ede:	f006 fee0 	bl	800eca2 <sys_mutex_lock>
  return (mem_size_t)((u8_t *)mem - ram);
 8007ee2:	4b49      	ldr	r3, [pc, #292]	; (8008008 <mem_malloc+0x154>)
 8007ee4:	6819      	ldr	r1, [r3, #0]
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

    /* Scan through the heap searching for a free block that is big enough,
     * beginning with the lowest free block.
     */
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 8007ee6:	4b49      	ldr	r3, [pc, #292]	; (800800c <mem_malloc+0x158>)
  return (mem_size_t)((u8_t *)mem - ram);
 8007ee8:	681c      	ldr	r4, [r3, #0]
 8007eea:	1a64      	subs	r4, r4, r1
 8007eec:	b2a4      	uxth	r4, r4
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 8007eee:	4623      	mov	r3, r4
 8007ef0:	4637      	mov	r7, r6
 8007ef2:	f5c6 5020 	rsb	r0, r6, #10240	; 0x2800
 8007ef6:	4284      	cmp	r4, r0
 8007ef8:	d276      	bcs.n	8007fe8 <mem_malloc+0x134>
        break;
      }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

      if ((!mem->used) &&
          (mem->next - (ptr + SIZEOF_STRUCT_MEM)) >= size) {
 8007efa:	f06f 0c07 	mvn.w	ip, #7
 8007efe:	e039      	b.n	8007f74 <mem_malloc+0xc0>
           * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
           *       region that couldn't hold data, but when mem->next gets freed,
           *       the 2 regions would be combined, resulting in more free memory
           */
          ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + size);
          LWIP_ASSERT("invalid next ptr",ptr2 != MEM_SIZE_ALIGNED);
 8007f00:	4b43      	ldr	r3, [pc, #268]	; (8008010 <mem_malloc+0x15c>)
 8007f02:	f240 3287 	movw	r2, #903	; 0x387
 8007f06:	4943      	ldr	r1, [pc, #268]	; (8008014 <mem_malloc+0x160>)
 8007f08:	4843      	ldr	r0, [pc, #268]	; (8008018 <mem_malloc+0x164>)
 8007f0a:	f007 f8f3 	bl	800f0f4 <iprintf>
 8007f0e:	e045      	b.n	8007f9c <mem_malloc+0xe8>
           * take care of this).
           * -> near fit or exact fit: do not split, no mem2 creation
           * also can't move mem->next directly behind mem, since mem->next
           * will always be used at this point!
           */
          mem->used = 1;
 8007f10:	2301      	movs	r3, #1
 8007f12:	712b      	strb	r3, [r5, #4]
          MEM_STATS_INC_USED(used, mem->next - mem_to_ptr(mem));
        }
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
mem_malloc_adjust_lfree:
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
        if (mem == lfree) {
 8007f14:	4b3d      	ldr	r3, [pc, #244]	; (800800c <mem_malloc+0x158>)
 8007f16:	681b      	ldr	r3, [r3, #0]
 8007f18:	42ab      	cmp	r3, r5
 8007f1a:	d056      	beq.n	8007fca <mem_malloc+0x116>
          }
          lfree = cur;
          LWIP_ASSERT("mem_malloc: !lfree->used", ((lfree == ram_end) || (!lfree->used)));
        }
        LWIP_MEM_ALLOC_UNPROTECT();
        sys_mutex_unlock(&mem_mutex);
 8007f1c:	4839      	ldr	r0, [pc, #228]	; (8008004 <mem_malloc+0x150>)
 8007f1e:	f006 fec7 	bl	800ecb0 <sys_mutex_unlock>
        LWIP_ASSERT("mem_malloc: allocated memory not above ram_end.",
 8007f22:	3708      	adds	r7, #8
 8007f24:	442f      	add	r7, r5
 8007f26:	4b3d      	ldr	r3, [pc, #244]	; (800801c <mem_malloc+0x168>)
 8007f28:	681b      	ldr	r3, [r3, #0]
 8007f2a:	42bb      	cmp	r3, r7
 8007f2c:	d305      	bcc.n	8007f3a <mem_malloc+0x86>
                    (mem_ptr_t)mem + SIZEOF_STRUCT_MEM + size <= (mem_ptr_t)ram_end);
        LWIP_ASSERT("mem_malloc: allocated memory properly aligned.",
 8007f2e:	f015 0f03 	tst.w	r5, #3
 8007f32:	d10a      	bne.n	8007f4a <mem_malloc+0x96>

#if MEM_OVERFLOW_CHECK
        mem_overflow_init_element(mem, size_in);
#endif
        MEM_SANITY();
        return (u8_t *)mem + SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET;
 8007f34:	f105 0008 	add.w	r0, r5, #8
 8007f38:	e05a      	b.n	8007ff0 <mem_malloc+0x13c>
        LWIP_ASSERT("mem_malloc: allocated memory not above ram_end.",
 8007f3a:	4b35      	ldr	r3, [pc, #212]	; (8008010 <mem_malloc+0x15c>)
 8007f3c:	f240 32b9 	movw	r2, #953	; 0x3b9
 8007f40:	4937      	ldr	r1, [pc, #220]	; (8008020 <mem_malloc+0x16c>)
 8007f42:	4835      	ldr	r0, [pc, #212]	; (8008018 <mem_malloc+0x164>)
 8007f44:	f007 f8d6 	bl	800f0f4 <iprintf>
 8007f48:	e7f1      	b.n	8007f2e <mem_malloc+0x7a>
        LWIP_ASSERT("mem_malloc: allocated memory properly aligned.",
 8007f4a:	4e31      	ldr	r6, [pc, #196]	; (8008010 <mem_malloc+0x15c>)
 8007f4c:	4c32      	ldr	r4, [pc, #200]	; (8008018 <mem_malloc+0x164>)
 8007f4e:	4633      	mov	r3, r6
 8007f50:	f240 32bb 	movw	r2, #955	; 0x3bb
 8007f54:	4933      	ldr	r1, [pc, #204]	; (8008024 <mem_malloc+0x170>)
 8007f56:	4620      	mov	r0, r4
 8007f58:	f007 f8cc 	bl	800f0f4 <iprintf>
        LWIP_ASSERT("mem_malloc: sanity check alignment",
 8007f5c:	4633      	mov	r3, r6
 8007f5e:	f240 32bd 	movw	r2, #957	; 0x3bd
 8007f62:	4931      	ldr	r1, [pc, #196]	; (8008028 <mem_malloc+0x174>)
 8007f64:	4620      	mov	r0, r4
 8007f66:	f007 f8c5 	bl	800f0f4 <iprintf>
 8007f6a:	e7e3      	b.n	8007f34 <mem_malloc+0x80>
         ptr = ptr_to_mem(ptr)->next) {
 8007f6c:	882c      	ldrh	r4, [r5, #0]
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 8007f6e:	4623      	mov	r3, r4
 8007f70:	4284      	cmp	r4, r0
 8007f72:	d239      	bcs.n	8007fe8 <mem_malloc+0x134>
  return (struct mem *)(void *)&ram[ptr];
 8007f74:	18cd      	adds	r5, r1, r3
      if ((!mem->used) &&
 8007f76:	792a      	ldrb	r2, [r5, #4]
 8007f78:	2a00      	cmp	r2, #0
 8007f7a:	d1f7      	bne.n	8007f6c <mem_malloc+0xb8>
          (mem->next - (ptr + SIZEOF_STRUCT_MEM)) >= size) {
 8007f7c:	5aca      	ldrh	r2, [r1, r3]
 8007f7e:	ebac 0303 	sub.w	r3, ip, r3
 8007f82:	4413      	add	r3, r2
      if ((!mem->used) &&
 8007f84:	42bb      	cmp	r3, r7
 8007f86:	d3f1      	bcc.n	8007f6c <mem_malloc+0xb8>
        if (mem->next - (ptr + SIZEOF_STRUCT_MEM) >= (size + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED)) {
 8007f88:	f107 0214 	add.w	r2, r7, #20
 8007f8c:	4293      	cmp	r3, r2
 8007f8e:	d3bf      	bcc.n	8007f10 <mem_malloc+0x5c>
          ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + size);
 8007f90:	3608      	adds	r6, #8
 8007f92:	4426      	add	r6, r4
 8007f94:	b2b6      	uxth	r6, r6
          LWIP_ASSERT("invalid next ptr",ptr2 != MEM_SIZE_ALIGNED);
 8007f96:	f5b6 5f20 	cmp.w	r6, #10240	; 0x2800
 8007f9a:	d0b1      	beq.n	8007f00 <mem_malloc+0x4c>
  return (struct mem *)(void *)&ram[ptr];
 8007f9c:	4b1a      	ldr	r3, [pc, #104]	; (8008008 <mem_malloc+0x154>)
 8007f9e:	681b      	ldr	r3, [r3, #0]
 8007fa0:	199a      	adds	r2, r3, r6
          mem2->used = 0;
 8007fa2:	2100      	movs	r1, #0
 8007fa4:	7111      	strb	r1, [r2, #4]
          mem2->next = mem->next;
 8007fa6:	8829      	ldrh	r1, [r5, #0]
 8007fa8:	5399      	strh	r1, [r3, r6]
          mem2->prev = ptr;
 8007faa:	8054      	strh	r4, [r2, #2]
          mem->next = ptr2;
 8007fac:	802e      	strh	r6, [r5, #0]
          mem->used = 1;
 8007fae:	2201      	movs	r2, #1
 8007fb0:	712a      	strb	r2, [r5, #4]
          if (mem2->next != MEM_SIZE_ALIGNED) {
 8007fb2:	5b9a      	ldrh	r2, [r3, r6]
 8007fb4:	f5b2 5f20 	cmp.w	r2, #10240	; 0x2800
 8007fb8:	d0ac      	beq.n	8007f14 <mem_malloc+0x60>
            ptr_to_mem(mem2->next)->prev = ptr2;
 8007fba:	4413      	add	r3, r2
 8007fbc:	805e      	strh	r6, [r3, #2]
        if (mem == lfree) {
 8007fbe:	4b13      	ldr	r3, [pc, #76]	; (800800c <mem_malloc+0x158>)
 8007fc0:	681b      	ldr	r3, [r3, #0]
 8007fc2:	42ab      	cmp	r3, r5
 8007fc4:	d1aa      	bne.n	8007f1c <mem_malloc+0x68>
          while (cur->used && cur != ram_end) {
 8007fc6:	792b      	ldrb	r3, [r5, #4]
 8007fc8:	b1d3      	cbz	r3, 8008000 <mem_malloc+0x14c>
 8007fca:	4b14      	ldr	r3, [pc, #80]	; (800801c <mem_malloc+0x168>)
 8007fcc:	6819      	ldr	r1, [r3, #0]
  return (struct mem *)(void *)&ram[ptr];
 8007fce:	4b0e      	ldr	r3, [pc, #56]	; (8008008 <mem_malloc+0x154>)
 8007fd0:	6818      	ldr	r0, [r3, #0]
 8007fd2:	462b      	mov	r3, r5
          while (cur->used && cur != ram_end) {
 8007fd4:	4299      	cmp	r1, r3
 8007fd6:	d010      	beq.n	8007ffa <mem_malloc+0x146>
  return (struct mem *)(void *)&ram[ptr];
 8007fd8:	881b      	ldrh	r3, [r3, #0]
 8007fda:	4403      	add	r3, r0
          while (cur->used && cur != ram_end) {
 8007fdc:	791a      	ldrb	r2, [r3, #4]
 8007fde:	2a00      	cmp	r2, #0
 8007fe0:	d1f8      	bne.n	8007fd4 <mem_malloc+0x120>
          lfree = cur;
 8007fe2:	4a0a      	ldr	r2, [pc, #40]	; (800800c <mem_malloc+0x158>)
 8007fe4:	6013      	str	r3, [r2, #0]
          LWIP_ASSERT("mem_malloc: !lfree->used", ((lfree == ram_end) || (!lfree->used)));
 8007fe6:	e799      	b.n	8007f1c <mem_malloc+0x68>
    /* if we got interrupted by a mem_free, try again */
  } while (local_mem_free_count != 0);
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  MEM_STATS_INC(err);
  LWIP_MEM_ALLOC_UNPROTECT();
  sys_mutex_unlock(&mem_mutex);
 8007fe8:	4806      	ldr	r0, [pc, #24]	; (8008004 <mem_malloc+0x150>)
 8007fea:	f006 fe61 	bl	800ecb0 <sys_mutex_unlock>
  LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("mem_malloc: could not allocate %"S16_F" bytes\n", (s16_t)size));
  return NULL;
 8007fee:	2000      	movs	r0, #0
}
 8007ff0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    return NULL;
 8007ff2:	2000      	movs	r0, #0
}
 8007ff4:	4770      	bx	lr
    return NULL;
 8007ff6:	2000      	movs	r0, #0
 8007ff8:	e7fa      	b.n	8007ff0 <mem_malloc+0x13c>
          lfree = cur;
 8007ffa:	4a04      	ldr	r2, [pc, #16]	; (800800c <mem_malloc+0x158>)
 8007ffc:	6013      	str	r3, [r2, #0]
          LWIP_ASSERT("mem_malloc: !lfree->used", ((lfree == ram_end) || (!lfree->used)));
 8007ffe:	e78d      	b.n	8007f1c <mem_malloc+0x68>
  return (struct mem *)(void *)&ram[ptr];
 8008000:	462b      	mov	r3, r5
 8008002:	e7ee      	b.n	8007fe2 <mem_malloc+0x12e>
 8008004:	2000b00c 	.word	0x2000b00c
 8008008:	2000b010 	.word	0x2000b010
 800800c:	2000b008 	.word	0x2000b008
 8008010:	08010b7c 	.word	0x08010b7c
 8008014:	08010d18 	.word	0x08010d18
 8008018:	080103a4 	.word	0x080103a4
 800801c:	2000b014 	.word	0x2000b014
 8008020:	08010d2c 	.word	0x08010d2c
 8008024:	08010d5c 	.word	0x08010d5c
 8008028:	08010d8c 	.word	0x08010d8c

0800802c <do_memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
do_memp_malloc_pool(const struct memp_desc *desc)
#else
do_memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 800802c:	b538      	push	{r3, r4, r5, lr}
 800802e:	4604      	mov	r4, r0

#if MEMP_MEM_MALLOC
  memp = (struct memp *)mem_malloc(MEMP_SIZE + MEMP_ALIGN_SIZE(desc->size));
  SYS_ARCH_PROTECT(old_level);
#else /* MEMP_MEM_MALLOC */
  SYS_ARCH_PROTECT(old_level);
 8008030:	f006 fe5a 	bl	800ece8 <sys_arch_protect>
 8008034:	4605      	mov	r5, r0

  memp = *desc->tab;
 8008036:	68a3      	ldr	r3, [r4, #8]
 8008038:	681c      	ldr	r4, [r3, #0]
#endif /* MEMP_MEM_MALLOC */

  if (memp != NULL) {
 800803a:	b18c      	cbz	r4, 8008060 <do_memp_malloc_pool+0x34>
#if !MEMP_MEM_MALLOC
#if MEMP_OVERFLOW_CHECK == 1
    memp_overflow_check_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */

    *desc->tab = memp->next;
 800803c:	6822      	ldr	r2, [r4, #0]
 800803e:	601a      	str	r2, [r3, #0]
    memp->line = line;
#if MEMP_MEM_MALLOC
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_MEM_MALLOC */
#endif /* MEMP_OVERFLOW_CHECK */
    LWIP_ASSERT("memp_malloc: memp properly aligned",
 8008040:	f014 0f03 	tst.w	r4, #3
 8008044:	d104      	bne.n	8008050 <do_memp_malloc_pool+0x24>
    desc->stats->used++;
    if (desc->stats->used > desc->stats->max) {
      desc->stats->max = desc->stats->used;
    }
#endif
    SYS_ARCH_UNPROTECT(old_level);
 8008046:	4628      	mov	r0, r5
 8008048:	f006 fe5a 	bl	800ed00 <sys_arch_unprotect>
    SYS_ARCH_UNPROTECT(old_level);
    LWIP_DEBUGF(MEMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("memp_malloc: out of memory in pool %s\n", desc->desc));
  }

  return NULL;
}
 800804c:	4620      	mov	r0, r4
 800804e:	bd38      	pop	{r3, r4, r5, pc}
    LWIP_ASSERT("memp_malloc: memp properly aligned",
 8008050:	4b05      	ldr	r3, [pc, #20]	; (8008068 <do_memp_malloc_pool+0x3c>)
 8008052:	f44f 728c 	mov.w	r2, #280	; 0x118
 8008056:	4905      	ldr	r1, [pc, #20]	; (800806c <do_memp_malloc_pool+0x40>)
 8008058:	4805      	ldr	r0, [pc, #20]	; (8008070 <do_memp_malloc_pool+0x44>)
 800805a:	f007 f84b 	bl	800f0f4 <iprintf>
 800805e:	e7f2      	b.n	8008046 <do_memp_malloc_pool+0x1a>
    SYS_ARCH_UNPROTECT(old_level);
 8008060:	f006 fe4e 	bl	800ed00 <sys_arch_unprotect>
  return NULL;
 8008064:	e7f2      	b.n	800804c <do_memp_malloc_pool+0x20>
 8008066:	bf00      	nop
 8008068:	08010db0 	.word	0x08010db0
 800806c:	08010de0 	.word	0x08010de0
 8008070:	080103a4 	.word	0x080103a4

08008074 <do_memp_free_pool>:
  return memp;
}

static void
do_memp_free_pool(const struct memp_desc *desc, void *mem)
{
 8008074:	b538      	push	{r3, r4, r5, lr}
 8008076:	4605      	mov	r5, r0
 8008078:	460c      	mov	r4, r1
  struct memp *memp;
  SYS_ARCH_DECL_PROTECT(old_level);

  LWIP_ASSERT("memp_free: mem properly aligned",
 800807a:	f011 0f03 	tst.w	r1, #3
 800807e:	d109      	bne.n	8008094 <do_memp_free_pool+0x20>
              ((mem_ptr_t)mem % MEM_ALIGNMENT) == 0);

  /* cast through void* to get rid of alignment warnings */
  memp = (struct memp *)(void *)((u8_t *)mem - MEMP_SIZE);

  SYS_ARCH_PROTECT(old_level);
 8008080:	f006 fe32 	bl	800ece8 <sys_arch_protect>
#if MEMP_MEM_MALLOC
  LWIP_UNUSED_ARG(desc);
  SYS_ARCH_UNPROTECT(old_level);
  mem_free(memp);
#else /* MEMP_MEM_MALLOC */
  memp->next = *desc->tab;
 8008084:	68ab      	ldr	r3, [r5, #8]
 8008086:	681b      	ldr	r3, [r3, #0]
 8008088:	6023      	str	r3, [r4, #0]
  *desc->tab = memp;
 800808a:	68ab      	ldr	r3, [r5, #8]
 800808c:	601c      	str	r4, [r3, #0]

#if MEMP_SANITY_CHECK
  LWIP_ASSERT("memp sanity", memp_sanity(desc));
#endif /* MEMP_SANITY_CHECK */

  SYS_ARCH_UNPROTECT(old_level);
 800808e:	f006 fe37 	bl	800ed00 <sys_arch_unprotect>
#endif /* !MEMP_MEM_MALLOC */
}
 8008092:	bd38      	pop	{r3, r4, r5, pc}
  LWIP_ASSERT("memp_free: mem properly aligned",
 8008094:	4b03      	ldr	r3, [pc, #12]	; (80080a4 <do_memp_free_pool+0x30>)
 8008096:	f44f 72b6 	mov.w	r2, #364	; 0x16c
 800809a:	4903      	ldr	r1, [pc, #12]	; (80080a8 <do_memp_free_pool+0x34>)
 800809c:	4803      	ldr	r0, [pc, #12]	; (80080ac <do_memp_free_pool+0x38>)
 800809e:	f007 f829 	bl	800f0f4 <iprintf>
 80080a2:	e7ed      	b.n	8008080 <do_memp_free_pool+0xc>
 80080a4:	08010db0 	.word	0x08010db0
 80080a8:	08010e04 	.word	0x08010e04
 80080ac:	080103a4 	.word	0x080103a4

080080b0 <memp_init_pool>:
  *desc->tab = NULL;
 80080b0:	6883      	ldr	r3, [r0, #8]
 80080b2:	2200      	movs	r2, #0
 80080b4:	601a      	str	r2, [r3, #0]
  memp = (struct memp *)LWIP_MEM_ALIGN(desc->base);
 80080b6:	6843      	ldr	r3, [r0, #4]
 80080b8:	3303      	adds	r3, #3
 80080ba:	f023 0303 	bic.w	r3, r3, #3
  for (i = 0; i < desc->num; ++i) {
 80080be:	8842      	ldrh	r2, [r0, #2]
 80080c0:	b15a      	cbz	r2, 80080da <memp_init_pool+0x2a>
 80080c2:	2200      	movs	r2, #0
    memp->next = *desc->tab;
 80080c4:	6881      	ldr	r1, [r0, #8]
 80080c6:	6809      	ldr	r1, [r1, #0]
 80080c8:	6019      	str	r1, [r3, #0]
    *desc->tab = memp;
 80080ca:	6881      	ldr	r1, [r0, #8]
 80080cc:	600b      	str	r3, [r1, #0]
    memp = (struct memp *)(void *)((u8_t *)memp + MEMP_SIZE + desc->size
 80080ce:	8801      	ldrh	r1, [r0, #0]
 80080d0:	440b      	add	r3, r1
  for (i = 0; i < desc->num; ++i) {
 80080d2:	3201      	adds	r2, #1
 80080d4:	8841      	ldrh	r1, [r0, #2]
 80080d6:	4291      	cmp	r1, r2
 80080d8:	dcf4      	bgt.n	80080c4 <memp_init_pool+0x14>
}
 80080da:	4770      	bx	lr

080080dc <memp_init>:
{
 80080dc:	b538      	push	{r3, r4, r5, lr}
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 80080de:	4c05      	ldr	r4, [pc, #20]	; (80080f4 <memp_init+0x18>)
 80080e0:	f104 0534 	add.w	r5, r4, #52	; 0x34
    memp_init_pool(memp_pools[i]);
 80080e4:	f854 0b04 	ldr.w	r0, [r4], #4
 80080e8:	f7ff ffe2 	bl	80080b0 <memp_init_pool>
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 80080ec:	42ac      	cmp	r4, r5
 80080ee:	d1f9      	bne.n	80080e4 <memp_init+0x8>
}
 80080f0:	bd38      	pop	{r3, r4, r5, pc}
 80080f2:	bf00      	nop
 80080f4:	08010f10 	.word	0x08010f10

080080f8 <memp_malloc_pool>:
{
 80080f8:	b510      	push	{r4, lr}
  LWIP_ASSERT("invalid pool desc", desc != NULL);
 80080fa:	4604      	mov	r4, r0
 80080fc:	b110      	cbz	r0, 8008104 <memp_malloc_pool+0xc>
  return do_memp_malloc_pool(desc);
 80080fe:	f7ff ff95 	bl	800802c <do_memp_malloc_pool>
}
 8008102:	bd10      	pop	{r4, pc}
  LWIP_ASSERT("invalid pool desc", desc != NULL);
 8008104:	4b04      	ldr	r3, [pc, #16]	; (8008118 <memp_malloc_pool+0x20>)
 8008106:	f44f 729e 	mov.w	r2, #316	; 0x13c
 800810a:	4904      	ldr	r1, [pc, #16]	; (800811c <memp_malloc_pool+0x24>)
 800810c:	4804      	ldr	r0, [pc, #16]	; (8008120 <memp_malloc_pool+0x28>)
 800810e:	f006 fff1 	bl	800f0f4 <iprintf>
    return NULL;
 8008112:	4620      	mov	r0, r4
 8008114:	e7f5      	b.n	8008102 <memp_malloc_pool+0xa>
 8008116:	bf00      	nop
 8008118:	08010db0 	.word	0x08010db0
 800811c:	08010e24 	.word	0x08010e24
 8008120:	080103a4 	.word	0x080103a4

08008124 <memp_malloc>:
{
 8008124:	b508      	push	{r3, lr}
  LWIP_ERROR("memp_malloc: type < MEMP_MAX", (type < MEMP_MAX), return NULL;);
 8008126:	280c      	cmp	r0, #12
 8008128:	d805      	bhi.n	8008136 <memp_malloc+0x12>
  memp = do_memp_malloc_pool(memp_pools[type]);
 800812a:	4b07      	ldr	r3, [pc, #28]	; (8008148 <memp_malloc+0x24>)
 800812c:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
 8008130:	f7ff ff7c 	bl	800802c <do_memp_malloc_pool>
}
 8008134:	bd08      	pop	{r3, pc}
  LWIP_ERROR("memp_malloc: type < MEMP_MAX", (type < MEMP_MAX), return NULL;);
 8008136:	4b05      	ldr	r3, [pc, #20]	; (800814c <memp_malloc+0x28>)
 8008138:	f240 1257 	movw	r2, #343	; 0x157
 800813c:	4904      	ldr	r1, [pc, #16]	; (8008150 <memp_malloc+0x2c>)
 800813e:	4805      	ldr	r0, [pc, #20]	; (8008154 <memp_malloc+0x30>)
 8008140:	f006 ffd8 	bl	800f0f4 <iprintf>
 8008144:	2000      	movs	r0, #0
 8008146:	e7f5      	b.n	8008134 <memp_malloc+0x10>
 8008148:	08010f10 	.word	0x08010f10
 800814c:	08010db0 	.word	0x08010db0
 8008150:	08010e38 	.word	0x08010e38
 8008154:	080103a4 	.word	0x080103a4

08008158 <memp_free_pool>:
 * @param desc the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free_pool(const struct memp_desc *desc, void *mem)
{
 8008158:	b508      	push	{r3, lr}
  LWIP_ASSERT("invalid pool desc", desc != NULL);
 800815a:	b128      	cbz	r0, 8008168 <memp_free_pool+0x10>
 800815c:	4603      	mov	r3, r0
  if ((desc == NULL) || (mem == NULL)) {
 800815e:	b111      	cbz	r1, 8008166 <memp_free_pool+0xe>
    return;
  }

  do_memp_free_pool(desc, mem);
 8008160:	4618      	mov	r0, r3
 8008162:	f7ff ff87 	bl	8008074 <do_memp_free_pool>
}
 8008166:	bd08      	pop	{r3, pc}
  LWIP_ASSERT("invalid pool desc", desc != NULL);
 8008168:	4b03      	ldr	r3, [pc, #12]	; (8008178 <memp_free_pool+0x20>)
 800816a:	f240 1295 	movw	r2, #405	; 0x195
 800816e:	4903      	ldr	r1, [pc, #12]	; (800817c <memp_free_pool+0x24>)
 8008170:	4803      	ldr	r0, [pc, #12]	; (8008180 <memp_free_pool+0x28>)
 8008172:	f006 ffbf 	bl	800f0f4 <iprintf>
  if ((desc == NULL) || (mem == NULL)) {
 8008176:	e7f6      	b.n	8008166 <memp_free_pool+0xe>
 8008178:	08010db0 	.word	0x08010db0
 800817c:	08010e24 	.word	0x08010e24
 8008180:	080103a4 	.word	0x080103a4

08008184 <memp_free>:
 * @param type the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free(memp_t type, void *mem)
{
 8008184:	b508      	push	{r3, lr}
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  struct memp *old_first;
#endif

  LWIP_ERROR("memp_free: type < MEMP_MAX", (type < MEMP_MAX), return;);
 8008186:	280c      	cmp	r0, #12
 8008188:	d806      	bhi.n	8008198 <memp_free+0x14>

  if (mem == NULL) {
 800818a:	b121      	cbz	r1, 8008196 <memp_free+0x12>

#ifdef LWIP_HOOK_MEMP_AVAILABLE
  old_first = *memp_pools[type]->tab;
#endif

  do_memp_free_pool(memp_pools[type], mem);
 800818c:	4b06      	ldr	r3, [pc, #24]	; (80081a8 <memp_free+0x24>)
 800818e:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
 8008192:	f7ff ff6f 	bl	8008074 <do_memp_free_pool>
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  if (old_first == NULL) {
    LWIP_HOOK_MEMP_AVAILABLE(type);
  }
#endif
}
 8008196:	bd08      	pop	{r3, pc}
  LWIP_ERROR("memp_free: type < MEMP_MAX", (type < MEMP_MAX), return;);
 8008198:	4b04      	ldr	r3, [pc, #16]	; (80081ac <memp_free+0x28>)
 800819a:	f44f 72d5 	mov.w	r2, #426	; 0x1aa
 800819e:	4904      	ldr	r1, [pc, #16]	; (80081b0 <memp_free+0x2c>)
 80081a0:	4804      	ldr	r0, [pc, #16]	; (80081b4 <memp_free+0x30>)
 80081a2:	f006 ffa7 	bl	800f0f4 <iprintf>
 80081a6:	e7f6      	b.n	8008196 <memp_free+0x12>
 80081a8:	08010f10 	.word	0x08010f10
 80081ac:	08010db0 	.word	0x08010db0
 80081b0:	08010e58 	.word	0x08010e58
 80081b4:	080103a4 	.word	0x080103a4

080081b8 <netif_null_output_ip4>:
  LWIP_UNUSED_ARG(netif);
  LWIP_UNUSED_ARG(p);
  LWIP_UNUSED_ARG(ipaddr);

  return ERR_IF;
}
 80081b8:	f06f 000b 	mvn.w	r0, #11
 80081bc:	4770      	bx	lr
	...

080081c0 <netif_issue_reports>:
{
 80081c0:	b538      	push	{r3, r4, r5, lr}
 80081c2:	460c      	mov	r4, r1
  LWIP_ASSERT("netif_issue_reports: invalid netif", netif != NULL);
 80081c4:	4605      	mov	r5, r0
 80081c6:	b170      	cbz	r0, 80081e6 <netif_issue_reports+0x26>
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 80081c8:	f895 302d 	ldrb.w	r3, [r5, #45]	; 0x2d
 80081cc:	f003 0205 	and.w	r2, r3, #5
 80081d0:	2a05      	cmp	r2, #5
 80081d2:	d107      	bne.n	80081e4 <netif_issue_reports+0x24>
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 80081d4:	f014 0f01 	tst.w	r4, #1
 80081d8:	d004      	beq.n	80081e4 <netif_issue_reports+0x24>
 80081da:	686a      	ldr	r2, [r5, #4]
 80081dc:	b112      	cbz	r2, 80081e4 <netif_issue_reports+0x24>
    if (netif->flags & (NETIF_FLAG_ETHARP)) {
 80081de:	f013 0f08 	tst.w	r3, #8
 80081e2:	d108      	bne.n	80081f6 <netif_issue_reports+0x36>
}
 80081e4:	bd38      	pop	{r3, r4, r5, pc}
  LWIP_ASSERT("netif_issue_reports: invalid netif", netif != NULL);
 80081e6:	4b06      	ldr	r3, [pc, #24]	; (8008200 <netif_issue_reports+0x40>)
 80081e8:	f240 326d 	movw	r2, #877	; 0x36d
 80081ec:	4905      	ldr	r1, [pc, #20]	; (8008204 <netif_issue_reports+0x44>)
 80081ee:	4806      	ldr	r0, [pc, #24]	; (8008208 <netif_issue_reports+0x48>)
 80081f0:	f006 ff80 	bl	800f0f4 <iprintf>
 80081f4:	e7e8      	b.n	80081c8 <netif_issue_reports+0x8>
      etharp_gratuitous(netif);
 80081f6:	1d29      	adds	r1, r5, #4
 80081f8:	4628      	mov	r0, r5
 80081fa:	f005 faad 	bl	800d758 <etharp_request>
 80081fe:	e7f1      	b.n	80081e4 <netif_issue_reports+0x24>
 8008200:	08010f44 	.word	0x08010f44
 8008204:	08010f78 	.word	0x08010f78
 8008208:	080103a4 	.word	0x080103a4

0800820c <netif_do_set_ipaddr>:
{
 800820c:	b570      	push	{r4, r5, r6, lr}
 800820e:	b082      	sub	sp, #8
 8008210:	4605      	mov	r5, r0
 8008212:	4614      	mov	r4, r2
  LWIP_ASSERT("invalid pointer", ipaddr != NULL);
 8008214:	460e      	mov	r6, r1
 8008216:	b139      	cbz	r1, 8008228 <netif_do_set_ipaddr+0x1c>
  LWIP_ASSERT("invalid pointer", old_addr != NULL);
 8008218:	b174      	cbz	r4, 8008238 <netif_do_set_ipaddr+0x2c>
  if (ip4_addr_cmp(ipaddr, netif_ip4_addr(netif)) == 0) {
 800821a:	686b      	ldr	r3, [r5, #4]
 800821c:	6832      	ldr	r2, [r6, #0]
 800821e:	429a      	cmp	r2, r3
 8008220:	d112      	bne.n	8008248 <netif_do_set_ipaddr+0x3c>
  return 0; /* address unchanged */
 8008222:	2000      	movs	r0, #0
}
 8008224:	b002      	add	sp, #8
 8008226:	bd70      	pop	{r4, r5, r6, pc}
  LWIP_ASSERT("invalid pointer", ipaddr != NULL);
 8008228:	4b10      	ldr	r3, [pc, #64]	; (800826c <netif_do_set_ipaddr+0x60>)
 800822a:	f240 12cb 	movw	r2, #459	; 0x1cb
 800822e:	4910      	ldr	r1, [pc, #64]	; (8008270 <netif_do_set_ipaddr+0x64>)
 8008230:	4810      	ldr	r0, [pc, #64]	; (8008274 <netif_do_set_ipaddr+0x68>)
 8008232:	f006 ff5f 	bl	800f0f4 <iprintf>
 8008236:	e7ef      	b.n	8008218 <netif_do_set_ipaddr+0xc>
  LWIP_ASSERT("invalid pointer", old_addr != NULL);
 8008238:	4b0c      	ldr	r3, [pc, #48]	; (800826c <netif_do_set_ipaddr+0x60>)
 800823a:	f44f 72e6 	mov.w	r2, #460	; 0x1cc
 800823e:	490c      	ldr	r1, [pc, #48]	; (8008270 <netif_do_set_ipaddr+0x64>)
 8008240:	480c      	ldr	r0, [pc, #48]	; (8008274 <netif_do_set_ipaddr+0x68>)
 8008242:	f006 ff57 	bl	800f0f4 <iprintf>
 8008246:	e7e8      	b.n	800821a <netif_do_set_ipaddr+0xe>
    *ip_2_ip4(&new_addr) = *ipaddr;
 8008248:	9201      	str	r2, [sp, #4]
    ip_addr_copy(*old_addr, *netif_ip_addr4(netif));
 800824a:	6023      	str	r3, [r4, #0]
  tcp_netif_ip_addr_changed(old_addr, new_addr);
 800824c:	a901      	add	r1, sp, #4
 800824e:	4620      	mov	r0, r4
 8008250:	f001 f970 	bl	8009534 <tcp_netif_ip_addr_changed>
  udp_netif_ip_addr_changed(old_addr, new_addr);
 8008254:	a901      	add	r1, sp, #4
 8008256:	4620      	mov	r0, r4
 8008258:	f005 f864 	bl	800d324 <udp_netif_ip_addr_changed>
    ip4_addr_set(ip_2_ip4(&netif->ip_addr), ipaddr);
 800825c:	6833      	ldr	r3, [r6, #0]
 800825e:	606b      	str	r3, [r5, #4]
    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4);
 8008260:	2101      	movs	r1, #1
 8008262:	4628      	mov	r0, r5
 8008264:	f7ff ffac 	bl	80081c0 <netif_issue_reports>
    return 1; /* address changed */
 8008268:	2001      	movs	r0, #1
 800826a:	e7db      	b.n	8008224 <netif_do_set_ipaddr+0x18>
 800826c:	08010f44 	.word	0x08010f44
 8008270:	08010598 	.word	0x08010598
 8008274:	080103a4 	.word	0x080103a4

08008278 <netif_init>:
}
 8008278:	4770      	bx	lr
	...

0800827c <netif_set_addr>:
{
 800827c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800827e:	b083      	sub	sp, #12
 8008280:	4604      	mov	r4, r0
    ipaddr = IP4_ADDR_ANY4;
 8008282:	4d15      	ldr	r5, [pc, #84]	; (80082d8 <netif_set_addr+0x5c>)
 8008284:	2900      	cmp	r1, #0
 8008286:	bf18      	it	ne
 8008288:	460d      	movne	r5, r1
    netmask = IP4_ADDR_ANY4;
 800828a:	4f13      	ldr	r7, [pc, #76]	; (80082d8 <netif_set_addr+0x5c>)
 800828c:	2a00      	cmp	r2, #0
 800828e:	bf18      	it	ne
 8008290:	4617      	movne	r7, r2
    gw = IP4_ADDR_ANY4;
 8008292:	4e11      	ldr	r6, [pc, #68]	; (80082d8 <netif_set_addr+0x5c>)
 8008294:	2b00      	cmp	r3, #0
 8008296:	bf18      	it	ne
 8008298:	461e      	movne	r6, r3
  remove = ip4_addr_isany(ipaddr);
 800829a:	b10d      	cbz	r5, 80082a0 <netif_set_addr+0x24>
 800829c:	682b      	ldr	r3, [r5, #0]
 800829e:	b993      	cbnz	r3, 80082c6 <netif_set_addr+0x4a>
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 80082a0:	aa01      	add	r2, sp, #4
 80082a2:	4629      	mov	r1, r5
 80082a4:	4620      	mov	r0, r4
 80082a6:	f7ff ffb1 	bl	800820c <netif_do_set_ipaddr>
 80082aa:	2101      	movs	r1, #1
  if (ip4_addr_cmp(netmask, netif_ip4_netmask(netif)) == 0) {
 80082ac:	683b      	ldr	r3, [r7, #0]
 80082ae:	68a2      	ldr	r2, [r4, #8]
 80082b0:	4293      	cmp	r3, r2
    ip4_addr_set(ip_2_ip4(&netif->netmask), netmask);
 80082b2:	bf18      	it	ne
 80082b4:	60a3      	strne	r3, [r4, #8]
  if (ip4_addr_cmp(gw, netif_ip4_gw(netif)) == 0) {
 80082b6:	6833      	ldr	r3, [r6, #0]
 80082b8:	68e2      	ldr	r2, [r4, #12]
 80082ba:	4293      	cmp	r3, r2
    ip4_addr_set(ip_2_ip4(&netif->gw), gw);
 80082bc:	bf18      	it	ne
 80082be:	60e3      	strne	r3, [r4, #12]
  if (!remove) {
 80082c0:	b119      	cbz	r1, 80082ca <netif_set_addr+0x4e>
}
 80082c2:	b003      	add	sp, #12
 80082c4:	bdf0      	pop	{r4, r5, r6, r7, pc}
  remove = ip4_addr_isany(ipaddr);
 80082c6:	2100      	movs	r1, #0
 80082c8:	e7f0      	b.n	80082ac <netif_set_addr+0x30>
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 80082ca:	aa01      	add	r2, sp, #4
 80082cc:	4629      	mov	r1, r5
 80082ce:	4620      	mov	r0, r4
 80082d0:	f7ff ff9c 	bl	800820c <netif_do_set_ipaddr>
}
 80082d4:	e7f5      	b.n	80082c2 <netif_set_addr+0x46>
 80082d6:	bf00      	nop
 80082d8:	080129f0 	.word	0x080129f0

080082dc <netif_add>:
{
 80082dc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80082e0:	9c09      	ldr	r4, [sp, #36]	; 0x24
  LWIP_ERROR("netif_add: invalid netif", netif != NULL, return NULL);
 80082e2:	4606      	mov	r6, r0
 80082e4:	2800      	cmp	r0, #0
 80082e6:	d02c      	beq.n	8008342 <netif_add+0x66>
  LWIP_ERROR("netif_add: No init function given", init != NULL, return NULL);
 80082e8:	2c00      	cmp	r4, #0
 80082ea:	d033      	beq.n	8008354 <netif_add+0x78>
  ip_addr_set_zero_ip4(&netif->ip_addr);
 80082ec:	2000      	movs	r0, #0
 80082ee:	6070      	str	r0, [r6, #4]
  ip_addr_set_zero_ip4(&netif->netmask);
 80082f0:	60b0      	str	r0, [r6, #8]
  ip_addr_set_zero_ip4(&netif->gw);
 80082f2:	60f0      	str	r0, [r6, #12]
  netif->output = netif_null_output_ip4;
 80082f4:	4d3b      	ldr	r5, [pc, #236]	; (80083e4 <netif_add+0x108>)
 80082f6:	6175      	str	r5, [r6, #20]
  netif->mtu = 0;
 80082f8:	84b0      	strh	r0, [r6, #36]	; 0x24
  netif->flags = 0;
 80082fa:	f886 002d 	strb.w	r0, [r6, #45]	; 0x2d
  netif->link_callback = NULL;
 80082fe:	61f0      	str	r0, [r6, #28]
  netif->state = state;
 8008300:	9808      	ldr	r0, [sp, #32]
 8008302:	6230      	str	r0, [r6, #32]
  netif->num = netif_num;
 8008304:	4838      	ldr	r0, [pc, #224]	; (80083e8 <netif_add+0x10c>)
 8008306:	7800      	ldrb	r0, [r0, #0]
 8008308:	f886 0030 	strb.w	r0, [r6, #48]	; 0x30
  netif->input = input;
 800830c:	980a      	ldr	r0, [sp, #40]	; 0x28
 800830e:	6130      	str	r0, [r6, #16]
  netif_set_addr(netif, ipaddr, netmask, gw);
 8008310:	4836      	ldr	r0, [pc, #216]	; (80083ec <netif_add+0x110>)
 8008312:	2b00      	cmp	r3, #0
 8008314:	bf08      	it	eq
 8008316:	4603      	moveq	r3, r0
 8008318:	2a00      	cmp	r2, #0
 800831a:	bf08      	it	eq
 800831c:	4602      	moveq	r2, r0
 800831e:	2900      	cmp	r1, #0
 8008320:	bf08      	it	eq
 8008322:	4601      	moveq	r1, r0
 8008324:	4630      	mov	r0, r6
 8008326:	f7ff ffa9 	bl	800827c <netif_set_addr>
  if (init(netif) != ERR_OK) {
 800832a:	4630      	mov	r0, r6
 800832c:	47a0      	blx	r4
 800832e:	2800      	cmp	r0, #0
 8008330:	d147      	bne.n	80083c2 <netif_add+0xe6>
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 8008332:	f8df a0d0 	ldr.w	sl, [pc, #208]	; 8008404 <netif_add+0x128>
        LWIP_ASSERT("netif already added", netif2 != netif);
 8008336:	f8df 80bc 	ldr.w	r8, [pc, #188]	; 80083f4 <netif_add+0x118>
 800833a:	f8df 90cc 	ldr.w	r9, [pc, #204]	; 8008408 <netif_add+0x12c>
 800833e:	4f2c      	ldr	r7, [pc, #176]	; (80083f0 <netif_add+0x114>)
 8008340:	e031      	b.n	80083a6 <netif_add+0xca>
  LWIP_ERROR("netif_add: invalid netif", netif != NULL, return NULL);
 8008342:	4b2c      	ldr	r3, [pc, #176]	; (80083f4 <netif_add+0x118>)
 8008344:	f240 1227 	movw	r2, #295	; 0x127
 8008348:	492b      	ldr	r1, [pc, #172]	; (80083f8 <netif_add+0x11c>)
 800834a:	4829      	ldr	r0, [pc, #164]	; (80083f0 <netif_add+0x114>)
 800834c:	f006 fed2 	bl	800f0f4 <iprintf>
 8008350:	4630      	mov	r0, r6
 8008352:	e045      	b.n	80083e0 <netif_add+0x104>
  LWIP_ERROR("netif_add: No init function given", init != NULL, return NULL);
 8008354:	4b27      	ldr	r3, [pc, #156]	; (80083f4 <netif_add+0x118>)
 8008356:	f44f 7294 	mov.w	r2, #296	; 0x128
 800835a:	4928      	ldr	r1, [pc, #160]	; (80083fc <netif_add+0x120>)
 800835c:	4824      	ldr	r0, [pc, #144]	; (80083f0 <netif_add+0x114>)
 800835e:	f006 fec9 	bl	800f0f4 <iprintf>
 8008362:	2000      	movs	r0, #0
 8008364:	e03c      	b.n	80083e0 <netif_add+0x104>
        LWIP_ASSERT("netif already added", netif2 != netif);
 8008366:	4643      	mov	r3, r8
 8008368:	f240 128b 	movw	r2, #395	; 0x18b
 800836c:	4649      	mov	r1, r9
 800836e:	4638      	mov	r0, r7
 8008370:	f006 fec0 	bl	800f0f4 <iprintf>
 8008374:	e009      	b.n	800838a <netif_add+0xae>
        if (netif2->num == netif->num) {
 8008376:	f896 3030 	ldrb.w	r3, [r6, #48]	; 0x30
 800837a:	f894 2030 	ldrb.w	r2, [r4, #48]	; 0x30
 800837e:	429a      	cmp	r2, r3
 8008380:	d00e      	beq.n	80083a0 <netif_add+0xc4>
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 8008382:	6824      	ldr	r4, [r4, #0]
 8008384:	b1fc      	cbz	r4, 80083c6 <netif_add+0xea>
        LWIP_ASSERT("netif already added", netif2 != netif);
 8008386:	42a6      	cmp	r6, r4
 8008388:	d0ed      	beq.n	8008366 <netif_add+0x8a>
        num_netifs++;
 800838a:	3501      	adds	r5, #1
        LWIP_ASSERT("too many netifs, max. supported number is 255", num_netifs <= 255);
 800838c:	2dff      	cmp	r5, #255	; 0xff
 800838e:	ddf2      	ble.n	8008376 <netif_add+0x9a>
 8008390:	4643      	mov	r3, r8
 8008392:	f240 128d 	movw	r2, #397	; 0x18d
 8008396:	491a      	ldr	r1, [pc, #104]	; (8008400 <netif_add+0x124>)
 8008398:	4638      	mov	r0, r7
 800839a:	f006 feab 	bl	800f0f4 <iprintf>
 800839e:	e7ea      	b.n	8008376 <netif_add+0x9a>
          netif->num++;
 80083a0:	3301      	adds	r3, #1
 80083a2:	f886 3030 	strb.w	r3, [r6, #48]	; 0x30
      if (netif->num == 255) {
 80083a6:	f896 3030 	ldrb.w	r3, [r6, #48]	; 0x30
 80083aa:	2bff      	cmp	r3, #255	; 0xff
        netif->num = 0;
 80083ac:	bf04      	itt	eq
 80083ae:	2300      	moveq	r3, #0
 80083b0:	f886 3030 	strbeq.w	r3, [r6, #48]	; 0x30
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 80083b4:	f8da 4000 	ldr.w	r4, [sl]
 80083b8:	b12c      	cbz	r4, 80083c6 <netif_add+0xea>
      num_netifs = 0;
 80083ba:	2500      	movs	r5, #0
 80083bc:	e7e3      	b.n	8008386 <netif_add+0xaa>
    netif_num = 0;
 80083be:	2300      	movs	r3, #0
 80083c0:	e007      	b.n	80083d2 <netif_add+0xf6>
    return NULL;
 80083c2:	2000      	movs	r0, #0
 80083c4:	e00c      	b.n	80083e0 <netif_add+0x104>
  if (netif->num == 254) {
 80083c6:	f896 3030 	ldrb.w	r3, [r6, #48]	; 0x30
 80083ca:	2bfe      	cmp	r3, #254	; 0xfe
 80083cc:	d0f7      	beq.n	80083be <netif_add+0xe2>
    netif_num = (u8_t)(netif->num + 1);
 80083ce:	3301      	adds	r3, #1
 80083d0:	b2db      	uxtb	r3, r3
 80083d2:	4a05      	ldr	r2, [pc, #20]	; (80083e8 <netif_add+0x10c>)
 80083d4:	7013      	strb	r3, [r2, #0]
  netif->next = netif_list;
 80083d6:	4b0b      	ldr	r3, [pc, #44]	; (8008404 <netif_add+0x128>)
 80083d8:	681a      	ldr	r2, [r3, #0]
 80083da:	6032      	str	r2, [r6, #0]
  netif_list = netif;
 80083dc:	601e      	str	r6, [r3, #0]
  return netif;
 80083de:	4630      	mov	r0, r6
}
 80083e0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80083e4:	080081b9 	.word	0x080081b9
 80083e8:	20010900 	.word	0x20010900
 80083ec:	080129f0 	.word	0x080129f0
 80083f0:	080103a4 	.word	0x080103a4
 80083f4:	08010f44 	.word	0x08010f44
 80083f8:	08010f9c 	.word	0x08010f9c
 80083fc:	08010fb8 	.word	0x08010fb8
 8008400:	08010ff0 	.word	0x08010ff0
 8008404:	200108fc 	.word	0x200108fc
 8008408:	08010fdc 	.word	0x08010fdc

0800840c <netif_set_default>:
  netif_default = netif;
 800840c:	4b01      	ldr	r3, [pc, #4]	; (8008414 <netif_set_default+0x8>)
 800840e:	6018      	str	r0, [r3, #0]
}
 8008410:	4770      	bx	lr
 8008412:	bf00      	nop
 8008414:	200108f8 	.word	0x200108f8

08008418 <netif_set_up>:
{
 8008418:	b508      	push	{r3, lr}
  LWIP_ERROR("netif_set_up: invalid netif", netif != NULL, return);
 800841a:	b128      	cbz	r0, 8008428 <netif_set_up+0x10>
  if (!(netif->flags & NETIF_FLAG_UP)) {
 800841c:	f890 302d 	ldrb.w	r3, [r0, #45]	; 0x2d
 8008420:	f013 0f01 	tst.w	r3, #1
 8008424:	d008      	beq.n	8008438 <netif_set_up+0x20>
}
 8008426:	bd08      	pop	{r3, pc}
  LWIP_ERROR("netif_set_up: invalid netif", netif != NULL, return);
 8008428:	4b07      	ldr	r3, [pc, #28]	; (8008448 <netif_set_up+0x30>)
 800842a:	f44f 7254 	mov.w	r2, #848	; 0x350
 800842e:	4907      	ldr	r1, [pc, #28]	; (800844c <netif_set_up+0x34>)
 8008430:	4807      	ldr	r0, [pc, #28]	; (8008450 <netif_set_up+0x38>)
 8008432:	f006 fe5f 	bl	800f0f4 <iprintf>
 8008436:	e7f6      	b.n	8008426 <netif_set_up+0xe>
    netif_set_flags(netif, NETIF_FLAG_UP);
 8008438:	f043 0301 	orr.w	r3, r3, #1
 800843c:	f880 302d 	strb.w	r3, [r0, #45]	; 0x2d
    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 8008440:	2103      	movs	r1, #3
 8008442:	f7ff febd 	bl	80081c0 <netif_issue_reports>
 8008446:	e7ee      	b.n	8008426 <netif_set_up+0xe>
 8008448:	08010f44 	.word	0x08010f44
 800844c:	08011020 	.word	0x08011020
 8008450:	080103a4 	.word	0x080103a4

08008454 <netif_set_down>:
{
 8008454:	b508      	push	{r3, lr}
  LWIP_ERROR("netif_set_down: invalid netif", netif != NULL, return);
 8008456:	b160      	cbz	r0, 8008472 <netif_set_down+0x1e>
  if (netif->flags & NETIF_FLAG_UP) {
 8008458:	f890 302d 	ldrb.w	r3, [r0, #45]	; 0x2d
 800845c:	f013 0f01 	tst.w	r3, #1
 8008460:	d006      	beq.n	8008470 <netif_set_down+0x1c>
    netif_clear_flags(netif, NETIF_FLAG_UP);
 8008462:	f023 0101 	bic.w	r1, r3, #1
 8008466:	f880 102d 	strb.w	r1, [r0, #45]	; 0x2d
    if (netif->flags & NETIF_FLAG_ETHARP) {
 800846a:	f013 0f08 	tst.w	r3, #8
 800846e:	d108      	bne.n	8008482 <netif_set_down+0x2e>
}
 8008470:	bd08      	pop	{r3, pc}
  LWIP_ERROR("netif_set_down: invalid netif", netif != NULL, return);
 8008472:	4b05      	ldr	r3, [pc, #20]	; (8008488 <netif_set_down+0x34>)
 8008474:	f240 329b 	movw	r2, #923	; 0x39b
 8008478:	4904      	ldr	r1, [pc, #16]	; (800848c <netif_set_down+0x38>)
 800847a:	4805      	ldr	r0, [pc, #20]	; (8008490 <netif_set_down+0x3c>)
 800847c:	f006 fe3a 	bl	800f0f4 <iprintf>
 8008480:	e7f6      	b.n	8008470 <netif_set_down+0x1c>
      etharp_cleanup_netif(netif);
 8008482:	f005 f8a5 	bl	800d5d0 <etharp_cleanup_netif>
    NETIF_STATUS_CALLBACK(netif);
 8008486:	e7f3      	b.n	8008470 <netif_set_down+0x1c>
 8008488:	08010f44 	.word	0x08010f44
 800848c:	0801103c 	.word	0x0801103c
 8008490:	080103a4 	.word	0x080103a4

08008494 <netif_set_link_up>:
{
 8008494:	b510      	push	{r4, lr}
  LWIP_ERROR("netif_set_link_up: invalid netif", netif != NULL, return);
 8008496:	b130      	cbz	r0, 80084a6 <netif_set_link_up+0x12>
 8008498:	4604      	mov	r4, r0
  if (!(netif->flags & NETIF_FLAG_LINK_UP)) {
 800849a:	f890 302d 	ldrb.w	r3, [r0, #45]	; 0x2d
 800849e:	f013 0f04 	tst.w	r3, #4
 80084a2:	d008      	beq.n	80084b6 <netif_set_link_up+0x22>
}
 80084a4:	bd10      	pop	{r4, pc}
  LWIP_ERROR("netif_set_link_up: invalid netif", netif != NULL, return);
 80084a6:	4b0a      	ldr	r3, [pc, #40]	; (80084d0 <netif_set_link_up+0x3c>)
 80084a8:	f44f 7278 	mov.w	r2, #992	; 0x3e0
 80084ac:	4909      	ldr	r1, [pc, #36]	; (80084d4 <netif_set_link_up+0x40>)
 80084ae:	480a      	ldr	r0, [pc, #40]	; (80084d8 <netif_set_link_up+0x44>)
 80084b0:	f006 fe20 	bl	800f0f4 <iprintf>
 80084b4:	e7f6      	b.n	80084a4 <netif_set_link_up+0x10>
    netif_set_flags(netif, NETIF_FLAG_LINK_UP);
 80084b6:	f043 0304 	orr.w	r3, r3, #4
 80084ba:	f880 302d 	strb.w	r3, [r0, #45]	; 0x2d
    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 80084be:	2103      	movs	r1, #3
 80084c0:	f7ff fe7e 	bl	80081c0 <netif_issue_reports>
    NETIF_LINK_CALLBACK(netif);
 80084c4:	69e3      	ldr	r3, [r4, #28]
 80084c6:	2b00      	cmp	r3, #0
 80084c8:	d0ec      	beq.n	80084a4 <netif_set_link_up+0x10>
 80084ca:	4620      	mov	r0, r4
 80084cc:	4798      	blx	r3
 80084ce:	e7e9      	b.n	80084a4 <netif_set_link_up+0x10>
 80084d0:	08010f44 	.word	0x08010f44
 80084d4:	0801105c 	.word	0x0801105c
 80084d8:	080103a4 	.word	0x080103a4

080084dc <netif_set_link_down>:
{
 80084dc:	b508      	push	{r3, lr}
  LWIP_ERROR("netif_set_link_down: invalid netif", netif != NULL, return);
 80084de:	b160      	cbz	r0, 80084fa <netif_set_link_down+0x1e>
  if (netif->flags & NETIF_FLAG_LINK_UP) {
 80084e0:	f890 302d 	ldrb.w	r3, [r0, #45]	; 0x2d
 80084e4:	f013 0f04 	tst.w	r3, #4
 80084e8:	d006      	beq.n	80084f8 <netif_set_link_down+0x1c>
    netif_clear_flags(netif, NETIF_FLAG_LINK_UP);
 80084ea:	f023 0304 	bic.w	r3, r3, #4
 80084ee:	f880 302d 	strb.w	r3, [r0, #45]	; 0x2d
    NETIF_LINK_CALLBACK(netif);
 80084f2:	69c3      	ldr	r3, [r0, #28]
 80084f4:	b103      	cbz	r3, 80084f8 <netif_set_link_down+0x1c>
 80084f6:	4798      	blx	r3
}
 80084f8:	bd08      	pop	{r3, pc}
  LWIP_ERROR("netif_set_link_down: invalid netif", netif != NULL, return);
 80084fa:	4b04      	ldr	r3, [pc, #16]	; (800850c <netif_set_link_down+0x30>)
 80084fc:	f240 4206 	movw	r2, #1030	; 0x406
 8008500:	4903      	ldr	r1, [pc, #12]	; (8008510 <netif_set_link_down+0x34>)
 8008502:	4804      	ldr	r0, [pc, #16]	; (8008514 <netif_set_link_down+0x38>)
 8008504:	f006 fdf6 	bl	800f0f4 <iprintf>
 8008508:	e7f6      	b.n	80084f8 <netif_set_link_down+0x1c>
 800850a:	bf00      	nop
 800850c:	08010f44 	.word	0x08010f44
 8008510:	08011080 	.word	0x08011080
 8008514:	080103a4 	.word	0x080103a4

08008518 <netif_set_link_callback>:
  if (netif) {
 8008518:	b100      	cbz	r0, 800851c <netif_set_link_callback+0x4>
    netif->link_callback = link_callback;
 800851a:	61c1      	str	r1, [r0, #28]
}
 800851c:	4770      	bx	lr
	...

08008520 <netif_get_by_index>:
{
  struct netif *netif;

  LWIP_ASSERT_CORE_LOCKED();

  if (idx != NETIF_NO_INDEX) {
 8008520:	4602      	mov	r2, r0
 8008522:	b160      	cbz	r0, 800853e <netif_get_by_index+0x1e>
    NETIF_FOREACH(netif) {
 8008524:	4b07      	ldr	r3, [pc, #28]	; (8008544 <netif_get_by_index+0x24>)
 8008526:	6818      	ldr	r0, [r3, #0]
 8008528:	b150      	cbz	r0, 8008540 <netif_get_by_index+0x20>
      if (idx == netif_get_index(netif)) {
 800852a:	f890 3030 	ldrb.w	r3, [r0, #48]	; 0x30
 800852e:	3301      	adds	r3, #1
 8008530:	b2db      	uxtb	r3, r3
 8008532:	4293      	cmp	r3, r2
 8008534:	d004      	beq.n	8008540 <netif_get_by_index+0x20>
    NETIF_FOREACH(netif) {
 8008536:	6800      	ldr	r0, [r0, #0]
 8008538:	2800      	cmp	r0, #0
 800853a:	d1f6      	bne.n	800852a <netif_get_by_index+0xa>
 800853c:	4770      	bx	lr
        return netif; /* found! */
      }
    }
  }

  return NULL;
 800853e:	2000      	movs	r0, #0
}
 8008540:	4770      	bx	lr
 8008542:	bf00      	nop
 8008544:	200108fc 	.word	0x200108fc

08008548 <pbuf_add_header_impl>:
 * @return non-zero on failure, zero on success.
 *
 */
static u8_t
pbuf_add_header_impl(struct pbuf *p, size_t header_size_increment, u8_t force)
{
 8008548:	b508      	push	{r3, lr}
  u16_t type_internal;
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 800854a:	b1d8      	cbz	r0, 8008584 <pbuf_add_header_impl+0x3c>
 800854c:	4603      	mov	r3, r0
  if ((p == NULL) || (header_size_increment > 0xFFFF)) {
 800854e:	f5b1 3f80 	cmp.w	r1, #65536	; 0x10000
 8008552:	d22e      	bcs.n	80085b2 <pbuf_add_header_impl+0x6a>
    return 1;
  }
  if (header_size_increment == 0) {
 8008554:	b339      	cbz	r1, 80085a6 <pbuf_add_header_impl+0x5e>
    return 0;
  }

  increment_magnitude = (u16_t)header_size_increment;
 8008556:	fa1f fc81 	uxth.w	ip, r1
  /* Do not allow tot_len to wrap as a result. */
  if ((u16_t)(increment_magnitude + p->tot_len) < increment_magnitude) {
 800855a:	8918      	ldrh	r0, [r3, #8]
 800855c:	4460      	add	r0, ip
 800855e:	b280      	uxth	r0, r0
 8008560:	4560      	cmp	r0, ip
 8008562:	d322      	bcc.n	80085aa <pbuf_add_header_impl+0x62>
  }

  type_internal = p->type_internal;

  /* pbuf types containing payloads? */
  if (type_internal & PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS) {
 8008564:	f993 e00c 	ldrsb.w	lr, [r3, #12]
 8008568:	f1be 0f00 	cmp.w	lr, #0
 800856c:	db13      	blt.n	8008596 <pbuf_add_header_impl+0x4e>
      return 1;
    }
    /* pbuf types referring to external payloads? */
  } else {
    /* hide a header in the payload? */
    if (force) {
 800856e:	b1f2      	cbz	r2, 80085ae <pbuf_add_header_impl+0x66>
      payload = (u8_t *)p->payload - header_size_increment;
 8008570:	685a      	ldr	r2, [r3, #4]
 8008572:	1a51      	subs	r1, r2, r1
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_add_header: old %p new %p (%"U16_F")\n",
              (void *)p->payload, (void *)payload, increment_magnitude));

  /* modify pbuf fields */
  p->payload = payload;
 8008574:	6059      	str	r1, [r3, #4]
  p->len = (u16_t)(p->len + increment_magnitude);
 8008576:	895a      	ldrh	r2, [r3, #10]
 8008578:	4494      	add	ip, r2
 800857a:	f8a3 c00a 	strh.w	ip, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len + increment_magnitude);
 800857e:	8118      	strh	r0, [r3, #8]


  return 0;
 8008580:	2000      	movs	r0, #0
 8008582:	e017      	b.n	80085b4 <pbuf_add_header_impl+0x6c>
  LWIP_ASSERT("p != NULL", p != NULL);
 8008584:	4b0c      	ldr	r3, [pc, #48]	; (80085b8 <pbuf_add_header_impl+0x70>)
 8008586:	f240 12df 	movw	r2, #479	; 0x1df
 800858a:	490c      	ldr	r1, [pc, #48]	; (80085bc <pbuf_add_header_impl+0x74>)
 800858c:	480c      	ldr	r0, [pc, #48]	; (80085c0 <pbuf_add_header_impl+0x78>)
 800858e:	f006 fdb1 	bl	800f0f4 <iprintf>
    return 1;
 8008592:	2001      	movs	r0, #1
 8008594:	e00e      	b.n	80085b4 <pbuf_add_header_impl+0x6c>
    payload = (u8_t *)p->payload - header_size_increment;
 8008596:	685a      	ldr	r2, [r3, #4]
 8008598:	1a51      	subs	r1, r2, r1
    if ((u8_t *)payload < (u8_t *)p + SIZEOF_STRUCT_PBUF) {
 800859a:	f103 0210 	add.w	r2, r3, #16
 800859e:	4291      	cmp	r1, r2
 80085a0:	d2e8      	bcs.n	8008574 <pbuf_add_header_impl+0x2c>
      return 1;
 80085a2:	2001      	movs	r0, #1
 80085a4:	e006      	b.n	80085b4 <pbuf_add_header_impl+0x6c>
    return 0;
 80085a6:	2000      	movs	r0, #0
 80085a8:	e004      	b.n	80085b4 <pbuf_add_header_impl+0x6c>
    return 1;
 80085aa:	2001      	movs	r0, #1
 80085ac:	e002      	b.n	80085b4 <pbuf_add_header_impl+0x6c>
      return 1;
 80085ae:	2001      	movs	r0, #1
 80085b0:	e000      	b.n	80085b4 <pbuf_add_header_impl+0x6c>
    return 1;
 80085b2:	2001      	movs	r0, #1
}
 80085b4:	bd08      	pop	{r3, pc}
 80085b6:	bf00      	nop
 80085b8:	080110a4 	.word	0x080110a4
 80085bc:	08010748 	.word	0x08010748
 80085c0:	080103a4 	.word	0x080103a4

080085c4 <pbuf_free_ooseq_callback>:
{
 80085c4:	b508      	push	{r3, lr}
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 0);
 80085c6:	f006 fb8f 	bl	800ece8 <sys_arch_protect>
 80085ca:	4b08      	ldr	r3, [pc, #32]	; (80085ec <pbuf_free_ooseq_callback+0x28>)
 80085cc:	2200      	movs	r2, #0
 80085ce:	701a      	strb	r2, [r3, #0]
 80085d0:	f006 fb96 	bl	800ed00 <sys_arch_unprotect>
  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 80085d4:	4b06      	ldr	r3, [pc, #24]	; (80085f0 <pbuf_free_ooseq_callback+0x2c>)
 80085d6:	6818      	ldr	r0, [r3, #0]
 80085d8:	b138      	cbz	r0, 80085ea <pbuf_free_ooseq_callback+0x26>
    if (pcb->ooseq != NULL) {
 80085da:	6f43      	ldr	r3, [r0, #116]	; 0x74
 80085dc:	b91b      	cbnz	r3, 80085e6 <pbuf_free_ooseq_callback+0x22>
  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 80085de:	68c0      	ldr	r0, [r0, #12]
 80085e0:	2800      	cmp	r0, #0
 80085e2:	d1fa      	bne.n	80085da <pbuf_free_ooseq_callback+0x16>
 80085e4:	e001      	b.n	80085ea <pbuf_free_ooseq_callback+0x26>
      tcp_free_ooseq(pcb);
 80085e6:	f000 fe3d 	bl	8009264 <tcp_free_ooseq>
}
 80085ea:	bd08      	pop	{r3, pc}
 80085ec:	20010901 	.word	0x20010901
 80085f0:	20010904 	.word	0x20010904

080085f4 <pbuf_alloc_reference>:
{
 80085f4:	b570      	push	{r4, r5, r6, lr}
 80085f6:	4606      	mov	r6, r0
 80085f8:	460d      	mov	r5, r1
 80085fa:	4614      	mov	r4, r2
  LWIP_ASSERT("invalid pbuf_type", (type == PBUF_REF) || (type == PBUF_ROM));
 80085fc:	f022 0340 	bic.w	r3, r2, #64	; 0x40
 8008600:	b29b      	uxth	r3, r3
 8008602:	2b01      	cmp	r3, #1
 8008604:	d110      	bne.n	8008628 <pbuf_alloc_reference+0x34>
  p = (struct pbuf *)memp_malloc(MEMP_PBUF);
 8008606:	200b      	movs	r0, #11
 8008608:	f7ff fd8c 	bl	8008124 <memp_malloc>
  if (p == NULL) {
 800860c:	4603      	mov	r3, r0
 800860e:	b148      	cbz	r0, 8008624 <pbuf_alloc_reference+0x30>
  p->next = NULL;
 8008610:	2200      	movs	r2, #0
 8008612:	6002      	str	r2, [r0, #0]
  p->payload = payload;
 8008614:	6046      	str	r6, [r0, #4]
  p->tot_len = tot_len;
 8008616:	8105      	strh	r5, [r0, #8]
  p->len = len;
 8008618:	8145      	strh	r5, [r0, #10]
  p->type_internal = (u8_t)type;
 800861a:	7304      	strb	r4, [r0, #12]
  p->flags = flags;
 800861c:	7342      	strb	r2, [r0, #13]
  p->ref = 1;
 800861e:	2101      	movs	r1, #1
 8008620:	7381      	strb	r1, [r0, #14]
  p->if_idx = NETIF_NO_INDEX;
 8008622:	73c2      	strb	r2, [r0, #15]
}
 8008624:	4618      	mov	r0, r3
 8008626:	bd70      	pop	{r4, r5, r6, pc}
  LWIP_ASSERT("invalid pbuf_type", (type == PBUF_REF) || (type == PBUF_ROM));
 8008628:	4b03      	ldr	r3, [pc, #12]	; (8008638 <pbuf_alloc_reference+0x44>)
 800862a:	f44f 72a5 	mov.w	r2, #330	; 0x14a
 800862e:	4903      	ldr	r1, [pc, #12]	; (800863c <pbuf_alloc_reference+0x48>)
 8008630:	4803      	ldr	r0, [pc, #12]	; (8008640 <pbuf_alloc_reference+0x4c>)
 8008632:	f006 fd5f 	bl	800f0f4 <iprintf>
 8008636:	e7e6      	b.n	8008606 <pbuf_alloc_reference+0x12>
 8008638:	080110a4 	.word	0x080110a4
 800863c:	080110d4 	.word	0x080110d4
 8008640:	080103a4 	.word	0x080103a4

08008644 <pbuf_alloced_custom>:
{
 8008644:	b430      	push	{r4, r5}
 8008646:	9c02      	ldr	r4, [sp, #8]
  if (LWIP_MEM_ALIGN_SIZE(offset) + length > payload_mem_len) {
 8008648:	3003      	adds	r0, #3
 800864a:	f020 0003 	bic.w	r0, r0, #3
 800864e:	eb01 0c00 	add.w	ip, r1, r0
 8008652:	f8bd 500c 	ldrh.w	r5, [sp, #12]
 8008656:	45ac      	cmp	ip, r5
 8008658:	d80f      	bhi.n	800867a <pbuf_alloced_custom+0x36>
  if (payload_mem != NULL) {
 800865a:	b104      	cbz	r4, 800865e <pbuf_alloced_custom+0x1a>
    payload = (u8_t *)payload_mem + LWIP_MEM_ALIGN_SIZE(offset);
 800865c:	4404      	add	r4, r0
  pbuf_init_alloced_pbuf(&p->pbuf, payload, length, length, type, PBUF_FLAG_IS_CUSTOM);
 800865e:	4618      	mov	r0, r3
  p->next = NULL;
 8008660:	2500      	movs	r5, #0
 8008662:	601d      	str	r5, [r3, #0]
  p->payload = payload;
 8008664:	605c      	str	r4, [r3, #4]
  p->tot_len = tot_len;
 8008666:	8119      	strh	r1, [r3, #8]
  p->len = len;
 8008668:	8159      	strh	r1, [r3, #10]
  p->type_internal = (u8_t)type;
 800866a:	731a      	strb	r2, [r3, #12]
  p->flags = flags;
 800866c:	2202      	movs	r2, #2
 800866e:	735a      	strb	r2, [r3, #13]
  p->ref = 1;
 8008670:	2201      	movs	r2, #1
 8008672:	739a      	strb	r2, [r3, #14]
  p->if_idx = NETIF_NO_INDEX;
 8008674:	73dd      	strb	r5, [r3, #15]
}
 8008676:	bc30      	pop	{r4, r5}
 8008678:	4770      	bx	lr
    return NULL;
 800867a:	2000      	movs	r0, #0
 800867c:	e7fb      	b.n	8008676 <pbuf_alloced_custom+0x32>

0800867e <pbuf_add_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_add_header(struct pbuf *p, size_t header_size_increment)
{
 800867e:	b508      	push	{r3, lr}
  return pbuf_add_header_impl(p, header_size_increment, 0);
 8008680:	2200      	movs	r2, #0
 8008682:	f7ff ff61 	bl	8008548 <pbuf_add_header_impl>
}
 8008686:	bd08      	pop	{r3, pc}

08008688 <pbuf_remove_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_remove_header(struct pbuf *p, size_t header_size_decrement)
{
 8008688:	b510      	push	{r4, lr}
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 800868a:	b190      	cbz	r0, 80086b2 <pbuf_remove_header+0x2a>
 800868c:	4603      	mov	r3, r0
  if ((p == NULL) || (header_size_decrement > 0xFFFF)) {
 800868e:	f5b1 3f80 	cmp.w	r1, #65536	; 0x10000
 8008692:	d222      	bcs.n	80086da <pbuf_remove_header+0x52>
    return 1;
  }
  if (header_size_decrement == 0) {
 8008694:	b1f9      	cbz	r1, 80086d6 <pbuf_remove_header+0x4e>
    return 0;
  }

  increment_magnitude = (u16_t)header_size_decrement;
 8008696:	b288      	uxth	r0, r1
  /* Check that we aren't going to move off the end of the pbuf */
  LWIP_ERROR("increment_magnitude <= p->len", (increment_magnitude <= p->len), return 1;);
 8008698:	895a      	ldrh	r2, [r3, #10]
 800869a:	4282      	cmp	r2, r0
 800869c:	d312      	bcc.n	80086c4 <pbuf_remove_header+0x3c>
  /* remember current payload pointer */
  payload = p->payload;
  LWIP_UNUSED_ARG(payload); /* only used in LWIP_DEBUGF below */

  /* increase payload pointer (guarded by length check above) */
  p->payload = (u8_t *)p->payload + header_size_decrement;
 800869e:	685c      	ldr	r4, [r3, #4]
 80086a0:	4421      	add	r1, r4
 80086a2:	6059      	str	r1, [r3, #4]
  /* modify pbuf length fields */
  p->len = (u16_t)(p->len - increment_magnitude);
 80086a4:	1a12      	subs	r2, r2, r0
 80086a6:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len - increment_magnitude);
 80086a8:	891a      	ldrh	r2, [r3, #8]
 80086aa:	1a10      	subs	r0, r2, r0
 80086ac:	8118      	strh	r0, [r3, #8]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_remove_header: old %p new %p (%"U16_F")\n",
              (void *)payload, (void *)p->payload, increment_magnitude));

  return 0;
 80086ae:	2000      	movs	r0, #0
}
 80086b0:	bd10      	pop	{r4, pc}
  LWIP_ASSERT("p != NULL", p != NULL);
 80086b2:	4b0b      	ldr	r3, [pc, #44]	; (80086e0 <pbuf_remove_header+0x58>)
 80086b4:	f240 224b 	movw	r2, #587	; 0x24b
 80086b8:	490a      	ldr	r1, [pc, #40]	; (80086e4 <pbuf_remove_header+0x5c>)
 80086ba:	480b      	ldr	r0, [pc, #44]	; (80086e8 <pbuf_remove_header+0x60>)
 80086bc:	f006 fd1a 	bl	800f0f4 <iprintf>
    return 1;
 80086c0:	2001      	movs	r0, #1
 80086c2:	e7f5      	b.n	80086b0 <pbuf_remove_header+0x28>
  LWIP_ERROR("increment_magnitude <= p->len", (increment_magnitude <= p->len), return 1;);
 80086c4:	4b06      	ldr	r3, [pc, #24]	; (80086e0 <pbuf_remove_header+0x58>)
 80086c6:	f240 2255 	movw	r2, #597	; 0x255
 80086ca:	4908      	ldr	r1, [pc, #32]	; (80086ec <pbuf_remove_header+0x64>)
 80086cc:	4806      	ldr	r0, [pc, #24]	; (80086e8 <pbuf_remove_header+0x60>)
 80086ce:	f006 fd11 	bl	800f0f4 <iprintf>
 80086d2:	2001      	movs	r0, #1
 80086d4:	e7ec      	b.n	80086b0 <pbuf_remove_header+0x28>
    return 0;
 80086d6:	2000      	movs	r0, #0
 80086d8:	e7ea      	b.n	80086b0 <pbuf_remove_header+0x28>
    return 1;
 80086da:	2001      	movs	r0, #1
 80086dc:	e7e8      	b.n	80086b0 <pbuf_remove_header+0x28>
 80086de:	bf00      	nop
 80086e0:	080110a4 	.word	0x080110a4
 80086e4:	08010748 	.word	0x08010748
 80086e8:	080103a4 	.word	0x080103a4
 80086ec:	080110e8 	.word	0x080110e8

080086f0 <pbuf_header_force>:
 * Same as pbuf_header but does not check if 'header_size > 0' is allowed.
 * This is used internally only, to allow PBUF_REF for RX.
 */
u8_t
pbuf_header_force(struct pbuf *p, s16_t header_size_increment)
{
 80086f0:	b508      	push	{r3, lr}
  if (header_size_increment < 0) {
 80086f2:	2900      	cmp	r1, #0
 80086f4:	db03      	blt.n	80086fe <pbuf_header_force+0xe>
    return pbuf_add_header_impl(p, (size_t)header_size_increment, force);
 80086f6:	2201      	movs	r2, #1
 80086f8:	f7ff ff26 	bl	8008548 <pbuf_add_header_impl>
  return pbuf_header_impl(p, header_size_increment, 1);
}
 80086fc:	bd08      	pop	{r3, pc}
    return pbuf_remove_header(p, (size_t) - header_size_increment);
 80086fe:	4249      	negs	r1, r1
 8008700:	f7ff ffc2 	bl	8008688 <pbuf_remove_header>
 8008704:	e7fa      	b.n	80086fc <pbuf_header_force+0xc>
	...

08008708 <pbuf_free>:
 * 1->1->1 becomes .......
 *
 */
u8_t
pbuf_free(struct pbuf *p)
{
 8008708:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  u8_t alloc_src;
  struct pbuf *q;
  u8_t count;

  if (p == NULL) {
 800870c:	b140      	cbz	r0, 8008720 <pbuf_free+0x18>
 800870e:	4604      	mov	r4, r0
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free(%p)\n", (void *)p));

  PERF_START;

  count = 0;
 8008710:	2600      	movs	r6, #0
    /* Since decrementing ref cannot be guaranteed to be a single machine operation
     * we must protect it. We put the new ref into a local variable to prevent
     * further protection. */
    SYS_ARCH_PROTECT(old_level);
    /* all pbufs in a chain are referenced at least once */
    LWIP_ASSERT("pbuf_free: p->ref > 0", p->ref > 0);
 8008712:	f8df 90bc 	ldr.w	r9, [pc, #188]	; 80087d0 <pbuf_free+0xc8>
 8008716:	f8df a0cc 	ldr.w	sl, [pc, #204]	; 80087e4 <pbuf_free+0xdc>
 800871a:	f8df 80bc 	ldr.w	r8, [pc, #188]	; 80087d8 <pbuf_free+0xd0>
 800871e:	e01a      	b.n	8008756 <pbuf_free+0x4e>
    LWIP_ASSERT("p != NULL", p != NULL);
 8008720:	4b2b      	ldr	r3, [pc, #172]	; (80087d0 <pbuf_free+0xc8>)
 8008722:	f44f 7237 	mov.w	r2, #732	; 0x2dc
 8008726:	492b      	ldr	r1, [pc, #172]	; (80087d4 <pbuf_free+0xcc>)
 8008728:	482b      	ldr	r0, [pc, #172]	; (80087d8 <pbuf_free+0xd0>)
 800872a:	f006 fce3 	bl	800f0f4 <iprintf>
    return 0;
 800872e:	2600      	movs	r6, #0
    }
  }
  PERF_STOP("pbuf_free");
  /* return number of de-allocated pbufs */
  return count;
}
 8008730:	4630      	mov	r0, r6
 8008732:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    LWIP_ASSERT("pbuf_free: p->ref > 0", p->ref > 0);
 8008736:	464b      	mov	r3, r9
 8008738:	f240 22f1 	movw	r2, #753	; 0x2f1
 800873c:	4651      	mov	r1, sl
 800873e:	4640      	mov	r0, r8
 8008740:	f006 fcd8 	bl	800f0f4 <iprintf>
 8008744:	e00d      	b.n	8008762 <pbuf_free+0x5a>
        pc->custom_free_function(p);
 8008746:	6923      	ldr	r3, [r4, #16]
 8008748:	4620      	mov	r0, r4
 800874a:	4798      	blx	r3
      count++;
 800874c:	3601      	adds	r6, #1
 800874e:	b2f6      	uxtb	r6, r6
  while (p != NULL) {
 8008750:	2d00      	cmp	r5, #0
 8008752:	d0ed      	beq.n	8008730 <pbuf_free+0x28>
      p = q;
 8008754:	462c      	mov	r4, r5
    SYS_ARCH_PROTECT(old_level);
 8008756:	f006 fac7 	bl	800ece8 <sys_arch_protect>
 800875a:	4607      	mov	r7, r0
    LWIP_ASSERT("pbuf_free: p->ref > 0", p->ref > 0);
 800875c:	7ba3      	ldrb	r3, [r4, #14]
 800875e:	2b00      	cmp	r3, #0
 8008760:	d0e9      	beq.n	8008736 <pbuf_free+0x2e>
    ref = --(p->ref);
 8008762:	7ba5      	ldrb	r5, [r4, #14]
 8008764:	3d01      	subs	r5, #1
 8008766:	b2ed      	uxtb	r5, r5
 8008768:	73a5      	strb	r5, [r4, #14]
    SYS_ARCH_UNPROTECT(old_level);
 800876a:	4638      	mov	r0, r7
 800876c:	f006 fac8 	bl	800ed00 <sys_arch_unprotect>
    if (ref == 0) {
 8008770:	2d00      	cmp	r5, #0
 8008772:	d1dd      	bne.n	8008730 <pbuf_free+0x28>
      q = p->next;
 8008774:	6825      	ldr	r5, [r4, #0]
      if ((p->flags & PBUF_FLAG_IS_CUSTOM) != 0) {
 8008776:	7b63      	ldrb	r3, [r4, #13]
 8008778:	f013 0f02 	tst.w	r3, #2
 800877c:	d00a      	beq.n	8008794 <pbuf_free+0x8c>
        LWIP_ASSERT("pc->custom_free_function != NULL", pc->custom_free_function != NULL);
 800877e:	6923      	ldr	r3, [r4, #16]
 8008780:	2b00      	cmp	r3, #0
 8008782:	d1e0      	bne.n	8008746 <pbuf_free+0x3e>
 8008784:	464b      	mov	r3, r9
 8008786:	f240 22ff 	movw	r2, #767	; 0x2ff
 800878a:	4914      	ldr	r1, [pc, #80]	; (80087dc <pbuf_free+0xd4>)
 800878c:	4640      	mov	r0, r8
 800878e:	f006 fcb1 	bl	800f0f4 <iprintf>
 8008792:	e7d8      	b.n	8008746 <pbuf_free+0x3e>
      alloc_src = pbuf_get_allocsrc(p);
 8008794:	7b23      	ldrb	r3, [r4, #12]
 8008796:	f003 030f 	and.w	r3, r3, #15
        if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF_POOL) {
 800879a:	2b02      	cmp	r3, #2
 800879c:	d006      	beq.n	80087ac <pbuf_free+0xa4>
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF) {
 800879e:	2b01      	cmp	r3, #1
 80087a0:	d009      	beq.n	80087b6 <pbuf_free+0xae>
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) {
 80087a2:	b96b      	cbnz	r3, 80087c0 <pbuf_free+0xb8>
          mem_free(p);
 80087a4:	4620      	mov	r0, r4
 80087a6:	f7ff f9c9 	bl	8007b3c <mem_free>
 80087aa:	e7cf      	b.n	800874c <pbuf_free+0x44>
          memp_free(MEMP_PBUF_POOL, p);
 80087ac:	4621      	mov	r1, r4
 80087ae:	200c      	movs	r0, #12
 80087b0:	f7ff fce8 	bl	8008184 <memp_free>
 80087b4:	e7ca      	b.n	800874c <pbuf_free+0x44>
          memp_free(MEMP_PBUF, p);
 80087b6:	4621      	mov	r1, r4
 80087b8:	200b      	movs	r0, #11
 80087ba:	f7ff fce3 	bl	8008184 <memp_free>
 80087be:	e7c5      	b.n	800874c <pbuf_free+0x44>
          LWIP_ASSERT("invalid pbuf type", 0);
 80087c0:	464b      	mov	r3, r9
 80087c2:	f240 320f 	movw	r2, #783	; 0x30f
 80087c6:	4906      	ldr	r1, [pc, #24]	; (80087e0 <pbuf_free+0xd8>)
 80087c8:	4640      	mov	r0, r8
 80087ca:	f006 fc93 	bl	800f0f4 <iprintf>
 80087ce:	e7bd      	b.n	800874c <pbuf_free+0x44>
 80087d0:	080110a4 	.word	0x080110a4
 80087d4:	08010748 	.word	0x08010748
 80087d8:	080103a4 	.word	0x080103a4
 80087dc:	08011120 	.word	0x08011120
 80087e0:	08011144 	.word	0x08011144
 80087e4:	08011108 	.word	0x08011108

080087e8 <pbuf_alloc>:
{
 80087e8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80087ec:	460e      	mov	r6, r1
  u16_t offset = (u16_t)layer;
 80087ee:	b285      	uxth	r5, r0
  switch (type) {
 80087f0:	f5b2 7fc1 	cmp.w	r2, #386	; 0x182
 80087f4:	d03d      	beq.n	8008872 <pbuf_alloc+0x8a>
 80087f6:	4604      	mov	r4, r0
 80087f8:	d80e      	bhi.n	8008818 <pbuf_alloc+0x30>
 80087fa:	f022 0340 	bic.w	r3, r2, #64	; 0x40
 80087fe:	b29b      	uxth	r3, r3
 8008800:	2b01      	cmp	r3, #1
 8008802:	d02f      	beq.n	8008864 <pbuf_alloc+0x7c>
      LWIP_ASSERT("pbuf_alloc: erroneous type", 0);
 8008804:	4b47      	ldr	r3, [pc, #284]	; (8008924 <pbuf_alloc+0x13c>)
 8008806:	f240 1227 	movw	r2, #295	; 0x127
 800880a:	4947      	ldr	r1, [pc, #284]	; (8008928 <pbuf_alloc+0x140>)
 800880c:	4847      	ldr	r0, [pc, #284]	; (800892c <pbuf_alloc+0x144>)
 800880e:	f006 fc71 	bl	800f0f4 <iprintf>
      return NULL;
 8008812:	f04f 0800 	mov.w	r8, #0
 8008816:	e029      	b.n	800886c <pbuf_alloc+0x84>
  switch (type) {
 8008818:	f5b2 7f20 	cmp.w	r2, #640	; 0x280
 800881c:	d1f2      	bne.n	8008804 <pbuf_alloc+0x1c>
      u16_t payload_len = (u16_t)(LWIP_MEM_ALIGN_SIZE(offset) + LWIP_MEM_ALIGN_SIZE(length));
 800881e:	1ceb      	adds	r3, r5, #3
 8008820:	f023 0303 	bic.w	r3, r3, #3
 8008824:	1cca      	adds	r2, r1, #3
 8008826:	f022 0503 	bic.w	r5, r2, #3
 800882a:	442b      	add	r3, r5
 800882c:	b29b      	uxth	r3, r3
      mem_size_t alloc_len = (mem_size_t)(LWIP_MEM_ALIGN_SIZE(SIZEOF_STRUCT_PBUF) + payload_len);
 800882e:	f103 0010 	add.w	r0, r3, #16
 8008832:	b280      	uxth	r0, r0
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 8008834:	42ab      	cmp	r3, r5
 8008836:	d36e      	bcc.n	8008916 <pbuf_alloc+0x12e>
 8008838:	4285      	cmp	r5, r0
 800883a:	d86f      	bhi.n	800891c <pbuf_alloc+0x134>
      p = (struct pbuf *)mem_malloc(alloc_len);
 800883c:	f7ff fb3a 	bl	8007eb4 <mem_malloc>
      if (p == NULL) {
 8008840:	4680      	mov	r8, r0
 8008842:	b198      	cbz	r0, 800886c <pbuf_alloc+0x84>
  p->next = NULL;
 8008844:	2200      	movs	r2, #0
 8008846:	6002      	str	r2, [r0, #0]
      pbuf_init_alloced_pbuf(p, LWIP_MEM_ALIGN((void *)((u8_t *)p + SIZEOF_STRUCT_PBUF + offset)),
 8008848:	1903      	adds	r3, r0, r4
 800884a:	3313      	adds	r3, #19
 800884c:	f023 0303 	bic.w	r3, r3, #3
  p->payload = payload;
 8008850:	6043      	str	r3, [r0, #4]
  p->tot_len = tot_len;
 8008852:	8106      	strh	r6, [r0, #8]
  p->len = len;
 8008854:	8146      	strh	r6, [r0, #10]
  p->type_internal = (u8_t)type;
 8008856:	2380      	movs	r3, #128	; 0x80
 8008858:	7303      	strb	r3, [r0, #12]
  p->flags = flags;
 800885a:	7342      	strb	r2, [r0, #13]
  p->ref = 1;
 800885c:	2301      	movs	r3, #1
 800885e:	7383      	strb	r3, [r0, #14]
  p->if_idx = NETIF_NO_INDEX;
 8008860:	73c2      	strb	r2, [r0, #15]
      LWIP_ASSERT("pbuf_alloc: pbuf->payload properly aligned",
 8008862:	e003      	b.n	800886c <pbuf_alloc+0x84>
      p = pbuf_alloc_reference(NULL, length, type);
 8008864:	2000      	movs	r0, #0
 8008866:	f7ff fec5 	bl	80085f4 <pbuf_alloc_reference>
 800886a:	4680      	mov	r8, r0
}
 800886c:	4640      	mov	r0, r8
 800886e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  switch (type) {
 8008872:	2400      	movs	r4, #0
 8008874:	46a0      	mov	r8, r4
        q = (struct pbuf *)memp_malloc(MEMP_PBUF_POOL);
 8008876:	f04f 0a0c 	mov.w	sl, #12
  p->next = NULL;
 800887a:	4627      	mov	r7, r4
  p->type_internal = (u8_t)type;
 800887c:	f04f 0b82 	mov.w	fp, #130	; 0x82
 8008880:	e026      	b.n	80088d0 <pbuf_alloc+0xe8>
  SYS_ARCH_PROTECT(old_level);
 8008882:	f006 fa31 	bl	800ece8 <sys_arch_protect>
  queued = pbuf_free_ooseq_pending;
 8008886:	4b2a      	ldr	r3, [pc, #168]	; (8008930 <pbuf_alloc+0x148>)
 8008888:	781d      	ldrb	r5, [r3, #0]
 800888a:	b2ed      	uxtb	r5, r5
  pbuf_free_ooseq_pending = 1;
 800888c:	2201      	movs	r2, #1
 800888e:	701a      	strb	r2, [r3, #0]
  SYS_ARCH_UNPROTECT(old_level);
 8008890:	f006 fa36 	bl	800ed00 <sys_arch_unprotect>
  if (!queued) {
 8008894:	b13d      	cbz	r5, 80088a6 <pbuf_alloc+0xbe>
          if (p) {
 8008896:	f1b8 0f00 	cmp.w	r8, #0
 800889a:	d0e7      	beq.n	800886c <pbuf_alloc+0x84>
            pbuf_free(p);
 800889c:	4640      	mov	r0, r8
 800889e:	f7ff ff33 	bl	8008708 <pbuf_free>
          return NULL;
 80088a2:	46a0      	mov	r8, r4
 80088a4:	e7e2      	b.n	800886c <pbuf_alloc+0x84>
    PBUF_POOL_FREE_OOSEQ_QUEUE_CALL();
 80088a6:	2100      	movs	r1, #0
 80088a8:	4822      	ldr	r0, [pc, #136]	; (8008934 <pbuf_alloc+0x14c>)
 80088aa:	f7ff f86b 	bl	8007984 <tcpip_try_callback>
 80088ae:	2800      	cmp	r0, #0
 80088b0:	d0f1      	beq.n	8008896 <pbuf_alloc+0xae>
 80088b2:	f006 fa19 	bl	800ece8 <sys_arch_protect>
 80088b6:	4b1e      	ldr	r3, [pc, #120]	; (8008930 <pbuf_alloc+0x148>)
 80088b8:	2200      	movs	r2, #0
 80088ba:	701a      	strb	r2, [r3, #0]
 80088bc:	f006 fa20 	bl	800ed00 <sys_arch_unprotect>
 80088c0:	e7e9      	b.n	8008896 <pbuf_alloc+0xae>
          last->next = q;
 80088c2:	f8c9 0000 	str.w	r0, [r9]
        rem_len = (u16_t)(rem_len - qlen);
 80088c6:	1a76      	subs	r6, r6, r1
 80088c8:	b2b6      	uxth	r6, r6
        offset = 0;
 80088ca:	463d      	mov	r5, r7
      } while (rem_len > 0);
 80088cc:	2e00      	cmp	r6, #0
 80088ce:	d0cd      	beq.n	800886c <pbuf_alloc+0x84>
        q = (struct pbuf *)memp_malloc(MEMP_PBUF_POOL);
 80088d0:	46a1      	mov	r9, r4
 80088d2:	4650      	mov	r0, sl
 80088d4:	f7ff fc26 	bl	8008124 <memp_malloc>
        if (q == NULL) {
 80088d8:	4604      	mov	r4, r0
 80088da:	2800      	cmp	r0, #0
 80088dc:	d0d1      	beq.n	8008882 <pbuf_alloc+0x9a>
        qlen = LWIP_MIN(rem_len, (u16_t)(PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)));
 80088de:	1ce9      	adds	r1, r5, #3
 80088e0:	f021 0103 	bic.w	r1, r1, #3
 80088e4:	f5c1 7114 	rsb	r1, r1, #592	; 0x250
 80088e8:	b289      	uxth	r1, r1
 80088ea:	42b1      	cmp	r1, r6
 80088ec:	bf28      	it	cs
 80088ee:	4631      	movcs	r1, r6
  p->next = NULL;
 80088f0:	6007      	str	r7, [r0, #0]
        pbuf_init_alloced_pbuf(q, LWIP_MEM_ALIGN((void *)((u8_t *)q + SIZEOF_STRUCT_PBUF + offset)),
 80088f2:	4405      	add	r5, r0
 80088f4:	3513      	adds	r5, #19
 80088f6:	f025 0503 	bic.w	r5, r5, #3
  p->payload = payload;
 80088fa:	6045      	str	r5, [r0, #4]
  p->tot_len = tot_len;
 80088fc:	8106      	strh	r6, [r0, #8]
  p->len = len;
 80088fe:	8141      	strh	r1, [r0, #10]
  p->type_internal = (u8_t)type;
 8008900:	f880 b00c 	strb.w	fp, [r0, #12]
  p->flags = flags;
 8008904:	7347      	strb	r7, [r0, #13]
  p->ref = 1;
 8008906:	2301      	movs	r3, #1
 8008908:	7383      	strb	r3, [r0, #14]
  p->if_idx = NETIF_NO_INDEX;
 800890a:	73c7      	strb	r7, [r0, #15]
        if (p == NULL) {
 800890c:	f1b8 0f00 	cmp.w	r8, #0
 8008910:	d1d7      	bne.n	80088c2 <pbuf_alloc+0xda>
          p = q;
 8008912:	4680      	mov	r8, r0
 8008914:	e7d7      	b.n	80088c6 <pbuf_alloc+0xde>
        return NULL;
 8008916:	f04f 0800 	mov.w	r8, #0
 800891a:	e7a7      	b.n	800886c <pbuf_alloc+0x84>
 800891c:	f04f 0800 	mov.w	r8, #0
 8008920:	e7a4      	b.n	800886c <pbuf_alloc+0x84>
 8008922:	bf00      	nop
 8008924:	080110a4 	.word	0x080110a4
 8008928:	08011158 	.word	0x08011158
 800892c:	080103a4 	.word	0x080103a4
 8008930:	20010901 	.word	0x20010901
 8008934:	080085c5 	.word	0x080085c5

08008938 <pbuf_realloc>:
{
 8008938:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800893c:	460e      	mov	r6, r1
  LWIP_ASSERT("pbuf_realloc: p != NULL", p != NULL);
 800893e:	4604      	mov	r4, r0
 8008940:	b168      	cbz	r0, 800895e <pbuf_realloc+0x26>
  if (new_len >= p->tot_len) {
 8008942:	8927      	ldrh	r7, [r4, #8]
 8008944:	42b7      	cmp	r7, r6
 8008946:	d939      	bls.n	80089bc <pbuf_realloc+0x84>
  while (rem_len > q->len) {
 8008948:	8963      	ldrh	r3, [r4, #10]
 800894a:	429e      	cmp	r6, r3
 800894c:	d923      	bls.n	8008996 <pbuf_realloc+0x5e>
  rem_len = new_len;
 800894e:	4635      	mov	r5, r6
    LWIP_ASSERT("pbuf_realloc: q != NULL", q != NULL);
 8008950:	f8df a090 	ldr.w	sl, [pc, #144]	; 80089e4 <pbuf_realloc+0xac>
 8008954:	f8df 909c 	ldr.w	r9, [pc, #156]	; 80089f4 <pbuf_realloc+0xbc>
 8008958:	f8df 8090 	ldr.w	r8, [pc, #144]	; 80089ec <pbuf_realloc+0xb4>
 800895c:	e00a      	b.n	8008974 <pbuf_realloc+0x3c>
  LWIP_ASSERT("pbuf_realloc: p != NULL", p != NULL);
 800895e:	4b21      	ldr	r3, [pc, #132]	; (80089e4 <pbuf_realloc+0xac>)
 8008960:	f44f 72cc 	mov.w	r2, #408	; 0x198
 8008964:	4920      	ldr	r1, [pc, #128]	; (80089e8 <pbuf_realloc+0xb0>)
 8008966:	4821      	ldr	r0, [pc, #132]	; (80089ec <pbuf_realloc+0xb4>)
 8008968:	f006 fbc4 	bl	800f0f4 <iprintf>
 800896c:	e7e9      	b.n	8008942 <pbuf_realloc+0xa>
  while (rem_len > q->len) {
 800896e:	8963      	ldrh	r3, [r4, #10]
 8008970:	42ab      	cmp	r3, r5
 8008972:	d211      	bcs.n	8008998 <pbuf_realloc+0x60>
    rem_len = (u16_t)(rem_len - q->len);
 8008974:	1aed      	subs	r5, r5, r3
 8008976:	b2ad      	uxth	r5, r5
    q->tot_len = (u16_t)(q->tot_len - shrink);
 8008978:	1bf3      	subs	r3, r6, r7
 800897a:	8922      	ldrh	r2, [r4, #8]
 800897c:	4413      	add	r3, r2
 800897e:	8123      	strh	r3, [r4, #8]
    q = q->next;
 8008980:	6824      	ldr	r4, [r4, #0]
    LWIP_ASSERT("pbuf_realloc: q != NULL", q != NULL);
 8008982:	2c00      	cmp	r4, #0
 8008984:	d1f3      	bne.n	800896e <pbuf_realloc+0x36>
 8008986:	4653      	mov	r3, sl
 8008988:	f240 12af 	movw	r2, #431	; 0x1af
 800898c:	4649      	mov	r1, r9
 800898e:	4640      	mov	r0, r8
 8008990:	f006 fbb0 	bl	800f0f4 <iprintf>
 8008994:	e7eb      	b.n	800896e <pbuf_realloc+0x36>
  rem_len = new_len;
 8008996:	4635      	mov	r5, r6
  if (pbuf_match_allocsrc(q, PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) && (rem_len != q->len)
 8008998:	7b22      	ldrb	r2, [r4, #12]
 800899a:	f012 0f0f 	tst.w	r2, #15
 800899e:	d105      	bne.n	80089ac <pbuf_realloc+0x74>
 80089a0:	42ab      	cmp	r3, r5
 80089a2:	d003      	beq.n	80089ac <pbuf_realloc+0x74>
      && ((q->flags & PBUF_FLAG_IS_CUSTOM) == 0)
 80089a4:	7b63      	ldrb	r3, [r4, #13]
 80089a6:	f013 0f02 	tst.w	r3, #2
 80089aa:	d009      	beq.n	80089c0 <pbuf_realloc+0x88>
  q->len = rem_len;
 80089ac:	8165      	strh	r5, [r4, #10]
  q->tot_len = q->len;
 80089ae:	8125      	strh	r5, [r4, #8]
  if (q->next != NULL) {
 80089b0:	6820      	ldr	r0, [r4, #0]
 80089b2:	b108      	cbz	r0, 80089b8 <pbuf_realloc+0x80>
    pbuf_free(q->next);
 80089b4:	f7ff fea8 	bl	8008708 <pbuf_free>
  q->next = NULL;
 80089b8:	2300      	movs	r3, #0
 80089ba:	6023      	str	r3, [r4, #0]
}
 80089bc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    q = (struct pbuf *)mem_trim(q, (mem_size_t)(((u8_t *)q->payload - (u8_t *)q) + rem_len));
 80089c0:	6863      	ldr	r3, [r4, #4]
 80089c2:	1b1b      	subs	r3, r3, r4
 80089c4:	18e9      	adds	r1, r5, r3
 80089c6:	b289      	uxth	r1, r1
 80089c8:	4620      	mov	r0, r4
 80089ca:	f7ff f9b1 	bl	8007d30 <mem_trim>
    LWIP_ASSERT("mem_trim returned q == NULL", q != NULL);
 80089ce:	4604      	mov	r4, r0
 80089d0:	2800      	cmp	r0, #0
 80089d2:	d1eb      	bne.n	80089ac <pbuf_realloc+0x74>
 80089d4:	4b03      	ldr	r3, [pc, #12]	; (80089e4 <pbuf_realloc+0xac>)
 80089d6:	f240 12bd 	movw	r2, #445	; 0x1bd
 80089da:	4905      	ldr	r1, [pc, #20]	; (80089f0 <pbuf_realloc+0xb8>)
 80089dc:	4803      	ldr	r0, [pc, #12]	; (80089ec <pbuf_realloc+0xb4>)
 80089de:	f006 fb89 	bl	800f0f4 <iprintf>
 80089e2:	e7e3      	b.n	80089ac <pbuf_realloc+0x74>
 80089e4:	080110a4 	.word	0x080110a4
 80089e8:	08011174 	.word	0x08011174
 80089ec:	080103a4 	.word	0x080103a4
 80089f0:	080111a4 	.word	0x080111a4
 80089f4:	0801118c 	.word	0x0801118c

080089f8 <pbuf_clen>:
pbuf_clen(const struct pbuf *p)
{
  u16_t len;

  len = 0;
  while (p != NULL) {
 80089f8:	4603      	mov	r3, r0
 80089fa:	b130      	cbz	r0, 8008a0a <pbuf_clen+0x12>
  len = 0;
 80089fc:	2000      	movs	r0, #0
    ++len;
 80089fe:	3001      	adds	r0, #1
 8008a00:	b280      	uxth	r0, r0
    p = p->next;
 8008a02:	681b      	ldr	r3, [r3, #0]
  while (p != NULL) {
 8008a04:	2b00      	cmp	r3, #0
 8008a06:	d1fa      	bne.n	80089fe <pbuf_clen+0x6>
 8008a08:	4770      	bx	lr
  len = 0;
 8008a0a:	2000      	movs	r0, #0
  }
  return len;
}
 8008a0c:	4770      	bx	lr
	...

08008a10 <pbuf_ref>:
 */
void
pbuf_ref(struct pbuf *p)
{
  /* pbuf given? */
  if (p != NULL) {
 8008a10:	b198      	cbz	r0, 8008a3a <pbuf_ref+0x2a>
{
 8008a12:	b510      	push	{r4, lr}
 8008a14:	4604      	mov	r4, r0
    SYS_ARCH_SET(p->ref, (LWIP_PBUF_REF_T)(p->ref + 1));
 8008a16:	f006 f967 	bl	800ece8 <sys_arch_protect>
 8008a1a:	7ba3      	ldrb	r3, [r4, #14]
 8008a1c:	3301      	adds	r3, #1
 8008a1e:	73a3      	strb	r3, [r4, #14]
 8008a20:	f006 f96e 	bl	800ed00 <sys_arch_unprotect>
    LWIP_ASSERT("pbuf ref overflow", p->ref > 0);
 8008a24:	7ba3      	ldrb	r3, [r4, #14]
 8008a26:	b103      	cbz	r3, 8008a2a <pbuf_ref+0x1a>
  }
}
 8008a28:	bd10      	pop	{r4, pc}
    LWIP_ASSERT("pbuf ref overflow", p->ref > 0);
 8008a2a:	4b04      	ldr	r3, [pc, #16]	; (8008a3c <pbuf_ref+0x2c>)
 8008a2c:	f240 3242 	movw	r2, #834	; 0x342
 8008a30:	4903      	ldr	r1, [pc, #12]	; (8008a40 <pbuf_ref+0x30>)
 8008a32:	4804      	ldr	r0, [pc, #16]	; (8008a44 <pbuf_ref+0x34>)
 8008a34:	f006 fb5e 	bl	800f0f4 <iprintf>
}
 8008a38:	e7f6      	b.n	8008a28 <pbuf_ref+0x18>
 8008a3a:	4770      	bx	lr
 8008a3c:	080110a4 	.word	0x080110a4
 8008a40:	080111c0 	.word	0x080111c0
 8008a44:	080103a4 	.word	0x080103a4

08008a48 <pbuf_cat>:
 *
 * @see pbuf_chain()
 */
void
pbuf_cat(struct pbuf *h, struct pbuf *t)
{
 8008a48:	b538      	push	{r3, r4, r5, lr}
  struct pbuf *p;

  LWIP_ERROR("(h != NULL) && (t != NULL) (programmer violates API)",
 8008a4a:	b130      	cbz	r0, 8008a5a <pbuf_cat+0x12>
 8008a4c:	460d      	mov	r5, r1
 8008a4e:	4602      	mov	r2, r0
 8008a50:	b119      	cbz	r1, 8008a5a <pbuf_cat+0x12>
             ((h != NULL) && (t != NULL)), return;);

  /* proceed to last pbuf of chain */
  for (p = h; p->next != NULL; p = p->next) {
 8008a52:	6804      	ldr	r4, [r0, #0]
 8008a54:	b954      	cbnz	r4, 8008a6c <pbuf_cat+0x24>
 8008a56:	4604      	mov	r4, r0
 8008a58:	e010      	b.n	8008a7c <pbuf_cat+0x34>
  LWIP_ERROR("(h != NULL) && (t != NULL) (programmer violates API)",
 8008a5a:	4b15      	ldr	r3, [pc, #84]	; (8008ab0 <pbuf_cat+0x68>)
 8008a5c:	f240 3259 	movw	r2, #857	; 0x359
 8008a60:	4914      	ldr	r1, [pc, #80]	; (8008ab4 <pbuf_cat+0x6c>)
 8008a62:	4815      	ldr	r0, [pc, #84]	; (8008ab8 <pbuf_cat+0x70>)
 8008a64:	f006 fb46 	bl	800f0f4 <iprintf>
 8008a68:	e021      	b.n	8008aae <pbuf_cat+0x66>
  for (p = h; p->next != NULL; p = p->next) {
 8008a6a:	461c      	mov	r4, r3
    /* add total length of second chain to all totals of first chain */
    p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 8008a6c:	8913      	ldrh	r3, [r2, #8]
 8008a6e:	8928      	ldrh	r0, [r5, #8]
 8008a70:	4403      	add	r3, r0
 8008a72:	8113      	strh	r3, [r2, #8]
  for (p = h; p->next != NULL; p = p->next) {
 8008a74:	6823      	ldr	r3, [r4, #0]
 8008a76:	4622      	mov	r2, r4
 8008a78:	2b00      	cmp	r3, #0
 8008a7a:	d1f6      	bne.n	8008a6a <pbuf_cat+0x22>
  }
  /* { p is last pbuf of first h chain, p->next == NULL } */
  LWIP_ASSERT("p->tot_len == p->len (of last pbuf in chain)", p->tot_len == p->len);
 8008a7c:	8922      	ldrh	r2, [r4, #8]
 8008a7e:	8963      	ldrh	r3, [r4, #10]
 8008a80:	429a      	cmp	r2, r3
 8008a82:	d00f      	beq.n	8008aa4 <pbuf_cat+0x5c>
 8008a84:	4b0a      	ldr	r3, [pc, #40]	; (8008ab0 <pbuf_cat+0x68>)
 8008a86:	f240 3262 	movw	r2, #866	; 0x362
 8008a8a:	490c      	ldr	r1, [pc, #48]	; (8008abc <pbuf_cat+0x74>)
 8008a8c:	480a      	ldr	r0, [pc, #40]	; (8008ab8 <pbuf_cat+0x70>)
 8008a8e:	f006 fb31 	bl	800f0f4 <iprintf>
  LWIP_ASSERT("p->next == NULL", p->next == NULL);
 8008a92:	6823      	ldr	r3, [r4, #0]
 8008a94:	b133      	cbz	r3, 8008aa4 <pbuf_cat+0x5c>
 8008a96:	4b06      	ldr	r3, [pc, #24]	; (8008ab0 <pbuf_cat+0x68>)
 8008a98:	f240 3263 	movw	r2, #867	; 0x363
 8008a9c:	4908      	ldr	r1, [pc, #32]	; (8008ac0 <pbuf_cat+0x78>)
 8008a9e:	4806      	ldr	r0, [pc, #24]	; (8008ab8 <pbuf_cat+0x70>)
 8008aa0:	f006 fb28 	bl	800f0f4 <iprintf>
  /* add total length of second chain to last pbuf total of first chain */
  p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 8008aa4:	8923      	ldrh	r3, [r4, #8]
 8008aa6:	892a      	ldrh	r2, [r5, #8]
 8008aa8:	4413      	add	r3, r2
 8008aaa:	8123      	strh	r3, [r4, #8]
  /* chain last pbuf of head (p) with first of tail (t) */
  p->next = t;
 8008aac:	6025      	str	r5, [r4, #0]
  /* p->next now references t, but the caller will drop its reference to t,
   * so netto there is no change to the reference count of t.
   */
}
 8008aae:	bd38      	pop	{r3, r4, r5, pc}
 8008ab0:	080110a4 	.word	0x080110a4
 8008ab4:	080111d4 	.word	0x080111d4
 8008ab8:	080103a4 	.word	0x080103a4
 8008abc:	0801120c 	.word	0x0801120c
 8008ac0:	0801123c 	.word	0x0801123c

08008ac4 <pbuf_copy>:
 *         ERR_ARG if one of the pbufs is NULL or p_to is not big
 *                 enough to hold p_from
 */
err_t
pbuf_copy(struct pbuf *p_to, const struct pbuf *p_from)
{
 8008ac4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy(%p, %p)\n",
              (const void *)p_to, (const void *)p_from));

  /* is the target big enough to hold the source? */
  LWIP_ERROR("pbuf_copy: target not big enough to hold source", ((p_to != NULL) &&
 8008ac8:	b178      	cbz	r0, 8008aea <pbuf_copy+0x26>
 8008aca:	460c      	mov	r4, r1
 8008acc:	4606      	mov	r6, r0
 8008ace:	b161      	cbz	r1, 8008aea <pbuf_copy+0x26>
 8008ad0:	8902      	ldrh	r2, [r0, #8]
 8008ad2:	890b      	ldrh	r3, [r1, #8]
 8008ad4:	429a      	cmp	r2, r3
 8008ad6:	d308      	bcc.n	8008aea <pbuf_copy+0x26>
  size_t offset_to = 0, offset_from = 0, len;
 8008ad8:	2700      	movs	r7, #0
 8008ada:	46b8      	mov	r8, r7
      len = p_to->len - offset_to;
    }
    MEMCPY((u8_t *)p_to->payload + offset_to, (u8_t *)p_from->payload + offset_from, len);
    offset_to += len;
    offset_from += len;
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
 8008adc:	f8df a10c 	ldr.w	sl, [pc, #268]	; 8008bec <pbuf_copy+0x128>
 8008ae0:	f8df b120 	ldr.w	fp, [pc, #288]	; 8008c04 <pbuf_copy+0x140>
 8008ae4:	f8df 910c 	ldr.w	r9, [pc, #268]	; 8008bf4 <pbuf_copy+0x130>
 8008ae8:	e050      	b.n	8008b8c <pbuf_copy+0xc8>
  LWIP_ERROR("pbuf_copy: target not big enough to hold source", ((p_to != NULL) &&
 8008aea:	4b40      	ldr	r3, [pc, #256]	; (8008bec <pbuf_copy+0x128>)
 8008aec:	f240 32c9 	movw	r2, #969	; 0x3c9
 8008af0:	493f      	ldr	r1, [pc, #252]	; (8008bf0 <pbuf_copy+0x12c>)
 8008af2:	4840      	ldr	r0, [pc, #256]	; (8008bf4 <pbuf_copy+0x130>)
 8008af4:	f006 fafe 	bl	800f0f4 <iprintf>
 8008af8:	f06f 000f 	mvn.w	r0, #15
 8008afc:	e016      	b.n	8008b2c <pbuf_copy+0x68>
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
 8008afe:	4653      	mov	r3, sl
 8008b00:	f240 32d9 	movw	r2, #985	; 0x3d9
 8008b04:	4659      	mov	r1, fp
 8008b06:	4648      	mov	r0, r9
 8008b08:	f006 faf4 	bl	800f0f4 <iprintf>
 8008b0c:	e052      	b.n	8008bb4 <pbuf_copy+0xf0>
    LWIP_ASSERT("offset_from <= p_from->len", offset_from <= p_from->len);
 8008b0e:	4653      	mov	r3, sl
 8008b10:	f240 32da 	movw	r2, #986	; 0x3da
 8008b14:	4938      	ldr	r1, [pc, #224]	; (8008bf8 <pbuf_copy+0x134>)
 8008b16:	4648      	mov	r0, r9
 8008b18:	f006 faec 	bl	800f0f4 <iprintf>
 8008b1c:	e04d      	b.n	8008bba <pbuf_copy+0xf6>
      p_from = p_from->next;
    }
    if (offset_to == p_to->len) {
      /* on to next p_to (if any) */
      offset_to = 0;
      p_to = p_to->next;
 8008b1e:	6836      	ldr	r6, [r6, #0]
      LWIP_ERROR("p_to != NULL", (p_to != NULL) || (p_from == NULL), return ERR_ARG;);
 8008b20:	b116      	cbz	r6, 8008b28 <pbuf_copy+0x64>
      offset_to = 0;
 8008b22:	f04f 0800 	mov.w	r8, #0
 8008b26:	e050      	b.n	8008bca <pbuf_copy+0x106>
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
                 (p_to->next == NULL), return ERR_VAL;);
    }
  } while (p_from);
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy: end of chain reached.\n"));
  return ERR_OK;
 8008b28:	2000      	movs	r0, #0
      LWIP_ERROR("p_to != NULL", (p_to != NULL) || (p_from == NULL), return ERR_ARG;);
 8008b2a:	b90c      	cbnz	r4, 8008b30 <pbuf_copy+0x6c>
}
 8008b2c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
      LWIP_ERROR("p_to != NULL", (p_to != NULL) || (p_from == NULL), return ERR_ARG;);
 8008b30:	4b2e      	ldr	r3, [pc, #184]	; (8008bec <pbuf_copy+0x128>)
 8008b32:	f44f 7279 	mov.w	r2, #996	; 0x3e4
 8008b36:	4931      	ldr	r1, [pc, #196]	; (8008bfc <pbuf_copy+0x138>)
 8008b38:	482e      	ldr	r0, [pc, #184]	; (8008bf4 <pbuf_copy+0x130>)
 8008b3a:	f006 fadb 	bl	800f0f4 <iprintf>
 8008b3e:	f06f 000f 	mvn.w	r0, #15
 8008b42:	e7f3      	b.n	8008b2c <pbuf_copy+0x68>
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 8008b44:	6823      	ldr	r3, [r4, #0]
 8008b46:	2b00      	cmp	r3, #0
 8008b48:	d045      	beq.n	8008bd6 <pbuf_copy+0x112>
 8008b4a:	4b28      	ldr	r3, [pc, #160]	; (8008bec <pbuf_copy+0x128>)
 8008b4c:	f240 32e9 	movw	r2, #1001	; 0x3e9
 8008b50:	492b      	ldr	r1, [pc, #172]	; (8008c00 <pbuf_copy+0x13c>)
 8008b52:	4828      	ldr	r0, [pc, #160]	; (8008bf4 <pbuf_copy+0x130>)
 8008b54:	f006 face 	bl	800f0f4 <iprintf>
 8008b58:	f06f 0005 	mvn.w	r0, #5
 8008b5c:	e7e6      	b.n	8008b2c <pbuf_copy+0x68>
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 8008b5e:	4b23      	ldr	r3, [pc, #140]	; (8008bec <pbuf_copy+0x128>)
 8008b60:	f240 32ee 	movw	r2, #1006	; 0x3ee
 8008b64:	4926      	ldr	r1, [pc, #152]	; (8008c00 <pbuf_copy+0x13c>)
 8008b66:	4823      	ldr	r0, [pc, #140]	; (8008bf4 <pbuf_copy+0x130>)
 8008b68:	f006 fac4 	bl	800f0f4 <iprintf>
 8008b6c:	f06f 0005 	mvn.w	r0, #5
 8008b70:	e7dc      	b.n	8008b2c <pbuf_copy+0x68>
  return ERR_OK;
 8008b72:	2000      	movs	r0, #0
 8008b74:	e7da      	b.n	8008b2c <pbuf_copy+0x68>
    if ((p_to != NULL) && (p_to->len == p_to->tot_len)) {
 8008b76:	2e00      	cmp	r6, #0
 8008b78:	d034      	beq.n	8008be4 <pbuf_copy+0x120>
 8008b7a:	8972      	ldrh	r2, [r6, #10]
 8008b7c:	8933      	ldrh	r3, [r6, #8]
 8008b7e:	429a      	cmp	r2, r3
 8008b80:	d132      	bne.n	8008be8 <pbuf_copy+0x124>
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 8008b82:	6833      	ldr	r3, [r6, #0]
 8008b84:	2b00      	cmp	r3, #0
 8008b86:	d1ea      	bne.n	8008b5e <pbuf_copy+0x9a>
  } while (p_from);
 8008b88:	2c00      	cmp	r4, #0
 8008b8a:	d0f2      	beq.n	8008b72 <pbuf_copy+0xae>
    if ((p_to->len - offset_to) >= (p_from->len - offset_from)) {
 8008b8c:	8975      	ldrh	r5, [r6, #10]
 8008b8e:	eba5 0508 	sub.w	r5, r5, r8
 8008b92:	8963      	ldrh	r3, [r4, #10]
 8008b94:	1bdb      	subs	r3, r3, r7
 8008b96:	429d      	cmp	r5, r3
 8008b98:	bf28      	it	cs
 8008b9a:	461d      	movcs	r5, r3
    MEMCPY((u8_t *)p_to->payload + offset_to, (u8_t *)p_from->payload + offset_from, len);
 8008b9c:	6870      	ldr	r0, [r6, #4]
 8008b9e:	6861      	ldr	r1, [r4, #4]
 8008ba0:	462a      	mov	r2, r5
 8008ba2:	4439      	add	r1, r7
 8008ba4:	4440      	add	r0, r8
 8008ba6:	f006 f9e0 	bl	800ef6a <memcpy>
    offset_to += len;
 8008baa:	44a8      	add	r8, r5
    offset_from += len;
 8008bac:	442f      	add	r7, r5
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
 8008bae:	8973      	ldrh	r3, [r6, #10]
 8008bb0:	4543      	cmp	r3, r8
 8008bb2:	d3a4      	bcc.n	8008afe <pbuf_copy+0x3a>
    LWIP_ASSERT("offset_from <= p_from->len", offset_from <= p_from->len);
 8008bb4:	8963      	ldrh	r3, [r4, #10]
 8008bb6:	42bb      	cmp	r3, r7
 8008bb8:	d3a9      	bcc.n	8008b0e <pbuf_copy+0x4a>
    if (offset_from >= p_from->len) {
 8008bba:	8963      	ldrh	r3, [r4, #10]
 8008bbc:	42bb      	cmp	r3, r7
      p_from = p_from->next;
 8008bbe:	bf9c      	itt	ls
 8008bc0:	6824      	ldrls	r4, [r4, #0]
      offset_from = 0;
 8008bc2:	2700      	movls	r7, #0
    if (offset_to == p_to->len) {
 8008bc4:	8973      	ldrh	r3, [r6, #10]
 8008bc6:	4543      	cmp	r3, r8
 8008bc8:	d0a9      	beq.n	8008b1e <pbuf_copy+0x5a>
    if ((p_from != NULL) && (p_from->len == p_from->tot_len)) {
 8008bca:	2c00      	cmp	r4, #0
 8008bcc:	d0d3      	beq.n	8008b76 <pbuf_copy+0xb2>
 8008bce:	8962      	ldrh	r2, [r4, #10]
 8008bd0:	8923      	ldrh	r3, [r4, #8]
 8008bd2:	429a      	cmp	r2, r3
 8008bd4:	d0b6      	beq.n	8008b44 <pbuf_copy+0x80>
    if ((p_to != NULL) && (p_to->len == p_to->tot_len)) {
 8008bd6:	2e00      	cmp	r6, #0
 8008bd8:	d0d8      	beq.n	8008b8c <pbuf_copy+0xc8>
 8008bda:	8972      	ldrh	r2, [r6, #10]
 8008bdc:	8933      	ldrh	r3, [r6, #8]
 8008bde:	429a      	cmp	r2, r3
 8008be0:	d1d4      	bne.n	8008b8c <pbuf_copy+0xc8>
 8008be2:	e7ce      	b.n	8008b82 <pbuf_copy+0xbe>
  return ERR_OK;
 8008be4:	2000      	movs	r0, #0
 8008be6:	e7a1      	b.n	8008b2c <pbuf_copy+0x68>
 8008be8:	2000      	movs	r0, #0
 8008bea:	e79f      	b.n	8008b2c <pbuf_copy+0x68>
 8008bec:	080110a4 	.word	0x080110a4
 8008bf0:	0801124c 	.word	0x0801124c
 8008bf4:	080103a4 	.word	0x080103a4
 8008bf8:	08011294 	.word	0x08011294
 8008bfc:	080112b0 	.word	0x080112b0
 8008c00:	080112c0 	.word	0x080112c0
 8008c04:	0801127c 	.word	0x0801127c

08008c08 <pbuf_copy_partial>:
 * @param offset offset into the packet buffer from where to begin copying len bytes
 * @return the number of bytes copied, or 0 on failure
 */
u16_t
pbuf_copy_partial(const struct pbuf *buf, void *dataptr, u16_t len, u16_t offset)
{
 8008c08:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  const struct pbuf *p;
  u16_t left = 0;
  u16_t buf_copy_len;
  u16_t copied_total = 0;

  LWIP_ERROR("pbuf_copy_partial: invalid buf", (buf != NULL), return 0;);
 8008c0c:	b148      	cbz	r0, 8008c22 <pbuf_copy_partial+0x1a>
 8008c0e:	4688      	mov	r8, r1
 8008c10:	4692      	mov	sl, r2
 8008c12:	4605      	mov	r5, r0
  LWIP_ERROR("pbuf_copy_partial: invalid dataptr", (dataptr != NULL), return 0;);
 8008c14:	b181      	cbz	r1, 8008c38 <pbuf_copy_partial+0x30>
  u16_t copied_total = 0;
 8008c16:	4617      	mov	r7, r2

  /* Note some systems use byte copy if dataptr or one of the pbuf payload pointers are unaligned. */
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 8008c18:	b15a      	cbz	r2, 8008c32 <pbuf_copy_partial+0x2a>
  u16_t copied_total = 0;
 8008c1a:	2700      	movs	r7, #0
  u16_t left = 0;
 8008c1c:	463e      	mov	r6, r7
      /* copy the necessary parts of the buffer */
      MEMCPY(&((char *)dataptr)[left], &((char *)p->payload)[offset], buf_copy_len);
      copied_total = (u16_t)(copied_total + buf_copy_len);
      left = (u16_t)(left + buf_copy_len);
      len = (u16_t)(len - buf_copy_len);
      offset = 0;
 8008c1e:	46b9      	mov	r9, r7
 8008c20:	e02f      	b.n	8008c82 <pbuf_copy_partial+0x7a>
  LWIP_ERROR("pbuf_copy_partial: invalid buf", (buf != NULL), return 0;);
 8008c22:	4b1c      	ldr	r3, [pc, #112]	; (8008c94 <pbuf_copy_partial+0x8c>)
 8008c24:	f240 420a 	movw	r2, #1034	; 0x40a
 8008c28:	491b      	ldr	r1, [pc, #108]	; (8008c98 <pbuf_copy_partial+0x90>)
 8008c2a:	481c      	ldr	r0, [pc, #112]	; (8008c9c <pbuf_copy_partial+0x94>)
 8008c2c:	f006 fa62 	bl	800f0f4 <iprintf>
 8008c30:	2700      	movs	r7, #0
    }
  }
  return copied_total;
}
 8008c32:	4638      	mov	r0, r7
 8008c34:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  LWIP_ERROR("pbuf_copy_partial: invalid dataptr", (dataptr != NULL), return 0;);
 8008c38:	4b16      	ldr	r3, [pc, #88]	; (8008c94 <pbuf_copy_partial+0x8c>)
 8008c3a:	f240 420b 	movw	r2, #1035	; 0x40b
 8008c3e:	4918      	ldr	r1, [pc, #96]	; (8008ca0 <pbuf_copy_partial+0x98>)
 8008c40:	4816      	ldr	r0, [pc, #88]	; (8008c9c <pbuf_copy_partial+0x94>)
 8008c42:	f006 fa57 	bl	800f0f4 <iprintf>
 8008c46:	2700      	movs	r7, #0
 8008c48:	e7f3      	b.n	8008c32 <pbuf_copy_partial+0x2a>
      buf_copy_len = (u16_t)(p->len - offset);
 8008c4a:	896c      	ldrh	r4, [r5, #10]
 8008c4c:	1ae4      	subs	r4, r4, r3
 8008c4e:	b2a4      	uxth	r4, r4
      if (buf_copy_len > len) {
 8008c50:	4554      	cmp	r4, sl
 8008c52:	bf28      	it	cs
 8008c54:	4654      	movcs	r4, sl
      MEMCPY(&((char *)dataptr)[left], &((char *)p->payload)[offset], buf_copy_len);
 8008c56:	6869      	ldr	r1, [r5, #4]
 8008c58:	4622      	mov	r2, r4
 8008c5a:	4419      	add	r1, r3
 8008c5c:	eb08 0006 	add.w	r0, r8, r6
 8008c60:	f006 f983 	bl	800ef6a <memcpy>
      copied_total = (u16_t)(copied_total + buf_copy_len);
 8008c64:	4427      	add	r7, r4
 8008c66:	b2bf      	uxth	r7, r7
      left = (u16_t)(left + buf_copy_len);
 8008c68:	4426      	add	r6, r4
 8008c6a:	b2b6      	uxth	r6, r6
      len = (u16_t)(len - buf_copy_len);
 8008c6c:	ebaa 0404 	sub.w	r4, sl, r4
 8008c70:	fa1f fa84 	uxth.w	sl, r4
      offset = 0;
 8008c74:	464b      	mov	r3, r9
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 8008c76:	682d      	ldr	r5, [r5, #0]
 8008c78:	f1ba 0f00 	cmp.w	sl, #0
 8008c7c:	d0d9      	beq.n	8008c32 <pbuf_copy_partial+0x2a>
 8008c7e:	2d00      	cmp	r5, #0
 8008c80:	d0d7      	beq.n	8008c32 <pbuf_copy_partial+0x2a>
    if ((offset != 0) && (offset >= p->len)) {
 8008c82:	2b00      	cmp	r3, #0
 8008c84:	d0e1      	beq.n	8008c4a <pbuf_copy_partial+0x42>
 8008c86:	896a      	ldrh	r2, [r5, #10]
 8008c88:	429a      	cmp	r2, r3
 8008c8a:	d8de      	bhi.n	8008c4a <pbuf_copy_partial+0x42>
      offset = (u16_t)(offset - p->len);
 8008c8c:	1a9b      	subs	r3, r3, r2
 8008c8e:	b29b      	uxth	r3, r3
 8008c90:	e7f1      	b.n	8008c76 <pbuf_copy_partial+0x6e>
 8008c92:	bf00      	nop
 8008c94:	080110a4 	.word	0x080110a4
 8008c98:	080112ec 	.word	0x080112ec
 8008c9c:	080103a4 	.word	0x080103a4
 8008ca0:	0801130c 	.word	0x0801130c

08008ca4 <pbuf_clone>:
 *
 * @return a new pbuf or NULL if allocation fails
 */
struct pbuf *
pbuf_clone(pbuf_layer layer, pbuf_type type, struct pbuf *p)
{
 8008ca4:	b538      	push	{r3, r4, r5, lr}
 8008ca6:	4614      	mov	r4, r2
  struct pbuf *q;
  err_t err;
  q = pbuf_alloc(layer, p->tot_len, type);
 8008ca8:	460a      	mov	r2, r1
 8008caa:	8921      	ldrh	r1, [r4, #8]
 8008cac:	f7ff fd9c 	bl	80087e8 <pbuf_alloc>
  if (q == NULL) {
 8008cb0:	4605      	mov	r5, r0
 8008cb2:	b118      	cbz	r0, 8008cbc <pbuf_clone+0x18>
    return NULL;
  }
  err = pbuf_copy(q, p);
 8008cb4:	4621      	mov	r1, r4
 8008cb6:	f7ff ff05 	bl	8008ac4 <pbuf_copy>
  LWIP_UNUSED_ARG(err); /* in case of LWIP_NOASSERT */
  LWIP_ASSERT("pbuf_copy failed", err == ERR_OK);
 8008cba:	b908      	cbnz	r0, 8008cc0 <pbuf_clone+0x1c>
  return q;
}
 8008cbc:	4628      	mov	r0, r5
 8008cbe:	bd38      	pop	{r3, r4, r5, pc}
  LWIP_ASSERT("pbuf_copy failed", err == ERR_OK);
 8008cc0:	4b03      	ldr	r3, [pc, #12]	; (8008cd0 <pbuf_clone+0x2c>)
 8008cc2:	f240 5224 	movw	r2, #1316	; 0x524
 8008cc6:	4903      	ldr	r1, [pc, #12]	; (8008cd4 <pbuf_clone+0x30>)
 8008cc8:	4803      	ldr	r0, [pc, #12]	; (8008cd8 <pbuf_clone+0x34>)
 8008cca:	f006 fa13 	bl	800f0f4 <iprintf>
 8008cce:	e7f5      	b.n	8008cbc <pbuf_clone+0x18>
 8008cd0:	080110a4 	.word	0x080110a4
 8008cd4:	08011330 	.word	0x08011330
 8008cd8:	080103a4 	.word	0x080103a4

08008cdc <tcp_new_port>:
 *
 * @return a new (free) local TCP port number
 */
static u16_t
tcp_new_port(void)
{
 8008cdc:	b510      	push	{r4, lr}
  u8_t i;
  u16_t n = 0;
 8008cde:	4b13      	ldr	r3, [pc, #76]	; (8008d2c <tcp_new_port+0x50>)
 8008ce0:	8818      	ldrh	r0, [r3, #0]
{
 8008ce2:	f44f 4480 	mov.w	r4, #16384	; 0x4000
  struct tcp_pcb *pcb;

again:
  tcp_port++;
  if (tcp_port == TCP_LOCAL_PORT_RANGE_END) {
 8008ce6:	f64f 7eff 	movw	lr, #65535	; 0xffff
 8008cea:	e002      	b.n	8008cf2 <tcp_new_port+0x16>
  /* Check all PCB lists. */
  for (i = 0; i < NUM_TCP_PCB_LISTS; i++) {
    for (pcb = *tcp_pcb_lists[i]; pcb != NULL; pcb = pcb->next) {
      if (pcb->local_port == tcp_port) {
        n++;
        if (n > (TCP_LOCAL_PORT_RANGE_END - TCP_LOCAL_PORT_RANGE_START)) {
 8008cec:	3c01      	subs	r4, #1
 8008cee:	b2a4      	uxth	r4, r4
 8008cf0:	b1bc      	cbz	r4, 8008d22 <tcp_new_port+0x46>
  tcp_port++;
 8008cf2:	3001      	adds	r0, #1
 8008cf4:	b280      	uxth	r0, r0
    tcp_port = TCP_LOCAL_PORT_RANGE_START;
 8008cf6:	4570      	cmp	r0, lr
 8008cf8:	bf08      	it	eq
 8008cfa:	f44f 4040 	moveq.w	r0, #49152	; 0xc000
  for (i = 0; i < NUM_TCP_PCB_LISTS; i++) {
 8008cfe:	490c      	ldr	r1, [pc, #48]	; (8008d30 <tcp_new_port+0x54>)
 8008d00:	f101 0c10 	add.w	ip, r1, #16
    for (pcb = *tcp_pcb_lists[i]; pcb != NULL; pcb = pcb->next) {
 8008d04:	f851 3b04 	ldr.w	r3, [r1], #4
 8008d08:	681b      	ldr	r3, [r3, #0]
 8008d0a:	b12b      	cbz	r3, 8008d18 <tcp_new_port+0x3c>
      if (pcb->local_port == tcp_port) {
 8008d0c:	8ada      	ldrh	r2, [r3, #22]
 8008d0e:	4282      	cmp	r2, r0
 8008d10:	d0ec      	beq.n	8008cec <tcp_new_port+0x10>
    for (pcb = *tcp_pcb_lists[i]; pcb != NULL; pcb = pcb->next) {
 8008d12:	68db      	ldr	r3, [r3, #12]
 8008d14:	2b00      	cmp	r3, #0
 8008d16:	d1f9      	bne.n	8008d0c <tcp_new_port+0x30>
  for (i = 0; i < NUM_TCP_PCB_LISTS; i++) {
 8008d18:	4561      	cmp	r1, ip
 8008d1a:	d1f3      	bne.n	8008d04 <tcp_new_port+0x28>
 8008d1c:	4b03      	ldr	r3, [pc, #12]	; (8008d2c <tcp_new_port+0x50>)
 8008d1e:	8018      	strh	r0, [r3, #0]
        goto again;
      }
    }
  }
  return tcp_port;
}
 8008d20:	bd10      	pop	{r4, pc}
 8008d22:	4b02      	ldr	r3, [pc, #8]	; (8008d2c <tcp_new_port+0x50>)
 8008d24:	8018      	strh	r0, [r3, #0]
          return 0;
 8008d26:	4620      	mov	r0, r4
 8008d28:	e7fa      	b.n	8008d20 <tcp_new_port+0x44>
 8008d2a:	bf00      	nop
 8008d2c:	20000028 	.word	0x20000028
 8008d30:	080119d0 	.word	0x080119d0

08008d34 <tcp_close_shutdown_fin>:
{
 8008d34:	b510      	push	{r4, lr}
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 8008d36:	4604      	mov	r4, r0
 8008d38:	b140      	cbz	r0, 8008d4c <tcp_close_shutdown_fin+0x18>
  switch (pcb->state) {
 8008d3a:	7d23      	ldrb	r3, [r4, #20]
 8008d3c:	2b04      	cmp	r3, #4
 8008d3e:	d018      	beq.n	8008d72 <tcp_close_shutdown_fin+0x3e>
 8008d40:	2b07      	cmp	r3, #7
 8008d42:	d01d      	beq.n	8008d80 <tcp_close_shutdown_fin+0x4c>
 8008d44:	2b03      	cmp	r3, #3
 8008d46:	d009      	beq.n	8008d5c <tcp_close_shutdown_fin+0x28>
 8008d48:	2000      	movs	r0, #0
}
 8008d4a:	bd10      	pop	{r4, pc}
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 8008d4c:	4b14      	ldr	r3, [pc, #80]	; (8008da0 <tcp_close_shutdown_fin+0x6c>)
 8008d4e:	f44f 72ce 	mov.w	r2, #412	; 0x19c
 8008d52:	4914      	ldr	r1, [pc, #80]	; (8008da4 <tcp_close_shutdown_fin+0x70>)
 8008d54:	4814      	ldr	r0, [pc, #80]	; (8008da8 <tcp_close_shutdown_fin+0x74>)
 8008d56:	f006 f9cd 	bl	800f0f4 <iprintf>
 8008d5a:	e7ee      	b.n	8008d3a <tcp_close_shutdown_fin+0x6>
      err = tcp_send_fin(pcb);
 8008d5c:	4620      	mov	r0, r4
 8008d5e:	f003 fbe3 	bl	800c528 <tcp_send_fin>
      if (err == ERR_OK) {
 8008d62:	b9a0      	cbnz	r0, 8008d8e <tcp_close_shutdown_fin+0x5a>
        pcb->state = FIN_WAIT_1;
 8008d64:	2305      	movs	r3, #5
 8008d66:	7523      	strb	r3, [r4, #20]
    tcp_output(pcb);
 8008d68:	4620      	mov	r0, r4
 8008d6a:	f003 fd63 	bl	800c834 <tcp_output>
  return err;
 8008d6e:	2000      	movs	r0, #0
 8008d70:	e7eb      	b.n	8008d4a <tcp_close_shutdown_fin+0x16>
      err = tcp_send_fin(pcb);
 8008d72:	4620      	mov	r0, r4
 8008d74:	f003 fbd8 	bl	800c528 <tcp_send_fin>
      if (err == ERR_OK) {
 8008d78:	b948      	cbnz	r0, 8008d8e <tcp_close_shutdown_fin+0x5a>
        pcb->state = FIN_WAIT_1;
 8008d7a:	2305      	movs	r3, #5
 8008d7c:	7523      	strb	r3, [r4, #20]
 8008d7e:	e7f3      	b.n	8008d68 <tcp_close_shutdown_fin+0x34>
      err = tcp_send_fin(pcb);
 8008d80:	4620      	mov	r0, r4
 8008d82:	f003 fbd1 	bl	800c528 <tcp_send_fin>
      if (err == ERR_OK) {
 8008d86:	b910      	cbnz	r0, 8008d8e <tcp_close_shutdown_fin+0x5a>
        pcb->state = LAST_ACK;
 8008d88:	2309      	movs	r3, #9
 8008d8a:	7523      	strb	r3, [r4, #20]
 8008d8c:	e7ec      	b.n	8008d68 <tcp_close_shutdown_fin+0x34>
  } else if (err == ERR_MEM) {
 8008d8e:	f1b0 3fff 	cmp.w	r0, #4294967295
 8008d92:	d1da      	bne.n	8008d4a <tcp_close_shutdown_fin+0x16>
    tcp_set_flags(pcb, TF_CLOSEPEND);
 8008d94:	8b63      	ldrh	r3, [r4, #26]
 8008d96:	f043 0308 	orr.w	r3, r3, #8
 8008d9a:	8363      	strh	r3, [r4, #26]
    return ERR_OK;
 8008d9c:	2000      	movs	r0, #0
 8008d9e:	e7d4      	b.n	8008d4a <tcp_close_shutdown_fin+0x16>
 8008da0:	08011344 	.word	0x08011344
 8008da4:	08011374 	.word	0x08011374
 8008da8:	080103a4 	.word	0x080103a4

08008dac <tcp_init>:
{
 8008dac:	b508      	push	{r3, lr}
  tcp_port = TCP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 8008dae:	f006 f9b9 	bl	800f124 <rand>
 8008db2:	ea6f 4080 	mvn.w	r0, r0, lsl #18
 8008db6:	ea6f 4090 	mvn.w	r0, r0, lsr #18
 8008dba:	4b01      	ldr	r3, [pc, #4]	; (8008dc0 <tcp_init+0x14>)
 8008dbc:	8018      	strh	r0, [r3, #0]
}
 8008dbe:	bd08      	pop	{r3, pc}
 8008dc0:	20000028 	.word	0x20000028

08008dc4 <tcp_free>:
{
 8008dc4:	b510      	push	{r4, lr}
 8008dc6:	4604      	mov	r4, r0
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 8008dc8:	7d03      	ldrb	r3, [r0, #20]
 8008dca:	2b01      	cmp	r3, #1
 8008dcc:	d004      	beq.n	8008dd8 <tcp_free+0x14>
  memp_free(MEMP_TCP_PCB, pcb);
 8008dce:	4621      	mov	r1, r4
 8008dd0:	2001      	movs	r0, #1
 8008dd2:	f7ff f9d7 	bl	8008184 <memp_free>
}
 8008dd6:	bd10      	pop	{r4, pc}
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 8008dd8:	4b03      	ldr	r3, [pc, #12]	; (8008de8 <tcp_free+0x24>)
 8008dda:	22d4      	movs	r2, #212	; 0xd4
 8008ddc:	4903      	ldr	r1, [pc, #12]	; (8008dec <tcp_free+0x28>)
 8008dde:	4804      	ldr	r0, [pc, #16]	; (8008df0 <tcp_free+0x2c>)
 8008de0:	f006 f988 	bl	800f0f4 <iprintf>
 8008de4:	e7f3      	b.n	8008dce <tcp_free+0xa>
 8008de6:	bf00      	nop
 8008de8:	08011344 	.word	0x08011344
 8008dec:	08011380 	.word	0x08011380
 8008df0:	080103a4 	.word	0x080103a4

08008df4 <tcp_bind>:
{
 8008df4:	b570      	push	{r4, r5, r6, lr}
    ipaddr = IP4_ADDR_ANY;
 8008df6:	4c2a      	ldr	r4, [pc, #168]	; (8008ea0 <tcp_bind+0xac>)
 8008df8:	2900      	cmp	r1, #0
 8008dfa:	bf18      	it	ne
 8008dfc:	460c      	movne	r4, r1
  LWIP_ERROR("tcp_bind: invalid pcb", pcb != NULL, return ERR_ARG);
 8008dfe:	b168      	cbz	r0, 8008e1c <tcp_bind+0x28>
 8008e00:	4605      	mov	r5, r0
  LWIP_ERROR("tcp_bind: can only bind in state CLOSED", pcb->state == CLOSED, return ERR_VAL);
 8008e02:	7d03      	ldrb	r3, [r0, #20]
 8008e04:	b9a3      	cbnz	r3, 8008e30 <tcp_bind+0x3c>
  if (port == 0) {
 8008e06:	b1ea      	cbz	r2, 8008e44 <tcp_bind+0x50>
 8008e08:	4e26      	ldr	r6, [pc, #152]	; (8008ea4 <tcp_bind+0xb0>)
 8008e0a:	f106 0c10 	add.w	ip, r6, #16
      for (cpcb = *tcp_pcb_lists[i]; cpcb != NULL; cpcb = cpcb->next) {
 8008e0e:	f856 3b04 	ldr.w	r3, [r6], #4
 8008e12:	681b      	ldr	r3, [r3, #0]
 8008e14:	bb53      	cbnz	r3, 8008e6c <tcp_bind+0x78>
    for (i = 0; i < max_pcb_list; i++) {
 8008e16:	4566      	cmp	r6, ip
 8008e18:	d1f9      	bne.n	8008e0e <tcp_bind+0x1a>
 8008e1a:	e017      	b.n	8008e4c <tcp_bind+0x58>
  LWIP_ERROR("tcp_bind: invalid pcb", pcb != NULL, return ERR_ARG);
 8008e1c:	4b22      	ldr	r3, [pc, #136]	; (8008ea8 <tcp_bind+0xb4>)
 8008e1e:	f240 22a9 	movw	r2, #681	; 0x2a9
 8008e22:	4922      	ldr	r1, [pc, #136]	; (8008eac <tcp_bind+0xb8>)
 8008e24:	4822      	ldr	r0, [pc, #136]	; (8008eb0 <tcp_bind+0xbc>)
 8008e26:	f006 f965 	bl	800f0f4 <iprintf>
 8008e2a:	f06f 000f 	mvn.w	r0, #15
 8008e2e:	e019      	b.n	8008e64 <tcp_bind+0x70>
  LWIP_ERROR("tcp_bind: can only bind in state CLOSED", pcb->state == CLOSED, return ERR_VAL);
 8008e30:	4b1d      	ldr	r3, [pc, #116]	; (8008ea8 <tcp_bind+0xb4>)
 8008e32:	f240 22ab 	movw	r2, #683	; 0x2ab
 8008e36:	491f      	ldr	r1, [pc, #124]	; (8008eb4 <tcp_bind+0xc0>)
 8008e38:	481d      	ldr	r0, [pc, #116]	; (8008eb0 <tcp_bind+0xbc>)
 8008e3a:	f006 f95b 	bl	800f0f4 <iprintf>
 8008e3e:	f06f 0005 	mvn.w	r0, #5
 8008e42:	e00f      	b.n	8008e64 <tcp_bind+0x70>
    port = tcp_new_port();
 8008e44:	f7ff ff4a 	bl	8008cdc <tcp_new_port>
    if (port == 0) {
 8008e48:	4602      	mov	r2, r0
 8008e4a:	b1e0      	cbz	r0, 8008e86 <tcp_bind+0x92>
  if (!ip_addr_isany(ipaddr)
 8008e4c:	b114      	cbz	r4, 8008e54 <tcp_bind+0x60>
 8008e4e:	6823      	ldr	r3, [r4, #0]
 8008e50:	b103      	cbz	r3, 8008e54 <tcp_bind+0x60>
    ip_addr_set(&pcb->local_ip, ipaddr);
 8008e52:	602b      	str	r3, [r5, #0]
  pcb->local_port = port;
 8008e54:	82ea      	strh	r2, [r5, #22]
  TCP_REG(&tcp_bound_pcbs, pcb);
 8008e56:	4b18      	ldr	r3, [pc, #96]	; (8008eb8 <tcp_bind+0xc4>)
 8008e58:	681a      	ldr	r2, [r3, #0]
 8008e5a:	60ea      	str	r2, [r5, #12]
 8008e5c:	601d      	str	r5, [r3, #0]
 8008e5e:	f003 fff9 	bl	800ce54 <tcp_timer_needed>
  return ERR_OK;
 8008e62:	2000      	movs	r0, #0
}
 8008e64:	bd70      	pop	{r4, r5, r6, pc}
      for (cpcb = *tcp_pcb_lists[i]; cpcb != NULL; cpcb = cpcb->next) {
 8008e66:	68db      	ldr	r3, [r3, #12]
 8008e68:	2b00      	cmp	r3, #0
 8008e6a:	d0d4      	beq.n	8008e16 <tcp_bind+0x22>
        if (cpcb->local_port == port) {
 8008e6c:	8ad9      	ldrh	r1, [r3, #22]
 8008e6e:	4291      	cmp	r1, r2
 8008e70:	d1f9      	bne.n	8008e66 <tcp_bind+0x72>
                (ip_addr_isany(&cpcb->local_ip) ||
 8008e72:	6819      	ldr	r1, [r3, #0]
 8008e74:	b151      	cbz	r1, 8008e8c <tcp_bind+0x98>
 8008e76:	b164      	cbz	r4, 8008e92 <tcp_bind+0x9e>
                 ip_addr_isany(ipaddr) ||
 8008e78:	6820      	ldr	r0, [r4, #0]
 8008e7a:	b168      	cbz	r0, 8008e98 <tcp_bind+0xa4>
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
 8008e7c:	4281      	cmp	r1, r0
 8008e7e:	d1f2      	bne.n	8008e66 <tcp_bind+0x72>
              return ERR_USE;
 8008e80:	f06f 0007 	mvn.w	r0, #7
 8008e84:	e7ee      	b.n	8008e64 <tcp_bind+0x70>
      return ERR_BUF;
 8008e86:	f06f 0001 	mvn.w	r0, #1
 8008e8a:	e7eb      	b.n	8008e64 <tcp_bind+0x70>
              return ERR_USE;
 8008e8c:	f06f 0007 	mvn.w	r0, #7
 8008e90:	e7e8      	b.n	8008e64 <tcp_bind+0x70>
 8008e92:	f06f 0007 	mvn.w	r0, #7
 8008e96:	e7e5      	b.n	8008e64 <tcp_bind+0x70>
 8008e98:	f06f 0007 	mvn.w	r0, #7
 8008e9c:	e7e2      	b.n	8008e64 <tcp_bind+0x70>
 8008e9e:	bf00      	nop
 8008ea0:	080129f0 	.word	0x080129f0
 8008ea4:	080119d0 	.word	0x080119d0
 8008ea8:	08011344 	.word	0x08011344
 8008eac:	08011394 	.word	0x08011394
 8008eb0:	080103a4 	.word	0x080103a4
 8008eb4:	080113ac 	.word	0x080113ac
 8008eb8:	2001090c 	.word	0x2001090c

08008ebc <tcp_listen_with_backlog_and_err>:
{
 8008ebc:	b570      	push	{r4, r5, r6, lr}
 8008ebe:	4616      	mov	r6, r2
  LWIP_ERROR("tcp_listen_with_backlog_and_err: invalid pcb", pcb != NULL, res = ERR_ARG; goto done);
 8008ec0:	4604      	mov	r4, r0
 8008ec2:	b330      	cbz	r0, 8008f12 <tcp_listen_with_backlog_and_err+0x56>
  LWIP_ERROR("tcp_listen_with_backlog_and_err: pcb already connected", pcb->state == CLOSED, res = ERR_CLSD; goto done);
 8008ec4:	7d03      	ldrb	r3, [r0, #20]
 8008ec6:	2b00      	cmp	r3, #0
 8008ec8:	d12e      	bne.n	8008f28 <tcp_listen_with_backlog_and_err+0x6c>
  lpcb = (struct tcp_pcb_listen *)memp_malloc(MEMP_TCP_PCB_LISTEN);
 8008eca:	2002      	movs	r0, #2
 8008ecc:	f7ff f92a 	bl	8008124 <memp_malloc>
  if (lpcb == NULL) {
 8008ed0:	4605      	mov	r5, r0
 8008ed2:	2800      	cmp	r0, #0
 8008ed4:	d04b      	beq.n	8008f6e <tcp_listen_with_backlog_and_err+0xb2>
  lpcb->callback_arg = pcb->callback_arg;
 8008ed6:	6923      	ldr	r3, [r4, #16]
 8008ed8:	6103      	str	r3, [r0, #16]
  lpcb->local_port = pcb->local_port;
 8008eda:	8ae3      	ldrh	r3, [r4, #22]
 8008edc:	82c3      	strh	r3, [r0, #22]
  lpcb->state = LISTEN;
 8008ede:	2301      	movs	r3, #1
 8008ee0:	7503      	strb	r3, [r0, #20]
  lpcb->prio = pcb->prio;
 8008ee2:	7d63      	ldrb	r3, [r4, #21]
 8008ee4:	7543      	strb	r3, [r0, #21]
  lpcb->so_options = pcb->so_options;
 8008ee6:	7a63      	ldrb	r3, [r4, #9]
 8008ee8:	7243      	strb	r3, [r0, #9]
  lpcb->netif_idx = NETIF_NO_INDEX;
 8008eea:	2300      	movs	r3, #0
 8008eec:	7203      	strb	r3, [r0, #8]
  lpcb->ttl = pcb->ttl;
 8008eee:	7ae3      	ldrb	r3, [r4, #11]
 8008ef0:	72c3      	strb	r3, [r0, #11]
  lpcb->tos = pcb->tos;
 8008ef2:	7aa3      	ldrb	r3, [r4, #10]
 8008ef4:	7283      	strb	r3, [r0, #10]
  ip_addr_copy(lpcb->local_ip, pcb->local_ip);
 8008ef6:	6823      	ldr	r3, [r4, #0]
 8008ef8:	6003      	str	r3, [r0, #0]
  if (pcb->local_port != 0) {
 8008efa:	8ae3      	ldrh	r3, [r4, #22]
 8008efc:	b33b      	cbz	r3, 8008f4e <tcp_listen_with_backlog_and_err+0x92>
    TCP_RMV(&tcp_bound_pcbs, pcb);
 8008efe:	4b1d      	ldr	r3, [pc, #116]	; (8008f74 <tcp_listen_with_backlog_and_err+0xb8>)
 8008f00:	681b      	ldr	r3, [r3, #0]
 8008f02:	42a3      	cmp	r3, r4
 8008f04:	d01b      	beq.n	8008f3e <tcp_listen_with_backlog_and_err+0x82>
 8008f06:	b303      	cbz	r3, 8008f4a <tcp_listen_with_backlog_and_err+0x8e>
 8008f08:	68da      	ldr	r2, [r3, #12]
 8008f0a:	42a2      	cmp	r2, r4
 8008f0c:	d01b      	beq.n	8008f46 <tcp_listen_with_backlog_and_err+0x8a>
 8008f0e:	4613      	mov	r3, r2
 8008f10:	e7f9      	b.n	8008f06 <tcp_listen_with_backlog_and_err+0x4a>
  LWIP_ERROR("tcp_listen_with_backlog_and_err: invalid pcb", pcb != NULL, res = ERR_ARG; goto done);
 8008f12:	4b19      	ldr	r3, [pc, #100]	; (8008f78 <tcp_listen_with_backlog_and_err+0xbc>)
 8008f14:	f240 3259 	movw	r2, #857	; 0x359
 8008f18:	4918      	ldr	r1, [pc, #96]	; (8008f7c <tcp_listen_with_backlog_and_err+0xc0>)
 8008f1a:	4819      	ldr	r0, [pc, #100]	; (8008f80 <tcp_listen_with_backlog_and_err+0xc4>)
 8008f1c:	f006 f8ea 	bl	800f0f4 <iprintf>
  struct tcp_pcb_listen *lpcb = NULL;
 8008f20:	4625      	mov	r5, r4
  LWIP_ERROR("tcp_listen_with_backlog_and_err: invalid pcb", pcb != NULL, res = ERR_ARG; goto done);
 8008f22:	f06f 030f 	mvn.w	r3, #15
 8008f26:	e01e      	b.n	8008f66 <tcp_listen_with_backlog_and_err+0xaa>
  LWIP_ERROR("tcp_listen_with_backlog_and_err: pcb already connected", pcb->state == CLOSED, res = ERR_CLSD; goto done);
 8008f28:	4b13      	ldr	r3, [pc, #76]	; (8008f78 <tcp_listen_with_backlog_and_err+0xbc>)
 8008f2a:	f240 325a 	movw	r2, #858	; 0x35a
 8008f2e:	4915      	ldr	r1, [pc, #84]	; (8008f84 <tcp_listen_with_backlog_and_err+0xc8>)
 8008f30:	4813      	ldr	r0, [pc, #76]	; (8008f80 <tcp_listen_with_backlog_and_err+0xc4>)
 8008f32:	f006 f8df 	bl	800f0f4 <iprintf>
 8008f36:	f06f 030e 	mvn.w	r3, #14
  struct tcp_pcb_listen *lpcb = NULL;
 8008f3a:	2500      	movs	r5, #0
  LWIP_ERROR("tcp_listen_with_backlog_and_err: pcb already connected", pcb->state == CLOSED, res = ERR_CLSD; goto done);
 8008f3c:	e013      	b.n	8008f66 <tcp_listen_with_backlog_and_err+0xaa>
    TCP_RMV(&tcp_bound_pcbs, pcb);
 8008f3e:	68e2      	ldr	r2, [r4, #12]
 8008f40:	4b0c      	ldr	r3, [pc, #48]	; (8008f74 <tcp_listen_with_backlog_and_err+0xb8>)
 8008f42:	601a      	str	r2, [r3, #0]
 8008f44:	e001      	b.n	8008f4a <tcp_listen_with_backlog_and_err+0x8e>
 8008f46:	68e2      	ldr	r2, [r4, #12]
 8008f48:	60da      	str	r2, [r3, #12]
 8008f4a:	2300      	movs	r3, #0
 8008f4c:	60e3      	str	r3, [r4, #12]
  tcp_free(pcb);
 8008f4e:	4620      	mov	r0, r4
 8008f50:	f7ff ff38 	bl	8008dc4 <tcp_free>
  lpcb->accept = tcp_accept_null;
 8008f54:	4b0c      	ldr	r3, [pc, #48]	; (8008f88 <tcp_listen_with_backlog_and_err+0xcc>)
 8008f56:	61ab      	str	r3, [r5, #24]
  TCP_REG(&tcp_listen_pcbs.pcbs, (struct tcp_pcb *)lpcb);
 8008f58:	4b0c      	ldr	r3, [pc, #48]	; (8008f8c <tcp_listen_with_backlog_and_err+0xd0>)
 8008f5a:	681a      	ldr	r2, [r3, #0]
 8008f5c:	60ea      	str	r2, [r5, #12]
 8008f5e:	601d      	str	r5, [r3, #0]
 8008f60:	f003 ff78 	bl	800ce54 <tcp_timer_needed>
  res = ERR_OK;
 8008f64:	2300      	movs	r3, #0
  if (err != NULL) {
 8008f66:	b106      	cbz	r6, 8008f6a <tcp_listen_with_backlog_and_err+0xae>
    *err = res;
 8008f68:	7033      	strb	r3, [r6, #0]
}
 8008f6a:	4628      	mov	r0, r5
 8008f6c:	bd70      	pop	{r4, r5, r6, pc}
    res = ERR_MEM;
 8008f6e:	f04f 33ff 	mov.w	r3, #4294967295
 8008f72:	e7f8      	b.n	8008f66 <tcp_listen_with_backlog_and_err+0xaa>
 8008f74:	2001090c 	.word	0x2001090c
 8008f78:	08011344 	.word	0x08011344
 8008f7c:	080113d4 	.word	0x080113d4
 8008f80:	080103a4 	.word	0x080103a4
 8008f84:	08011404 	.word	0x08011404
 8008f88:	080094c1 	.word	0x080094c1
 8008f8c:	20010910 	.word	0x20010910

08008f90 <tcp_update_rcv_ann_wnd>:
{
 8008f90:	b538      	push	{r3, r4, r5, lr}
  LWIP_ASSERT("tcp_update_rcv_ann_wnd: invalid pcb", pcb != NULL);
 8008f92:	4604      	mov	r4, r0
 8008f94:	b188      	cbz	r0, 8008fba <tcp_update_rcv_ann_wnd+0x2a>
  new_right_edge = pcb->rcv_nxt + pcb->rcv_wnd;
 8008f96:	6a65      	ldr	r5, [r4, #36]	; 0x24
 8008f98:	8d22      	ldrh	r2, [r4, #40]	; 0x28
  if (TCP_SEQ_GEQ(new_right_edge, pcb->rcv_ann_right_edge + LWIP_MIN((TCP_WND / 2), pcb->mss))) {
 8008f9a:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
  new_right_edge = pcb->rcv_nxt + pcb->rcv_wnd;
 8008f9c:	1950      	adds	r0, r2, r5
 8008f9e:	1ac0      	subs	r0, r0, r3
  if (TCP_SEQ_GEQ(new_right_edge, pcb->rcv_ann_right_edge + LWIP_MIN((TCP_WND / 2), pcb->mss))) {
 8008fa0:	f8b4 c032 	ldrh.w	ip, [r4, #50]	; 0x32
 8008fa4:	f5bc 6f86 	cmp.w	ip, #1072	; 0x430
 8008fa8:	bf94      	ite	ls
 8008faa:	eba0 010c 	subls.w	r1, r0, ip
 8008fae:	f5a0 6186 	subhi.w	r1, r0, #1072	; 0x430
 8008fb2:	2900      	cmp	r1, #0
 8008fb4:	db09      	blt.n	8008fca <tcp_update_rcv_ann_wnd+0x3a>
    pcb->rcv_ann_wnd = pcb->rcv_wnd;
 8008fb6:	8562      	strh	r2, [r4, #42]	; 0x2a
}
 8008fb8:	bd38      	pop	{r3, r4, r5, pc}
  LWIP_ASSERT("tcp_update_rcv_ann_wnd: invalid pcb", pcb != NULL);
 8008fba:	4b0e      	ldr	r3, [pc, #56]	; (8008ff4 <tcp_update_rcv_ann_wnd+0x64>)
 8008fbc:	f240 32a6 	movw	r2, #934	; 0x3a6
 8008fc0:	490d      	ldr	r1, [pc, #52]	; (8008ff8 <tcp_update_rcv_ann_wnd+0x68>)
 8008fc2:	480e      	ldr	r0, [pc, #56]	; (8008ffc <tcp_update_rcv_ann_wnd+0x6c>)
 8008fc4:	f006 f896 	bl	800f0f4 <iprintf>
 8008fc8:	e7e5      	b.n	8008f96 <tcp_update_rcv_ann_wnd+0x6>
    if (TCP_SEQ_GT(pcb->rcv_nxt, pcb->rcv_ann_right_edge)) {
 8008fca:	1aea      	subs	r2, r5, r3
 8008fcc:	2a00      	cmp	r2, #0
 8008fce:	dd02      	ble.n	8008fd6 <tcp_update_rcv_ann_wnd+0x46>
      pcb->rcv_ann_wnd = 0;
 8008fd0:	2000      	movs	r0, #0
 8008fd2:	8560      	strh	r0, [r4, #42]	; 0x2a
 8008fd4:	e7f0      	b.n	8008fb8 <tcp_update_rcv_ann_wnd+0x28>
      u32_t new_rcv_ann_wnd = pcb->rcv_ann_right_edge - pcb->rcv_nxt;
 8008fd6:	1b5d      	subs	r5, r3, r5
      LWIP_ASSERT("new_rcv_ann_wnd <= 0xffff", new_rcv_ann_wnd <= 0xffff);
 8008fd8:	f5b5 3f80 	cmp.w	r5, #65536	; 0x10000
 8008fdc:	d202      	bcs.n	8008fe4 <tcp_update_rcv_ann_wnd+0x54>
      pcb->rcv_ann_wnd = (tcpwnd_size_t)new_rcv_ann_wnd;
 8008fde:	8565      	strh	r5, [r4, #42]	; 0x2a
    return 0;
 8008fe0:	2000      	movs	r0, #0
 8008fe2:	e7e9      	b.n	8008fb8 <tcp_update_rcv_ann_wnd+0x28>
      LWIP_ASSERT("new_rcv_ann_wnd <= 0xffff", new_rcv_ann_wnd <= 0xffff);
 8008fe4:	4b03      	ldr	r3, [pc, #12]	; (8008ff4 <tcp_update_rcv_ann_wnd+0x64>)
 8008fe6:	f240 32b6 	movw	r2, #950	; 0x3b6
 8008fea:	4905      	ldr	r1, [pc, #20]	; (8009000 <tcp_update_rcv_ann_wnd+0x70>)
 8008fec:	4803      	ldr	r0, [pc, #12]	; (8008ffc <tcp_update_rcv_ann_wnd+0x6c>)
 8008fee:	f006 f881 	bl	800f0f4 <iprintf>
 8008ff2:	e7f4      	b.n	8008fde <tcp_update_rcv_ann_wnd+0x4e>
 8008ff4:	08011344 	.word	0x08011344
 8008ff8:	0801143c 	.word	0x0801143c
 8008ffc:	080103a4 	.word	0x080103a4
 8009000:	08011460 	.word	0x08011460

08009004 <tcp_recved>:
{
 8009004:	b538      	push	{r3, r4, r5, lr}
  LWIP_ERROR("tcp_recved: invalid pcb", pcb != NULL, return);
 8009006:	b178      	cbz	r0, 8009028 <tcp_recved+0x24>
 8009008:	460c      	mov	r4, r1
 800900a:	4605      	mov	r5, r0
  LWIP_ASSERT("don't call tcp_recved for listen-pcbs",
 800900c:	7d03      	ldrb	r3, [r0, #20]
 800900e:	2b01      	cmp	r3, #1
 8009010:	d012      	beq.n	8009038 <tcp_recved+0x34>
  rcv_wnd = (tcpwnd_size_t)(pcb->rcv_wnd + len);
 8009012:	8d2b      	ldrh	r3, [r5, #40]	; 0x28
 8009014:	1919      	adds	r1, r3, r4
 8009016:	b289      	uxth	r1, r1
  if ((rcv_wnd > TCP_WND_MAX(pcb)) || (rcv_wnd < pcb->rcv_wnd)) {
 8009018:	f5b1 6f06 	cmp.w	r1, #2144	; 0x860
 800901c:	d814      	bhi.n	8009048 <tcp_recved+0x44>
    pcb->rcv_wnd = TCP_WND_MAX(pcb);
 800901e:	428b      	cmp	r3, r1
 8009020:	bf88      	it	hi
 8009022:	f44f 6106 	movhi.w	r1, #2144	; 0x860
 8009026:	e011      	b.n	800904c <tcp_recved+0x48>
  LWIP_ERROR("tcp_recved: invalid pcb", pcb != NULL, return);
 8009028:	4b10      	ldr	r3, [pc, #64]	; (800906c <tcp_recved+0x68>)
 800902a:	f240 32cf 	movw	r2, #975	; 0x3cf
 800902e:	4910      	ldr	r1, [pc, #64]	; (8009070 <tcp_recved+0x6c>)
 8009030:	4810      	ldr	r0, [pc, #64]	; (8009074 <tcp_recved+0x70>)
 8009032:	f006 f85f 	bl	800f0f4 <iprintf>
 8009036:	e010      	b.n	800905a <tcp_recved+0x56>
  LWIP_ASSERT("don't call tcp_recved for listen-pcbs",
 8009038:	4b0c      	ldr	r3, [pc, #48]	; (800906c <tcp_recved+0x68>)
 800903a:	f240 32d2 	movw	r2, #978	; 0x3d2
 800903e:	490e      	ldr	r1, [pc, #56]	; (8009078 <tcp_recved+0x74>)
 8009040:	480c      	ldr	r0, [pc, #48]	; (8009074 <tcp_recved+0x70>)
 8009042:	f006 f857 	bl	800f0f4 <iprintf>
 8009046:	e7e4      	b.n	8009012 <tcp_recved+0xe>
    pcb->rcv_wnd = TCP_WND_MAX(pcb);
 8009048:	f44f 6106 	mov.w	r1, #2144	; 0x860
 800904c:	8529      	strh	r1, [r5, #40]	; 0x28
  wnd_inflation = tcp_update_rcv_ann_wnd(pcb);
 800904e:	4628      	mov	r0, r5
 8009050:	f7ff ff9e 	bl	8008f90 <tcp_update_rcv_ann_wnd>
  if (wnd_inflation >= TCP_WND_UPDATE_THRESHOLD) {
 8009054:	f5b0 7f06 	cmp.w	r0, #536	; 0x218
 8009058:	d200      	bcs.n	800905c <tcp_recved+0x58>
}
 800905a:	bd38      	pop	{r3, r4, r5, pc}
    tcp_ack_now(pcb);
 800905c:	8b6b      	ldrh	r3, [r5, #26]
 800905e:	f043 0302 	orr.w	r3, r3, #2
 8009062:	836b      	strh	r3, [r5, #26]
    tcp_output(pcb);
 8009064:	4628      	mov	r0, r5
 8009066:	f003 fbe5 	bl	800c834 <tcp_output>
                          len, pcb->rcv_wnd, (u16_t)(TCP_WND_MAX(pcb) - pcb->rcv_wnd)));
 800906a:	e7f6      	b.n	800905a <tcp_recved+0x56>
 800906c:	08011344 	.word	0x08011344
 8009070:	0801147c 	.word	0x0801147c
 8009074:	080103a4 	.word	0x080103a4
 8009078:	08011494 	.word	0x08011494

0800907c <tcp_seg_free>:
 * @param seg single tcp_seg to free
 */
void
tcp_seg_free(struct tcp_seg *seg)
{
  if (seg != NULL) {
 800907c:	b150      	cbz	r0, 8009094 <tcp_seg_free+0x18>
{
 800907e:	b510      	push	{r4, lr}
 8009080:	4604      	mov	r4, r0
    if (seg->p != NULL) {
 8009082:	6840      	ldr	r0, [r0, #4]
 8009084:	b108      	cbz	r0, 800908a <tcp_seg_free+0xe>
      pbuf_free(seg->p);
 8009086:	f7ff fb3f 	bl	8008708 <pbuf_free>
#if TCP_DEBUG
      seg->p = NULL;
#endif /* TCP_DEBUG */
    }
    memp_free(MEMP_TCP_SEG, seg);
 800908a:	4621      	mov	r1, r4
 800908c:	2003      	movs	r0, #3
 800908e:	f7ff f879 	bl	8008184 <memp_free>
  }
}
 8009092:	bd10      	pop	{r4, pc}
 8009094:	4770      	bx	lr

08009096 <tcp_segs_free>:
{
 8009096:	b510      	push	{r4, lr}
  while (seg != NULL) {
 8009098:	4604      	mov	r4, r0
 800909a:	b128      	cbz	r0, 80090a8 <tcp_segs_free+0x12>
    struct tcp_seg *next = seg->next;
 800909c:	4620      	mov	r0, r4
 800909e:	6824      	ldr	r4, [r4, #0]
    tcp_seg_free(seg);
 80090a0:	f7ff ffec 	bl	800907c <tcp_seg_free>
  while (seg != NULL) {
 80090a4:	2c00      	cmp	r4, #0
 80090a6:	d1f9      	bne.n	800909c <tcp_segs_free+0x6>
}
 80090a8:	bd10      	pop	{r4, pc}
	...

080090ac <tcp_seg_copy>:
 * @param seg the old tcp_seg
 * @return a copy of seg
 */
struct tcp_seg *
tcp_seg_copy(struct tcp_seg *seg)
{
 80090ac:	b538      	push	{r3, r4, r5, lr}
  struct tcp_seg *cseg;

  LWIP_ASSERT("tcp_seg_copy: invalid seg", seg != NULL);
 80090ae:	4605      	mov	r5, r0
 80090b0:	b188      	cbz	r0, 80090d6 <tcp_seg_copy+0x2a>

  cseg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG);
 80090b2:	2003      	movs	r0, #3
 80090b4:	f7ff f836 	bl	8008124 <memp_malloc>
  if (cseg == NULL) {
 80090b8:	4604      	mov	r4, r0
 80090ba:	b150      	cbz	r0, 80090d2 <tcp_seg_copy+0x26>
    return NULL;
  }
  SMEMCPY((u8_t *)cseg, (const u8_t *)seg, sizeof(struct tcp_seg));
 80090bc:	6828      	ldr	r0, [r5, #0]
 80090be:	6869      	ldr	r1, [r5, #4]
 80090c0:	68aa      	ldr	r2, [r5, #8]
 80090c2:	68eb      	ldr	r3, [r5, #12]
 80090c4:	6020      	str	r0, [r4, #0]
 80090c6:	6061      	str	r1, [r4, #4]
 80090c8:	60a2      	str	r2, [r4, #8]
 80090ca:	60e3      	str	r3, [r4, #12]
  pbuf_ref(cseg->p);
 80090cc:	6860      	ldr	r0, [r4, #4]
 80090ce:	f7ff fc9f 	bl	8008a10 <pbuf_ref>
  return cseg;
}
 80090d2:	4620      	mov	r0, r4
 80090d4:	bd38      	pop	{r3, r4, r5, pc}
  LWIP_ASSERT("tcp_seg_copy: invalid seg", seg != NULL);
 80090d6:	4b04      	ldr	r3, [pc, #16]	; (80090e8 <tcp_seg_copy+0x3c>)
 80090d8:	f240 6282 	movw	r2, #1666	; 0x682
 80090dc:	4903      	ldr	r1, [pc, #12]	; (80090ec <tcp_seg_copy+0x40>)
 80090de:	4804      	ldr	r0, [pc, #16]	; (80090f0 <tcp_seg_copy+0x44>)
 80090e0:	f006 f808 	bl	800f0f4 <iprintf>
 80090e4:	e7e5      	b.n	80090b2 <tcp_seg_copy+0x6>
 80090e6:	bf00      	nop
 80090e8:	08011344 	.word	0x08011344
 80090ec:	080114bc 	.word	0x080114bc
 80090f0:	080103a4 	.word	0x080103a4

080090f4 <tcp_arg>:
tcp_arg(struct tcp_pcb *pcb, void *arg)
{
  LWIP_ASSERT_CORE_LOCKED();
  /* This function is allowed to be called for both listen pcbs and
     connection pcbs. */
  if (pcb != NULL) {
 80090f4:	b100      	cbz	r0, 80090f8 <tcp_arg+0x4>
    pcb->callback_arg = arg;
 80090f6:	6101      	str	r1, [r0, #16]
  }
}
 80090f8:	4770      	bx	lr
	...

080090fc <tcp_recv>:
 */
void
tcp_recv(struct tcp_pcb *pcb, tcp_recv_fn recv)
{
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 80090fc:	b180      	cbz	r0, 8009120 <tcp_recv+0x24>
{
 80090fe:	b538      	push	{r3, r4, r5, lr}
 8009100:	460c      	mov	r4, r1
 8009102:	4605      	mov	r5, r0
    LWIP_ASSERT("invalid socket state for recv callback", pcb->state != LISTEN);
 8009104:	7d03      	ldrb	r3, [r0, #20]
 8009106:	2b01      	cmp	r3, #1
 8009108:	d002      	beq.n	8009110 <tcp_recv+0x14>
    pcb->recv = recv;
 800910a:	f8c5 4084 	str.w	r4, [r5, #132]	; 0x84
  }
}
 800910e:	bd38      	pop	{r3, r4, r5, pc}
    LWIP_ASSERT("invalid socket state for recv callback", pcb->state != LISTEN);
 8009110:	4b04      	ldr	r3, [pc, #16]	; (8009124 <tcp_recv+0x28>)
 8009112:	f240 72df 	movw	r2, #2015	; 0x7df
 8009116:	4904      	ldr	r1, [pc, #16]	; (8009128 <tcp_recv+0x2c>)
 8009118:	4804      	ldr	r0, [pc, #16]	; (800912c <tcp_recv+0x30>)
 800911a:	f005 ffeb 	bl	800f0f4 <iprintf>
 800911e:	e7f4      	b.n	800910a <tcp_recv+0xe>
 8009120:	4770      	bx	lr
 8009122:	bf00      	nop
 8009124:	08011344 	.word	0x08011344
 8009128:	080114d8 	.word	0x080114d8
 800912c:	080103a4 	.word	0x080103a4

08009130 <tcp_sent>:
 */
void
tcp_sent(struct tcp_pcb *pcb, tcp_sent_fn sent)
{
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 8009130:	b180      	cbz	r0, 8009154 <tcp_sent+0x24>
{
 8009132:	b538      	push	{r3, r4, r5, lr}
 8009134:	460c      	mov	r4, r1
 8009136:	4605      	mov	r5, r0
    LWIP_ASSERT("invalid socket state for sent callback", pcb->state != LISTEN);
 8009138:	7d03      	ldrb	r3, [r0, #20]
 800913a:	2b01      	cmp	r3, #1
 800913c:	d002      	beq.n	8009144 <tcp_sent+0x14>
    pcb->sent = sent;
 800913e:	f8c5 4080 	str.w	r4, [r5, #128]	; 0x80
  }
}
 8009142:	bd38      	pop	{r3, r4, r5, pc}
    LWIP_ASSERT("invalid socket state for sent callback", pcb->state != LISTEN);
 8009144:	4b04      	ldr	r3, [pc, #16]	; (8009158 <tcp_sent+0x28>)
 8009146:	f240 72f3 	movw	r2, #2035	; 0x7f3
 800914a:	4904      	ldr	r1, [pc, #16]	; (800915c <tcp_sent+0x2c>)
 800914c:	4804      	ldr	r0, [pc, #16]	; (8009160 <tcp_sent+0x30>)
 800914e:	f005 ffd1 	bl	800f0f4 <iprintf>
 8009152:	e7f4      	b.n	800913e <tcp_sent+0xe>
 8009154:	4770      	bx	lr
 8009156:	bf00      	nop
 8009158:	08011344 	.word	0x08011344
 800915c:	08011500 	.word	0x08011500
 8009160:	080103a4 	.word	0x080103a4

08009164 <tcp_err>:
 */
void
tcp_err(struct tcp_pcb *pcb, tcp_err_fn err)
{
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 8009164:	b180      	cbz	r0, 8009188 <tcp_err+0x24>
{
 8009166:	b538      	push	{r3, r4, r5, lr}
 8009168:	460c      	mov	r4, r1
 800916a:	4605      	mov	r5, r0
    LWIP_ASSERT("invalid socket state for err callback", pcb->state != LISTEN);
 800916c:	7d03      	ldrb	r3, [r0, #20]
 800916e:	2b01      	cmp	r3, #1
 8009170:	d002      	beq.n	8009178 <tcp_err+0x14>
    pcb->errf = err;
 8009172:	f8c5 4090 	str.w	r4, [r5, #144]	; 0x90
  }
}
 8009176:	bd38      	pop	{r3, r4, r5, pc}
    LWIP_ASSERT("invalid socket state for err callback", pcb->state != LISTEN);
 8009178:	4b04      	ldr	r3, [pc, #16]	; (800918c <tcp_err+0x28>)
 800917a:	f640 020d 	movw	r2, #2061	; 0x80d
 800917e:	4904      	ldr	r1, [pc, #16]	; (8009190 <tcp_err+0x2c>)
 8009180:	4804      	ldr	r0, [pc, #16]	; (8009194 <tcp_err+0x30>)
 8009182:	f005 ffb7 	bl	800f0f4 <iprintf>
 8009186:	e7f4      	b.n	8009172 <tcp_err+0xe>
 8009188:	4770      	bx	lr
 800918a:	bf00      	nop
 800918c:	08011344 	.word	0x08011344
 8009190:	08011528 	.word	0x08011528
 8009194:	080103a4 	.word	0x080103a4

08009198 <tcp_accept>:
 */
void
tcp_accept(struct tcp_pcb *pcb, tcp_accept_fn accept)
{
  LWIP_ASSERT_CORE_LOCKED();
  if ((pcb != NULL) && (pcb->state == LISTEN)) {
 8009198:	b118      	cbz	r0, 80091a2 <tcp_accept+0xa>
 800919a:	7d02      	ldrb	r2, [r0, #20]
 800919c:	2a01      	cmp	r2, #1
    struct tcp_pcb_listen *lpcb = (struct tcp_pcb_listen *)pcb;
    lpcb->accept = accept;
 800919e:	bf08      	it	eq
 80091a0:	6181      	streq	r1, [r0, #24]
  }
}
 80091a2:	4770      	bx	lr

080091a4 <tcp_poll>:
 * the application may use the polling functionality to call tcp_write()
 * again when the connection has been idle for a while.
 */
void
tcp_poll(struct tcp_pcb *pcb, tcp_poll_fn poll, u8_t interval)
{
 80091a4:	b570      	push	{r4, r5, r6, lr}
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_poll: invalid pcb", pcb != NULL, return);
 80091a6:	b148      	cbz	r0, 80091bc <tcp_poll+0x18>
 80091a8:	460d      	mov	r5, r1
 80091aa:	4614      	mov	r4, r2
 80091ac:	4606      	mov	r6, r0
  LWIP_ASSERT("invalid socket state for poll", pcb->state != LISTEN);
 80091ae:	7d03      	ldrb	r3, [r0, #20]
 80091b0:	2b01      	cmp	r3, #1
 80091b2:	d00b      	beq.n	80091cc <tcp_poll+0x28>

#if LWIP_CALLBACK_API
  pcb->poll = poll;
 80091b4:	f8c6 508c 	str.w	r5, [r6, #140]	; 0x8c
#else /* LWIP_CALLBACK_API */
  LWIP_UNUSED_ARG(poll);
#endif /* LWIP_CALLBACK_API */
  pcb->pollinterval = interval;
 80091b8:	7774      	strb	r4, [r6, #29]
}
 80091ba:	bd70      	pop	{r4, r5, r6, pc}
  LWIP_ERROR("tcp_poll: invalid pcb", pcb != NULL, return);
 80091bc:	4b07      	ldr	r3, [pc, #28]	; (80091dc <tcp_poll+0x38>)
 80091be:	f640 023d 	movw	r2, #2109	; 0x83d
 80091c2:	4907      	ldr	r1, [pc, #28]	; (80091e0 <tcp_poll+0x3c>)
 80091c4:	4807      	ldr	r0, [pc, #28]	; (80091e4 <tcp_poll+0x40>)
 80091c6:	f005 ff95 	bl	800f0f4 <iprintf>
 80091ca:	e7f6      	b.n	80091ba <tcp_poll+0x16>
  LWIP_ASSERT("invalid socket state for poll", pcb->state != LISTEN);
 80091cc:	4b03      	ldr	r3, [pc, #12]	; (80091dc <tcp_poll+0x38>)
 80091ce:	f640 023e 	movw	r2, #2110	; 0x83e
 80091d2:	4905      	ldr	r1, [pc, #20]	; (80091e8 <tcp_poll+0x44>)
 80091d4:	4803      	ldr	r0, [pc, #12]	; (80091e4 <tcp_poll+0x40>)
 80091d6:	f005 ff8d 	bl	800f0f4 <iprintf>
 80091da:	e7eb      	b.n	80091b4 <tcp_poll+0x10>
 80091dc:	08011344 	.word	0x08011344
 80091e0:	08011550 	.word	0x08011550
 80091e4:	080103a4 	.word	0x080103a4
 80091e8:	08011568 	.word	0x08011568

080091ec <tcp_next_iss>:
 *
 * @return u32_t pseudo random sequence number
 */
u32_t
tcp_next_iss(struct tcp_pcb *pcb)
{
 80091ec:	b508      	push	{r3, lr}
  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
  return LWIP_HOOK_TCP_ISN(&pcb->local_ip, pcb->local_port, &pcb->remote_ip, pcb->remote_port);
#else /* LWIP_HOOK_TCP_ISN */
  static u32_t iss = 6510;

  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
 80091ee:	b130      	cbz	r0, 80091fe <tcp_next_iss+0x12>
  LWIP_UNUSED_ARG(pcb);

  iss += tcp_ticks;       /* XXX */
 80091f0:	4b07      	ldr	r3, [pc, #28]	; (8009210 <tcp_next_iss+0x24>)
 80091f2:	6818      	ldr	r0, [r3, #0]
 80091f4:	4a07      	ldr	r2, [pc, #28]	; (8009214 <tcp_next_iss+0x28>)
 80091f6:	6812      	ldr	r2, [r2, #0]
 80091f8:	4410      	add	r0, r2
 80091fa:	6018      	str	r0, [r3, #0]
  return iss;
#endif /* LWIP_HOOK_TCP_ISN */
}
 80091fc:	bd08      	pop	{r3, pc}
  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
 80091fe:	4b06      	ldr	r3, [pc, #24]	; (8009218 <tcp_next_iss+0x2c>)
 8009200:	f640 02af 	movw	r2, #2223	; 0x8af
 8009204:	4905      	ldr	r1, [pc, #20]	; (800921c <tcp_next_iss+0x30>)
 8009206:	4806      	ldr	r0, [pc, #24]	; (8009220 <tcp_next_iss+0x34>)
 8009208:	f005 ff74 	bl	800f0f4 <iprintf>
 800920c:	e7f0      	b.n	80091f0 <tcp_next_iss+0x4>
 800920e:	bf00      	nop
 8009210:	20000024 	.word	0x20000024
 8009214:	20010914 	.word	0x20010914
 8009218:	08011344 	.word	0x08011344
 800921c:	08011588 	.word	0x08011588
 8009220:	080103a4 	.word	0x080103a4

08009224 <tcp_eff_send_mss_netif>:
 * by calculating the minimum of TCP_MSS and the mtu (if set) of the target
 * netif (if not NULL).
 */
u16_t
tcp_eff_send_mss_netif(u16_t sendmss, struct netif *outif, const ip_addr_t *dest)
{
 8009224:	b538      	push	{r3, r4, r5, lr}
 8009226:	4605      	mov	r5, r0
 8009228:	460c      	mov	r4, r1
  u16_t mss_s;
  u16_t mtu;

  LWIP_UNUSED_ARG(dest); /* in case IPv6 is disabled */

  LWIP_ASSERT("tcp_eff_send_mss_netif: invalid dst_ip", dest != NULL);
 800922a:	b162      	cbz	r2, 8009246 <tcp_eff_send_mss_netif+0x22>
  else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
  {
    if (outif == NULL) {
 800922c:	b14c      	cbz	r4, 8009242 <tcp_eff_send_mss_netif+0x1e>
      return sendmss;
    }
    mtu = outif->mtu;
 800922e:	8ca3      	ldrh	r3, [r4, #36]	; 0x24
  }
#endif /* LWIP_IPV4 */

  if (mtu != 0) {
 8009230:	b13b      	cbz	r3, 8009242 <tcp_eff_send_mss_netif+0x1e>
#if LWIP_IPV4
    {
      offset = IP_HLEN + TCP_HLEN;
    }
#endif /* LWIP_IPV4 */
    mss_s = (mtu > offset) ? (u16_t)(mtu - offset) : 0;
 8009232:	2b28      	cmp	r3, #40	; 0x28
 8009234:	bf86      	itte	hi
 8009236:	3b28      	subhi	r3, #40	; 0x28
 8009238:	b29b      	uxthhi	r3, r3
 800923a:	2300      	movls	r3, #0
    /* RFC 1122, chap 4.2.2.6:
     * Eff.snd.MSS = min(SendMSS+20, MMS_S) - TCPhdrsize - IPoptionsize
     * We correct for TCP options in tcp_write(), and don't support IP options.
     */
    sendmss = LWIP_MIN(sendmss, mss_s);
 800923c:	429d      	cmp	r5, r3
 800923e:	bf28      	it	cs
 8009240:	461d      	movcs	r5, r3
  }
  return sendmss;
}
 8009242:	4628      	mov	r0, r5
 8009244:	bd38      	pop	{r3, r4, r5, pc}
  LWIP_ASSERT("tcp_eff_send_mss_netif: invalid dst_ip", dest != NULL);
 8009246:	4b04      	ldr	r3, [pc, #16]	; (8009258 <tcp_eff_send_mss_netif+0x34>)
 8009248:	f640 02c5 	movw	r2, #2245	; 0x8c5
 800924c:	4903      	ldr	r1, [pc, #12]	; (800925c <tcp_eff_send_mss_netif+0x38>)
 800924e:	4804      	ldr	r0, [pc, #16]	; (8009260 <tcp_eff_send_mss_netif+0x3c>)
 8009250:	f005 ff50 	bl	800f0f4 <iprintf>
 8009254:	e7ea      	b.n	800922c <tcp_eff_send_mss_netif+0x8>
 8009256:	bf00      	nop
 8009258:	08011344 	.word	0x08011344
 800925c:	080115a4 	.word	0x080115a4
 8009260:	080103a4 	.word	0x080103a4

08009264 <tcp_free_ooseq>:

#if TCP_QUEUE_OOSEQ
/* Free all ooseq pbufs (and possibly reset SACK state) */
void
tcp_free_ooseq(struct tcp_pcb *pcb)
{
 8009264:	b510      	push	{r4, lr}
 8009266:	4604      	mov	r4, r0
  if (pcb->ooseq) {
 8009268:	6f40      	ldr	r0, [r0, #116]	; 0x74
 800926a:	b118      	cbz	r0, 8009274 <tcp_free_ooseq+0x10>
    tcp_segs_free(pcb->ooseq);
 800926c:	f7ff ff13 	bl	8009096 <tcp_segs_free>
    pcb->ooseq = NULL;
 8009270:	2300      	movs	r3, #0
 8009272:	6763      	str	r3, [r4, #116]	; 0x74
#if LWIP_TCP_SACK_OUT
    memset(pcb->rcv_sacks, 0, sizeof(pcb->rcv_sacks));
#endif /* LWIP_TCP_SACK_OUT */
  }
}
 8009274:	bd10      	pop	{r4, pc}
	...

08009278 <tcp_pcb_purge>:
{
 8009278:	b510      	push	{r4, lr}
  LWIP_ERROR("tcp_pcb_purge: invalid pcb", pcb != NULL, return);
 800927a:	b1f8      	cbz	r0, 80092bc <tcp_pcb_purge+0x44>
 800927c:	4604      	mov	r4, r0
  if (pcb->state != CLOSED &&
 800927e:	7d03      	ldrb	r3, [r0, #20]
 8009280:	2b01      	cmp	r3, #1
 8009282:	d91a      	bls.n	80092ba <tcp_pcb_purge+0x42>
 8009284:	2b0a      	cmp	r3, #10
 8009286:	d018      	beq.n	80092ba <tcp_pcb_purge+0x42>
    if (pcb->refused_data != NULL) {
 8009288:	6f80      	ldr	r0, [r0, #120]	; 0x78
 800928a:	b118      	cbz	r0, 8009294 <tcp_pcb_purge+0x1c>
      pbuf_free(pcb->refused_data);
 800928c:	f7ff fa3c 	bl	8008708 <pbuf_free>
      pcb->refused_data = NULL;
 8009290:	2300      	movs	r3, #0
 8009292:	67a3      	str	r3, [r4, #120]	; 0x78
    if (pcb->ooseq != NULL) {
 8009294:	6f63      	ldr	r3, [r4, #116]	; 0x74
 8009296:	b113      	cbz	r3, 800929e <tcp_pcb_purge+0x26>
      tcp_free_ooseq(pcb);
 8009298:	4620      	mov	r0, r4
 800929a:	f7ff ffe3 	bl	8009264 <tcp_free_ooseq>
    pcb->rtime = -1;
 800929e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80092a2:	8623      	strh	r3, [r4, #48]	; 0x30
    tcp_segs_free(pcb->unsent);
 80092a4:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
 80092a6:	f7ff fef6 	bl	8009096 <tcp_segs_free>
    tcp_segs_free(pcb->unacked);
 80092aa:	6f20      	ldr	r0, [r4, #112]	; 0x70
 80092ac:	f7ff fef3 	bl	8009096 <tcp_segs_free>
    pcb->unacked = pcb->unsent = NULL;
 80092b0:	2300      	movs	r3, #0
 80092b2:	66e3      	str	r3, [r4, #108]	; 0x6c
 80092b4:	6723      	str	r3, [r4, #112]	; 0x70
    pcb->unsent_oversize = 0;
 80092b6:	f8a4 3068 	strh.w	r3, [r4, #104]	; 0x68
}
 80092ba:	bd10      	pop	{r4, pc}
  LWIP_ERROR("tcp_pcb_purge: invalid pcb", pcb != NULL, return);
 80092bc:	4b03      	ldr	r3, [pc, #12]	; (80092cc <tcp_pcb_purge+0x54>)
 80092be:	f640 0251 	movw	r2, #2129	; 0x851
 80092c2:	4903      	ldr	r1, [pc, #12]	; (80092d0 <tcp_pcb_purge+0x58>)
 80092c4:	4803      	ldr	r0, [pc, #12]	; (80092d4 <tcp_pcb_purge+0x5c>)
 80092c6:	f005 ff15 	bl	800f0f4 <iprintf>
 80092ca:	e7f6      	b.n	80092ba <tcp_pcb_purge+0x42>
 80092cc:	08011344 	.word	0x08011344
 80092d0:	080115cc 	.word	0x080115cc
 80092d4:	080103a4 	.word	0x080103a4

080092d8 <tcp_pcb_remove>:
{
 80092d8:	b538      	push	{r3, r4, r5, lr}
 80092da:	4605      	mov	r5, r0
  LWIP_ASSERT("tcp_pcb_remove: invalid pcb", pcb != NULL);
 80092dc:	460c      	mov	r4, r1
 80092de:	b149      	cbz	r1, 80092f4 <tcp_pcb_remove+0x1c>
  LWIP_ASSERT("tcp_pcb_remove: invalid pcblist", pcblist != NULL);
 80092e0:	b185      	cbz	r5, 8009304 <tcp_pcb_remove+0x2c>
  TCP_RMV(pcblist, pcb);
 80092e2:	682b      	ldr	r3, [r5, #0]
 80092e4:	42a3      	cmp	r3, r4
 80092e6:	d015      	beq.n	8009314 <tcp_pcb_remove+0x3c>
 80092e8:	b1cb      	cbz	r3, 800931e <tcp_pcb_remove+0x46>
 80092ea:	68da      	ldr	r2, [r3, #12]
 80092ec:	42a2      	cmp	r2, r4
 80092ee:	d014      	beq.n	800931a <tcp_pcb_remove+0x42>
 80092f0:	4613      	mov	r3, r2
 80092f2:	e7f9      	b.n	80092e8 <tcp_pcb_remove+0x10>
  LWIP_ASSERT("tcp_pcb_remove: invalid pcb", pcb != NULL);
 80092f4:	4b25      	ldr	r3, [pc, #148]	; (800938c <tcp_pcb_remove+0xb4>)
 80092f6:	f640 0283 	movw	r2, #2179	; 0x883
 80092fa:	4925      	ldr	r1, [pc, #148]	; (8009390 <tcp_pcb_remove+0xb8>)
 80092fc:	4825      	ldr	r0, [pc, #148]	; (8009394 <tcp_pcb_remove+0xbc>)
 80092fe:	f005 fef9 	bl	800f0f4 <iprintf>
 8009302:	e7ed      	b.n	80092e0 <tcp_pcb_remove+0x8>
  LWIP_ASSERT("tcp_pcb_remove: invalid pcblist", pcblist != NULL);
 8009304:	4b21      	ldr	r3, [pc, #132]	; (800938c <tcp_pcb_remove+0xb4>)
 8009306:	f640 0284 	movw	r2, #2180	; 0x884
 800930a:	4923      	ldr	r1, [pc, #140]	; (8009398 <tcp_pcb_remove+0xc0>)
 800930c:	4821      	ldr	r0, [pc, #132]	; (8009394 <tcp_pcb_remove+0xbc>)
 800930e:	f005 fef1 	bl	800f0f4 <iprintf>
 8009312:	e7e6      	b.n	80092e2 <tcp_pcb_remove+0xa>
  TCP_RMV(pcblist, pcb);
 8009314:	68e3      	ldr	r3, [r4, #12]
 8009316:	602b      	str	r3, [r5, #0]
 8009318:	e001      	b.n	800931e <tcp_pcb_remove+0x46>
 800931a:	68e2      	ldr	r2, [r4, #12]
 800931c:	60da      	str	r2, [r3, #12]
 800931e:	2300      	movs	r3, #0
 8009320:	60e3      	str	r3, [r4, #12]
  tcp_pcb_purge(pcb);
 8009322:	4620      	mov	r0, r4
 8009324:	f7ff ffa8 	bl	8009278 <tcp_pcb_purge>
  if ((pcb->state != TIME_WAIT) &&
 8009328:	7d23      	ldrb	r3, [r4, #20]
 800932a:	2b0a      	cmp	r3, #10
 800932c:	d005      	beq.n	800933a <tcp_pcb_remove+0x62>
 800932e:	2b01      	cmp	r3, #1
 8009330:	d01e      	beq.n	8009370 <tcp_pcb_remove+0x98>
      (pcb->flags & TF_ACK_DELAY)) {
 8009332:	8b63      	ldrh	r3, [r4, #26]
      (pcb->state != LISTEN) &&
 8009334:	f013 0f01 	tst.w	r3, #1
 8009338:	d11e      	bne.n	8009378 <tcp_pcb_remove+0xa0>
    LWIP_ASSERT("unsent segments leaking", pcb->unsent == NULL);
 800933a:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 800933c:	b133      	cbz	r3, 800934c <tcp_pcb_remove+0x74>
 800933e:	4b13      	ldr	r3, [pc, #76]	; (800938c <tcp_pcb_remove+0xb4>)
 8009340:	f640 0293 	movw	r2, #2195	; 0x893
 8009344:	4915      	ldr	r1, [pc, #84]	; (800939c <tcp_pcb_remove+0xc4>)
 8009346:	4813      	ldr	r0, [pc, #76]	; (8009394 <tcp_pcb_remove+0xbc>)
 8009348:	f005 fed4 	bl	800f0f4 <iprintf>
    LWIP_ASSERT("unacked segments leaking", pcb->unacked == NULL);
 800934c:	6f23      	ldr	r3, [r4, #112]	; 0x70
 800934e:	b133      	cbz	r3, 800935e <tcp_pcb_remove+0x86>
 8009350:	4b0e      	ldr	r3, [pc, #56]	; (800938c <tcp_pcb_remove+0xb4>)
 8009352:	f640 0294 	movw	r2, #2196	; 0x894
 8009356:	4912      	ldr	r1, [pc, #72]	; (80093a0 <tcp_pcb_remove+0xc8>)
 8009358:	480e      	ldr	r0, [pc, #56]	; (8009394 <tcp_pcb_remove+0xbc>)
 800935a:	f005 fecb 	bl	800f0f4 <iprintf>
    LWIP_ASSERT("ooseq segments leaking", pcb->ooseq == NULL);
 800935e:	6f63      	ldr	r3, [r4, #116]	; 0x74
 8009360:	b133      	cbz	r3, 8009370 <tcp_pcb_remove+0x98>
 8009362:	4b0a      	ldr	r3, [pc, #40]	; (800938c <tcp_pcb_remove+0xb4>)
 8009364:	f640 0296 	movw	r2, #2198	; 0x896
 8009368:	490e      	ldr	r1, [pc, #56]	; (80093a4 <tcp_pcb_remove+0xcc>)
 800936a:	480a      	ldr	r0, [pc, #40]	; (8009394 <tcp_pcb_remove+0xbc>)
 800936c:	f005 fec2 	bl	800f0f4 <iprintf>
  pcb->state = CLOSED;
 8009370:	2300      	movs	r3, #0
 8009372:	7523      	strb	r3, [r4, #20]
  pcb->local_port = 0;
 8009374:	82e3      	strh	r3, [r4, #22]
}
 8009376:	bd38      	pop	{r3, r4, r5, pc}
    tcp_ack_now(pcb);
 8009378:	f043 0302 	orr.w	r3, r3, #2
 800937c:	8363      	strh	r3, [r4, #26]
    tcp_output(pcb);
 800937e:	4620      	mov	r0, r4
 8009380:	f003 fa58 	bl	800c834 <tcp_output>
  if (pcb->state != LISTEN) {
 8009384:	7d23      	ldrb	r3, [r4, #20]
 8009386:	2b01      	cmp	r3, #1
 8009388:	d0f2      	beq.n	8009370 <tcp_pcb_remove+0x98>
 800938a:	e7d6      	b.n	800933a <tcp_pcb_remove+0x62>
 800938c:	08011344 	.word	0x08011344
 8009390:	080115e8 	.word	0x080115e8
 8009394:	080103a4 	.word	0x080103a4
 8009398:	08011604 	.word	0x08011604
 800939c:	08011624 	.word	0x08011624
 80093a0:	0801163c 	.word	0x0801163c
 80093a4:	08011658 	.word	0x08011658

080093a8 <tcp_abandon>:
{
 80093a8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80093ac:	b084      	sub	sp, #16
  LWIP_ERROR("tcp_abandon: invalid pcb", pcb != NULL, return);
 80093ae:	b1f8      	cbz	r0, 80093f0 <tcp_abandon+0x48>
 80093b0:	460d      	mov	r5, r1
 80093b2:	4604      	mov	r4, r0
  LWIP_ASSERT("don't call tcp_abort/tcp_abandon for listen-pcbs",
 80093b4:	7d03      	ldrb	r3, [r0, #20]
 80093b6:	2b01      	cmp	r3, #1
 80093b8:	d022      	beq.n	8009400 <tcp_abandon+0x58>
  if (pcb->state == TIME_WAIT) {
 80093ba:	7d23      	ldrb	r3, [r4, #20]
 80093bc:	2b0a      	cmp	r3, #10
 80093be:	d027      	beq.n	8009410 <tcp_abandon+0x68>
    seqno = pcb->snd_nxt;
 80093c0:	f8d4 8050 	ldr.w	r8, [r4, #80]	; 0x50
    ackno = pcb->rcv_nxt;
 80093c4:	f8d4 9024 	ldr.w	r9, [r4, #36]	; 0x24
    errf = pcb->errf;
 80093c8:	f8d4 6090 	ldr.w	r6, [r4, #144]	; 0x90
    errf_arg = pcb->callback_arg;
 80093cc:	6927      	ldr	r7, [r4, #16]
    if (pcb->state == CLOSED) {
 80093ce:	2b00      	cmp	r3, #0
 80093d0:	d147      	bne.n	8009462 <tcp_abandon+0xba>
      if (pcb->local_port != 0) {
 80093d2:	f8b4 a016 	ldrh.w	sl, [r4, #22]
 80093d6:	f1ba 0f00 	cmp.w	sl, #0
 80093da:	d04c      	beq.n	8009476 <tcp_abandon+0xce>
        TCP_RMV(&tcp_bound_pcbs, pcb);
 80093dc:	4b2d      	ldr	r3, [pc, #180]	; (8009494 <tcp_abandon+0xec>)
 80093de:	681b      	ldr	r3, [r3, #0]
 80093e0:	42a3      	cmp	r3, r4
 80093e2:	d01d      	beq.n	8009420 <tcp_abandon+0x78>
 80093e4:	b313      	cbz	r3, 800942c <tcp_abandon+0x84>
 80093e6:	68da      	ldr	r2, [r3, #12]
 80093e8:	42a2      	cmp	r2, r4
 80093ea:	d01d      	beq.n	8009428 <tcp_abandon+0x80>
 80093ec:	4613      	mov	r3, r2
 80093ee:	e7f9      	b.n	80093e4 <tcp_abandon+0x3c>
  LWIP_ERROR("tcp_abandon: invalid pcb", pcb != NULL, return);
 80093f0:	4b29      	ldr	r3, [pc, #164]	; (8009498 <tcp_abandon+0xf0>)
 80093f2:	f240 223d 	movw	r2, #573	; 0x23d
 80093f6:	4929      	ldr	r1, [pc, #164]	; (800949c <tcp_abandon+0xf4>)
 80093f8:	4829      	ldr	r0, [pc, #164]	; (80094a0 <tcp_abandon+0xf8>)
 80093fa:	f005 fe7b 	bl	800f0f4 <iprintf>
 80093fe:	e02d      	b.n	800945c <tcp_abandon+0xb4>
  LWIP_ASSERT("don't call tcp_abort/tcp_abandon for listen-pcbs",
 8009400:	4b25      	ldr	r3, [pc, #148]	; (8009498 <tcp_abandon+0xf0>)
 8009402:	f44f 7210 	mov.w	r2, #576	; 0x240
 8009406:	4927      	ldr	r1, [pc, #156]	; (80094a4 <tcp_abandon+0xfc>)
 8009408:	4825      	ldr	r0, [pc, #148]	; (80094a0 <tcp_abandon+0xf8>)
 800940a:	f005 fe73 	bl	800f0f4 <iprintf>
 800940e:	e7d4      	b.n	80093ba <tcp_abandon+0x12>
    tcp_pcb_remove(&tcp_tw_pcbs, pcb);
 8009410:	4621      	mov	r1, r4
 8009412:	4825      	ldr	r0, [pc, #148]	; (80094a8 <tcp_abandon+0x100>)
 8009414:	f7ff ff60 	bl	80092d8 <tcp_pcb_remove>
    tcp_free(pcb);
 8009418:	4620      	mov	r0, r4
 800941a:	f7ff fcd3 	bl	8008dc4 <tcp_free>
 800941e:	e01d      	b.n	800945c <tcp_abandon+0xb4>
        TCP_RMV(&tcp_bound_pcbs, pcb);
 8009420:	68e2      	ldr	r2, [r4, #12]
 8009422:	4b1c      	ldr	r3, [pc, #112]	; (8009494 <tcp_abandon+0xec>)
 8009424:	601a      	str	r2, [r3, #0]
 8009426:	e001      	b.n	800942c <tcp_abandon+0x84>
 8009428:	68e2      	ldr	r2, [r4, #12]
 800942a:	60da      	str	r2, [r3, #12]
 800942c:	2500      	movs	r5, #0
 800942e:	60e5      	str	r5, [r4, #12]
    u16_t local_port = 0;
 8009430:	46aa      	mov	sl, r5
    if (pcb->unacked != NULL) {
 8009432:	6f20      	ldr	r0, [r4, #112]	; 0x70
 8009434:	b108      	cbz	r0, 800943a <tcp_abandon+0x92>
      tcp_segs_free(pcb->unacked);
 8009436:	f7ff fe2e 	bl	8009096 <tcp_segs_free>
    if (pcb->unsent != NULL) {
 800943a:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
 800943c:	b108      	cbz	r0, 8009442 <tcp_abandon+0x9a>
      tcp_segs_free(pcb->unsent);
 800943e:	f7ff fe2a 	bl	8009096 <tcp_segs_free>
    if (pcb->ooseq != NULL) {
 8009442:	6f60      	ldr	r0, [r4, #116]	; 0x74
 8009444:	b108      	cbz	r0, 800944a <tcp_abandon+0xa2>
      tcp_segs_free(pcb->ooseq);
 8009446:	f7ff fe26 	bl	8009096 <tcp_segs_free>
    if (send_rst) {
 800944a:	b9b5      	cbnz	r5, 800947a <tcp_abandon+0xd2>
    tcp_free(pcb);
 800944c:	4620      	mov	r0, r4
 800944e:	f7ff fcb9 	bl	8008dc4 <tcp_free>
    TCP_EVENT_ERR(last_state, errf, errf_arg, ERR_ABRT);
 8009452:	b11e      	cbz	r6, 800945c <tcp_abandon+0xb4>
 8009454:	f06f 010c 	mvn.w	r1, #12
 8009458:	4638      	mov	r0, r7
 800945a:	47b0      	blx	r6
}
 800945c:	b004      	add	sp, #16
 800945e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      local_port = pcb->local_port;
 8009462:	f8b4 a016 	ldrh.w	sl, [r4, #22]
      TCP_PCB_REMOVE_ACTIVE(pcb);
 8009466:	4621      	mov	r1, r4
 8009468:	4810      	ldr	r0, [pc, #64]	; (80094ac <tcp_abandon+0x104>)
 800946a:	f7ff ff35 	bl	80092d8 <tcp_pcb_remove>
 800946e:	4b10      	ldr	r3, [pc, #64]	; (80094b0 <tcp_abandon+0x108>)
 8009470:	2201      	movs	r2, #1
 8009472:	701a      	strb	r2, [r3, #0]
 8009474:	e7dd      	b.n	8009432 <tcp_abandon+0x8a>
    int send_rst = 0;
 8009476:	2500      	movs	r5, #0
 8009478:	e7db      	b.n	8009432 <tcp_abandon+0x8a>
      tcp_rst(pcb, seqno, ackno, &pcb->local_ip, &pcb->remote_ip, local_port, pcb->remote_port);
 800947a:	8b23      	ldrh	r3, [r4, #24]
 800947c:	9302      	str	r3, [sp, #8]
 800947e:	f8cd a004 	str.w	sl, [sp, #4]
 8009482:	1d23      	adds	r3, r4, #4
 8009484:	9300      	str	r3, [sp, #0]
 8009486:	4623      	mov	r3, r4
 8009488:	464a      	mov	r2, r9
 800948a:	4641      	mov	r1, r8
 800948c:	4620      	mov	r0, r4
 800948e:	f003 f94f 	bl	800c730 <tcp_rst>
 8009492:	e7db      	b.n	800944c <tcp_abandon+0xa4>
 8009494:	2001090c 	.word	0x2001090c
 8009498:	08011344 	.word	0x08011344
 800949c:	08011670 	.word	0x08011670
 80094a0:	080103a4 	.word	0x080103a4
 80094a4:	0801168c 	.word	0x0801168c
 80094a8:	2001091c 	.word	0x2001091c
 80094ac:	20010904 	.word	0x20010904
 80094b0:	20010908 	.word	0x20010908

080094b4 <tcp_abort>:
{
 80094b4:	b508      	push	{r3, lr}
  tcp_abandon(pcb, 1);
 80094b6:	2101      	movs	r1, #1
 80094b8:	f7ff ff76 	bl	80093a8 <tcp_abandon>
}
 80094bc:	bd08      	pop	{r3, pc}
	...

080094c0 <tcp_accept_null>:
{
 80094c0:	b510      	push	{r4, lr}
  LWIP_ASSERT("tcp_accept_null: invalid pcb", pcb != NULL);
 80094c2:	460c      	mov	r4, r1
 80094c4:	b129      	cbz	r1, 80094d2 <tcp_accept_null+0x12>
  tcp_abort(pcb);
 80094c6:	4620      	mov	r0, r4
 80094c8:	f7ff fff4 	bl	80094b4 <tcp_abort>
}
 80094cc:	f06f 000c 	mvn.w	r0, #12
 80094d0:	bd10      	pop	{r4, pc}
  LWIP_ASSERT("tcp_accept_null: invalid pcb", pcb != NULL);
 80094d2:	4b04      	ldr	r3, [pc, #16]	; (80094e4 <tcp_accept_null+0x24>)
 80094d4:	f240 320f 	movw	r2, #783	; 0x30f
 80094d8:	4903      	ldr	r1, [pc, #12]	; (80094e8 <tcp_accept_null+0x28>)
 80094da:	4804      	ldr	r0, [pc, #16]	; (80094ec <tcp_accept_null+0x2c>)
 80094dc:	f005 fe0a 	bl	800f0f4 <iprintf>
 80094e0:	e7f1      	b.n	80094c6 <tcp_accept_null+0x6>
 80094e2:	bf00      	nop
 80094e4:	08011344 	.word	0x08011344
 80094e8:	080116c0 	.word	0x080116c0
 80094ec:	080103a4 	.word	0x080103a4

080094f0 <tcp_netif_ip_addr_changed_pcblist>:
{
 80094f0:	b570      	push	{r4, r5, r6, lr}
 80094f2:	460c      	mov	r4, r1
  LWIP_ASSERT("tcp_netif_ip_addr_changed_pcblist: invalid old_addr", old_addr != NULL);
 80094f4:	4605      	mov	r5, r0
 80094f6:	b108      	cbz	r0, 80094fc <tcp_netif_ip_addr_changed_pcblist+0xc>
  while (pcb != NULL) {
 80094f8:	b97c      	cbnz	r4, 800951a <tcp_netif_ip_addr_changed_pcblist+0x2a>
}
 80094fa:	bd70      	pop	{r4, r5, r6, pc}
  LWIP_ASSERT("tcp_netif_ip_addr_changed_pcblist: invalid old_addr", old_addr != NULL);
 80094fc:	4b0a      	ldr	r3, [pc, #40]	; (8009528 <tcp_netif_ip_addr_changed_pcblist+0x38>)
 80094fe:	f44f 6210 	mov.w	r2, #2304	; 0x900
 8009502:	490a      	ldr	r1, [pc, #40]	; (800952c <tcp_netif_ip_addr_changed_pcblist+0x3c>)
 8009504:	480a      	ldr	r0, [pc, #40]	; (8009530 <tcp_netif_ip_addr_changed_pcblist+0x40>)
 8009506:	f005 fdf5 	bl	800f0f4 <iprintf>
 800950a:	e7f5      	b.n	80094f8 <tcp_netif_ip_addr_changed_pcblist+0x8>
      struct tcp_pcb *next = pcb->next;
 800950c:	68e6      	ldr	r6, [r4, #12]
      tcp_abort(pcb);
 800950e:	4620      	mov	r0, r4
 8009510:	f7ff ffd0 	bl	80094b4 <tcp_abort>
      pcb = next;
 8009514:	4634      	mov	r4, r6
  while (pcb != NULL) {
 8009516:	2c00      	cmp	r4, #0
 8009518:	d0ef      	beq.n	80094fa <tcp_netif_ip_addr_changed_pcblist+0xa>
    if (ip_addr_cmp(&pcb->local_ip, old_addr)
 800951a:	6822      	ldr	r2, [r4, #0]
 800951c:	682b      	ldr	r3, [r5, #0]
 800951e:	429a      	cmp	r2, r3
 8009520:	d0f4      	beq.n	800950c <tcp_netif_ip_addr_changed_pcblist+0x1c>
      pcb = pcb->next;
 8009522:	68e4      	ldr	r4, [r4, #12]
 8009524:	e7f7      	b.n	8009516 <tcp_netif_ip_addr_changed_pcblist+0x26>
 8009526:	bf00      	nop
 8009528:	08011344 	.word	0x08011344
 800952c:	080116e0 	.word	0x080116e0
 8009530:	080103a4 	.word	0x080103a4

08009534 <tcp_netif_ip_addr_changed>:
  if (!ip_addr_isany(old_addr)) {
 8009534:	b308      	cbz	r0, 800957a <tcp_netif_ip_addr_changed+0x46>
{
 8009536:	b538      	push	{r3, r4, r5, lr}
 8009538:	460d      	mov	r5, r1
 800953a:	4604      	mov	r4, r0
  if (!ip_addr_isany(old_addr)) {
 800953c:	6803      	ldr	r3, [r0, #0]
 800953e:	b903      	cbnz	r3, 8009542 <tcp_netif_ip_addr_changed+0xe>
}
 8009540:	bd38      	pop	{r3, r4, r5, pc}
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_active_pcbs);
 8009542:	4b0e      	ldr	r3, [pc, #56]	; (800957c <tcp_netif_ip_addr_changed+0x48>)
 8009544:	6819      	ldr	r1, [r3, #0]
 8009546:	f7ff ffd3 	bl	80094f0 <tcp_netif_ip_addr_changed_pcblist>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_bound_pcbs);
 800954a:	4b0d      	ldr	r3, [pc, #52]	; (8009580 <tcp_netif_ip_addr_changed+0x4c>)
 800954c:	6819      	ldr	r1, [r3, #0]
 800954e:	4620      	mov	r0, r4
 8009550:	f7ff ffce 	bl	80094f0 <tcp_netif_ip_addr_changed_pcblist>
    if (!ip_addr_isany(new_addr)) {
 8009554:	2d00      	cmp	r5, #0
 8009556:	d0f3      	beq.n	8009540 <tcp_netif_ip_addr_changed+0xc>
 8009558:	682b      	ldr	r3, [r5, #0]
 800955a:	2b00      	cmp	r3, #0
 800955c:	d0f0      	beq.n	8009540 <tcp_netif_ip_addr_changed+0xc>
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800955e:	4b09      	ldr	r3, [pc, #36]	; (8009584 <tcp_netif_ip_addr_changed+0x50>)
 8009560:	681b      	ldr	r3, [r3, #0]
 8009562:	2b00      	cmp	r3, #0
 8009564:	d0ec      	beq.n	8009540 <tcp_netif_ip_addr_changed+0xc>
        if (ip_addr_cmp(&lpcb->local_ip, old_addr)) {
 8009566:	6819      	ldr	r1, [r3, #0]
 8009568:	6822      	ldr	r2, [r4, #0]
 800956a:	4291      	cmp	r1, r2
          ip_addr_copy(lpcb->local_ip, *new_addr);
 800956c:	bf04      	itt	eq
 800956e:	682a      	ldreq	r2, [r5, #0]
 8009570:	601a      	streq	r2, [r3, #0]
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 8009572:	68db      	ldr	r3, [r3, #12]
 8009574:	2b00      	cmp	r3, #0
 8009576:	d1f6      	bne.n	8009566 <tcp_netif_ip_addr_changed+0x32>
 8009578:	e7e2      	b.n	8009540 <tcp_netif_ip_addr_changed+0xc>
 800957a:	4770      	bx	lr
 800957c:	20010904 	.word	0x20010904
 8009580:	2001090c 	.word	0x2001090c
 8009584:	20010910 	.word	0x20010910

08009588 <tcp_kill_state>:
{
 8009588:	b538      	push	{r3, r4, r5, lr}
 800958a:	4604      	mov	r4, r0
  LWIP_ASSERT("invalid state", (state == CLOSING) || (state == LAST_ACK));
 800958c:	f1a0 0308 	sub.w	r3, r0, #8
 8009590:	b2db      	uxtb	r3, r3
 8009592:	2b01      	cmp	r3, #1
 8009594:	d807      	bhi.n	80095a6 <tcp_kill_state+0x1e>
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8009596:	4b10      	ldr	r3, [pc, #64]	; (80095d8 <tcp_kill_state+0x50>)
 8009598:	681b      	ldr	r3, [r3, #0]
 800959a:	b1e3      	cbz	r3, 80095d6 <tcp_kill_state+0x4e>
      if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 800959c:	4a0f      	ldr	r2, [pc, #60]	; (80095dc <tcp_kill_state+0x54>)
 800959e:	6815      	ldr	r5, [r2, #0]
  inactivity = 0;
 80095a0:	2100      	movs	r1, #0
  inactive = NULL;
 80095a2:	4608      	mov	r0, r1
 80095a4:	e009      	b.n	80095ba <tcp_kill_state+0x32>
  LWIP_ASSERT("invalid state", (state == CLOSING) || (state == LAST_ACK));
 80095a6:	4b0e      	ldr	r3, [pc, #56]	; (80095e0 <tcp_kill_state+0x58>)
 80095a8:	f240 62dd 	movw	r2, #1757	; 0x6dd
 80095ac:	490d      	ldr	r1, [pc, #52]	; (80095e4 <tcp_kill_state+0x5c>)
 80095ae:	480e      	ldr	r0, [pc, #56]	; (80095e8 <tcp_kill_state+0x60>)
 80095b0:	f005 fda0 	bl	800f0f4 <iprintf>
 80095b4:	e7ef      	b.n	8009596 <tcp_kill_state+0xe>
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 80095b6:	68db      	ldr	r3, [r3, #12]
 80095b8:	b14b      	cbz	r3, 80095ce <tcp_kill_state+0x46>
    if (pcb->state == state) {
 80095ba:	7d1a      	ldrb	r2, [r3, #20]
 80095bc:	42a2      	cmp	r2, r4
 80095be:	d1fa      	bne.n	80095b6 <tcp_kill_state+0x2e>
      if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 80095c0:	6a1a      	ldr	r2, [r3, #32]
 80095c2:	1aaa      	subs	r2, r5, r2
 80095c4:	428a      	cmp	r2, r1
        inactivity = tcp_ticks - pcb->tmr;
 80095c6:	bf24      	itt	cs
 80095c8:	4611      	movcs	r1, r2
      if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 80095ca:	4618      	movcs	r0, r3
 80095cc:	e7f3      	b.n	80095b6 <tcp_kill_state+0x2e>
  if (inactive != NULL) {
 80095ce:	b110      	cbz	r0, 80095d6 <tcp_kill_state+0x4e>
    tcp_abandon(inactive, 0);
 80095d0:	2100      	movs	r1, #0
 80095d2:	f7ff fee9 	bl	80093a8 <tcp_abandon>
}
 80095d6:	bd38      	pop	{r3, r4, r5, pc}
 80095d8:	20010904 	.word	0x20010904
 80095dc:	20010914 	.word	0x20010914
 80095e0:	08011344 	.word	0x08011344
 80095e4:	08011714 	.word	0x08011714
 80095e8:	080103a4 	.word	0x080103a4

080095ec <tcp_alloc>:
{
 80095ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80095ee:	4606      	mov	r6, r0
  pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 80095f0:	2001      	movs	r0, #1
 80095f2:	f7fe fd97 	bl	8008124 <memp_malloc>
  if (pcb == NULL) {
 80095f6:	4604      	mov	r4, r0
 80095f8:	b360      	cbz	r0, 8009654 <tcp_alloc+0x68>
    memset(pcb, 0, sizeof(struct tcp_pcb));
 80095fa:	229c      	movs	r2, #156	; 0x9c
 80095fc:	2100      	movs	r1, #0
 80095fe:	4620      	mov	r0, r4
 8009600:	f005 fcdb 	bl	800efba <memset>
    pcb->prio = prio;
 8009604:	7566      	strb	r6, [r4, #21]
    pcb->snd_buf = TCP_SND_BUF;
 8009606:	f44f 6386 	mov.w	r3, #1072	; 0x430
 800960a:	f8a4 3064 	strh.w	r3, [r4, #100]	; 0x64
    pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
 800960e:	f44f 6206 	mov.w	r2, #2144	; 0x860
 8009612:	8562      	strh	r2, [r4, #42]	; 0x2a
 8009614:	8522      	strh	r2, [r4, #40]	; 0x28
    pcb->ttl = TCP_TTL;
 8009616:	22ff      	movs	r2, #255	; 0xff
 8009618:	72e2      	strb	r2, [r4, #11]
    pcb->mss = INITIAL_MSS;
 800961a:	f44f 7206 	mov.w	r2, #536	; 0x218
 800961e:	8662      	strh	r2, [r4, #50]	; 0x32
    pcb->rto = 3000 / TCP_SLOW_INTERVAL;
 8009620:	2206      	movs	r2, #6
 8009622:	f8a4 2040 	strh.w	r2, [r4, #64]	; 0x40
    pcb->sv = 3000 / TCP_SLOW_INTERVAL;
 8009626:	87e2      	strh	r2, [r4, #62]	; 0x3e
    pcb->rtime = -1;
 8009628:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800962c:	8622      	strh	r2, [r4, #48]	; 0x30
    pcb->cwnd = 1;
 800962e:	2201      	movs	r2, #1
 8009630:	f8a4 2048 	strh.w	r2, [r4, #72]	; 0x48
    pcb->tmr = tcp_ticks;
 8009634:	4a3b      	ldr	r2, [pc, #236]	; (8009724 <tcp_alloc+0x138>)
 8009636:	6812      	ldr	r2, [r2, #0]
 8009638:	6222      	str	r2, [r4, #32]
    pcb->last_timer = tcp_timer_ctr;
 800963a:	4a3b      	ldr	r2, [pc, #236]	; (8009728 <tcp_alloc+0x13c>)
 800963c:	7812      	ldrb	r2, [r2, #0]
 800963e:	77a2      	strb	r2, [r4, #30]
    pcb->ssthresh = TCP_SND_BUF;
 8009640:	f8a4 304a 	strh.w	r3, [r4, #74]	; 0x4a
    pcb->recv = tcp_recv_null;
 8009644:	4b39      	ldr	r3, [pc, #228]	; (800972c <tcp_alloc+0x140>)
 8009646:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
    pcb->keep_idle  = TCP_KEEPIDLE_DEFAULT;
 800964a:	4b39      	ldr	r3, [pc, #228]	; (8009730 <tcp_alloc+0x144>)
 800964c:	f8c4 3094 	str.w	r3, [r4, #148]	; 0x94
}
 8009650:	4620      	mov	r0, r4
 8009652:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  struct tcp_pcb *pcb = tcp_active_pcbs;
 8009654:	4b37      	ldr	r3, [pc, #220]	; (8009734 <tcp_alloc+0x148>)
 8009656:	681d      	ldr	r5, [r3, #0]
  while (pcb != NULL) {
 8009658:	2d00      	cmp	r5, #0
 800965a:	d132      	bne.n	80096c2 <tcp_alloc+0xd6>
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800965c:	4b36      	ldr	r3, [pc, #216]	; (8009738 <tcp_alloc+0x14c>)
 800965e:	681b      	ldr	r3, [r3, #0]
 8009660:	b17b      	cbz	r3, 8009682 <tcp_alloc+0x96>
    if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 8009662:	4a30      	ldr	r2, [pc, #192]	; (8009724 <tcp_alloc+0x138>)
 8009664:	6810      	ldr	r0, [r2, #0]
  inactivity = 0;
 8009666:	2100      	movs	r1, #0
    if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 8009668:	6a1a      	ldr	r2, [r3, #32]
 800966a:	1a82      	subs	r2, r0, r2
 800966c:	428a      	cmp	r2, r1
      inactivity = tcp_ticks - pcb->tmr;
 800966e:	bf24      	itt	cs
 8009670:	4611      	movcs	r1, r2
    if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 8009672:	461c      	movcs	r4, r3
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8009674:	68db      	ldr	r3, [r3, #12]
 8009676:	2b00      	cmp	r3, #0
 8009678:	d1f6      	bne.n	8009668 <tcp_alloc+0x7c>
  if (inactive != NULL) {
 800967a:	b114      	cbz	r4, 8009682 <tcp_alloc+0x96>
    tcp_abort(inactive);
 800967c:	4620      	mov	r0, r4
 800967e:	f7ff ff19 	bl	80094b4 <tcp_abort>
    pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8009682:	2001      	movs	r0, #1
 8009684:	f7fe fd4e 	bl	8008124 <memp_malloc>
    if (pcb == NULL) {
 8009688:	4604      	mov	r4, r0
 800968a:	2800      	cmp	r0, #0
 800968c:	d1b5      	bne.n	80095fa <tcp_alloc+0xe>
      tcp_kill_state(LAST_ACK);
 800968e:	2009      	movs	r0, #9
 8009690:	f7ff ff7a 	bl	8009588 <tcp_kill_state>
      pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8009694:	2001      	movs	r0, #1
 8009696:	f7fe fd45 	bl	8008124 <memp_malloc>
      if (pcb == NULL) {
 800969a:	4604      	mov	r4, r0
 800969c:	2800      	cmp	r0, #0
 800969e:	d1ac      	bne.n	80095fa <tcp_alloc+0xe>
        tcp_kill_state(CLOSING);
 80096a0:	2008      	movs	r0, #8
 80096a2:	f7ff ff71 	bl	8009588 <tcp_kill_state>
        pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 80096a6:	2001      	movs	r0, #1
 80096a8:	f7fe fd3c 	bl	8008124 <memp_malloc>
        if (pcb == NULL) {
 80096ac:	4604      	mov	r4, r0
 80096ae:	2800      	cmp	r0, #0
 80096b0:	d1a3      	bne.n	80095fa <tcp_alloc+0xe>
  mprio = LWIP_MIN(TCP_PRIO_MAX, prio);
 80096b2:	f016 0f80 	tst.w	r6, #128	; 0x80
 80096b6:	d110      	bne.n	80096da <tcp_alloc+0xee>
  if (mprio == 0) {
 80096b8:	b36e      	cbz	r6, 8009716 <tcp_alloc+0x12a>
  mprio = LWIP_MIN(TCP_PRIO_MAX, prio);
 80096ba:	4633      	mov	r3, r6
 80096bc:	e00e      	b.n	80096dc <tcp_alloc+0xf0>
  while (pcb != NULL) {
 80096be:	2d00      	cmp	r5, #0
 80096c0:	d0cc      	beq.n	800965c <tcp_alloc+0x70>
    struct tcp_pcb *next = pcb->next;
 80096c2:	4628      	mov	r0, r5
 80096c4:	68ed      	ldr	r5, [r5, #12]
    if (pcb->flags & TF_CLOSEPEND) {
 80096c6:	8b43      	ldrh	r3, [r0, #26]
 80096c8:	f013 0f08 	tst.w	r3, #8
 80096cc:	d0f7      	beq.n	80096be <tcp_alloc+0xd2>
      tcp_clear_flags(pcb, TF_CLOSEPEND);
 80096ce:	f023 0308 	bic.w	r3, r3, #8
 80096d2:	8343      	strh	r3, [r0, #26]
      tcp_close_shutdown_fin(pcb);
 80096d4:	f7ff fb2e 	bl	8008d34 <tcp_close_shutdown_fin>
 80096d8:	e7f1      	b.n	80096be <tcp_alloc+0xd2>
  mprio = LWIP_MIN(TCP_PRIO_MAX, prio);
 80096da:	237f      	movs	r3, #127	; 0x7f
  mprio--;
 80096dc:	3b01      	subs	r3, #1
 80096de:	b2da      	uxtb	r2, r3
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 80096e0:	4b14      	ldr	r3, [pc, #80]	; (8009734 <tcp_alloc+0x148>)
 80096e2:	681b      	ldr	r3, [r3, #0]
 80096e4:	b1bb      	cbz	r3, 8009716 <tcp_alloc+0x12a>
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 80096e6:	490f      	ldr	r1, [pc, #60]	; (8009724 <tcp_alloc+0x138>)
 80096e8:	680d      	ldr	r5, [r1, #0]
  inactivity = 0;
 80096ea:	2000      	movs	r0, #0
 80096ec:	e005      	b.n	80096fa <tcp_alloc+0x10e>
      inactivity = tcp_ticks - pcb->tmr;
 80096ee:	6a1a      	ldr	r2, [r3, #32]
 80096f0:	1aa8      	subs	r0, r5, r2
      mprio      = pcb->prio;
 80096f2:	460a      	mov	r2, r1
      inactivity = tcp_ticks - pcb->tmr;
 80096f4:	461c      	mov	r4, r3
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 80096f6:	68db      	ldr	r3, [r3, #12]
 80096f8:	b14b      	cbz	r3, 800970e <tcp_alloc+0x122>
    if ((pcb->prio < mprio) ||
 80096fa:	7d59      	ldrb	r1, [r3, #21]
 80096fc:	4291      	cmp	r1, r2
 80096fe:	d3f6      	bcc.n	80096ee <tcp_alloc+0x102>
 8009700:	d1f9      	bne.n	80096f6 <tcp_alloc+0x10a>
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 8009702:	6a1f      	ldr	r7, [r3, #32]
 8009704:	eba5 0c07 	sub.w	ip, r5, r7
 8009708:	4584      	cmp	ip, r0
 800970a:	d3f4      	bcc.n	80096f6 <tcp_alloc+0x10a>
 800970c:	e7ef      	b.n	80096ee <tcp_alloc+0x102>
  if (inactive != NULL) {
 800970e:	b114      	cbz	r4, 8009716 <tcp_alloc+0x12a>
    tcp_abort(inactive);
 8009710:	4620      	mov	r0, r4
 8009712:	f7ff fecf 	bl	80094b4 <tcp_abort>
          pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8009716:	2001      	movs	r0, #1
 8009718:	f7fe fd04 	bl	8008124 <memp_malloc>
  if (pcb != NULL) {
 800971c:	4604      	mov	r4, r0
 800971e:	2800      	cmp	r0, #0
 8009720:	d096      	beq.n	8009650 <tcp_alloc+0x64>
 8009722:	e76a      	b.n	80095fa <tcp_alloc+0xe>
 8009724:	20010914 	.word	0x20010914
 8009728:	20010919 	.word	0x20010919
 800972c:	08009911 	.word	0x08009911
 8009730:	006ddd00 	.word	0x006ddd00
 8009734:	20010904 	.word	0x20010904
 8009738:	2001091c 	.word	0x2001091c

0800973c <tcp_new_ip_type>:
{
 800973c:	b508      	push	{r3, lr}
  pcb = tcp_alloc(TCP_PRIO_NORMAL);
 800973e:	2040      	movs	r0, #64	; 0x40
 8009740:	f7ff ff54 	bl	80095ec <tcp_alloc>
}
 8009744:	bd08      	pop	{r3, pc}
	...

08009748 <tcp_close_shutdown>:
{
 8009748:	b530      	push	{r4, r5, lr}
 800974a:	b085      	sub	sp, #20
 800974c:	460d      	mov	r5, r1
  LWIP_ASSERT("tcp_close_shutdown: invalid pcb", pcb != NULL);
 800974e:	4604      	mov	r4, r0
 8009750:	b188      	cbz	r0, 8009776 <tcp_close_shutdown+0x2e>
  if (rst_on_unacked_data && ((pcb->state == ESTABLISHED) || (pcb->state == CLOSE_WAIT))) {
 8009752:	b125      	cbz	r5, 800975e <tcp_close_shutdown+0x16>
 8009754:	7d23      	ldrb	r3, [r4, #20]
 8009756:	2b04      	cmp	r3, #4
 8009758:	d015      	beq.n	8009786 <tcp_close_shutdown+0x3e>
 800975a:	2b07      	cmp	r3, #7
 800975c:	d013      	beq.n	8009786 <tcp_close_shutdown+0x3e>
  switch (pcb->state) {
 800975e:	7d23      	ldrb	r3, [r4, #20]
 8009760:	2b01      	cmp	r3, #1
 8009762:	d06d      	beq.n	8009840 <tcp_close_shutdown+0xf8>
 8009764:	2b02      	cmp	r3, #2
 8009766:	f000 8091 	beq.w	800988c <tcp_close_shutdown+0x144>
 800976a:	2b00      	cmp	r3, #0
 800976c:	d04f      	beq.n	800980e <tcp_close_shutdown+0xc6>
      return tcp_close_shutdown_fin(pcb);
 800976e:	4620      	mov	r0, r4
 8009770:	f7ff fae0 	bl	8008d34 <tcp_close_shutdown_fin>
 8009774:	e081      	b.n	800987a <tcp_close_shutdown+0x132>
  LWIP_ASSERT("tcp_close_shutdown: invalid pcb", pcb != NULL);
 8009776:	4b4b      	ldr	r3, [pc, #300]	; (80098a4 <tcp_close_shutdown+0x15c>)
 8009778:	f44f 72af 	mov.w	r2, #350	; 0x15e
 800977c:	494a      	ldr	r1, [pc, #296]	; (80098a8 <tcp_close_shutdown+0x160>)
 800977e:	484b      	ldr	r0, [pc, #300]	; (80098ac <tcp_close_shutdown+0x164>)
 8009780:	f005 fcb8 	bl	800f0f4 <iprintf>
 8009784:	e7e5      	b.n	8009752 <tcp_close_shutdown+0xa>
    if ((pcb->refused_data != NULL) || (pcb->rcv_wnd != TCP_WND_MAX(pcb))) {
 8009786:	6fa3      	ldr	r3, [r4, #120]	; 0x78
 8009788:	b1e3      	cbz	r3, 80097c4 <tcp_close_shutdown+0x7c>
      LWIP_ASSERT("pcb->flags & TF_RXCLOSED", pcb->flags & TF_RXCLOSED);
 800978a:	8b63      	ldrh	r3, [r4, #26]
 800978c:	f013 0f10 	tst.w	r3, #16
 8009790:	d01d      	beq.n	80097ce <tcp_close_shutdown+0x86>
      tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 8009792:	8b23      	ldrh	r3, [r4, #24]
 8009794:	9302      	str	r3, [sp, #8]
 8009796:	8ae3      	ldrh	r3, [r4, #22]
 8009798:	9301      	str	r3, [sp, #4]
 800979a:	1d23      	adds	r3, r4, #4
 800979c:	9300      	str	r3, [sp, #0]
 800979e:	4623      	mov	r3, r4
 80097a0:	6a62      	ldr	r2, [r4, #36]	; 0x24
 80097a2:	6d21      	ldr	r1, [r4, #80]	; 0x50
 80097a4:	4620      	mov	r0, r4
 80097a6:	f002 ffc3 	bl	800c730 <tcp_rst>
      tcp_pcb_purge(pcb);
 80097aa:	4620      	mov	r0, r4
 80097ac:	f7ff fd64 	bl	8009278 <tcp_pcb_purge>
      TCP_RMV_ACTIVE(pcb);
 80097b0:	4b3f      	ldr	r3, [pc, #252]	; (80098b0 <tcp_close_shutdown+0x168>)
 80097b2:	681b      	ldr	r3, [r3, #0]
 80097b4:	42a3      	cmp	r3, r4
 80097b6:	d012      	beq.n	80097de <tcp_close_shutdown+0x96>
 80097b8:	b1bb      	cbz	r3, 80097ea <tcp_close_shutdown+0xa2>
 80097ba:	68da      	ldr	r2, [r3, #12]
 80097bc:	42a2      	cmp	r2, r4
 80097be:	d012      	beq.n	80097e6 <tcp_close_shutdown+0x9e>
 80097c0:	4613      	mov	r3, r2
 80097c2:	e7f9      	b.n	80097b8 <tcp_close_shutdown+0x70>
    if ((pcb->refused_data != NULL) || (pcb->rcv_wnd != TCP_WND_MAX(pcb))) {
 80097c4:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 80097c6:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 80097ca:	d0c8      	beq.n	800975e <tcp_close_shutdown+0x16>
 80097cc:	e7dd      	b.n	800978a <tcp_close_shutdown+0x42>
      LWIP_ASSERT("pcb->flags & TF_RXCLOSED", pcb->flags & TF_RXCLOSED);
 80097ce:	4b35      	ldr	r3, [pc, #212]	; (80098a4 <tcp_close_shutdown+0x15c>)
 80097d0:	f44f 72b2 	mov.w	r2, #356	; 0x164
 80097d4:	4937      	ldr	r1, [pc, #220]	; (80098b4 <tcp_close_shutdown+0x16c>)
 80097d6:	4835      	ldr	r0, [pc, #212]	; (80098ac <tcp_close_shutdown+0x164>)
 80097d8:	f005 fc8c 	bl	800f0f4 <iprintf>
 80097dc:	e7d9      	b.n	8009792 <tcp_close_shutdown+0x4a>
      TCP_RMV_ACTIVE(pcb);
 80097de:	68e2      	ldr	r2, [r4, #12]
 80097e0:	4b33      	ldr	r3, [pc, #204]	; (80098b0 <tcp_close_shutdown+0x168>)
 80097e2:	601a      	str	r2, [r3, #0]
 80097e4:	e001      	b.n	80097ea <tcp_close_shutdown+0xa2>
 80097e6:	68e2      	ldr	r2, [r4, #12]
 80097e8:	60da      	str	r2, [r3, #12]
 80097ea:	2300      	movs	r3, #0
 80097ec:	60e3      	str	r3, [r4, #12]
 80097ee:	4b32      	ldr	r3, [pc, #200]	; (80098b8 <tcp_close_shutdown+0x170>)
 80097f0:	2201      	movs	r2, #1
 80097f2:	701a      	strb	r2, [r3, #0]
      if (tcp_input_pcb == pcb) {
 80097f4:	4b31      	ldr	r3, [pc, #196]	; (80098bc <tcp_close_shutdown+0x174>)
 80097f6:	681b      	ldr	r3, [r3, #0]
 80097f8:	42a3      	cmp	r3, r4
 80097fa:	d004      	beq.n	8009806 <tcp_close_shutdown+0xbe>
        tcp_free(pcb);
 80097fc:	4620      	mov	r0, r4
 80097fe:	f7ff fae1 	bl	8008dc4 <tcp_free>
      return ERR_OK;
 8009802:	2000      	movs	r0, #0
 8009804:	e039      	b.n	800987a <tcp_close_shutdown+0x132>
        tcp_trigger_input_pcb_close();
 8009806:	f002 f80f 	bl	800b828 <tcp_trigger_input_pcb_close>
      return ERR_OK;
 800980a:	2000      	movs	r0, #0
 800980c:	e035      	b.n	800987a <tcp_close_shutdown+0x132>
      if (pcb->local_port != 0) {
 800980e:	8ae3      	ldrh	r3, [r4, #22]
 8009810:	b18b      	cbz	r3, 8009836 <tcp_close_shutdown+0xee>
        TCP_RMV(&tcp_bound_pcbs, pcb);
 8009812:	4b2b      	ldr	r3, [pc, #172]	; (80098c0 <tcp_close_shutdown+0x178>)
 8009814:	681b      	ldr	r3, [r3, #0]
 8009816:	42a3      	cmp	r3, r4
 8009818:	d005      	beq.n	8009826 <tcp_close_shutdown+0xde>
 800981a:	b153      	cbz	r3, 8009832 <tcp_close_shutdown+0xea>
 800981c:	68da      	ldr	r2, [r3, #12]
 800981e:	42a2      	cmp	r2, r4
 8009820:	d005      	beq.n	800982e <tcp_close_shutdown+0xe6>
 8009822:	4613      	mov	r3, r2
 8009824:	e7f9      	b.n	800981a <tcp_close_shutdown+0xd2>
 8009826:	68e2      	ldr	r2, [r4, #12]
 8009828:	4b25      	ldr	r3, [pc, #148]	; (80098c0 <tcp_close_shutdown+0x178>)
 800982a:	601a      	str	r2, [r3, #0]
 800982c:	e001      	b.n	8009832 <tcp_close_shutdown+0xea>
 800982e:	68e2      	ldr	r2, [r4, #12]
 8009830:	60da      	str	r2, [r3, #12]
 8009832:	2300      	movs	r3, #0
 8009834:	60e3      	str	r3, [r4, #12]
      tcp_free(pcb);
 8009836:	4620      	mov	r0, r4
 8009838:	f7ff fac4 	bl	8008dc4 <tcp_free>
  return ERR_OK;
 800983c:	2000      	movs	r0, #0
      break;
 800983e:	e01c      	b.n	800987a <tcp_close_shutdown+0x132>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 8009840:	4d20      	ldr	r5, [pc, #128]	; (80098c4 <tcp_close_shutdown+0x17c>)
 8009842:	1d29      	adds	r1, r5, #4
 8009844:	3510      	adds	r5, #16
      pcb->listener = NULL;
 8009846:	2000      	movs	r0, #0
    tcp_remove_listener(*tcp_pcb_lists[i], (struct tcp_pcb_listen *)pcb);
 8009848:	f851 3b04 	ldr.w	r3, [r1], #4
 800984c:	681b      	ldr	r3, [r3, #0]
  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 800984e:	b133      	cbz	r3, 800985e <tcp_close_shutdown+0x116>
    if (pcb->listener == lpcb) {
 8009850:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 8009852:	4294      	cmp	r4, r2
      pcb->listener = NULL;
 8009854:	bf08      	it	eq
 8009856:	67d8      	streq	r0, [r3, #124]	; 0x7c
  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 8009858:	68db      	ldr	r3, [r3, #12]
 800985a:	2b00      	cmp	r3, #0
 800985c:	d1f8      	bne.n	8009850 <tcp_close_shutdown+0x108>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 800985e:	428d      	cmp	r5, r1
 8009860:	d1f2      	bne.n	8009848 <tcp_close_shutdown+0x100>
      tcp_pcb_remove(&tcp_listen_pcbs.pcbs, pcb);
 8009862:	4621      	mov	r1, r4
 8009864:	4818      	ldr	r0, [pc, #96]	; (80098c8 <tcp_close_shutdown+0x180>)
 8009866:	f7ff fd37 	bl	80092d8 <tcp_pcb_remove>
  LWIP_ASSERT("tcp_free_listen: !LISTEN", pcb->state != LISTEN);
 800986a:	7d23      	ldrb	r3, [r4, #20]
 800986c:	2b01      	cmp	r3, #1
 800986e:	d006      	beq.n	800987e <tcp_close_shutdown+0x136>
  memp_free(MEMP_TCP_PCB_LISTEN, pcb);
 8009870:	4621      	mov	r1, r4
 8009872:	2002      	movs	r0, #2
 8009874:	f7fe fc86 	bl	8008184 <memp_free>
  return ERR_OK;
 8009878:	2000      	movs	r0, #0
}
 800987a:	b005      	add	sp, #20
 800987c:	bd30      	pop	{r4, r5, pc}
  LWIP_ASSERT("tcp_free_listen: !LISTEN", pcb->state != LISTEN);
 800987e:	4b09      	ldr	r3, [pc, #36]	; (80098a4 <tcp_close_shutdown+0x15c>)
 8009880:	22df      	movs	r2, #223	; 0xdf
 8009882:	4912      	ldr	r1, [pc, #72]	; (80098cc <tcp_close_shutdown+0x184>)
 8009884:	4809      	ldr	r0, [pc, #36]	; (80098ac <tcp_close_shutdown+0x164>)
 8009886:	f005 fc35 	bl	800f0f4 <iprintf>
 800988a:	e7f1      	b.n	8009870 <tcp_close_shutdown+0x128>
      TCP_PCB_REMOVE_ACTIVE(pcb);
 800988c:	4621      	mov	r1, r4
 800988e:	4808      	ldr	r0, [pc, #32]	; (80098b0 <tcp_close_shutdown+0x168>)
 8009890:	f7ff fd22 	bl	80092d8 <tcp_pcb_remove>
 8009894:	4b08      	ldr	r3, [pc, #32]	; (80098b8 <tcp_close_shutdown+0x170>)
 8009896:	2201      	movs	r2, #1
 8009898:	701a      	strb	r2, [r3, #0]
      tcp_free(pcb);
 800989a:	4620      	mov	r0, r4
 800989c:	f7ff fa92 	bl	8008dc4 <tcp_free>
  return ERR_OK;
 80098a0:	2000      	movs	r0, #0
      break;
 80098a2:	e7ea      	b.n	800987a <tcp_close_shutdown+0x132>
 80098a4:	08011344 	.word	0x08011344
 80098a8:	08011724 	.word	0x08011724
 80098ac:	080103a4 	.word	0x080103a4
 80098b0:	20010904 	.word	0x20010904
 80098b4:	08011744 	.word	0x08011744
 80098b8:	20010908 	.word	0x20010908
 80098bc:	20010948 	.word	0x20010948
 80098c0:	2001090c 	.word	0x2001090c
 80098c4:	080119d0 	.word	0x080119d0
 80098c8:	20010910 	.word	0x20010910
 80098cc:	08011760 	.word	0x08011760

080098d0 <tcp_close>:
{
 80098d0:	b508      	push	{r3, lr}
  LWIP_ERROR("tcp_close: invalid pcb", pcb != NULL, return ERR_ARG);
 80098d2:	b160      	cbz	r0, 80098ee <tcp_close+0x1e>
 80098d4:	4603      	mov	r3, r0
  if (pcb->state != LISTEN) {
 80098d6:	7d02      	ldrb	r2, [r0, #20]
 80098d8:	2a01      	cmp	r2, #1
 80098da:	d003      	beq.n	80098e4 <tcp_close+0x14>
    tcp_set_flags(pcb, TF_RXCLOSED);
 80098dc:	8b42      	ldrh	r2, [r0, #26]
 80098de:	f042 0210 	orr.w	r2, r2, #16
 80098e2:	8342      	strh	r2, [r0, #26]
  return tcp_close_shutdown(pcb, 1);
 80098e4:	2101      	movs	r1, #1
 80098e6:	4618      	mov	r0, r3
 80098e8:	f7ff ff2e 	bl	8009748 <tcp_close_shutdown>
}
 80098ec:	bd08      	pop	{r3, pc}
  LWIP_ERROR("tcp_close: invalid pcb", pcb != NULL, return ERR_ARG);
 80098ee:	4b05      	ldr	r3, [pc, #20]	; (8009904 <tcp_close+0x34>)
 80098f0:	f44f 72f4 	mov.w	r2, #488	; 0x1e8
 80098f4:	4904      	ldr	r1, [pc, #16]	; (8009908 <tcp_close+0x38>)
 80098f6:	4805      	ldr	r0, [pc, #20]	; (800990c <tcp_close+0x3c>)
 80098f8:	f005 fbfc 	bl	800f0f4 <iprintf>
 80098fc:	f06f 000f 	mvn.w	r0, #15
 8009900:	e7f4      	b.n	80098ec <tcp_close+0x1c>
 8009902:	bf00      	nop
 8009904:	08011344 	.word	0x08011344
 8009908:	0801177c 	.word	0x0801177c
 800990c:	080103a4 	.word	0x080103a4

08009910 <tcp_recv_null>:
{
 8009910:	b510      	push	{r4, lr}
  LWIP_ERROR("tcp_recv_null: invalid pcb", pcb != NULL, return ERR_ARG);
 8009912:	b151      	cbz	r1, 800992a <tcp_recv_null+0x1a>
 8009914:	4614      	mov	r4, r2
 8009916:	4608      	mov	r0, r1
  if (p != NULL) {
 8009918:	b18a      	cbz	r2, 800993e <tcp_recv_null+0x2e>
    tcp_recved(pcb, p->tot_len);
 800991a:	8911      	ldrh	r1, [r2, #8]
 800991c:	f7ff fb72 	bl	8009004 <tcp_recved>
    pbuf_free(p);
 8009920:	4620      	mov	r0, r4
 8009922:	f7fe fef1 	bl	8008708 <pbuf_free>
  return ERR_OK;
 8009926:	2000      	movs	r0, #0
}
 8009928:	bd10      	pop	{r4, pc}
  LWIP_ERROR("tcp_recv_null: invalid pcb", pcb != NULL, return ERR_ARG);
 800992a:	4b08      	ldr	r3, [pc, #32]	; (800994c <tcp_recv_null+0x3c>)
 800992c:	f44f 62d3 	mov.w	r2, #1688	; 0x698
 8009930:	4907      	ldr	r1, [pc, #28]	; (8009950 <tcp_recv_null+0x40>)
 8009932:	4808      	ldr	r0, [pc, #32]	; (8009954 <tcp_recv_null+0x44>)
 8009934:	f005 fbde 	bl	800f0f4 <iprintf>
 8009938:	f06f 000f 	mvn.w	r0, #15
 800993c:	e7f4      	b.n	8009928 <tcp_recv_null+0x18>
  } else if (err == ERR_OK) {
 800993e:	b10b      	cbz	r3, 8009944 <tcp_recv_null+0x34>
  return ERR_OK;
 8009940:	2000      	movs	r0, #0
 8009942:	e7f1      	b.n	8009928 <tcp_recv_null+0x18>
    return tcp_close(pcb);
 8009944:	f7ff ffc4 	bl	80098d0 <tcp_close>
 8009948:	e7ee      	b.n	8009928 <tcp_recv_null+0x18>
 800994a:	bf00      	nop
 800994c:	08011344 	.word	0x08011344
 8009950:	08011794 	.word	0x08011794
 8009954:	080103a4 	.word	0x080103a4

08009958 <tcp_process_refused_data>:
{
 8009958:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  LWIP_ERROR("tcp_process_refused_data: invalid pcb", pcb != NULL, return ERR_ARG);
 800995a:	b318      	cbz	r0, 80099a4 <tcp_process_refused_data+0x4c>
 800995c:	4604      	mov	r4, r0
    u8_t refused_flags = pcb->refused_data->flags;
 800995e:	6f86      	ldr	r6, [r0, #120]	; 0x78
 8009960:	7b77      	ldrb	r7, [r6, #13]
    pcb->refused_data = NULL;
 8009962:	2300      	movs	r3, #0
 8009964:	6783      	str	r3, [r0, #120]	; 0x78
    TCP_EVENT_RECV(pcb, refused_data, ERR_OK, err);
 8009966:	f8d0 5084 	ldr.w	r5, [r0, #132]	; 0x84
 800996a:	b32d      	cbz	r5, 80099b8 <tcp_process_refused_data+0x60>
 800996c:	4632      	mov	r2, r6
 800996e:	4601      	mov	r1, r0
 8009970:	6900      	ldr	r0, [r0, #16]
 8009972:	47a8      	blx	r5
 8009974:	4605      	mov	r5, r0
    if (err == ERR_OK) {
 8009976:	bb3d      	cbnz	r5, 80099c8 <tcp_process_refused_data+0x70>
      if ((refused_flags & PBUF_FLAG_TCP_FIN)
 8009978:	f017 0f20 	tst.w	r7, #32
 800997c:	d02a      	beq.n	80099d4 <tcp_process_refused_data+0x7c>
        if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 800997e:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8009980:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
          pcb->rcv_wnd++;
 8009984:	bf1c      	itt	ne
 8009986:	3301      	addne	r3, #1
 8009988:	8523      	strhne	r3, [r4, #40]	; 0x28
        TCP_EVENT_CLOSED(pcb, err);
 800998a:	f8d4 6084 	ldr.w	r6, [r4, #132]	; 0x84
 800998e:	b30e      	cbz	r6, 80099d4 <tcp_process_refused_data+0x7c>
 8009990:	2300      	movs	r3, #0
 8009992:	461a      	mov	r2, r3
 8009994:	4621      	mov	r1, r4
 8009996:	6920      	ldr	r0, [r4, #16]
 8009998:	47b0      	blx	r6
          return ERR_ABRT;
 800999a:	f110 0f0d 	cmn.w	r0, #13
 800999e:	bf08      	it	eq
 80099a0:	4605      	moveq	r5, r0
 80099a2:	e017      	b.n	80099d4 <tcp_process_refused_data+0x7c>
  LWIP_ERROR("tcp_process_refused_data: invalid pcb", pcb != NULL, return ERR_ARG);
 80099a4:	4b0c      	ldr	r3, [pc, #48]	; (80099d8 <tcp_process_refused_data+0x80>)
 80099a6:	f240 6209 	movw	r2, #1545	; 0x609
 80099aa:	490c      	ldr	r1, [pc, #48]	; (80099dc <tcp_process_refused_data+0x84>)
 80099ac:	480c      	ldr	r0, [pc, #48]	; (80099e0 <tcp_process_refused_data+0x88>)
 80099ae:	f005 fba1 	bl	800f0f4 <iprintf>
 80099b2:	f06f 050f 	mvn.w	r5, #15
 80099b6:	e00d      	b.n	80099d4 <tcp_process_refused_data+0x7c>
    TCP_EVENT_RECV(pcb, refused_data, ERR_OK, err);
 80099b8:	2300      	movs	r3, #0
 80099ba:	4632      	mov	r2, r6
 80099bc:	4601      	mov	r1, r0
 80099be:	4618      	mov	r0, r3
 80099c0:	f7ff ffa6 	bl	8009910 <tcp_recv_null>
 80099c4:	4605      	mov	r5, r0
 80099c6:	e7d6      	b.n	8009976 <tcp_process_refused_data+0x1e>
    } else if (err == ERR_ABRT) {
 80099c8:	f115 0f0d 	cmn.w	r5, #13
      pcb->refused_data = refused_data;
 80099cc:	bf1c      	itt	ne
 80099ce:	67a6      	strne	r6, [r4, #120]	; 0x78
      return ERR_INPROGRESS;
 80099d0:	f06f 0504 	mvnne.w	r5, #4
}
 80099d4:	4628      	mov	r0, r5
 80099d6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80099d8:	08011344 	.word	0x08011344
 80099dc:	080117b0 	.word	0x080117b0
 80099e0:	080103a4 	.word	0x080103a4

080099e4 <tcp_fasttmr>:
{
 80099e4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  ++tcp_timer_ctr;
 80099e8:	4a1f      	ldr	r2, [pc, #124]	; (8009a68 <tcp_fasttmr+0x84>)
 80099ea:	7813      	ldrb	r3, [r2, #0]
 80099ec:	3301      	adds	r3, #1
 80099ee:	7013      	strb	r3, [r2, #0]
  pcb = tcp_active_pcbs;
 80099f0:	f8df 807c 	ldr.w	r8, [pc, #124]	; 8009a70 <tcp_fasttmr+0x8c>
        tcp_active_pcbs_changed = 0;
 80099f4:	4e1d      	ldr	r6, [pc, #116]	; (8009a6c <tcp_fasttmr+0x88>)
  pcb = tcp_active_pcbs;
 80099f6:	f8d8 4000 	ldr.w	r4, [r8]
  while (pcb != NULL) {
 80099fa:	2c00      	cmp	r4, #0
 80099fc:	d032      	beq.n	8009a64 <tcp_fasttmr+0x80>
    if (pcb->last_timer != tcp_timer_ctr) {
 80099fe:	4d1a      	ldr	r5, [pc, #104]	; (8009a68 <tcp_fasttmr+0x84>)
        tcp_active_pcbs_changed = 0;
 8009a00:	2700      	movs	r7, #0
 8009a02:	e013      	b.n	8009a2c <tcp_fasttmr+0x48>
        tcp_ack_now(pcb);
 8009a04:	f043 0302 	orr.w	r3, r3, #2
 8009a08:	8363      	strh	r3, [r4, #26]
        tcp_output(pcb);
 8009a0a:	4620      	mov	r0, r4
 8009a0c:	f002 ff12 	bl	800c834 <tcp_output>
        tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8009a10:	8b63      	ldrh	r3, [r4, #26]
 8009a12:	f023 0303 	bic.w	r3, r3, #3
 8009a16:	8363      	strh	r3, [r4, #26]
 8009a18:	e011      	b.n	8009a3e <tcp_fasttmr+0x5a>
        tcp_clear_flags(pcb, TF_CLOSEPEND);
 8009a1a:	f023 0308 	bic.w	r3, r3, #8
 8009a1e:	8363      	strh	r3, [r4, #26]
        tcp_close_shutdown_fin(pcb);
 8009a20:	4620      	mov	r0, r4
 8009a22:	f7ff f987 	bl	8008d34 <tcp_close_shutdown_fin>
 8009a26:	e00e      	b.n	8009a46 <tcp_fasttmr+0x62>
      pcb = pcb->next;
 8009a28:	68e4      	ldr	r4, [r4, #12]
  while (pcb != NULL) {
 8009a2a:	b1dc      	cbz	r4, 8009a64 <tcp_fasttmr+0x80>
    if (pcb->last_timer != tcp_timer_ctr) {
 8009a2c:	782b      	ldrb	r3, [r5, #0]
 8009a2e:	7fa2      	ldrb	r2, [r4, #30]
 8009a30:	429a      	cmp	r2, r3
 8009a32:	d0f9      	beq.n	8009a28 <tcp_fasttmr+0x44>
      pcb->last_timer = tcp_timer_ctr;
 8009a34:	77a3      	strb	r3, [r4, #30]
      if (pcb->flags & TF_ACK_DELAY) {
 8009a36:	8b63      	ldrh	r3, [r4, #26]
 8009a38:	f013 0f01 	tst.w	r3, #1
 8009a3c:	d1e2      	bne.n	8009a04 <tcp_fasttmr+0x20>
      if (pcb->flags & TF_CLOSEPEND) {
 8009a3e:	8b63      	ldrh	r3, [r4, #26]
 8009a40:	f013 0f08 	tst.w	r3, #8
 8009a44:	d1e9      	bne.n	8009a1a <tcp_fasttmr+0x36>
      next = pcb->next;
 8009a46:	f8d4 900c 	ldr.w	r9, [r4, #12]
      if (pcb->refused_data != NULL) {
 8009a4a:	6fa3      	ldr	r3, [r4, #120]	; 0x78
 8009a4c:	b143      	cbz	r3, 8009a60 <tcp_fasttmr+0x7c>
        tcp_active_pcbs_changed = 0;
 8009a4e:	7037      	strb	r7, [r6, #0]
        tcp_process_refused_data(pcb);
 8009a50:	4620      	mov	r0, r4
 8009a52:	f7ff ff81 	bl	8009958 <tcp_process_refused_data>
        if (tcp_active_pcbs_changed) {
 8009a56:	7833      	ldrb	r3, [r6, #0]
 8009a58:	2b00      	cmp	r3, #0
 8009a5a:	d1cc      	bne.n	80099f6 <tcp_fasttmr+0x12>
      pcb = next;
 8009a5c:	464c      	mov	r4, r9
 8009a5e:	e7e4      	b.n	8009a2a <tcp_fasttmr+0x46>
 8009a60:	464c      	mov	r4, r9
 8009a62:	e7e2      	b.n	8009a2a <tcp_fasttmr+0x46>
}
 8009a64:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009a68:	20010919 	.word	0x20010919
 8009a6c:	20010908 	.word	0x20010908
 8009a70:	20010904 	.word	0x20010904

08009a74 <tcp_shutdown>:
{
 8009a74:	b510      	push	{r4, lr}
  LWIP_ERROR("tcp_shutdown: invalid pcb", pcb != NULL, return ERR_ARG);
 8009a76:	b188      	cbz	r0, 8009a9c <tcp_shutdown+0x28>
 8009a78:	4604      	mov	r4, r0
  if (pcb->state == LISTEN) {
 8009a7a:	7d03      	ldrb	r3, [r0, #20]
 8009a7c:	2b01      	cmp	r3, #1
 8009a7e:	d02a      	beq.n	8009ad6 <tcp_shutdown+0x62>
  if (shut_rx) {
 8009a80:	b1d1      	cbz	r1, 8009ab8 <tcp_shutdown+0x44>
    tcp_set_flags(pcb, TF_RXCLOSED);
 8009a82:	8b43      	ldrh	r3, [r0, #26]
 8009a84:	f043 0310 	orr.w	r3, r3, #16
 8009a88:	8343      	strh	r3, [r0, #26]
    if (shut_tx) {
 8009a8a:	b98a      	cbnz	r2, 8009ab0 <tcp_shutdown+0x3c>
    if (pcb->refused_data != NULL) {
 8009a8c:	6f80      	ldr	r0, [r0, #120]	; 0x78
 8009a8e:	b118      	cbz	r0, 8009a98 <tcp_shutdown+0x24>
      pbuf_free(pcb->refused_data);
 8009a90:	f7fe fe3a 	bl	8008708 <pbuf_free>
      pcb->refused_data = NULL;
 8009a94:	2300      	movs	r3, #0
 8009a96:	67a3      	str	r3, [r4, #120]	; 0x78
  return ERR_OK;
 8009a98:	2000      	movs	r0, #0
 8009a9a:	e01b      	b.n	8009ad4 <tcp_shutdown+0x60>
  LWIP_ERROR("tcp_shutdown: invalid pcb", pcb != NULL, return ERR_ARG);
 8009a9c:	4b12      	ldr	r3, [pc, #72]	; (8009ae8 <tcp_shutdown+0x74>)
 8009a9e:	f240 2207 	movw	r2, #519	; 0x207
 8009aa2:	4912      	ldr	r1, [pc, #72]	; (8009aec <tcp_shutdown+0x78>)
 8009aa4:	4812      	ldr	r0, [pc, #72]	; (8009af0 <tcp_shutdown+0x7c>)
 8009aa6:	f005 fb25 	bl	800f0f4 <iprintf>
 8009aaa:	f06f 000f 	mvn.w	r0, #15
 8009aae:	e011      	b.n	8009ad4 <tcp_shutdown+0x60>
      return tcp_close_shutdown(pcb, 1);
 8009ab0:	2101      	movs	r1, #1
 8009ab2:	f7ff fe49 	bl	8009748 <tcp_close_shutdown>
 8009ab6:	e00d      	b.n	8009ad4 <tcp_shutdown+0x60>
  if (shut_tx) {
 8009ab8:	b182      	cbz	r2, 8009adc <tcp_shutdown+0x68>
    switch (pcb->state) {
 8009aba:	2b04      	cmp	r3, #4
 8009abc:	d804      	bhi.n	8009ac8 <tcp_shutdown+0x54>
 8009abe:	2b02      	cmp	r3, #2
 8009ac0:	d804      	bhi.n	8009acc <tcp_shutdown+0x58>
 8009ac2:	f06f 000a 	mvn.w	r0, #10
 8009ac6:	e005      	b.n	8009ad4 <tcp_shutdown+0x60>
 8009ac8:	2b07      	cmp	r3, #7
 8009aca:	d109      	bne.n	8009ae0 <tcp_shutdown+0x6c>
        return tcp_close_shutdown(pcb, (u8_t)shut_rx);
 8009acc:	2100      	movs	r1, #0
 8009ace:	4620      	mov	r0, r4
 8009ad0:	f7ff fe3a 	bl	8009748 <tcp_close_shutdown>
}
 8009ad4:	bd10      	pop	{r4, pc}
    return ERR_CONN;
 8009ad6:	f06f 000a 	mvn.w	r0, #10
 8009ada:	e7fb      	b.n	8009ad4 <tcp_shutdown+0x60>
  return ERR_OK;
 8009adc:	2000      	movs	r0, #0
 8009ade:	e7f9      	b.n	8009ad4 <tcp_shutdown+0x60>
    switch (pcb->state) {
 8009ae0:	f06f 000a 	mvn.w	r0, #10
 8009ae4:	e7f6      	b.n	8009ad4 <tcp_shutdown+0x60>
 8009ae6:	bf00      	nop
 8009ae8:	08011344 	.word	0x08011344
 8009aec:	080117d8 	.word	0x080117d8
 8009af0:	080103a4 	.word	0x080103a4

08009af4 <tcp_slowtmr>:
{
 8009af4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009af8:	b085      	sub	sp, #20
  ++tcp_ticks;
 8009afa:	4ab4      	ldr	r2, [pc, #720]	; (8009dcc <tcp_slowtmr+0x2d8>)
 8009afc:	6813      	ldr	r3, [r2, #0]
 8009afe:	3301      	adds	r3, #1
 8009b00:	6013      	str	r3, [r2, #0]
  ++tcp_timer_ctr;
 8009b02:	4ab3      	ldr	r2, [pc, #716]	; (8009dd0 <tcp_slowtmr+0x2dc>)
 8009b04:	7813      	ldrb	r3, [r2, #0]
 8009b06:	3301      	adds	r3, #1
 8009b08:	7013      	strb	r3, [r2, #0]
  pcb = tcp_active_pcbs;
 8009b0a:	f8df a2ec 	ldr.w	sl, [pc, #748]	; 8009df8 <tcp_slowtmr+0x304>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != CLOSED\n", pcb->state != CLOSED);
 8009b0e:	4eb1      	ldr	r6, [pc, #708]	; (8009dd4 <tcp_slowtmr+0x2e0>)
          (pcb->keep_idle + TCP_KEEP_DUR(pcb)) / TCP_SLOW_INTERVAL) {
 8009b10:	f8df b2e8 	ldr.w	fp, [pc, #744]	; 8009dfc <tcp_slowtmr+0x308>
  pcb = tcp_active_pcbs;
 8009b14:	f8da 4000 	ldr.w	r4, [sl]
  while (pcb != NULL) {
 8009b18:	2c00      	cmp	r4, #0
 8009b1a:	f000 81f4 	beq.w	8009f06 <tcp_slowtmr+0x412>
  prev = NULL;
 8009b1e:	2500      	movs	r5, #0
 8009b20:	e19e      	b.n	8009e60 <tcp_slowtmr+0x36c>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != CLOSED\n", pcb->state != CLOSED);
 8009b22:	4633      	mov	r3, r6
 8009b24:	f240 42be 	movw	r2, #1214	; 0x4be
 8009b28:	49ab      	ldr	r1, [pc, #684]	; (8009dd8 <tcp_slowtmr+0x2e4>)
 8009b2a:	48ac      	ldr	r0, [pc, #688]	; (8009ddc <tcp_slowtmr+0x2e8>)
 8009b2c:	f005 fae2 	bl	800f0f4 <iprintf>
 8009b30:	e19a      	b.n	8009e68 <tcp_slowtmr+0x374>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != LISTEN\n", pcb->state != LISTEN);
 8009b32:	4633      	mov	r3, r6
 8009b34:	f240 42bf 	movw	r2, #1215	; 0x4bf
 8009b38:	49a9      	ldr	r1, [pc, #676]	; (8009de0 <tcp_slowtmr+0x2ec>)
 8009b3a:	48a8      	ldr	r0, [pc, #672]	; (8009ddc <tcp_slowtmr+0x2e8>)
 8009b3c:	f005 fada 	bl	800f0f4 <iprintf>
 8009b40:	e196      	b.n	8009e70 <tcp_slowtmr+0x37c>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != TIME-WAIT\n", pcb->state != TIME_WAIT);
 8009b42:	4633      	mov	r3, r6
 8009b44:	f44f 6298 	mov.w	r2, #1216	; 0x4c0
 8009b48:	49a6      	ldr	r1, [pc, #664]	; (8009de4 <tcp_slowtmr+0x2f0>)
 8009b4a:	48a4      	ldr	r0, [pc, #656]	; (8009ddc <tcp_slowtmr+0x2e8>)
 8009b4c:	f005 fad2 	bl	800f0f4 <iprintf>
 8009b50:	e192      	b.n	8009e78 <tcp_slowtmr+0x384>
      continue;
 8009b52:	4625      	mov	r5, r4
      pcb = pcb->next;
 8009b54:	68e4      	ldr	r4, [r4, #12]
      continue;
 8009b56:	e181      	b.n	8009e5c <tcp_slowtmr+0x368>
    if (pcb->state == SYN_SENT && pcb->nrtx >= TCP_SYNMAXRTX) {
 8009b58:	f894 3042 	ldrb.w	r3, [r4, #66]	; 0x42
 8009b5c:	2b05      	cmp	r3, #5
 8009b5e:	f240 819b 	bls.w	8009e98 <tcp_slowtmr+0x3a4>
    pcb_reset = 0;
 8009b62:	f04f 0800 	mov.w	r8, #0
      ++pcb_remove;
 8009b66:	2701      	movs	r7, #1
    if (pcb->ooseq != NULL &&
 8009b68:	6f63      	ldr	r3, [r4, #116]	; 0x74
 8009b6a:	b15b      	cbz	r3, 8009b84 <tcp_slowtmr+0x90>
        (tcp_ticks - pcb->tmr >= (u32_t)pcb->rto * TCP_OOSEQ_TIMEOUT)) {
 8009b6c:	4b97      	ldr	r3, [pc, #604]	; (8009dcc <tcp_slowtmr+0x2d8>)
 8009b6e:	681a      	ldr	r2, [r3, #0]
 8009b70:	6a23      	ldr	r3, [r4, #32]
 8009b72:	1ad2      	subs	r2, r2, r3
 8009b74:	f9b4 3040 	ldrsh.w	r3, [r4, #64]	; 0x40
 8009b78:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    if (pcb->ooseq != NULL &&
 8009b7c:	ebb2 0f43 	cmp.w	r2, r3, lsl #1
 8009b80:	f080 80f8 	bcs.w	8009d74 <tcp_slowtmr+0x280>
    if (pcb->state == SYN_RCVD) {
 8009b84:	7d23      	ldrb	r3, [r4, #20]
 8009b86:	2b03      	cmp	r3, #3
 8009b88:	f000 80f8 	beq.w	8009d7c <tcp_slowtmr+0x288>
    if (pcb->state == LAST_ACK) {
 8009b8c:	2b09      	cmp	r3, #9
 8009b8e:	f040 80fc 	bne.w	8009d8a <tcp_slowtmr+0x296>
      if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 8009b92:	4b8e      	ldr	r3, [pc, #568]	; (8009dcc <tcp_slowtmr+0x2d8>)
 8009b94:	681b      	ldr	r3, [r3, #0]
 8009b96:	6a22      	ldr	r2, [r4, #32]
 8009b98:	1a9b      	subs	r3, r3, r2
 8009b9a:	2bf0      	cmp	r3, #240	; 0xf0
 8009b9c:	f240 80f5 	bls.w	8009d8a <tcp_slowtmr+0x296>
      tcp_err_fn err_fn = pcb->errf;
 8009ba0:	f8d4 7090 	ldr.w	r7, [r4, #144]	; 0x90
      tcp_pcb_purge(pcb);
 8009ba4:	4620      	mov	r0, r4
 8009ba6:	f7ff fb67 	bl	8009278 <tcp_pcb_purge>
      if (prev != NULL) {
 8009baa:	2d00      	cmp	r5, #0
 8009bac:	f000 8130 	beq.w	8009e10 <tcp_slowtmr+0x31c>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_active_pcbs", pcb != tcp_active_pcbs);
 8009bb0:	f8da 3000 	ldr.w	r3, [sl]
 8009bb4:	42a3      	cmp	r3, r4
 8009bb6:	f000 8123 	beq.w	8009e00 <tcp_slowtmr+0x30c>
        prev->next = pcb->next;
 8009bba:	68e3      	ldr	r3, [r4, #12]
 8009bbc:	60eb      	str	r3, [r5, #12]
      if (pcb_reset) {
 8009bbe:	f1b8 0f00 	cmp.w	r8, #0
 8009bc2:	f040 8134 	bne.w	8009e2e <tcp_slowtmr+0x33a>
      err_arg = pcb->callback_arg;
 8009bc6:	f8d4 9010 	ldr.w	r9, [r4, #16]
      pcb = pcb->next;
 8009bca:	f8d4 800c 	ldr.w	r8, [r4, #12]
      tcp_free(pcb2);
 8009bce:	4620      	mov	r0, r4
 8009bd0:	f7ff f8f8 	bl	8008dc4 <tcp_free>
      tcp_active_pcbs_changed = 0;
 8009bd4:	4b84      	ldr	r3, [pc, #528]	; (8009de8 <tcp_slowtmr+0x2f4>)
 8009bd6:	2200      	movs	r2, #0
 8009bd8:	701a      	strb	r2, [r3, #0]
      TCP_EVENT_ERR(last_state, err_fn, err_arg, ERR_ABRT);
 8009bda:	2f00      	cmp	r7, #0
 8009bdc:	f000 813a 	beq.w	8009e54 <tcp_slowtmr+0x360>
 8009be0:	f06f 010c 	mvn.w	r1, #12
 8009be4:	4648      	mov	r0, r9
 8009be6:	47b8      	blx	r7
      if (tcp_active_pcbs_changed) {
 8009be8:	4b7f      	ldr	r3, [pc, #508]	; (8009de8 <tcp_slowtmr+0x2f4>)
 8009bea:	781b      	ldrb	r3, [r3, #0]
 8009bec:	2b00      	cmp	r3, #0
 8009bee:	d191      	bne.n	8009b14 <tcp_slowtmr+0x20>
      pcb = pcb->next;
 8009bf0:	4644      	mov	r4, r8
 8009bf2:	e133      	b.n	8009e5c <tcp_slowtmr+0x368>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with empty send buffer", pcb->unsent != NULL);
 8009bf4:	4633      	mov	r3, r6
 8009bf6:	f240 42d5 	movw	r2, #1237	; 0x4d5
 8009bfa:	497c      	ldr	r1, [pc, #496]	; (8009dec <tcp_slowtmr+0x2f8>)
 8009bfc:	4877      	ldr	r0, [pc, #476]	; (8009ddc <tcp_slowtmr+0x2e8>)
 8009bfe:	f005 fa79 	bl	800f0f4 <iprintf>
 8009c02:	e15b      	b.n	8009ebc <tcp_slowtmr+0x3c8>
              if (tcp_split_unsent_seg(pcb, (u16_t)pcb->snd_wnd) == ERR_OK) {
 8009c04:	4620      	mov	r0, r4
 8009c06:	f002 fb0d 	bl	800c224 <tcp_split_unsent_seg>
 8009c0a:	b158      	cbz	r0, 8009c24 <tcp_slowtmr+0x130>
              pcb->persist_cnt = 0;
 8009c0c:	2300      	movs	r3, #0
 8009c0e:	f884 3098 	strb.w	r3, [r4, #152]	; 0x98
              if (pcb->persist_backoff < sizeof(tcp_persist_backoff)) {
 8009c12:	f894 3099 	ldrb.w	r3, [r4, #153]	; 0x99
 8009c16:	2b06      	cmp	r3, #6
 8009c18:	d876      	bhi.n	8009d08 <tcp_slowtmr+0x214>
                pcb->persist_backoff++;
 8009c1a:	3301      	adds	r3, #1
 8009c1c:	f884 3099 	strb.w	r3, [r4, #153]	; 0x99
    pcb_remove = 0;
 8009c20:	2700      	movs	r7, #0
 8009c22:	e050      	b.n	8009cc6 <tcp_slowtmr+0x1d2>
                if (tcp_output(pcb) == ERR_OK) {
 8009c24:	4620      	mov	r0, r4
 8009c26:	f002 fe05 	bl	800c834 <tcp_output>
 8009c2a:	2800      	cmp	r0, #0
 8009c2c:	d1ee      	bne.n	8009c0c <tcp_slowtmr+0x118>
    pcb_remove = 0;
 8009c2e:	2700      	movs	r7, #0
 8009c30:	e049      	b.n	8009cc6 <tcp_slowtmr+0x1d2>
        if ((pcb->rtime >= 0) && (pcb->rtime < 0x7FFF)) {
 8009c32:	8e23      	ldrh	r3, [r4, #48]	; 0x30
 8009c34:	f647 72fe 	movw	r2, #32766	; 0x7ffe
 8009c38:	4293      	cmp	r3, r2
          ++pcb->rtime;
 8009c3a:	bf9c      	itt	ls
 8009c3c:	3301      	addls	r3, #1
 8009c3e:	8623      	strhls	r3, [r4, #48]	; 0x30
        if (pcb->rtime >= pcb->rto) {
 8009c40:	f9b4 2030 	ldrsh.w	r2, [r4, #48]	; 0x30
 8009c44:	f9b4 3040 	ldrsh.w	r3, [r4, #64]	; 0x40
 8009c48:	429a      	cmp	r2, r3
 8009c4a:	db3c      	blt.n	8009cc6 <tcp_slowtmr+0x1d2>
          if ((tcp_rexmit_rto_prepare(pcb) == ERR_OK) || ((pcb->unacked == NULL) && (pcb->unsent != NULL))) {
 8009c4c:	4620      	mov	r0, r4
 8009c4e:	f002 fc9d 	bl	800c58c <tcp_rexmit_rto_prepare>
 8009c52:	b118      	cbz	r0, 8009c5c <tcp_slowtmr+0x168>
 8009c54:	6f23      	ldr	r3, [r4, #112]	; 0x70
 8009c56:	bbb3      	cbnz	r3, 8009cc6 <tcp_slowtmr+0x1d2>
 8009c58:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 8009c5a:	b3a3      	cbz	r3, 8009cc6 <tcp_slowtmr+0x1d2>
            if (pcb->state != SYN_SENT) {
 8009c5c:	7d23      	ldrb	r3, [r4, #20]
 8009c5e:	2b02      	cmp	r3, #2
 8009c60:	d014      	beq.n	8009c8c <tcp_slowtmr+0x198>
              int calc_rto = ((pcb->sa >> 3) + pcb->sv) << tcp_backoff[backoff_idx];
 8009c62:	f9b4 203c 	ldrsh.w	r2, [r4, #60]	; 0x3c
 8009c66:	f9b4 303e 	ldrsh.w	r3, [r4, #62]	; 0x3e
 8009c6a:	eb03 03e2 	add.w	r3, r3, r2, asr #3
              u8_t backoff_idx = LWIP_MIN(pcb->nrtx, sizeof(tcp_backoff) - 1);
 8009c6e:	f894 2042 	ldrb.w	r2, [r4, #66]	; 0x42
              int calc_rto = ((pcb->sa >> 3) + pcb->sv) << tcp_backoff[backoff_idx];
 8009c72:	2a0c      	cmp	r2, #12
 8009c74:	bf28      	it	cs
 8009c76:	220c      	movcs	r2, #12
 8009c78:	495d      	ldr	r1, [pc, #372]	; (8009df0 <tcp_slowtmr+0x2fc>)
 8009c7a:	5c8a      	ldrb	r2, [r1, r2]
 8009c7c:	4093      	lsls	r3, r2
              pcb->rto = (s16_t)LWIP_MIN(calc_rto, 0x7FFF);
 8009c7e:	f647 72ff 	movw	r2, #32767	; 0x7fff
 8009c82:	4293      	cmp	r3, r2
 8009c84:	bfa8      	it	ge
 8009c86:	4613      	movge	r3, r2
 8009c88:	f8a4 3040 	strh.w	r3, [r4, #64]	; 0x40
            pcb->rtime = 0;
 8009c8c:	2300      	movs	r3, #0
 8009c8e:	8623      	strh	r3, [r4, #48]	; 0x30
            eff_wnd = LWIP_MIN(pcb->cwnd, pcb->snd_wnd);
 8009c90:	f8b4 2060 	ldrh.w	r2, [r4, #96]	; 0x60
 8009c94:	f8b4 3048 	ldrh.w	r3, [r4, #72]	; 0x48
            pcb->ssthresh = eff_wnd >> 1;
 8009c98:	429a      	cmp	r2, r3
 8009c9a:	bf28      	it	cs
 8009c9c:	461a      	movcs	r2, r3
 8009c9e:	0851      	lsrs	r1, r2, #1
            if (pcb->ssthresh < (tcpwnd_size_t)(pcb->mss << 1)) {
 8009ca0:	8e60      	ldrh	r0, [r4, #50]	; 0x32
 8009ca2:	0043      	lsls	r3, r0, #1
 8009ca4:	b29b      	uxth	r3, r3
              pcb->ssthresh = (tcpwnd_size_t)(pcb->mss << 1);
 8009ca6:	ebb3 0f52 	cmp.w	r3, r2, lsr #1
 8009caa:	bf98      	it	ls
 8009cac:	460b      	movls	r3, r1
 8009cae:	f8a4 304a 	strh.w	r3, [r4, #74]	; 0x4a
            pcb->cwnd = pcb->mss;
 8009cb2:	f8a4 0048 	strh.w	r0, [r4, #72]	; 0x48
            pcb->bytes_acked = 0;
 8009cb6:	2300      	movs	r3, #0
 8009cb8:	f8a4 306a 	strh.w	r3, [r4, #106]	; 0x6a
            tcp_rexmit_rto_commit(pcb);
 8009cbc:	4620      	mov	r0, r4
 8009cbe:	f002 ff85 	bl	800cbcc <tcp_rexmit_rto_commit>
 8009cc2:	e000      	b.n	8009cc6 <tcp_slowtmr+0x1d2>
      ++pcb_remove;
 8009cc4:	2701      	movs	r7, #1
    if (pcb->state == FIN_WAIT_2) {
 8009cc6:	7d23      	ldrb	r3, [r4, #20]
 8009cc8:	2b06      	cmp	r3, #6
 8009cca:	d01f      	beq.n	8009d0c <tcp_slowtmr+0x218>
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 8009ccc:	f894 8009 	ldrb.w	r8, [r4, #9]
 8009cd0:	f018 0808 	ands.w	r8, r8, #8
 8009cd4:	f43f af48 	beq.w	8009b68 <tcp_slowtmr+0x74>
 8009cd8:	2b04      	cmp	r3, #4
 8009cda:	d12a      	bne.n	8009d32 <tcp_slowtmr+0x23e>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 8009cdc:	4b3b      	ldr	r3, [pc, #236]	; (8009dcc <tcp_slowtmr+0x2d8>)
 8009cde:	681a      	ldr	r2, [r3, #0]
 8009ce0:	6a23      	ldr	r3, [r4, #32]
 8009ce2:	1ad2      	subs	r2, r2, r3
          (pcb->keep_idle + TCP_KEEP_DUR(pcb)) / TCP_SLOW_INTERVAL) {
 8009ce4:	f8d4 1094 	ldr.w	r1, [r4, #148]	; 0x94
 8009ce8:	f501 2324 	add.w	r3, r1, #671744	; 0xa4000
 8009cec:	f603 43b8 	addw	r3, r3, #3256	; 0xcb8
 8009cf0:	fbab 0303 	umull	r0, r3, fp, r3
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 8009cf4:	ebb2 1f53 	cmp.w	r2, r3, lsr #5
 8009cf8:	d920      	bls.n	8009d3c <tcp_slowtmr+0x248>
        ++pcb_remove;
 8009cfa:	3701      	adds	r7, #1
 8009cfc:	b2ff      	uxtb	r7, r7
        ++pcb_reset;
 8009cfe:	f04f 0801 	mov.w	r8, #1
 8009d02:	e731      	b.n	8009b68 <tcp_slowtmr+0x74>
          ++pcb_remove; /* max probes reached */
 8009d04:	2701      	movs	r7, #1
 8009d06:	e7de      	b.n	8009cc6 <tcp_slowtmr+0x1d2>
    pcb_remove = 0;
 8009d08:	2700      	movs	r7, #0
 8009d0a:	e7dc      	b.n	8009cc6 <tcp_slowtmr+0x1d2>
      if (pcb->flags & TF_RXCLOSED) {
 8009d0c:	8b63      	ldrh	r3, [r4, #26]
 8009d0e:	f013 0f10 	tst.w	r3, #16
 8009d12:	d007      	beq.n	8009d24 <tcp_slowtmr+0x230>
        if ((u32_t)(tcp_ticks - pcb->tmr) >
 8009d14:	4b2d      	ldr	r3, [pc, #180]	; (8009dcc <tcp_slowtmr+0x2d8>)
 8009d16:	681b      	ldr	r3, [r3, #0]
 8009d18:	6a22      	ldr	r2, [r4, #32]
 8009d1a:	1a9b      	subs	r3, r3, r2
 8009d1c:	2b28      	cmp	r3, #40	; 0x28
 8009d1e:	d901      	bls.n	8009d24 <tcp_slowtmr+0x230>
          ++pcb_remove;
 8009d20:	3701      	adds	r7, #1
 8009d22:	b2ff      	uxtb	r7, r7
    if (pcb->ooseq != NULL &&
 8009d24:	6f63      	ldr	r3, [r4, #116]	; 0x74
 8009d26:	2b00      	cmp	r3, #0
 8009d28:	f000 8134 	beq.w	8009f94 <tcp_slowtmr+0x4a0>
    pcb_reset = 0;
 8009d2c:	f04f 0800 	mov.w	r8, #0
 8009d30:	e71c      	b.n	8009b6c <tcp_slowtmr+0x78>
        ((pcb->state == ESTABLISHED) ||
 8009d32:	2b07      	cmp	r3, #7
 8009d34:	d0d2      	beq.n	8009cdc <tcp_slowtmr+0x1e8>
    pcb_reset = 0;
 8009d36:	f04f 0800 	mov.w	r8, #0
 8009d3a:	e715      	b.n	8009b68 <tcp_slowtmr+0x74>
                 (pcb->keep_idle + pcb->keep_cnt_sent * TCP_KEEP_INTVL(pcb))
 8009d3c:	f894 309b 	ldrb.w	r3, [r4, #155]	; 0x9b
 8009d40:	482c      	ldr	r0, [pc, #176]	; (8009df4 <tcp_slowtmr+0x300>)
 8009d42:	fb00 1103 	mla	r1, r0, r3, r1
                 / TCP_SLOW_INTERVAL) {
 8009d46:	fbab 3101 	umull	r3, r1, fp, r1
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 8009d4a:	ebb2 1f51 	cmp.w	r2, r1, lsr #5
 8009d4e:	d802      	bhi.n	8009d56 <tcp_slowtmr+0x262>
    pcb_reset = 0;
 8009d50:	f04f 0800 	mov.w	r8, #0
 8009d54:	e708      	b.n	8009b68 <tcp_slowtmr+0x74>
        err = tcp_keepalive(pcb);
 8009d56:	4620      	mov	r0, r4
 8009d58:	f002 ff6e 	bl	800cc38 <tcp_keepalive>
        if (err == ERR_OK) {
 8009d5c:	b938      	cbnz	r0, 8009d6e <tcp_slowtmr+0x27a>
          pcb->keep_cnt_sent++;
 8009d5e:	f894 309b 	ldrb.w	r3, [r4, #155]	; 0x9b
 8009d62:	3301      	adds	r3, #1
 8009d64:	f884 309b 	strb.w	r3, [r4, #155]	; 0x9b
    pcb_reset = 0;
 8009d68:	f04f 0800 	mov.w	r8, #0
 8009d6c:	e6fc      	b.n	8009b68 <tcp_slowtmr+0x74>
 8009d6e:	f04f 0800 	mov.w	r8, #0
 8009d72:	e6f9      	b.n	8009b68 <tcp_slowtmr+0x74>
      tcp_free_ooseq(pcb);
 8009d74:	4620      	mov	r0, r4
 8009d76:	f7ff fa75 	bl	8009264 <tcp_free_ooseq>
 8009d7a:	e703      	b.n	8009b84 <tcp_slowtmr+0x90>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 8009d7c:	4b13      	ldr	r3, [pc, #76]	; (8009dcc <tcp_slowtmr+0x2d8>)
 8009d7e:	681b      	ldr	r3, [r3, #0]
 8009d80:	6a22      	ldr	r2, [r4, #32]
 8009d82:	1a9b      	subs	r3, r3, r2
 8009d84:	2b28      	cmp	r3, #40	; 0x28
 8009d86:	f63f af0b 	bhi.w	8009ba0 <tcp_slowtmr+0xac>
    if (pcb_remove) {
 8009d8a:	2f00      	cmp	r7, #0
 8009d8c:	f47f af08 	bne.w	8009ba0 <tcp_slowtmr+0xac>
      pcb = pcb->next;
 8009d90:	68e7      	ldr	r7, [r4, #12]
      ++prev->polltmr;
 8009d92:	7f23      	ldrb	r3, [r4, #28]
 8009d94:	3301      	adds	r3, #1
 8009d96:	b2db      	uxtb	r3, r3
 8009d98:	7723      	strb	r3, [r4, #28]
      if (prev->polltmr >= prev->pollinterval) {
 8009d9a:	7f62      	ldrb	r2, [r4, #29]
 8009d9c:	429a      	cmp	r2, r3
 8009d9e:	d85b      	bhi.n	8009e58 <tcp_slowtmr+0x364>
        prev->polltmr = 0;
 8009da0:	2300      	movs	r3, #0
 8009da2:	7723      	strb	r3, [r4, #28]
        tcp_active_pcbs_changed = 0;
 8009da4:	4a10      	ldr	r2, [pc, #64]	; (8009de8 <tcp_slowtmr+0x2f4>)
 8009da6:	7013      	strb	r3, [r2, #0]
        TCP_EVENT_POLL(prev, err);
 8009da8:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
 8009dac:	2b00      	cmp	r3, #0
 8009dae:	d04b      	beq.n	8009e48 <tcp_slowtmr+0x354>
 8009db0:	4621      	mov	r1, r4
 8009db2:	6920      	ldr	r0, [r4, #16]
 8009db4:	4798      	blx	r3
        if (tcp_active_pcbs_changed) {
 8009db6:	4b0c      	ldr	r3, [pc, #48]	; (8009de8 <tcp_slowtmr+0x2f4>)
 8009db8:	781b      	ldrb	r3, [r3, #0]
 8009dba:	2b00      	cmp	r3, #0
 8009dbc:	f47f aeaa 	bne.w	8009b14 <tcp_slowtmr+0x20>
        if (err == ERR_OK) {
 8009dc0:	2800      	cmp	r0, #0
 8009dc2:	d041      	beq.n	8009e48 <tcp_slowtmr+0x354>
 8009dc4:	4625      	mov	r5, r4
      pcb = pcb->next;
 8009dc6:	463c      	mov	r4, r7
 8009dc8:	e048      	b.n	8009e5c <tcp_slowtmr+0x368>
 8009dca:	bf00      	nop
 8009dcc:	20010914 	.word	0x20010914
 8009dd0:	20010919 	.word	0x20010919
 8009dd4:	08011344 	.word	0x08011344
 8009dd8:	080117f4 	.word	0x080117f4
 8009ddc:	080103a4 	.word	0x080103a4
 8009de0:	08011820 	.word	0x08011820
 8009de4:	0801184c 	.word	0x0801184c
 8009de8:	20010908 	.word	0x20010908
 8009dec:	080118b0 	.word	0x080118b0
 8009df0:	080119c0 	.word	0x080119c0
 8009df4:	000124f8 	.word	0x000124f8
 8009df8:	20010904 	.word	0x20010904
 8009dfc:	10624dd3 	.word	0x10624dd3
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_active_pcbs", pcb != tcp_active_pcbs);
 8009e00:	4633      	mov	r3, r6
 8009e02:	f240 526d 	movw	r2, #1389	; 0x56d
 8009e06:	4966      	ldr	r1, [pc, #408]	; (8009fa0 <tcp_slowtmr+0x4ac>)
 8009e08:	4866      	ldr	r0, [pc, #408]	; (8009fa4 <tcp_slowtmr+0x4b0>)
 8009e0a:	f005 f973 	bl	800f0f4 <iprintf>
 8009e0e:	e6d4      	b.n	8009bba <tcp_slowtmr+0xc6>
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_active_pcbs", tcp_active_pcbs == pcb);
 8009e10:	f8da 3000 	ldr.w	r3, [sl]
 8009e14:	42a3      	cmp	r3, r4
 8009e16:	d006      	beq.n	8009e26 <tcp_slowtmr+0x332>
 8009e18:	4633      	mov	r3, r6
 8009e1a:	f240 5271 	movw	r2, #1393	; 0x571
 8009e1e:	4962      	ldr	r1, [pc, #392]	; (8009fa8 <tcp_slowtmr+0x4b4>)
 8009e20:	4860      	ldr	r0, [pc, #384]	; (8009fa4 <tcp_slowtmr+0x4b0>)
 8009e22:	f005 f967 	bl	800f0f4 <iprintf>
        tcp_active_pcbs = pcb->next;
 8009e26:	68e3      	ldr	r3, [r4, #12]
 8009e28:	f8ca 3000 	str.w	r3, [sl]
 8009e2c:	e6c7      	b.n	8009bbe <tcp_slowtmr+0xca>
        tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 8009e2e:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8009e30:	6d21      	ldr	r1, [r4, #80]	; 0x50
 8009e32:	8b23      	ldrh	r3, [r4, #24]
 8009e34:	9302      	str	r3, [sp, #8]
 8009e36:	8ae3      	ldrh	r3, [r4, #22]
 8009e38:	9301      	str	r3, [sp, #4]
 8009e3a:	1d23      	adds	r3, r4, #4
 8009e3c:	9300      	str	r3, [sp, #0]
 8009e3e:	4623      	mov	r3, r4
 8009e40:	4620      	mov	r0, r4
 8009e42:	f002 fc75 	bl	800c730 <tcp_rst>
 8009e46:	e6be      	b.n	8009bc6 <tcp_slowtmr+0xd2>
          tcp_output(prev);
 8009e48:	4620      	mov	r0, r4
 8009e4a:	f002 fcf3 	bl	800c834 <tcp_output>
 8009e4e:	4625      	mov	r5, r4
      pcb = pcb->next;
 8009e50:	463c      	mov	r4, r7
 8009e52:	e003      	b.n	8009e5c <tcp_slowtmr+0x368>
      pcb = pcb->next;
 8009e54:	4644      	mov	r4, r8
 8009e56:	e001      	b.n	8009e5c <tcp_slowtmr+0x368>
 8009e58:	4625      	mov	r5, r4
      pcb = pcb->next;
 8009e5a:	463c      	mov	r4, r7
  while (pcb != NULL) {
 8009e5c:	2c00      	cmp	r4, #0
 8009e5e:	d052      	beq.n	8009f06 <tcp_slowtmr+0x412>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != CLOSED\n", pcb->state != CLOSED);
 8009e60:	7d23      	ldrb	r3, [r4, #20]
 8009e62:	2b00      	cmp	r3, #0
 8009e64:	f43f ae5d 	beq.w	8009b22 <tcp_slowtmr+0x2e>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != LISTEN\n", pcb->state != LISTEN);
 8009e68:	7d23      	ldrb	r3, [r4, #20]
 8009e6a:	2b01      	cmp	r3, #1
 8009e6c:	f43f ae61 	beq.w	8009b32 <tcp_slowtmr+0x3e>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != TIME-WAIT\n", pcb->state != TIME_WAIT);
 8009e70:	7d23      	ldrb	r3, [r4, #20]
 8009e72:	2b0a      	cmp	r3, #10
 8009e74:	f43f ae65 	beq.w	8009b42 <tcp_slowtmr+0x4e>
    if (pcb->last_timer == tcp_timer_ctr) {
 8009e78:	4b4c      	ldr	r3, [pc, #304]	; (8009fac <tcp_slowtmr+0x4b8>)
 8009e7a:	781b      	ldrb	r3, [r3, #0]
 8009e7c:	7fa2      	ldrb	r2, [r4, #30]
 8009e7e:	429a      	cmp	r2, r3
 8009e80:	f43f ae67 	beq.w	8009b52 <tcp_slowtmr+0x5e>
    pcb->last_timer = tcp_timer_ctr;
 8009e84:	77a3      	strb	r3, [r4, #30]
    if (pcb->state == SYN_SENT && pcb->nrtx >= TCP_SYNMAXRTX) {
 8009e86:	7d23      	ldrb	r3, [r4, #20]
 8009e88:	2b02      	cmp	r3, #2
 8009e8a:	f43f ae65 	beq.w	8009b58 <tcp_slowtmr+0x64>
    } else if (pcb->nrtx >= TCP_MAXRTX) {
 8009e8e:	f894 3042 	ldrb.w	r3, [r4, #66]	; 0x42
 8009e92:	2b0b      	cmp	r3, #11
 8009e94:	f63f af16 	bhi.w	8009cc4 <tcp_slowtmr+0x1d0>
      if (pcb->persist_backoff > 0) {
 8009e98:	f894 7099 	ldrb.w	r7, [r4, #153]	; 0x99
 8009e9c:	2f00      	cmp	r7, #0
 8009e9e:	f43f aec8 	beq.w	8009c32 <tcp_slowtmr+0x13e>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with in-flight data", pcb->unacked == NULL);
 8009ea2:	6f23      	ldr	r3, [r4, #112]	; 0x70
 8009ea4:	b133      	cbz	r3, 8009eb4 <tcp_slowtmr+0x3c0>
 8009ea6:	4633      	mov	r3, r6
 8009ea8:	f240 42d4 	movw	r2, #1236	; 0x4d4
 8009eac:	4940      	ldr	r1, [pc, #256]	; (8009fb0 <tcp_slowtmr+0x4bc>)
 8009eae:	483d      	ldr	r0, [pc, #244]	; (8009fa4 <tcp_slowtmr+0x4b0>)
 8009eb0:	f005 f920 	bl	800f0f4 <iprintf>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with empty send buffer", pcb->unsent != NULL);
 8009eb4:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 8009eb6:	2b00      	cmp	r3, #0
 8009eb8:	f43f ae9c 	beq.w	8009bf4 <tcp_slowtmr+0x100>
        if (pcb->persist_probe >= TCP_MAXRTX) {
 8009ebc:	f894 309a 	ldrb.w	r3, [r4, #154]	; 0x9a
 8009ec0:	2b0b      	cmp	r3, #11
 8009ec2:	f63f af1f 	bhi.w	8009d04 <tcp_slowtmr+0x210>
          u8_t backoff_cnt = tcp_persist_backoff[pcb->persist_backoff - 1];
 8009ec6:	f894 2099 	ldrb.w	r2, [r4, #153]	; 0x99
 8009eca:	4b3a      	ldr	r3, [pc, #232]	; (8009fb4 <tcp_slowtmr+0x4c0>)
 8009ecc:	4413      	add	r3, r2
 8009ece:	f813 2c01 	ldrb.w	r2, [r3, #-1]
          if (pcb->persist_cnt < backoff_cnt) {
 8009ed2:	f894 3098 	ldrb.w	r3, [r4, #152]	; 0x98
 8009ed6:	4293      	cmp	r3, r2
 8009ed8:	d208      	bcs.n	8009eec <tcp_slowtmr+0x3f8>
            pcb->persist_cnt++;
 8009eda:	3301      	adds	r3, #1
 8009edc:	b2db      	uxtb	r3, r3
 8009ede:	f884 3098 	strb.w	r3, [r4, #152]	; 0x98
          if (pcb->persist_cnt >= backoff_cnt) {
 8009ee2:	4293      	cmp	r3, r2
    pcb_remove = 0;
 8009ee4:	bf38      	it	cc
 8009ee6:	2700      	movcc	r7, #0
          if (pcb->persist_cnt >= backoff_cnt) {
 8009ee8:	f4ff aeed 	bcc.w	8009cc6 <tcp_slowtmr+0x1d2>
            if (pcb->snd_wnd == 0) {
 8009eec:	f8b4 1060 	ldrh.w	r1, [r4, #96]	; 0x60
 8009ef0:	2900      	cmp	r1, #0
 8009ef2:	f47f ae87 	bne.w	8009c04 <tcp_slowtmr+0x110>
              if (tcp_zero_window_probe(pcb) != ERR_OK) {
 8009ef6:	4620      	mov	r0, r4
 8009ef8:	f002 fecc 	bl	800cc94 <tcp_zero_window_probe>
 8009efc:	2800      	cmp	r0, #0
 8009efe:	f43f ae85 	beq.w	8009c0c <tcp_slowtmr+0x118>
    pcb_remove = 0;
 8009f02:	2700      	movs	r7, #0
 8009f04:	e6df      	b.n	8009cc6 <tcp_slowtmr+0x1d2>
  pcb = tcp_tw_pcbs;
 8009f06:	4b2c      	ldr	r3, [pc, #176]	; (8009fb8 <tcp_slowtmr+0x4c4>)
 8009f08:	681c      	ldr	r4, [r3, #0]
  while (pcb != NULL) {
 8009f0a:	2c00      	cmp	r4, #0
 8009f0c:	d045      	beq.n	8009f9a <tcp_slowtmr+0x4a6>
  prev = NULL;
 8009f0e:	2500      	movs	r5, #0
    LWIP_ASSERT("tcp_slowtmr: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 8009f10:	4f2a      	ldr	r7, [pc, #168]	; (8009fbc <tcp_slowtmr+0x4c8>)
 8009f12:	f8df 80b8 	ldr.w	r8, [pc, #184]	; 8009fcc <tcp_slowtmr+0x4d8>
 8009f16:	4e23      	ldr	r6, [pc, #140]	; (8009fa4 <tcp_slowtmr+0x4b0>)
 8009f18:	e009      	b.n	8009f2e <tcp_slowtmr+0x43a>
    if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 8009f1a:	4b29      	ldr	r3, [pc, #164]	; (8009fc0 <tcp_slowtmr+0x4cc>)
 8009f1c:	681b      	ldr	r3, [r3, #0]
 8009f1e:	6a22      	ldr	r2, [r4, #32]
 8009f20:	1a9b      	subs	r3, r3, r2
 8009f22:	2bf0      	cmp	r3, #240	; 0xf0
 8009f24:	d80e      	bhi.n	8009f44 <tcp_slowtmr+0x450>
      pcb = pcb->next;
 8009f26:	4625      	mov	r5, r4
 8009f28:	68e4      	ldr	r4, [r4, #12]
  while (pcb != NULL) {
 8009f2a:	2c00      	cmp	r4, #0
 8009f2c:	d035      	beq.n	8009f9a <tcp_slowtmr+0x4a6>
    LWIP_ASSERT("tcp_slowtmr: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 8009f2e:	7d23      	ldrb	r3, [r4, #20]
 8009f30:	2b0a      	cmp	r3, #10
 8009f32:	d0f2      	beq.n	8009f1a <tcp_slowtmr+0x426>
 8009f34:	463b      	mov	r3, r7
 8009f36:	f240 52a1 	movw	r2, #1441	; 0x5a1
 8009f3a:	4641      	mov	r1, r8
 8009f3c:	4630      	mov	r0, r6
 8009f3e:	f005 f8d9 	bl	800f0f4 <iprintf>
 8009f42:	e7ea      	b.n	8009f1a <tcp_slowtmr+0x426>
      tcp_pcb_purge(pcb);
 8009f44:	4620      	mov	r0, r4
 8009f46:	f7ff f997 	bl	8009278 <tcp_pcb_purge>
      if (prev != NULL) {
 8009f4a:	b1a5      	cbz	r5, 8009f76 <tcp_slowtmr+0x482>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_tw_pcbs", pcb != tcp_tw_pcbs);
 8009f4c:	4b1a      	ldr	r3, [pc, #104]	; (8009fb8 <tcp_slowtmr+0x4c4>)
 8009f4e:	681b      	ldr	r3, [r3, #0]
 8009f50:	42a3      	cmp	r3, r4
 8009f52:	d008      	beq.n	8009f66 <tcp_slowtmr+0x472>
        prev->next = pcb->next;
 8009f54:	68e3      	ldr	r3, [r4, #12]
 8009f56:	60eb      	str	r3, [r5, #12]
      pcb = pcb->next;
 8009f58:	f8d4 900c 	ldr.w	r9, [r4, #12]
      tcp_free(pcb2);
 8009f5c:	4620      	mov	r0, r4
 8009f5e:	f7fe ff31 	bl	8008dc4 <tcp_free>
      pcb = pcb->next;
 8009f62:	464c      	mov	r4, r9
 8009f64:	e7e1      	b.n	8009f2a <tcp_slowtmr+0x436>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_tw_pcbs", pcb != tcp_tw_pcbs);
 8009f66:	463b      	mov	r3, r7
 8009f68:	f240 52af 	movw	r2, #1455	; 0x5af
 8009f6c:	4915      	ldr	r1, [pc, #84]	; (8009fc4 <tcp_slowtmr+0x4d0>)
 8009f6e:	4630      	mov	r0, r6
 8009f70:	f005 f8c0 	bl	800f0f4 <iprintf>
 8009f74:	e7ee      	b.n	8009f54 <tcp_slowtmr+0x460>
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_tw_pcbs", tcp_tw_pcbs == pcb);
 8009f76:	4b10      	ldr	r3, [pc, #64]	; (8009fb8 <tcp_slowtmr+0x4c4>)
 8009f78:	681b      	ldr	r3, [r3, #0]
 8009f7a:	42a3      	cmp	r3, r4
 8009f7c:	d006      	beq.n	8009f8c <tcp_slowtmr+0x498>
 8009f7e:	463b      	mov	r3, r7
 8009f80:	f240 52b3 	movw	r2, #1459	; 0x5b3
 8009f84:	4910      	ldr	r1, [pc, #64]	; (8009fc8 <tcp_slowtmr+0x4d4>)
 8009f86:	4630      	mov	r0, r6
 8009f88:	f005 f8b4 	bl	800f0f4 <iprintf>
        tcp_tw_pcbs = pcb->next;
 8009f8c:	68e2      	ldr	r2, [r4, #12]
 8009f8e:	4b0a      	ldr	r3, [pc, #40]	; (8009fb8 <tcp_slowtmr+0x4c4>)
 8009f90:	601a      	str	r2, [r3, #0]
 8009f92:	e7e1      	b.n	8009f58 <tcp_slowtmr+0x464>
    pcb_reset = 0;
 8009f94:	f04f 0800 	mov.w	r8, #0
 8009f98:	e6f7      	b.n	8009d8a <tcp_slowtmr+0x296>
}
 8009f9a:	b005      	add	sp, #20
 8009f9c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009fa0:	080118e8 	.word	0x080118e8
 8009fa4:	080103a4 	.word	0x080103a4
 8009fa8:	08011914 	.word	0x08011914
 8009fac:	20010919 	.word	0x20010919
 8009fb0:	0801187c 	.word	0x0801187c
 8009fb4:	080119e0 	.word	0x080119e0
 8009fb8:	2001091c 	.word	0x2001091c
 8009fbc:	08011344 	.word	0x08011344
 8009fc0:	20010914 	.word	0x20010914
 8009fc4:	08011970 	.word	0x08011970
 8009fc8:	08011998 	.word	0x08011998
 8009fcc:	08011940 	.word	0x08011940

08009fd0 <tcp_tmr>:
{
 8009fd0:	b508      	push	{r3, lr}
  tcp_fasttmr();
 8009fd2:	f7ff fd07 	bl	80099e4 <tcp_fasttmr>
  if (++tcp_timer & 1) {
 8009fd6:	4a06      	ldr	r2, [pc, #24]	; (8009ff0 <tcp_tmr+0x20>)
 8009fd8:	7813      	ldrb	r3, [r2, #0]
 8009fda:	3301      	adds	r3, #1
 8009fdc:	b2db      	uxtb	r3, r3
 8009fde:	7013      	strb	r3, [r2, #0]
 8009fe0:	f013 0f01 	tst.w	r3, #1
 8009fe4:	d100      	bne.n	8009fe8 <tcp_tmr+0x18>
}
 8009fe6:	bd08      	pop	{r3, pc}
    tcp_slowtmr();
 8009fe8:	f7ff fd84 	bl	8009af4 <tcp_slowtmr>
}
 8009fec:	e7fb      	b.n	8009fe6 <tcp_tmr+0x16>
 8009fee:	bf00      	nop
 8009ff0:	20010918 	.word	0x20010918

08009ff4 <tcp_get_next_optbyte>:
}

static u8_t
tcp_get_next_optbyte(void)
{
  u16_t optidx = tcp_optidx++;
 8009ff4:	4a09      	ldr	r2, [pc, #36]	; (800a01c <tcp_get_next_optbyte+0x28>)
 8009ff6:	8813      	ldrh	r3, [r2, #0]
 8009ff8:	1c59      	adds	r1, r3, #1
 8009ffa:	8011      	strh	r1, [r2, #0]
  if ((tcphdr_opt2 == NULL) || (optidx < tcphdr_opt1len)) {
 8009ffc:	4a08      	ldr	r2, [pc, #32]	; (800a020 <tcp_get_next_optbyte+0x2c>)
 8009ffe:	6812      	ldr	r2, [r2, #0]
 800a000:	b11a      	cbz	r2, 800a00a <tcp_get_next_optbyte+0x16>
 800a002:	4908      	ldr	r1, [pc, #32]	; (800a024 <tcp_get_next_optbyte+0x30>)
 800a004:	8809      	ldrh	r1, [r1, #0]
 800a006:	428b      	cmp	r3, r1
 800a008:	d204      	bcs.n	800a014 <tcp_get_next_optbyte+0x20>
    u8_t *opts = (u8_t *)tcphdr + TCP_HLEN;
 800a00a:	4a07      	ldr	r2, [pc, #28]	; (800a028 <tcp_get_next_optbyte+0x34>)
    return opts[optidx];
 800a00c:	6812      	ldr	r2, [r2, #0]
 800a00e:	4413      	add	r3, r2
 800a010:	7d18      	ldrb	r0, [r3, #20]
 800a012:	4770      	bx	lr
  } else {
    u8_t idx = (u8_t)(optidx - tcphdr_opt1len);
 800a014:	1a5b      	subs	r3, r3, r1
    return tcphdr_opt2[idx];
 800a016:	b2db      	uxtb	r3, r3
 800a018:	5cd0      	ldrb	r0, [r2, r3]
  }
}
 800a01a:	4770      	bx	lr
 800a01c:	2001094c 	.word	0x2001094c
 800a020:	20010958 	.word	0x20010958
 800a024:	20010954 	.word	0x20010954
 800a028:	20010950 	.word	0x20010950

0800a02c <tcp_parseopt>:
 *
 * @param pcb the tcp_pcb for which a segment arrived
 */
static void
tcp_parseopt(struct tcp_pcb *pcb)
{
 800a02c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  u16_t mss;
#if LWIP_TCP_TIMESTAMPS
  u32_t tsval;
#endif

  LWIP_ASSERT("tcp_parseopt: invalid pcb", pcb != NULL);
 800a02e:	4607      	mov	r7, r0
 800a030:	b1d0      	cbz	r0, 800a068 <tcp_parseopt+0x3c>

  /* Parse the TCP MSS option, if present. */
  if (tcphdr_optlen != 0) {
 800a032:	4b1e      	ldr	r3, [pc, #120]	; (800a0ac <tcp_parseopt+0x80>)
 800a034:	881d      	ldrh	r5, [r3, #0]
 800a036:	2d00      	cmp	r5, #0
 800a038:	d037      	beq.n	800a0aa <tcp_parseopt+0x7e>
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 800a03a:	4b1d      	ldr	r3, [pc, #116]	; (800a0b0 <tcp_parseopt+0x84>)
 800a03c:	2200      	movs	r2, #0
 800a03e:	801a      	strh	r2, [r3, #0]
 800a040:	461e      	mov	r6, r3
 800a042:	8833      	ldrh	r3, [r6, #0]
 800a044:	42ab      	cmp	r3, r5
 800a046:	d230      	bcs.n	800a0aa <tcp_parseopt+0x7e>
      u8_t opt = tcp_get_next_optbyte();
 800a048:	f7ff ffd4 	bl	8009ff4 <tcp_get_next_optbyte>
      switch (opt) {
 800a04c:	2801      	cmp	r0, #1
 800a04e:	d0f8      	beq.n	800a042 <tcp_parseopt+0x16>
 800a050:	2802      	cmp	r0, #2
 800a052:	d011      	beq.n	800a078 <tcp_parseopt+0x4c>
 800a054:	b348      	cbz	r0, 800a0aa <tcp_parseopt+0x7e>
          }
          break;
#endif /* LWIP_TCP_SACK_OUT */
        default:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: other\n"));
          data = tcp_get_next_optbyte();
 800a056:	f7ff ffcd 	bl	8009ff4 <tcp_get_next_optbyte>
          if (data < 2) {
 800a05a:	2801      	cmp	r0, #1
 800a05c:	d925      	bls.n	800a0aa <tcp_parseopt+0x7e>
               and we don't process them further. */
            return;
          }
          /* All other options have a length field, so that we easily
             can skip past them. */
          tcp_optidx += data - 2;
 800a05e:	8833      	ldrh	r3, [r6, #0]
 800a060:	3b02      	subs	r3, #2
 800a062:	4418      	add	r0, r3
 800a064:	8030      	strh	r0, [r6, #0]
 800a066:	e7ec      	b.n	800a042 <tcp_parseopt+0x16>
  LWIP_ASSERT("tcp_parseopt: invalid pcb", pcb != NULL);
 800a068:	4b12      	ldr	r3, [pc, #72]	; (800a0b4 <tcp_parseopt+0x88>)
 800a06a:	f240 727d 	movw	r2, #1917	; 0x77d
 800a06e:	4912      	ldr	r1, [pc, #72]	; (800a0b8 <tcp_parseopt+0x8c>)
 800a070:	4812      	ldr	r0, [pc, #72]	; (800a0bc <tcp_parseopt+0x90>)
 800a072:	f005 f83f 	bl	800f0f4 <iprintf>
 800a076:	e7dc      	b.n	800a032 <tcp_parseopt+0x6>
          if (tcp_get_next_optbyte() != LWIP_TCP_OPT_LEN_MSS || (tcp_optidx - 2 + LWIP_TCP_OPT_LEN_MSS) > tcphdr_optlen) {
 800a078:	f7ff ffbc 	bl	8009ff4 <tcp_get_next_optbyte>
 800a07c:	2804      	cmp	r0, #4
 800a07e:	d114      	bne.n	800a0aa <tcp_parseopt+0x7e>
 800a080:	8833      	ldrh	r3, [r6, #0]
 800a082:	3301      	adds	r3, #1
 800a084:	42ab      	cmp	r3, r5
 800a086:	da10      	bge.n	800a0aa <tcp_parseopt+0x7e>
          mss = (u16_t)(tcp_get_next_optbyte() << 8);
 800a088:	f7ff ffb4 	bl	8009ff4 <tcp_get_next_optbyte>
 800a08c:	0204      	lsls	r4, r0, #8
 800a08e:	b2a4      	uxth	r4, r4
          mss |= tcp_get_next_optbyte();
 800a090:	f7ff ffb0 	bl	8009ff4 <tcp_get_next_optbyte>
 800a094:	4320      	orrs	r0, r4
 800a096:	b280      	uxth	r0, r0
          pcb->mss = ((mss > TCP_MSS) || (mss == 0)) ? TCP_MSS : mss;
 800a098:	1e43      	subs	r3, r0, #1
 800a09a:	b29b      	uxth	r3, r3
 800a09c:	f5b3 7f06 	cmp.w	r3, #536	; 0x218
 800a0a0:	bf28      	it	cs
 800a0a2:	f44f 7006 	movcs.w	r0, #536	; 0x218
 800a0a6:	8678      	strh	r0, [r7, #50]	; 0x32
          break;
 800a0a8:	e7cb      	b.n	800a042 <tcp_parseopt+0x16>
      }
    }
  }
}
 800a0aa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a0ac:	2001095c 	.word	0x2001095c
 800a0b0:	2001094c 	.word	0x2001094c
 800a0b4:	080119e8 	.word	0x080119e8
 800a0b8:	08011a1c 	.word	0x08011a1c
 800a0bc:	080103a4 	.word	0x080103a4

0800a0c0 <tcp_input_delayed_close>:
{
 800a0c0:	b510      	push	{r4, lr}
  LWIP_ASSERT("tcp_input_delayed_close: invalid pcb", pcb != NULL);
 800a0c2:	4604      	mov	r4, r0
 800a0c4:	b130      	cbz	r0, 800a0d4 <tcp_input_delayed_close+0x14>
  if (recv_flags & TF_CLOSED) {
 800a0c6:	4b11      	ldr	r3, [pc, #68]	; (800a10c <tcp_input_delayed_close+0x4c>)
 800a0c8:	781b      	ldrb	r3, [r3, #0]
 800a0ca:	f013 0f10 	tst.w	r3, #16
 800a0ce:	d109      	bne.n	800a0e4 <tcp_input_delayed_close+0x24>
  return 0;
 800a0d0:	2000      	movs	r0, #0
}
 800a0d2:	bd10      	pop	{r4, pc}
  LWIP_ASSERT("tcp_input_delayed_close: invalid pcb", pcb != NULL);
 800a0d4:	4b0e      	ldr	r3, [pc, #56]	; (800a110 <tcp_input_delayed_close+0x50>)
 800a0d6:	f240 225a 	movw	r2, #602	; 0x25a
 800a0da:	490e      	ldr	r1, [pc, #56]	; (800a114 <tcp_input_delayed_close+0x54>)
 800a0dc:	480e      	ldr	r0, [pc, #56]	; (800a118 <tcp_input_delayed_close+0x58>)
 800a0de:	f005 f809 	bl	800f0f4 <iprintf>
 800a0e2:	e7f0      	b.n	800a0c6 <tcp_input_delayed_close+0x6>
    if (!(pcb->flags & TF_RXCLOSED)) {
 800a0e4:	8b63      	ldrh	r3, [r4, #26]
 800a0e6:	f013 0f10 	tst.w	r3, #16
 800a0ea:	d106      	bne.n	800a0fa <tcp_input_delayed_close+0x3a>
      TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_CLSD);
 800a0ec:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 800a0f0:	b11b      	cbz	r3, 800a0fa <tcp_input_delayed_close+0x3a>
 800a0f2:	f06f 010e 	mvn.w	r1, #14
 800a0f6:	6920      	ldr	r0, [r4, #16]
 800a0f8:	4798      	blx	r3
    tcp_pcb_remove(&tcp_active_pcbs, pcb);
 800a0fa:	4621      	mov	r1, r4
 800a0fc:	4807      	ldr	r0, [pc, #28]	; (800a11c <tcp_input_delayed_close+0x5c>)
 800a0fe:	f7ff f8eb 	bl	80092d8 <tcp_pcb_remove>
    tcp_free(pcb);
 800a102:	4620      	mov	r0, r4
 800a104:	f7fe fe5e 	bl	8008dc4 <tcp_free>
    return 1;
 800a108:	2001      	movs	r0, #1
 800a10a:	e7e2      	b.n	800a0d2 <tcp_input_delayed_close+0x12>
 800a10c:	20010940 	.word	0x20010940
 800a110:	080119e8 	.word	0x080119e8
 800a114:	08011a38 	.word	0x08011a38
 800a118:	080103a4 	.word	0x080103a4
 800a11c:	20010904 	.word	0x20010904

0800a120 <tcp_free_acked_segments>:
{
 800a120:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  while (seg_list != NULL &&
 800a124:	460d      	mov	r5, r1
 800a126:	b139      	cbz	r1, 800a138 <tcp_free_acked_segments+0x18>
 800a128:	4606      	mov	r6, r0
 800a12a:	4698      	mov	r8, r3
         TCP_SEQ_LEQ(lwip_ntohl(seg_list->tcphdr->seqno) +
 800a12c:	4f2c      	ldr	r7, [pc, #176]	; (800a1e0 <tcp_free_acked_segments+0xc0>)
    LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= clen));
 800a12e:	f8df a0b8 	ldr.w	sl, [pc, #184]	; 800a1e8 <tcp_free_acked_segments+0xc8>
 800a132:	f8df 90c0 	ldr.w	r9, [pc, #192]	; 800a1f4 <tcp_free_acked_segments+0xd4>
 800a136:	e01b      	b.n	800a170 <tcp_free_acked_segments+0x50>
  while (seg_list != NULL &&
 800a138:	468b      	mov	fp, r1
 800a13a:	e00a      	b.n	800a152 <tcp_free_acked_segments+0x32>
    LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= clen));
 800a13c:	4653      	mov	r3, sl
 800a13e:	f240 4257 	movw	r2, #1111	; 0x457
 800a142:	4649      	mov	r1, r9
 800a144:	4827      	ldr	r0, [pc, #156]	; (800a1e4 <tcp_free_acked_segments+0xc4>)
 800a146:	f004 ffd5 	bl	800f0f4 <iprintf>
 800a14a:	e030      	b.n	800a1ae <tcp_free_acked_segments+0x8e>
      LWIP_ASSERT("tcp_receive: valid queue length",
 800a14c:	f1b8 0f00 	cmp.w	r8, #0
 800a150:	d002      	beq.n	800a158 <tcp_free_acked_segments+0x38>
}
 800a152:	4658      	mov	r0, fp
 800a154:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
      LWIP_ASSERT("tcp_receive: valid queue length",
 800a158:	4b23      	ldr	r3, [pc, #140]	; (800a1e8 <tcp_free_acked_segments+0xc8>)
 800a15a:	f240 4261 	movw	r2, #1121	; 0x461
 800a15e:	4923      	ldr	r1, [pc, #140]	; (800a1ec <tcp_free_acked_segments+0xcc>)
 800a160:	4820      	ldr	r0, [pc, #128]	; (800a1e4 <tcp_free_acked_segments+0xc4>)
 800a162:	f004 ffc7 	bl	800f0f4 <iprintf>
 800a166:	e7f4      	b.n	800a152 <tcp_free_acked_segments+0x32>
  while (seg_list != NULL &&
 800a168:	f1bb 0f00 	cmp.w	fp, #0
 800a16c:	d0f1      	beq.n	800a152 <tcp_free_acked_segments+0x32>
 800a16e:	465d      	mov	r5, fp
         TCP_SEQ_LEQ(lwip_ntohl(seg_list->tcphdr->seqno) +
 800a170:	68eb      	ldr	r3, [r5, #12]
 800a172:	6858      	ldr	r0, [r3, #4]
 800a174:	f7fd fc8d 	bl	8007a92 <lwip_htonl>
 800a178:	4604      	mov	r4, r0
 800a17a:	f8b5 b008 	ldrh.w	fp, [r5, #8]
 800a17e:	68eb      	ldr	r3, [r5, #12]
 800a180:	8998      	ldrh	r0, [r3, #12]
 800a182:	f7fd fc81 	bl	8007a88 <lwip_htons>
 800a186:	683b      	ldr	r3, [r7, #0]
 800a188:	1ae4      	subs	r4, r4, r3
 800a18a:	445c      	add	r4, fp
 800a18c:	f010 0003 	ands.w	r0, r0, #3
 800a190:	bf18      	it	ne
 800a192:	2001      	movne	r0, #1
 800a194:	4404      	add	r4, r0
  while (seg_list != NULL &&
 800a196:	2c00      	cmp	r4, #0
 800a198:	dc1f      	bgt.n	800a1da <tcp_free_acked_segments+0xba>
    seg_list = seg_list->next;
 800a19a:	f8d5 b000 	ldr.w	fp, [r5]
    clen = pbuf_clen(next->p);
 800a19e:	6868      	ldr	r0, [r5, #4]
 800a1a0:	f7fe fc2a 	bl	80089f8 <pbuf_clen>
 800a1a4:	4604      	mov	r4, r0
    LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= clen));
 800a1a6:	f8b6 3066 	ldrh.w	r3, [r6, #102]	; 0x66
 800a1aa:	4283      	cmp	r3, r0
 800a1ac:	d3c6      	bcc.n	800a13c <tcp_free_acked_segments+0x1c>
    pcb->snd_queuelen = (u16_t)(pcb->snd_queuelen - clen);
 800a1ae:	f8b6 0066 	ldrh.w	r0, [r6, #102]	; 0x66
 800a1b2:	1b04      	subs	r4, r0, r4
 800a1b4:	f8a6 4066 	strh.w	r4, [r6, #102]	; 0x66
    recv_acked = (tcpwnd_size_t)(recv_acked + next->len);
 800a1b8:	4a0d      	ldr	r2, [pc, #52]	; (800a1f0 <tcp_free_acked_segments+0xd0>)
 800a1ba:	892b      	ldrh	r3, [r5, #8]
 800a1bc:	8811      	ldrh	r1, [r2, #0]
 800a1be:	440b      	add	r3, r1
 800a1c0:	8013      	strh	r3, [r2, #0]
    tcp_seg_free(next);
 800a1c2:	4628      	mov	r0, r5
 800a1c4:	f7fe ff5a 	bl	800907c <tcp_seg_free>
    if (pcb->snd_queuelen != 0) {
 800a1c8:	f8b6 3066 	ldrh.w	r3, [r6, #102]	; 0x66
 800a1cc:	2b00      	cmp	r3, #0
 800a1ce:	d0cb      	beq.n	800a168 <tcp_free_acked_segments+0x48>
      LWIP_ASSERT("tcp_receive: valid queue length",
 800a1d0:	f1bb 0f00 	cmp.w	fp, #0
 800a1d4:	d0ba      	beq.n	800a14c <tcp_free_acked_segments+0x2c>
 800a1d6:	465d      	mov	r5, fp
 800a1d8:	e7ca      	b.n	800a170 <tcp_free_acked_segments+0x50>
 800a1da:	46ab      	mov	fp, r5
  return seg_list;
 800a1dc:	e7b9      	b.n	800a152 <tcp_free_acked_segments+0x32>
 800a1de:	bf00      	nop
 800a1e0:	20010920 	.word	0x20010920
 800a1e4:	080103a4 	.word	0x080103a4
 800a1e8:	080119e8 	.word	0x080119e8
 800a1ec:	08011a88 	.word	0x08011a88
 800a1f0:	20010938 	.word	0x20010938
 800a1f4:	08011a60 	.word	0x08011a60

0800a1f8 <tcp_oos_insert_segment>:
{
 800a1f8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a1fc:	460c      	mov	r4, r1
  LWIP_ASSERT("tcp_oos_insert_segment: invalid cseg", cseg != NULL);
 800a1fe:	4605      	mov	r5, r0
 800a200:	b160      	cbz	r0, 800a21c <tcp_oos_insert_segment+0x24>
  if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 800a202:	68eb      	ldr	r3, [r5, #12]
 800a204:	8998      	ldrh	r0, [r3, #12]
 800a206:	f7fd fc3f 	bl	8007a88 <lwip_htons>
 800a20a:	f010 0f01 	tst.w	r0, #1
 800a20e:	d10d      	bne.n	800a22c <tcp_oos_insert_segment+0x34>
    while (next &&
 800a210:	2c00      	cmp	r4, #0
 800a212:	d035      	beq.n	800a280 <tcp_oos_insert_segment+0x88>
           TCP_SEQ_GEQ((seqno + cseg->len),
 800a214:	4e20      	ldr	r6, [pc, #128]	; (800a298 <tcp_oos_insert_segment+0xa0>)
        TCPH_SET_FLAG(cseg->tcphdr, TCP_FIN);
 800a216:	f04f 0901 	mov.w	r9, #1
 800a21a:	e014      	b.n	800a246 <tcp_oos_insert_segment+0x4e>
  LWIP_ASSERT("tcp_oos_insert_segment: invalid cseg", cseg != NULL);
 800a21c:	4b1f      	ldr	r3, [pc, #124]	; (800a29c <tcp_oos_insert_segment+0xa4>)
 800a21e:	f240 421f 	movw	r2, #1055	; 0x41f
 800a222:	491f      	ldr	r1, [pc, #124]	; (800a2a0 <tcp_oos_insert_segment+0xa8>)
 800a224:	481f      	ldr	r0, [pc, #124]	; (800a2a4 <tcp_oos_insert_segment+0xac>)
 800a226:	f004 ff65 	bl	800f0f4 <iprintf>
 800a22a:	e7ea      	b.n	800a202 <tcp_oos_insert_segment+0xa>
    tcp_segs_free(next);
 800a22c:	4620      	mov	r0, r4
 800a22e:	f7fe ff32 	bl	8009096 <tcp_segs_free>
    next = NULL;
 800a232:	2400      	movs	r4, #0
  cseg->next = next;
 800a234:	602c      	str	r4, [r5, #0]
}
 800a236:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
      next = next->next;
 800a23a:	6827      	ldr	r7, [r4, #0]
      tcp_seg_free(old_seg);
 800a23c:	4620      	mov	r0, r4
 800a23e:	f7fe ff1d 	bl	800907c <tcp_seg_free>
    while (next &&
 800a242:	b1ef      	cbz	r7, 800a280 <tcp_oos_insert_segment+0x88>
      next = next->next;
 800a244:	463c      	mov	r4, r7
           TCP_SEQ_GEQ((seqno + cseg->len),
 800a246:	f8d6 c000 	ldr.w	ip, [r6]
 800a24a:	68e1      	ldr	r1, [r4, #12]
 800a24c:	6848      	ldr	r0, [r1, #4]
 800a24e:	892b      	ldrh	r3, [r5, #8]
 800a250:	4463      	add	r3, ip
 800a252:	1a1b      	subs	r3, r3, r0
 800a254:	8922      	ldrh	r2, [r4, #8]
 800a256:	1a9a      	subs	r2, r3, r2
    while (next &&
 800a258:	2a00      	cmp	r2, #0
 800a25a:	db13      	blt.n	800a284 <tcp_oos_insert_segment+0x8c>
      if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 800a25c:	8988      	ldrh	r0, [r1, #12]
 800a25e:	f7fd fc13 	bl	8007a88 <lwip_htons>
 800a262:	f010 0f01 	tst.w	r0, #1
 800a266:	d0e8      	beq.n	800a23a <tcp_oos_insert_segment+0x42>
        TCPH_SET_FLAG(cseg->tcphdr, TCP_FIN);
 800a268:	68eb      	ldr	r3, [r5, #12]
 800a26a:	f8b3 800c 	ldrh.w	r8, [r3, #12]
 800a26e:	4648      	mov	r0, r9
 800a270:	f7fd fc0a 	bl	8007a88 <lwip_htons>
 800a274:	68eb      	ldr	r3, [r5, #12]
 800a276:	ea48 0800 	orr.w	r8, r8, r0
 800a27a:	f8a3 800c 	strh.w	r8, [r3, #12]
 800a27e:	e7dc      	b.n	800a23a <tcp_oos_insert_segment+0x42>
    next = NULL;
 800a280:	2400      	movs	r4, #0
 800a282:	e7d7      	b.n	800a234 <tcp_oos_insert_segment+0x3c>
    if (next &&
 800a284:	2b00      	cmp	r3, #0
 800a286:	ddd5      	ble.n	800a234 <tcp_oos_insert_segment+0x3c>
      cseg->len = (u16_t)(next->tcphdr->seqno - seqno);
 800a288:	eba0 010c 	sub.w	r1, r0, ip
 800a28c:	b289      	uxth	r1, r1
 800a28e:	8129      	strh	r1, [r5, #8]
      pbuf_realloc(cseg->p, cseg->len);
 800a290:	6868      	ldr	r0, [r5, #4]
 800a292:	f7fe fb51 	bl	8008938 <pbuf_realloc>
 800a296:	e7cd      	b.n	800a234 <tcp_oos_insert_segment+0x3c>
 800a298:	20010944 	.word	0x20010944
 800a29c:	080119e8 	.word	0x080119e8
 800a2a0:	08011aa8 	.word	0x08011aa8
 800a2a4:	080103a4 	.word	0x080103a4

0800a2a8 <tcp_receive>:
{
 800a2a8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  LWIP_ASSERT("tcp_receive: invalid pcb", pcb != NULL);
 800a2ac:	4604      	mov	r4, r0
 800a2ae:	2800      	cmp	r0, #0
 800a2b0:	d066      	beq.n	800a380 <tcp_receive+0xd8>
  LWIP_ASSERT("tcp_receive: wrong state", pcb->state >= ESTABLISHED);
 800a2b2:	7d23      	ldrb	r3, [r4, #20]
 800a2b4:	2b03      	cmp	r3, #3
 800a2b6:	d96b      	bls.n	800a390 <tcp_receive+0xe8>
  if (flags & TCP_ACK) {
 800a2b8:	4ba4      	ldr	r3, [pc, #656]	; (800a54c <tcp_receive+0x2a4>)
 800a2ba:	781b      	ldrb	r3, [r3, #0]
 800a2bc:	f013 0f10 	tst.w	r3, #16
 800a2c0:	d03a      	beq.n	800a338 <tcp_receive+0x90>
    right_wnd_edge = pcb->snd_wnd + pcb->snd_wl2;
 800a2c2:	f8b4 5060 	ldrh.w	r5, [r4, #96]	; 0x60
 800a2c6:	6da0      	ldr	r0, [r4, #88]	; 0x58
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 800a2c8:	6d62      	ldr	r2, [r4, #84]	; 0x54
 800a2ca:	4ba1      	ldr	r3, [pc, #644]	; (800a550 <tcp_receive+0x2a8>)
 800a2cc:	681b      	ldr	r3, [r3, #0]
 800a2ce:	1ad1      	subs	r1, r2, r3
 800a2d0:	2900      	cmp	r1, #0
 800a2d2:	db0a      	blt.n	800a2ea <tcp_receive+0x42>
 800a2d4:	429a      	cmp	r2, r3
 800a2d6:	d063      	beq.n	800a3a0 <tcp_receive+0xf8>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 800a2d8:	4a9e      	ldr	r2, [pc, #632]	; (800a554 <tcp_receive+0x2ac>)
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 800a2da:	6812      	ldr	r2, [r2, #0]
 800a2dc:	4290      	cmp	r0, r2
 800a2de:	d114      	bne.n	800a30a <tcp_receive+0x62>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 800a2e0:	4a9d      	ldr	r2, [pc, #628]	; (800a558 <tcp_receive+0x2b0>)
 800a2e2:	6812      	ldr	r2, [r2, #0]
 800a2e4:	89d2      	ldrh	r2, [r2, #14]
 800a2e6:	42aa      	cmp	r2, r5
 800a2e8:	d90f      	bls.n	800a30a <tcp_receive+0x62>
      pcb->snd_wnd = SND_WND_SCALE(pcb, tcphdr->wnd);
 800a2ea:	4a9b      	ldr	r2, [pc, #620]	; (800a558 <tcp_receive+0x2b0>)
 800a2ec:	6812      	ldr	r2, [r2, #0]
 800a2ee:	89d2      	ldrh	r2, [r2, #14]
 800a2f0:	b291      	uxth	r1, r2
 800a2f2:	f8a4 2060 	strh.w	r2, [r4, #96]	; 0x60
      if (pcb->snd_wnd_max < pcb->snd_wnd) {
 800a2f6:	f8b4 6062 	ldrh.w	r6, [r4, #98]	; 0x62
 800a2fa:	428e      	cmp	r6, r1
        pcb->snd_wnd_max = pcb->snd_wnd;
 800a2fc:	bf38      	it	cc
 800a2fe:	f8a4 2062 	strhcc.w	r2, [r4, #98]	; 0x62
      pcb->snd_wl1 = seqno;
 800a302:	6563      	str	r3, [r4, #84]	; 0x54
      pcb->snd_wl2 = ackno;
 800a304:	4b93      	ldr	r3, [pc, #588]	; (800a554 <tcp_receive+0x2ac>)
 800a306:	681b      	ldr	r3, [r3, #0]
 800a308:	65a3      	str	r3, [r4, #88]	; 0x58
    if (TCP_SEQ_LEQ(ackno, pcb->lastack)) {
 800a30a:	4b92      	ldr	r3, [pc, #584]	; (800a554 <tcp_receive+0x2ac>)
 800a30c:	681b      	ldr	r3, [r3, #0]
 800a30e:	6c61      	ldr	r1, [r4, #68]	; 0x44
 800a310:	1a5a      	subs	r2, r3, r1
 800a312:	2a00      	cmp	r2, #0
 800a314:	dd4a      	ble.n	800a3ac <tcp_receive+0x104>
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800a316:	6d22      	ldr	r2, [r4, #80]	; 0x50
 800a318:	1a9a      	subs	r2, r3, r2
 800a31a:	2a00      	cmp	r2, #0
 800a31c:	f340 808a 	ble.w	800a434 <tcp_receive+0x18c>
      tcp_send_empty_ack(pcb);
 800a320:	4620      	mov	r0, r4
 800a322:	f002 fa4d 	bl	800c7c0 <tcp_send_empty_ack>
    if (pcb->rttest && TCP_SEQ_LT(pcb->rtseq, ackno)) {
 800a326:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800a328:	b133      	cbz	r3, 800a338 <tcp_receive+0x90>
 800a32a:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 800a32c:	4989      	ldr	r1, [pc, #548]	; (800a554 <tcp_receive+0x2ac>)
 800a32e:	6809      	ldr	r1, [r1, #0]
 800a330:	1a52      	subs	r2, r2, r1
 800a332:	2a00      	cmp	r2, #0
 800a334:	f2c0 8131 	blt.w	800a59a <tcp_receive+0x2f2>
  if ((tcplen > 0) && (pcb->state < CLOSE_WAIT)) {
 800a338:	4b88      	ldr	r3, [pc, #544]	; (800a55c <tcp_receive+0x2b4>)
 800a33a:	881a      	ldrh	r2, [r3, #0]
 800a33c:	2a00      	cmp	r2, #0
 800a33e:	d058      	beq.n	800a3f2 <tcp_receive+0x14a>
 800a340:	7d23      	ldrb	r3, [r4, #20]
 800a342:	2b06      	cmp	r3, #6
 800a344:	d855      	bhi.n	800a3f2 <tcp_receive+0x14a>
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 800a346:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800a348:	4b81      	ldr	r3, [pc, #516]	; (800a550 <tcp_receive+0x2a8>)
 800a34a:	681b      	ldr	r3, [r3, #0]
 800a34c:	1ace      	subs	r6, r1, r3
 800a34e:	2e01      	cmp	r6, #1
 800a350:	d406      	bmi.n	800a360 <tcp_receive+0xb8>
 800a352:	f1c3 0001 	rsb	r0, r3, #1
 800a356:	1a82      	subs	r2, r0, r2
 800a358:	440a      	add	r2, r1
 800a35a:	2a00      	cmp	r2, #0
 800a35c:	f340 813f 	ble.w	800a5de <tcp_receive+0x336>
      if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
 800a360:	1a5a      	subs	r2, r3, r1
 800a362:	2a00      	cmp	r2, #0
 800a364:	f2c0 8185 	blt.w	800a672 <tcp_receive+0x3ca>
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 800a368:	8d22      	ldrh	r2, [r4, #40]	; 0x28
 800a36a:	f1c2 0201 	rsb	r2, r2, #1
 800a36e:	441a      	add	r2, r3
 800a370:	1a52      	subs	r2, r2, r1
 800a372:	2a00      	cmp	r2, #0
 800a374:	f340 8182 	ble.w	800a67c <tcp_receive+0x3d4>
      tcp_send_empty_ack(pcb);
 800a378:	4620      	mov	r0, r4
 800a37a:	f002 fa21 	bl	800c7c0 <tcp_send_empty_ack>
 800a37e:	e048      	b.n	800a412 <tcp_receive+0x16a>
  LWIP_ASSERT("tcp_receive: invalid pcb", pcb != NULL);
 800a380:	4b77      	ldr	r3, [pc, #476]	; (800a560 <tcp_receive+0x2b8>)
 800a382:	f240 427b 	movw	r2, #1147	; 0x47b
 800a386:	4977      	ldr	r1, [pc, #476]	; (800a564 <tcp_receive+0x2bc>)
 800a388:	4877      	ldr	r0, [pc, #476]	; (800a568 <tcp_receive+0x2c0>)
 800a38a:	f004 feb3 	bl	800f0f4 <iprintf>
 800a38e:	e790      	b.n	800a2b2 <tcp_receive+0xa>
  LWIP_ASSERT("tcp_receive: wrong state", pcb->state >= ESTABLISHED);
 800a390:	4b73      	ldr	r3, [pc, #460]	; (800a560 <tcp_receive+0x2b8>)
 800a392:	f240 427c 	movw	r2, #1148	; 0x47c
 800a396:	4975      	ldr	r1, [pc, #468]	; (800a56c <tcp_receive+0x2c4>)
 800a398:	4873      	ldr	r0, [pc, #460]	; (800a568 <tcp_receive+0x2c0>)
 800a39a:	f004 feab 	bl	800f0f4 <iprintf>
 800a39e:	e78b      	b.n	800a2b8 <tcp_receive+0x10>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 800a3a0:	4a6c      	ldr	r2, [pc, #432]	; (800a554 <tcp_receive+0x2ac>)
 800a3a2:	6812      	ldr	r2, [r2, #0]
 800a3a4:	1a82      	subs	r2, r0, r2
 800a3a6:	2a00      	cmp	r2, #0
 800a3a8:	da96      	bge.n	800a2d8 <tcp_receive+0x30>
 800a3aa:	e79e      	b.n	800a2ea <tcp_receive+0x42>
      if (tcplen == 0) {
 800a3ac:	4a6b      	ldr	r2, [pc, #428]	; (800a55c <tcp_receive+0x2b4>)
 800a3ae:	8812      	ldrh	r2, [r2, #0]
 800a3b0:	b932      	cbnz	r2, 800a3c0 <tcp_receive+0x118>
        if (pcb->snd_wl2 + pcb->snd_wnd == right_wnd_edge) {
 800a3b2:	f8b4 2060 	ldrh.w	r2, [r4, #96]	; 0x60
 800a3b6:	6da6      	ldr	r6, [r4, #88]	; 0x58
 800a3b8:	4432      	add	r2, r6
    right_wnd_edge = pcb->snd_wnd + pcb->snd_wl2;
 800a3ba:	4428      	add	r0, r5
        if (pcb->snd_wl2 + pcb->snd_wnd == right_wnd_edge) {
 800a3bc:	4282      	cmp	r2, r0
 800a3be:	d003      	beq.n	800a3c8 <tcp_receive+0x120>
        pcb->dupacks = 0;
 800a3c0:	2300      	movs	r3, #0
 800a3c2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a3c6:	e7ae      	b.n	800a326 <tcp_receive+0x7e>
          if (pcb->rtime >= 0) {
 800a3c8:	f9b4 2030 	ldrsh.w	r2, [r4, #48]	; 0x30
 800a3cc:	2a00      	cmp	r2, #0
 800a3ce:	dbf7      	blt.n	800a3c0 <tcp_receive+0x118>
            if (pcb->lastack == ackno) {
 800a3d0:	428b      	cmp	r3, r1
 800a3d2:	d1f5      	bne.n	800a3c0 <tcp_receive+0x118>
              if ((u8_t)(pcb->dupacks + 1) > pcb->dupacks) {
 800a3d4:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 800a3d8:	2bff      	cmp	r3, #255	; 0xff
 800a3da:	d01c      	beq.n	800a416 <tcp_receive+0x16e>
                ++pcb->dupacks;
 800a3dc:	3301      	adds	r3, #1
 800a3de:	b2db      	uxtb	r3, r3
 800a3e0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
              if (pcb->dupacks > 3) {
 800a3e4:	2b03      	cmp	r3, #3
 800a3e6:	d816      	bhi.n	800a416 <tcp_receive+0x16e>
              if (pcb->dupacks >= 3) {
 800a3e8:	2b03      	cmp	r3, #3
 800a3ea:	d01f      	beq.n	800a42c <tcp_receive+0x184>
    if (pcb->rttest && TCP_SEQ_LT(pcb->rtseq, ackno)) {
 800a3ec:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800a3ee:	2b00      	cmp	r3, #0
 800a3f0:	d19b      	bne.n	800a32a <tcp_receive+0x82>
    if (!TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
 800a3f2:	4b57      	ldr	r3, [pc, #348]	; (800a550 <tcp_receive+0x2a8>)
 800a3f4:	681b      	ldr	r3, [r3, #0]
 800a3f6:	6a62      	ldr	r2, [r4, #36]	; 0x24
 800a3f8:	1a99      	subs	r1, r3, r2
 800a3fa:	2900      	cmp	r1, #0
 800a3fc:	db05      	blt.n	800a40a <tcp_receive+0x162>
 800a3fe:	3301      	adds	r3, #1
 800a400:	1a9b      	subs	r3, r3, r2
 800a402:	8d22      	ldrh	r2, [r4, #40]	; 0x28
 800a404:	1a9b      	subs	r3, r3, r2
 800a406:	2b00      	cmp	r3, #0
 800a408:	dd03      	ble.n	800a412 <tcp_receive+0x16a>
      tcp_ack_now(pcb);
 800a40a:	8b63      	ldrh	r3, [r4, #26]
 800a40c:	f043 0302 	orr.w	r3, r3, #2
 800a410:	8363      	strh	r3, [r4, #26]
}
 800a412:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
                TCP_WND_INC(pcb->cwnd, pcb->mss);
 800a416:	f8b4 2048 	ldrh.w	r2, [r4, #72]	; 0x48
 800a41a:	8e63      	ldrh	r3, [r4, #50]	; 0x32
 800a41c:	4413      	add	r3, r2
 800a41e:	b29b      	uxth	r3, r3
 800a420:	429a      	cmp	r2, r3
 800a422:	bf88      	it	hi
 800a424:	f64f 73ff 	movwhi	r3, #65535	; 0xffff
 800a428:	f8a4 3048 	strh.w	r3, [r4, #72]	; 0x48
                tcp_rexmit_fast(pcb);
 800a42c:	4620      	mov	r0, r4
 800a42e:	f002 f943 	bl	800c6b8 <tcp_rexmit_fast>
      if (!found_dupack) {
 800a432:	e778      	b.n	800a326 <tcp_receive+0x7e>
      if (pcb->flags & TF_INFR) {
 800a434:	8b62      	ldrh	r2, [r4, #26]
 800a436:	f012 0f04 	tst.w	r2, #4
 800a43a:	d009      	beq.n	800a450 <tcp_receive+0x1a8>
        tcp_clear_flags(pcb, TF_INFR);
 800a43c:	f022 0204 	bic.w	r2, r2, #4
 800a440:	8362      	strh	r2, [r4, #26]
        pcb->cwnd = pcb->ssthresh;
 800a442:	f8b4 204a 	ldrh.w	r2, [r4, #74]	; 0x4a
 800a446:	f8a4 2048 	strh.w	r2, [r4, #72]	; 0x48
        pcb->bytes_acked = 0;
 800a44a:	2200      	movs	r2, #0
 800a44c:	f8a4 206a 	strh.w	r2, [r4, #106]	; 0x6a
      pcb->nrtx = 0;
 800a450:	2000      	movs	r0, #0
 800a452:	f884 0042 	strb.w	r0, [r4, #66]	; 0x42
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 800a456:	f9b4 503c 	ldrsh.w	r5, [r4, #60]	; 0x3c
 800a45a:	8fe2      	ldrh	r2, [r4, #62]	; 0x3e
 800a45c:	eb02 02e5 	add.w	r2, r2, r5, asr #3
 800a460:	f8a4 2040 	strh.w	r2, [r4, #64]	; 0x40
      pcb->dupacks = 0;
 800a464:	f884 0043 	strb.w	r0, [r4, #67]	; 0x43
      pcb->lastack = ackno;
 800a468:	6463      	str	r3, [r4, #68]	; 0x44
      if (pcb->state >= ESTABLISHED) {
 800a46a:	7d22      	ldrb	r2, [r4, #20]
 800a46c:	2a03      	cmp	r2, #3
 800a46e:	d91c      	bls.n	800a4aa <tcp_receive+0x202>
      acked = (tcpwnd_size_t)(ackno - pcb->lastack);
 800a470:	1a5b      	subs	r3, r3, r1
 800a472:	b29b      	uxth	r3, r3
        if (pcb->cwnd < pcb->ssthresh) {
 800a474:	f8b4 2048 	ldrh.w	r2, [r4, #72]	; 0x48
 800a478:	f8b4 104a 	ldrh.w	r1, [r4, #74]	; 0x4a
 800a47c:	4291      	cmp	r1, r2
 800a47e:	d948      	bls.n	800a512 <tcp_receive+0x26a>
          u8_t num_seg = (pcb->flags & TF_RTO) ? 1 : 2;
 800a480:	8b61      	ldrh	r1, [r4, #26]
 800a482:	f411 6f00 	tst.w	r1, #2048	; 0x800
 800a486:	bf14      	ite	ne
 800a488:	2001      	movne	r0, #1
 800a48a:	2002      	moveq	r0, #2
          increase = LWIP_MIN(acked, (tcpwnd_size_t)(num_seg * pcb->mss));
 800a48c:	8e61      	ldrh	r1, [r4, #50]	; 0x32
 800a48e:	fb11 f100 	smulbb	r1, r1, r0
 800a492:	b289      	uxth	r1, r1
          TCP_WND_INC(pcb->cwnd, increase);
 800a494:	4299      	cmp	r1, r3
 800a496:	bf94      	ite	ls
 800a498:	1850      	addls	r0, r2, r1
 800a49a:	18d0      	addhi	r0, r2, r3
 800a49c:	b283      	uxth	r3, r0
 800a49e:	429a      	cmp	r2, r3
 800a4a0:	bf88      	it	hi
 800a4a2:	f64f 73ff 	movwhi	r3, #65535	; 0xffff
 800a4a6:	f8a4 3048 	strh.w	r3, [r4, #72]	; 0x48
      pcb->unacked = tcp_free_acked_segments(pcb, pcb->unacked, "unacked", pcb->unsent);
 800a4aa:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 800a4ac:	4a30      	ldr	r2, [pc, #192]	; (800a570 <tcp_receive+0x2c8>)
 800a4ae:	6f21      	ldr	r1, [r4, #112]	; 0x70
 800a4b0:	4620      	mov	r0, r4
 800a4b2:	f7ff fe35 	bl	800a120 <tcp_free_acked_segments>
 800a4b6:	4603      	mov	r3, r0
 800a4b8:	6720      	str	r0, [r4, #112]	; 0x70
      pcb->unsent = tcp_free_acked_segments(pcb, pcb->unsent, "unsent", pcb->unacked);
 800a4ba:	4a2e      	ldr	r2, [pc, #184]	; (800a574 <tcp_receive+0x2cc>)
 800a4bc:	6ee1      	ldr	r1, [r4, #108]	; 0x6c
 800a4be:	4620      	mov	r0, r4
 800a4c0:	f7ff fe2e 	bl	800a120 <tcp_free_acked_segments>
 800a4c4:	66e0      	str	r0, [r4, #108]	; 0x6c
      if (pcb->unacked == NULL) {
 800a4c6:	6f22      	ldr	r2, [r4, #112]	; 0x70
 800a4c8:	fab2 f382 	clz	r3, r2
 800a4cc:	095b      	lsrs	r3, r3, #5
 800a4ce:	425b      	negs	r3, r3
 800a4d0:	8623      	strh	r3, [r4, #48]	; 0x30
      pcb->polltmr = 0;
 800a4d2:	2300      	movs	r3, #0
 800a4d4:	7723      	strb	r3, [r4, #28]
      if (pcb->unsent == NULL) {
 800a4d6:	2800      	cmp	r0, #0
 800a4d8:	d035      	beq.n	800a546 <tcp_receive+0x29e>
      pcb->snd_buf = (tcpwnd_size_t)(pcb->snd_buf + recv_acked);
 800a4da:	f8b4 3064 	ldrh.w	r3, [r4, #100]	; 0x64
 800a4de:	4926      	ldr	r1, [pc, #152]	; (800a578 <tcp_receive+0x2d0>)
 800a4e0:	8809      	ldrh	r1, [r1, #0]
 800a4e2:	440b      	add	r3, r1
 800a4e4:	f8a4 3064 	strh.w	r3, [r4, #100]	; 0x64
      if (pcb->flags & TF_RTO) {
 800a4e8:	8b63      	ldrh	r3, [r4, #26]
 800a4ea:	f413 6f00 	tst.w	r3, #2048	; 0x800
 800a4ee:	f43f af1a 	beq.w	800a326 <tcp_receive+0x7e>
        if (pcb->unacked == NULL) {
 800a4f2:	2a00      	cmp	r2, #0
 800a4f4:	d042      	beq.n	800a57c <tcp_receive+0x2d4>
        } else if (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unacked->tcphdr->seqno))) {
 800a4f6:	6ce5      	ldr	r5, [r4, #76]	; 0x4c
 800a4f8:	68d3      	ldr	r3, [r2, #12]
 800a4fa:	6858      	ldr	r0, [r3, #4]
 800a4fc:	f7fd fac9 	bl	8007a92 <lwip_htonl>
 800a500:	1a2d      	subs	r5, r5, r0
 800a502:	2d00      	cmp	r5, #0
 800a504:	f73f af0f 	bgt.w	800a326 <tcp_receive+0x7e>
          tcp_clear_flags(pcb, TF_RTO);
 800a508:	8b63      	ldrh	r3, [r4, #26]
 800a50a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800a50e:	8363      	strh	r3, [r4, #26]
 800a510:	e709      	b.n	800a326 <tcp_receive+0x7e>
          TCP_WND_INC(pcb->bytes_acked, acked);
 800a512:	f8b4 106a 	ldrh.w	r1, [r4, #106]	; 0x6a
 800a516:	440b      	add	r3, r1
 800a518:	b29b      	uxth	r3, r3
 800a51a:	4299      	cmp	r1, r3
 800a51c:	d804      	bhi.n	800a528 <tcp_receive+0x280>
          if (pcb->bytes_acked >= pcb->cwnd) {
 800a51e:	429a      	cmp	r2, r3
 800a520:	d904      	bls.n	800a52c <tcp_receive+0x284>
 800a522:	f8a4 306a 	strh.w	r3, [r4, #106]	; 0x6a
 800a526:	e7c0      	b.n	800a4aa <tcp_receive+0x202>
          TCP_WND_INC(pcb->bytes_acked, acked);
 800a528:	f64f 73ff 	movw	r3, #65535	; 0xffff
            pcb->bytes_acked = (tcpwnd_size_t)(pcb->bytes_acked - pcb->cwnd);
 800a52c:	1a9b      	subs	r3, r3, r2
 800a52e:	f8a4 306a 	strh.w	r3, [r4, #106]	; 0x6a
            TCP_WND_INC(pcb->cwnd, pcb->mss);
 800a532:	8e63      	ldrh	r3, [r4, #50]	; 0x32
 800a534:	4413      	add	r3, r2
 800a536:	b29b      	uxth	r3, r3
 800a538:	429a      	cmp	r2, r3
 800a53a:	bf88      	it	hi
 800a53c:	f64f 73ff 	movwhi	r3, #65535	; 0xffff
 800a540:	f8a4 3048 	strh.w	r3, [r4, #72]	; 0x48
 800a544:	e7b1      	b.n	800a4aa <tcp_receive+0x202>
        pcb->unsent_oversize = 0;
 800a546:	f8a4 3068 	strh.w	r3, [r4, #104]	; 0x68
 800a54a:	e7c6      	b.n	800a4da <tcp_receive+0x232>
 800a54c:	20010924 	.word	0x20010924
 800a550:	20010944 	.word	0x20010944
 800a554:	20010920 	.word	0x20010920
 800a558:	20010950 	.word	0x20010950
 800a55c:	2001095e 	.word	0x2001095e
 800a560:	080119e8 	.word	0x080119e8
 800a564:	08011ad0 	.word	0x08011ad0
 800a568:	080103a4 	.word	0x080103a4
 800a56c:	08011aec 	.word	0x08011aec
 800a570:	08011b08 	.word	0x08011b08
 800a574:	08011b10 	.word	0x08011b10
 800a578:	20010938 	.word	0x20010938
          if ((pcb->unsent == NULL) ||
 800a57c:	b140      	cbz	r0, 800a590 <tcp_receive+0x2e8>
              (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unsent->tcphdr->seqno)))) {
 800a57e:	6ce5      	ldr	r5, [r4, #76]	; 0x4c
 800a580:	68c3      	ldr	r3, [r0, #12]
 800a582:	6858      	ldr	r0, [r3, #4]
 800a584:	f7fd fa85 	bl	8007a92 <lwip_htonl>
 800a588:	1a2d      	subs	r5, r5, r0
          if ((pcb->unsent == NULL) ||
 800a58a:	2d00      	cmp	r5, #0
 800a58c:	f73f aecb 	bgt.w	800a326 <tcp_receive+0x7e>
            tcp_clear_flags(pcb, TF_RTO);
 800a590:	8b63      	ldrh	r3, [r4, #26]
 800a592:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800a596:	8363      	strh	r3, [r4, #26]
 800a598:	e6c5      	b.n	800a326 <tcp_receive+0x7e>
      m = (s16_t)(tcp_ticks - pcb->rttest);
 800a59a:	4a9a      	ldr	r2, [pc, #616]	; (800a804 <tcp_receive+0x55c>)
 800a59c:	8816      	ldrh	r6, [r2, #0]
 800a59e:	b29b      	uxth	r3, r3
      m = (s16_t)(m - (pcb->sa >> 3));
 800a5a0:	f9b4 503c 	ldrsh.w	r5, [r4, #60]	; 0x3c
 800a5a4:	f3c5 02cf 	ubfx	r2, r5, #3, #16
 800a5a8:	1ab1      	subs	r1, r6, r2
 800a5aa:	1ac9      	subs	r1, r1, r3
 800a5ac:	b208      	sxth	r0, r1
      pcb->sa = (s16_t)(pcb->sa + m);
 800a5ae:	fa15 f181 	uxtah	r1, r5, r1
 800a5b2:	b209      	sxth	r1, r1
 800a5b4:	87a1      	strh	r1, [r4, #60]	; 0x3c
      if (m < 0) {
 800a5b6:	2800      	cmp	r0, #0
 800a5b8:	db0d      	blt.n	800a5d6 <tcp_receive+0x32e>
      m = (s16_t)(m - (pcb->sv >> 2));
 800a5ba:	f9b4 203e 	ldrsh.w	r2, [r4, #62]	; 0x3e
      pcb->sv = (s16_t)(pcb->sv + m);
 800a5be:	eba2 02a2 	sub.w	r2, r2, r2, asr #2
 800a5c2:	1813      	adds	r3, r2, r0
 800a5c4:	b29b      	uxth	r3, r3
 800a5c6:	87e3      	strh	r3, [r4, #62]	; 0x3e
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 800a5c8:	eb03 03e1 	add.w	r3, r3, r1, asr #3
 800a5cc:	f8a4 3040 	strh.w	r3, [r4, #64]	; 0x40
      pcb->rttest = 0;
 800a5d0:	2300      	movs	r3, #0
 800a5d2:	6363      	str	r3, [r4, #52]	; 0x34
 800a5d4:	e6b0      	b.n	800a338 <tcp_receive+0x90>
        m = (s16_t) - m;
 800a5d6:	1b92      	subs	r2, r2, r6
 800a5d8:	4413      	add	r3, r2
 800a5da:	b218      	sxth	r0, r3
 800a5dc:	e7ed      	b.n	800a5ba <tcp_receive+0x312>
      struct pbuf *p = inseg.p;
 800a5de:	4b8a      	ldr	r3, [pc, #552]	; (800a808 <tcp_receive+0x560>)
 800a5e0:	685d      	ldr	r5, [r3, #4]
      LWIP_ASSERT("inseg.p != NULL", inseg.p);
 800a5e2:	2d00      	cmp	r5, #0
 800a5e4:	d02d      	beq.n	800a642 <tcp_receive+0x39a>
      LWIP_ASSERT("insane offset!", (off32 < 0xffff));
 800a5e6:	f64f 73fe 	movw	r3, #65534	; 0xfffe
 800a5ea:	429e      	cmp	r6, r3
 800a5ec:	d831      	bhi.n	800a652 <tcp_receive+0x3aa>
      off = (u16_t)off32;
 800a5ee:	b2b6      	uxth	r6, r6
      LWIP_ASSERT("pbuf too short!", (((s32_t)inseg.p->tot_len) >= off));
 800a5f0:	4b85      	ldr	r3, [pc, #532]	; (800a808 <tcp_receive+0x560>)
 800a5f2:	685b      	ldr	r3, [r3, #4]
 800a5f4:	891b      	ldrh	r3, [r3, #8]
 800a5f6:	42b3      	cmp	r3, r6
 800a5f8:	d333      	bcc.n	800a662 <tcp_receive+0x3ba>
      inseg.len -= off;
 800a5fa:	4b83      	ldr	r3, [pc, #524]	; (800a808 <tcp_receive+0x560>)
 800a5fc:	891a      	ldrh	r2, [r3, #8]
 800a5fe:	1b92      	subs	r2, r2, r6
 800a600:	811a      	strh	r2, [r3, #8]
      new_tot_len = (u16_t)(inseg.p->tot_len - off);
 800a602:	685b      	ldr	r3, [r3, #4]
 800a604:	891a      	ldrh	r2, [r3, #8]
 800a606:	1b92      	subs	r2, r2, r6
 800a608:	b292      	uxth	r2, r2
      while (p->len < off) {
 800a60a:	896b      	ldrh	r3, [r5, #10]
 800a60c:	429e      	cmp	r6, r3
 800a60e:	d908      	bls.n	800a622 <tcp_receive+0x37a>
        p->len = 0;
 800a610:	2100      	movs	r1, #0
        off -= p->len;
 800a612:	1af3      	subs	r3, r6, r3
 800a614:	b29e      	uxth	r6, r3
        p->tot_len = new_tot_len;
 800a616:	812a      	strh	r2, [r5, #8]
        p->len = 0;
 800a618:	8169      	strh	r1, [r5, #10]
        p = p->next;
 800a61a:	682d      	ldr	r5, [r5, #0]
      while (p->len < off) {
 800a61c:	896b      	ldrh	r3, [r5, #10]
 800a61e:	42b3      	cmp	r3, r6
 800a620:	d3f7      	bcc.n	800a612 <tcp_receive+0x36a>
      pbuf_remove_header(p, off);
 800a622:	4631      	mov	r1, r6
 800a624:	4628      	mov	r0, r5
 800a626:	f7fe f82f 	bl	8008688 <pbuf_remove_header>
      inseg.tcphdr->seqno = seqno = pcb->rcv_nxt;
 800a62a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a62c:	4a77      	ldr	r2, [pc, #476]	; (800a80c <tcp_receive+0x564>)
 800a62e:	6013      	str	r3, [r2, #0]
 800a630:	4a75      	ldr	r2, [pc, #468]	; (800a808 <tcp_receive+0x560>)
 800a632:	68d2      	ldr	r2, [r2, #12]
 800a634:	6053      	str	r3, [r2, #4]
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 800a636:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800a638:	1a5a      	subs	r2, r3, r1
 800a63a:	2a00      	cmp	r2, #0
 800a63c:	f6bf ae94 	bge.w	800a368 <tcp_receive+0xc0>
 800a640:	e69a      	b.n	800a378 <tcp_receive+0xd0>
      LWIP_ASSERT("inseg.p != NULL", inseg.p);
 800a642:	4b73      	ldr	r3, [pc, #460]	; (800a810 <tcp_receive+0x568>)
 800a644:	f240 5294 	movw	r2, #1428	; 0x594
 800a648:	4972      	ldr	r1, [pc, #456]	; (800a814 <tcp_receive+0x56c>)
 800a64a:	4873      	ldr	r0, [pc, #460]	; (800a818 <tcp_receive+0x570>)
 800a64c:	f004 fd52 	bl	800f0f4 <iprintf>
 800a650:	e7c9      	b.n	800a5e6 <tcp_receive+0x33e>
      LWIP_ASSERT("insane offset!", (off32 < 0xffff));
 800a652:	4b6f      	ldr	r3, [pc, #444]	; (800a810 <tcp_receive+0x568>)
 800a654:	f240 5295 	movw	r2, #1429	; 0x595
 800a658:	4970      	ldr	r1, [pc, #448]	; (800a81c <tcp_receive+0x574>)
 800a65a:	486f      	ldr	r0, [pc, #444]	; (800a818 <tcp_receive+0x570>)
 800a65c:	f004 fd4a 	bl	800f0f4 <iprintf>
 800a660:	e7c5      	b.n	800a5ee <tcp_receive+0x346>
      LWIP_ASSERT("pbuf too short!", (((s32_t)inseg.p->tot_len) >= off));
 800a662:	4b6b      	ldr	r3, [pc, #428]	; (800a810 <tcp_receive+0x568>)
 800a664:	f240 5297 	movw	r2, #1431	; 0x597
 800a668:	496d      	ldr	r1, [pc, #436]	; (800a820 <tcp_receive+0x578>)
 800a66a:	486b      	ldr	r0, [pc, #428]	; (800a818 <tcp_receive+0x570>)
 800a66c:	f004 fd42 	bl	800f0f4 <iprintf>
 800a670:	e7c3      	b.n	800a5fa <tcp_receive+0x352>
        tcp_ack_now(pcb);
 800a672:	8b63      	ldrh	r3, [r4, #26]
 800a674:	f043 0302 	orr.w	r3, r3, #2
 800a678:	8363      	strh	r3, [r4, #26]
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 800a67a:	e67d      	b.n	800a378 <tcp_receive+0xd0>
      if (pcb->rcv_nxt == seqno) {
 800a67c:	428b      	cmp	r3, r1
 800a67e:	d008      	beq.n	800a692 <tcp_receive+0x3ea>
        if (pcb->ooseq == NULL) {
 800a680:	6f65      	ldr	r5, [r4, #116]	; 0x74
 800a682:	2d00      	cmp	r5, #0
 800a684:	f000 817a 	beq.w	800a97c <tcp_receive+0x6d4>
          struct tcp_seg *next, *prev = NULL;
 800a688:	2600      	movs	r6, #0
                if (TCP_SEQ_BETWEEN(seqno, prev->tcphdr->seqno + 1, next->tcphdr->seqno - 1)) {
 800a68a:	1e5f      	subs	r7, r3, #1
 800a68c:	f103 0c01 	add.w	ip, r3, #1
 800a690:	e195      	b.n	800a9be <tcp_receive+0x716>
        tcplen = TCP_TCPLEN(&inseg);
 800a692:	4b5d      	ldr	r3, [pc, #372]	; (800a808 <tcp_receive+0x560>)
 800a694:	891d      	ldrh	r5, [r3, #8]
 800a696:	68db      	ldr	r3, [r3, #12]
 800a698:	8998      	ldrh	r0, [r3, #12]
 800a69a:	f7fd f9f5 	bl	8007a88 <lwip_htons>
 800a69e:	f010 0303 	ands.w	r3, r0, #3
 800a6a2:	bf18      	it	ne
 800a6a4:	2301      	movne	r3, #1
 800a6a6:	442b      	add	r3, r5
 800a6a8:	b29b      	uxth	r3, r3
 800a6aa:	4a5e      	ldr	r2, [pc, #376]	; (800a824 <tcp_receive+0x57c>)
 800a6ac:	8013      	strh	r3, [r2, #0]
        if (tcplen > pcb->rcv_wnd) {
 800a6ae:	8d22      	ldrh	r2, [r4, #40]	; 0x28
 800a6b0:	429a      	cmp	r2, r3
 800a6b2:	d317      	bcc.n	800a6e4 <tcp_receive+0x43c>
        if (pcb->ooseq != NULL) {
 800a6b4:	6f63      	ldr	r3, [r4, #116]	; 0x74
 800a6b6:	2b00      	cmp	r3, #0
 800a6b8:	f000 823e 	beq.w	800ab38 <tcp_receive+0x890>
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 800a6bc:	4b52      	ldr	r3, [pc, #328]	; (800a808 <tcp_receive+0x560>)
 800a6be:	68db      	ldr	r3, [r3, #12]
 800a6c0:	8998      	ldrh	r0, [r3, #12]
 800a6c2:	f7fd f9e1 	bl	8007a88 <lwip_htons>
 800a6c6:	f010 0f01 	tst.w	r0, #1
 800a6ca:	d053      	beq.n	800a774 <tcp_receive+0x4cc>
            while (pcb->ooseq != NULL) {
 800a6cc:	6f60      	ldr	r0, [r4, #116]	; 0x74
 800a6ce:	2800      	cmp	r0, #0
 800a6d0:	f000 8232 	beq.w	800ab38 <tcp_receive+0x890>
              pcb->ooseq = pcb->ooseq->next;
 800a6d4:	6803      	ldr	r3, [r0, #0]
 800a6d6:	6763      	str	r3, [r4, #116]	; 0x74
              tcp_seg_free(old_ooseq);
 800a6d8:	f7fe fcd0 	bl	800907c <tcp_seg_free>
            while (pcb->ooseq != NULL) {
 800a6dc:	6f60      	ldr	r0, [r4, #116]	; 0x74
 800a6de:	2800      	cmp	r0, #0
 800a6e0:	d1f8      	bne.n	800a6d4 <tcp_receive+0x42c>
 800a6e2:	e229      	b.n	800ab38 <tcp_receive+0x890>
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 800a6e4:	4b48      	ldr	r3, [pc, #288]	; (800a808 <tcp_receive+0x560>)
 800a6e6:	68db      	ldr	r3, [r3, #12]
 800a6e8:	8998      	ldrh	r0, [r3, #12]
 800a6ea:	f7fd f9cd 	bl	8007a88 <lwip_htons>
 800a6ee:	f010 0f01 	tst.w	r0, #1
 800a6f2:	d12f      	bne.n	800a754 <tcp_receive+0x4ac>
          inseg.len = (u16_t)pcb->rcv_wnd;
 800a6f4:	4b44      	ldr	r3, [pc, #272]	; (800a808 <tcp_receive+0x560>)
 800a6f6:	8d22      	ldrh	r2, [r4, #40]	; 0x28
 800a6f8:	811a      	strh	r2, [r3, #8]
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 800a6fa:	68db      	ldr	r3, [r3, #12]
 800a6fc:	8998      	ldrh	r0, [r3, #12]
 800a6fe:	f7fd f9c3 	bl	8007a88 <lwip_htons>
 800a702:	f010 0f02 	tst.w	r0, #2
 800a706:	d003      	beq.n	800a710 <tcp_receive+0x468>
            inseg.len -= 1;
 800a708:	4a3f      	ldr	r2, [pc, #252]	; (800a808 <tcp_receive+0x560>)
 800a70a:	8913      	ldrh	r3, [r2, #8]
 800a70c:	3b01      	subs	r3, #1
 800a70e:	8113      	strh	r3, [r2, #8]
          pbuf_realloc(inseg.p, inseg.len);
 800a710:	4e3d      	ldr	r6, [pc, #244]	; (800a808 <tcp_receive+0x560>)
 800a712:	8931      	ldrh	r1, [r6, #8]
 800a714:	6870      	ldr	r0, [r6, #4]
 800a716:	f7fe f90f 	bl	8008938 <pbuf_realloc>
          tcplen = TCP_TCPLEN(&inseg);
 800a71a:	8935      	ldrh	r5, [r6, #8]
 800a71c:	68f3      	ldr	r3, [r6, #12]
 800a71e:	8998      	ldrh	r0, [r3, #12]
 800a720:	f7fd f9b2 	bl	8007a88 <lwip_htons>
 800a724:	f010 0303 	ands.w	r3, r0, #3
 800a728:	bf18      	it	ne
 800a72a:	2301      	movne	r3, #1
 800a72c:	442b      	add	r3, r5
 800a72e:	b29b      	uxth	r3, r3
 800a730:	4a3c      	ldr	r2, [pc, #240]	; (800a824 <tcp_receive+0x57c>)
 800a732:	8013      	strh	r3, [r2, #0]
          LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 800a734:	4a35      	ldr	r2, [pc, #212]	; (800a80c <tcp_receive+0x564>)
 800a736:	6812      	ldr	r2, [r2, #0]
 800a738:	4413      	add	r3, r2
 800a73a:	8d22      	ldrh	r2, [r4, #40]	; 0x28
 800a73c:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800a73e:	440a      	add	r2, r1
 800a740:	4293      	cmp	r3, r2
 800a742:	d0b7      	beq.n	800a6b4 <tcp_receive+0x40c>
 800a744:	4b32      	ldr	r3, [pc, #200]	; (800a810 <tcp_receive+0x568>)
 800a746:	f240 52cb 	movw	r2, #1483	; 0x5cb
 800a74a:	4937      	ldr	r1, [pc, #220]	; (800a828 <tcp_receive+0x580>)
 800a74c:	4832      	ldr	r0, [pc, #200]	; (800a818 <tcp_receive+0x570>)
 800a74e:	f004 fcd1 	bl	800f0f4 <iprintf>
 800a752:	e7af      	b.n	800a6b4 <tcp_receive+0x40c>
            TCPH_FLAGS_SET(inseg.tcphdr, TCPH_FLAGS(inseg.tcphdr) & ~(unsigned int)TCP_FIN);
 800a754:	4e2c      	ldr	r6, [pc, #176]	; (800a808 <tcp_receive+0x560>)
 800a756:	68f3      	ldr	r3, [r6, #12]
 800a758:	899d      	ldrh	r5, [r3, #12]
 800a75a:	4628      	mov	r0, r5
 800a75c:	f7fd f994 	bl	8007a88 <lwip_htons>
 800a760:	f000 003e 	and.w	r0, r0, #62	; 0x3e
 800a764:	f7fd f990 	bl	8007a88 <lwip_htons>
 800a768:	68f3      	ldr	r3, [r6, #12]
 800a76a:	f425 557c 	bic.w	r5, r5, #16128	; 0x3f00
 800a76e:	4305      	orrs	r5, r0
 800a770:	819d      	strh	r5, [r3, #12]
 800a772:	e7bf      	b.n	800a6f4 <tcp_receive+0x44c>
            struct tcp_seg *next = pcb->ooseq;
 800a774:	6f65      	ldr	r5, [r4, #116]	; 0x74
            while (next &&
 800a776:	2d00      	cmp	r5, #0
 800a778:	f000 81d8 	beq.w	800ab2c <tcp_receive+0x884>
                   TCP_SEQ_GEQ(seqno + tcplen,
 800a77c:	4f23      	ldr	r7, [pc, #140]	; (800a80c <tcp_receive+0x564>)
 800a77e:	4e29      	ldr	r6, [pc, #164]	; (800a824 <tcp_receive+0x57c>)
                  (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) == 0) {
 800a780:	f8df 8084 	ldr.w	r8, [pc, #132]	; 800a808 <tcp_receive+0x560>
 800a784:	e009      	b.n	800a79a <tcp_receive+0x4f2>
              next = next->next;
 800a786:	f8d5 9000 	ldr.w	r9, [r5]
              tcp_seg_free(tmp);
 800a78a:	4628      	mov	r0, r5
 800a78c:	f7fe fc76 	bl	800907c <tcp_seg_free>
            while (next &&
 800a790:	f1b9 0f00 	cmp.w	r9, #0
 800a794:	f000 81ca 	beq.w	800ab2c <tcp_receive+0x884>
              next = next->next;
 800a798:	464d      	mov	r5, r9
                   TCP_SEQ_GEQ(seqno + tcplen,
 800a79a:	f8d7 c000 	ldr.w	ip, [r7]
 800a79e:	68e9      	ldr	r1, [r5, #12]
 800a7a0:	6848      	ldr	r0, [r1, #4]
 800a7a2:	8833      	ldrh	r3, [r6, #0]
 800a7a4:	4463      	add	r3, ip
 800a7a6:	1a1b      	subs	r3, r3, r0
 800a7a8:	892a      	ldrh	r2, [r5, #8]
 800a7aa:	1a9a      	subs	r2, r3, r2
            while (next &&
 800a7ac:	2a00      	cmp	r2, #0
 800a7ae:	f2c0 81bf 	blt.w	800ab30 <tcp_receive+0x888>
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 800a7b2:	8988      	ldrh	r0, [r1, #12]
 800a7b4:	f7fd f968 	bl	8007a88 <lwip_htons>
 800a7b8:	f010 0f01 	tst.w	r0, #1
 800a7bc:	d0e3      	beq.n	800a786 <tcp_receive+0x4de>
                  (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) == 0) {
 800a7be:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800a7c2:	8998      	ldrh	r0, [r3, #12]
 800a7c4:	f7fd f960 	bl	8007a88 <lwip_htons>
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 800a7c8:	f010 0f02 	tst.w	r0, #2
 800a7cc:	d1db      	bne.n	800a786 <tcp_receive+0x4de>
                TCPH_SET_FLAG(inseg.tcphdr, TCP_FIN);
 800a7ce:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800a7d2:	f8b3 900c 	ldrh.w	r9, [r3, #12]
 800a7d6:	2001      	movs	r0, #1
 800a7d8:	f7fd f956 	bl	8007a88 <lwip_htons>
 800a7dc:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800a7e0:	ea49 0900 	orr.w	r9, r9, r0
 800a7e4:	f8a3 900c 	strh.w	r9, [r3, #12]
                tcplen = TCP_TCPLEN(&inseg);
 800a7e8:	f8b8 9008 	ldrh.w	r9, [r8, #8]
 800a7ec:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800a7f0:	8998      	ldrh	r0, [r3, #12]
 800a7f2:	f7fd f949 	bl	8007a88 <lwip_htons>
 800a7f6:	f010 0303 	ands.w	r3, r0, #3
 800a7fa:	bf18      	it	ne
 800a7fc:	2301      	movne	r3, #1
 800a7fe:	444b      	add	r3, r9
 800a800:	8033      	strh	r3, [r6, #0]
 800a802:	e7c0      	b.n	800a786 <tcp_receive+0x4de>
 800a804:	20010914 	.word	0x20010914
 800a808:	20010928 	.word	0x20010928
 800a80c:	20010944 	.word	0x20010944
 800a810:	080119e8 	.word	0x080119e8
 800a814:	08011b18 	.word	0x08011b18
 800a818:	080103a4 	.word	0x080103a4
 800a81c:	08011b28 	.word	0x08011b28
 800a820:	08011b38 	.word	0x08011b38
 800a824:	2001095e 	.word	0x2001095e
 800a828:	08011b48 	.word	0x08011b48
              inseg.len = (u16_t)(next->tcphdr->seqno - seqno);
 800a82c:	4b81      	ldr	r3, [pc, #516]	; (800aa34 <tcp_receive+0x78c>)
 800a82e:	eba0 000c 	sub.w	r0, r0, ip
 800a832:	8118      	strh	r0, [r3, #8]
              if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 800a834:	68db      	ldr	r3, [r3, #12]
 800a836:	8998      	ldrh	r0, [r3, #12]
 800a838:	f7fd f926 	bl	8007a88 <lwip_htons>
 800a83c:	f010 0f02 	tst.w	r0, #2
 800a840:	d003      	beq.n	800a84a <tcp_receive+0x5a2>
                inseg.len -= 1;
 800a842:	4a7c      	ldr	r2, [pc, #496]	; (800aa34 <tcp_receive+0x78c>)
 800a844:	8913      	ldrh	r3, [r2, #8]
 800a846:	3b01      	subs	r3, #1
 800a848:	8113      	strh	r3, [r2, #8]
              pbuf_realloc(inseg.p, inseg.len);
 800a84a:	4f7a      	ldr	r7, [pc, #488]	; (800aa34 <tcp_receive+0x78c>)
 800a84c:	8939      	ldrh	r1, [r7, #8]
 800a84e:	6878      	ldr	r0, [r7, #4]
 800a850:	f7fe f872 	bl	8008938 <pbuf_realloc>
              tcplen = TCP_TCPLEN(&inseg);
 800a854:	893e      	ldrh	r6, [r7, #8]
 800a856:	68fb      	ldr	r3, [r7, #12]
 800a858:	8998      	ldrh	r0, [r3, #12]
 800a85a:	f7fd f915 	bl	8007a88 <lwip_htons>
 800a85e:	f010 0303 	ands.w	r3, r0, #3
 800a862:	bf18      	it	ne
 800a864:	2301      	movne	r3, #1
 800a866:	4433      	add	r3, r6
 800a868:	b29b      	uxth	r3, r3
 800a86a:	4a73      	ldr	r2, [pc, #460]	; (800aa38 <tcp_receive+0x790>)
 800a86c:	8013      	strh	r3, [r2, #0]
              LWIP_ASSERT("tcp_receive: segment not trimmed correctly to ooseq queue\n",
 800a86e:	4a73      	ldr	r2, [pc, #460]	; (800aa3c <tcp_receive+0x794>)
 800a870:	6812      	ldr	r2, [r2, #0]
 800a872:	4413      	add	r3, r2
 800a874:	68ea      	ldr	r2, [r5, #12]
 800a876:	6852      	ldr	r2, [r2, #4]
 800a878:	4293      	cmp	r3, r2
 800a87a:	f000 815c 	beq.w	800ab36 <tcp_receive+0x88e>
 800a87e:	4b70      	ldr	r3, [pc, #448]	; (800aa40 <tcp_receive+0x798>)
 800a880:	f240 52fc 	movw	r2, #1532	; 0x5fc
 800a884:	496f      	ldr	r1, [pc, #444]	; (800aa44 <tcp_receive+0x79c>)
 800a886:	4870      	ldr	r0, [pc, #448]	; (800aa48 <tcp_receive+0x7a0>)
 800a888:	f004 fc34 	bl	800f0f4 <iprintf>
 800a88c:	e153      	b.n	800ab36 <tcp_receive+0x88e>
        LWIP_ASSERT("tcp_receive: tcplen > rcv_wnd\n", pcb->rcv_wnd >= tcplen);
 800a88e:	4b6c      	ldr	r3, [pc, #432]	; (800aa40 <tcp_receive+0x798>)
 800a890:	f240 6207 	movw	r2, #1543	; 0x607
 800a894:	496d      	ldr	r1, [pc, #436]	; (800aa4c <tcp_receive+0x7a4>)
 800a896:	486c      	ldr	r0, [pc, #432]	; (800aa48 <tcp_receive+0x7a0>)
 800a898:	f004 fc2c 	bl	800f0f4 <iprintf>
 800a89c:	e156      	b.n	800ab4c <tcp_receive+0x8a4>
          LWIP_ASSERT("tcp_receive: ooseq tcplen > rcv_wnd\n",
 800a89e:	4643      	mov	r3, r8
 800a8a0:	f240 622b 	movw	r2, #1579	; 0x62b
 800a8a4:	4639      	mov	r1, r7
 800a8a6:	4868      	ldr	r0, [pc, #416]	; (800aa48 <tcp_receive+0x7a0>)
 800a8a8:	f004 fc24 	bl	800f0f4 <iprintf>
 800a8ac:	e03e      	b.n	800a92c <tcp_receive+0x684>
              recv_data = cseg->p;
 800a8ae:	4b68      	ldr	r3, [pc, #416]	; (800aa50 <tcp_receive+0x7a8>)
 800a8b0:	6019      	str	r1, [r3, #0]
            cseg->p = NULL;
 800a8b2:	2300      	movs	r3, #0
 800a8b4:	606b      	str	r3, [r5, #4]
          if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 800a8b6:	68eb      	ldr	r3, [r5, #12]
 800a8b8:	8998      	ldrh	r0, [r3, #12]
 800a8ba:	f7fd f8e5 	bl	8007a88 <lwip_htons>
 800a8be:	f010 0f01 	tst.w	r0, #1
 800a8c2:	d009      	beq.n	800a8d8 <tcp_receive+0x630>
            recv_flags |= TF_GOT_FIN;
 800a8c4:	4a63      	ldr	r2, [pc, #396]	; (800aa54 <tcp_receive+0x7ac>)
 800a8c6:	7813      	ldrb	r3, [r2, #0]
 800a8c8:	f043 0320 	orr.w	r3, r3, #32
 800a8cc:	7013      	strb	r3, [r2, #0]
            if (pcb->state == ESTABLISHED) { /* force passive close or we can move to active close */
 800a8ce:	7d23      	ldrb	r3, [r4, #20]
 800a8d0:	2b04      	cmp	r3, #4
              pcb->state = CLOSE_WAIT;
 800a8d2:	bf04      	itt	eq
 800a8d4:	2307      	moveq	r3, #7
 800a8d6:	7523      	strbeq	r3, [r4, #20]
          pcb->ooseq = cseg->next;
 800a8d8:	682b      	ldr	r3, [r5, #0]
 800a8da:	6763      	str	r3, [r4, #116]	; 0x74
          tcp_seg_free(cseg);
 800a8dc:	4628      	mov	r0, r5
 800a8de:	f7fe fbcd 	bl	800907c <tcp_seg_free>
        while (pcb->ooseq != NULL &&
 800a8e2:	6f65      	ldr	r5, [r4, #116]	; 0x74
 800a8e4:	2d00      	cmp	r5, #0
 800a8e6:	d03d      	beq.n	800a964 <tcp_receive+0x6bc>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {
 800a8e8:	68ea      	ldr	r2, [r5, #12]
 800a8ea:	6853      	ldr	r3, [r2, #4]
        while (pcb->ooseq != NULL &&
 800a8ec:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800a8ee:	428b      	cmp	r3, r1
 800a8f0:	d138      	bne.n	800a964 <tcp_receive+0x6bc>
          seqno = pcb->ooseq->tcphdr->seqno;
 800a8f2:	6033      	str	r3, [r6, #0]
          pcb->rcv_nxt += TCP_TCPLEN(cseg);
 800a8f4:	f8b5 9008 	ldrh.w	r9, [r5, #8]
 800a8f8:	8990      	ldrh	r0, [r2, #12]
 800a8fa:	f7fd f8c5 	bl	8007a88 <lwip_htons>
 800a8fe:	f010 0003 	ands.w	r0, r0, #3
 800a902:	bf18      	it	ne
 800a904:	2001      	movne	r0, #1
 800a906:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a908:	4499      	add	r9, r3
 800a90a:	4448      	add	r0, r9
 800a90c:	6260      	str	r0, [r4, #36]	; 0x24
          LWIP_ASSERT("tcp_receive: ooseq tcplen > rcv_wnd\n",
 800a90e:	f8b4 9028 	ldrh.w	r9, [r4, #40]	; 0x28
 800a912:	f8b5 a008 	ldrh.w	sl, [r5, #8]
 800a916:	68eb      	ldr	r3, [r5, #12]
 800a918:	8998      	ldrh	r0, [r3, #12]
 800a91a:	f7fd f8b5 	bl	8007a88 <lwip_htons>
 800a91e:	f010 0003 	ands.w	r0, r0, #3
 800a922:	bf18      	it	ne
 800a924:	2001      	movne	r0, #1
 800a926:	4450      	add	r0, sl
 800a928:	4581      	cmp	r9, r0
 800a92a:	d3b8      	bcc.n	800a89e <tcp_receive+0x5f6>
          pcb->rcv_wnd -= TCP_TCPLEN(cseg);
 800a92c:	f8b5 9008 	ldrh.w	r9, [r5, #8]
 800a930:	68eb      	ldr	r3, [r5, #12]
 800a932:	8998      	ldrh	r0, [r3, #12]
 800a934:	f7fd f8a8 	bl	8007a88 <lwip_htons>
 800a938:	f010 0003 	ands.w	r0, r0, #3
 800a93c:	bf18      	it	ne
 800a93e:	2001      	movne	r0, #1
 800a940:	4448      	add	r0, r9
 800a942:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 800a944:	1a18      	subs	r0, r3, r0
 800a946:	8520      	strh	r0, [r4, #40]	; 0x28
          tcp_update_rcv_ann_wnd(pcb);
 800a948:	4620      	mov	r0, r4
 800a94a:	f7fe fb21 	bl	8008f90 <tcp_update_rcv_ann_wnd>
          if (cseg->p->tot_len > 0) {
 800a94e:	6869      	ldr	r1, [r5, #4]
 800a950:	890b      	ldrh	r3, [r1, #8]
 800a952:	2b00      	cmp	r3, #0
 800a954:	d0af      	beq.n	800a8b6 <tcp_receive+0x60e>
            if (recv_data) {
 800a956:	4b3e      	ldr	r3, [pc, #248]	; (800aa50 <tcp_receive+0x7a8>)
 800a958:	6818      	ldr	r0, [r3, #0]
 800a95a:	2800      	cmp	r0, #0
 800a95c:	d0a7      	beq.n	800a8ae <tcp_receive+0x606>
              pbuf_cat(recv_data, cseg->p);
 800a95e:	f7fe f873 	bl	8008a48 <pbuf_cat>
 800a962:	e7a6      	b.n	800a8b2 <tcp_receive+0x60a>
        tcp_ack(pcb);
 800a964:	8b63      	ldrh	r3, [r4, #26]
 800a966:	f013 0f01 	tst.w	r3, #1
 800a96a:	bf1a      	itte	ne
 800a96c:	f023 0301 	bicne.w	r3, r3, #1
 800a970:	f043 0302 	orrne.w	r3, r3, #2
 800a974:	f043 0301 	orreq.w	r3, r3, #1
 800a978:	8363      	strh	r3, [r4, #26]
 800a97a:	e54a      	b.n	800a412 <tcp_receive+0x16a>
          pcb->ooseq = tcp_seg_copy(&inseg);
 800a97c:	482d      	ldr	r0, [pc, #180]	; (800aa34 <tcp_receive+0x78c>)
 800a97e:	f7fe fb95 	bl	80090ac <tcp_seg_copy>
 800a982:	6760      	str	r0, [r4, #116]	; 0x74
 800a984:	e051      	b.n	800aa2a <tcp_receive+0x782>
              if (inseg.len > next->len) {
 800a986:	4b2b      	ldr	r3, [pc, #172]	; (800aa34 <tcp_receive+0x78c>)
 800a988:	891a      	ldrh	r2, [r3, #8]
 800a98a:	892b      	ldrh	r3, [r5, #8]
 800a98c:	429a      	cmp	r2, r3
 800a98e:	d94c      	bls.n	800aa2a <tcp_receive+0x782>
                struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 800a990:	4828      	ldr	r0, [pc, #160]	; (800aa34 <tcp_receive+0x78c>)
 800a992:	f7fe fb8b 	bl	80090ac <tcp_seg_copy>
                if (cseg != NULL) {
 800a996:	4603      	mov	r3, r0
 800a998:	2800      	cmp	r0, #0
 800a99a:	d046      	beq.n	800aa2a <tcp_receive+0x782>
                  if (prev != NULL) {
 800a99c:	b12e      	cbz	r6, 800a9aa <tcp_receive+0x702>
                    prev->next = cseg;
 800a99e:	6030      	str	r0, [r6, #0]
                  tcp_oos_insert_segment(cseg, next);
 800a9a0:	4629      	mov	r1, r5
 800a9a2:	4618      	mov	r0, r3
 800a9a4:	f7ff fc28 	bl	800a1f8 <tcp_oos_insert_segment>
 800a9a8:	e03f      	b.n	800aa2a <tcp_receive+0x782>
                    pcb->ooseq = cseg;
 800a9aa:	6760      	str	r0, [r4, #116]	; 0x74
 800a9ac:	e7f8      	b.n	800a9a0 <tcp_receive+0x6f8>
                if (TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {
 800a9ae:	1a99      	subs	r1, r3, r2
 800a9b0:	2900      	cmp	r1, #0
 800a9b2:	db27      	blt.n	800aa04 <tcp_receive+0x75c>
              if (next->next == NULL &&
 800a9b4:	6829      	ldr	r1, [r5, #0]
 800a9b6:	462e      	mov	r6, r5
 800a9b8:	2900      	cmp	r1, #0
 800a9ba:	d033      	beq.n	800aa24 <tcp_receive+0x77c>
 800a9bc:	460d      	mov	r5, r1
            if (seqno == next->tcphdr->seqno) {
 800a9be:	68e8      	ldr	r0, [r5, #12]
 800a9c0:	6842      	ldr	r2, [r0, #4]
 800a9c2:	429a      	cmp	r2, r3
 800a9c4:	d0df      	beq.n	800a986 <tcp_receive+0x6de>
              if (prev == NULL) {
 800a9c6:	2e00      	cmp	r6, #0
 800a9c8:	d0f1      	beq.n	800a9ae <tcp_receive+0x706>
                if (TCP_SEQ_BETWEEN(seqno, prev->tcphdr->seqno + 1, next->tcphdr->seqno - 1)) {
 800a9ca:	68f1      	ldr	r1, [r6, #12]
 800a9cc:	6849      	ldr	r1, [r1, #4]
 800a9ce:	1a79      	subs	r1, r7, r1
 800a9d0:	2900      	cmp	r1, #0
 800a9d2:	dbef      	blt.n	800a9b4 <tcp_receive+0x70c>
 800a9d4:	ebac 0102 	sub.w	r1, ip, r2
 800a9d8:	2900      	cmp	r1, #0
 800a9da:	dceb      	bgt.n	800a9b4 <tcp_receive+0x70c>
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 800a9dc:	4815      	ldr	r0, [pc, #84]	; (800aa34 <tcp_receive+0x78c>)
 800a9de:	f7fe fb65 	bl	80090ac <tcp_seg_copy>
                  if (cseg != NULL) {
 800a9e2:	4607      	mov	r7, r0
 800a9e4:	b308      	cbz	r0, 800aa2a <tcp_receive+0x782>
                    if (TCP_SEQ_GT(prev->tcphdr->seqno + prev->len, seqno)) {
 800a9e6:	68f3      	ldr	r3, [r6, #12]
 800a9e8:	6859      	ldr	r1, [r3, #4]
 800a9ea:	4b14      	ldr	r3, [pc, #80]	; (800aa3c <tcp_receive+0x794>)
 800a9ec:	681a      	ldr	r2, [r3, #0]
 800a9ee:	8933      	ldrh	r3, [r6, #8]
 800a9f0:	440b      	add	r3, r1
 800a9f2:	1a9b      	subs	r3, r3, r2
 800a9f4:	2b00      	cmp	r3, #0
 800a9f6:	dc0e      	bgt.n	800aa16 <tcp_receive+0x76e>
                    prev->next = cseg;
 800a9f8:	6037      	str	r7, [r6, #0]
                    tcp_oos_insert_segment(cseg, next);
 800a9fa:	4629      	mov	r1, r5
 800a9fc:	4638      	mov	r0, r7
 800a9fe:	f7ff fbfb 	bl	800a1f8 <tcp_oos_insert_segment>
 800aa02:	e012      	b.n	800aa2a <tcp_receive+0x782>
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 800aa04:	480b      	ldr	r0, [pc, #44]	; (800aa34 <tcp_receive+0x78c>)
 800aa06:	f7fe fb51 	bl	80090ac <tcp_seg_copy>
                  if (cseg != NULL) {
 800aa0a:	b170      	cbz	r0, 800aa2a <tcp_receive+0x782>
                    pcb->ooseq = cseg;
 800aa0c:	6760      	str	r0, [r4, #116]	; 0x74
                    tcp_oos_insert_segment(cseg, next);
 800aa0e:	4629      	mov	r1, r5
 800aa10:	f7ff fbf2 	bl	800a1f8 <tcp_oos_insert_segment>
 800aa14:	e009      	b.n	800aa2a <tcp_receive+0x782>
                      prev->len = (u16_t)(seqno - prev->tcphdr->seqno);
 800aa16:	1a52      	subs	r2, r2, r1
 800aa18:	b291      	uxth	r1, r2
 800aa1a:	8131      	strh	r1, [r6, #8]
                      pbuf_realloc(prev->p, prev->len);
 800aa1c:	6870      	ldr	r0, [r6, #4]
 800aa1e:	f7fd ff8b 	bl	8008938 <pbuf_realloc>
 800aa22:	e7e9      	b.n	800a9f8 <tcp_receive+0x750>
                  TCP_SEQ_GT(seqno, next->tcphdr->seqno)) {
 800aa24:	1a9b      	subs	r3, r3, r2
              if (next->next == NULL &&
 800aa26:	2b00      	cmp	r3, #0
 800aa28:	dc16      	bgt.n	800aa58 <tcp_receive+0x7b0>
        tcp_send_empty_ack(pcb);
 800aa2a:	4620      	mov	r0, r4
 800aa2c:	f001 fec8 	bl	800c7c0 <tcp_send_empty_ack>
 800aa30:	e4ef      	b.n	800a412 <tcp_receive+0x16a>
 800aa32:	bf00      	nop
 800aa34:	20010928 	.word	0x20010928
 800aa38:	2001095e 	.word	0x2001095e
 800aa3c:	20010944 	.word	0x20010944
 800aa40:	080119e8 	.word	0x080119e8
 800aa44:	08011b80 	.word	0x08011b80
 800aa48:	080103a4 	.word	0x080103a4
 800aa4c:	08011bbc 	.word	0x08011bbc
 800aa50:	2001093c 	.word	0x2001093c
 800aa54:	20010940 	.word	0x20010940
                if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 800aa58:	8980      	ldrh	r0, [r0, #12]
 800aa5a:	f7fd f815 	bl	8007a88 <lwip_htons>
 800aa5e:	f010 0f01 	tst.w	r0, #1
 800aa62:	d1e2      	bne.n	800aa2a <tcp_receive+0x782>
                next->next = tcp_seg_copy(&inseg);
 800aa64:	484d      	ldr	r0, [pc, #308]	; (800ab9c <tcp_receive+0x8f4>)
 800aa66:	f7fe fb21 	bl	80090ac <tcp_seg_copy>
 800aa6a:	6028      	str	r0, [r5, #0]
                if (next->next != NULL) {
 800aa6c:	2800      	cmp	r0, #0
 800aa6e:	d0dc      	beq.n	800aa2a <tcp_receive+0x782>
                  if (TCP_SEQ_GT(next->tcphdr->seqno + next->len, seqno)) {
 800aa70:	68eb      	ldr	r3, [r5, #12]
 800aa72:	6859      	ldr	r1, [r3, #4]
 800aa74:	4b4a      	ldr	r3, [pc, #296]	; (800aba0 <tcp_receive+0x8f8>)
 800aa76:	681b      	ldr	r3, [r3, #0]
 800aa78:	892a      	ldrh	r2, [r5, #8]
 800aa7a:	440a      	add	r2, r1
 800aa7c:	1ad2      	subs	r2, r2, r3
 800aa7e:	2a00      	cmp	r2, #0
 800aa80:	dc3c      	bgt.n	800aafc <tcp_receive+0x854>
                  if (TCP_SEQ_GT((u32_t)tcplen + seqno, pcb->rcv_nxt + (u32_t)pcb->rcv_wnd)) {
 800aa82:	4b48      	ldr	r3, [pc, #288]	; (800aba4 <tcp_receive+0x8fc>)
 800aa84:	881b      	ldrh	r3, [r3, #0]
 800aa86:	4a46      	ldr	r2, [pc, #280]	; (800aba0 <tcp_receive+0x8f8>)
 800aa88:	6812      	ldr	r2, [r2, #0]
 800aa8a:	4413      	add	r3, r2
 800aa8c:	6a62      	ldr	r2, [r4, #36]	; 0x24
 800aa8e:	1a9b      	subs	r3, r3, r2
 800aa90:	8d22      	ldrh	r2, [r4, #40]	; 0x28
 800aa92:	1a9b      	subs	r3, r3, r2
 800aa94:	2b00      	cmp	r3, #0
 800aa96:	ddc8      	ble.n	800aa2a <tcp_receive+0x782>
                    if (TCPH_FLAGS(next->next->tcphdr) & TCP_FIN) {
 800aa98:	682b      	ldr	r3, [r5, #0]
 800aa9a:	68db      	ldr	r3, [r3, #12]
 800aa9c:	8998      	ldrh	r0, [r3, #12]
 800aa9e:	f7fc fff3 	bl	8007a88 <lwip_htons>
 800aaa2:	f010 0f01 	tst.w	r0, #1
 800aaa6:	d130      	bne.n	800ab0a <tcp_receive+0x862>
                    next->next->len = (u16_t)(pcb->rcv_nxt + pcb->rcv_wnd - seqno);
 800aaa8:	682a      	ldr	r2, [r5, #0]
 800aaaa:	4e3d      	ldr	r6, [pc, #244]	; (800aba0 <tcp_receive+0x8f8>)
 800aaac:	6831      	ldr	r1, [r6, #0]
 800aaae:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 800aab0:	1a5b      	subs	r3, r3, r1
 800aab2:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800aab4:	440b      	add	r3, r1
 800aab6:	8113      	strh	r3, [r2, #8]
                    pbuf_realloc(next->next->p, next->next->len);
 800aab8:	682b      	ldr	r3, [r5, #0]
 800aaba:	8919      	ldrh	r1, [r3, #8]
 800aabc:	6858      	ldr	r0, [r3, #4]
 800aabe:	f7fd ff3b 	bl	8008938 <pbuf_realloc>
                    tcplen = TCP_TCPLEN(next->next);
 800aac2:	682b      	ldr	r3, [r5, #0]
 800aac4:	891d      	ldrh	r5, [r3, #8]
 800aac6:	68db      	ldr	r3, [r3, #12]
 800aac8:	8998      	ldrh	r0, [r3, #12]
 800aaca:	f7fc ffdd 	bl	8007a88 <lwip_htons>
 800aace:	f010 0303 	ands.w	r3, r0, #3
 800aad2:	bf18      	it	ne
 800aad4:	2301      	movne	r3, #1
 800aad6:	442b      	add	r3, r5
 800aad8:	b29b      	uxth	r3, r3
 800aada:	4a32      	ldr	r2, [pc, #200]	; (800aba4 <tcp_receive+0x8fc>)
 800aadc:	8013      	strh	r3, [r2, #0]
                    LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 800aade:	6832      	ldr	r2, [r6, #0]
 800aae0:	4413      	add	r3, r2
 800aae2:	8d22      	ldrh	r2, [r4, #40]	; 0x28
 800aae4:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800aae6:	440a      	add	r2, r1
 800aae8:	4293      	cmp	r3, r2
 800aaea:	d09e      	beq.n	800aa2a <tcp_receive+0x782>
 800aaec:	4b2e      	ldr	r3, [pc, #184]	; (800aba8 <tcp_receive+0x900>)
 800aaee:	f44f 62df 	mov.w	r2, #1784	; 0x6f8
 800aaf2:	492e      	ldr	r1, [pc, #184]	; (800abac <tcp_receive+0x904>)
 800aaf4:	482e      	ldr	r0, [pc, #184]	; (800abb0 <tcp_receive+0x908>)
 800aaf6:	f004 fafd 	bl	800f0f4 <iprintf>
 800aafa:	e796      	b.n	800aa2a <tcp_receive+0x782>
                    next->len = (u16_t)(seqno - next->tcphdr->seqno);
 800aafc:	1a5b      	subs	r3, r3, r1
 800aafe:	b299      	uxth	r1, r3
 800ab00:	8129      	strh	r1, [r5, #8]
                    pbuf_realloc(next->p, next->len);
 800ab02:	6868      	ldr	r0, [r5, #4]
 800ab04:	f7fd ff18 	bl	8008938 <pbuf_realloc>
 800ab08:	e7bb      	b.n	800aa82 <tcp_receive+0x7da>
                      TCPH_FLAGS_SET(next->next->tcphdr, TCPH_FLAGS(next->next->tcphdr) & ~TCP_FIN);
 800ab0a:	682b      	ldr	r3, [r5, #0]
 800ab0c:	68db      	ldr	r3, [r3, #12]
 800ab0e:	899e      	ldrh	r6, [r3, #12]
 800ab10:	4630      	mov	r0, r6
 800ab12:	f7fc ffb9 	bl	8007a88 <lwip_htons>
 800ab16:	f000 003e 	and.w	r0, r0, #62	; 0x3e
 800ab1a:	f7fc ffb5 	bl	8007a88 <lwip_htons>
 800ab1e:	682b      	ldr	r3, [r5, #0]
 800ab20:	68db      	ldr	r3, [r3, #12]
 800ab22:	f426 567c 	bic.w	r6, r6, #16128	; 0x3f00
 800ab26:	4306      	orrs	r6, r0
 800ab28:	819e      	strh	r6, [r3, #12]
 800ab2a:	e7bd      	b.n	800aaa8 <tcp_receive+0x800>
              next = next->next;
 800ab2c:	2500      	movs	r5, #0
 800ab2e:	e002      	b.n	800ab36 <tcp_receive+0x88e>
            if (next &&
 800ab30:	2b00      	cmp	r3, #0
 800ab32:	f73f ae7b 	bgt.w	800a82c <tcp_receive+0x584>
            pcb->ooseq = next;
 800ab36:	6765      	str	r5, [r4, #116]	; 0x74
        pcb->rcv_nxt = seqno + tcplen;
 800ab38:	4b1a      	ldr	r3, [pc, #104]	; (800aba4 <tcp_receive+0x8fc>)
 800ab3a:	881a      	ldrh	r2, [r3, #0]
 800ab3c:	4b18      	ldr	r3, [pc, #96]	; (800aba0 <tcp_receive+0x8f8>)
 800ab3e:	681b      	ldr	r3, [r3, #0]
 800ab40:	4413      	add	r3, r2
 800ab42:	6263      	str	r3, [r4, #36]	; 0x24
        LWIP_ASSERT("tcp_receive: tcplen > rcv_wnd\n", pcb->rcv_wnd >= tcplen);
 800ab44:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 800ab46:	4293      	cmp	r3, r2
 800ab48:	f4ff aea1 	bcc.w	800a88e <tcp_receive+0x5e6>
        pcb->rcv_wnd -= tcplen;
 800ab4c:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 800ab4e:	4a15      	ldr	r2, [pc, #84]	; (800aba4 <tcp_receive+0x8fc>)
 800ab50:	8812      	ldrh	r2, [r2, #0]
 800ab52:	1a9b      	subs	r3, r3, r2
 800ab54:	8523      	strh	r3, [r4, #40]	; 0x28
        tcp_update_rcv_ann_wnd(pcb);
 800ab56:	4620      	mov	r0, r4
 800ab58:	f7fe fa1a 	bl	8008f90 <tcp_update_rcv_ann_wnd>
        if (inseg.p->tot_len > 0) {
 800ab5c:	4b0f      	ldr	r3, [pc, #60]	; (800ab9c <tcp_receive+0x8f4>)
 800ab5e:	685b      	ldr	r3, [r3, #4]
 800ab60:	891a      	ldrh	r2, [r3, #8]
 800ab62:	b122      	cbz	r2, 800ab6e <tcp_receive+0x8c6>
          recv_data = inseg.p;
 800ab64:	4a13      	ldr	r2, [pc, #76]	; (800abb4 <tcp_receive+0x90c>)
 800ab66:	6013      	str	r3, [r2, #0]
          inseg.p = NULL;
 800ab68:	4b0c      	ldr	r3, [pc, #48]	; (800ab9c <tcp_receive+0x8f4>)
 800ab6a:	2200      	movs	r2, #0
 800ab6c:	605a      	str	r2, [r3, #4]
        if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 800ab6e:	4b0b      	ldr	r3, [pc, #44]	; (800ab9c <tcp_receive+0x8f4>)
 800ab70:	68db      	ldr	r3, [r3, #12]
 800ab72:	8998      	ldrh	r0, [r3, #12]
 800ab74:	f7fc ff88 	bl	8007a88 <lwip_htons>
 800ab78:	f010 0f01 	tst.w	r0, #1
 800ab7c:	d004      	beq.n	800ab88 <tcp_receive+0x8e0>
          recv_flags |= TF_GOT_FIN;
 800ab7e:	4a0e      	ldr	r2, [pc, #56]	; (800abb8 <tcp_receive+0x910>)
 800ab80:	7813      	ldrb	r3, [r2, #0]
 800ab82:	f043 0320 	orr.w	r3, r3, #32
 800ab86:	7013      	strb	r3, [r2, #0]
        while (pcb->ooseq != NULL &&
 800ab88:	6f65      	ldr	r5, [r4, #116]	; 0x74
 800ab8a:	2d00      	cmp	r5, #0
 800ab8c:	f43f aeea 	beq.w	800a964 <tcp_receive+0x6bc>
          seqno = pcb->ooseq->tcphdr->seqno;
 800ab90:	4e03      	ldr	r6, [pc, #12]	; (800aba0 <tcp_receive+0x8f8>)
          LWIP_ASSERT("tcp_receive: ooseq tcplen > rcv_wnd\n",
 800ab92:	f8df 8014 	ldr.w	r8, [pc, #20]	; 800aba8 <tcp_receive+0x900>
 800ab96:	4f09      	ldr	r7, [pc, #36]	; (800abbc <tcp_receive+0x914>)
 800ab98:	e6a6      	b.n	800a8e8 <tcp_receive+0x640>
 800ab9a:	bf00      	nop
 800ab9c:	20010928 	.word	0x20010928
 800aba0:	20010944 	.word	0x20010944
 800aba4:	2001095e 	.word	0x2001095e
 800aba8:	080119e8 	.word	0x080119e8
 800abac:	08011b48 	.word	0x08011b48
 800abb0:	080103a4 	.word	0x080103a4
 800abb4:	2001093c 	.word	0x2001093c
 800abb8:	20010940 	.word	0x20010940
 800abbc:	08011bdc 	.word	0x08011bdc

0800abc0 <tcp_input>:
{
 800abc0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800abc4:	b085      	sub	sp, #20
  LWIP_ASSERT("tcp_input: invalid pbuf", p != NULL);
 800abc6:	4605      	mov	r5, r0
 800abc8:	b158      	cbz	r0, 800abe2 <tcp_input+0x22>
  tcphdr = (struct tcp_hdr *)p->payload;
 800abca:	686a      	ldr	r2, [r5, #4]
 800abcc:	4b77      	ldr	r3, [pc, #476]	; (800adac <tcp_input+0x1ec>)
 800abce:	601a      	str	r2, [r3, #0]
  if (p->len < TCP_HLEN) {
 800abd0:	896b      	ldrh	r3, [r5, #10]
 800abd2:	2b13      	cmp	r3, #19
 800abd4:	d80c      	bhi.n	800abf0 <tcp_input+0x30>
  pbuf_free(p);
 800abd6:	4628      	mov	r0, r5
 800abd8:	f7fd fd96 	bl	8008708 <pbuf_free>
}
 800abdc:	b005      	add	sp, #20
 800abde:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  LWIP_ASSERT("tcp_input: invalid pbuf", p != NULL);
 800abe2:	4b73      	ldr	r3, [pc, #460]	; (800adb0 <tcp_input+0x1f0>)
 800abe4:	2283      	movs	r2, #131	; 0x83
 800abe6:	4973      	ldr	r1, [pc, #460]	; (800adb4 <tcp_input+0x1f4>)
 800abe8:	4873      	ldr	r0, [pc, #460]	; (800adb8 <tcp_input+0x1f8>)
 800abea:	f004 fa83 	bl	800f0f4 <iprintf>
 800abee:	e7ec      	b.n	800abca <tcp_input+0xa>
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 800abf0:	4b72      	ldr	r3, [pc, #456]	; (800adbc <tcp_input+0x1fc>)
 800abf2:	6819      	ldr	r1, [r3, #0]
 800abf4:	6958      	ldr	r0, [r3, #20]
 800abf6:	f003 fa96 	bl	800e126 <ip4_addr_isbroadcast_u32>
 800abfa:	2800      	cmp	r0, #0
 800abfc:	d1eb      	bne.n	800abd6 <tcp_input+0x16>
      ip_addr_ismulticast(ip_current_dest_addr())) {
 800abfe:	4b6f      	ldr	r3, [pc, #444]	; (800adbc <tcp_input+0x1fc>)
 800ac00:	695b      	ldr	r3, [r3, #20]
 800ac02:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 800ac06:	2be0      	cmp	r3, #224	; 0xe0
 800ac08:	d0e5      	beq.n	800abd6 <tcp_input+0x16>
  hdrlen_bytes = TCPH_HDRLEN_BYTES(tcphdr);
 800ac0a:	4b68      	ldr	r3, [pc, #416]	; (800adac <tcp_input+0x1ec>)
 800ac0c:	681b      	ldr	r3, [r3, #0]
 800ac0e:	8998      	ldrh	r0, [r3, #12]
 800ac10:	f7fc ff3a 	bl	8007a88 <lwip_htons>
 800ac14:	0a81      	lsrs	r1, r0, #10
 800ac16:	f001 01fc 	and.w	r1, r1, #252	; 0xfc
  if ((hdrlen_bytes < TCP_HLEN) || (hdrlen_bytes > p->tot_len)) {
 800ac1a:	2913      	cmp	r1, #19
 800ac1c:	d9db      	bls.n	800abd6 <tcp_input+0x16>
 800ac1e:	b28b      	uxth	r3, r1
 800ac20:	892a      	ldrh	r2, [r5, #8]
 800ac22:	429a      	cmp	r2, r3
 800ac24:	d3d7      	bcc.n	800abd6 <tcp_input+0x16>
  tcphdr_optlen = (u16_t)(hdrlen_bytes - TCP_HLEN);
 800ac26:	f1a3 0214 	sub.w	r2, r3, #20
 800ac2a:	b292      	uxth	r2, r2
 800ac2c:	4864      	ldr	r0, [pc, #400]	; (800adc0 <tcp_input+0x200>)
 800ac2e:	8002      	strh	r2, [r0, #0]
  tcphdr_opt2 = NULL;
 800ac30:	4864      	ldr	r0, [pc, #400]	; (800adc4 <tcp_input+0x204>)
 800ac32:	2400      	movs	r4, #0
 800ac34:	6004      	str	r4, [r0, #0]
  if (p->len >= hdrlen_bytes) {
 800ac36:	8968      	ldrh	r0, [r5, #10]
 800ac38:	4298      	cmp	r0, r3
 800ac3a:	d22e      	bcs.n	800ac9a <tcp_input+0xda>
    LWIP_ASSERT("p->next != NULL", p->next != NULL);
 800ac3c:	682b      	ldr	r3, [r5, #0]
 800ac3e:	2b00      	cmp	r3, #0
 800ac40:	d068      	beq.n	800ad14 <tcp_input+0x154>
    pbuf_remove_header(p, TCP_HLEN);
 800ac42:	2114      	movs	r1, #20
 800ac44:	4628      	mov	r0, r5
 800ac46:	f7fd fd1f 	bl	8008688 <pbuf_remove_header>
    tcphdr_opt1len = p->len;
 800ac4a:	896c      	ldrh	r4, [r5, #10]
 800ac4c:	4b5e      	ldr	r3, [pc, #376]	; (800adc8 <tcp_input+0x208>)
 800ac4e:	801c      	strh	r4, [r3, #0]
    opt2len = (u16_t)(tcphdr_optlen - tcphdr_opt1len);
 800ac50:	4b5b      	ldr	r3, [pc, #364]	; (800adc0 <tcp_input+0x200>)
 800ac52:	881f      	ldrh	r7, [r3, #0]
 800ac54:	1b3e      	subs	r6, r7, r4
 800ac56:	b2b6      	uxth	r6, r6
    pbuf_remove_header(p, tcphdr_opt1len);
 800ac58:	4621      	mov	r1, r4
 800ac5a:	4628      	mov	r0, r5
 800ac5c:	f7fd fd14 	bl	8008688 <pbuf_remove_header>
    if (opt2len > p->next->len) {
 800ac60:	6828      	ldr	r0, [r5, #0]
 800ac62:	8943      	ldrh	r3, [r0, #10]
 800ac64:	42b3      	cmp	r3, r6
 800ac66:	d3b6      	bcc.n	800abd6 <tcp_input+0x16>
    tcphdr_opt2 = (u8_t *)p->next->payload;
 800ac68:	6842      	ldr	r2, [r0, #4]
 800ac6a:	4b56      	ldr	r3, [pc, #344]	; (800adc4 <tcp_input+0x204>)
 800ac6c:	601a      	str	r2, [r3, #0]
    pbuf_remove_header(p->next, opt2len);
 800ac6e:	4631      	mov	r1, r6
 800ac70:	f7fd fd0a 	bl	8008688 <pbuf_remove_header>
    p->tot_len = (u16_t)(p->tot_len - opt2len);
 800ac74:	892b      	ldrh	r3, [r5, #8]
 800ac76:	441c      	add	r4, r3
 800ac78:	1be4      	subs	r4, r4, r7
 800ac7a:	812c      	strh	r4, [r5, #8]
    LWIP_ASSERT("p->len == 0", p->len == 0);
 800ac7c:	896b      	ldrh	r3, [r5, #10]
 800ac7e:	2b00      	cmp	r3, #0
 800ac80:	d14f      	bne.n	800ad22 <tcp_input+0x162>
    LWIP_ASSERT("p->tot_len == p->next->tot_len", p->tot_len == p->next->tot_len);
 800ac82:	682b      	ldr	r3, [r5, #0]
 800ac84:	892a      	ldrh	r2, [r5, #8]
 800ac86:	891b      	ldrh	r3, [r3, #8]
 800ac88:	429a      	cmp	r2, r3
 800ac8a:	d00b      	beq.n	800aca4 <tcp_input+0xe4>
 800ac8c:	4b48      	ldr	r3, [pc, #288]	; (800adb0 <tcp_input+0x1f0>)
 800ac8e:	22e0      	movs	r2, #224	; 0xe0
 800ac90:	494e      	ldr	r1, [pc, #312]	; (800adcc <tcp_input+0x20c>)
 800ac92:	4849      	ldr	r0, [pc, #292]	; (800adb8 <tcp_input+0x1f8>)
 800ac94:	f004 fa2e 	bl	800f0f4 <iprintf>
 800ac98:	e004      	b.n	800aca4 <tcp_input+0xe4>
    tcphdr_opt1len = tcphdr_optlen;
 800ac9a:	4b4b      	ldr	r3, [pc, #300]	; (800adc8 <tcp_input+0x208>)
 800ac9c:	801a      	strh	r2, [r3, #0]
    pbuf_remove_header(p, hdrlen_bytes); /* cannot fail */
 800ac9e:	4628      	mov	r0, r5
 800aca0:	f7fd fcf2 	bl	8008688 <pbuf_remove_header>
  tcphdr->src = lwip_ntohs(tcphdr->src);
 800aca4:	4c41      	ldr	r4, [pc, #260]	; (800adac <tcp_input+0x1ec>)
 800aca6:	6826      	ldr	r6, [r4, #0]
 800aca8:	8830      	ldrh	r0, [r6, #0]
 800acaa:	f7fc feed 	bl	8007a88 <lwip_htons>
 800acae:	8030      	strh	r0, [r6, #0]
  tcphdr->dest = lwip_ntohs(tcphdr->dest);
 800acb0:	6826      	ldr	r6, [r4, #0]
 800acb2:	8870      	ldrh	r0, [r6, #2]
 800acb4:	f7fc fee8 	bl	8007a88 <lwip_htons>
 800acb8:	8070      	strh	r0, [r6, #2]
  seqno = tcphdr->seqno = lwip_ntohl(tcphdr->seqno);
 800acba:	6826      	ldr	r6, [r4, #0]
 800acbc:	6870      	ldr	r0, [r6, #4]
 800acbe:	f7fc fee8 	bl	8007a92 <lwip_htonl>
 800acc2:	6070      	str	r0, [r6, #4]
 800acc4:	4b42      	ldr	r3, [pc, #264]	; (800add0 <tcp_input+0x210>)
 800acc6:	6018      	str	r0, [r3, #0]
  ackno = tcphdr->ackno = lwip_ntohl(tcphdr->ackno);
 800acc8:	6826      	ldr	r6, [r4, #0]
 800acca:	68b0      	ldr	r0, [r6, #8]
 800accc:	f7fc fee1 	bl	8007a92 <lwip_htonl>
 800acd0:	60b0      	str	r0, [r6, #8]
 800acd2:	4b40      	ldr	r3, [pc, #256]	; (800add4 <tcp_input+0x214>)
 800acd4:	6018      	str	r0, [r3, #0]
  tcphdr->wnd = lwip_ntohs(tcphdr->wnd);
 800acd6:	6826      	ldr	r6, [r4, #0]
 800acd8:	89f0      	ldrh	r0, [r6, #14]
 800acda:	f7fc fed5 	bl	8007a88 <lwip_htons>
 800acde:	81f0      	strh	r0, [r6, #14]
  flags = TCPH_FLAGS(tcphdr);
 800ace0:	6823      	ldr	r3, [r4, #0]
 800ace2:	8998      	ldrh	r0, [r3, #12]
 800ace4:	f7fc fed0 	bl	8007a88 <lwip_htons>
 800ace8:	f000 023f 	and.w	r2, r0, #63	; 0x3f
 800acec:	4b3a      	ldr	r3, [pc, #232]	; (800add8 <tcp_input+0x218>)
 800acee:	701a      	strb	r2, [r3, #0]
  tcplen = p->tot_len;
 800acf0:	892a      	ldrh	r2, [r5, #8]
  if (flags & (TCP_FIN | TCP_SYN)) {
 800acf2:	f010 0f03 	tst.w	r0, #3
 800acf6:	d11b      	bne.n	800ad30 <tcp_input+0x170>
  tcplen = p->tot_len;
 800acf8:	4b38      	ldr	r3, [pc, #224]	; (800addc <tcp_input+0x21c>)
 800acfa:	801a      	strh	r2, [r3, #0]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800acfc:	4b38      	ldr	r3, [pc, #224]	; (800ade0 <tcp_input+0x220>)
 800acfe:	681c      	ldr	r4, [r3, #0]
 800ad00:	2c00      	cmp	r4, #0
 800ad02:	f000 8563 	beq.w	800b7cc <tcp_input+0xc0c>
  prev = NULL;
 800ad06:	2600      	movs	r6, #0
    LWIP_ASSERT("tcp_input: active pcb->state != CLOSED", pcb->state != CLOSED);
 800ad08:	f8df 80a4 	ldr.w	r8, [pc, #164]	; 800adb0 <tcp_input+0x1f0>
 800ad0c:	f8df 90e4 	ldr.w	r9, [pc, #228]	; 800adf4 <tcp_input+0x234>
 800ad10:	4f29      	ldr	r7, [pc, #164]	; (800adb8 <tcp_input+0x1f8>)
 800ad12:	e035      	b.n	800ad80 <tcp_input+0x1c0>
    LWIP_ASSERT("p->next != NULL", p->next != NULL);
 800ad14:	4b26      	ldr	r3, [pc, #152]	; (800adb0 <tcp_input+0x1f0>)
 800ad16:	22c2      	movs	r2, #194	; 0xc2
 800ad18:	4932      	ldr	r1, [pc, #200]	; (800ade4 <tcp_input+0x224>)
 800ad1a:	4827      	ldr	r0, [pc, #156]	; (800adb8 <tcp_input+0x1f8>)
 800ad1c:	f004 f9ea 	bl	800f0f4 <iprintf>
 800ad20:	e78f      	b.n	800ac42 <tcp_input+0x82>
    LWIP_ASSERT("p->len == 0", p->len == 0);
 800ad22:	4b23      	ldr	r3, [pc, #140]	; (800adb0 <tcp_input+0x1f0>)
 800ad24:	22df      	movs	r2, #223	; 0xdf
 800ad26:	4930      	ldr	r1, [pc, #192]	; (800ade8 <tcp_input+0x228>)
 800ad28:	4823      	ldr	r0, [pc, #140]	; (800adb8 <tcp_input+0x1f8>)
 800ad2a:	f004 f9e3 	bl	800f0f4 <iprintf>
 800ad2e:	e7a8      	b.n	800ac82 <tcp_input+0xc2>
    tcplen++;
 800ad30:	1c53      	adds	r3, r2, #1
 800ad32:	b29b      	uxth	r3, r3
 800ad34:	4929      	ldr	r1, [pc, #164]	; (800addc <tcp_input+0x21c>)
 800ad36:	800b      	strh	r3, [r1, #0]
    if (tcplen < p->tot_len) {
 800ad38:	429a      	cmp	r2, r3
 800ad3a:	d9df      	bls.n	800acfc <tcp_input+0x13c>
 800ad3c:	e74b      	b.n	800abd6 <tcp_input+0x16>
    LWIP_ASSERT("tcp_input: active pcb->state != CLOSED", pcb->state != CLOSED);
 800ad3e:	4643      	mov	r3, r8
 800ad40:	22fb      	movs	r2, #251	; 0xfb
 800ad42:	4649      	mov	r1, r9
 800ad44:	4638      	mov	r0, r7
 800ad46:	f004 f9d5 	bl	800f0f4 <iprintf>
 800ad4a:	e01c      	b.n	800ad86 <tcp_input+0x1c6>
    LWIP_ASSERT("tcp_input: active pcb->state != TIME-WAIT", pcb->state != TIME_WAIT);
 800ad4c:	4643      	mov	r3, r8
 800ad4e:	22fc      	movs	r2, #252	; 0xfc
 800ad50:	4926      	ldr	r1, [pc, #152]	; (800adec <tcp_input+0x22c>)
 800ad52:	4638      	mov	r0, r7
 800ad54:	f004 f9ce 	bl	800f0f4 <iprintf>
 800ad58:	e018      	b.n	800ad8c <tcp_input+0x1cc>
    LWIP_ASSERT("tcp_input: active pcb->state != LISTEN", pcb->state != LISTEN);
 800ad5a:	4643      	mov	r3, r8
 800ad5c:	22fd      	movs	r2, #253	; 0xfd
 800ad5e:	4924      	ldr	r1, [pc, #144]	; (800adf0 <tcp_input+0x230>)
 800ad60:	4638      	mov	r0, r7
 800ad62:	f004 f9c7 	bl	800f0f4 <iprintf>
 800ad66:	e014      	b.n	800ad92 <tcp_input+0x1d2>
    if (pcb->remote_port == tcphdr->src &&
 800ad68:	4b10      	ldr	r3, [pc, #64]	; (800adac <tcp_input+0x1ec>)
 800ad6a:	681b      	ldr	r3, [r3, #0]
 800ad6c:	8b21      	ldrh	r1, [r4, #24]
 800ad6e:	881a      	ldrh	r2, [r3, #0]
 800ad70:	4291      	cmp	r1, r2
 800ad72:	d041      	beq.n	800adf8 <tcp_input+0x238>
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800ad74:	68e3      	ldr	r3, [r4, #12]
 800ad76:	4626      	mov	r6, r4
 800ad78:	2b00      	cmp	r3, #0
 800ad7a:	f000 8527 	beq.w	800b7cc <tcp_input+0xc0c>
 800ad7e:	461c      	mov	r4, r3
    LWIP_ASSERT("tcp_input: active pcb->state != CLOSED", pcb->state != CLOSED);
 800ad80:	7d23      	ldrb	r3, [r4, #20]
 800ad82:	2b00      	cmp	r3, #0
 800ad84:	d0db      	beq.n	800ad3e <tcp_input+0x17e>
    LWIP_ASSERT("tcp_input: active pcb->state != TIME-WAIT", pcb->state != TIME_WAIT);
 800ad86:	7d23      	ldrb	r3, [r4, #20]
 800ad88:	2b0a      	cmp	r3, #10
 800ad8a:	d0df      	beq.n	800ad4c <tcp_input+0x18c>
    LWIP_ASSERT("tcp_input: active pcb->state != LISTEN", pcb->state != LISTEN);
 800ad8c:	7d23      	ldrb	r3, [r4, #20]
 800ad8e:	2b01      	cmp	r3, #1
 800ad90:	d0e3      	beq.n	800ad5a <tcp_input+0x19a>
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800ad92:	7a22      	ldrb	r2, [r4, #8]
 800ad94:	2a00      	cmp	r2, #0
 800ad96:	d0e7      	beq.n	800ad68 <tcp_input+0x1a8>
        (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800ad98:	4b08      	ldr	r3, [pc, #32]	; (800adbc <tcp_input+0x1fc>)
 800ad9a:	685b      	ldr	r3, [r3, #4]
 800ad9c:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800ada0:	3301      	adds	r3, #1
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800ada2:	b2db      	uxtb	r3, r3
 800ada4:	429a      	cmp	r2, r3
 800ada6:	d0df      	beq.n	800ad68 <tcp_input+0x1a8>
 800ada8:	e7e4      	b.n	800ad74 <tcp_input+0x1b4>
 800adaa:	bf00      	nop
 800adac:	20010950 	.word	0x20010950
 800adb0:	080119e8 	.word	0x080119e8
 800adb4:	08011c04 	.word	0x08011c04
 800adb8:	080103a4 	.word	0x080103a4
 800adbc:	2000aff0 	.word	0x2000aff0
 800adc0:	2001095c 	.word	0x2001095c
 800adc4:	20010958 	.word	0x20010958
 800adc8:	20010954 	.word	0x20010954
 800adcc:	08011c38 	.word	0x08011c38
 800add0:	20010944 	.word	0x20010944
 800add4:	20010920 	.word	0x20010920
 800add8:	20010924 	.word	0x20010924
 800addc:	2001095e 	.word	0x2001095e
 800ade0:	20010904 	.word	0x20010904
 800ade4:	08011c1c 	.word	0x08011c1c
 800ade8:	08011c2c 	.word	0x08011c2c
 800adec:	08011c80 	.word	0x08011c80
 800adf0:	08011cac 	.word	0x08011cac
 800adf4:	08011c58 	.word	0x08011c58
    if (pcb->remote_port == tcphdr->src &&
 800adf8:	8ae2      	ldrh	r2, [r4, #22]
 800adfa:	885b      	ldrh	r3, [r3, #2]
 800adfc:	429a      	cmp	r2, r3
 800adfe:	d1b9      	bne.n	800ad74 <tcp_input+0x1b4>
        pcb->local_port == tcphdr->dest &&
 800ae00:	6862      	ldr	r2, [r4, #4]
 800ae02:	4b8f      	ldr	r3, [pc, #572]	; (800b040 <tcp_input+0x480>)
 800ae04:	691b      	ldr	r3, [r3, #16]
 800ae06:	429a      	cmp	r2, r3
 800ae08:	d1b4      	bne.n	800ad74 <tcp_input+0x1b4>
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800ae0a:	6822      	ldr	r2, [r4, #0]
 800ae0c:	4b8c      	ldr	r3, [pc, #560]	; (800b040 <tcp_input+0x480>)
 800ae0e:	695b      	ldr	r3, [r3, #20]
 800ae10:	429a      	cmp	r2, r3
 800ae12:	d1af      	bne.n	800ad74 <tcp_input+0x1b4>
      LWIP_ASSERT("tcp_input: pcb->next != pcb (before cache)", pcb->next != pcb);
 800ae14:	68e3      	ldr	r3, [r4, #12]
 800ae16:	42a3      	cmp	r3, r4
 800ae18:	d04d      	beq.n	800aeb6 <tcp_input+0x2f6>
      if (prev != NULL) {
 800ae1a:	b146      	cbz	r6, 800ae2e <tcp_input+0x26e>
        prev->next = pcb->next;
 800ae1c:	68e3      	ldr	r3, [r4, #12]
 800ae1e:	60f3      	str	r3, [r6, #12]
        pcb->next = tcp_active_pcbs;
 800ae20:	4b88      	ldr	r3, [pc, #544]	; (800b044 <tcp_input+0x484>)
 800ae22:	681a      	ldr	r2, [r3, #0]
 800ae24:	60e2      	str	r2, [r4, #12]
        tcp_active_pcbs = pcb;
 800ae26:	601c      	str	r4, [r3, #0]
      LWIP_ASSERT("tcp_input: pcb->next != pcb (after cache)", pcb->next != pcb);
 800ae28:	68e3      	ldr	r3, [r4, #12]
 800ae2a:	42a3      	cmp	r3, r4
 800ae2c:	d04d      	beq.n	800aeca <tcp_input+0x30a>
    inseg.next = NULL;
 800ae2e:	4a86      	ldr	r2, [pc, #536]	; (800b048 <tcp_input+0x488>)
 800ae30:	2300      	movs	r3, #0
 800ae32:	6013      	str	r3, [r2, #0]
    inseg.len = p->tot_len;
 800ae34:	8929      	ldrh	r1, [r5, #8]
 800ae36:	8111      	strh	r1, [r2, #8]
    inseg.p = p;
 800ae38:	6055      	str	r5, [r2, #4]
    inseg.tcphdr = tcphdr;
 800ae3a:	4984      	ldr	r1, [pc, #528]	; (800b04c <tcp_input+0x48c>)
 800ae3c:	6809      	ldr	r1, [r1, #0]
 800ae3e:	60d1      	str	r1, [r2, #12]
    recv_data = NULL;
 800ae40:	4a83      	ldr	r2, [pc, #524]	; (800b050 <tcp_input+0x490>)
 800ae42:	6013      	str	r3, [r2, #0]
    recv_flags = 0;
 800ae44:	4a83      	ldr	r2, [pc, #524]	; (800b054 <tcp_input+0x494>)
 800ae46:	7013      	strb	r3, [r2, #0]
    recv_acked = 0;
 800ae48:	4a83      	ldr	r2, [pc, #524]	; (800b058 <tcp_input+0x498>)
 800ae4a:	8013      	strh	r3, [r2, #0]
    if (flags & TCP_PSH) {
 800ae4c:	4b83      	ldr	r3, [pc, #524]	; (800b05c <tcp_input+0x49c>)
 800ae4e:	781b      	ldrb	r3, [r3, #0]
 800ae50:	f013 0f08 	tst.w	r3, #8
 800ae54:	f040 817c 	bne.w	800b150 <tcp_input+0x590>
    if (pcb->refused_data != NULL) {
 800ae58:	6fa3      	ldr	r3, [r4, #120]	; 0x78
 800ae5a:	b16b      	cbz	r3, 800ae78 <tcp_input+0x2b8>
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 800ae5c:	4620      	mov	r0, r4
 800ae5e:	f7fe fd7b 	bl	8009958 <tcp_process_refused_data>
 800ae62:	f110 0f0d 	cmn.w	r0, #13
 800ae66:	f000 8178 	beq.w	800b15a <tcp_input+0x59a>
 800ae6a:	6fa3      	ldr	r3, [r4, #120]	; 0x78
 800ae6c:	b123      	cbz	r3, 800ae78 <tcp_input+0x2b8>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 800ae6e:	4b7c      	ldr	r3, [pc, #496]	; (800b060 <tcp_input+0x4a0>)
 800ae70:	881b      	ldrh	r3, [r3, #0]
 800ae72:	2b00      	cmp	r3, #0
 800ae74:	f040 8171 	bne.w	800b15a <tcp_input+0x59a>
    tcp_input_pcb = pcb;
 800ae78:	4b7a      	ldr	r3, [pc, #488]	; (800b064 <tcp_input+0x4a4>)
 800ae7a:	601c      	str	r4, [r3, #0]
  if (flags & TCP_RST) {
 800ae7c:	4b77      	ldr	r3, [pc, #476]	; (800b05c <tcp_input+0x49c>)
 800ae7e:	781b      	ldrb	r3, [r3, #0]
 800ae80:	f013 0f04 	tst.w	r3, #4
 800ae84:	f000 81aa 	beq.w	800b1dc <tcp_input+0x61c>
    if (pcb->state == SYN_SENT) {
 800ae88:	7d21      	ldrb	r1, [r4, #20]
 800ae8a:	2902      	cmp	r1, #2
 800ae8c:	f000 816b 	beq.w	800b166 <tcp_input+0x5a6>
      if (seqno == pcb->rcv_nxt) {
 800ae90:	6a62      	ldr	r2, [r4, #36]	; 0x24
 800ae92:	4b75      	ldr	r3, [pc, #468]	; (800b068 <tcp_input+0x4a8>)
 800ae94:	681b      	ldr	r3, [r3, #0]
 800ae96:	429a      	cmp	r2, r3
 800ae98:	f000 818e 	beq.w	800b1b8 <tcp_input+0x5f8>
      } else  if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 800ae9c:	1a9b      	subs	r3, r3, r2
 800ae9e:	f100 8167 	bmi.w	800b170 <tcp_input+0x5b0>
 800aea2:	8d22      	ldrh	r2, [r4, #40]	; 0x28
 800aea4:	1a9b      	subs	r3, r3, r2
 800aea6:	2b00      	cmp	r3, #0
 800aea8:	f300 8162 	bgt.w	800b170 <tcp_input+0x5b0>
        tcp_ack_now(pcb);
 800aeac:	8b63      	ldrh	r3, [r4, #26]
 800aeae:	f043 0302 	orr.w	r3, r3, #2
 800aeb2:	8363      	strh	r3, [r4, #26]
    if (acceptable) {
 800aeb4:	e15c      	b.n	800b170 <tcp_input+0x5b0>
      LWIP_ASSERT("tcp_input: pcb->next != pcb (before cache)", pcb->next != pcb);
 800aeb6:	4b6d      	ldr	r3, [pc, #436]	; (800b06c <tcp_input+0x4ac>)
 800aeb8:	f240 120d 	movw	r2, #269	; 0x10d
 800aebc:	496c      	ldr	r1, [pc, #432]	; (800b070 <tcp_input+0x4b0>)
 800aebe:	486d      	ldr	r0, [pc, #436]	; (800b074 <tcp_input+0x4b4>)
 800aec0:	f004 f918 	bl	800f0f4 <iprintf>
      if (prev != NULL) {
 800aec4:	2e00      	cmp	r6, #0
 800aec6:	d1a9      	bne.n	800ae1c <tcp_input+0x25c>
 800aec8:	e7ae      	b.n	800ae28 <tcp_input+0x268>
      LWIP_ASSERT("tcp_input: pcb->next != pcb (after cache)", pcb->next != pcb);
 800aeca:	4b68      	ldr	r3, [pc, #416]	; (800b06c <tcp_input+0x4ac>)
 800aecc:	f240 1215 	movw	r2, #277	; 0x115
 800aed0:	4969      	ldr	r1, [pc, #420]	; (800b078 <tcp_input+0x4b8>)
 800aed2:	4868      	ldr	r0, [pc, #416]	; (800b074 <tcp_input+0x4b4>)
 800aed4:	f004 f90e 	bl	800f0f4 <iprintf>
 800aed8:	e7a9      	b.n	800ae2e <tcp_input+0x26e>
      LWIP_ASSERT("tcp_input: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 800aeda:	4643      	mov	r3, r8
 800aedc:	f240 121f 	movw	r2, #287	; 0x11f
 800aee0:	4639      	mov	r1, r7
 800aee2:	4630      	mov	r0, r6
 800aee4:	f004 f906 	bl	800f0f4 <iprintf>
 800aee8:	e00b      	b.n	800af02 <tcp_input+0x342>
      if (pcb->remote_port == tcphdr->src &&
 800aeea:	4b58      	ldr	r3, [pc, #352]	; (800b04c <tcp_input+0x48c>)
 800aeec:	681b      	ldr	r3, [r3, #0]
 800aeee:	8819      	ldrh	r1, [r3, #0]
 800aef0:	8b22      	ldrh	r2, [r4, #24]
 800aef2:	428a      	cmp	r2, r1
 800aef4:	d011      	beq.n	800af1a <tcp_input+0x35a>
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800aef6:	68e4      	ldr	r4, [r4, #12]
 800aef8:	2c00      	cmp	r4, #0
 800aefa:	d051      	beq.n	800afa0 <tcp_input+0x3e0>
      LWIP_ASSERT("tcp_input: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 800aefc:	7d23      	ldrb	r3, [r4, #20]
 800aefe:	2b0a      	cmp	r3, #10
 800af00:	d1eb      	bne.n	800aeda <tcp_input+0x31a>
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800af02:	7a22      	ldrb	r2, [r4, #8]
 800af04:	2a00      	cmp	r2, #0
 800af06:	d0f0      	beq.n	800aeea <tcp_input+0x32a>
          (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800af08:	4b4d      	ldr	r3, [pc, #308]	; (800b040 <tcp_input+0x480>)
 800af0a:	685b      	ldr	r3, [r3, #4]
 800af0c:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800af10:	3301      	adds	r3, #1
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800af12:	b2db      	uxtb	r3, r3
 800af14:	429a      	cmp	r2, r3
 800af16:	d0e8      	beq.n	800aeea <tcp_input+0x32a>
 800af18:	e7ed      	b.n	800aef6 <tcp_input+0x336>
          pcb->local_port == tcphdr->dest &&
 800af1a:	8858      	ldrh	r0, [r3, #2]
      if (pcb->remote_port == tcphdr->src &&
 800af1c:	8ae3      	ldrh	r3, [r4, #22]
 800af1e:	4283      	cmp	r3, r0
 800af20:	d1e9      	bne.n	800aef6 <tcp_input+0x336>
          pcb->local_port == tcphdr->dest &&
 800af22:	6862      	ldr	r2, [r4, #4]
 800af24:	4b46      	ldr	r3, [pc, #280]	; (800b040 <tcp_input+0x480>)
 800af26:	691b      	ldr	r3, [r3, #16]
 800af28:	429a      	cmp	r2, r3
 800af2a:	d1e4      	bne.n	800aef6 <tcp_input+0x336>
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800af2c:	6822      	ldr	r2, [r4, #0]
 800af2e:	4b44      	ldr	r3, [pc, #272]	; (800b040 <tcp_input+0x480>)
 800af30:	695b      	ldr	r3, [r3, #20]
 800af32:	429a      	cmp	r2, r3
 800af34:	d1df      	bne.n	800aef6 <tcp_input+0x336>
  if (flags & TCP_RST) {
 800af36:	4b49      	ldr	r3, [pc, #292]	; (800b05c <tcp_input+0x49c>)
 800af38:	781b      	ldrb	r3, [r3, #0]
 800af3a:	f013 0f04 	tst.w	r3, #4
 800af3e:	d10e      	bne.n	800af5e <tcp_input+0x39e>
  if (flags & TCP_SYN) {
 800af40:	f013 0f02 	tst.w	r3, #2
 800af44:	d01d      	beq.n	800af82 <tcp_input+0x3c2>
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd)) {
 800af46:	4b48      	ldr	r3, [pc, #288]	; (800b068 <tcp_input+0x4a8>)
 800af48:	681a      	ldr	r2, [r3, #0]
 800af4a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800af4c:	1ad3      	subs	r3, r2, r3
 800af4e:	d403      	bmi.n	800af58 <tcp_input+0x398>
 800af50:	8d26      	ldrh	r6, [r4, #40]	; 0x28
 800af52:	1b9b      	subs	r3, r3, r6
 800af54:	2b00      	cmp	r3, #0
 800af56:	dd06      	ble.n	800af66 <tcp_input+0x3a6>
  if ((tcplen > 0)) {
 800af58:	4b41      	ldr	r3, [pc, #260]	; (800b060 <tcp_input+0x4a0>)
 800af5a:	881b      	ldrh	r3, [r3, #0]
 800af5c:	b9c3      	cbnz	r3, 800af90 <tcp_input+0x3d0>
        pbuf_free(p);
 800af5e:	4628      	mov	r0, r5
 800af60:	f7fd fbd2 	bl	8008708 <pbuf_free>
        return;
 800af64:	e63a      	b.n	800abdc <tcp_input+0x1c>
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800af66:	4b45      	ldr	r3, [pc, #276]	; (800b07c <tcp_input+0x4bc>)
 800af68:	4e3d      	ldr	r6, [pc, #244]	; (800b060 <tcp_input+0x4a0>)
 800af6a:	8836      	ldrh	r6, [r6, #0]
 800af6c:	9102      	str	r1, [sp, #8]
 800af6e:	9001      	str	r0, [sp, #4]
 800af70:	1f19      	subs	r1, r3, #4
 800af72:	9100      	str	r1, [sp, #0]
 800af74:	4432      	add	r2, r6
 800af76:	4942      	ldr	r1, [pc, #264]	; (800b080 <tcp_input+0x4c0>)
 800af78:	6809      	ldr	r1, [r1, #0]
 800af7a:	4620      	mov	r0, r4
 800af7c:	f001 fbd8 	bl	800c730 <tcp_rst>
      return;
 800af80:	e7ed      	b.n	800af5e <tcp_input+0x39e>
  } else if (flags & TCP_FIN) {
 800af82:	f013 0f01 	tst.w	r3, #1
 800af86:	d0e7      	beq.n	800af58 <tcp_input+0x398>
    pcb->tmr = tcp_ticks;
 800af88:	4b3e      	ldr	r3, [pc, #248]	; (800b084 <tcp_input+0x4c4>)
 800af8a:	681b      	ldr	r3, [r3, #0]
 800af8c:	6223      	str	r3, [r4, #32]
 800af8e:	e7e3      	b.n	800af58 <tcp_input+0x398>
    tcp_ack_now(pcb);
 800af90:	8b63      	ldrh	r3, [r4, #26]
 800af92:	f043 0302 	orr.w	r3, r3, #2
 800af96:	8363      	strh	r3, [r4, #26]
    tcp_output(pcb);
 800af98:	4620      	mov	r0, r4
 800af9a:	f001 fc4b 	bl	800c834 <tcp_output>
 800af9e:	e7de      	b.n	800af5e <tcp_input+0x39e>
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800afa0:	4b39      	ldr	r3, [pc, #228]	; (800b088 <tcp_input+0x4c8>)
 800afa2:	f8d3 c000 	ldr.w	ip, [r3]
 800afa6:	f1bc 0f00 	cmp.w	ip, #0
 800afaa:	f000 8402 	beq.w	800b7b2 <tcp_input+0xbf2>
          (lpcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800afae:	4b24      	ldr	r3, [pc, #144]	; (800b040 <tcp_input+0x480>)
 800afb0:	685e      	ldr	r6, [r3, #4]
      if (lpcb->local_port == tcphdr->dest) {
 800afb2:	4a26      	ldr	r2, [pc, #152]	; (800b04c <tcp_input+0x48c>)
 800afb4:	6810      	ldr	r0, [r2, #0]
          if (ip_addr_cmp(&lpcb->local_ip, ip_current_dest_addr())) {
 800afb6:	695f      	ldr	r7, [r3, #20]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800afb8:	4664      	mov	r4, ip
    prev = NULL;
 800afba:	2100      	movs	r1, #0
 800afbc:	e009      	b.n	800afd2 <tcp_input+0x412>
      if (lpcb->local_port == tcphdr->dest) {
 800afbe:	8ae2      	ldrh	r2, [r4, #22]
 800afc0:	8843      	ldrh	r3, [r0, #2]
 800afc2:	429a      	cmp	r2, r3
 800afc4:	d00f      	beq.n	800afe6 <tcp_input+0x426>
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800afc6:	68e3      	ldr	r3, [r4, #12]
 800afc8:	4621      	mov	r1, r4
 800afca:	2b00      	cmp	r3, #0
 800afcc:	f000 83f1 	beq.w	800b7b2 <tcp_input+0xbf2>
 800afd0:	461c      	mov	r4, r3
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 800afd2:	7a22      	ldrb	r2, [r4, #8]
 800afd4:	2a00      	cmp	r2, #0
 800afd6:	d0f2      	beq.n	800afbe <tcp_input+0x3fe>
          (lpcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800afd8:	f896 3030 	ldrb.w	r3, [r6, #48]	; 0x30
 800afdc:	3301      	adds	r3, #1
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 800afde:	b2db      	uxtb	r3, r3
 800afe0:	429a      	cmp	r2, r3
 800afe2:	d0ec      	beq.n	800afbe <tcp_input+0x3fe>
 800afe4:	e7ef      	b.n	800afc6 <tcp_input+0x406>
          if (ip_addr_cmp(&lpcb->local_ip, ip_current_dest_addr())) {
 800afe6:	6823      	ldr	r3, [r4, #0]
 800afe8:	42bb      	cmp	r3, r7
 800afea:	d001      	beq.n	800aff0 <tcp_input+0x430>
          } else if (ip_addr_isany(&lpcb->local_ip)) {
 800afec:	2b00      	cmp	r3, #0
 800afee:	d1ea      	bne.n	800afc6 <tcp_input+0x406>
      if (prev != NULL) {
 800aff0:	b129      	cbz	r1, 800affe <tcp_input+0x43e>
        ((struct tcp_pcb_listen *)prev)->next = lpcb->next;
 800aff2:	68e3      	ldr	r3, [r4, #12]
 800aff4:	60cb      	str	r3, [r1, #12]
        lpcb->next = tcp_listen_pcbs.listen_pcbs;
 800aff6:	f8c4 c00c 	str.w	ip, [r4, #12]
        tcp_listen_pcbs.listen_pcbs = lpcb;
 800affa:	4b23      	ldr	r3, [pc, #140]	; (800b088 <tcp_input+0x4c8>)
 800affc:	601c      	str	r4, [r3, #0]
  if (flags & TCP_RST) {
 800affe:	4b17      	ldr	r3, [pc, #92]	; (800b05c <tcp_input+0x49c>)
 800b000:	781b      	ldrb	r3, [r3, #0]
 800b002:	f013 0f04 	tst.w	r3, #4
 800b006:	d105      	bne.n	800b014 <tcp_input+0x454>
  if (flags & TCP_ACK) {
 800b008:	f013 0f10 	tst.w	r3, #16
 800b00c:	d106      	bne.n	800b01c <tcp_input+0x45c>
  } else if (flags & TCP_SYN) {
 800b00e:	f013 0f02 	tst.w	r3, #2
 800b012:	d13b      	bne.n	800b08c <tcp_input+0x4cc>
      pbuf_free(p);
 800b014:	4628      	mov	r0, r5
 800b016:	f7fd fb77 	bl	8008708 <pbuf_free>
      return;
 800b01a:	e5df      	b.n	800abdc <tcp_input+0x1c>
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800b01c:	4b17      	ldr	r3, [pc, #92]	; (800b07c <tcp_input+0x4bc>)
 800b01e:	4a10      	ldr	r2, [pc, #64]	; (800b060 <tcp_input+0x4a0>)
 800b020:	8811      	ldrh	r1, [r2, #0]
 800b022:	4a11      	ldr	r2, [pc, #68]	; (800b068 <tcp_input+0x4a8>)
 800b024:	6812      	ldr	r2, [r2, #0]
 800b026:	8806      	ldrh	r6, [r0, #0]
 800b028:	9602      	str	r6, [sp, #8]
 800b02a:	8840      	ldrh	r0, [r0, #2]
 800b02c:	9001      	str	r0, [sp, #4]
 800b02e:	1f18      	subs	r0, r3, #4
 800b030:	9000      	str	r0, [sp, #0]
 800b032:	440a      	add	r2, r1
 800b034:	4912      	ldr	r1, [pc, #72]	; (800b080 <tcp_input+0x4c0>)
 800b036:	6809      	ldr	r1, [r1, #0]
 800b038:	4620      	mov	r0, r4
 800b03a:	f001 fb79 	bl	800c730 <tcp_rst>
 800b03e:	e7e9      	b.n	800b014 <tcp_input+0x454>
 800b040:	2000aff0 	.word	0x2000aff0
 800b044:	20010904 	.word	0x20010904
 800b048:	20010928 	.word	0x20010928
 800b04c:	20010950 	.word	0x20010950
 800b050:	2001093c 	.word	0x2001093c
 800b054:	20010940 	.word	0x20010940
 800b058:	20010938 	.word	0x20010938
 800b05c:	20010924 	.word	0x20010924
 800b060:	2001095e 	.word	0x2001095e
 800b064:	20010948 	.word	0x20010948
 800b068:	20010944 	.word	0x20010944
 800b06c:	080119e8 	.word	0x080119e8
 800b070:	08011cd4 	.word	0x08011cd4
 800b074:	080103a4 	.word	0x080103a4
 800b078:	08011d00 	.word	0x08011d00
 800b07c:	2000b004 	.word	0x2000b004
 800b080:	20010920 	.word	0x20010920
 800b084:	20010914 	.word	0x20010914
 800b088:	20010910 	.word	0x20010910
    npcb = tcp_alloc(pcb->prio);
 800b08c:	7d60      	ldrb	r0, [r4, #21]
 800b08e:	f7fe faad 	bl	80095ec <tcp_alloc>
    if (npcb == NULL) {
 800b092:	4606      	mov	r6, r0
 800b094:	2800      	cmp	r0, #0
 800b096:	d04c      	beq.n	800b132 <tcp_input+0x572>
    ip_addr_copy(npcb->local_ip, *ip_current_dest_addr());
 800b098:	4ba5      	ldr	r3, [pc, #660]	; (800b330 <tcp_input+0x770>)
 800b09a:	695a      	ldr	r2, [r3, #20]
 800b09c:	6002      	str	r2, [r0, #0]
    ip_addr_copy(npcb->remote_ip, *ip_current_src_addr());
 800b09e:	691b      	ldr	r3, [r3, #16]
 800b0a0:	6043      	str	r3, [r0, #4]
    npcb->local_port = pcb->local_port;
 800b0a2:	8ae3      	ldrh	r3, [r4, #22]
 800b0a4:	82c3      	strh	r3, [r0, #22]
    npcb->remote_port = tcphdr->src;
 800b0a6:	4fa3      	ldr	r7, [pc, #652]	; (800b334 <tcp_input+0x774>)
 800b0a8:	683b      	ldr	r3, [r7, #0]
 800b0aa:	881b      	ldrh	r3, [r3, #0]
 800b0ac:	8303      	strh	r3, [r0, #24]
    npcb->state = SYN_RCVD;
 800b0ae:	2303      	movs	r3, #3
 800b0b0:	7503      	strb	r3, [r0, #20]
    npcb->rcv_nxt = seqno + 1;
 800b0b2:	f8df 82bc 	ldr.w	r8, [pc, #700]	; 800b370 <tcp_input+0x7b0>
 800b0b6:	f8d8 3000 	ldr.w	r3, [r8]
 800b0ba:	3301      	adds	r3, #1
 800b0bc:	6243      	str	r3, [r0, #36]	; 0x24
    npcb->rcv_ann_right_edge = npcb->rcv_nxt;
 800b0be:	62c3      	str	r3, [r0, #44]	; 0x2c
    iss = tcp_next_iss(npcb);
 800b0c0:	f7fe f894 	bl	80091ec <tcp_next_iss>
    npcb->snd_wl2 = iss;
 800b0c4:	65b0      	str	r0, [r6, #88]	; 0x58
    npcb->snd_nxt = iss;
 800b0c6:	6530      	str	r0, [r6, #80]	; 0x50
    npcb->lastack = iss;
 800b0c8:	6470      	str	r0, [r6, #68]	; 0x44
    npcb->snd_lbb = iss;
 800b0ca:	65f0      	str	r0, [r6, #92]	; 0x5c
    npcb->snd_wl1 = seqno - 1;/* initialise to seqno-1 to force window update */
 800b0cc:	f8d8 3000 	ldr.w	r3, [r8]
 800b0d0:	3b01      	subs	r3, #1
 800b0d2:	6573      	str	r3, [r6, #84]	; 0x54
    npcb->callback_arg = pcb->callback_arg;
 800b0d4:	6923      	ldr	r3, [r4, #16]
 800b0d6:	6133      	str	r3, [r6, #16]
    npcb->listener = pcb;
 800b0d8:	67f4      	str	r4, [r6, #124]	; 0x7c
    npcb->so_options = pcb->so_options & SOF_INHERITED;
 800b0da:	7a63      	ldrb	r3, [r4, #9]
 800b0dc:	f003 030c 	and.w	r3, r3, #12
 800b0e0:	7273      	strb	r3, [r6, #9]
    npcb->netif_idx = pcb->netif_idx;
 800b0e2:	7a23      	ldrb	r3, [r4, #8]
 800b0e4:	7233      	strb	r3, [r6, #8]
    TCP_REG_ACTIVE(npcb);
 800b0e6:	4b94      	ldr	r3, [pc, #592]	; (800b338 <tcp_input+0x778>)
 800b0e8:	681a      	ldr	r2, [r3, #0]
 800b0ea:	60f2      	str	r2, [r6, #12]
 800b0ec:	601e      	str	r6, [r3, #0]
 800b0ee:	f001 feb1 	bl	800ce54 <tcp_timer_needed>
 800b0f2:	4b92      	ldr	r3, [pc, #584]	; (800b33c <tcp_input+0x77c>)
 800b0f4:	2201      	movs	r2, #1
 800b0f6:	701a      	strb	r2, [r3, #0]
    tcp_parseopt(npcb);
 800b0f8:	4630      	mov	r0, r6
 800b0fa:	f7fe ff97 	bl	800a02c <tcp_parseopt>
    npcb->snd_wnd = tcphdr->wnd;
 800b0fe:	683b      	ldr	r3, [r7, #0]
 800b100:	89db      	ldrh	r3, [r3, #14]
 800b102:	f8a6 3060 	strh.w	r3, [r6, #96]	; 0x60
    npcb->snd_wnd_max = npcb->snd_wnd;
 800b106:	f8a6 3062 	strh.w	r3, [r6, #98]	; 0x62
    npcb->mss = tcp_eff_send_mss(npcb->mss, &npcb->local_ip, &npcb->remote_ip);
 800b10a:	8e77      	ldrh	r7, [r6, #50]	; 0x32
 800b10c:	1d34      	adds	r4, r6, #4
 800b10e:	4620      	mov	r0, r4
 800b110:	f002 fe68 	bl	800dde4 <ip4_route>
 800b114:	4601      	mov	r1, r0
 800b116:	4622      	mov	r2, r4
 800b118:	4638      	mov	r0, r7
 800b11a:	f7fe f883 	bl	8009224 <tcp_eff_send_mss_netif>
 800b11e:	8670      	strh	r0, [r6, #50]	; 0x32
    rc = tcp_enqueue_flags(npcb, TCP_SYN | TCP_ACK);
 800b120:	2112      	movs	r1, #18
 800b122:	4630      	mov	r0, r6
 800b124:	f001 f956 	bl	800c3d4 <tcp_enqueue_flags>
    if (rc != ERR_OK) {
 800b128:	b968      	cbnz	r0, 800b146 <tcp_input+0x586>
    tcp_output(npcb);
 800b12a:	4630      	mov	r0, r6
 800b12c:	f001 fb82 	bl	800c834 <tcp_output>
 800b130:	e770      	b.n	800b014 <tcp_input+0x454>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 800b132:	69a3      	ldr	r3, [r4, #24]
 800b134:	2b00      	cmp	r3, #0
 800b136:	f43f af6d 	beq.w	800b014 <tcp_input+0x454>
 800b13a:	f04f 32ff 	mov.w	r2, #4294967295
 800b13e:	2100      	movs	r1, #0
 800b140:	6920      	ldr	r0, [r4, #16]
 800b142:	4798      	blx	r3
 800b144:	e766      	b.n	800b014 <tcp_input+0x454>
      tcp_abandon(npcb, 0);
 800b146:	2100      	movs	r1, #0
 800b148:	4630      	mov	r0, r6
 800b14a:	f7fe f92d 	bl	80093a8 <tcp_abandon>
      return;
 800b14e:	e761      	b.n	800b014 <tcp_input+0x454>
      p->flags |= PBUF_FLAG_PUSH;
 800b150:	7b6b      	ldrb	r3, [r5, #13]
 800b152:	f043 0301 	orr.w	r3, r3, #1
 800b156:	736b      	strb	r3, [r5, #13]
 800b158:	e67e      	b.n	800ae58 <tcp_input+0x298>
        if (pcb->rcv_ann_wnd == 0) {
 800b15a:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 800b15c:	b9e3      	cbnz	r3, 800b198 <tcp_input+0x5d8>
          tcp_send_empty_ack(pcb);
 800b15e:	4620      	mov	r0, r4
 800b160:	f001 fb2e 	bl	800c7c0 <tcp_send_empty_ack>
 800b164:	e018      	b.n	800b198 <tcp_input+0x5d8>
      if (ackno == pcb->snd_nxt) {
 800b166:	6d22      	ldr	r2, [r4, #80]	; 0x50
 800b168:	4b75      	ldr	r3, [pc, #468]	; (800b340 <tcp_input+0x780>)
 800b16a:	681b      	ldr	r3, [r3, #0]
 800b16c:	429a      	cmp	r2, r3
 800b16e:	d02b      	beq.n	800b1c8 <tcp_input+0x608>
      if (recv_flags & TF_RESET) {
 800b170:	4b74      	ldr	r3, [pc, #464]	; (800b344 <tcp_input+0x784>)
 800b172:	781b      	ldrb	r3, [r3, #0]
 800b174:	f013 0f08 	tst.w	r3, #8
 800b178:	f000 8295 	beq.w	800b6a6 <tcp_input+0xae6>
        TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_RST);
 800b17c:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 800b180:	b11b      	cbz	r3, 800b18a <tcp_input+0x5ca>
 800b182:	f06f 010d 	mvn.w	r1, #13
 800b186:	6920      	ldr	r0, [r4, #16]
 800b188:	4798      	blx	r3
        tcp_pcb_remove(&tcp_active_pcbs, pcb);
 800b18a:	4621      	mov	r1, r4
 800b18c:	486a      	ldr	r0, [pc, #424]	; (800b338 <tcp_input+0x778>)
 800b18e:	f7fe f8a3 	bl	80092d8 <tcp_pcb_remove>
        tcp_free(pcb);
 800b192:	4620      	mov	r0, r4
 800b194:	f7fd fe16 	bl	8008dc4 <tcp_free>
    tcp_input_pcb = NULL;
 800b198:	2300      	movs	r3, #0
 800b19a:	4a6b      	ldr	r2, [pc, #428]	; (800b348 <tcp_input+0x788>)
 800b19c:	6013      	str	r3, [r2, #0]
    recv_data = NULL;
 800b19e:	4a6b      	ldr	r2, [pc, #428]	; (800b34c <tcp_input+0x78c>)
 800b1a0:	6013      	str	r3, [r2, #0]
    if (inseg.p != NULL) {
 800b1a2:	4b6b      	ldr	r3, [pc, #428]	; (800b350 <tcp_input+0x790>)
 800b1a4:	6858      	ldr	r0, [r3, #4]
 800b1a6:	2800      	cmp	r0, #0
 800b1a8:	f43f ad18 	beq.w	800abdc <tcp_input+0x1c>
      pbuf_free(inseg.p);
 800b1ac:	f7fd faac 	bl	8008708 <pbuf_free>
      inseg.p = NULL;
 800b1b0:	4b67      	ldr	r3, [pc, #412]	; (800b350 <tcp_input+0x790>)
 800b1b2:	2200      	movs	r2, #0
 800b1b4:	605a      	str	r2, [r3, #4]
 800b1b6:	e511      	b.n	800abdc <tcp_input+0x1c>
      LWIP_ASSERT("tcp_input: pcb->state != CLOSED", pcb->state != CLOSED);
 800b1b8:	b931      	cbnz	r1, 800b1c8 <tcp_input+0x608>
 800b1ba:	4b66      	ldr	r3, [pc, #408]	; (800b354 <tcp_input+0x794>)
 800b1bc:	f44f 724e 	mov.w	r2, #824	; 0x338
 800b1c0:	4965      	ldr	r1, [pc, #404]	; (800b358 <tcp_input+0x798>)
 800b1c2:	4866      	ldr	r0, [pc, #408]	; (800b35c <tcp_input+0x79c>)
 800b1c4:	f003 ff96 	bl	800f0f4 <iprintf>
      recv_flags |= TF_RESET;
 800b1c8:	4a5e      	ldr	r2, [pc, #376]	; (800b344 <tcp_input+0x784>)
 800b1ca:	7813      	ldrb	r3, [r2, #0]
 800b1cc:	f043 0308 	orr.w	r3, r3, #8
 800b1d0:	7013      	strb	r3, [r2, #0]
      tcp_clear_flags(pcb, TF_ACK_DELAY);
 800b1d2:	8b63      	ldrh	r3, [r4, #26]
 800b1d4:	f023 0301 	bic.w	r3, r3, #1
 800b1d8:	8363      	strh	r3, [r4, #26]
      return ERR_RST;
 800b1da:	e7c9      	b.n	800b170 <tcp_input+0x5b0>
  if ((flags & TCP_SYN) && (pcb->state != SYN_SENT && pcb->state != SYN_RCVD)) {
 800b1dc:	f013 0f02 	tst.w	r3, #2
 800b1e0:	d004      	beq.n	800b1ec <tcp_input+0x62c>
 800b1e2:	7d23      	ldrb	r3, [r4, #20]
 800b1e4:	3b02      	subs	r3, #2
 800b1e6:	b2db      	uxtb	r3, r3
 800b1e8:	2b01      	cmp	r3, #1
 800b1ea:	d81c      	bhi.n	800b226 <tcp_input+0x666>
  if ((pcb->flags & TF_RXCLOSED) == 0) {
 800b1ec:	8b63      	ldrh	r3, [r4, #26]
 800b1ee:	f013 0f10 	tst.w	r3, #16
 800b1f2:	d102      	bne.n	800b1fa <tcp_input+0x63a>
    pcb->tmr = tcp_ticks;
 800b1f4:	4b5a      	ldr	r3, [pc, #360]	; (800b360 <tcp_input+0x7a0>)
 800b1f6:	681b      	ldr	r3, [r3, #0]
 800b1f8:	6223      	str	r3, [r4, #32]
  pcb->keep_cnt_sent = 0;
 800b1fa:	2300      	movs	r3, #0
 800b1fc:	f884 309b 	strb.w	r3, [r4, #155]	; 0x9b
  pcb->persist_probe = 0;
 800b200:	f884 309a 	strb.w	r3, [r4, #154]	; 0x9a
  tcp_parseopt(pcb);
 800b204:	4620      	mov	r0, r4
 800b206:	f7fe ff11 	bl	800a02c <tcp_parseopt>
  switch (pcb->state) {
 800b20a:	7d23      	ldrb	r3, [r4, #20]
 800b20c:	3b02      	subs	r3, #2
 800b20e:	2b07      	cmp	r3, #7
 800b210:	d8ae      	bhi.n	800b170 <tcp_input+0x5b0>
 800b212:	e8df f013 	tbh	[pc, r3, lsl #1]
 800b216:	000d      	.short	0x000d
 800b218:	014f00d1 	.word	0x014f00d1
 800b21c:	01b1015f 	.word	0x01b1015f
 800b220:	01fd014f 	.word	0x01fd014f
 800b224:	022f      	.short	0x022f
    tcp_ack_now(pcb);
 800b226:	8b63      	ldrh	r3, [r4, #26]
 800b228:	f043 0302 	orr.w	r3, r3, #2
 800b22c:	8363      	strh	r3, [r4, #26]
    return ERR_OK;
 800b22e:	e79f      	b.n	800b170 <tcp_input+0x5b0>
      if ((flags & TCP_ACK) && (flags & TCP_SYN)
 800b230:	4b4c      	ldr	r3, [pc, #304]	; (800b364 <tcp_input+0x7a4>)
 800b232:	781a      	ldrb	r2, [r3, #0]
 800b234:	f002 0312 	and.w	r3, r2, #18
 800b238:	2b12      	cmp	r3, #18
 800b23a:	d020      	beq.n	800b27e <tcp_input+0x6be>
      else if (flags & TCP_ACK) {
 800b23c:	f012 0f10 	tst.w	r2, #16
 800b240:	d096      	beq.n	800b170 <tcp_input+0x5b0>
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800b242:	4b3c      	ldr	r3, [pc, #240]	; (800b334 <tcp_input+0x774>)
 800b244:	6819      	ldr	r1, [r3, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800b246:	4b48      	ldr	r3, [pc, #288]	; (800b368 <tcp_input+0x7a8>)
 800b248:	4a48      	ldr	r2, [pc, #288]	; (800b36c <tcp_input+0x7ac>)
 800b24a:	8810      	ldrh	r0, [r2, #0]
 800b24c:	4a48      	ldr	r2, [pc, #288]	; (800b370 <tcp_input+0x7b0>)
 800b24e:	6812      	ldr	r2, [r2, #0]
 800b250:	880d      	ldrh	r5, [r1, #0]
 800b252:	9502      	str	r5, [sp, #8]
 800b254:	8849      	ldrh	r1, [r1, #2]
 800b256:	9101      	str	r1, [sp, #4]
 800b258:	1f19      	subs	r1, r3, #4
 800b25a:	9100      	str	r1, [sp, #0]
 800b25c:	4402      	add	r2, r0
 800b25e:	4938      	ldr	r1, [pc, #224]	; (800b340 <tcp_input+0x780>)
 800b260:	6809      	ldr	r1, [r1, #0]
 800b262:	4620      	mov	r0, r4
 800b264:	f001 fa64 	bl	800c730 <tcp_rst>
        if (pcb->nrtx < TCP_SYNMAXRTX) {
 800b268:	f894 3042 	ldrb.w	r3, [r4, #66]	; 0x42
 800b26c:	2b05      	cmp	r3, #5
 800b26e:	f63f af7f 	bhi.w	800b170 <tcp_input+0x5b0>
          pcb->rtime = 0;
 800b272:	2300      	movs	r3, #0
 800b274:	8623      	strh	r3, [r4, #48]	; 0x30
          tcp_rexmit_rto(pcb);
 800b276:	4620      	mov	r0, r4
 800b278:	f001 fcc4 	bl	800cc04 <tcp_rexmit_rto>
 800b27c:	e778      	b.n	800b170 <tcp_input+0x5b0>
          && (ackno == pcb->lastack + 1)) {
 800b27e:	4b30      	ldr	r3, [pc, #192]	; (800b340 <tcp_input+0x780>)
 800b280:	6819      	ldr	r1, [r3, #0]
 800b282:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800b284:	3301      	adds	r3, #1
 800b286:	428b      	cmp	r3, r1
 800b288:	d1d8      	bne.n	800b23c <tcp_input+0x67c>
        pcb->rcv_nxt = seqno + 1;
 800b28a:	4b39      	ldr	r3, [pc, #228]	; (800b370 <tcp_input+0x7b0>)
 800b28c:	681b      	ldr	r3, [r3, #0]
 800b28e:	1c5a      	adds	r2, r3, #1
 800b290:	6262      	str	r2, [r4, #36]	; 0x24
        pcb->rcv_ann_right_edge = pcb->rcv_nxt;
 800b292:	62e2      	str	r2, [r4, #44]	; 0x2c
        pcb->lastack = ackno;
 800b294:	6461      	str	r1, [r4, #68]	; 0x44
        pcb->snd_wnd = tcphdr->wnd;
 800b296:	4a27      	ldr	r2, [pc, #156]	; (800b334 <tcp_input+0x774>)
 800b298:	6812      	ldr	r2, [r2, #0]
 800b29a:	89d2      	ldrh	r2, [r2, #14]
 800b29c:	f8a4 2060 	strh.w	r2, [r4, #96]	; 0x60
        pcb->snd_wnd_max = pcb->snd_wnd;
 800b2a0:	f8a4 2062 	strh.w	r2, [r4, #98]	; 0x62
        pcb->snd_wl1 = seqno - 1; /* initialise to seqno - 1 to force window update */
 800b2a4:	3b01      	subs	r3, #1
 800b2a6:	6563      	str	r3, [r4, #84]	; 0x54
        pcb->state = ESTABLISHED;
 800b2a8:	2304      	movs	r3, #4
 800b2aa:	7523      	strb	r3, [r4, #20]
        pcb->mss = tcp_eff_send_mss(pcb->mss, &pcb->local_ip, &pcb->remote_ip);
 800b2ac:	8e66      	ldrh	r6, [r4, #50]	; 0x32
 800b2ae:	18e5      	adds	r5, r4, r3
 800b2b0:	4628      	mov	r0, r5
 800b2b2:	f002 fd97 	bl	800dde4 <ip4_route>
 800b2b6:	4601      	mov	r1, r0
 800b2b8:	462a      	mov	r2, r5
 800b2ba:	4630      	mov	r0, r6
 800b2bc:	f7fd ffb2 	bl	8009224 <tcp_eff_send_mss_netif>
 800b2c0:	4603      	mov	r3, r0
 800b2c2:	8660      	strh	r0, [r4, #50]	; 0x32
        pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 800b2c4:	0041      	lsls	r1, r0, #1
 800b2c6:	f241 121c 	movw	r2, #4380	; 0x111c
 800b2ca:	428a      	cmp	r2, r1
 800b2cc:	bf38      	it	cc
 800b2ce:	460a      	movcc	r2, r1
 800b2d0:	ebb2 0f80 	cmp.w	r2, r0, lsl #2
 800b2d4:	d94e      	bls.n	800b374 <tcp_input+0x7b4>
 800b2d6:	0083      	lsls	r3, r0, #2
 800b2d8:	b29b      	uxth	r3, r3
 800b2da:	f8a4 3048 	strh.w	r3, [r4, #72]	; 0x48
        LWIP_ASSERT("pcb->snd_queuelen > 0", (pcb->snd_queuelen > 0));
 800b2de:	f8b4 3066 	ldrh.w	r3, [r4, #102]	; 0x66
 800b2e2:	2b00      	cmp	r3, #0
 800b2e4:	d04f      	beq.n	800b386 <tcp_input+0x7c6>
        --pcb->snd_queuelen;
 800b2e6:	f8b4 3066 	ldrh.w	r3, [r4, #102]	; 0x66
 800b2ea:	3b01      	subs	r3, #1
 800b2ec:	f8a4 3066 	strh.w	r3, [r4, #102]	; 0x66
        rseg = pcb->unacked;
 800b2f0:	6f25      	ldr	r5, [r4, #112]	; 0x70
        if (rseg == NULL) {
 800b2f2:	2d00      	cmp	r5, #0
 800b2f4:	d04f      	beq.n	800b396 <tcp_input+0x7d6>
          pcb->unacked = rseg->next;
 800b2f6:	682b      	ldr	r3, [r5, #0]
 800b2f8:	6723      	str	r3, [r4, #112]	; 0x70
        tcp_seg_free(rseg);
 800b2fa:	4628      	mov	r0, r5
 800b2fc:	f7fd febe 	bl	800907c <tcp_seg_free>
        if (pcb->unacked == NULL) {
 800b300:	6f23      	ldr	r3, [r4, #112]	; 0x70
 800b302:	2b00      	cmp	r3, #0
 800b304:	d054      	beq.n	800b3b0 <tcp_input+0x7f0>
          pcb->rtime = 0;
 800b306:	2300      	movs	r3, #0
 800b308:	8623      	strh	r3, [r4, #48]	; 0x30
          pcb->nrtx = 0;
 800b30a:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
        TCP_EVENT_CONNECTED(pcb, ERR_OK, err);
 800b30e:	f8d4 3088 	ldr.w	r3, [r4, #136]	; 0x88
 800b312:	b13b      	cbz	r3, 800b324 <tcp_input+0x764>
 800b314:	2200      	movs	r2, #0
 800b316:	4621      	mov	r1, r4
 800b318:	6920      	ldr	r0, [r4, #16]
 800b31a:	4798      	blx	r3
        if (err == ERR_ABRT) {
 800b31c:	f110 0f0d 	cmn.w	r0, #13
 800b320:	f43f af3a 	beq.w	800b198 <tcp_input+0x5d8>
        tcp_ack_now(pcb);
 800b324:	8b63      	ldrh	r3, [r4, #26]
 800b326:	f043 0302 	orr.w	r3, r3, #2
 800b32a:	8363      	strh	r3, [r4, #26]
 800b32c:	e720      	b.n	800b170 <tcp_input+0x5b0>
 800b32e:	bf00      	nop
 800b330:	2000aff0 	.word	0x2000aff0
 800b334:	20010950 	.word	0x20010950
 800b338:	20010904 	.word	0x20010904
 800b33c:	20010908 	.word	0x20010908
 800b340:	20010920 	.word	0x20010920
 800b344:	20010940 	.word	0x20010940
 800b348:	20010948 	.word	0x20010948
 800b34c:	2001093c 	.word	0x2001093c
 800b350:	20010928 	.word	0x20010928
 800b354:	080119e8 	.word	0x080119e8
 800b358:	08011d5c 	.word	0x08011d5c
 800b35c:	080103a4 	.word	0x080103a4
 800b360:	20010914 	.word	0x20010914
 800b364:	20010924 	.word	0x20010924
 800b368:	2000b004 	.word	0x2000b004
 800b36c:	2001095e 	.word	0x2001095e
 800b370:	20010944 	.word	0x20010944
        pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 800b374:	f241 121c 	movw	r2, #4380	; 0x111c
 800b378:	4291      	cmp	r1, r2
 800b37a:	bf86      	itte	hi
 800b37c:	0043      	lslhi	r3, r0, #1
 800b37e:	b29b      	uxthhi	r3, r3
 800b380:	f241 131c 	movwls	r3, #4380	; 0x111c
 800b384:	e7a9      	b.n	800b2da <tcp_input+0x71a>
        LWIP_ASSERT("pcb->snd_queuelen > 0", (pcb->snd_queuelen > 0));
 800b386:	4b92      	ldr	r3, [pc, #584]	; (800b5d0 <tcp_input+0xa10>)
 800b388:	f44f 725b 	mov.w	r2, #876	; 0x36c
 800b38c:	4991      	ldr	r1, [pc, #580]	; (800b5d4 <tcp_input+0xa14>)
 800b38e:	4892      	ldr	r0, [pc, #584]	; (800b5d8 <tcp_input+0xa18>)
 800b390:	f003 feb0 	bl	800f0f4 <iprintf>
 800b394:	e7a7      	b.n	800b2e6 <tcp_input+0x726>
          rseg = pcb->unsent;
 800b396:	6ee5      	ldr	r5, [r4, #108]	; 0x6c
          LWIP_ASSERT("no segment to free", rseg != NULL);
 800b398:	b115      	cbz	r5, 800b3a0 <tcp_input+0x7e0>
          pcb->unsent = rseg->next;
 800b39a:	682b      	ldr	r3, [r5, #0]
 800b39c:	66e3      	str	r3, [r4, #108]	; 0x6c
 800b39e:	e7ac      	b.n	800b2fa <tcp_input+0x73a>
          LWIP_ASSERT("no segment to free", rseg != NULL);
 800b3a0:	4b8b      	ldr	r3, [pc, #556]	; (800b5d0 <tcp_input+0xa10>)
 800b3a2:	f44f 725d 	mov.w	r2, #884	; 0x374
 800b3a6:	498d      	ldr	r1, [pc, #564]	; (800b5dc <tcp_input+0xa1c>)
 800b3a8:	488b      	ldr	r0, [pc, #556]	; (800b5d8 <tcp_input+0xa18>)
 800b3aa:	f003 fea3 	bl	800f0f4 <iprintf>
 800b3ae:	e7f4      	b.n	800b39a <tcp_input+0x7da>
          pcb->rtime = -1;
 800b3b0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800b3b4:	8623      	strh	r3, [r4, #48]	; 0x30
 800b3b6:	e7aa      	b.n	800b30e <tcp_input+0x74e>
      if (flags & TCP_ACK) {
 800b3b8:	4b89      	ldr	r3, [pc, #548]	; (800b5e0 <tcp_input+0xa20>)
 800b3ba:	781b      	ldrb	r3, [r3, #0]
 800b3bc:	f013 0f10 	tst.w	r3, #16
 800b3c0:	d069      	beq.n	800b496 <tcp_input+0x8d6>
        if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800b3c2:	4b88      	ldr	r3, [pc, #544]	; (800b5e4 <tcp_input+0xa24>)
 800b3c4:	6819      	ldr	r1, [r3, #0]
 800b3c6:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800b3c8:	43db      	mvns	r3, r3
 800b3ca:	42cb      	cmn	r3, r1
 800b3cc:	d403      	bmi.n	800b3d6 <tcp_input+0x816>
 800b3ce:	6d23      	ldr	r3, [r4, #80]	; 0x50
 800b3d0:	1acb      	subs	r3, r1, r3
 800b3d2:	2b00      	cmp	r3, #0
 800b3d4:	dd11      	ble.n	800b3fa <tcp_input+0x83a>
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800b3d6:	4b84      	ldr	r3, [pc, #528]	; (800b5e8 <tcp_input+0xa28>)
 800b3d8:	6818      	ldr	r0, [r3, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800b3da:	4b84      	ldr	r3, [pc, #528]	; (800b5ec <tcp_input+0xa2c>)
 800b3dc:	4a84      	ldr	r2, [pc, #528]	; (800b5f0 <tcp_input+0xa30>)
 800b3de:	8815      	ldrh	r5, [r2, #0]
 800b3e0:	4a84      	ldr	r2, [pc, #528]	; (800b5f4 <tcp_input+0xa34>)
 800b3e2:	6812      	ldr	r2, [r2, #0]
 800b3e4:	8806      	ldrh	r6, [r0, #0]
 800b3e6:	9602      	str	r6, [sp, #8]
 800b3e8:	8840      	ldrh	r0, [r0, #2]
 800b3ea:	9001      	str	r0, [sp, #4]
 800b3ec:	1f18      	subs	r0, r3, #4
 800b3ee:	9000      	str	r0, [sp, #0]
 800b3f0:	442a      	add	r2, r5
 800b3f2:	4620      	mov	r0, r4
 800b3f4:	f001 f99c 	bl	800c730 <tcp_rst>
 800b3f8:	e6ba      	b.n	800b170 <tcp_input+0x5b0>
          pcb->state = ESTABLISHED;
 800b3fa:	2304      	movs	r3, #4
 800b3fc:	7523      	strb	r3, [r4, #20]
          if (pcb->listener == NULL) {
 800b3fe:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
 800b400:	2b00      	cmp	r3, #0
 800b402:	d03b      	beq.n	800b47c <tcp_input+0x8bc>
            LWIP_ASSERT("pcb->listener->accept != NULL", pcb->listener->accept != NULL);
 800b404:	699b      	ldr	r3, [r3, #24]
 800b406:	b34b      	cbz	r3, 800b45c <tcp_input+0x89c>
            TCP_EVENT_ACCEPT(pcb->listener, pcb, pcb->callback_arg, ERR_OK, err);
 800b408:	2200      	movs	r2, #0
 800b40a:	4621      	mov	r1, r4
 800b40c:	6920      	ldr	r0, [r4, #16]
 800b40e:	4798      	blx	r3
          if (err != ERR_OK) {
 800b410:	2800      	cmp	r0, #0
 800b412:	d12f      	bne.n	800b474 <tcp_input+0x8b4>
          tcp_receive(pcb);
 800b414:	4620      	mov	r0, r4
 800b416:	f7fe ff47 	bl	800a2a8 <tcp_receive>
          if (recv_acked != 0) {
 800b41a:	4b77      	ldr	r3, [pc, #476]	; (800b5f8 <tcp_input+0xa38>)
 800b41c:	881b      	ldrh	r3, [r3, #0]
 800b41e:	b113      	cbz	r3, 800b426 <tcp_input+0x866>
            recv_acked--;
 800b420:	3b01      	subs	r3, #1
 800b422:	4a75      	ldr	r2, [pc, #468]	; (800b5f8 <tcp_input+0xa38>)
 800b424:	8013      	strh	r3, [r2, #0]
          pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 800b426:	8e63      	ldrh	r3, [r4, #50]	; 0x32
 800b428:	0059      	lsls	r1, r3, #1
 800b42a:	f241 121c 	movw	r2, #4380	; 0x111c
 800b42e:	428a      	cmp	r2, r1
 800b430:	bf38      	it	cc
 800b432:	460a      	movcc	r2, r1
 800b434:	ebb2 0f83 	cmp.w	r2, r3, lsl #2
 800b438:	d924      	bls.n	800b484 <tcp_input+0x8c4>
 800b43a:	009b      	lsls	r3, r3, #2
 800b43c:	b29b      	uxth	r3, r3
 800b43e:	f8a4 3048 	strh.w	r3, [r4, #72]	; 0x48
          if (recv_flags & TF_GOT_FIN) {
 800b442:	4b6e      	ldr	r3, [pc, #440]	; (800b5fc <tcp_input+0xa3c>)
 800b444:	781b      	ldrb	r3, [r3, #0]
 800b446:	f013 0f20 	tst.w	r3, #32
 800b44a:	f43f ae91 	beq.w	800b170 <tcp_input+0x5b0>
            tcp_ack_now(pcb);
 800b44e:	8b63      	ldrh	r3, [r4, #26]
 800b450:	f043 0302 	orr.w	r3, r3, #2
 800b454:	8363      	strh	r3, [r4, #26]
            pcb->state = CLOSE_WAIT;
 800b456:	2307      	movs	r3, #7
 800b458:	7523      	strb	r3, [r4, #20]
 800b45a:	e689      	b.n	800b170 <tcp_input+0x5b0>
            LWIP_ASSERT("pcb->listener->accept != NULL", pcb->listener->accept != NULL);
 800b45c:	4b5c      	ldr	r3, [pc, #368]	; (800b5d0 <tcp_input+0xa10>)
 800b45e:	f44f 726a 	mov.w	r2, #936	; 0x3a8
 800b462:	4967      	ldr	r1, [pc, #412]	; (800b600 <tcp_input+0xa40>)
 800b464:	485c      	ldr	r0, [pc, #368]	; (800b5d8 <tcp_input+0xa18>)
 800b466:	f003 fe45 	bl	800f0f4 <iprintf>
            TCP_EVENT_ACCEPT(pcb->listener, pcb, pcb->callback_arg, ERR_OK, err);
 800b46a:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
 800b46c:	699b      	ldr	r3, [r3, #24]
 800b46e:	2b00      	cmp	r3, #0
 800b470:	d1ca      	bne.n	800b408 <tcp_input+0x848>
 800b472:	e003      	b.n	800b47c <tcp_input+0x8bc>
            if (err != ERR_ABRT) {
 800b474:	f110 0f0d 	cmn.w	r0, #13
 800b478:	f43f ae8e 	beq.w	800b198 <tcp_input+0x5d8>
              tcp_abort(pcb);
 800b47c:	4620      	mov	r0, r4
 800b47e:	f7fe f819 	bl	80094b4 <tcp_abort>
 800b482:	e689      	b.n	800b198 <tcp_input+0x5d8>
          pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 800b484:	f241 121c 	movw	r2, #4380	; 0x111c
 800b488:	4291      	cmp	r1, r2
 800b48a:	bf86      	itte	hi
 800b48c:	005b      	lslhi	r3, r3, #1
 800b48e:	b29b      	uxthhi	r3, r3
 800b490:	f241 131c 	movwls	r3, #4380	; 0x111c
 800b494:	e7d3      	b.n	800b43e <tcp_input+0x87e>
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
 800b496:	f013 0f02 	tst.w	r3, #2
 800b49a:	f43f ae69 	beq.w	800b170 <tcp_input+0x5b0>
 800b49e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b4a0:	3b01      	subs	r3, #1
 800b4a2:	4a54      	ldr	r2, [pc, #336]	; (800b5f4 <tcp_input+0xa34>)
 800b4a4:	6812      	ldr	r2, [r2, #0]
 800b4a6:	4293      	cmp	r3, r2
 800b4a8:	f47f ae62 	bne.w	800b170 <tcp_input+0x5b0>
        tcp_rexmit(pcb);
 800b4ac:	4620      	mov	r0, r4
 800b4ae:	f001 f8bb 	bl	800c628 <tcp_rexmit>
 800b4b2:	e65d      	b.n	800b170 <tcp_input+0x5b0>
      tcp_receive(pcb);
 800b4b4:	4620      	mov	r0, r4
 800b4b6:	f7fe fef7 	bl	800a2a8 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) { /* passive close */
 800b4ba:	4b50      	ldr	r3, [pc, #320]	; (800b5fc <tcp_input+0xa3c>)
 800b4bc:	781b      	ldrb	r3, [r3, #0]
 800b4be:	f013 0f20 	tst.w	r3, #32
 800b4c2:	f43f ae55 	beq.w	800b170 <tcp_input+0x5b0>
        tcp_ack_now(pcb);
 800b4c6:	8b63      	ldrh	r3, [r4, #26]
 800b4c8:	f043 0302 	orr.w	r3, r3, #2
 800b4cc:	8363      	strh	r3, [r4, #26]
        pcb->state = CLOSE_WAIT;
 800b4ce:	2307      	movs	r3, #7
 800b4d0:	7523      	strb	r3, [r4, #20]
 800b4d2:	e64d      	b.n	800b170 <tcp_input+0x5b0>
      tcp_receive(pcb);
 800b4d4:	4620      	mov	r0, r4
 800b4d6:	f7fe fee7 	bl	800a2a8 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 800b4da:	4b48      	ldr	r3, [pc, #288]	; (800b5fc <tcp_input+0xa3c>)
 800b4dc:	781b      	ldrb	r3, [r3, #0]
 800b4de:	f013 0f20 	tst.w	r3, #32
 800b4e2:	d036      	beq.n	800b552 <tcp_input+0x992>
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800b4e4:	4b3e      	ldr	r3, [pc, #248]	; (800b5e0 <tcp_input+0xa20>)
 800b4e6:	781b      	ldrb	r3, [r3, #0]
 800b4e8:	f013 0f10 	tst.w	r3, #16
 800b4ec:	d004      	beq.n	800b4f8 <tcp_input+0x938>
 800b4ee:	6d22      	ldr	r2, [r4, #80]	; 0x50
 800b4f0:	4b3c      	ldr	r3, [pc, #240]	; (800b5e4 <tcp_input+0xa24>)
 800b4f2:	681b      	ldr	r3, [r3, #0]
 800b4f4:	429a      	cmp	r2, r3
 800b4f6:	d006      	beq.n	800b506 <tcp_input+0x946>
          tcp_ack_now(pcb);
 800b4f8:	8b63      	ldrh	r3, [r4, #26]
 800b4fa:	f043 0302 	orr.w	r3, r3, #2
 800b4fe:	8363      	strh	r3, [r4, #26]
          pcb->state = CLOSING;
 800b500:	2308      	movs	r3, #8
 800b502:	7523      	strb	r3, [r4, #20]
 800b504:	e634      	b.n	800b170 <tcp_input+0x5b0>
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800b506:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 800b508:	2b00      	cmp	r3, #0
 800b50a:	d1f5      	bne.n	800b4f8 <tcp_input+0x938>
          tcp_ack_now(pcb);
 800b50c:	8b63      	ldrh	r3, [r4, #26]
 800b50e:	f043 0302 	orr.w	r3, r3, #2
 800b512:	8363      	strh	r3, [r4, #26]
          tcp_pcb_purge(pcb);
 800b514:	4620      	mov	r0, r4
 800b516:	f7fd feaf 	bl	8009278 <tcp_pcb_purge>
          TCP_RMV_ACTIVE(pcb);
 800b51a:	4b3a      	ldr	r3, [pc, #232]	; (800b604 <tcp_input+0xa44>)
 800b51c:	681b      	ldr	r3, [r3, #0]
 800b51e:	42a3      	cmp	r3, r4
 800b520:	d005      	beq.n	800b52e <tcp_input+0x96e>
 800b522:	b153      	cbz	r3, 800b53a <tcp_input+0x97a>
 800b524:	68da      	ldr	r2, [r3, #12]
 800b526:	42a2      	cmp	r2, r4
 800b528:	d005      	beq.n	800b536 <tcp_input+0x976>
 800b52a:	4613      	mov	r3, r2
 800b52c:	e7f9      	b.n	800b522 <tcp_input+0x962>
 800b52e:	68e2      	ldr	r2, [r4, #12]
 800b530:	4b34      	ldr	r3, [pc, #208]	; (800b604 <tcp_input+0xa44>)
 800b532:	601a      	str	r2, [r3, #0]
 800b534:	e001      	b.n	800b53a <tcp_input+0x97a>
 800b536:	68e2      	ldr	r2, [r4, #12]
 800b538:	60da      	str	r2, [r3, #12]
 800b53a:	4b33      	ldr	r3, [pc, #204]	; (800b608 <tcp_input+0xa48>)
 800b53c:	2201      	movs	r2, #1
 800b53e:	701a      	strb	r2, [r3, #0]
          pcb->state = TIME_WAIT;
 800b540:	230a      	movs	r3, #10
 800b542:	7523      	strb	r3, [r4, #20]
          TCP_REG(&tcp_tw_pcbs, pcb);
 800b544:	4b31      	ldr	r3, [pc, #196]	; (800b60c <tcp_input+0xa4c>)
 800b546:	681a      	ldr	r2, [r3, #0]
 800b548:	60e2      	str	r2, [r4, #12]
 800b54a:	601c      	str	r4, [r3, #0]
 800b54c:	f001 fc82 	bl	800ce54 <tcp_timer_needed>
 800b550:	e60e      	b.n	800b170 <tcp_input+0x5b0>
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800b552:	4b23      	ldr	r3, [pc, #140]	; (800b5e0 <tcp_input+0xa20>)
 800b554:	781b      	ldrb	r3, [r3, #0]
 800b556:	f013 0f10 	tst.w	r3, #16
 800b55a:	f43f ae09 	beq.w	800b170 <tcp_input+0x5b0>
 800b55e:	6d22      	ldr	r2, [r4, #80]	; 0x50
 800b560:	4b20      	ldr	r3, [pc, #128]	; (800b5e4 <tcp_input+0xa24>)
 800b562:	681b      	ldr	r3, [r3, #0]
 800b564:	429a      	cmp	r2, r3
 800b566:	f47f ae03 	bne.w	800b170 <tcp_input+0x5b0>
 800b56a:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 800b56c:	2b00      	cmp	r3, #0
 800b56e:	f47f adff 	bne.w	800b170 <tcp_input+0x5b0>
        pcb->state = FIN_WAIT_2;
 800b572:	2306      	movs	r3, #6
 800b574:	7523      	strb	r3, [r4, #20]
 800b576:	e5fb      	b.n	800b170 <tcp_input+0x5b0>
      tcp_receive(pcb);
 800b578:	4620      	mov	r0, r4
 800b57a:	f7fe fe95 	bl	800a2a8 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 800b57e:	4b1f      	ldr	r3, [pc, #124]	; (800b5fc <tcp_input+0xa3c>)
 800b580:	781b      	ldrb	r3, [r3, #0]
 800b582:	f013 0f20 	tst.w	r3, #32
 800b586:	f43f adf3 	beq.w	800b170 <tcp_input+0x5b0>
        tcp_ack_now(pcb);
 800b58a:	8b63      	ldrh	r3, [r4, #26]
 800b58c:	f043 0302 	orr.w	r3, r3, #2
 800b590:	8363      	strh	r3, [r4, #26]
        tcp_pcb_purge(pcb);
 800b592:	4620      	mov	r0, r4
 800b594:	f7fd fe70 	bl	8009278 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 800b598:	4b1a      	ldr	r3, [pc, #104]	; (800b604 <tcp_input+0xa44>)
 800b59a:	681b      	ldr	r3, [r3, #0]
 800b59c:	42a3      	cmp	r3, r4
 800b59e:	d005      	beq.n	800b5ac <tcp_input+0x9ec>
 800b5a0:	b153      	cbz	r3, 800b5b8 <tcp_input+0x9f8>
 800b5a2:	68da      	ldr	r2, [r3, #12]
 800b5a4:	42a2      	cmp	r2, r4
 800b5a6:	d005      	beq.n	800b5b4 <tcp_input+0x9f4>
 800b5a8:	4613      	mov	r3, r2
 800b5aa:	e7f9      	b.n	800b5a0 <tcp_input+0x9e0>
 800b5ac:	68e2      	ldr	r2, [r4, #12]
 800b5ae:	4b15      	ldr	r3, [pc, #84]	; (800b604 <tcp_input+0xa44>)
 800b5b0:	601a      	str	r2, [r3, #0]
 800b5b2:	e001      	b.n	800b5b8 <tcp_input+0x9f8>
 800b5b4:	68e2      	ldr	r2, [r4, #12]
 800b5b6:	60da      	str	r2, [r3, #12]
 800b5b8:	4b13      	ldr	r3, [pc, #76]	; (800b608 <tcp_input+0xa48>)
 800b5ba:	2201      	movs	r2, #1
 800b5bc:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 800b5be:	230a      	movs	r3, #10
 800b5c0:	7523      	strb	r3, [r4, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 800b5c2:	4b12      	ldr	r3, [pc, #72]	; (800b60c <tcp_input+0xa4c>)
 800b5c4:	681a      	ldr	r2, [r3, #0]
 800b5c6:	60e2      	str	r2, [r4, #12]
 800b5c8:	601c      	str	r4, [r3, #0]
 800b5ca:	f001 fc43 	bl	800ce54 <tcp_timer_needed>
 800b5ce:	e5cf      	b.n	800b170 <tcp_input+0x5b0>
 800b5d0:	080119e8 	.word	0x080119e8
 800b5d4:	08011d7c 	.word	0x08011d7c
 800b5d8:	080103a4 	.word	0x080103a4
 800b5dc:	08011d94 	.word	0x08011d94
 800b5e0:	20010924 	.word	0x20010924
 800b5e4:	20010920 	.word	0x20010920
 800b5e8:	20010950 	.word	0x20010950
 800b5ec:	2000b004 	.word	0x2000b004
 800b5f0:	2001095e 	.word	0x2001095e
 800b5f4:	20010944 	.word	0x20010944
 800b5f8:	20010938 	.word	0x20010938
 800b5fc:	20010940 	.word	0x20010940
 800b600:	08011da8 	.word	0x08011da8
 800b604:	20010904 	.word	0x20010904
 800b608:	20010908 	.word	0x20010908
 800b60c:	2001091c 	.word	0x2001091c
      tcp_receive(pcb);
 800b610:	4620      	mov	r0, r4
 800b612:	f7fe fe49 	bl	800a2a8 <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 800b616:	4b73      	ldr	r3, [pc, #460]	; (800b7e4 <tcp_input+0xc24>)
 800b618:	781b      	ldrb	r3, [r3, #0]
 800b61a:	f013 0f10 	tst.w	r3, #16
 800b61e:	f43f ada7 	beq.w	800b170 <tcp_input+0x5b0>
 800b622:	6d22      	ldr	r2, [r4, #80]	; 0x50
 800b624:	4b70      	ldr	r3, [pc, #448]	; (800b7e8 <tcp_input+0xc28>)
 800b626:	681b      	ldr	r3, [r3, #0]
 800b628:	429a      	cmp	r2, r3
 800b62a:	f47f ada1 	bne.w	800b170 <tcp_input+0x5b0>
 800b62e:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 800b630:	2b00      	cmp	r3, #0
 800b632:	f47f ad9d 	bne.w	800b170 <tcp_input+0x5b0>
        tcp_pcb_purge(pcb);
 800b636:	4620      	mov	r0, r4
 800b638:	f7fd fe1e 	bl	8009278 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 800b63c:	4b6b      	ldr	r3, [pc, #428]	; (800b7ec <tcp_input+0xc2c>)
 800b63e:	681b      	ldr	r3, [r3, #0]
 800b640:	42a3      	cmp	r3, r4
 800b642:	d005      	beq.n	800b650 <tcp_input+0xa90>
 800b644:	b153      	cbz	r3, 800b65c <tcp_input+0xa9c>
 800b646:	68da      	ldr	r2, [r3, #12]
 800b648:	42a2      	cmp	r2, r4
 800b64a:	d005      	beq.n	800b658 <tcp_input+0xa98>
 800b64c:	4613      	mov	r3, r2
 800b64e:	e7f9      	b.n	800b644 <tcp_input+0xa84>
 800b650:	68e2      	ldr	r2, [r4, #12]
 800b652:	4b66      	ldr	r3, [pc, #408]	; (800b7ec <tcp_input+0xc2c>)
 800b654:	601a      	str	r2, [r3, #0]
 800b656:	e001      	b.n	800b65c <tcp_input+0xa9c>
 800b658:	68e2      	ldr	r2, [r4, #12]
 800b65a:	60da      	str	r2, [r3, #12]
 800b65c:	4b64      	ldr	r3, [pc, #400]	; (800b7f0 <tcp_input+0xc30>)
 800b65e:	2201      	movs	r2, #1
 800b660:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 800b662:	230a      	movs	r3, #10
 800b664:	7523      	strb	r3, [r4, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 800b666:	4b63      	ldr	r3, [pc, #396]	; (800b7f4 <tcp_input+0xc34>)
 800b668:	681a      	ldr	r2, [r3, #0]
 800b66a:	60e2      	str	r2, [r4, #12]
 800b66c:	601c      	str	r4, [r3, #0]
 800b66e:	f001 fbf1 	bl	800ce54 <tcp_timer_needed>
 800b672:	e57d      	b.n	800b170 <tcp_input+0x5b0>
      tcp_receive(pcb);
 800b674:	4620      	mov	r0, r4
 800b676:	f7fe fe17 	bl	800a2a8 <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 800b67a:	4b5a      	ldr	r3, [pc, #360]	; (800b7e4 <tcp_input+0xc24>)
 800b67c:	781b      	ldrb	r3, [r3, #0]
 800b67e:	f013 0f10 	tst.w	r3, #16
 800b682:	f43f ad75 	beq.w	800b170 <tcp_input+0x5b0>
 800b686:	6d22      	ldr	r2, [r4, #80]	; 0x50
 800b688:	4b57      	ldr	r3, [pc, #348]	; (800b7e8 <tcp_input+0xc28>)
 800b68a:	681b      	ldr	r3, [r3, #0]
 800b68c:	429a      	cmp	r2, r3
 800b68e:	f47f ad6f 	bne.w	800b170 <tcp_input+0x5b0>
 800b692:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 800b694:	2b00      	cmp	r3, #0
 800b696:	f47f ad6b 	bne.w	800b170 <tcp_input+0x5b0>
        recv_flags |= TF_CLOSED;
 800b69a:	4a57      	ldr	r2, [pc, #348]	; (800b7f8 <tcp_input+0xc38>)
 800b69c:	7813      	ldrb	r3, [r2, #0]
 800b69e:	f043 0310 	orr.w	r3, r3, #16
 800b6a2:	7013      	strb	r3, [r2, #0]
 800b6a4:	e564      	b.n	800b170 <tcp_input+0x5b0>
        if (recv_acked > 0) {
 800b6a6:	4b55      	ldr	r3, [pc, #340]	; (800b7fc <tcp_input+0xc3c>)
 800b6a8:	881a      	ldrh	r2, [r3, #0]
 800b6aa:	b162      	cbz	r2, 800b6c6 <tcp_input+0xb06>
            TCP_EVENT_SENT(pcb, (u16_t)acked16, err);
 800b6ac:	f8d4 3080 	ldr.w	r3, [r4, #128]	; 0x80
 800b6b0:	b133      	cbz	r3, 800b6c0 <tcp_input+0xb00>
 800b6b2:	4621      	mov	r1, r4
 800b6b4:	6920      	ldr	r0, [r4, #16]
 800b6b6:	4798      	blx	r3
            if (err == ERR_ABRT) {
 800b6b8:	f110 0f0d 	cmn.w	r0, #13
 800b6bc:	f43f ad6c 	beq.w	800b198 <tcp_input+0x5d8>
          recv_acked = 0;
 800b6c0:	4b4e      	ldr	r3, [pc, #312]	; (800b7fc <tcp_input+0xc3c>)
 800b6c2:	2200      	movs	r2, #0
 800b6c4:	801a      	strh	r2, [r3, #0]
        if (tcp_input_delayed_close(pcb)) {
 800b6c6:	4620      	mov	r0, r4
 800b6c8:	f7fe fcfa 	bl	800a0c0 <tcp_input_delayed_close>
 800b6cc:	2800      	cmp	r0, #0
 800b6ce:	f47f ad63 	bne.w	800b198 <tcp_input+0x5d8>
        if (recv_data != NULL) {
 800b6d2:	4b4b      	ldr	r3, [pc, #300]	; (800b800 <tcp_input+0xc40>)
 800b6d4:	681b      	ldr	r3, [r3, #0]
 800b6d6:	b1eb      	cbz	r3, 800b714 <tcp_input+0xb54>
          LWIP_ASSERT("pcb->refused_data == NULL", pcb->refused_data == NULL);
 800b6d8:	6fa3      	ldr	r3, [r4, #120]	; 0x78
 800b6da:	b133      	cbz	r3, 800b6ea <tcp_input+0xb2a>
 800b6dc:	4b49      	ldr	r3, [pc, #292]	; (800b804 <tcp_input+0xc44>)
 800b6de:	f44f 72f3 	mov.w	r2, #486	; 0x1e6
 800b6e2:	4949      	ldr	r1, [pc, #292]	; (800b808 <tcp_input+0xc48>)
 800b6e4:	4849      	ldr	r0, [pc, #292]	; (800b80c <tcp_input+0xc4c>)
 800b6e6:	f003 fd05 	bl	800f0f4 <iprintf>
          if (pcb->flags & TF_RXCLOSED) {
 800b6ea:	8b63      	ldrh	r3, [r4, #26]
 800b6ec:	f013 0f10 	tst.w	r3, #16
 800b6f0:	d128      	bne.n	800b744 <tcp_input+0xb84>
          TCP_EVENT_RECV(pcb, recv_data, ERR_OK, err);
 800b6f2:	f8d4 5084 	ldr.w	r5, [r4, #132]	; 0x84
 800b6f6:	b36d      	cbz	r5, 800b754 <tcp_input+0xb94>
 800b6f8:	2300      	movs	r3, #0
 800b6fa:	4a41      	ldr	r2, [pc, #260]	; (800b800 <tcp_input+0xc40>)
 800b6fc:	6812      	ldr	r2, [r2, #0]
 800b6fe:	4621      	mov	r1, r4
 800b700:	6920      	ldr	r0, [r4, #16]
 800b702:	47a8      	blx	r5
          if (err == ERR_ABRT) {
 800b704:	f110 0f0d 	cmn.w	r0, #13
 800b708:	f43f ad46 	beq.w	800b198 <tcp_input+0x5d8>
          if (err != ERR_OK) {
 800b70c:	b110      	cbz	r0, 800b714 <tcp_input+0xb54>
            pcb->refused_data = recv_data;
 800b70e:	4b3c      	ldr	r3, [pc, #240]	; (800b800 <tcp_input+0xc40>)
 800b710:	681b      	ldr	r3, [r3, #0]
 800b712:	67a3      	str	r3, [r4, #120]	; 0x78
        if (recv_flags & TF_GOT_FIN) {
 800b714:	4b38      	ldr	r3, [pc, #224]	; (800b7f8 <tcp_input+0xc38>)
 800b716:	781b      	ldrb	r3, [r3, #0]
 800b718:	f013 0f20 	tst.w	r3, #32
 800b71c:	d005      	beq.n	800b72a <tcp_input+0xb6a>
          if (pcb->refused_data != NULL) {
 800b71e:	6fa3      	ldr	r3, [r4, #120]	; 0x78
 800b720:	b303      	cbz	r3, 800b764 <tcp_input+0xba4>
            pcb->refused_data->flags |= PBUF_FLAG_TCP_FIN;
 800b722:	7b5a      	ldrb	r2, [r3, #13]
 800b724:	f042 0220 	orr.w	r2, r2, #32
 800b728:	735a      	strb	r2, [r3, #13]
        tcp_input_pcb = NULL;
 800b72a:	4b39      	ldr	r3, [pc, #228]	; (800b810 <tcp_input+0xc50>)
 800b72c:	2200      	movs	r2, #0
 800b72e:	601a      	str	r2, [r3, #0]
        if (tcp_input_delayed_close(pcb)) {
 800b730:	4620      	mov	r0, r4
 800b732:	f7fe fcc5 	bl	800a0c0 <tcp_input_delayed_close>
 800b736:	2800      	cmp	r0, #0
 800b738:	f47f ad2e 	bne.w	800b198 <tcp_input+0x5d8>
        tcp_output(pcb);
 800b73c:	4620      	mov	r0, r4
 800b73e:	f001 f879 	bl	800c834 <tcp_output>
 800b742:	e529      	b.n	800b198 <tcp_input+0x5d8>
            pbuf_free(recv_data);
 800b744:	4b2e      	ldr	r3, [pc, #184]	; (800b800 <tcp_input+0xc40>)
 800b746:	6818      	ldr	r0, [r3, #0]
 800b748:	f7fc ffde 	bl	8008708 <pbuf_free>
            tcp_abort(pcb);
 800b74c:	4620      	mov	r0, r4
 800b74e:	f7fd feb1 	bl	80094b4 <tcp_abort>
            goto aborted;
 800b752:	e521      	b.n	800b198 <tcp_input+0x5d8>
          TCP_EVENT_RECV(pcb, recv_data, ERR_OK, err);
 800b754:	2300      	movs	r3, #0
 800b756:	4a2a      	ldr	r2, [pc, #168]	; (800b800 <tcp_input+0xc40>)
 800b758:	6812      	ldr	r2, [r2, #0]
 800b75a:	4621      	mov	r1, r4
 800b75c:	4618      	mov	r0, r3
 800b75e:	f7fe f8d7 	bl	8009910 <tcp_recv_null>
 800b762:	e7cf      	b.n	800b704 <tcp_input+0xb44>
            if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 800b764:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 800b766:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
              pcb->rcv_wnd++;
 800b76a:	bf1c      	itt	ne
 800b76c:	3301      	addne	r3, #1
 800b76e:	8523      	strhne	r3, [r4, #40]	; 0x28
            TCP_EVENT_CLOSED(pcb, err);
 800b770:	f8d4 5084 	ldr.w	r5, [r4, #132]	; 0x84
 800b774:	2d00      	cmp	r5, #0
 800b776:	d0d8      	beq.n	800b72a <tcp_input+0xb6a>
 800b778:	2300      	movs	r3, #0
 800b77a:	461a      	mov	r2, r3
 800b77c:	4621      	mov	r1, r4
 800b77e:	6920      	ldr	r0, [r4, #16]
 800b780:	47a8      	blx	r5
            if (err == ERR_ABRT) {
 800b782:	f110 0f0d 	cmn.w	r0, #13
 800b786:	d1d0      	bne.n	800b72a <tcp_input+0xb6a>
 800b788:	e506      	b.n	800b198 <tcp_input+0x5d8>
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800b78a:	4b22      	ldr	r3, [pc, #136]	; (800b814 <tcp_input+0xc54>)
 800b78c:	6819      	ldr	r1, [r3, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 800b78e:	4b22      	ldr	r3, [pc, #136]	; (800b818 <tcp_input+0xc58>)
 800b790:	4a22      	ldr	r2, [pc, #136]	; (800b81c <tcp_input+0xc5c>)
 800b792:	8810      	ldrh	r0, [r2, #0]
 800b794:	4a22      	ldr	r2, [pc, #136]	; (800b820 <tcp_input+0xc60>)
 800b796:	6812      	ldr	r2, [r2, #0]
 800b798:	880c      	ldrh	r4, [r1, #0]
 800b79a:	9402      	str	r4, [sp, #8]
 800b79c:	8849      	ldrh	r1, [r1, #2]
 800b79e:	9101      	str	r1, [sp, #4]
 800b7a0:	1f19      	subs	r1, r3, #4
 800b7a2:	9100      	str	r1, [sp, #0]
 800b7a4:	4402      	add	r2, r0
 800b7a6:	4910      	ldr	r1, [pc, #64]	; (800b7e8 <tcp_input+0xc28>)
 800b7a8:	6809      	ldr	r1, [r1, #0]
 800b7aa:	2000      	movs	r0, #0
 800b7ac:	f000 ffc0 	bl	800c730 <tcp_rst>
 800b7b0:	e007      	b.n	800b7c2 <tcp_input+0xc02>
    if (!(TCPH_FLAGS(tcphdr) & TCP_RST)) {
 800b7b2:	4b18      	ldr	r3, [pc, #96]	; (800b814 <tcp_input+0xc54>)
 800b7b4:	681b      	ldr	r3, [r3, #0]
 800b7b6:	8998      	ldrh	r0, [r3, #12]
 800b7b8:	f7fc f966 	bl	8007a88 <lwip_htons>
 800b7bc:	f010 0f04 	tst.w	r0, #4
 800b7c0:	d0e3      	beq.n	800b78a <tcp_input+0xbca>
    pbuf_free(p);
 800b7c2:	4628      	mov	r0, r5
 800b7c4:	f7fc ffa0 	bl	8008708 <pbuf_free>
 800b7c8:	f7ff ba08 	b.w	800abdc <tcp_input+0x1c>
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800b7cc:	4b09      	ldr	r3, [pc, #36]	; (800b7f4 <tcp_input+0xc34>)
 800b7ce:	681c      	ldr	r4, [r3, #0]
 800b7d0:	2c00      	cmp	r4, #0
 800b7d2:	f43f abe5 	beq.w	800afa0 <tcp_input+0x3e0>
      LWIP_ASSERT("tcp_input: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 800b7d6:	f8df 802c 	ldr.w	r8, [pc, #44]	; 800b804 <tcp_input+0xc44>
 800b7da:	4f12      	ldr	r7, [pc, #72]	; (800b824 <tcp_input+0xc64>)
 800b7dc:	4e0b      	ldr	r6, [pc, #44]	; (800b80c <tcp_input+0xc4c>)
 800b7de:	f7ff bb8d 	b.w	800aefc <tcp_input+0x33c>
 800b7e2:	bf00      	nop
 800b7e4:	20010924 	.word	0x20010924
 800b7e8:	20010920 	.word	0x20010920
 800b7ec:	20010904 	.word	0x20010904
 800b7f0:	20010908 	.word	0x20010908
 800b7f4:	2001091c 	.word	0x2001091c
 800b7f8:	20010940 	.word	0x20010940
 800b7fc:	20010938 	.word	0x20010938
 800b800:	2001093c 	.word	0x2001093c
 800b804:	080119e8 	.word	0x080119e8
 800b808:	08011dc8 	.word	0x08011dc8
 800b80c:	080103a4 	.word	0x080103a4
 800b810:	20010948 	.word	0x20010948
 800b814:	20010950 	.word	0x20010950
 800b818:	2000b004 	.word	0x2000b004
 800b81c:	2001095e 	.word	0x2001095e
 800b820:	20010944 	.word	0x20010944
 800b824:	08011d2c 	.word	0x08011d2c

0800b828 <tcp_trigger_input_pcb_close>:

void
tcp_trigger_input_pcb_close(void)
{
  recv_flags |= TF_CLOSED;
 800b828:	4a02      	ldr	r2, [pc, #8]	; (800b834 <tcp_trigger_input_pcb_close+0xc>)
 800b82a:	7813      	ldrb	r3, [r2, #0]
 800b82c:	f043 0310 	orr.w	r3, r3, #16
 800b830:	7013      	strb	r3, [r2, #0]
}
 800b832:	4770      	bx	lr
 800b834:	20010940 	.word	0x20010940

0800b838 <tcp_output_segment_busy>:
 * @arg seg the tcp segment to check
 * @return 1 if ref != 1, 0 if ref == 1
 */
static int
tcp_output_segment_busy(const struct tcp_seg *seg)
{
 800b838:	b510      	push	{r4, lr}
  LWIP_ASSERT("tcp_output_segment_busy: invalid seg", seg != NULL);
 800b83a:	4604      	mov	r4, r0
 800b83c:	b128      	cbz	r0, 800b84a <tcp_output_segment_busy+0x12>

  /* We only need to check the first pbuf here:
     If a pbuf is queued for transmission, a driver calls pbuf_ref(),
     which only changes the ref count of the first pbuf */
  if (seg->p->ref != 1) {
 800b83e:	6863      	ldr	r3, [r4, #4]
 800b840:	7b98      	ldrb	r0, [r3, #14]
    /* other reference found */
    return 1;
  }
  /* no other references found */
  return 0;
}
 800b842:	3801      	subs	r0, #1
 800b844:	bf18      	it	ne
 800b846:	2001      	movne	r0, #1
 800b848:	bd10      	pop	{r4, pc}
  LWIP_ASSERT("tcp_output_segment_busy: invalid seg", seg != NULL);
 800b84a:	4b04      	ldr	r3, [pc, #16]	; (800b85c <tcp_output_segment_busy+0x24>)
 800b84c:	f240 529a 	movw	r2, #1434	; 0x59a
 800b850:	4903      	ldr	r1, [pc, #12]	; (800b860 <tcp_output_segment_busy+0x28>)
 800b852:	4804      	ldr	r0, [pc, #16]	; (800b864 <tcp_output_segment_busy+0x2c>)
 800b854:	f003 fc4e 	bl	800f0f4 <iprintf>
 800b858:	e7f1      	b.n	800b83e <tcp_output_segment_busy+0x6>
 800b85a:	bf00      	nop
 800b85c:	08011de4 	.word	0x08011de4
 800b860:	08011e18 	.word	0x08011e18
 800b864:	080103a4 	.word	0x080103a4

0800b868 <tcp_output_fill_options>:
}

/* Fill in options for control segments */
static void
tcp_output_fill_options(const struct tcp_pcb *pcb, struct pbuf *p, u8_t optflags, u8_t num_sacks)
{
 800b868:	b538      	push	{r3, r4, r5, lr}
 800b86a:	4614      	mov	r4, r2
  struct tcp_hdr *tcphdr;
  u32_t *opts;
  u16_t sacks_len = 0;

  LWIP_ASSERT("tcp_output_fill_options: invalid pbuf", p != NULL);
 800b86c:	460d      	mov	r5, r1
 800b86e:	b181      	cbz	r1, 800b892 <tcp_output_fill_options+0x2a>

  tcphdr = (struct tcp_hdr *)p->payload;
 800b870:	686b      	ldr	r3, [r5, #4]
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(p, tcphdr, pcb, opts);
#endif

  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(sacks_len);
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(tcphdr + 1)) + sacks_len * 4 + LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb));
 800b872:	00a4      	lsls	r4, r4, #2
 800b874:	f004 0404 	and.w	r4, r4, #4
 800b878:	3414      	adds	r4, #20
 800b87a:	441c      	add	r4, r3
  opts = (u32_t *)(void *)(tcphdr + 1);
 800b87c:	3314      	adds	r3, #20
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(tcphdr + 1)) + sacks_len * 4 + LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb));
 800b87e:	429c      	cmp	r4, r3
 800b880:	d006      	beq.n	800b890 <tcp_output_fill_options+0x28>
 800b882:	4b08      	ldr	r3, [pc, #32]	; (800b8a4 <tcp_output_fill_options+0x3c>)
 800b884:	f240 7275 	movw	r2, #1909	; 0x775
 800b888:	4907      	ldr	r1, [pc, #28]	; (800b8a8 <tcp_output_fill_options+0x40>)
 800b88a:	4808      	ldr	r0, [pc, #32]	; (800b8ac <tcp_output_fill_options+0x44>)
 800b88c:	f003 fc32 	bl	800f0f4 <iprintf>
  LWIP_UNUSED_ARG(optflags); /* for LWIP_NOASSERT */
  LWIP_UNUSED_ARG(opts); /* for LWIP_NOASSERT */
}
 800b890:	bd38      	pop	{r3, r4, r5, pc}
  LWIP_ASSERT("tcp_output_fill_options: invalid pbuf", p != NULL);
 800b892:	4b04      	ldr	r3, [pc, #16]	; (800b8a4 <tcp_output_fill_options+0x3c>)
 800b894:	f240 7256 	movw	r2, #1878	; 0x756
 800b898:	4905      	ldr	r1, [pc, #20]	; (800b8b0 <tcp_output_fill_options+0x48>)
 800b89a:	4804      	ldr	r0, [pc, #16]	; (800b8ac <tcp_output_fill_options+0x44>)
 800b89c:	f003 fc2a 	bl	800f0f4 <iprintf>
 800b8a0:	e7e6      	b.n	800b870 <tcp_output_fill_options+0x8>
 800b8a2:	bf00      	nop
 800b8a4:	08011de4 	.word	0x08011de4
 800b8a8:	08011e68 	.word	0x08011e68
 800b8ac:	080103a4 	.word	0x080103a4
 800b8b0:	08011e40 	.word	0x08011e40

0800b8b4 <tcp_pbuf_prealloc>:
{
 800b8b4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b8b8:	4680      	mov	r8, r0
 800b8ba:	460c      	mov	r4, r1
 800b8bc:	4615      	mov	r5, r2
 800b8be:	9e08      	ldr	r6, [sp, #32]
 800b8c0:	f89d 9028 	ldrb.w	r9, [sp, #40]	; 0x28
  LWIP_ASSERT("tcp_pbuf_prealloc: invalid oversize", oversize != NULL);
 800b8c4:	461f      	mov	r7, r3
 800b8c6:	b1cb      	cbz	r3, 800b8fc <tcp_pbuf_prealloc+0x48>
  LWIP_ASSERT("tcp_pbuf_prealloc: invalid pcb", pcb != NULL);
 800b8c8:	b1fe      	cbz	r6, 800b90a <tcp_pbuf_prealloc+0x56>
  if (length < max_length) {
 800b8ca:	42ac      	cmp	r4, r5
 800b8cc:	d229      	bcs.n	800b922 <tcp_pbuf_prealloc+0x6e>
    if ((apiflags & TCP_WRITE_FLAG_MORE) ||
 800b8ce:	f89d 3024 	ldrb.w	r3, [sp, #36]	; 0x24
 800b8d2:	f013 0f02 	tst.w	r3, #2
 800b8d6:	d108      	bne.n	800b8ea <tcp_pbuf_prealloc+0x36>
 800b8d8:	8b73      	ldrh	r3, [r6, #26]
 800b8da:	f013 0f40 	tst.w	r3, #64	; 0x40
 800b8de:	d139      	bne.n	800b954 <tcp_pbuf_prealloc+0xa0>
        (!(pcb->flags & TF_NODELAY) &&
 800b8e0:	f1b9 0f00 	cmp.w	r9, #0
 800b8e4:	d001      	beq.n	800b8ea <tcp_pbuf_prealloc+0x36>
         (!first_seg ||
 800b8e6:	6ef3      	ldr	r3, [r6, #108]	; 0x6c
 800b8e8:	b1b3      	cbz	r3, 800b918 <tcp_pbuf_prealloc+0x64>
      alloc = LWIP_MIN(max_length, LWIP_MEM_ALIGN_SIZE(TCP_OVERSIZE_CALC_LENGTH(length)));
 800b8ea:	f204 211b 	addw	r1, r4, #539	; 0x21b
 800b8ee:	f021 0103 	bic.w	r1, r1, #3
 800b8f2:	428d      	cmp	r5, r1
 800b8f4:	bf28      	it	cs
 800b8f6:	460d      	movcs	r5, r1
 800b8f8:	b2a9      	uxth	r1, r5
 800b8fa:	e013      	b.n	800b924 <tcp_pbuf_prealloc+0x70>
  LWIP_ASSERT("tcp_pbuf_prealloc: invalid oversize", oversize != NULL);
 800b8fc:	4b16      	ldr	r3, [pc, #88]	; (800b958 <tcp_pbuf_prealloc+0xa4>)
 800b8fe:	22e8      	movs	r2, #232	; 0xe8
 800b900:	4916      	ldr	r1, [pc, #88]	; (800b95c <tcp_pbuf_prealloc+0xa8>)
 800b902:	4817      	ldr	r0, [pc, #92]	; (800b960 <tcp_pbuf_prealloc+0xac>)
 800b904:	f003 fbf6 	bl	800f0f4 <iprintf>
 800b908:	e7de      	b.n	800b8c8 <tcp_pbuf_prealloc+0x14>
  LWIP_ASSERT("tcp_pbuf_prealloc: invalid pcb", pcb != NULL);
 800b90a:	4b13      	ldr	r3, [pc, #76]	; (800b958 <tcp_pbuf_prealloc+0xa4>)
 800b90c:	22e9      	movs	r2, #233	; 0xe9
 800b90e:	4915      	ldr	r1, [pc, #84]	; (800b964 <tcp_pbuf_prealloc+0xb0>)
 800b910:	4813      	ldr	r0, [pc, #76]	; (800b960 <tcp_pbuf_prealloc+0xac>)
 800b912:	f003 fbef 	bl	800f0f4 <iprintf>
 800b916:	e7d8      	b.n	800b8ca <tcp_pbuf_prealloc+0x16>
          pcb->unsent != NULL ||
 800b918:	6f33      	ldr	r3, [r6, #112]	; 0x70
 800b91a:	2b00      	cmp	r3, #0
 800b91c:	d1e5      	bne.n	800b8ea <tcp_pbuf_prealloc+0x36>
  u16_t alloc = length;
 800b91e:	4621      	mov	r1, r4
 800b920:	e000      	b.n	800b924 <tcp_pbuf_prealloc+0x70>
 800b922:	4621      	mov	r1, r4
  p = pbuf_alloc(layer, alloc, PBUF_RAM);
 800b924:	f44f 7220 	mov.w	r2, #640	; 0x280
 800b928:	4640      	mov	r0, r8
 800b92a:	f7fc ff5d 	bl	80087e8 <pbuf_alloc>
  if (p == NULL) {
 800b92e:	4605      	mov	r5, r0
 800b930:	b168      	cbz	r0, 800b94e <tcp_pbuf_prealloc+0x9a>
  LWIP_ASSERT("need unchained pbuf", p->next == NULL);
 800b932:	6803      	ldr	r3, [r0, #0]
 800b934:	b133      	cbz	r3, 800b944 <tcp_pbuf_prealloc+0x90>
 800b936:	4b08      	ldr	r3, [pc, #32]	; (800b958 <tcp_pbuf_prealloc+0xa4>)
 800b938:	f240 120b 	movw	r2, #267	; 0x10b
 800b93c:	490a      	ldr	r1, [pc, #40]	; (800b968 <tcp_pbuf_prealloc+0xb4>)
 800b93e:	4808      	ldr	r0, [pc, #32]	; (800b960 <tcp_pbuf_prealloc+0xac>)
 800b940:	f003 fbd8 	bl	800f0f4 <iprintf>
  *oversize = p->len - length;
 800b944:	896b      	ldrh	r3, [r5, #10]
 800b946:	1b1b      	subs	r3, r3, r4
 800b948:	803b      	strh	r3, [r7, #0]
  p->len = p->tot_len = length;
 800b94a:	812c      	strh	r4, [r5, #8]
 800b94c:	816c      	strh	r4, [r5, #10]
}
 800b94e:	4628      	mov	r0, r5
 800b950:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  u16_t alloc = length;
 800b954:	4621      	mov	r1, r4
 800b956:	e7e5      	b.n	800b924 <tcp_pbuf_prealloc+0x70>
 800b958:	08011de4 	.word	0x08011de4
 800b95c:	08011e7c 	.word	0x08011e7c
 800b960:	080103a4 	.word	0x080103a4
 800b964:	08011ea0 	.word	0x08011ea0
 800b968:	08011ec0 	.word	0x08011ec0

0800b96c <tcp_create_segment>:
{
 800b96c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b970:	460e      	mov	r6, r1
 800b972:	4617      	mov	r7, r2
 800b974:	4698      	mov	r8, r3
 800b976:	f89d a020 	ldrb.w	sl, [sp, #32]
  LWIP_ASSERT("tcp_create_segment: invalid pcb", pcb != NULL);
 800b97a:	4681      	mov	r9, r0
 800b97c:	2800      	cmp	r0, #0
 800b97e:	d041      	beq.n	800ba04 <tcp_create_segment+0x98>
  LWIP_ASSERT("tcp_create_segment: invalid pbuf", p != NULL);
 800b980:	2e00      	cmp	r6, #0
 800b982:	d046      	beq.n	800ba12 <tcp_create_segment+0xa6>
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 800b984:	ea4f 058a 	mov.w	r5, sl, lsl #2
 800b988:	f005 0504 	and.w	r5, r5, #4
  if ((seg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG)) == NULL) {
 800b98c:	2003      	movs	r0, #3
 800b98e:	f7fc fbc9 	bl	8008124 <memp_malloc>
 800b992:	4604      	mov	r4, r0
 800b994:	2800      	cmp	r0, #0
 800b996:	d043      	beq.n	800ba20 <tcp_create_segment+0xb4>
  seg->flags = optflags;
 800b998:	f880 a00a 	strb.w	sl, [r0, #10]
  seg->next = NULL;
 800b99c:	2300      	movs	r3, #0
 800b99e:	6003      	str	r3, [r0, #0]
  seg->p = p;
 800b9a0:	6046      	str	r6, [r0, #4]
  LWIP_ASSERT("p->tot_len >= optlen", p->tot_len >= optlen);
 800b9a2:	fa1f fa85 	uxth.w	sl, r5
 800b9a6:	8933      	ldrh	r3, [r6, #8]
 800b9a8:	4553      	cmp	r3, sl
 800b9aa:	d33d      	bcc.n	800ba28 <tcp_create_segment+0xbc>
  seg->len = p->tot_len - optlen;
 800b9ac:	8931      	ldrh	r1, [r6, #8]
 800b9ae:	eba1 010a 	sub.w	r1, r1, sl
 800b9b2:	8121      	strh	r1, [r4, #8]
  if (pbuf_add_header(p, TCP_HLEN)) {
 800b9b4:	2114      	movs	r1, #20
 800b9b6:	4630      	mov	r0, r6
 800b9b8:	f7fc fe61 	bl	800867e <pbuf_add_header>
 800b9bc:	2800      	cmp	r0, #0
 800b9be:	d13a      	bne.n	800ba36 <tcp_create_segment+0xca>
  seg->tcphdr = (struct tcp_hdr *)seg->p->payload;
 800b9c0:	6863      	ldr	r3, [r4, #4]
 800b9c2:	685e      	ldr	r6, [r3, #4]
 800b9c4:	60e6      	str	r6, [r4, #12]
  seg->tcphdr->src = lwip_htons(pcb->local_port);
 800b9c6:	f8b9 0016 	ldrh.w	r0, [r9, #22]
 800b9ca:	f7fc f85d 	bl	8007a88 <lwip_htons>
 800b9ce:	8030      	strh	r0, [r6, #0]
  seg->tcphdr->dest = lwip_htons(pcb->remote_port);
 800b9d0:	68e6      	ldr	r6, [r4, #12]
 800b9d2:	f8b9 0018 	ldrh.w	r0, [r9, #24]
 800b9d6:	f7fc f857 	bl	8007a88 <lwip_htons>
 800b9da:	8070      	strh	r0, [r6, #2]
  seg->tcphdr->seqno = lwip_htonl(seqno);
 800b9dc:	68e6      	ldr	r6, [r4, #12]
 800b9de:	4640      	mov	r0, r8
 800b9e0:	f7fc f857 	bl	8007a92 <lwip_htonl>
 800b9e4:	6070      	str	r0, [r6, #4]
  TCPH_HDRLEN_FLAGS_SET(seg->tcphdr, (5 + optlen / 4), hdrflags);
 800b9e6:	68e6      	ldr	r6, [r4, #12]
 800b9e8:	02a8      	lsls	r0, r5, #10
 800b9ea:	f500 40a0 	add.w	r0, r0, #20480	; 0x5000
 800b9ee:	4338      	orrs	r0, r7
 800b9f0:	f7fc f84a 	bl	8007a88 <lwip_htons>
 800b9f4:	81b0      	strh	r0, [r6, #12]
  seg->tcphdr->urgp = 0;
 800b9f6:	68e3      	ldr	r3, [r4, #12]
 800b9f8:	2200      	movs	r2, #0
 800b9fa:	749a      	strb	r2, [r3, #18]
 800b9fc:	74da      	strb	r2, [r3, #19]
}
 800b9fe:	4620      	mov	r0, r4
 800ba00:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  LWIP_ASSERT("tcp_create_segment: invalid pcb", pcb != NULL);
 800ba04:	4b0e      	ldr	r3, [pc, #56]	; (800ba40 <tcp_create_segment+0xd4>)
 800ba06:	22a3      	movs	r2, #163	; 0xa3
 800ba08:	490e      	ldr	r1, [pc, #56]	; (800ba44 <tcp_create_segment+0xd8>)
 800ba0a:	480f      	ldr	r0, [pc, #60]	; (800ba48 <tcp_create_segment+0xdc>)
 800ba0c:	f003 fb72 	bl	800f0f4 <iprintf>
 800ba10:	e7b6      	b.n	800b980 <tcp_create_segment+0x14>
  LWIP_ASSERT("tcp_create_segment: invalid pbuf", p != NULL);
 800ba12:	4b0b      	ldr	r3, [pc, #44]	; (800ba40 <tcp_create_segment+0xd4>)
 800ba14:	22a4      	movs	r2, #164	; 0xa4
 800ba16:	490d      	ldr	r1, [pc, #52]	; (800ba4c <tcp_create_segment+0xe0>)
 800ba18:	480b      	ldr	r0, [pc, #44]	; (800ba48 <tcp_create_segment+0xdc>)
 800ba1a:	f003 fb6b 	bl	800f0f4 <iprintf>
 800ba1e:	e7b1      	b.n	800b984 <tcp_create_segment+0x18>
    pbuf_free(p);
 800ba20:	4630      	mov	r0, r6
 800ba22:	f7fc fe71 	bl	8008708 <pbuf_free>
    return NULL;
 800ba26:	e7ea      	b.n	800b9fe <tcp_create_segment+0x92>
  LWIP_ASSERT("p->tot_len >= optlen", p->tot_len >= optlen);
 800ba28:	4b05      	ldr	r3, [pc, #20]	; (800ba40 <tcp_create_segment+0xd4>)
 800ba2a:	22b0      	movs	r2, #176	; 0xb0
 800ba2c:	4908      	ldr	r1, [pc, #32]	; (800ba50 <tcp_create_segment+0xe4>)
 800ba2e:	4806      	ldr	r0, [pc, #24]	; (800ba48 <tcp_create_segment+0xdc>)
 800ba30:	f003 fb60 	bl	800f0f4 <iprintf>
 800ba34:	e7ba      	b.n	800b9ac <tcp_create_segment+0x40>
    tcp_seg_free(seg);
 800ba36:	4620      	mov	r0, r4
 800ba38:	f7fd fb20 	bl	800907c <tcp_seg_free>
    return NULL;
 800ba3c:	2400      	movs	r4, #0
 800ba3e:	e7de      	b.n	800b9fe <tcp_create_segment+0x92>
 800ba40:	08011de4 	.word	0x08011de4
 800ba44:	08011ed4 	.word	0x08011ed4
 800ba48:	080103a4 	.word	0x080103a4
 800ba4c:	08011ef4 	.word	0x08011ef4
 800ba50:	08011f18 	.word	0x08011f18

0800ba54 <tcp_output_alloc_header_common>:
{
 800ba54:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ba58:	4607      	mov	r7, r0
 800ba5a:	460c      	mov	r4, r1
 800ba5c:	4698      	mov	r8, r3
  p = pbuf_alloc(PBUF_IP, TCP_HLEN + optlen + datalen, PBUF_RAM);
 800ba5e:	3214      	adds	r2, #20
 800ba60:	4411      	add	r1, r2
 800ba62:	f44f 7220 	mov.w	r2, #640	; 0x280
 800ba66:	b289      	uxth	r1, r1
 800ba68:	2022      	movs	r0, #34	; 0x22
 800ba6a:	f7fc febd 	bl	80087e8 <pbuf_alloc>
  if (p != NULL) {
 800ba6e:	4606      	mov	r6, r0
 800ba70:	b348      	cbz	r0, 800bac6 <tcp_output_alloc_header_common+0x72>
    LWIP_ASSERT("check that first pbuf can hold struct tcp_hdr",
 800ba72:	f104 0313 	add.w	r3, r4, #19
 800ba76:	8942      	ldrh	r2, [r0, #10]
 800ba78:	4293      	cmp	r3, r2
 800ba7a:	da27      	bge.n	800bacc <tcp_output_alloc_header_common+0x78>
    tcphdr = (struct tcp_hdr *)p->payload;
 800ba7c:	6875      	ldr	r5, [r6, #4]
    tcphdr->src = lwip_htons(src_port);
 800ba7e:	f8bd 0018 	ldrh.w	r0, [sp, #24]
 800ba82:	f7fc f801 	bl	8007a88 <lwip_htons>
 800ba86:	8028      	strh	r0, [r5, #0]
    tcphdr->dest = lwip_htons(dst_port);
 800ba88:	f8bd 001c 	ldrh.w	r0, [sp, #28]
 800ba8c:	f7fb fffc 	bl	8007a88 <lwip_htons>
 800ba90:	8068      	strh	r0, [r5, #2]
    tcphdr->seqno = seqno_be;
 800ba92:	f8c5 8004 	str.w	r8, [r5, #4]
    tcphdr->ackno = lwip_htonl(ackno);
 800ba96:	4638      	mov	r0, r7
 800ba98:	f7fb fffb 	bl	8007a92 <lwip_htonl>
 800ba9c:	60a8      	str	r0, [r5, #8]
    TCPH_HDRLEN_FLAGS_SET(tcphdr, (5 + optlen / 4), flags);
 800ba9e:	08a4      	lsrs	r4, r4, #2
 800baa0:	3405      	adds	r4, #5
 800baa2:	f89d 0020 	ldrb.w	r0, [sp, #32]
 800baa6:	ea40 3404 	orr.w	r4, r0, r4, lsl #12
 800baaa:	b2a0      	uxth	r0, r4
 800baac:	f7fb ffec 	bl	8007a88 <lwip_htons>
 800bab0:	81a8      	strh	r0, [r5, #12]
    tcphdr->wnd = lwip_htons(wnd);
 800bab2:	f8bd 0024 	ldrh.w	r0, [sp, #36]	; 0x24
 800bab6:	f7fb ffe7 	bl	8007a88 <lwip_htons>
 800baba:	81e8      	strh	r0, [r5, #14]
    tcphdr->chksum = 0;
 800babc:	2300      	movs	r3, #0
 800babe:	742b      	strb	r3, [r5, #16]
 800bac0:	746b      	strb	r3, [r5, #17]
    tcphdr->urgp = 0;
 800bac2:	74ab      	strb	r3, [r5, #18]
 800bac4:	74eb      	strb	r3, [r5, #19]
}
 800bac6:	4630      	mov	r0, r6
 800bac8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    LWIP_ASSERT("check that first pbuf can hold struct tcp_hdr",
 800bacc:	4b03      	ldr	r3, [pc, #12]	; (800badc <tcp_output_alloc_header_common+0x88>)
 800bace:	f240 7223 	movw	r2, #1827	; 0x723
 800bad2:	4903      	ldr	r1, [pc, #12]	; (800bae0 <tcp_output_alloc_header_common+0x8c>)
 800bad4:	4803      	ldr	r0, [pc, #12]	; (800bae4 <tcp_output_alloc_header_common+0x90>)
 800bad6:	f003 fb0d 	bl	800f0f4 <iprintf>
 800bada:	e7cf      	b.n	800ba7c <tcp_output_alloc_header_common+0x28>
 800badc:	08011de4 	.word	0x08011de4
 800bae0:	08011f30 	.word	0x08011f30
 800bae4:	080103a4 	.word	0x080103a4

0800bae8 <tcp_output_alloc_header>:
{
 800bae8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800baea:	b085      	sub	sp, #20
 800baec:	460d      	mov	r5, r1
 800baee:	4616      	mov	r6, r2
 800baf0:	461f      	mov	r7, r3
  LWIP_ASSERT("tcp_output_alloc_header: invalid pcb", pcb != NULL);
 800baf2:	4604      	mov	r4, r0
 800baf4:	b1a0      	cbz	r0, 800bb20 <tcp_output_alloc_header+0x38>
  p = tcp_output_alloc_header_common(pcb->rcv_nxt, optlen, datalen,
 800baf6:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 800baf8:	9303      	str	r3, [sp, #12]
 800bafa:	2310      	movs	r3, #16
 800bafc:	9302      	str	r3, [sp, #8]
 800bafe:	8b23      	ldrh	r3, [r4, #24]
 800bb00:	9301      	str	r3, [sp, #4]
 800bb02:	8ae3      	ldrh	r3, [r4, #22]
 800bb04:	9300      	str	r3, [sp, #0]
 800bb06:	463b      	mov	r3, r7
 800bb08:	4632      	mov	r2, r6
 800bb0a:	4629      	mov	r1, r5
 800bb0c:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800bb0e:	f7ff ffa1 	bl	800ba54 <tcp_output_alloc_header_common>
  if (p != NULL) {
 800bb12:	b118      	cbz	r0, 800bb1c <tcp_output_alloc_header+0x34>
    pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 800bb14:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 800bb16:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800bb18:	4413      	add	r3, r2
 800bb1a:	62e3      	str	r3, [r4, #44]	; 0x2c
}
 800bb1c:	b005      	add	sp, #20
 800bb1e:	bdf0      	pop	{r4, r5, r6, r7, pc}
  LWIP_ASSERT("tcp_output_alloc_header: invalid pcb", pcb != NULL);
 800bb20:	4b03      	ldr	r3, [pc, #12]	; (800bb30 <tcp_output_alloc_header+0x48>)
 800bb22:	f240 7242 	movw	r2, #1858	; 0x742
 800bb26:	4903      	ldr	r1, [pc, #12]	; (800bb34 <tcp_output_alloc_header+0x4c>)
 800bb28:	4803      	ldr	r0, [pc, #12]	; (800bb38 <tcp_output_alloc_header+0x50>)
 800bb2a:	f003 fae3 	bl	800f0f4 <iprintf>
 800bb2e:	e7e2      	b.n	800baf6 <tcp_output_alloc_header+0xe>
 800bb30:	08011de4 	.word	0x08011de4
 800bb34:	08011f60 	.word	0x08011f60
 800bb38:	080103a4 	.word	0x080103a4

0800bb3c <tcp_output_control_segment>:
 * header checksum and calling ip_output_if while handling netif hints and stats.
 */
static err_t
tcp_output_control_segment(const struct tcp_pcb *pcb, struct pbuf *p,
                           const ip_addr_t *src, const ip_addr_t *dst)
{
 800bb3c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800bb3e:	b085      	sub	sp, #20
 800bb40:	4604      	mov	r4, r0
 800bb42:	4616      	mov	r6, r2
 800bb44:	461d      	mov	r5, r3
  err_t err;
  struct netif *netif;

  LWIP_ASSERT("tcp_output_control_segment: invalid pbuf", p != NULL);
 800bb46:	460f      	mov	r7, r1
 800bb48:	b1c9      	cbz	r1, 800bb7e <tcp_output_control_segment+0x42>
  if ((pcb != NULL) && (pcb->netif_idx != NETIF_NO_INDEX)) {
 800bb4a:	b374      	cbz	r4, 800bbaa <tcp_output_control_segment+0x6e>
 800bb4c:	7a20      	ldrb	r0, [r4, #8]
 800bb4e:	b9f0      	cbnz	r0, 800bb8e <tcp_output_control_segment+0x52>
    return ip_route(src, dst);
 800bb50:	4628      	mov	r0, r5
 800bb52:	f002 f947 	bl	800dde4 <ip4_route>

  netif = tcp_route(pcb, src, dst);
  if (netif == NULL) {
 800bb56:	4602      	mov	r2, r0
 800bb58:	b308      	cbz	r0, 800bb9e <tcp_output_control_segment+0x62>
                                        src, dst);
    }
#endif
    if (pcb != NULL) {
      NETIF_SET_HINTS(netif, LWIP_CONST_CAST(struct netif_hint*, &(pcb->netif_hints)));
      ttl = pcb->ttl;
 800bb5a:	7ae3      	ldrb	r3, [r4, #11]
      tos = pcb->tos;
 800bb5c:	7aa1      	ldrb	r1, [r4, #10]
      /* Send output with hardcoded TTL/HL since we have no access to the pcb */
      ttl = TCP_TTL;
      tos = 0;
    }
    TCP_STATS_INC(tcp.xmit);
    err = ip_output_if(p, src, dst, ttl, tos, IP_PROTO_TCP, netif);
 800bb5e:	9202      	str	r2, [sp, #8]
 800bb60:	2206      	movs	r2, #6
 800bb62:	9201      	str	r2, [sp, #4]
 800bb64:	9100      	str	r1, [sp, #0]
 800bb66:	462a      	mov	r2, r5
 800bb68:	4631      	mov	r1, r6
 800bb6a:	4638      	mov	r0, r7
 800bb6c:	f002 fac6 	bl	800e0fc <ip4_output_if>
 800bb70:	4604      	mov	r4, r0
    NETIF_RESET_HINTS(netif);
  }
  pbuf_free(p);
 800bb72:	4638      	mov	r0, r7
 800bb74:	f7fc fdc8 	bl	8008708 <pbuf_free>
  return err;
}
 800bb78:	4620      	mov	r0, r4
 800bb7a:	b005      	add	sp, #20
 800bb7c:	bdf0      	pop	{r4, r5, r6, r7, pc}
  LWIP_ASSERT("tcp_output_control_segment: invalid pbuf", p != NULL);
 800bb7e:	4b0f      	ldr	r3, [pc, #60]	; (800bbbc <tcp_output_control_segment+0x80>)
 800bb80:	f240 7287 	movw	r2, #1927	; 0x787
 800bb84:	490e      	ldr	r1, [pc, #56]	; (800bbc0 <tcp_output_control_segment+0x84>)
 800bb86:	480f      	ldr	r0, [pc, #60]	; (800bbc4 <tcp_output_control_segment+0x88>)
 800bb88:	f003 fab4 	bl	800f0f4 <iprintf>
 800bb8c:	e7dd      	b.n	800bb4a <tcp_output_control_segment+0xe>
    return netif_get_by_index(pcb->netif_idx);
 800bb8e:	f7fc fcc7 	bl	8008520 <netif_get_by_index>
  if (netif == NULL) {
 800bb92:	4602      	mov	r2, r0
 800bb94:	2800      	cmp	r0, #0
 800bb96:	d1e0      	bne.n	800bb5a <tcp_output_control_segment+0x1e>
    err = ERR_RTE;
 800bb98:	f06f 0403 	mvn.w	r4, #3
 800bb9c:	e7e9      	b.n	800bb72 <tcp_output_control_segment+0x36>
 800bb9e:	f06f 0403 	mvn.w	r4, #3
 800bba2:	e7e6      	b.n	800bb72 <tcp_output_control_segment+0x36>
 800bba4:	f06f 0403 	mvn.w	r4, #3
 800bba8:	e7e3      	b.n	800bb72 <tcp_output_control_segment+0x36>
    return ip_route(src, dst);
 800bbaa:	4628      	mov	r0, r5
 800bbac:	f002 f91a 	bl	800dde4 <ip4_route>
  if (netif == NULL) {
 800bbb0:	4602      	mov	r2, r0
 800bbb2:	2800      	cmp	r0, #0
 800bbb4:	d0f6      	beq.n	800bba4 <tcp_output_control_segment+0x68>
      tos = 0;
 800bbb6:	2100      	movs	r1, #0
      ttl = TCP_TTL;
 800bbb8:	23ff      	movs	r3, #255	; 0xff
 800bbba:	e7d0      	b.n	800bb5e <tcp_output_control_segment+0x22>
 800bbbc:	08011de4 	.word	0x08011de4
 800bbc0:	08011f88 	.word	0x08011f88
 800bbc4:	080103a4 	.word	0x080103a4

0800bbc8 <tcp_write>:
{
 800bbc8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bbcc:	b091      	sub	sp, #68	; 0x44
 800bbce:	9107      	str	r1, [sp, #28]
 800bbd0:	930a      	str	r3, [sp, #40]	; 0x28
  u16_t oversize = 0;
 800bbd2:	2300      	movs	r3, #0
 800bbd4:	f8ad 303e 	strh.w	r3, [sp, #62]	; 0x3e
  LWIP_ERROR("tcp_write: invalid pcb", pcb != NULL, return ERR_ARG);
 800bbd8:	b1c0      	cbz	r0, 800bc0c <tcp_write+0x44>
 800bbda:	4692      	mov	sl, r2
 800bbdc:	4680      	mov	r8, r0
  mss_local = LWIP_MIN(pcb->mss, TCPWND_MIN16(pcb->snd_wnd_max / 2));
 800bbde:	8e42      	ldrh	r2, [r0, #50]	; 0x32
 800bbe0:	f8b0 3062 	ldrh.w	r3, [r0, #98]	; 0x62
 800bbe4:	085b      	lsrs	r3, r3, #1
 800bbe6:	4293      	cmp	r3, r2
 800bbe8:	bf28      	it	cs
 800bbea:	4613      	movcs	r3, r2
 800bbec:	469b      	mov	fp, r3
  mss_local = mss_local ? mss_local : pcb->mss;
 800bbee:	2b00      	cmp	r3, #0
 800bbf0:	bf08      	it	eq
 800bbf2:	4693      	moveq	fp, r2
  LWIP_ERROR("tcp_write: arg == NULL (programmer violates API)",
 800bbf4:	9b07      	ldr	r3, [sp, #28]
 800bbf6:	b19b      	cbz	r3, 800bc20 <tcp_write+0x58>
  if ((pcb->state != ESTABLISHED) &&
 800bbf8:	7d03      	ldrb	r3, [r0, #20]
 800bbfa:	2b07      	cmp	r3, #7
 800bbfc:	d01a      	beq.n	800bc34 <tcp_write+0x6c>
      (pcb->state != CLOSE_WAIT) &&
 800bbfe:	3b02      	subs	r3, #2
 800bc00:	b2db      	uxtb	r3, r3
 800bc02:	2b02      	cmp	r3, #2
 800bc04:	d916      	bls.n	800bc34 <tcp_write+0x6c>
    return ERR_CONN;
 800bc06:	f06f 000a 	mvn.w	r0, #10
  if (err != ERR_OK) {
 800bc0a:	e203      	b.n	800c014 <tcp_write+0x44c>
  LWIP_ERROR("tcp_write: invalid pcb", pcb != NULL, return ERR_ARG);
 800bc0c:	4ba5      	ldr	r3, [pc, #660]	; (800bea4 <tcp_write+0x2dc>)
 800bc0e:	f44f 72cf 	mov.w	r2, #414	; 0x19e
 800bc12:	49a5      	ldr	r1, [pc, #660]	; (800bea8 <tcp_write+0x2e0>)
 800bc14:	48a5      	ldr	r0, [pc, #660]	; (800beac <tcp_write+0x2e4>)
 800bc16:	f003 fa6d 	bl	800f0f4 <iprintf>
 800bc1a:	f06f 000f 	mvn.w	r0, #15
 800bc1e:	e1f9      	b.n	800c014 <tcp_write+0x44c>
  LWIP_ERROR("tcp_write: arg == NULL (programmer violates API)",
 800bc20:	4ba0      	ldr	r3, [pc, #640]	; (800bea4 <tcp_write+0x2dc>)
 800bc22:	f240 12ad 	movw	r2, #429	; 0x1ad
 800bc26:	49a2      	ldr	r1, [pc, #648]	; (800beb0 <tcp_write+0x2e8>)
 800bc28:	48a0      	ldr	r0, [pc, #640]	; (800beac <tcp_write+0x2e4>)
 800bc2a:	f003 fa63 	bl	800f0f4 <iprintf>
 800bc2e:	f06f 000f 	mvn.w	r0, #15
 800bc32:	e1ef      	b.n	800c014 <tcp_write+0x44c>
  } else if (len == 0) {
 800bc34:	f1ba 0f00 	cmp.w	sl, #0
 800bc38:	d039      	beq.n	800bcae <tcp_write+0xe6>
  if (len > pcb->snd_buf) {
 800bc3a:	f8b8 3064 	ldrh.w	r3, [r8, #100]	; 0x64
 800bc3e:	4553      	cmp	r3, sl
 800bc40:	d310      	bcc.n	800bc64 <tcp_write+0x9c>
  if (pcb->snd_queuelen >= LWIP_MIN(TCP_SND_QUEUELEN, (TCP_SNDQUEUELEN_OVERFLOW + 1))) {
 800bc42:	f8b8 3066 	ldrh.w	r3, [r8, #102]	; 0x66
 800bc46:	2b08      	cmp	r3, #8
 800bc48:	d815      	bhi.n	800bc76 <tcp_write+0xae>
  if (pcb->snd_queuelen != 0) {
 800bc4a:	b32b      	cbz	r3, 800bc98 <tcp_write+0xd0>
    LWIP_ASSERT("tcp_write: pbufs on queue => at least one queue non-empty",
 800bc4c:	f8d8 3070 	ldr.w	r3, [r8, #112]	; 0x70
 800bc50:	bb6b      	cbnz	r3, 800bcae <tcp_write+0xe6>
 800bc52:	f8d8 306c 	ldr.w	r3, [r8, #108]	; 0x6c
 800bc56:	b1bb      	cbz	r3, 800bc88 <tcp_write+0xc0>
  queuelen = pcb->snd_queuelen;
 800bc58:	f8b8 6066 	ldrh.w	r6, [r8, #102]	; 0x66
  if (pcb->unsent != NULL) {
 800bc5c:	f8d8 906c 	ldr.w	r9, [r8, #108]	; 0x6c
 800bc60:	464b      	mov	r3, r9
 800bc62:	e02c      	b.n	800bcbe <tcp_write+0xf6>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 800bc64:	f8b8 301a 	ldrh.w	r3, [r8, #26]
 800bc68:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800bc6c:	f8a8 301a 	strh.w	r3, [r8, #26]
    return ERR_MEM;
 800bc70:	f04f 30ff 	mov.w	r0, #4294967295
 800bc74:	e1ce      	b.n	800c014 <tcp_write+0x44c>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 800bc76:	f8b8 301a 	ldrh.w	r3, [r8, #26]
 800bc7a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800bc7e:	f8a8 301a 	strh.w	r3, [r8, #26]
    return ERR_MEM;
 800bc82:	f04f 30ff 	mov.w	r0, #4294967295
 800bc86:	e1c5      	b.n	800c014 <tcp_write+0x44c>
    LWIP_ASSERT("tcp_write: pbufs on queue => at least one queue non-empty",
 800bc88:	4b86      	ldr	r3, [pc, #536]	; (800bea4 <tcp_write+0x2dc>)
 800bc8a:	f240 1255 	movw	r2, #341	; 0x155
 800bc8e:	4989      	ldr	r1, [pc, #548]	; (800beb4 <tcp_write+0x2ec>)
 800bc90:	4886      	ldr	r0, [pc, #536]	; (800beac <tcp_write+0x2e4>)
 800bc92:	f003 fa2f 	bl	800f0f4 <iprintf>
 800bc96:	e00a      	b.n	800bcae <tcp_write+0xe6>
    LWIP_ASSERT("tcp_write: no pbufs on queue => both queues empty",
 800bc98:	f8d8 3070 	ldr.w	r3, [r8, #112]	; 0x70
 800bc9c:	2b00      	cmp	r3, #0
 800bc9e:	d04f      	beq.n	800bd40 <tcp_write+0x178>
 800bca0:	4b80      	ldr	r3, [pc, #512]	; (800bea4 <tcp_write+0x2dc>)
 800bca2:	f44f 72ac 	mov.w	r2, #344	; 0x158
 800bca6:	4984      	ldr	r1, [pc, #528]	; (800beb8 <tcp_write+0x2f0>)
 800bca8:	4880      	ldr	r0, [pc, #512]	; (800beac <tcp_write+0x2e4>)
 800bcaa:	f003 fa23 	bl	800f0f4 <iprintf>
  queuelen = pcb->snd_queuelen;
 800bcae:	f8b8 6066 	ldrh.w	r6, [r8, #102]	; 0x66
  if (pcb->unsent != NULL) {
 800bcb2:	f8d8 906c 	ldr.w	r9, [r8, #108]	; 0x6c
 800bcb6:	f1b9 0f00 	cmp.w	r9, #0
 800bcba:	d047      	beq.n	800bd4c <tcp_write+0x184>
 800bcbc:	464b      	mov	r3, r9
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 800bcbe:	9309      	str	r3, [sp, #36]	; 0x24
 800bcc0:	681b      	ldr	r3, [r3, #0]
 800bcc2:	2b00      	cmp	r3, #0
 800bcc4:	d1fb      	bne.n	800bcbe <tcp_write+0xf6>
    unsent_optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(last_unsent->flags, pcb);
 800bcc6:	4699      	mov	r9, r3
 800bcc8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bcca:	7a9c      	ldrb	r4, [r3, #10]
 800bccc:	00a4      	lsls	r4, r4, #2
 800bcce:	f004 0404 	and.w	r4, r4, #4
    LWIP_ASSERT("mss_local is too small", mss_local >= last_unsent->len + unsent_optlen);
 800bcd2:	891b      	ldrh	r3, [r3, #8]
 800bcd4:	4423      	add	r3, r4
 800bcd6:	459b      	cmp	fp, r3
 800bcd8:	db4f      	blt.n	800bd7a <tcp_write+0x1b2>
    space = mss_local - (last_unsent->len + unsent_optlen);
 800bcda:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bcdc:	891b      	ldrh	r3, [r3, #8]
 800bcde:	ebab 0303 	sub.w	r3, fp, r3
 800bce2:	1b1c      	subs	r4, r3, r4
 800bce4:	b2a3      	uxth	r3, r4
 800bce6:	930b      	str	r3, [sp, #44]	; 0x2c
    oversize = pcb->unsent_oversize;
 800bce8:	f8b8 4068 	ldrh.w	r4, [r8, #104]	; 0x68
 800bcec:	f8ad 403e 	strh.w	r4, [sp, #62]	; 0x3e
    if (oversize > 0) {
 800bcf0:	2c00      	cmp	r4, #0
 800bcf2:	d05b      	beq.n	800bdac <tcp_write+0x1e4>
      LWIP_ASSERT("inconsistent oversize vs. space", oversize <= space);
 800bcf4:	429c      	cmp	r4, r3
 800bcf6:	d848      	bhi.n	800bd8a <tcp_write+0x1c2>
      oversize_used = LWIP_MIN(space, LWIP_MIN(oversize, len));
 800bcf8:	f8bd 303e 	ldrh.w	r3, [sp, #62]	; 0x3e
 800bcfc:	461c      	mov	r4, r3
 800bcfe:	4553      	cmp	r3, sl
 800bd00:	bf28      	it	cs
 800bd02:	4654      	movcs	r4, sl
 800bd04:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800bd06:	4294      	cmp	r4, r2
 800bd08:	bf28      	it	cs
 800bd0a:	4614      	movcs	r4, r2
 800bd0c:	b2a4      	uxth	r4, r4
      oversize -= oversize_used;
 800bd0e:	1b1b      	subs	r3, r3, r4
 800bd10:	b29b      	uxth	r3, r3
 800bd12:	f8ad 303e 	strh.w	r3, [sp, #62]	; 0x3e
      space -= oversize_used;
 800bd16:	1b12      	subs	r2, r2, r4
 800bd18:	b292      	uxth	r2, r2
 800bd1a:	920b      	str	r2, [sp, #44]	; 0x2c
    LWIP_ASSERT("inconsistent oversize vs. len", (oversize == 0) || (pos == len));
 800bd1c:	2b00      	cmp	r3, #0
 800bd1e:	f000 8082 	beq.w	800be26 <tcp_write+0x25e>
 800bd22:	45a2      	cmp	sl, r4
 800bd24:	d139      	bne.n	800bd9a <tcp_write+0x1d2>
 800bd26:	9f09      	ldr	r7, [sp, #36]	; 0x24
  if (oversize_used > 0) {
 800bd28:	2c00      	cmp	r4, #0
 800bd2a:	f000 8266 	beq.w	800c1fa <tcp_write+0x632>
 800bd2e:	46cb      	mov	fp, r9
 800bd30:	2300      	movs	r3, #0
 800bd32:	930b      	str	r3, [sp, #44]	; 0x2c
    for (p = last_unsent->p; p; p = p->next) {
 800bd34:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bd36:	685d      	ldr	r5, [r3, #4]
 800bd38:	2d00      	cmp	r5, #0
 800bd3a:	f040 8187 	bne.w	800c04c <tcp_write+0x484>
 800bd3e:	e198      	b.n	800c072 <tcp_write+0x4aa>
    LWIP_ASSERT("tcp_write: no pbufs on queue => both queues empty",
 800bd40:	f8d8 306c 	ldr.w	r3, [r8, #108]	; 0x6c
 800bd44:	2b00      	cmp	r3, #0
 800bd46:	d1ab      	bne.n	800bca0 <tcp_write+0xd8>
  queuelen = pcb->snd_queuelen;
 800bd48:	f8b8 6066 	ldrh.w	r6, [r8, #102]	; 0x66
    LWIP_ASSERT("unsent_oversize mismatch (pcb->unsent is NULL)",
 800bd4c:	f8b8 4068 	ldrh.w	r4, [r8, #104]	; 0x68
 800bd50:	2c00      	cmp	r4, #0
 800bd52:	f040 8094 	bne.w	800be7e <tcp_write+0x2b6>
  u16_t extendlen = 0;
 800bd56:	940b      	str	r4, [sp, #44]	; 0x2c
  u16_t oversize_used = 0;
 800bd58:	940d      	str	r4, [sp, #52]	; 0x34
  struct tcp_seg *last_unsent = NULL, *seg = NULL, *prev_seg = NULL, *queue = NULL;
 800bd5a:	2300      	movs	r3, #0
 800bd5c:	9309      	str	r3, [sp, #36]	; 0x24
  struct pbuf *concat_p = NULL;
 800bd5e:	4699      	mov	r9, r3
  while (pos < len) {
 800bd60:	45a2      	cmp	sl, r4
 800bd62:	f240 816e 	bls.w	800c042 <tcp_write+0x47a>
 800bd66:	2300      	movs	r3, #0
 800bd68:	9306      	str	r3, [sp, #24]
 800bd6a:	9305      	str	r3, [sp, #20]
    if (apiflags & TCP_WRITE_FLAG_COPY) {
 800bd6c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800bd6e:	f003 0301 	and.w	r3, r3, #1
 800bd72:	9308      	str	r3, [sp, #32]
 800bd74:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
 800bd78:	e110      	b.n	800bf9c <tcp_write+0x3d4>
    LWIP_ASSERT("mss_local is too small", mss_local >= last_unsent->len + unsent_optlen);
 800bd7a:	4b4a      	ldr	r3, [pc, #296]	; (800bea4 <tcp_write+0x2dc>)
 800bd7c:	f44f 72f3 	mov.w	r2, #486	; 0x1e6
 800bd80:	494e      	ldr	r1, [pc, #312]	; (800bebc <tcp_write+0x2f4>)
 800bd82:	484a      	ldr	r0, [pc, #296]	; (800beac <tcp_write+0x2e4>)
 800bd84:	f003 f9b6 	bl	800f0f4 <iprintf>
 800bd88:	e7a7      	b.n	800bcda <tcp_write+0x112>
      LWIP_ASSERT("inconsistent oversize vs. space", oversize <= space);
 800bd8a:	4b46      	ldr	r3, [pc, #280]	; (800bea4 <tcp_write+0x2dc>)
 800bd8c:	f44f 72fc 	mov.w	r2, #504	; 0x1f8
 800bd90:	494b      	ldr	r1, [pc, #300]	; (800bec0 <tcp_write+0x2f8>)
 800bd92:	4846      	ldr	r0, [pc, #280]	; (800beac <tcp_write+0x2e4>)
 800bd94:	f003 f9ae 	bl	800f0f4 <iprintf>
 800bd98:	e7ae      	b.n	800bcf8 <tcp_write+0x130>
    LWIP_ASSERT("inconsistent oversize vs. len", (oversize == 0) || (pos == len));
 800bd9a:	4b42      	ldr	r3, [pc, #264]	; (800bea4 <tcp_write+0x2dc>)
 800bd9c:	f44f 7200 	mov.w	r2, #512	; 0x200
 800bda0:	4948      	ldr	r1, [pc, #288]	; (800bec4 <tcp_write+0x2fc>)
 800bda2:	4842      	ldr	r0, [pc, #264]	; (800beac <tcp_write+0x2e4>)
 800bda4:	f003 f9a6 	bl	800f0f4 <iprintf>
 800bda8:	9f09      	ldr	r7, [sp, #36]	; 0x24
 800bdaa:	e000      	b.n	800bdae <tcp_write+0x1e6>
  struct tcp_seg *last_unsent = NULL, *seg = NULL, *prev_seg = NULL, *queue = NULL;
 800bdac:	464f      	mov	r7, r9
    if ((pos < len) && (space > 0) && (last_unsent->len > 0)) {
 800bdae:	45a2      	cmp	sl, r4
 800bdb0:	d9ba      	bls.n	800bd28 <tcp_write+0x160>
 800bdb2:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800bdb4:	2a00      	cmp	r2, #0
 800bdb6:	d070      	beq.n	800be9a <tcp_write+0x2d2>
 800bdb8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bdba:	891b      	ldrh	r3, [r3, #8]
 800bdbc:	2b00      	cmp	r3, #0
 800bdbe:	d06e      	beq.n	800be9e <tcp_write+0x2d6>
      u16_t seglen = LWIP_MIN(space, len - pos);
 800bdc0:	ebaa 0704 	sub.w	r7, sl, r4
 800bdc4:	4297      	cmp	r7, r2
 800bdc6:	bfa8      	it	ge
 800bdc8:	4617      	movge	r7, r2
 800bdca:	b2bd      	uxth	r5, r7
      if (apiflags & TCP_WRITE_FLAG_COPY) {
 800bdcc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800bdce:	f013 0f01 	tst.w	r3, #1
 800bdd2:	d12a      	bne.n	800be2a <tcp_write+0x262>
        for (p = last_unsent->p; p->next != NULL; p = p->next);
 800bdd4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bdd6:	f8d3 9004 	ldr.w	r9, [r3, #4]
 800bdda:	464a      	mov	r2, r9
 800bddc:	4613      	mov	r3, r2
 800bdde:	6812      	ldr	r2, [r2, #0]
 800bde0:	2a00      	cmp	r2, #0
 800bde2:	d1fb      	bne.n	800bddc <tcp_write+0x214>
        if (((p->type_internal & (PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS | PBUF_TYPE_FLAG_DATA_VOLATILE)) == 0) &&
 800bde4:	4691      	mov	r9, r2
 800bde6:	7b1a      	ldrb	r2, [r3, #12]
 800bde8:	f012 0fc0 	tst.w	r2, #192	; 0xc0
 800bdec:	d105      	bne.n	800bdfa <tcp_write+0x232>
            (const u8_t *)p->payload + p->len == (const u8_t *)arg) {
 800bdee:	895a      	ldrh	r2, [r3, #10]
 800bdf0:	685b      	ldr	r3, [r3, #4]
 800bdf2:	4413      	add	r3, r2
        if (((p->type_internal & (PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS | PBUF_TYPE_FLAG_DATA_VOLATILE)) == 0) &&
 800bdf4:	9a07      	ldr	r2, [sp, #28]
 800bdf6:	429a      	cmp	r2, r3
 800bdf8:	d035      	beq.n	800be66 <tcp_write+0x29e>
          if ((concat_p = pbuf_alloc(PBUF_RAW, seglen, PBUF_ROM)) == NULL) {
 800bdfa:	2201      	movs	r2, #1
 800bdfc:	4629      	mov	r1, r5
 800bdfe:	2000      	movs	r0, #0
 800be00:	f7fc fcf2 	bl	80087e8 <pbuf_alloc>
 800be04:	4681      	mov	r9, r0
 800be06:	2800      	cmp	r0, #0
 800be08:	f000 81d6 	beq.w	800c1b8 <tcp_write+0x5f0>
          ((struct pbuf_rom *)concat_p)->payload = (const u8_t *)arg + pos;
 800be0c:	9b07      	ldr	r3, [sp, #28]
 800be0e:	4423      	add	r3, r4
 800be10:	6043      	str	r3, [r0, #4]
          queuelen += pbuf_clen(concat_p);
 800be12:	f7fc fdf1 	bl	80089f8 <pbuf_clen>
 800be16:	4406      	add	r6, r0
 800be18:	b2b6      	uxth	r6, r6
  u16_t extendlen = 0;
 800be1a:	2300      	movs	r3, #0
 800be1c:	930b      	str	r3, [sp, #44]	; 0x2c
      pos += seglen;
 800be1e:	4425      	add	r5, r4
 800be20:	940d      	str	r4, [sp, #52]	; 0x34
 800be22:	b2ac      	uxth	r4, r5
 800be24:	e79c      	b.n	800bd60 <tcp_write+0x198>
 800be26:	9f09      	ldr	r7, [sp, #36]	; 0x24
 800be28:	e7c1      	b.n	800bdae <tcp_write+0x1e6>
        if ((concat_p = tcp_pbuf_prealloc(PBUF_RAW, seglen, space, &oversize, pcb, apiflags, 1)) == NULL) {
 800be2a:	2301      	movs	r3, #1
 800be2c:	9302      	str	r3, [sp, #8]
 800be2e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800be30:	9301      	str	r3, [sp, #4]
 800be32:	f8cd 8000 	str.w	r8, [sp]
 800be36:	f10d 033e 	add.w	r3, sp, #62	; 0x3e
 800be3a:	4629      	mov	r1, r5
 800be3c:	2000      	movs	r0, #0
 800be3e:	f7ff fd39 	bl	800b8b4 <tcp_pbuf_prealloc>
 800be42:	4681      	mov	r9, r0
 800be44:	2800      	cmp	r0, #0
 800be46:	f000 81b7 	beq.w	800c1b8 <tcp_write+0x5f0>
        TCP_DATA_COPY2(concat_p->payload, (const u8_t *)arg + pos, seglen, &concat_chksum, &concat_chksum_swapped);
 800be4a:	462a      	mov	r2, r5
 800be4c:	9b07      	ldr	r3, [sp, #28]
 800be4e:	1919      	adds	r1, r3, r4
 800be50:	6840      	ldr	r0, [r0, #4]
 800be52:	f003 f88a 	bl	800ef6a <memcpy>
        queuelen += pbuf_clen(concat_p);
 800be56:	4648      	mov	r0, r9
 800be58:	f7fc fdce 	bl	80089f8 <pbuf_clen>
 800be5c:	4406      	add	r6, r0
 800be5e:	b2b6      	uxth	r6, r6
  u16_t extendlen = 0;
 800be60:	2300      	movs	r3, #0
 800be62:	930b      	str	r3, [sp, #44]	; 0x2c
 800be64:	e7db      	b.n	800be1e <tcp_write+0x256>
          LWIP_ASSERT("tcp_write: ROM pbufs cannot be oversized", pos == 0);
 800be66:	b90c      	cbnz	r4, 800be6c <tcp_write+0x2a4>
          extendlen = seglen;
 800be68:	950b      	str	r5, [sp, #44]	; 0x2c
 800be6a:	e7d8      	b.n	800be1e <tcp_write+0x256>
          LWIP_ASSERT("tcp_write: ROM pbufs cannot be oversized", pos == 0);
 800be6c:	4b0d      	ldr	r3, [pc, #52]	; (800bea4 <tcp_write+0x2dc>)
 800be6e:	f240 2231 	movw	r2, #561	; 0x231
 800be72:	4915      	ldr	r1, [pc, #84]	; (800bec8 <tcp_write+0x300>)
 800be74:	480d      	ldr	r0, [pc, #52]	; (800beac <tcp_write+0x2e4>)
 800be76:	f003 f93d 	bl	800f0f4 <iprintf>
          extendlen = seglen;
 800be7a:	950b      	str	r5, [sp, #44]	; 0x2c
 800be7c:	e7cf      	b.n	800be1e <tcp_write+0x256>
    LWIP_ASSERT("unsent_oversize mismatch (pcb->unsent is NULL)",
 800be7e:	4b09      	ldr	r3, [pc, #36]	; (800bea4 <tcp_write+0x2dc>)
 800be80:	f240 224a 	movw	r2, #586	; 0x24a
 800be84:	4911      	ldr	r1, [pc, #68]	; (800becc <tcp_write+0x304>)
 800be86:	4809      	ldr	r0, [pc, #36]	; (800beac <tcp_write+0x2e4>)
 800be88:	f003 f934 	bl	800f0f4 <iprintf>
  u16_t extendlen = 0;
 800be8c:	2300      	movs	r3, #0
 800be8e:	930b      	str	r3, [sp, #44]	; 0x2c
  u16_t oversize_used = 0;
 800be90:	930d      	str	r3, [sp, #52]	; 0x34
  u16_t pos = 0; /* position in 'arg' data */
 800be92:	461c      	mov	r4, r3
  struct tcp_seg *last_unsent = NULL, *seg = NULL, *prev_seg = NULL, *queue = NULL;
 800be94:	9309      	str	r3, [sp, #36]	; 0x24
  struct pbuf *concat_p = NULL;
 800be96:	4699      	mov	r9, r3
 800be98:	e762      	b.n	800bd60 <tcp_write+0x198>
 800be9a:	940d      	str	r4, [sp, #52]	; 0x34
 800be9c:	e763      	b.n	800bd66 <tcp_write+0x19e>
 800be9e:	930b      	str	r3, [sp, #44]	; 0x2c
 800bea0:	940d      	str	r4, [sp, #52]	; 0x34
 800bea2:	e760      	b.n	800bd66 <tcp_write+0x19e>
 800bea4:	08011de4 	.word	0x08011de4
 800bea8:	08011fb4 	.word	0x08011fb4
 800beac:	080103a4 	.word	0x080103a4
 800beb0:	08011fcc 	.word	0x08011fcc
 800beb4:	08012000 	.word	0x08012000
 800beb8:	0801203c 	.word	0x0801203c
 800bebc:	08012070 	.word	0x08012070
 800bec0:	08012088 	.word	0x08012088
 800bec4:	080120a8 	.word	0x080120a8
 800bec8:	080120c8 	.word	0x080120c8
 800becc:	080120f4 	.word	0x080120f4
      if ((p = tcp_pbuf_prealloc(PBUF_TRANSPORT, seglen + optlen, mss_local, &oversize, pcb, apiflags, queue == NULL)) == NULL) {
 800bed0:	9b06      	ldr	r3, [sp, #24]
 800bed2:	fab3 f383 	clz	r3, r3
 800bed6:	095b      	lsrs	r3, r3, #5
 800bed8:	9302      	str	r3, [sp, #8]
 800beda:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800bedc:	9301      	str	r3, [sp, #4]
 800bede:	f8cd 8000 	str.w	r8, [sp]
 800bee2:	f10d 033e 	add.w	r3, sp, #62	; 0x3e
 800bee6:	465a      	mov	r2, fp
 800bee8:	4629      	mov	r1, r5
 800beea:	2036      	movs	r0, #54	; 0x36
 800beec:	f7ff fce2 	bl	800b8b4 <tcp_pbuf_prealloc>
 800bef0:	4607      	mov	r7, r0
 800bef2:	2800      	cmp	r0, #0
 800bef4:	f000 8143 	beq.w	800c17e <tcp_write+0x5b6>
      LWIP_ASSERT("tcp_write: check that first pbuf can hold the complete seglen",
 800bef8:	8943      	ldrh	r3, [r0, #10]
 800befa:	42ab      	cmp	r3, r5
 800befc:	d306      	bcc.n	800bf0c <tcp_write+0x344>
      TCP_DATA_COPY2((char *)p->payload + optlen, (const u8_t *)arg + pos, seglen, &chksum, &chksum_swapped);
 800befe:	462a      	mov	r2, r5
 800bf00:	9b07      	ldr	r3, [sp, #28]
 800bf02:	1919      	adds	r1, r3, r4
 800bf04:	6878      	ldr	r0, [r7, #4]
 800bf06:	f003 f830 	bl	800ef6a <memcpy>
 800bf0a:	e026      	b.n	800bf5a <tcp_write+0x392>
      LWIP_ASSERT("tcp_write: check that first pbuf can hold the complete seglen",
 800bf0c:	4bae      	ldr	r3, [pc, #696]	; (800c1c8 <tcp_write+0x600>)
 800bf0e:	f240 2266 	movw	r2, #614	; 0x266
 800bf12:	49ae      	ldr	r1, [pc, #696]	; (800c1cc <tcp_write+0x604>)
 800bf14:	48ae      	ldr	r0, [pc, #696]	; (800c1d0 <tcp_write+0x608>)
 800bf16:	f003 f8ed 	bl	800f0f4 <iprintf>
 800bf1a:	e7f0      	b.n	800befe <tcp_write+0x336>
      LWIP_ASSERT("oversize == 0", oversize == 0);
 800bf1c:	4baa      	ldr	r3, [pc, #680]	; (800c1c8 <tcp_write+0x600>)
 800bf1e:	f240 2271 	movw	r2, #625	; 0x271
 800bf22:	49ac      	ldr	r1, [pc, #688]	; (800c1d4 <tcp_write+0x60c>)
 800bf24:	48aa      	ldr	r0, [pc, #680]	; (800c1d0 <tcp_write+0x608>)
 800bf26:	f003 f8e5 	bl	800f0f4 <iprintf>
      if ((p2 = pbuf_alloc(PBUF_TRANSPORT, seglen, PBUF_ROM)) == NULL) {
 800bf2a:	2201      	movs	r2, #1
 800bf2c:	4629      	mov	r1, r5
 800bf2e:	2036      	movs	r0, #54	; 0x36
 800bf30:	f7fc fc5a 	bl	80087e8 <pbuf_alloc>
 800bf34:	4681      	mov	r9, r0
 800bf36:	2800      	cmp	r0, #0
 800bf38:	f000 8124 	beq.w	800c184 <tcp_write+0x5bc>
      ((struct pbuf_rom *)p2)->payload = (const u8_t *)arg + pos;
 800bf3c:	9b07      	ldr	r3, [sp, #28]
 800bf3e:	4423      	add	r3, r4
 800bf40:	6043      	str	r3, [r0, #4]
      if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 800bf42:	f44f 7220 	mov.w	r2, #640	; 0x280
 800bf46:	2100      	movs	r1, #0
 800bf48:	2036      	movs	r0, #54	; 0x36
 800bf4a:	f7fc fc4d 	bl	80087e8 <pbuf_alloc>
 800bf4e:	4607      	mov	r7, r0
 800bf50:	2800      	cmp	r0, #0
 800bf52:	d032      	beq.n	800bfba <tcp_write+0x3f2>
      pbuf_cat(p/*header*/, p2/*data*/);
 800bf54:	4649      	mov	r1, r9
 800bf56:	f7fc fd77 	bl	8008a48 <pbuf_cat>
    queuelen += pbuf_clen(p);
 800bf5a:	4638      	mov	r0, r7
 800bf5c:	f7fc fd4c 	bl	80089f8 <pbuf_clen>
 800bf60:	4406      	add	r6, r0
 800bf62:	b2b6      	uxth	r6, r6
    if (queuelen > LWIP_MIN(TCP_SND_QUEUELEN, TCP_SNDQUEUELEN_OVERFLOW)) {
 800bf64:	2e09      	cmp	r6, #9
 800bf66:	d82e      	bhi.n	800bfc6 <tcp_write+0x3fe>
    if ((seg = tcp_create_segment(pcb, p, 0, pcb->snd_lbb + pos, optflags)) == NULL) {
 800bf68:	f8d8 305c 	ldr.w	r3, [r8, #92]	; 0x5c
 800bf6c:	2200      	movs	r2, #0
 800bf6e:	9200      	str	r2, [sp, #0]
 800bf70:	4423      	add	r3, r4
 800bf72:	4639      	mov	r1, r7
 800bf74:	4640      	mov	r0, r8
 800bf76:	f7ff fcf9 	bl	800b96c <tcp_create_segment>
 800bf7a:	4607      	mov	r7, r0
 800bf7c:	2800      	cmp	r0, #0
 800bf7e:	f000 8104 	beq.w	800c18a <tcp_write+0x5c2>
    if (queue == NULL) {
 800bf82:	9b06      	ldr	r3, [sp, #24]
 800bf84:	2b00      	cmp	r3, #0
 800bf86:	d050      	beq.n	800c02a <tcp_write+0x462>
      LWIP_ASSERT("prev_seg != NULL", prev_seg != NULL);
 800bf88:	9b05      	ldr	r3, [sp, #20]
 800bf8a:	2b00      	cmp	r3, #0
 800bf8c:	d045      	beq.n	800c01a <tcp_write+0x452>
      prev_seg->next = seg;
 800bf8e:	9b05      	ldr	r3, [sp, #20]
 800bf90:	601f      	str	r7, [r3, #0]
    pos += seglen;
 800bf92:	442c      	add	r4, r5
 800bf94:	b2a4      	uxth	r4, r4
  while (pos < len) {
 800bf96:	45a2      	cmp	sl, r4
 800bf98:	d949      	bls.n	800c02e <tcp_write+0x466>
    if ((seg = tcp_create_segment(pcb, p, 0, pcb->snd_lbb + pos, optflags)) == NULL) {
 800bf9a:	9705      	str	r7, [sp, #20]
    u16_t left = len - pos;
 800bf9c:	ebaa 0504 	sub.w	r5, sl, r4
    u16_t seglen = LWIP_MIN(left, max_len);
 800bfa0:	b2ad      	uxth	r5, r5
 800bfa2:	455d      	cmp	r5, fp
 800bfa4:	bf28      	it	cs
 800bfa6:	465d      	movcs	r5, fp
 800bfa8:	b2ad      	uxth	r5, r5
    if (apiflags & TCP_WRITE_FLAG_COPY) {
 800bfaa:	9b08      	ldr	r3, [sp, #32]
 800bfac:	2b00      	cmp	r3, #0
 800bfae:	d18f      	bne.n	800bed0 <tcp_write+0x308>
      LWIP_ASSERT("oversize == 0", oversize == 0);
 800bfb0:	f8bd 303e 	ldrh.w	r3, [sp, #62]	; 0x3e
 800bfb4:	2b00      	cmp	r3, #0
 800bfb6:	d0b8      	beq.n	800bf2a <tcp_write+0x362>
 800bfb8:	e7b0      	b.n	800bf1c <tcp_write+0x354>
        pbuf_free(p2);
 800bfba:	4648      	mov	r0, r9
 800bfbc:	f8dd 9030 	ldr.w	r9, [sp, #48]	; 0x30
 800bfc0:	f7fc fba2 	bl	8008708 <pbuf_free>
        goto memerr;
 800bfc4:	e004      	b.n	800bfd0 <tcp_write+0x408>
      pbuf_free(p);
 800bfc6:	f8dd 9030 	ldr.w	r9, [sp, #48]	; 0x30
 800bfca:	4638      	mov	r0, r7
 800bfcc:	f7fc fb9c 	bl	8008708 <pbuf_free>
  tcp_set_flags(pcb, TF_NAGLEMEMERR);
 800bfd0:	f8b8 301a 	ldrh.w	r3, [r8, #26]
 800bfd4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800bfd8:	f8a8 301a 	strh.w	r3, [r8, #26]
  if (concat_p != NULL) {
 800bfdc:	f1b9 0f00 	cmp.w	r9, #0
 800bfe0:	d002      	beq.n	800bfe8 <tcp_write+0x420>
    pbuf_free(concat_p);
 800bfe2:	4648      	mov	r0, r9
 800bfe4:	f7fc fb90 	bl	8008708 <pbuf_free>
  if (queue != NULL) {
 800bfe8:	9b06      	ldr	r3, [sp, #24]
 800bfea:	b113      	cbz	r3, 800bff2 <tcp_write+0x42a>
    tcp_segs_free(queue);
 800bfec:	4618      	mov	r0, r3
 800bfee:	f7fd f852 	bl	8009096 <tcp_segs_free>
  if (pcb->snd_queuelen != 0) {
 800bff2:	f8b8 3066 	ldrh.w	r3, [r8, #102]	; 0x66
 800bff6:	2b00      	cmp	r3, #0
 800bff8:	f000 80d8 	beq.w	800c1ac <tcp_write+0x5e4>
    LWIP_ASSERT("tcp_write: valid queue length", pcb->unacked != NULL ||
 800bffc:	f8d8 3070 	ldr.w	r3, [r8, #112]	; 0x70
 800c000:	2b00      	cmp	r3, #0
 800c002:	f040 80d6 	bne.w	800c1b2 <tcp_write+0x5ea>
 800c006:	f8d8 306c 	ldr.w	r3, [r8, #108]	; 0x6c
 800c00a:	2b00      	cmp	r3, #0
 800c00c:	f000 80c0 	beq.w	800c190 <tcp_write+0x5c8>
  return ERR_MEM;
 800c010:	f04f 30ff 	mov.w	r0, #4294967295
}
 800c014:	b011      	add	sp, #68	; 0x44
 800c016:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      LWIP_ASSERT("prev_seg != NULL", prev_seg != NULL);
 800c01a:	4b6b      	ldr	r3, [pc, #428]	; (800c1c8 <tcp_write+0x600>)
 800c01c:	f240 22ab 	movw	r2, #683	; 0x2ab
 800c020:	496d      	ldr	r1, [pc, #436]	; (800c1d8 <tcp_write+0x610>)
 800c022:	486b      	ldr	r0, [pc, #428]	; (800c1d0 <tcp_write+0x608>)
 800c024:	f003 f866 	bl	800f0f4 <iprintf>
 800c028:	e7b1      	b.n	800bf8e <tcp_write+0x3c6>
    if ((seg = tcp_create_segment(pcb, p, 0, pcb->snd_lbb + pos, optflags)) == NULL) {
 800c02a:	9006      	str	r0, [sp, #24]
 800c02c:	e7b1      	b.n	800bf92 <tcp_write+0x3ca>
 800c02e:	f8dd 9030 	ldr.w	r9, [sp, #48]	; 0x30
  if (oversize_used > 0) {
 800c032:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800c034:	2b00      	cmp	r3, #0
 800c036:	d052      	beq.n	800c0de <tcp_write+0x516>
 800c038:	461c      	mov	r4, r3
 800c03a:	46cb      	mov	fp, r9
 800c03c:	f8dd 9018 	ldr.w	r9, [sp, #24]
 800c040:	e678      	b.n	800bd34 <tcp_write+0x16c>
  while (pos < len) {
 800c042:	9f09      	ldr	r7, [sp, #36]	; 0x24
 800c044:	2300      	movs	r3, #0
 800c046:	9306      	str	r3, [sp, #24]
 800c048:	e7f3      	b.n	800c032 <tcp_write+0x46a>
  if (oversize_used > 0) {
 800c04a:	461d      	mov	r5, r3
      p->tot_len += oversize_used;
 800c04c:	892b      	ldrh	r3, [r5, #8]
 800c04e:	4423      	add	r3, r4
 800c050:	812b      	strh	r3, [r5, #8]
      if (p->next == NULL) {
 800c052:	682b      	ldr	r3, [r5, #0]
 800c054:	2b00      	cmp	r3, #0
 800c056:	d1f8      	bne.n	800c04a <tcp_write+0x482>
        TCP_DATA_COPY((char *)p->payload + p->len, arg, oversize_used, last_unsent);
 800c058:	896b      	ldrh	r3, [r5, #10]
 800c05a:	6868      	ldr	r0, [r5, #4]
 800c05c:	4622      	mov	r2, r4
 800c05e:	9907      	ldr	r1, [sp, #28]
 800c060:	4418      	add	r0, r3
 800c062:	f002 ff82 	bl	800ef6a <memcpy>
        p->len += oversize_used;
 800c066:	896b      	ldrh	r3, [r5, #10]
 800c068:	4423      	add	r3, r4
 800c06a:	816b      	strh	r3, [r5, #10]
    for (p = last_unsent->p; p; p = p->next) {
 800c06c:	682b      	ldr	r3, [r5, #0]
 800c06e:	2b00      	cmp	r3, #0
 800c070:	d1eb      	bne.n	800c04a <tcp_write+0x482>
    last_unsent->len += oversize_used;
 800c072:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800c074:	8913      	ldrh	r3, [r2, #8]
 800c076:	441c      	add	r4, r3
 800c078:	8114      	strh	r4, [r2, #8]
  pcb->unsent_oversize = oversize;
 800c07a:	f8bd 303e 	ldrh.w	r3, [sp, #62]	; 0x3e
 800c07e:	f8a8 3068 	strh.w	r3, [r8, #104]	; 0x68
  if (concat_p != NULL) {
 800c082:	f1bb 0f00 	cmp.w	fp, #0
 800c086:	f000 80af 	beq.w	800c1e8 <tcp_write+0x620>
    pbuf_cat(last_unsent->p, concat_p);
 800c08a:	4659      	mov	r1, fp
 800c08c:	9c09      	ldr	r4, [sp, #36]	; 0x24
 800c08e:	6860      	ldr	r0, [r4, #4]
 800c090:	f7fc fcda 	bl	8008a48 <pbuf_cat>
    last_unsent->len += concat_p->tot_len;
 800c094:	8923      	ldrh	r3, [r4, #8]
 800c096:	f8bb 2008 	ldrh.w	r2, [fp, #8]
 800c09a:	4413      	add	r3, r2
 800c09c:	8123      	strh	r3, [r4, #8]
    last_unsent->next = queue;
 800c09e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c0a0:	f8c3 9000 	str.w	r9, [r3]
  pcb->snd_lbb += len;
 800c0a4:	f8d8 305c 	ldr.w	r3, [r8, #92]	; 0x5c
 800c0a8:	4453      	add	r3, sl
 800c0aa:	f8c8 305c 	str.w	r3, [r8, #92]	; 0x5c
  pcb->snd_buf -= len;
 800c0ae:	f8b8 3064 	ldrh.w	r3, [r8, #100]	; 0x64
 800c0b2:	eba3 0a0a 	sub.w	sl, r3, sl
 800c0b6:	f8a8 a064 	strh.w	sl, [r8, #100]	; 0x64
  pcb->snd_queuelen = queuelen;
 800c0ba:	f8a8 6066 	strh.w	r6, [r8, #102]	; 0x66
  if (pcb->snd_queuelen != 0) {
 800c0be:	b11e      	cbz	r6, 800c0c8 <tcp_write+0x500>
    LWIP_ASSERT("tcp_write: valid queue length",
 800c0c0:	f8d8 3070 	ldr.w	r3, [r8, #112]	; 0x70
 800c0c4:	2b00      	cmp	r3, #0
 800c0c6:	d045      	beq.n	800c154 <tcp_write+0x58c>
  if (seg != NULL && seg->tcphdr != NULL && ((apiflags & TCP_WRITE_FLAG_MORE) == 0)) {
 800c0c8:	2f00      	cmp	r7, #0
 800c0ca:	d06b      	beq.n	800c1a4 <tcp_write+0x5dc>
 800c0cc:	68fb      	ldr	r3, [r7, #12]
 800c0ce:	2b00      	cmp	r3, #0
 800c0d0:	d06a      	beq.n	800c1a8 <tcp_write+0x5e0>
 800c0d2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800c0d4:	f012 0f02 	tst.w	r2, #2
 800c0d8:	d048      	beq.n	800c16c <tcp_write+0x5a4>
  return ERR_OK;
 800c0da:	2000      	movs	r0, #0
 800c0dc:	e79a      	b.n	800c014 <tcp_write+0x44c>
  pcb->unsent_oversize = oversize;
 800c0de:	f8bd 303e 	ldrh.w	r3, [sp, #62]	; 0x3e
 800c0e2:	f8a8 3068 	strh.w	r3, [r8, #104]	; 0x68
  if (concat_p != NULL) {
 800c0e6:	f1b9 0f00 	cmp.w	r9, #0
 800c0ea:	d010      	beq.n	800c10e <tcp_write+0x546>
    LWIP_ASSERT("tcp_write: cannot concatenate when pcb->unsent is empty",
 800c0ec:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c0ee:	b11b      	cbz	r3, 800c0f8 <tcp_write+0x530>
 800c0f0:	46cb      	mov	fp, r9
 800c0f2:	f8dd 9018 	ldr.w	r9, [sp, #24]
 800c0f6:	e7c8      	b.n	800c08a <tcp_write+0x4c2>
 800c0f8:	4b33      	ldr	r3, [pc, #204]	; (800c1c8 <tcp_write+0x600>)
 800c0fa:	f44f 7238 	mov.w	r2, #736	; 0x2e0
 800c0fe:	4937      	ldr	r1, [pc, #220]	; (800c1dc <tcp_write+0x614>)
 800c100:	4833      	ldr	r0, [pc, #204]	; (800c1d0 <tcp_write+0x608>)
 800c102:	f002 fff7 	bl	800f0f4 <iprintf>
 800c106:	46cb      	mov	fp, r9
 800c108:	f8dd 9018 	ldr.w	r9, [sp, #24]
 800c10c:	e7bd      	b.n	800c08a <tcp_write+0x4c2>
 800c10e:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 800c110:	f8dd 9018 	ldr.w	r9, [sp, #24]
 800c114:	e075      	b.n	800c202 <tcp_write+0x63a>
 800c116:	940b      	str	r4, [sp, #44]	; 0x2c
    LWIP_ASSERT("tcp_write: extension of reference requires reference",
 800c118:	4b2b      	ldr	r3, [pc, #172]	; (800c1c8 <tcp_write+0x600>)
 800c11a:	f240 22e6 	movw	r2, #742	; 0x2e6
 800c11e:	4930      	ldr	r1, [pc, #192]	; (800c1e0 <tcp_write+0x618>)
 800c120:	482b      	ldr	r0, [pc, #172]	; (800c1d0 <tcp_write+0x608>)
 800c122:	f002 ffe7 	bl	800f0f4 <iprintf>
 800c126:	e076      	b.n	800c216 <tcp_write+0x64e>
    for (p = last_unsent->p; p->next != NULL; p = p->next) {
 800c128:	461a      	mov	r2, r3
      p->tot_len += extendlen;
 800c12a:	890b      	ldrh	r3, [r1, #8]
 800c12c:	4403      	add	r3, r0
 800c12e:	810b      	strh	r3, [r1, #8]
    for (p = last_unsent->p; p->next != NULL; p = p->next) {
 800c130:	6813      	ldr	r3, [r2, #0]
 800c132:	4611      	mov	r1, r2
 800c134:	2b00      	cmp	r3, #0
 800c136:	d1f7      	bne.n	800c128 <tcp_write+0x560>
    p->tot_len += extendlen;
 800c138:	8913      	ldrh	r3, [r2, #8]
 800c13a:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800c13c:	440b      	add	r3, r1
 800c13e:	8113      	strh	r3, [r2, #8]
    p->len += extendlen;
 800c140:	8953      	ldrh	r3, [r2, #10]
 800c142:	440b      	add	r3, r1
 800c144:	8153      	strh	r3, [r2, #10]
    last_unsent->len += extendlen;
 800c146:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800c148:	8913      	ldrh	r3, [r2, #8]
 800c14a:	440b      	add	r3, r1
 800c14c:	8113      	strh	r3, [r2, #8]
 800c14e:	e7a6      	b.n	800c09e <tcp_write+0x4d6>
    for (p = last_unsent->p; p->next != NULL; p = p->next) {
 800c150:	460a      	mov	r2, r1
 800c152:	e7f1      	b.n	800c138 <tcp_write+0x570>
    LWIP_ASSERT("tcp_write: valid queue length",
 800c154:	f8d8 306c 	ldr.w	r3, [r8, #108]	; 0x6c
 800c158:	2b00      	cmp	r3, #0
 800c15a:	d1b5      	bne.n	800c0c8 <tcp_write+0x500>
 800c15c:	4b1a      	ldr	r3, [pc, #104]	; (800c1c8 <tcp_write+0x600>)
 800c15e:	f240 3212 	movw	r2, #786	; 0x312
 800c162:	4920      	ldr	r1, [pc, #128]	; (800c1e4 <tcp_write+0x61c>)
 800c164:	481a      	ldr	r0, [pc, #104]	; (800c1d0 <tcp_write+0x608>)
 800c166:	f002 ffc5 	bl	800f0f4 <iprintf>
 800c16a:	e7ad      	b.n	800c0c8 <tcp_write+0x500>
    TCPH_SET_FLAG(seg->tcphdr, TCP_PSH);
 800c16c:	899c      	ldrh	r4, [r3, #12]
 800c16e:	2008      	movs	r0, #8
 800c170:	f7fb fc8a 	bl	8007a88 <lwip_htons>
 800c174:	68fb      	ldr	r3, [r7, #12]
 800c176:	4304      	orrs	r4, r0
 800c178:	819c      	strh	r4, [r3, #12]
  return ERR_OK;
 800c17a:	2000      	movs	r0, #0
 800c17c:	e74a      	b.n	800c014 <tcp_write+0x44c>
 800c17e:	f8dd 9030 	ldr.w	r9, [sp, #48]	; 0x30
 800c182:	e725      	b.n	800bfd0 <tcp_write+0x408>
 800c184:	f8dd 9030 	ldr.w	r9, [sp, #48]	; 0x30
 800c188:	e722      	b.n	800bfd0 <tcp_write+0x408>
 800c18a:	f8dd 9030 	ldr.w	r9, [sp, #48]	; 0x30
 800c18e:	e71f      	b.n	800bfd0 <tcp_write+0x408>
    LWIP_ASSERT("tcp_write: valid queue length", pcb->unacked != NULL ||
 800c190:	4b0d      	ldr	r3, [pc, #52]	; (800c1c8 <tcp_write+0x600>)
 800c192:	f240 3227 	movw	r2, #807	; 0x327
 800c196:	4913      	ldr	r1, [pc, #76]	; (800c1e4 <tcp_write+0x61c>)
 800c198:	480d      	ldr	r0, [pc, #52]	; (800c1d0 <tcp_write+0x608>)
 800c19a:	f002 ffab 	bl	800f0f4 <iprintf>
  return ERR_MEM;
 800c19e:	f04f 30ff 	mov.w	r0, #4294967295
 800c1a2:	e737      	b.n	800c014 <tcp_write+0x44c>
  return ERR_OK;
 800c1a4:	2000      	movs	r0, #0
 800c1a6:	e735      	b.n	800c014 <tcp_write+0x44c>
 800c1a8:	2000      	movs	r0, #0
 800c1aa:	e733      	b.n	800c014 <tcp_write+0x44c>
  return ERR_MEM;
 800c1ac:	f04f 30ff 	mov.w	r0, #4294967295
 800c1b0:	e730      	b.n	800c014 <tcp_write+0x44c>
 800c1b2:	f04f 30ff 	mov.w	r0, #4294967295
 800c1b6:	e72d      	b.n	800c014 <tcp_write+0x44c>
  tcp_set_flags(pcb, TF_NAGLEMEMERR);
 800c1b8:	f8b8 301a 	ldrh.w	r3, [r8, #26]
 800c1bc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c1c0:	f8a8 301a 	strh.w	r3, [r8, #26]
  if (queue != NULL) {
 800c1c4:	e715      	b.n	800bff2 <tcp_write+0x42a>
 800c1c6:	bf00      	nop
 800c1c8:	08011de4 	.word	0x08011de4
 800c1cc:	08012124 	.word	0x08012124
 800c1d0:	080103a4 	.word	0x080103a4
 800c1d4:	08012164 	.word	0x08012164
 800c1d8:	08012174 	.word	0x08012174
 800c1dc:	08012188 	.word	0x08012188
 800c1e0:	080121c0 	.word	0x080121c0
 800c1e4:	080121f8 	.word	0x080121f8
  } else if (extendlen > 0) {
 800c1e8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c1ea:	b983      	cbnz	r3, 800c20e <tcp_write+0x646>
  if (last_unsent == NULL) {
 800c1ec:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c1ee:	2b00      	cmp	r3, #0
 800c1f0:	f47f af55 	bne.w	800c09e <tcp_write+0x4d6>
    pcb->unsent = queue;
 800c1f4:	f8c8 906c 	str.w	r9, [r8, #108]	; 0x6c
 800c1f8:	e754      	b.n	800c0a4 <tcp_write+0x4dc>
  pcb->unsent_oversize = oversize;
 800c1fa:	f8bd 303e 	ldrh.w	r3, [sp, #62]	; 0x3e
 800c1fe:	f8a8 3068 	strh.w	r3, [r8, #104]	; 0x68
  } else if (extendlen > 0) {
 800c202:	2c00      	cmp	r4, #0
 800c204:	d0f2      	beq.n	800c1ec <tcp_write+0x624>
    LWIP_ASSERT("tcp_write: extension of reference requires reference",
 800c206:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c208:	2b00      	cmp	r3, #0
 800c20a:	d084      	beq.n	800c116 <tcp_write+0x54e>
 800c20c:	940b      	str	r4, [sp, #44]	; 0x2c
 800c20e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c210:	685b      	ldr	r3, [r3, #4]
 800c212:	2b00      	cmp	r3, #0
 800c214:	d080      	beq.n	800c118 <tcp_write+0x550>
    for (p = last_unsent->p; p->next != NULL; p = p->next) {
 800c216:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c218:	6859      	ldr	r1, [r3, #4]
 800c21a:	680a      	ldr	r2, [r1, #0]
 800c21c:	2a00      	cmp	r2, #0
 800c21e:	d097      	beq.n	800c150 <tcp_write+0x588>
 800c220:	980b      	ldr	r0, [sp, #44]	; 0x2c
 800c222:	e782      	b.n	800c12a <tcp_write+0x562>

0800c224 <tcp_split_unsent_seg>:
{
 800c224:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c228:	b083      	sub	sp, #12
 800c22a:	460c      	mov	r4, r1
  LWIP_ASSERT("tcp_split_unsent_seg: invalid pcb", pcb != NULL);
 800c22c:	4607      	mov	r7, r0
 800c22e:	2800      	cmp	r0, #0
 800c230:	d037      	beq.n	800c2a2 <tcp_split_unsent_seg+0x7e>
  useg = pcb->unsent;
 800c232:	6efd      	ldr	r5, [r7, #108]	; 0x6c
  if (useg == NULL) {
 800c234:	2d00      	cmp	r5, #0
 800c236:	f000 80b7 	beq.w	800c3a8 <tcp_split_unsent_seg+0x184>
  if (split == 0) {
 800c23a:	2c00      	cmp	r4, #0
 800c23c:	d039      	beq.n	800c2b2 <tcp_split_unsent_seg+0x8e>
  if (useg->len <= split) {
 800c23e:	892b      	ldrh	r3, [r5, #8]
 800c240:	42a3      	cmp	r3, r4
 800c242:	f240 80b4 	bls.w	800c3ae <tcp_split_unsent_seg+0x18a>
  LWIP_ASSERT("split <= mss", split <= pcb->mss);
 800c246:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 800c248:	42a3      	cmp	r3, r4
 800c24a:	d33c      	bcc.n	800c2c6 <tcp_split_unsent_seg+0xa2>
  optflags = useg->flags;
 800c24c:	f895 900a 	ldrb.w	r9, [r5, #10]
  optlen = LWIP_TCP_OPT_LENGTH(optflags);
 800c250:	ea4f 0b89 	mov.w	fp, r9, lsl #2
 800c254:	f00b 0b04 	and.w	fp, fp, #4
  remainder = useg->len - split;
 800c258:	f8b5 a008 	ldrh.w	sl, [r5, #8]
 800c25c:	ebaa 0604 	sub.w	r6, sl, r4
 800c260:	b2b6      	uxth	r6, r6
  p = pbuf_alloc(PBUF_TRANSPORT, remainder + optlen, PBUF_RAM);
 800c262:	eb06 010b 	add.w	r1, r6, fp
 800c266:	f44f 7220 	mov.w	r2, #640	; 0x280
 800c26a:	b289      	uxth	r1, r1
 800c26c:	2036      	movs	r0, #54	; 0x36
 800c26e:	f7fc fabb 	bl	80087e8 <pbuf_alloc>
  if (p == NULL) {
 800c272:	4680      	mov	r8, r0
 800c274:	2800      	cmp	r0, #0
 800c276:	f000 809e 	beq.w	800c3b6 <tcp_split_unsent_seg+0x192>
  offset = useg->p->tot_len - useg->len + split;
 800c27a:	6868      	ldr	r0, [r5, #4]
 800c27c:	8903      	ldrh	r3, [r0, #8]
 800c27e:	892a      	ldrh	r2, [r5, #8]
 800c280:	1a9b      	subs	r3, r3, r2
 800c282:	4423      	add	r3, r4
  if (pbuf_copy_partial(useg->p, (u8_t *)p->payload + optlen, remainder, offset ) != remainder) {
 800c284:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800c288:	b29b      	uxth	r3, r3
 800c28a:	4632      	mov	r2, r6
 800c28c:	4459      	add	r1, fp
 800c28e:	f7fc fcbb 	bl	8008c08 <pbuf_copy_partial>
 800c292:	42b0      	cmp	r0, r6
 800c294:	d029      	beq.n	800c2ea <tcp_split_unsent_seg+0xc6>
    pbuf_free(p);
 800c296:	4640      	mov	r0, r8
 800c298:	f7fc fa36 	bl	8008708 <pbuf_free>
  return ERR_MEM;
 800c29c:	f04f 30ff 	mov.w	r0, #4294967295
 800c2a0:	e086      	b.n	800c3b0 <tcp_split_unsent_seg+0x18c>
  LWIP_ASSERT("tcp_split_unsent_seg: invalid pcb", pcb != NULL);
 800c2a2:	4b46      	ldr	r3, [pc, #280]	; (800c3bc <tcp_split_unsent_seg+0x198>)
 800c2a4:	f240 324b 	movw	r2, #843	; 0x34b
 800c2a8:	4945      	ldr	r1, [pc, #276]	; (800c3c0 <tcp_split_unsent_seg+0x19c>)
 800c2aa:	4846      	ldr	r0, [pc, #280]	; (800c3c4 <tcp_split_unsent_seg+0x1a0>)
 800c2ac:	f002 ff22 	bl	800f0f4 <iprintf>
 800c2b0:	e7bf      	b.n	800c232 <tcp_split_unsent_seg+0xe>
    LWIP_ASSERT("Can't split segment into length 0", 0);
 800c2b2:	4b42      	ldr	r3, [pc, #264]	; (800c3bc <tcp_split_unsent_seg+0x198>)
 800c2b4:	f240 3253 	movw	r2, #851	; 0x353
 800c2b8:	4943      	ldr	r1, [pc, #268]	; (800c3c8 <tcp_split_unsent_seg+0x1a4>)
 800c2ba:	4842      	ldr	r0, [pc, #264]	; (800c3c4 <tcp_split_unsent_seg+0x1a0>)
 800c2bc:	f002 ff1a 	bl	800f0f4 <iprintf>
    return ERR_VAL;
 800c2c0:	f06f 0005 	mvn.w	r0, #5
 800c2c4:	e074      	b.n	800c3b0 <tcp_split_unsent_seg+0x18c>
  LWIP_ASSERT("split <= mss", split <= pcb->mss);
 800c2c6:	4b3d      	ldr	r3, [pc, #244]	; (800c3bc <tcp_split_unsent_seg+0x198>)
 800c2c8:	f240 325b 	movw	r2, #859	; 0x35b
 800c2cc:	493f      	ldr	r1, [pc, #252]	; (800c3cc <tcp_split_unsent_seg+0x1a8>)
 800c2ce:	483d      	ldr	r0, [pc, #244]	; (800c3c4 <tcp_split_unsent_seg+0x1a0>)
 800c2d0:	f002 ff10 	bl	800f0f4 <iprintf>
  LWIP_ASSERT("useg->len > 0", useg->len > 0);
 800c2d4:	892b      	ldrh	r3, [r5, #8]
 800c2d6:	2b00      	cmp	r3, #0
 800c2d8:	d1b8      	bne.n	800c24c <tcp_split_unsent_seg+0x28>
 800c2da:	4b38      	ldr	r3, [pc, #224]	; (800c3bc <tcp_split_unsent_seg+0x198>)
 800c2dc:	f44f 7257 	mov.w	r2, #860	; 0x35c
 800c2e0:	493b      	ldr	r1, [pc, #236]	; (800c3d0 <tcp_split_unsent_seg+0x1ac>)
 800c2e2:	4838      	ldr	r0, [pc, #224]	; (800c3c4 <tcp_split_unsent_seg+0x1a0>)
 800c2e4:	f002 ff06 	bl	800f0f4 <iprintf>
 800c2e8:	e7b0      	b.n	800c24c <tcp_split_unsent_seg+0x28>
  split_flags = TCPH_FLAGS(useg->tcphdr);
 800c2ea:	68eb      	ldr	r3, [r5, #12]
 800c2ec:	8998      	ldrh	r0, [r3, #12]
 800c2ee:	f7fb fbcb 	bl	8007a88 <lwip_htons>
 800c2f2:	b2c6      	uxtb	r6, r0
  if (split_flags & TCP_PSH) {
 800c2f4:	f010 0b08 	ands.w	fp, r0, #8
  split_flags = TCPH_FLAGS(useg->tcphdr);
 800c2f8:	bf0e      	itee	eq
 800c2fa:	f006 063f 	andeq.w	r6, r6, #63	; 0x3f
    split_flags &= ~TCP_PSH;
 800c2fe:	f006 0637 	andne.w	r6, r6, #55	; 0x37
    remainder_flags |= TCP_PSH;
 800c302:	f04f 0b08 	movne.w	fp, #8
  if (split_flags & TCP_FIN) {
 800c306:	f016 0f01 	tst.w	r6, #1
    split_flags &= ~TCP_FIN;
 800c30a:	bf1c      	itt	ne
 800c30c:	f006 06fe 	andne.w	r6, r6, #254	; 0xfe
    remainder_flags |= TCP_FIN;
 800c310:	f04b 0b01 	orrne.w	fp, fp, #1
  seg = tcp_create_segment(pcb, p, remainder_flags, lwip_ntohl(useg->tcphdr->seqno) + split, optflags);
 800c314:	68eb      	ldr	r3, [r5, #12]
 800c316:	6858      	ldr	r0, [r3, #4]
 800c318:	f7fb fbbb 	bl	8007a92 <lwip_htonl>
 800c31c:	f8cd 9000 	str.w	r9, [sp]
 800c320:	1823      	adds	r3, r4, r0
 800c322:	465a      	mov	r2, fp
 800c324:	4641      	mov	r1, r8
 800c326:	4638      	mov	r0, r7
 800c328:	f7ff fb20 	bl	800b96c <tcp_create_segment>
  if (seg == NULL) {
 800c32c:	4681      	mov	r9, r0
 800c32e:	2800      	cmp	r0, #0
 800c330:	d0b1      	beq.n	800c296 <tcp_split_unsent_seg+0x72>
  pcb->snd_queuelen -= pbuf_clen(useg->p);
 800c332:	6868      	ldr	r0, [r5, #4]
 800c334:	f7fc fb60 	bl	80089f8 <pbuf_clen>
 800c338:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 800c33c:	1a1b      	subs	r3, r3, r0
 800c33e:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
  pbuf_realloc(useg->p, useg->p->tot_len - remainder);
 800c342:	6868      	ldr	r0, [r5, #4]
 800c344:	eba4 040a 	sub.w	r4, r4, sl
 800c348:	b2a4      	uxth	r4, r4
 800c34a:	8901      	ldrh	r1, [r0, #8]
 800c34c:	4421      	add	r1, r4
 800c34e:	b289      	uxth	r1, r1
 800c350:	f7fc faf2 	bl	8008938 <pbuf_realloc>
  useg->len -= remainder;
 800c354:	892b      	ldrh	r3, [r5, #8]
 800c356:	441c      	add	r4, r3
 800c358:	812c      	strh	r4, [r5, #8]
  TCPH_SET_FLAG(useg->tcphdr, split_flags);
 800c35a:	68eb      	ldr	r3, [r5, #12]
 800c35c:	899c      	ldrh	r4, [r3, #12]
 800c35e:	4630      	mov	r0, r6
 800c360:	f7fb fb92 	bl	8007a88 <lwip_htons>
 800c364:	68eb      	ldr	r3, [r5, #12]
 800c366:	4304      	orrs	r4, r0
 800c368:	819c      	strh	r4, [r3, #12]
  pcb->snd_queuelen += pbuf_clen(useg->p);
 800c36a:	6868      	ldr	r0, [r5, #4]
 800c36c:	f7fc fb44 	bl	80089f8 <pbuf_clen>
 800c370:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 800c374:	4418      	add	r0, r3
 800c376:	f8a7 0066 	strh.w	r0, [r7, #102]	; 0x66
  pcb->snd_queuelen += pbuf_clen(seg->p);
 800c37a:	f8d9 0004 	ldr.w	r0, [r9, #4]
 800c37e:	f7fc fb3b 	bl	80089f8 <pbuf_clen>
 800c382:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 800c386:	4418      	add	r0, r3
 800c388:	f8a7 0066 	strh.w	r0, [r7, #102]	; 0x66
  seg->next = useg->next;
 800c38c:	682b      	ldr	r3, [r5, #0]
 800c38e:	f8c9 3000 	str.w	r3, [r9]
  useg->next = seg;
 800c392:	f8c5 9000 	str.w	r9, [r5]
  if (seg->next == NULL) {
 800c396:	f8d9 3000 	ldr.w	r3, [r9]
 800c39a:	b10b      	cbz	r3, 800c3a0 <tcp_split_unsent_seg+0x17c>
  return ERR_OK;
 800c39c:	2000      	movs	r0, #0
 800c39e:	e007      	b.n	800c3b0 <tcp_split_unsent_seg+0x18c>
    pcb->unsent_oversize = 0;
 800c3a0:	2000      	movs	r0, #0
 800c3a2:	f8a7 0068 	strh.w	r0, [r7, #104]	; 0x68
 800c3a6:	e003      	b.n	800c3b0 <tcp_split_unsent_seg+0x18c>
    return ERR_MEM;
 800c3a8:	f04f 30ff 	mov.w	r0, #4294967295
 800c3ac:	e000      	b.n	800c3b0 <tcp_split_unsent_seg+0x18c>
    return ERR_OK;
 800c3ae:	2000      	movs	r0, #0
}
 800c3b0:	b003      	add	sp, #12
 800c3b2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  return ERR_MEM;
 800c3b6:	f04f 30ff 	mov.w	r0, #4294967295
 800c3ba:	e7f9      	b.n	800c3b0 <tcp_split_unsent_seg+0x18c>
 800c3bc:	08011de4 	.word	0x08011de4
 800c3c0:	08012218 	.word	0x08012218
 800c3c4:	080103a4 	.word	0x080103a4
 800c3c8:	0801223c 	.word	0x0801223c
 800c3cc:	08012260 	.word	0x08012260
 800c3d0:	08012270 	.word	0x08012270

0800c3d4 <tcp_enqueue_flags>:
{
 800c3d4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800c3d8:	b083      	sub	sp, #12
 800c3da:	4604      	mov	r4, r0
 800c3dc:	460d      	mov	r5, r1
  LWIP_ASSERT("tcp_enqueue_flags: need either TCP_SYN or TCP_FIN in flags (programmer violates API)",
 800c3de:	f011 0703 	ands.w	r7, r1, #3
 800c3e2:	d048      	beq.n	800c476 <tcp_enqueue_flags+0xa2>
  LWIP_ASSERT("tcp_enqueue_flags: invalid pcb", pcb != NULL);
 800c3e4:	2c00      	cmp	r4, #0
 800c3e6:	d04e      	beq.n	800c486 <tcp_enqueue_flags+0xb2>
  if (flags & TCP_SYN) {
 800c3e8:	f3c5 0640 	ubfx	r6, r5, #1, #1
  if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 800c3ec:	ea4f 0886 	mov.w	r8, r6, lsl #2
 800c3f0:	f44f 7220 	mov.w	r2, #640	; 0x280
 800c3f4:	4641      	mov	r1, r8
 800c3f6:	2036      	movs	r0, #54	; 0x36
 800c3f8:	f7fc f9f6 	bl	80087e8 <pbuf_alloc>
 800c3fc:	4681      	mov	r9, r0
 800c3fe:	2800      	cmp	r0, #0
 800c400:	d049      	beq.n	800c496 <tcp_enqueue_flags+0xc2>
  LWIP_ASSERT("tcp_enqueue_flags: check that first pbuf can hold optlen",
 800c402:	8943      	ldrh	r3, [r0, #10]
 800c404:	4543      	cmp	r3, r8
 800c406:	d34d      	bcc.n	800c4a4 <tcp_enqueue_flags+0xd0>
  if ((seg = tcp_create_segment(pcb, p, flags, pcb->snd_lbb, optflags)) == NULL) {
 800c408:	9600      	str	r6, [sp, #0]
 800c40a:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 800c40c:	462a      	mov	r2, r5
 800c40e:	4649      	mov	r1, r9
 800c410:	4620      	mov	r0, r4
 800c412:	f7ff faab 	bl	800b96c <tcp_create_segment>
 800c416:	4606      	mov	r6, r0
 800c418:	2800      	cmp	r0, #0
 800c41a:	d04b      	beq.n	800c4b4 <tcp_enqueue_flags+0xe0>
  LWIP_ASSERT("seg->tcphdr not aligned", ((mem_ptr_t)seg->tcphdr % LWIP_MIN(MEM_ALIGNMENT, 4)) == 0);
 800c41c:	68c3      	ldr	r3, [r0, #12]
 800c41e:	f013 0f03 	tst.w	r3, #3
 800c422:	d14e      	bne.n	800c4c2 <tcp_enqueue_flags+0xee>
  LWIP_ASSERT("tcp_enqueue_flags: invalid segment length", seg->len == 0);
 800c424:	8933      	ldrh	r3, [r6, #8]
 800c426:	2b00      	cmp	r3, #0
 800c428:	d153      	bne.n	800c4d2 <tcp_enqueue_flags+0xfe>
  if (pcb->unsent == NULL) {
 800c42a:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 800c42c:	2b00      	cmp	r3, #0
 800c42e:	d058      	beq.n	800c4e2 <tcp_enqueue_flags+0x10e>
    for (useg = pcb->unsent; useg->next != NULL; useg = useg->next);
 800c430:	461a      	mov	r2, r3
 800c432:	681b      	ldr	r3, [r3, #0]
 800c434:	2b00      	cmp	r3, #0
 800c436:	d1fb      	bne.n	800c430 <tcp_enqueue_flags+0x5c>
    useg->next = seg;
 800c438:	6016      	str	r6, [r2, #0]
  pcb->unsent_oversize = 0;
 800c43a:	2300      	movs	r3, #0
 800c43c:	f8a4 3068 	strh.w	r3, [r4, #104]	; 0x68
  if ((flags & TCP_SYN) || (flags & TCP_FIN)) {
 800c440:	b117      	cbz	r7, 800c448 <tcp_enqueue_flags+0x74>
    pcb->snd_lbb++;
 800c442:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 800c444:	3301      	adds	r3, #1
 800c446:	65e3      	str	r3, [r4, #92]	; 0x5c
  if (flags & TCP_FIN) {
 800c448:	f015 0f01 	tst.w	r5, #1
 800c44c:	d003      	beq.n	800c456 <tcp_enqueue_flags+0x82>
    tcp_set_flags(pcb, TF_FIN);
 800c44e:	8b63      	ldrh	r3, [r4, #26]
 800c450:	f043 0320 	orr.w	r3, r3, #32
 800c454:	8363      	strh	r3, [r4, #26]
  pcb->snd_queuelen += pbuf_clen(seg->p);
 800c456:	6870      	ldr	r0, [r6, #4]
 800c458:	f7fc face 	bl	80089f8 <pbuf_clen>
 800c45c:	f8b4 3066 	ldrh.w	r3, [r4, #102]	; 0x66
 800c460:	4418      	add	r0, r3
 800c462:	b280      	uxth	r0, r0
 800c464:	f8a4 0066 	strh.w	r0, [r4, #102]	; 0x66
  if (pcb->snd_queuelen != 0) {
 800c468:	2800      	cmp	r0, #0
 800c46a:	d049      	beq.n	800c500 <tcp_enqueue_flags+0x12c>
    LWIP_ASSERT("tcp_enqueue_flags: invalid queue length",
 800c46c:	6f23      	ldr	r3, [r4, #112]	; 0x70
 800c46e:	2b00      	cmp	r3, #0
 800c470:	d039      	beq.n	800c4e6 <tcp_enqueue_flags+0x112>
  return ERR_OK;
 800c472:	2000      	movs	r0, #0
 800c474:	e045      	b.n	800c502 <tcp_enqueue_flags+0x12e>
  LWIP_ASSERT("tcp_enqueue_flags: need either TCP_SYN or TCP_FIN in flags (programmer violates API)",
 800c476:	4b24      	ldr	r3, [pc, #144]	; (800c508 <tcp_enqueue_flags+0x134>)
 800c478:	f240 4211 	movw	r2, #1041	; 0x411
 800c47c:	4923      	ldr	r1, [pc, #140]	; (800c50c <tcp_enqueue_flags+0x138>)
 800c47e:	4824      	ldr	r0, [pc, #144]	; (800c510 <tcp_enqueue_flags+0x13c>)
 800c480:	f002 fe38 	bl	800f0f4 <iprintf>
 800c484:	e7ae      	b.n	800c3e4 <tcp_enqueue_flags+0x10>
  LWIP_ASSERT("tcp_enqueue_flags: invalid pcb", pcb != NULL);
 800c486:	4b20      	ldr	r3, [pc, #128]	; (800c508 <tcp_enqueue_flags+0x134>)
 800c488:	f240 4213 	movw	r2, #1043	; 0x413
 800c48c:	4921      	ldr	r1, [pc, #132]	; (800c514 <tcp_enqueue_flags+0x140>)
 800c48e:	4820      	ldr	r0, [pc, #128]	; (800c510 <tcp_enqueue_flags+0x13c>)
 800c490:	f002 fe30 	bl	800f0f4 <iprintf>
 800c494:	e7a8      	b.n	800c3e8 <tcp_enqueue_flags+0x14>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 800c496:	8b63      	ldrh	r3, [r4, #26]
 800c498:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c49c:	8363      	strh	r3, [r4, #26]
    return ERR_MEM;
 800c49e:	f04f 30ff 	mov.w	r0, #4294967295
 800c4a2:	e02e      	b.n	800c502 <tcp_enqueue_flags+0x12e>
  LWIP_ASSERT("tcp_enqueue_flags: check that first pbuf can hold optlen",
 800c4a4:	4b18      	ldr	r3, [pc, #96]	; (800c508 <tcp_enqueue_flags+0x134>)
 800c4a6:	f240 4239 	movw	r2, #1081	; 0x439
 800c4aa:	491b      	ldr	r1, [pc, #108]	; (800c518 <tcp_enqueue_flags+0x144>)
 800c4ac:	4818      	ldr	r0, [pc, #96]	; (800c510 <tcp_enqueue_flags+0x13c>)
 800c4ae:	f002 fe21 	bl	800f0f4 <iprintf>
 800c4b2:	e7a9      	b.n	800c408 <tcp_enqueue_flags+0x34>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 800c4b4:	8b63      	ldrh	r3, [r4, #26]
 800c4b6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c4ba:	8363      	strh	r3, [r4, #26]
    return ERR_MEM;
 800c4bc:	f04f 30ff 	mov.w	r0, #4294967295
 800c4c0:	e01f      	b.n	800c502 <tcp_enqueue_flags+0x12e>
  LWIP_ASSERT("seg->tcphdr not aligned", ((mem_ptr_t)seg->tcphdr % LWIP_MIN(MEM_ALIGNMENT, 4)) == 0);
 800c4c2:	4b11      	ldr	r3, [pc, #68]	; (800c508 <tcp_enqueue_flags+0x134>)
 800c4c4:	f240 4242 	movw	r2, #1090	; 0x442
 800c4c8:	4914      	ldr	r1, [pc, #80]	; (800c51c <tcp_enqueue_flags+0x148>)
 800c4ca:	4811      	ldr	r0, [pc, #68]	; (800c510 <tcp_enqueue_flags+0x13c>)
 800c4cc:	f002 fe12 	bl	800f0f4 <iprintf>
 800c4d0:	e7a8      	b.n	800c424 <tcp_enqueue_flags+0x50>
  LWIP_ASSERT("tcp_enqueue_flags: invalid segment length", seg->len == 0);
 800c4d2:	4b0d      	ldr	r3, [pc, #52]	; (800c508 <tcp_enqueue_flags+0x134>)
 800c4d4:	f240 4243 	movw	r2, #1091	; 0x443
 800c4d8:	4911      	ldr	r1, [pc, #68]	; (800c520 <tcp_enqueue_flags+0x14c>)
 800c4da:	480d      	ldr	r0, [pc, #52]	; (800c510 <tcp_enqueue_flags+0x13c>)
 800c4dc:	f002 fe0a 	bl	800f0f4 <iprintf>
 800c4e0:	e7a3      	b.n	800c42a <tcp_enqueue_flags+0x56>
    pcb->unsent = seg;
 800c4e2:	66e6      	str	r6, [r4, #108]	; 0x6c
 800c4e4:	e7a9      	b.n	800c43a <tcp_enqueue_flags+0x66>
    LWIP_ASSERT("tcp_enqueue_flags: invalid queue length",
 800c4e6:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 800c4e8:	b10b      	cbz	r3, 800c4ee <tcp_enqueue_flags+0x11a>
  return ERR_OK;
 800c4ea:	2000      	movs	r0, #0
 800c4ec:	e009      	b.n	800c502 <tcp_enqueue_flags+0x12e>
    LWIP_ASSERT("tcp_enqueue_flags: invalid queue length",
 800c4ee:	4b06      	ldr	r3, [pc, #24]	; (800c508 <tcp_enqueue_flags+0x134>)
 800c4f0:	f240 4265 	movw	r2, #1125	; 0x465
 800c4f4:	490b      	ldr	r1, [pc, #44]	; (800c524 <tcp_enqueue_flags+0x150>)
 800c4f6:	4806      	ldr	r0, [pc, #24]	; (800c510 <tcp_enqueue_flags+0x13c>)
 800c4f8:	f002 fdfc 	bl	800f0f4 <iprintf>
  return ERR_OK;
 800c4fc:	2000      	movs	r0, #0
 800c4fe:	e000      	b.n	800c502 <tcp_enqueue_flags+0x12e>
 800c500:	2000      	movs	r0, #0
}
 800c502:	b003      	add	sp, #12
 800c504:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800c508:	08011de4 	.word	0x08011de4
 800c50c:	08012280 	.word	0x08012280
 800c510:	080103a4 	.word	0x080103a4
 800c514:	080122d8 	.word	0x080122d8
 800c518:	080122f8 	.word	0x080122f8
 800c51c:	08012334 	.word	0x08012334
 800c520:	0801234c 	.word	0x0801234c
 800c524:	08012378 	.word	0x08012378

0800c528 <tcp_send_fin>:
{
 800c528:	b570      	push	{r4, r5, r6, lr}
  LWIP_ASSERT("tcp_send_fin: invalid pcb", pcb != NULL);
 800c52a:	4605      	mov	r5, r0
 800c52c:	b188      	cbz	r0, 800c552 <tcp_send_fin+0x2a>
  if (pcb->unsent != NULL) {
 800c52e:	6eeb      	ldr	r3, [r5, #108]	; 0x6c
 800c530:	b153      	cbz	r3, 800c548 <tcp_send_fin+0x20>
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 800c532:	461c      	mov	r4, r3
 800c534:	681b      	ldr	r3, [r3, #0]
 800c536:	2b00      	cmp	r3, #0
 800c538:	d1fb      	bne.n	800c532 <tcp_send_fin+0xa>
    if ((TCPH_FLAGS(last_unsent->tcphdr) & (TCP_SYN | TCP_FIN | TCP_RST)) == 0) {
 800c53a:	68e3      	ldr	r3, [r4, #12]
 800c53c:	8998      	ldrh	r0, [r3, #12]
 800c53e:	f7fb faa3 	bl	8007a88 <lwip_htons>
 800c542:	f010 0f07 	tst.w	r0, #7
 800c546:	d00c      	beq.n	800c562 <tcp_send_fin+0x3a>
  return tcp_enqueue_flags(pcb, TCP_FIN);
 800c548:	2101      	movs	r1, #1
 800c54a:	4628      	mov	r0, r5
 800c54c:	f7ff ff42 	bl	800c3d4 <tcp_enqueue_flags>
}
 800c550:	bd70      	pop	{r4, r5, r6, pc}
  LWIP_ASSERT("tcp_send_fin: invalid pcb", pcb != NULL);
 800c552:	4b0b      	ldr	r3, [pc, #44]	; (800c580 <tcp_send_fin+0x58>)
 800c554:	f240 32eb 	movw	r2, #1003	; 0x3eb
 800c558:	490a      	ldr	r1, [pc, #40]	; (800c584 <tcp_send_fin+0x5c>)
 800c55a:	480b      	ldr	r0, [pc, #44]	; (800c588 <tcp_send_fin+0x60>)
 800c55c:	f002 fdca 	bl	800f0f4 <iprintf>
 800c560:	e7e5      	b.n	800c52e <tcp_send_fin+0x6>
      TCPH_SET_FLAG(last_unsent->tcphdr, TCP_FIN);
 800c562:	68e3      	ldr	r3, [r4, #12]
 800c564:	899e      	ldrh	r6, [r3, #12]
 800c566:	2001      	movs	r0, #1
 800c568:	f7fb fa8e 	bl	8007a88 <lwip_htons>
 800c56c:	68e3      	ldr	r3, [r4, #12]
 800c56e:	4306      	orrs	r6, r0
 800c570:	819e      	strh	r6, [r3, #12]
      tcp_set_flags(pcb, TF_FIN);
 800c572:	8b6b      	ldrh	r3, [r5, #26]
 800c574:	f043 0320 	orr.w	r3, r3, #32
 800c578:	836b      	strh	r3, [r5, #26]
      return ERR_OK;
 800c57a:	2000      	movs	r0, #0
 800c57c:	e7e8      	b.n	800c550 <tcp_send_fin+0x28>
 800c57e:	bf00      	nop
 800c580:	08011de4 	.word	0x08011de4
 800c584:	080123a0 	.word	0x080123a0
 800c588:	080103a4 	.word	0x080103a4

0800c58c <tcp_rexmit_rto_prepare>:
{
 800c58c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  LWIP_ASSERT("tcp_rexmit_rto_prepare: invalid pcb", pcb != NULL);
 800c590:	4605      	mov	r5, r0
 800c592:	2800      	cmp	r0, #0
 800c594:	d031      	beq.n	800c5fa <tcp_rexmit_rto_prepare+0x6e>
  if (pcb->unacked == NULL) {
 800c596:	6f2c      	ldr	r4, [r5, #112]	; 0x70
 800c598:	2c00      	cmp	r4, #0
 800c59a:	d036      	beq.n	800c60a <tcp_rexmit_rto_prepare+0x7e>
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 800c59c:	6823      	ldr	r3, [r4, #0]
 800c59e:	b143      	cbz	r3, 800c5b2 <tcp_rexmit_rto_prepare+0x26>
    if (tcp_output_segment_busy(seg)) {
 800c5a0:	4620      	mov	r0, r4
 800c5a2:	f7ff f949 	bl	800b838 <tcp_output_segment_busy>
 800c5a6:	2800      	cmp	r0, #0
 800c5a8:	d132      	bne.n	800c610 <tcp_rexmit_rto_prepare+0x84>
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 800c5aa:	6824      	ldr	r4, [r4, #0]
 800c5ac:	6823      	ldr	r3, [r4, #0]
 800c5ae:	2b00      	cmp	r3, #0
 800c5b0:	d1f6      	bne.n	800c5a0 <tcp_rexmit_rto_prepare+0x14>
  if (tcp_output_segment_busy(seg)) {
 800c5b2:	4620      	mov	r0, r4
 800c5b4:	f7ff f940 	bl	800b838 <tcp_output_segment_busy>
 800c5b8:	bb68      	cbnz	r0, 800c616 <tcp_rexmit_rto_prepare+0x8a>
  seg->next = pcb->unsent;
 800c5ba:	6eeb      	ldr	r3, [r5, #108]	; 0x6c
 800c5bc:	6023      	str	r3, [r4, #0]
  pcb->unsent = pcb->unacked;
 800c5be:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 800c5c0:	66eb      	str	r3, [r5, #108]	; 0x6c
  pcb->unacked = NULL;
 800c5c2:	2600      	movs	r6, #0
 800c5c4:	672e      	str	r6, [r5, #112]	; 0x70
  tcp_set_flags(pcb, TF_RTO);
 800c5c6:	8b6b      	ldrh	r3, [r5, #26]
 800c5c8:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800c5cc:	836b      	strh	r3, [r5, #26]
  pcb->rto_end = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 800c5ce:	68e3      	ldr	r3, [r4, #12]
 800c5d0:	6858      	ldr	r0, [r3, #4]
 800c5d2:	f7fb fa5e 	bl	8007a92 <lwip_htonl>
 800c5d6:	4607      	mov	r7, r0
 800c5d8:	f8b4 8008 	ldrh.w	r8, [r4, #8]
 800c5dc:	68e3      	ldr	r3, [r4, #12]
 800c5de:	8998      	ldrh	r0, [r3, #12]
 800c5e0:	f7fb fa52 	bl	8007a88 <lwip_htons>
 800c5e4:	f010 0303 	ands.w	r3, r0, #3
 800c5e8:	bf18      	it	ne
 800c5ea:	2301      	movne	r3, #1
 800c5ec:	4447      	add	r7, r8
 800c5ee:	443b      	add	r3, r7
 800c5f0:	64eb      	str	r3, [r5, #76]	; 0x4c
  pcb->rttest = 0;
 800c5f2:	636e      	str	r6, [r5, #52]	; 0x34
  return ERR_OK;
 800c5f4:	4630      	mov	r0, r6
}
 800c5f6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  LWIP_ASSERT("tcp_rexmit_rto_prepare: invalid pcb", pcb != NULL);
 800c5fa:	4b08      	ldr	r3, [pc, #32]	; (800c61c <tcp_rexmit_rto_prepare+0x90>)
 800c5fc:	f240 6263 	movw	r2, #1635	; 0x663
 800c600:	4907      	ldr	r1, [pc, #28]	; (800c620 <tcp_rexmit_rto_prepare+0x94>)
 800c602:	4808      	ldr	r0, [pc, #32]	; (800c624 <tcp_rexmit_rto_prepare+0x98>)
 800c604:	f002 fd76 	bl	800f0f4 <iprintf>
 800c608:	e7c5      	b.n	800c596 <tcp_rexmit_rto_prepare+0xa>
    return ERR_VAL;
 800c60a:	f06f 0005 	mvn.w	r0, #5
 800c60e:	e7f2      	b.n	800c5f6 <tcp_rexmit_rto_prepare+0x6a>
      return ERR_VAL;
 800c610:	f06f 0005 	mvn.w	r0, #5
 800c614:	e7ef      	b.n	800c5f6 <tcp_rexmit_rto_prepare+0x6a>
    return ERR_VAL;
 800c616:	f06f 0005 	mvn.w	r0, #5
 800c61a:	e7ec      	b.n	800c5f6 <tcp_rexmit_rto_prepare+0x6a>
 800c61c:	08011de4 	.word	0x08011de4
 800c620:	080123bc 	.word	0x080123bc
 800c624:	080103a4 	.word	0x080103a4

0800c628 <tcp_rexmit>:
{
 800c628:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  LWIP_ASSERT("tcp_rexmit: invalid pcb", pcb != NULL);
 800c62a:	4607      	mov	r7, r0
 800c62c:	2800      	cmp	r0, #0
 800c62e:	d02c      	beq.n	800c68a <tcp_rexmit+0x62>
  if (pcb->unacked == NULL) {
 800c630:	6f3e      	ldr	r6, [r7, #112]	; 0x70
 800c632:	2e00      	cmp	r6, #0
 800c634:	d034      	beq.n	800c6a0 <tcp_rexmit+0x78>
  if (tcp_output_segment_busy(seg)) {
 800c636:	4630      	mov	r0, r6
 800c638:	f7ff f8fe 	bl	800b838 <tcp_output_segment_busy>
 800c63c:	2800      	cmp	r0, #0
 800c63e:	d132      	bne.n	800c6a6 <tcp_rexmit+0x7e>
  pcb->unacked = seg->next;
 800c640:	6833      	ldr	r3, [r6, #0]
 800c642:	673b      	str	r3, [r7, #112]	; 0x70
  cur_seg = &(pcb->unsent);
 800c644:	f107 056c 	add.w	r5, r7, #108	; 0x6c
  while (*cur_seg &&
 800c648:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800c64a:	b17b      	cbz	r3, 800c66c <tcp_rexmit+0x44>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 800c64c:	68db      	ldr	r3, [r3, #12]
 800c64e:	6858      	ldr	r0, [r3, #4]
 800c650:	f7fb fa1f 	bl	8007a92 <lwip_htonl>
 800c654:	4604      	mov	r4, r0
 800c656:	68f3      	ldr	r3, [r6, #12]
 800c658:	6858      	ldr	r0, [r3, #4]
 800c65a:	f7fb fa1a 	bl	8007a92 <lwip_htonl>
 800c65e:	1a24      	subs	r4, r4, r0
  while (*cur_seg &&
 800c660:	2c00      	cmp	r4, #0
 800c662:	da03      	bge.n	800c66c <tcp_rexmit+0x44>
    cur_seg = &((*cur_seg)->next );
 800c664:	682d      	ldr	r5, [r5, #0]
  while (*cur_seg &&
 800c666:	682b      	ldr	r3, [r5, #0]
 800c668:	2b00      	cmp	r3, #0
 800c66a:	d1ef      	bne.n	800c64c <tcp_rexmit+0x24>
  seg->next = *cur_seg;
 800c66c:	682b      	ldr	r3, [r5, #0]
 800c66e:	6033      	str	r3, [r6, #0]
  *cur_seg = seg;
 800c670:	602e      	str	r6, [r5, #0]
  if (seg->next == NULL) {
 800c672:	6833      	ldr	r3, [r6, #0]
 800c674:	b18b      	cbz	r3, 800c69a <tcp_rexmit+0x72>
  if (pcb->nrtx < 0xFF) {
 800c676:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
 800c67a:	2bff      	cmp	r3, #255	; 0xff
    ++pcb->nrtx;
 800c67c:	bf1c      	itt	ne
 800c67e:	3301      	addne	r3, #1
 800c680:	f887 3042 	strbne.w	r3, [r7, #66]	; 0x42
  pcb->rttest = 0;
 800c684:	2000      	movs	r0, #0
 800c686:	6378      	str	r0, [r7, #52]	; 0x34
}
 800c688:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  LWIP_ASSERT("tcp_rexmit: invalid pcb", pcb != NULL);
 800c68a:	4b08      	ldr	r3, [pc, #32]	; (800c6ac <tcp_rexmit+0x84>)
 800c68c:	f240 62c1 	movw	r2, #1729	; 0x6c1
 800c690:	4907      	ldr	r1, [pc, #28]	; (800c6b0 <tcp_rexmit+0x88>)
 800c692:	4808      	ldr	r0, [pc, #32]	; (800c6b4 <tcp_rexmit+0x8c>)
 800c694:	f002 fd2e 	bl	800f0f4 <iprintf>
 800c698:	e7ca      	b.n	800c630 <tcp_rexmit+0x8>
    pcb->unsent_oversize = 0;
 800c69a:	f8a7 3068 	strh.w	r3, [r7, #104]	; 0x68
 800c69e:	e7ea      	b.n	800c676 <tcp_rexmit+0x4e>
    return ERR_VAL;
 800c6a0:	f06f 0005 	mvn.w	r0, #5
 800c6a4:	e7f0      	b.n	800c688 <tcp_rexmit+0x60>
    return ERR_VAL;
 800c6a6:	f06f 0005 	mvn.w	r0, #5
 800c6aa:	e7ed      	b.n	800c688 <tcp_rexmit+0x60>
 800c6ac:	08011de4 	.word	0x08011de4
 800c6b0:	080123e0 	.word	0x080123e0
 800c6b4:	080103a4 	.word	0x080103a4

0800c6b8 <tcp_rexmit_fast>:
{
 800c6b8:	b510      	push	{r4, lr}
  LWIP_ASSERT("tcp_rexmit_fast: invalid pcb", pcb != NULL);
 800c6ba:	4604      	mov	r4, r0
 800c6bc:	b130      	cbz	r0, 800c6cc <tcp_rexmit_fast+0x14>
  if (pcb->unacked != NULL && !(pcb->flags & TF_INFR)) {
 800c6be:	6f23      	ldr	r3, [r4, #112]	; 0x70
 800c6c0:	b11b      	cbz	r3, 800c6ca <tcp_rexmit_fast+0x12>
 800c6c2:	8b63      	ldrh	r3, [r4, #26]
 800c6c4:	f013 0f04 	tst.w	r3, #4
 800c6c8:	d008      	beq.n	800c6dc <tcp_rexmit_fast+0x24>
}
 800c6ca:	bd10      	pop	{r4, pc}
  LWIP_ASSERT("tcp_rexmit_fast: invalid pcb", pcb != NULL);
 800c6cc:	4b15      	ldr	r3, [pc, #84]	; (800c724 <tcp_rexmit_fast+0x6c>)
 800c6ce:	f240 62f9 	movw	r2, #1785	; 0x6f9
 800c6d2:	4915      	ldr	r1, [pc, #84]	; (800c728 <tcp_rexmit_fast+0x70>)
 800c6d4:	4815      	ldr	r0, [pc, #84]	; (800c72c <tcp_rexmit_fast+0x74>)
 800c6d6:	f002 fd0d 	bl	800f0f4 <iprintf>
 800c6da:	e7f0      	b.n	800c6be <tcp_rexmit_fast+0x6>
    if (tcp_rexmit(pcb) == ERR_OK) {
 800c6dc:	4620      	mov	r0, r4
 800c6de:	f7ff ffa3 	bl	800c628 <tcp_rexmit>
 800c6e2:	2800      	cmp	r0, #0
 800c6e4:	d1f1      	bne.n	800c6ca <tcp_rexmit_fast+0x12>
      pcb->ssthresh = LWIP_MIN(pcb->cwnd, pcb->snd_wnd) / 2;
 800c6e6:	f8b4 2060 	ldrh.w	r2, [r4, #96]	; 0x60
 800c6ea:	f8b4 3048 	ldrh.w	r3, [r4, #72]	; 0x48
 800c6ee:	429a      	cmp	r2, r3
 800c6f0:	bf28      	it	cs
 800c6f2:	461a      	movcs	r2, r3
 800c6f4:	1052      	asrs	r2, r2, #1
 800c6f6:	f8a4 204a 	strh.w	r2, [r4, #74]	; 0x4a
      if (pcb->ssthresh < (2U * pcb->mss)) {
 800c6fa:	8e63      	ldrh	r3, [r4, #50]	; 0x32
 800c6fc:	ebb2 0f43 	cmp.w	r2, r3, lsl #1
        pcb->ssthresh = 2 * pcb->mss;
 800c700:	bf3c      	itt	cc
 800c702:	005a      	lslcc	r2, r3, #1
 800c704:	f8a4 204a 	strhcc.w	r2, [r4, #74]	; 0x4a
      pcb->cwnd = pcb->ssthresh + 3 * pcb->mss;
 800c708:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 800c70c:	f8b4 204a 	ldrh.w	r2, [r4, #74]	; 0x4a
 800c710:	4413      	add	r3, r2
 800c712:	f8a4 3048 	strh.w	r3, [r4, #72]	; 0x48
      tcp_set_flags(pcb, TF_INFR);
 800c716:	8b63      	ldrh	r3, [r4, #26]
 800c718:	f043 0304 	orr.w	r3, r3, #4
 800c71c:	8363      	strh	r3, [r4, #26]
      pcb->rtime = 0;
 800c71e:	2300      	movs	r3, #0
 800c720:	8623      	strh	r3, [r4, #48]	; 0x30
}
 800c722:	e7d2      	b.n	800c6ca <tcp_rexmit_fast+0x12>
 800c724:	08011de4 	.word	0x08011de4
 800c728:	080123f8 	.word	0x080123f8
 800c72c:	080103a4 	.word	0x080103a4

0800c730 <tcp_rst>:
 */
void
tcp_rst(const struct tcp_pcb *pcb, u32_t seqno, u32_t ackno,
        const ip_addr_t *local_ip, const ip_addr_t *remote_ip,
        u16_t local_port, u16_t remote_port)
{
 800c730:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c734:	b084      	sub	sp, #16
 800c736:	4604      	mov	r4, r0
 800c738:	460e      	mov	r6, r1
 800c73a:	4615      	mov	r5, r2
 800c73c:	9f0a      	ldr	r7, [sp, #40]	; 0x28
  struct pbuf *p;
  u16_t wnd;
  u8_t optlen;

  LWIP_ASSERT("tcp_rst: invalid local_ip", local_ip != NULL);
 800c73e:	4698      	mov	r8, r3
 800c740:	b32b      	cbz	r3, 800c78e <tcp_rst+0x5e>
  LWIP_ASSERT("tcp_rst: invalid remote_ip", remote_ip != NULL);
 800c742:	b367      	cbz	r7, 800c79e <tcp_rst+0x6e>
  wnd = PP_HTONS(((TCP_WND >> TCP_RCV_SCALE) & 0xFFFF));
#else
  wnd = PP_HTONS(TCP_WND);
#endif

  p = tcp_output_alloc_header_common(ackno, optlen, 0, lwip_htonl(seqno), local_port,
 800c744:	4630      	mov	r0, r6
 800c746:	f7fb f9a4 	bl	8007a92 <lwip_htonl>
 800c74a:	4603      	mov	r3, r0
 800c74c:	f246 0208 	movw	r2, #24584	; 0x6008
 800c750:	9203      	str	r2, [sp, #12]
 800c752:	2214      	movs	r2, #20
 800c754:	9202      	str	r2, [sp, #8]
 800c756:	f8bd 2030 	ldrh.w	r2, [sp, #48]	; 0x30
 800c75a:	9201      	str	r2, [sp, #4]
 800c75c:	f8bd 202c 	ldrh.w	r2, [sp, #44]	; 0x2c
 800c760:	9200      	str	r2, [sp, #0]
 800c762:	2200      	movs	r2, #0
 800c764:	4611      	mov	r1, r2
 800c766:	4628      	mov	r0, r5
 800c768:	f7ff f974 	bl	800ba54 <tcp_output_alloc_header_common>
    remote_port, TCP_RST | TCP_ACK, wnd);
  if (p == NULL) {
 800c76c:	4605      	mov	r5, r0
 800c76e:	b158      	cbz	r0, 800c788 <tcp_rst+0x58>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_rst: could not allocate memory for pbuf\n"));
    return;
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 800c770:	2300      	movs	r3, #0
 800c772:	461a      	mov	r2, r3
 800c774:	4601      	mov	r1, r0
 800c776:	4620      	mov	r0, r4
 800c778:	f7ff f876 	bl	800b868 <tcp_output_fill_options>

  MIB2_STATS_INC(mib2.tcpoutrsts);

  tcp_output_control_segment(pcb, p, local_ip, remote_ip);
 800c77c:	463b      	mov	r3, r7
 800c77e:	4642      	mov	r2, r8
 800c780:	4629      	mov	r1, r5
 800c782:	4620      	mov	r0, r4
 800c784:	f7ff f9da 	bl	800bb3c <tcp_output_control_segment>
  LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_rst: seqno %"U32_F" ackno %"U32_F".\n", seqno, ackno));
}
 800c788:	b004      	add	sp, #16
 800c78a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  LWIP_ASSERT("tcp_rst: invalid local_ip", local_ip != NULL);
 800c78e:	4b08      	ldr	r3, [pc, #32]	; (800c7b0 <tcp_rst+0x80>)
 800c790:	f240 72c4 	movw	r2, #1988	; 0x7c4
 800c794:	4907      	ldr	r1, [pc, #28]	; (800c7b4 <tcp_rst+0x84>)
 800c796:	4808      	ldr	r0, [pc, #32]	; (800c7b8 <tcp_rst+0x88>)
 800c798:	f002 fcac 	bl	800f0f4 <iprintf>
 800c79c:	e7d1      	b.n	800c742 <tcp_rst+0x12>
  LWIP_ASSERT("tcp_rst: invalid remote_ip", remote_ip != NULL);
 800c79e:	4b04      	ldr	r3, [pc, #16]	; (800c7b0 <tcp_rst+0x80>)
 800c7a0:	f240 72c5 	movw	r2, #1989	; 0x7c5
 800c7a4:	4905      	ldr	r1, [pc, #20]	; (800c7bc <tcp_rst+0x8c>)
 800c7a6:	4804      	ldr	r0, [pc, #16]	; (800c7b8 <tcp_rst+0x88>)
 800c7a8:	f002 fca4 	bl	800f0f4 <iprintf>
 800c7ac:	e7ca      	b.n	800c744 <tcp_rst+0x14>
 800c7ae:	bf00      	nop
 800c7b0:	08011de4 	.word	0x08011de4
 800c7b4:	08012418 	.word	0x08012418
 800c7b8:	080103a4 	.word	0x080103a4
 800c7bc:	08012434 	.word	0x08012434

0800c7c0 <tcp_send_empty_ack>:
 *
 * @param pcb Protocol control block for the TCP connection to send the ACK
 */
err_t
tcp_send_empty_ack(struct tcp_pcb *pcb)
{
 800c7c0:	b538      	push	{r3, r4, r5, lr}
  err_t err;
  struct pbuf *p;
  u8_t optlen, optflags = 0;
  u8_t num_sacks = 0;

  LWIP_ASSERT("tcp_send_empty_ack: invalid pcb", pcb != NULL);
 800c7c2:	4604      	mov	r4, r0
 800c7c4:	b1e0      	cbz	r0, 800c800 <tcp_send_empty_ack+0x40>
  if ((num_sacks = tcp_get_num_sacks(pcb, optlen)) > 0) {
    optlen += 4 + num_sacks * 8; /* 4 bytes for header (including 2*NOP), plus 8B for each SACK */
  }
#endif

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt));
 800c7c6:	6d20      	ldr	r0, [r4, #80]	; 0x50
 800c7c8:	f7fb f963 	bl	8007a92 <lwip_htonl>
 800c7cc:	4603      	mov	r3, r0
 800c7ce:	2200      	movs	r2, #0
 800c7d0:	4611      	mov	r1, r2
 800c7d2:	4620      	mov	r0, r4
 800c7d4:	f7ff f988 	bl	800bae8 <tcp_output_alloc_header>
  if (p == NULL) {
 800c7d8:	4605      	mov	r5, r0
 800c7da:	b1c8      	cbz	r0, 800c810 <tcp_send_empty_ack+0x50>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output: (ACK) could not allocate pbuf\n"));
    return ERR_BUF;
  }
  tcp_output_fill_options(pcb, p, optflags, num_sacks);
 800c7dc:	2300      	movs	r3, #0
 800c7de:	461a      	mov	r2, r3
 800c7e0:	4601      	mov	r1, r0
 800c7e2:	4620      	mov	r0, r4
 800c7e4:	f7ff f840 	bl	800b868 <tcp_output_fill_options>
  pcb->ts_lastacksent = pcb->rcv_nxt;
#endif

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG,
              ("tcp_output: sending ACK for %"U32_F"\n", pcb->rcv_nxt));
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 800c7e8:	1d23      	adds	r3, r4, #4
 800c7ea:	4622      	mov	r2, r4
 800c7ec:	4629      	mov	r1, r5
 800c7ee:	4620      	mov	r0, r4
 800c7f0:	f7ff f9a4 	bl	800bb3c <tcp_output_control_segment>
  if (err != ERR_OK) {
 800c7f4:	b198      	cbz	r0, 800c81e <tcp_send_empty_ack+0x5e>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800c7f6:	8b63      	ldrh	r3, [r4, #26]
 800c7f8:	f043 0303 	orr.w	r3, r3, #3
 800c7fc:	8363      	strh	r3, [r4, #26]
    /* remove ACK flags from the PCB, as we sent an empty ACK now */
    tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
  }

  return err;
}
 800c7fe:	bd38      	pop	{r3, r4, r5, pc}
  LWIP_ASSERT("tcp_send_empty_ack: invalid pcb", pcb != NULL);
 800c800:	4b09      	ldr	r3, [pc, #36]	; (800c828 <tcp_send_empty_ack+0x68>)
 800c802:	f240 72ea 	movw	r2, #2026	; 0x7ea
 800c806:	4909      	ldr	r1, [pc, #36]	; (800c82c <tcp_send_empty_ack+0x6c>)
 800c808:	4809      	ldr	r0, [pc, #36]	; (800c830 <tcp_send_empty_ack+0x70>)
 800c80a:	f002 fc73 	bl	800f0f4 <iprintf>
 800c80e:	e7da      	b.n	800c7c6 <tcp_send_empty_ack+0x6>
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800c810:	8b63      	ldrh	r3, [r4, #26]
 800c812:	f043 0303 	orr.w	r3, r3, #3
 800c816:	8363      	strh	r3, [r4, #26]
    return ERR_BUF;
 800c818:	f06f 0001 	mvn.w	r0, #1
 800c81c:	e7ef      	b.n	800c7fe <tcp_send_empty_ack+0x3e>
    tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800c81e:	8b63      	ldrh	r3, [r4, #26]
 800c820:	f023 0303 	bic.w	r3, r3, #3
 800c824:	8363      	strh	r3, [r4, #26]
 800c826:	e7ea      	b.n	800c7fe <tcp_send_empty_ack+0x3e>
 800c828:	08011de4 	.word	0x08011de4
 800c82c:	08012450 	.word	0x08012450
 800c830:	080103a4 	.word	0x080103a4

0800c834 <tcp_output>:
{
 800c834:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c838:	b085      	sub	sp, #20
  LWIP_ASSERT("tcp_output: invalid pcb", pcb != NULL);
 800c83a:	4605      	mov	r5, r0
 800c83c:	2800      	cmp	r0, #0
 800c83e:	d03a      	beq.n	800c8b6 <tcp_output+0x82>
  LWIP_ASSERT("don't call tcp_output for listen-pcbs",
 800c840:	7d2b      	ldrb	r3, [r5, #20]
 800c842:	2b01      	cmp	r3, #1
 800c844:	d03f      	beq.n	800c8c6 <tcp_output+0x92>
  if (tcp_input_pcb == pcb) {
 800c846:	4b9b      	ldr	r3, [pc, #620]	; (800cab4 <tcp_output+0x280>)
 800c848:	681b      	ldr	r3, [r3, #0]
 800c84a:	42ab      	cmp	r3, r5
 800c84c:	f000 81b8 	beq.w	800cbc0 <tcp_output+0x38c>
  seg = pcb->unsent;
 800c850:	6eec      	ldr	r4, [r5, #108]	; 0x6c
  if (seg == NULL) {
 800c852:	2c00      	cmp	r4, #0
 800c854:	d03f      	beq.n	800c8d6 <tcp_output+0xa2>
  wnd = LWIP_MIN(pcb->snd_wnd, pcb->cwnd);
 800c856:	f8b5 7048 	ldrh.w	r7, [r5, #72]	; 0x48
 800c85a:	f8b5 6060 	ldrh.w	r6, [r5, #96]	; 0x60
  netif = tcp_route(pcb, &pcb->local_ip, &pcb->remote_ip);
 800c85e:	f105 0a04 	add.w	sl, r5, #4
  if ((pcb != NULL) && (pcb->netif_idx != NETIF_NO_INDEX)) {
 800c862:	7a28      	ldrb	r0, [r5, #8]
 800c864:	2800      	cmp	r0, #0
 800c866:	d148      	bne.n	800c8fa <tcp_output+0xc6>
    return ip_route(src, dst);
 800c868:	4650      	mov	r0, sl
 800c86a:	f001 fabb 	bl	800dde4 <ip4_route>
 800c86e:	4681      	mov	r9, r0
  if (netif == NULL) {
 800c870:	f1b9 0f00 	cmp.w	r9, #0
 800c874:	f000 81a6 	beq.w	800cbc4 <tcp_output+0x390>
  if (ip_addr_isany(&pcb->local_ip)) {
 800c878:	682b      	ldr	r3, [r5, #0]
 800c87a:	b913      	cbnz	r3, 800c882 <tcp_output+0x4e>
    ip_addr_copy(pcb->local_ip, *local_ip);
 800c87c:	f8d9 3004 	ldr.w	r3, [r9, #4]
 800c880:	602b      	str	r3, [r5, #0]
  wnd = LWIP_MIN(pcb->snd_wnd, pcb->cwnd);
 800c882:	42b7      	cmp	r7, r6
 800c884:	bf28      	it	cs
 800c886:	4637      	movcs	r7, r6
  if (lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd) {
 800c888:	68e3      	ldr	r3, [r4, #12]
 800c88a:	6858      	ldr	r0, [r3, #4]
 800c88c:	f7fb f901 	bl	8007a92 <lwip_htonl>
 800c890:	8923      	ldrh	r3, [r4, #8]
 800c892:	6c6a      	ldr	r2, [r5, #68]	; 0x44
 800c894:	1a9b      	subs	r3, r3, r2
 800c896:	4403      	add	r3, r0
 800c898:	42bb      	cmp	r3, r7
 800c89a:	d941      	bls.n	800c920 <tcp_output+0xec>
    if (wnd == pcb->snd_wnd && pcb->unacked == NULL && pcb->persist_backoff == 0) {
 800c89c:	f8b5 3060 	ldrh.w	r3, [r5, #96]	; 0x60
 800c8a0:	42bb      	cmp	r3, r7
 800c8a2:	d02e      	beq.n	800c902 <tcp_output+0xce>
    if (pcb->flags & TF_ACK_NOW) {
 800c8a4:	8b6b      	ldrh	r3, [r5, #26]
 800c8a6:	f013 0f02 	tst.w	r3, #2
 800c8aa:	d018      	beq.n	800c8de <tcp_output+0xaa>
      return tcp_send_empty_ack(pcb);
 800c8ac:	4628      	mov	r0, r5
 800c8ae:	f7ff ff87 	bl	800c7c0 <tcp_send_empty_ack>
 800c8b2:	4603      	mov	r3, r0
 800c8b4:	e018      	b.n	800c8e8 <tcp_output+0xb4>
  LWIP_ASSERT("tcp_output: invalid pcb", pcb != NULL);
 800c8b6:	4b80      	ldr	r3, [pc, #512]	; (800cab8 <tcp_output+0x284>)
 800c8b8:	f240 42e1 	movw	r2, #1249	; 0x4e1
 800c8bc:	497f      	ldr	r1, [pc, #508]	; (800cabc <tcp_output+0x288>)
 800c8be:	4880      	ldr	r0, [pc, #512]	; (800cac0 <tcp_output+0x28c>)
 800c8c0:	f002 fc18 	bl	800f0f4 <iprintf>
 800c8c4:	e7bc      	b.n	800c840 <tcp_output+0xc>
  LWIP_ASSERT("don't call tcp_output for listen-pcbs",
 800c8c6:	4b7c      	ldr	r3, [pc, #496]	; (800cab8 <tcp_output+0x284>)
 800c8c8:	f240 42e3 	movw	r2, #1251	; 0x4e3
 800c8cc:	497d      	ldr	r1, [pc, #500]	; (800cac4 <tcp_output+0x290>)
 800c8ce:	487c      	ldr	r0, [pc, #496]	; (800cac0 <tcp_output+0x28c>)
 800c8d0:	f002 fc10 	bl	800f0f4 <iprintf>
 800c8d4:	e7b7      	b.n	800c846 <tcp_output+0x12>
    if (pcb->flags & TF_ACK_NOW) {
 800c8d6:	8b6b      	ldrh	r3, [r5, #26]
 800c8d8:	f013 0f02 	tst.w	r3, #2
 800c8dc:	d108      	bne.n	800c8f0 <tcp_output+0xbc>
  tcp_clear_flags(pcb, TF_NAGLEMEMERR);
 800c8de:	8b6b      	ldrh	r3, [r5, #26]
 800c8e0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800c8e4:	836b      	strh	r3, [r5, #26]
  return ERR_OK;
 800c8e6:	2300      	movs	r3, #0
}
 800c8e8:	4618      	mov	r0, r3
 800c8ea:	b005      	add	sp, #20
 800c8ec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      return tcp_send_empty_ack(pcb);
 800c8f0:	4628      	mov	r0, r5
 800c8f2:	f7ff ff65 	bl	800c7c0 <tcp_send_empty_ack>
 800c8f6:	4603      	mov	r3, r0
 800c8f8:	e7f6      	b.n	800c8e8 <tcp_output+0xb4>
    return netif_get_by_index(pcb->netif_idx);
 800c8fa:	f7fb fe11 	bl	8008520 <netif_get_by_index>
 800c8fe:	4681      	mov	r9, r0
 800c900:	e7b6      	b.n	800c870 <tcp_output+0x3c>
    if (wnd == pcb->snd_wnd && pcb->unacked == NULL && pcb->persist_backoff == 0) {
 800c902:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 800c904:	2b00      	cmp	r3, #0
 800c906:	d1cd      	bne.n	800c8a4 <tcp_output+0x70>
 800c908:	f895 3099 	ldrb.w	r3, [r5, #153]	; 0x99
 800c90c:	2b00      	cmp	r3, #0
 800c90e:	d1c9      	bne.n	800c8a4 <tcp_output+0x70>
      pcb->persist_cnt = 0;
 800c910:	f885 3098 	strb.w	r3, [r5, #152]	; 0x98
      pcb->persist_backoff = 1;
 800c914:	2201      	movs	r2, #1
 800c916:	f885 2099 	strb.w	r2, [r5, #153]	; 0x99
      pcb->persist_probe = 0;
 800c91a:	f885 309a 	strb.w	r3, [r5, #154]	; 0x9a
 800c91e:	e7c1      	b.n	800c8a4 <tcp_output+0x70>
  pcb->persist_backoff = 0;
 800c920:	2300      	movs	r3, #0
 800c922:	f885 3099 	strb.w	r3, [r5, #153]	; 0x99
  useg = pcb->unacked;
 800c926:	6f2b      	ldr	r3, [r5, #112]	; 0x70
  if (useg != NULL) {
 800c928:	2b00      	cmp	r3, #0
 800c92a:	f000 8147 	beq.w	800cbbc <tcp_output+0x388>
    for (; useg->next != NULL; useg = useg->next);
 800c92e:	4698      	mov	r8, r3
 800c930:	681b      	ldr	r3, [r3, #0]
 800c932:	2b00      	cmp	r3, #0
 800c934:	d1fb      	bne.n	800c92e <tcp_output+0xfa>
 800c936:	e0d4      	b.n	800cae2 <tcp_output+0x2ae>
    LWIP_ASSERT("RST not expected here!",
 800c938:	4b5f      	ldr	r3, [pc, #380]	; (800cab8 <tcp_output+0x284>)
 800c93a:	f240 5236 	movw	r2, #1334	; 0x536
 800c93e:	4962      	ldr	r1, [pc, #392]	; (800cac8 <tcp_output+0x294>)
 800c940:	485f      	ldr	r0, [pc, #380]	; (800cac0 <tcp_output+0x28c>)
 800c942:	f002 fbd7 	bl	800f0f4 <iprintf>
 800c946:	e0df      	b.n	800cb08 <tcp_output+0x2d4>
    if ((tcp_do_output_nagle(pcb) == 0) &&
 800c948:	8911      	ldrh	r1, [r2, #8]
 800c94a:	8e6a      	ldrh	r2, [r5, #50]	; 0x32
 800c94c:	4291      	cmp	r1, r2
 800c94e:	f080 80e9 	bcs.w	800cb24 <tcp_output+0x2f0>
 800c952:	f8b5 2064 	ldrh.w	r2, [r5, #100]	; 0x64
 800c956:	2a00      	cmp	r2, #0
 800c958:	f000 80e4 	beq.w	800cb24 <tcp_output+0x2f0>
 800c95c:	f8b5 2066 	ldrh.w	r2, [r5, #102]	; 0x66
 800c960:	2a08      	cmp	r2, #8
 800c962:	f200 80df 	bhi.w	800cb24 <tcp_output+0x2f0>
 800c966:	f013 0fa0 	tst.w	r3, #160	; 0xa0
 800c96a:	f040 80db 	bne.w	800cb24 <tcp_output+0x2f0>
  if (pcb->unsent == NULL) {
 800c96e:	6eeb      	ldr	r3, [r5, #108]	; 0x6c
 800c970:	2b00      	cmp	r3, #0
 800c972:	d1b4      	bne.n	800c8de <tcp_output+0xaa>
    pcb->unsent_oversize = 0;
 800c974:	2300      	movs	r3, #0
 800c976:	f8a5 3068 	strh.w	r3, [r5, #104]	; 0x68
 800c97a:	e7b0      	b.n	800c8de <tcp_output+0xaa>
      TCPH_SET_FLAG(seg->tcphdr, TCP_ACK);
 800c97c:	68e3      	ldr	r3, [r4, #12]
 800c97e:	899e      	ldrh	r6, [r3, #12]
 800c980:	2010      	movs	r0, #16
 800c982:	f7fb f881 	bl	8007a88 <lwip_htons>
 800c986:	68e3      	ldr	r3, [r4, #12]
 800c988:	4330      	orrs	r0, r6
 800c98a:	8198      	strh	r0, [r3, #12]
 800c98c:	e0ce      	b.n	800cb2c <tcp_output+0x2f8>
  seg->tcphdr->ackno = lwip_htonl(pcb->rcv_nxt);
 800c98e:	68e6      	ldr	r6, [r4, #12]
 800c990:	6a68      	ldr	r0, [r5, #36]	; 0x24
 800c992:	f7fb f87e 	bl	8007a92 <lwip_htonl>
 800c996:	60b0      	str	r0, [r6, #8]
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
 800c998:	68e6      	ldr	r6, [r4, #12]
 800c99a:	8d68      	ldrh	r0, [r5, #42]	; 0x2a
 800c99c:	f7fb f874 	bl	8007a88 <lwip_htons>
 800c9a0:	81f0      	strh	r0, [r6, #14]
  pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 800c9a2:	8d6a      	ldrh	r2, [r5, #42]	; 0x2a
 800c9a4:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800c9a6:	4413      	add	r3, r2
 800c9a8:	62eb      	str	r3, [r5, #44]	; 0x2c
  opts = (u32_t *)(void *)(seg->tcphdr + 1);
 800c9aa:	68e6      	ldr	r6, [r4, #12]
  if (seg->flags & TF_SEG_OPTS_MSS) {
 800c9ac:	7aa3      	ldrb	r3, [r4, #10]
 800c9ae:	f013 0f01 	tst.w	r3, #1
 800c9b2:	d140      	bne.n	800ca36 <tcp_output+0x202>
  opts = (u32_t *)(void *)(seg->tcphdr + 1);
 800c9b4:	3614      	adds	r6, #20
  if (pcb->rtime < 0) {
 800c9b6:	f9b5 3030 	ldrsh.w	r3, [r5, #48]	; 0x30
 800c9ba:	2b00      	cmp	r3, #0
    pcb->rtime = 0;
 800c9bc:	bfbc      	itt	lt
 800c9be:	2300      	movlt	r3, #0
 800c9c0:	862b      	strhlt	r3, [r5, #48]	; 0x30
  if (pcb->rttest == 0) {
 800c9c2:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 800c9c4:	2b00      	cmp	r3, #0
 800c9c6:	d043      	beq.n	800ca50 <tcp_output+0x21c>
  len = (u16_t)((u8_t *)seg->tcphdr - (u8_t *)seg->p->payload);
 800c9c8:	6862      	ldr	r2, [r4, #4]
 800c9ca:	68e3      	ldr	r3, [r4, #12]
 800c9cc:	6851      	ldr	r1, [r2, #4]
 800c9ce:	1a5b      	subs	r3, r3, r1
 800c9d0:	b29b      	uxth	r3, r3
  seg->p->len -= len;
 800c9d2:	8951      	ldrh	r1, [r2, #10]
 800c9d4:	1ac9      	subs	r1, r1, r3
 800c9d6:	8151      	strh	r1, [r2, #10]
  seg->p->tot_len -= len;
 800c9d8:	6861      	ldr	r1, [r4, #4]
 800c9da:	890a      	ldrh	r2, [r1, #8]
 800c9dc:	1ad3      	subs	r3, r2, r3
 800c9de:	810b      	strh	r3, [r1, #8]
  seg->p->payload = seg->tcphdr;
 800c9e0:	6862      	ldr	r2, [r4, #4]
 800c9e2:	68e3      	ldr	r3, [r4, #12]
 800c9e4:	6053      	str	r3, [r2, #4]
  seg->tcphdr->chksum = 0;
 800c9e6:	2200      	movs	r2, #0
 800c9e8:	741a      	strb	r2, [r3, #16]
 800c9ea:	745a      	strb	r2, [r3, #17]
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(seg->tcphdr + 1)) + LWIP_TCP_OPT_LENGTH_SEGMENT(seg->flags, pcb));
 800c9ec:	7aa3      	ldrb	r3, [r4, #10]
 800c9ee:	009b      	lsls	r3, r3, #2
 800c9f0:	f003 0304 	and.w	r3, r3, #4
 800c9f4:	3314      	adds	r3, #20
 800c9f6:	68e2      	ldr	r2, [r4, #12]
 800c9f8:	4413      	add	r3, r2
 800c9fa:	429e      	cmp	r6, r3
 800c9fc:	d006      	beq.n	800ca0c <tcp_output+0x1d8>
 800c9fe:	4b2e      	ldr	r3, [pc, #184]	; (800cab8 <tcp_output+0x284>)
 800ca00:	f240 621c 	movw	r2, #1564	; 0x61c
 800ca04:	4931      	ldr	r1, [pc, #196]	; (800cacc <tcp_output+0x298>)
 800ca06:	482e      	ldr	r0, [pc, #184]	; (800cac0 <tcp_output+0x28c>)
 800ca08:	f002 fb74 	bl	800f0f4 <iprintf>
  err = ip_output_if(seg->p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl,
 800ca0c:	6860      	ldr	r0, [r4, #4]
 800ca0e:	f8cd 9008 	str.w	r9, [sp, #8]
 800ca12:	2306      	movs	r3, #6
 800ca14:	9301      	str	r3, [sp, #4]
 800ca16:	7aab      	ldrb	r3, [r5, #10]
 800ca18:	9300      	str	r3, [sp, #0]
 800ca1a:	7aeb      	ldrb	r3, [r5, #11]
 800ca1c:	4652      	mov	r2, sl
 800ca1e:	4629      	mov	r1, r5
 800ca20:	f001 fb6c 	bl	800e0fc <ip4_output_if>
    if (err != ERR_OK) {
 800ca24:	4603      	mov	r3, r0
 800ca26:	2800      	cmp	r0, #0
 800ca28:	f000 8086 	beq.w	800cb38 <tcp_output+0x304>
      tcp_set_flags(pcb, TF_NAGLEMEMERR);
 800ca2c:	8b6a      	ldrh	r2, [r5, #26]
 800ca2e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800ca32:	836a      	strh	r2, [r5, #26]
      return err;
 800ca34:	e758      	b.n	800c8e8 <tcp_output+0xb4>
    mss = tcp_eff_send_mss_netif(TCP_MSS, netif, &pcb->remote_ip);
 800ca36:	4652      	mov	r2, sl
 800ca38:	4649      	mov	r1, r9
 800ca3a:	f44f 7006 	mov.w	r0, #536	; 0x218
 800ca3e:	f7fc fbf1 	bl	8009224 <tcp_eff_send_mss_netif>
    *opts = TCP_BUILD_MSS_OPTION(mss);
 800ca42:	f040 7001 	orr.w	r0, r0, #33816576	; 0x2040000
 800ca46:	f7fb f824 	bl	8007a92 <lwip_htonl>
 800ca4a:	6170      	str	r0, [r6, #20]
    opts += 1;
 800ca4c:	3618      	adds	r6, #24
 800ca4e:	e7b2      	b.n	800c9b6 <tcp_output+0x182>
    pcb->rttest = tcp_ticks;
 800ca50:	4b1f      	ldr	r3, [pc, #124]	; (800cad0 <tcp_output+0x29c>)
 800ca52:	681b      	ldr	r3, [r3, #0]
 800ca54:	636b      	str	r3, [r5, #52]	; 0x34
    pcb->rtseq = lwip_ntohl(seg->tcphdr->seqno);
 800ca56:	68e3      	ldr	r3, [r4, #12]
 800ca58:	6858      	ldr	r0, [r3, #4]
 800ca5a:	f7fb f81a 	bl	8007a92 <lwip_htonl>
 800ca5e:	63a8      	str	r0, [r5, #56]	; 0x38
 800ca60:	e7b2      	b.n	800c9c8 <tcp_output+0x194>
        pcb->unacked = seg;
 800ca62:	672c      	str	r4, [r5, #112]	; 0x70
        useg = seg;
 800ca64:	46a0      	mov	r8, r4
 800ca66:	e038      	b.n	800cada <tcp_output+0x2a6>
          struct tcp_seg **cur_seg = &(pcb->unacked);
 800ca68:	f105 0b70 	add.w	fp, r5, #112	; 0x70
          while (*cur_seg &&
 800ca6c:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 800ca6e:	b1d3      	cbz	r3, 800caa6 <tcp_output+0x272>
 800ca70:	4622      	mov	r2, r4
 800ca72:	465c      	mov	r4, fp
 800ca74:	4693      	mov	fp, r2
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 800ca76:	68db      	ldr	r3, [r3, #12]
 800ca78:	6858      	ldr	r0, [r3, #4]
 800ca7a:	f7fb f80a 	bl	8007a92 <lwip_htonl>
 800ca7e:	4606      	mov	r6, r0
 800ca80:	f8db 300c 	ldr.w	r3, [fp, #12]
 800ca84:	6858      	ldr	r0, [r3, #4]
 800ca86:	f7fb f804 	bl	8007a92 <lwip_htonl>
 800ca8a:	1a36      	subs	r6, r6, r0
          while (*cur_seg &&
 800ca8c:	2e00      	cmp	r6, #0
 800ca8e:	da07      	bge.n	800caa0 <tcp_output+0x26c>
            cur_seg = &((*cur_seg)->next );
 800ca90:	6824      	ldr	r4, [r4, #0]
          while (*cur_seg &&
 800ca92:	6823      	ldr	r3, [r4, #0]
 800ca94:	2b00      	cmp	r3, #0
 800ca96:	d1ee      	bne.n	800ca76 <tcp_output+0x242>
 800ca98:	465b      	mov	r3, fp
 800ca9a:	46a3      	mov	fp, r4
 800ca9c:	461c      	mov	r4, r3
 800ca9e:	e002      	b.n	800caa6 <tcp_output+0x272>
 800caa0:	465b      	mov	r3, fp
 800caa2:	46a3      	mov	fp, r4
 800caa4:	461c      	mov	r4, r3
          seg->next = (*cur_seg);
 800caa6:	f8db 3000 	ldr.w	r3, [fp]
 800caaa:	6023      	str	r3, [r4, #0]
          (*cur_seg) = seg;
 800caac:	f8cb 4000 	str.w	r4, [fp]
 800cab0:	e013      	b.n	800cada <tcp_output+0x2a6>
 800cab2:	bf00      	nop
 800cab4:	20010948 	.word	0x20010948
 800cab8:	08011de4 	.word	0x08011de4
 800cabc:	08012470 	.word	0x08012470
 800cac0:	080103a4 	.word	0x080103a4
 800cac4:	08012488 	.word	0x08012488
 800cac8:	080124b0 	.word	0x080124b0
 800cacc:	08011e68 	.word	0x08011e68
 800cad0:	20010914 	.word	0x20010914
      tcp_seg_free(seg);
 800cad4:	4620      	mov	r0, r4
 800cad6:	f7fc fad1 	bl	800907c <tcp_seg_free>
    seg = pcb->unsent;
 800cada:	6eec      	ldr	r4, [r5, #108]	; 0x6c
  while (seg != NULL &&
 800cadc:	2c00      	cmp	r4, #0
 800cade:	f43f af49 	beq.w	800c974 <tcp_output+0x140>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
 800cae2:	68e3      	ldr	r3, [r4, #12]
 800cae4:	6858      	ldr	r0, [r3, #4]
 800cae6:	f7fa ffd4 	bl	8007a92 <lwip_htonl>
 800caea:	6c6b      	ldr	r3, [r5, #68]	; 0x44
 800caec:	1ac0      	subs	r0, r0, r3
 800caee:	8923      	ldrh	r3, [r4, #8]
 800caf0:	4418      	add	r0, r3
  while (seg != NULL &&
 800caf2:	42b8      	cmp	r0, r7
 800caf4:	f63f af3b 	bhi.w	800c96e <tcp_output+0x13a>
    LWIP_ASSERT("RST not expected here!",
 800caf8:	68e3      	ldr	r3, [r4, #12]
 800cafa:	8998      	ldrh	r0, [r3, #12]
 800cafc:	f7fa ffc4 	bl	8007a88 <lwip_htons>
 800cb00:	f010 0f04 	tst.w	r0, #4
 800cb04:	f47f af18 	bne.w	800c938 <tcp_output+0x104>
    if ((tcp_do_output_nagle(pcb) == 0) &&
 800cb08:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 800cb0a:	b15b      	cbz	r3, 800cb24 <tcp_output+0x2f0>
 800cb0c:	8b6b      	ldrh	r3, [r5, #26]
 800cb0e:	f013 0f44 	tst.w	r3, #68	; 0x44
 800cb12:	d107      	bne.n	800cb24 <tcp_output+0x2f0>
 800cb14:	6eea      	ldr	r2, [r5, #108]	; 0x6c
 800cb16:	2a00      	cmp	r2, #0
 800cb18:	f43f af1b 	beq.w	800c952 <tcp_output+0x11e>
 800cb1c:	6811      	ldr	r1, [r2, #0]
 800cb1e:	2900      	cmp	r1, #0
 800cb20:	f43f af12 	beq.w	800c948 <tcp_output+0x114>
    if (pcb->state != SYN_SENT) {
 800cb24:	7d2b      	ldrb	r3, [r5, #20]
 800cb26:	2b02      	cmp	r3, #2
 800cb28:	f47f af28 	bne.w	800c97c <tcp_output+0x148>
  if (tcp_output_segment_busy(seg)) {
 800cb2c:	4620      	mov	r0, r4
 800cb2e:	f7fe fe83 	bl	800b838 <tcp_output_segment_busy>
 800cb32:	2800      	cmp	r0, #0
 800cb34:	f43f af2b 	beq.w	800c98e <tcp_output+0x15a>
    pcb->unsent = seg->next;
 800cb38:	6823      	ldr	r3, [r4, #0]
 800cb3a:	66eb      	str	r3, [r5, #108]	; 0x6c
    if (pcb->state != SYN_SENT) {
 800cb3c:	7d2b      	ldrb	r3, [r5, #20]
 800cb3e:	2b02      	cmp	r3, #2
 800cb40:	d003      	beq.n	800cb4a <tcp_output+0x316>
      tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800cb42:	8b6b      	ldrh	r3, [r5, #26]
 800cb44:	f023 0303 	bic.w	r3, r3, #3
 800cb48:	836b      	strh	r3, [r5, #26]
    snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 800cb4a:	68e3      	ldr	r3, [r4, #12]
 800cb4c:	6858      	ldr	r0, [r3, #4]
 800cb4e:	f7fa ffa0 	bl	8007a92 <lwip_htonl>
 800cb52:	4606      	mov	r6, r0
 800cb54:	f8b4 b008 	ldrh.w	fp, [r4, #8]
 800cb58:	68e3      	ldr	r3, [r4, #12]
 800cb5a:	8998      	ldrh	r0, [r3, #12]
 800cb5c:	f7fa ff94 	bl	8007a88 <lwip_htons>
 800cb60:	f010 0003 	ands.w	r0, r0, #3
 800cb64:	bf18      	it	ne
 800cb66:	2001      	movne	r0, #1
 800cb68:	445e      	add	r6, fp
 800cb6a:	4430      	add	r0, r6
    if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 800cb6c:	6d2b      	ldr	r3, [r5, #80]	; 0x50
 800cb6e:	1a1b      	subs	r3, r3, r0
 800cb70:	2b00      	cmp	r3, #0
      pcb->snd_nxt = snd_nxt;
 800cb72:	bfb8      	it	lt
 800cb74:	6528      	strlt	r0, [r5, #80]	; 0x50
    if (TCP_TCPLEN(seg) > 0) {
 800cb76:	8926      	ldrh	r6, [r4, #8]
 800cb78:	68e3      	ldr	r3, [r4, #12]
 800cb7a:	8998      	ldrh	r0, [r3, #12]
 800cb7c:	f7fa ff84 	bl	8007a88 <lwip_htons>
 800cb80:	f010 0003 	ands.w	r0, r0, #3
 800cb84:	bf18      	it	ne
 800cb86:	2001      	movne	r0, #1
 800cb88:	42f0      	cmn	r0, r6
 800cb8a:	d0a3      	beq.n	800cad4 <tcp_output+0x2a0>
      seg->next = NULL;
 800cb8c:	2300      	movs	r3, #0
 800cb8e:	6023      	str	r3, [r4, #0]
      if (pcb->unacked == NULL) {
 800cb90:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 800cb92:	2b00      	cmp	r3, #0
 800cb94:	f43f af65 	beq.w	800ca62 <tcp_output+0x22e>
        if (TCP_SEQ_LT(lwip_ntohl(seg->tcphdr->seqno), lwip_ntohl(useg->tcphdr->seqno))) {
 800cb98:	68e3      	ldr	r3, [r4, #12]
 800cb9a:	6858      	ldr	r0, [r3, #4]
 800cb9c:	f7fa ff79 	bl	8007a92 <lwip_htonl>
 800cba0:	4606      	mov	r6, r0
 800cba2:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800cba6:	6858      	ldr	r0, [r3, #4]
 800cba8:	f7fa ff73 	bl	8007a92 <lwip_htonl>
 800cbac:	1a36      	subs	r6, r6, r0
 800cbae:	2e00      	cmp	r6, #0
 800cbb0:	f6ff af5a 	blt.w	800ca68 <tcp_output+0x234>
          useg->next = seg;
 800cbb4:	f8c8 4000 	str.w	r4, [r8]
 800cbb8:	46a0      	mov	r8, r4
 800cbba:	e78e      	b.n	800cada <tcp_output+0x2a6>
  useg = pcb->unacked;
 800cbbc:	4698      	mov	r8, r3
  while (seg != NULL &&
 800cbbe:	e790      	b.n	800cae2 <tcp_output+0x2ae>
    return ERR_OK;
 800cbc0:	2300      	movs	r3, #0
 800cbc2:	e691      	b.n	800c8e8 <tcp_output+0xb4>
    return ERR_RTE;
 800cbc4:	f06f 0303 	mvn.w	r3, #3
 800cbc8:	e68e      	b.n	800c8e8 <tcp_output+0xb4>
 800cbca:	bf00      	nop

0800cbcc <tcp_rexmit_rto_commit>:
{
 800cbcc:	b510      	push	{r4, lr}
  LWIP_ASSERT("tcp_rexmit_rto_commit: invalid pcb", pcb != NULL);
 800cbce:	4604      	mov	r4, r0
 800cbd0:	b150      	cbz	r0, 800cbe8 <tcp_rexmit_rto_commit+0x1c>
  if (pcb->nrtx < 0xFF) {
 800cbd2:	f894 3042 	ldrb.w	r3, [r4, #66]	; 0x42
 800cbd6:	2bff      	cmp	r3, #255	; 0xff
    ++pcb->nrtx;
 800cbd8:	bf1c      	itt	ne
 800cbda:	3301      	addne	r3, #1
 800cbdc:	f884 3042 	strbne.w	r3, [r4, #66]	; 0x42
  tcp_output(pcb);
 800cbe0:	4620      	mov	r0, r4
 800cbe2:	f7ff fe27 	bl	800c834 <tcp_output>
}
 800cbe6:	bd10      	pop	{r4, pc}
  LWIP_ASSERT("tcp_rexmit_rto_commit: invalid pcb", pcb != NULL);
 800cbe8:	4b03      	ldr	r3, [pc, #12]	; (800cbf8 <tcp_rexmit_rto_commit+0x2c>)
 800cbea:	f44f 62d3 	mov.w	r2, #1688	; 0x698
 800cbee:	4903      	ldr	r1, [pc, #12]	; (800cbfc <tcp_rexmit_rto_commit+0x30>)
 800cbf0:	4803      	ldr	r0, [pc, #12]	; (800cc00 <tcp_rexmit_rto_commit+0x34>)
 800cbf2:	f002 fa7f 	bl	800f0f4 <iprintf>
 800cbf6:	e7ec      	b.n	800cbd2 <tcp_rexmit_rto_commit+0x6>
 800cbf8:	08011de4 	.word	0x08011de4
 800cbfc:	080124c8 	.word	0x080124c8
 800cc00:	080103a4 	.word	0x080103a4

0800cc04 <tcp_rexmit_rto>:
{
 800cc04:	b510      	push	{r4, lr}
  LWIP_ASSERT("tcp_rexmit_rto: invalid pcb", pcb != NULL);
 800cc06:	4604      	mov	r4, r0
 800cc08:	b120      	cbz	r0, 800cc14 <tcp_rexmit_rto+0x10>
  if (tcp_rexmit_rto_prepare(pcb) == ERR_OK) {
 800cc0a:	4620      	mov	r0, r4
 800cc0c:	f7ff fcbe 	bl	800c58c <tcp_rexmit_rto_prepare>
 800cc10:	b140      	cbz	r0, 800cc24 <tcp_rexmit_rto+0x20>
}
 800cc12:	bd10      	pop	{r4, pc}
  LWIP_ASSERT("tcp_rexmit_rto: invalid pcb", pcb != NULL);
 800cc14:	4b05      	ldr	r3, [pc, #20]	; (800cc2c <tcp_rexmit_rto+0x28>)
 800cc16:	f240 62ad 	movw	r2, #1709	; 0x6ad
 800cc1a:	4905      	ldr	r1, [pc, #20]	; (800cc30 <tcp_rexmit_rto+0x2c>)
 800cc1c:	4805      	ldr	r0, [pc, #20]	; (800cc34 <tcp_rexmit_rto+0x30>)
 800cc1e:	f002 fa69 	bl	800f0f4 <iprintf>
 800cc22:	e7f2      	b.n	800cc0a <tcp_rexmit_rto+0x6>
    tcp_rexmit_rto_commit(pcb);
 800cc24:	4620      	mov	r0, r4
 800cc26:	f7ff ffd1 	bl	800cbcc <tcp_rexmit_rto_commit>
}
 800cc2a:	e7f2      	b.n	800cc12 <tcp_rexmit_rto+0xe>
 800cc2c:	08011de4 	.word	0x08011de4
 800cc30:	080124ec 	.word	0x080124ec
 800cc34:	080103a4 	.word	0x080103a4

0800cc38 <tcp_keepalive>:
 *
 * @param pcb the tcp_pcb for which to send a keepalive packet
 */
err_t
tcp_keepalive(struct tcp_pcb *pcb)
{
 800cc38:	b538      	push	{r3, r4, r5, lr}
  err_t err;
  struct pbuf *p;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);

  LWIP_ASSERT("tcp_keepalive: invalid pcb", pcb != NULL);
 800cc3a:	4604      	mov	r4, r0
 800cc3c:	b1c0      	cbz	r0, 800cc70 <tcp_keepalive+0x38>
  LWIP_DEBUGF(TCP_DEBUG, ("\n"));

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: tcp_ticks %"U32_F"   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
                          tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt - 1));
 800cc3e:	6d20      	ldr	r0, [r4, #80]	; 0x50
 800cc40:	3801      	subs	r0, #1
 800cc42:	f7fa ff26 	bl	8007a92 <lwip_htonl>
 800cc46:	4603      	mov	r3, r0
 800cc48:	2200      	movs	r2, #0
 800cc4a:	4611      	mov	r1, r2
 800cc4c:	4620      	mov	r0, r4
 800cc4e:	f7fe ff4b 	bl	800bae8 <tcp_output_alloc_header>
  if (p == NULL) {
 800cc52:	4605      	mov	r5, r0
 800cc54:	b1a0      	cbz	r0, 800cc80 <tcp_keepalive+0x48>
    LWIP_DEBUGF(TCP_DEBUG,
                ("tcp_keepalive: could not allocate memory for pbuf\n"));
    return ERR_MEM;
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 800cc56:	2300      	movs	r3, #0
 800cc58:	461a      	mov	r2, r3
 800cc5a:	4601      	mov	r1, r0
 800cc5c:	4620      	mov	r0, r4
 800cc5e:	f7fe fe03 	bl	800b868 <tcp_output_fill_options>
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 800cc62:	1d23      	adds	r3, r4, #4
 800cc64:	4622      	mov	r2, r4
 800cc66:	4629      	mov	r1, r5
 800cc68:	4620      	mov	r0, r4
 800cc6a:	f7fe ff67 	bl	800bb3c <tcp_output_control_segment>

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: seqno %"U32_F" ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
}
 800cc6e:	bd38      	pop	{r3, r4, r5, pc}
  LWIP_ASSERT("tcp_keepalive: invalid pcb", pcb != NULL);
 800cc70:	4b05      	ldr	r3, [pc, #20]	; (800cc88 <tcp_keepalive+0x50>)
 800cc72:	f640 0224 	movw	r2, #2084	; 0x824
 800cc76:	4905      	ldr	r1, [pc, #20]	; (800cc8c <tcp_keepalive+0x54>)
 800cc78:	4805      	ldr	r0, [pc, #20]	; (800cc90 <tcp_keepalive+0x58>)
 800cc7a:	f002 fa3b 	bl	800f0f4 <iprintf>
 800cc7e:	e7de      	b.n	800cc3e <tcp_keepalive+0x6>
    return ERR_MEM;
 800cc80:	f04f 30ff 	mov.w	r0, #4294967295
 800cc84:	e7f3      	b.n	800cc6e <tcp_keepalive+0x36>
 800cc86:	bf00      	nop
 800cc88:	08011de4 	.word	0x08011de4
 800cc8c:	08012508 	.word	0x08012508
 800cc90:	080103a4 	.word	0x080103a4

0800cc94 <tcp_zero_window_probe>:
 *
 * @param pcb the tcp_pcb for which to send a zero-window probe packet
 */
err_t
tcp_zero_window_probe(struct tcp_pcb *pcb)
{
 800cc94:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  u16_t len;
  u8_t is_fin;
  u32_t snd_nxt;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);

  LWIP_ASSERT("tcp_zero_window_probe: invalid pcb", pcb != NULL);
 800cc98:	4604      	mov	r4, r0
 800cc9a:	2800      	cmp	r0, #0
 800cc9c:	d03e      	beq.n	800cd1c <tcp_zero_window_probe+0x88>
              ("tcp_zero_window_probe: tcp_ticks %"U32_F
               "   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
               tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  /* Only consider unsent, persist timer should be off when there is data in-flight */
  seg = pcb->unsent;
 800cc9e:	6ee5      	ldr	r5, [r4, #108]	; 0x6c
  if (seg == NULL) {
 800cca0:	2d00      	cmp	r5, #0
 800cca2:	d043      	beq.n	800cd2c <tcp_zero_window_probe+0x98>

  /* increment probe count. NOTE: we record probe even if it fails
     to actually transmit due to an error. This ensures memory exhaustion/
     routing problem doesn't leave a zero-window pcb as an indefinite zombie.
     RTO mechanism has similar behavior, see pcb->nrtx */
  if (pcb->persist_probe < 0xFF) {
 800cca4:	f894 309a 	ldrb.w	r3, [r4, #154]	; 0x9a
 800cca8:	2bff      	cmp	r3, #255	; 0xff
    ++pcb->persist_probe;
 800ccaa:	bf1c      	itt	ne
 800ccac:	3301      	addne	r3, #1
 800ccae:	f884 309a 	strbne.w	r3, [r4, #154]	; 0x9a
  }

  is_fin = ((TCPH_FLAGS(seg->tcphdr) & TCP_FIN) != 0) && (seg->len == 0);
 800ccb2:	68eb      	ldr	r3, [r5, #12]
 800ccb4:	8998      	ldrh	r0, [r3, #12]
 800ccb6:	f7fa fee7 	bl	8007a88 <lwip_htons>
 800ccba:	f010 0f01 	tst.w	r0, #1
 800ccbe:	d002      	beq.n	800ccc6 <tcp_zero_window_probe+0x32>
 800ccc0:	892b      	ldrh	r3, [r5, #8]
 800ccc2:	2b00      	cmp	r3, #0
 800ccc4:	d03a      	beq.n	800cd3c <tcp_zero_window_probe+0xa8>
  /* we want to send one seqno: either FIN or data (no options) */
  len = is_fin ? 0 : 1;

  p = tcp_output_alloc_header(pcb, optlen, len, seg->tcphdr->seqno);
 800ccc6:	68eb      	ldr	r3, [r5, #12]
 800ccc8:	685b      	ldr	r3, [r3, #4]
 800ccca:	2201      	movs	r2, #1
 800cccc:	2100      	movs	r1, #0
 800ccce:	4620      	mov	r0, r4
 800ccd0:	f7fe ff0a 	bl	800bae8 <tcp_output_alloc_header>
  if (p == NULL) {
 800ccd4:	4606      	mov	r6, r0
 800ccd6:	b370      	cbz	r0, 800cd36 <tcp_zero_window_probe+0xa2>
    /* Data segment, copy in one byte from the head of the unacked queue */
    char *d = ((char *)p->payload + TCP_HLEN);
    /* Depending on whether the segment has already been sent (unacked) or not
       (unsent), seg->p->payload points to the IP header or TCP header.
       Ensure we copy the first TCP data byte: */
    pbuf_copy_partial(seg->p, d, 1, seg->p->tot_len - seg->len);
 800ccd8:	6868      	ldr	r0, [r5, #4]
 800ccda:	8903      	ldrh	r3, [r0, #8]
 800ccdc:	892a      	ldrh	r2, [r5, #8]
 800ccde:	1a9b      	subs	r3, r3, r2
    char *d = ((char *)p->payload + TCP_HLEN);
 800cce0:	6871      	ldr	r1, [r6, #4]
    pbuf_copy_partial(seg->p, d, 1, seg->p->tot_len - seg->len);
 800cce2:	b29b      	uxth	r3, r3
 800cce4:	2201      	movs	r2, #1
 800cce6:	3114      	adds	r1, #20
 800cce8:	f7fb ff8e 	bl	8008c08 <pbuf_copy_partial>
  }

  /* The byte may be acknowledged without the window being opened. */
  snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + 1;
 800ccec:	68eb      	ldr	r3, [r5, #12]
 800ccee:	6858      	ldr	r0, [r3, #4]
 800ccf0:	f7fa fecf 	bl	8007a92 <lwip_htonl>
 800ccf4:	3001      	adds	r0, #1
  if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 800ccf6:	6d23      	ldr	r3, [r4, #80]	; 0x50
 800ccf8:	1a1b      	subs	r3, r3, r0
 800ccfa:	2b00      	cmp	r3, #0
    pcb->snd_nxt = snd_nxt;
 800ccfc:	bfb8      	it	lt
 800ccfe:	6520      	strlt	r0, [r4, #80]	; 0x50
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 800cd00:	2300      	movs	r3, #0
 800cd02:	461a      	mov	r2, r3
 800cd04:	4631      	mov	r1, r6
 800cd06:	4620      	mov	r0, r4
 800cd08:	f7fe fdae 	bl	800b868 <tcp_output_fill_options>

  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 800cd0c:	1d23      	adds	r3, r4, #4
 800cd0e:	4622      	mov	r2, r4
 800cd10:	4631      	mov	r1, r6
 800cd12:	4620      	mov	r0, r4
 800cd14:	f7fe ff12 	bl	800bb3c <tcp_output_control_segment>

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: seqno %"U32_F
                          " ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
}
 800cd18:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  LWIP_ASSERT("tcp_zero_window_probe: invalid pcb", pcb != NULL);
 800cd1c:	4b13      	ldr	r3, [pc, #76]	; (800cd6c <tcp_zero_window_probe+0xd8>)
 800cd1e:	f640 024f 	movw	r2, #2127	; 0x84f
 800cd22:	4913      	ldr	r1, [pc, #76]	; (800cd70 <tcp_zero_window_probe+0xdc>)
 800cd24:	4813      	ldr	r0, [pc, #76]	; (800cd74 <tcp_zero_window_probe+0xe0>)
 800cd26:	f002 f9e5 	bl	800f0f4 <iprintf>
 800cd2a:	e7b8      	b.n	800cc9e <tcp_zero_window_probe+0xa>
    return ERR_OK;
 800cd2c:	2000      	movs	r0, #0
 800cd2e:	e7f3      	b.n	800cd18 <tcp_zero_window_probe+0x84>
    return ERR_MEM;
 800cd30:	f04f 30ff 	mov.w	r0, #4294967295
 800cd34:	e7f0      	b.n	800cd18 <tcp_zero_window_probe+0x84>
 800cd36:	f04f 30ff 	mov.w	r0, #4294967295
 800cd3a:	e7ed      	b.n	800cd18 <tcp_zero_window_probe+0x84>
  p = tcp_output_alloc_header(pcb, optlen, len, seg->tcphdr->seqno);
 800cd3c:	68eb      	ldr	r3, [r5, #12]
 800cd3e:	685b      	ldr	r3, [r3, #4]
 800cd40:	2200      	movs	r2, #0
 800cd42:	4611      	mov	r1, r2
 800cd44:	4620      	mov	r0, r4
 800cd46:	f7fe fecf 	bl	800bae8 <tcp_output_alloc_header>
  if (p == NULL) {
 800cd4a:	4606      	mov	r6, r0
 800cd4c:	2800      	cmp	r0, #0
 800cd4e:	d0ef      	beq.n	800cd30 <tcp_zero_window_probe+0x9c>
  tcphdr = (struct tcp_hdr *)p->payload;
 800cd50:	f8d6 8004 	ldr.w	r8, [r6, #4]
    TCPH_FLAGS_SET(tcphdr, TCP_ACK | TCP_FIN);
 800cd54:	f9b8 700c 	ldrsh.w	r7, [r8, #12]
 800cd58:	f427 577c 	bic.w	r7, r7, #16128	; 0x3f00
 800cd5c:	2011      	movs	r0, #17
 800cd5e:	f7fa fe93 	bl	8007a88 <lwip_htons>
 800cd62:	4307      	orrs	r7, r0
 800cd64:	f8a8 700c 	strh.w	r7, [r8, #12]
 800cd68:	e7c0      	b.n	800ccec <tcp_zero_window_probe+0x58>
 800cd6a:	bf00      	nop
 800cd6c:	08011de4 	.word	0x08011de4
 800cd70:	08012524 	.word	0x08012524
 800cd74:	080103a4 	.word	0x080103a4

0800cd78 <sys_timeout_abs>:
#if LWIP_DEBUG_TIMERNAMES
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg)
#endif
{
 800cd78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cd7a:	4604      	mov	r4, r0
 800cd7c:	460f      	mov	r7, r1
 800cd7e:	4616      	mov	r6, r2
  struct sys_timeo *timeout, *t;

  timeout = (struct sys_timeo *)memp_malloc(MEMP_SYS_TIMEOUT);
 800cd80:	200a      	movs	r0, #10
 800cd82:	f7fb f9cf 	bl	8008124 <memp_malloc>
  if (timeout == NULL) {
 800cd86:	b180      	cbz	r0, 800cdaa <sys_timeout_abs+0x32>
 800cd88:	4605      	mov	r5, r0
    LWIP_ASSERT("sys_timeout: timeout != NULL, pool MEMP_SYS_TIMEOUT is empty", timeout != NULL);
    return;
  }

  timeout->next = NULL;
 800cd8a:	2300      	movs	r3, #0
 800cd8c:	6003      	str	r3, [r0, #0]
  timeout->h = handler;
 800cd8e:	6087      	str	r7, [r0, #8]
  timeout->arg = arg;
 800cd90:	60c6      	str	r6, [r0, #12]
  timeout->time = abs_time;
 800cd92:	6044      	str	r4, [r0, #4]
  timeout->handler_name = handler_name;
  LWIP_DEBUGF(TIMERS_DEBUG, ("sys_timeout: %p abs_time=%"U32_F" handler=%s arg=%p\n",
                             (void *)timeout, abs_time, handler_name, (void *)arg));
#endif /* LWIP_DEBUG_TIMERNAMES */

  if (next_timeout == NULL) {
 800cd94:	4b0f      	ldr	r3, [pc, #60]	; (800cdd4 <sys_timeout_abs+0x5c>)
 800cd96:	681b      	ldr	r3, [r3, #0]
 800cd98:	b173      	cbz	r3, 800cdb8 <sys_timeout_abs+0x40>
    next_timeout = timeout;
    return;
  }
  if (TIME_LESS_THAN(timeout->time, next_timeout->time)) {
 800cd9a:	685a      	ldr	r2, [r3, #4]
 800cd9c:	1aa2      	subs	r2, r4, r2
 800cd9e:	2a00      	cmp	r2, #0
 800cda0:	da0d      	bge.n	800cdbe <sys_timeout_abs+0x46>
    timeout->next = next_timeout;
 800cda2:	6003      	str	r3, [r0, #0]
    next_timeout = timeout;
 800cda4:	4b0b      	ldr	r3, [pc, #44]	; (800cdd4 <sys_timeout_abs+0x5c>)
 800cda6:	6018      	str	r0, [r3, #0]
        t->next = timeout;
        break;
      }
    }
  }
}
 800cda8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    LWIP_ASSERT("sys_timeout: timeout != NULL, pool MEMP_SYS_TIMEOUT is empty", timeout != NULL);
 800cdaa:	4b0b      	ldr	r3, [pc, #44]	; (800cdd8 <sys_timeout_abs+0x60>)
 800cdac:	22be      	movs	r2, #190	; 0xbe
 800cdae:	490b      	ldr	r1, [pc, #44]	; (800cddc <sys_timeout_abs+0x64>)
 800cdb0:	480b      	ldr	r0, [pc, #44]	; (800cde0 <sys_timeout_abs+0x68>)
 800cdb2:	f002 f99f 	bl	800f0f4 <iprintf>
    return;
 800cdb6:	e7f7      	b.n	800cda8 <sys_timeout_abs+0x30>
    next_timeout = timeout;
 800cdb8:	4b06      	ldr	r3, [pc, #24]	; (800cdd4 <sys_timeout_abs+0x5c>)
 800cdba:	6018      	str	r0, [r3, #0]
    return;
 800cdbc:	e7f4      	b.n	800cda8 <sys_timeout_abs+0x30>
      if ((t->next == NULL) || TIME_LESS_THAN(timeout->time, t->next->time)) {
 800cdbe:	4619      	mov	r1, r3
 800cdc0:	681b      	ldr	r3, [r3, #0]
 800cdc2:	b11b      	cbz	r3, 800cdcc <sys_timeout_abs+0x54>
 800cdc4:	685a      	ldr	r2, [r3, #4]
 800cdc6:	1aa2      	subs	r2, r4, r2
 800cdc8:	2a00      	cmp	r2, #0
 800cdca:	daf8      	bge.n	800cdbe <sys_timeout_abs+0x46>
        timeout->next = t->next;
 800cdcc:	602b      	str	r3, [r5, #0]
        t->next = timeout;
 800cdce:	600d      	str	r5, [r1, #0]
        break;
 800cdd0:	e7ea      	b.n	800cda8 <sys_timeout_abs+0x30>
 800cdd2:	bf00      	nop
 800cdd4:	20010964 	.word	0x20010964
 800cdd8:	08012548 	.word	0x08012548
 800cddc:	0801257c 	.word	0x0801257c
 800cde0:	080103a4 	.word	0x080103a4

0800cde4 <lwip_cyclic_timer>:
#if !LWIP_TESTMODE
static
#endif
void
lwip_cyclic_timer(void *arg)
{
 800cde4:	b538      	push	{r3, r4, r5, lr}
 800cde6:	4604      	mov	r4, r0
  const struct lwip_cyclic_timer *cyclic = (const struct lwip_cyclic_timer *)arg;

#if LWIP_DEBUG_TIMERNAMES
  LWIP_DEBUGF(TIMERS_DEBUG, ("tcpip: %s()\n", cyclic->handler_name));
#endif
  cyclic->handler();
 800cde8:	6843      	ldr	r3, [r0, #4]
 800cdea:	4798      	blx	r3

  now = sys_now();
 800cdec:	f7f6 fbfa 	bl	80035e4 <sys_now>
 800cdf0:	4684      	mov	ip, r0
  next_timeout_time = (u32_t)(current_timeout_due_time + cyclic->interval_ms);  /* overflow handled by TIME_LESS_THAN macro */ 
 800cdf2:	6825      	ldr	r5, [r4, #0]
 800cdf4:	4b06      	ldr	r3, [pc, #24]	; (800ce10 <lwip_cyclic_timer+0x2c>)
 800cdf6:	6818      	ldr	r0, [r3, #0]
 800cdf8:	4428      	add	r0, r5
  if (TIME_LESS_THAN(next_timeout_time, now)) {
 800cdfa:	eba0 030c 	sub.w	r3, r0, ip
 800cdfe:	2b00      	cmp	r3, #0
    /* timer would immediately expire again -> "overload" -> restart without any correction */
#if LWIP_DEBUG_TIMERNAMES
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg);
 800ce00:	4622      	mov	r2, r4
 800ce02:	4904      	ldr	r1, [pc, #16]	; (800ce14 <lwip_cyclic_timer+0x30>)
 800ce04:	bfb8      	it	lt
 800ce06:	eb05 000c 	addlt.w	r0, r5, ip
  } else {
    /* correct cyclic interval with handler execution delay and sys_check_timeouts jitter */
#if LWIP_DEBUG_TIMERNAMES
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
 800ce0a:	f7ff ffb5 	bl	800cd78 <sys_timeout_abs>
#endif
  }
}
 800ce0e:	bd38      	pop	{r3, r4, r5, pc}
 800ce10:	20010960 	.word	0x20010960
 800ce14:	0800cde5 	.word	0x0800cde5

0800ce18 <sys_timeout>:
sys_timeout_debug(u32_t msecs, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
void
sys_timeout(u32_t msecs, sys_timeout_handler handler, void *arg)
#endif /* LWIP_DEBUG_TIMERNAMES */
{
 800ce18:	b570      	push	{r4, r5, r6, lr}
 800ce1a:	4604      	mov	r4, r0
 800ce1c:	460d      	mov	r5, r1
 800ce1e:	4616      	mov	r6, r2
  u32_t next_timeout_time;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("Timeout time too long, max is LWIP_UINT32_MAX/4 msecs", msecs <= (LWIP_UINT32_MAX / 4));
 800ce20:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 800ce24:	d207      	bcs.n	800ce36 <sys_timeout+0x1e>

  next_timeout_time = (u32_t)(sys_now() + msecs); /* overflow handled by TIME_LESS_THAN macro */ 
 800ce26:	f7f6 fbdd 	bl	80035e4 <sys_now>

#if LWIP_DEBUG_TIMERNAMES
  sys_timeout_abs(next_timeout_time, handler, arg, handler_name);
#else
  sys_timeout_abs(next_timeout_time, handler, arg);
 800ce2a:	4632      	mov	r2, r6
 800ce2c:	4629      	mov	r1, r5
 800ce2e:	4420      	add	r0, r4
 800ce30:	f7ff ffa2 	bl	800cd78 <sys_timeout_abs>
#endif
}
 800ce34:	bd70      	pop	{r4, r5, r6, pc}
  LWIP_ASSERT("Timeout time too long, max is LWIP_UINT32_MAX/4 msecs", msecs <= (LWIP_UINT32_MAX / 4));
 800ce36:	4b04      	ldr	r3, [pc, #16]	; (800ce48 <sys_timeout+0x30>)
 800ce38:	f240 1229 	movw	r2, #297	; 0x129
 800ce3c:	4903      	ldr	r1, [pc, #12]	; (800ce4c <sys_timeout+0x34>)
 800ce3e:	4804      	ldr	r0, [pc, #16]	; (800ce50 <sys_timeout+0x38>)
 800ce40:	f002 f958 	bl	800f0f4 <iprintf>
 800ce44:	e7ef      	b.n	800ce26 <sys_timeout+0xe>
 800ce46:	bf00      	nop
 800ce48:	08012548 	.word	0x08012548
 800ce4c:	080125bc 	.word	0x080125bc
 800ce50:	080103a4 	.word	0x080103a4

0800ce54 <tcp_timer_needed>:
{
 800ce54:	b508      	push	{r3, lr}
  if (!tcpip_tcp_timer_active && (tcp_active_pcbs || tcp_tw_pcbs)) {
 800ce56:	4b0a      	ldr	r3, [pc, #40]	; (800ce80 <tcp_timer_needed+0x2c>)
 800ce58:	681b      	ldr	r3, [r3, #0]
 800ce5a:	b953      	cbnz	r3, 800ce72 <tcp_timer_needed+0x1e>
 800ce5c:	4b09      	ldr	r3, [pc, #36]	; (800ce84 <tcp_timer_needed+0x30>)
 800ce5e:	681b      	ldr	r3, [r3, #0]
 800ce60:	b143      	cbz	r3, 800ce74 <tcp_timer_needed+0x20>
    tcpip_tcp_timer_active = 1;
 800ce62:	4b07      	ldr	r3, [pc, #28]	; (800ce80 <tcp_timer_needed+0x2c>)
 800ce64:	2201      	movs	r2, #1
 800ce66:	601a      	str	r2, [r3, #0]
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 800ce68:	2200      	movs	r2, #0
 800ce6a:	4907      	ldr	r1, [pc, #28]	; (800ce88 <tcp_timer_needed+0x34>)
 800ce6c:	20fa      	movs	r0, #250	; 0xfa
 800ce6e:	f7ff ffd3 	bl	800ce18 <sys_timeout>
}
 800ce72:	bd08      	pop	{r3, pc}
  if (!tcpip_tcp_timer_active && (tcp_active_pcbs || tcp_tw_pcbs)) {
 800ce74:	4b05      	ldr	r3, [pc, #20]	; (800ce8c <tcp_timer_needed+0x38>)
 800ce76:	681b      	ldr	r3, [r3, #0]
 800ce78:	2b00      	cmp	r3, #0
 800ce7a:	d1f2      	bne.n	800ce62 <tcp_timer_needed+0xe>
 800ce7c:	e7f9      	b.n	800ce72 <tcp_timer_needed+0x1e>
 800ce7e:	bf00      	nop
 800ce80:	20010968 	.word	0x20010968
 800ce84:	20010904 	.word	0x20010904
 800ce88:	0800ce91 	.word	0x0800ce91
 800ce8c:	2001091c 	.word	0x2001091c

0800ce90 <tcpip_tcp_timer>:
{
 800ce90:	b508      	push	{r3, lr}
  tcp_tmr();
 800ce92:	f7fd f89d 	bl	8009fd0 <tcp_tmr>
  if (tcp_active_pcbs || tcp_tw_pcbs) {
 800ce96:	4b08      	ldr	r3, [pc, #32]	; (800ceb8 <tcpip_tcp_timer+0x28>)
 800ce98:	681b      	ldr	r3, [r3, #0]
 800ce9a:	b12b      	cbz	r3, 800cea8 <tcpip_tcp_timer+0x18>
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 800ce9c:	2200      	movs	r2, #0
 800ce9e:	4907      	ldr	r1, [pc, #28]	; (800cebc <tcpip_tcp_timer+0x2c>)
 800cea0:	20fa      	movs	r0, #250	; 0xfa
 800cea2:	f7ff ffb9 	bl	800ce18 <sys_timeout>
}
 800cea6:	bd08      	pop	{r3, pc}
  if (tcp_active_pcbs || tcp_tw_pcbs) {
 800cea8:	4b05      	ldr	r3, [pc, #20]	; (800cec0 <tcpip_tcp_timer+0x30>)
 800ceaa:	681b      	ldr	r3, [r3, #0]
 800ceac:	2b00      	cmp	r3, #0
 800ceae:	d1f5      	bne.n	800ce9c <tcpip_tcp_timer+0xc>
    tcpip_tcp_timer_active = 0;
 800ceb0:	4b04      	ldr	r3, [pc, #16]	; (800cec4 <tcpip_tcp_timer+0x34>)
 800ceb2:	2200      	movs	r2, #0
 800ceb4:	601a      	str	r2, [r3, #0]
}
 800ceb6:	e7f6      	b.n	800cea6 <tcpip_tcp_timer+0x16>
 800ceb8:	20010904 	.word	0x20010904
 800cebc:	0800ce91 	.word	0x0800ce91
 800cec0:	2001091c 	.word	0x2001091c
 800cec4:	20010968 	.word	0x20010968

0800cec8 <sys_timeouts_init>:
{
 800cec8:	b538      	push	{r3, r4, r5, lr}
    sys_timeout(lwip_cyclic_timers[i].interval_ms, lwip_cyclic_timer, LWIP_CONST_CAST(void *, &lwip_cyclic_timers[i]));
 800ceca:	4d08      	ldr	r5, [pc, #32]	; (800ceec <sys_timeouts_init+0x24>)
 800cecc:	4c08      	ldr	r4, [pc, #32]	; (800cef0 <sys_timeouts_init+0x28>)
 800cece:	f105 0208 	add.w	r2, r5, #8
 800ced2:	4621      	mov	r1, r4
 800ced4:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800ced8:	f7ff ff9e 	bl	800ce18 <sys_timeout>
 800cedc:	f105 0210 	add.w	r2, r5, #16
 800cee0:	4621      	mov	r1, r4
 800cee2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800cee6:	f7ff ff97 	bl	800ce18 <sys_timeout>
}
 800ceea:	bd38      	pop	{r3, r4, r5, pc}
 800ceec:	08012608 	.word	0x08012608
 800cef0:	0800cde5 	.word	0x0800cde5

0800cef4 <sys_check_timeouts>:
 *
 * Must be called periodically from your main loop.
 */
void
sys_check_timeouts(void)
{
 800cef4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  /* Process only timers expired at the start of the function. */
  now = sys_now();
 800cef8:	f7f6 fb74 	bl	80035e4 <sys_now>
 800cefc:	4606      	mov	r6, r0
    sys_timeout_handler handler;
    void *arg;

    PBUF_CHECK_FREE_OOSEQ();

    tmptimeout = next_timeout;
 800cefe:	4c0d      	ldr	r4, [pc, #52]	; (800cf34 <sys_check_timeouts+0x40>)

    /* Timeout has expired */
    next_timeout = tmptimeout->next;
    handler = tmptimeout->h;
    arg = tmptimeout->arg;
    current_timeout_due_time = tmptimeout->time;
 800cf00:	f8df 8034 	ldr.w	r8, [pc, #52]	; 800cf38 <sys_check_timeouts+0x44>
    if (handler != NULL) {
      LWIP_DEBUGF(TIMERS_DEBUG, ("sct calling h=%s t=%"U32_F" arg=%p\n",
                                 tmptimeout->handler_name, sys_now() - tmptimeout->time, arg));
    }
#endif /* LWIP_DEBUG_TIMERNAMES */
    memp_free(MEMP_SYS_TIMEOUT, tmptimeout);
 800cf04:	270a      	movs	r7, #10
    tmptimeout = next_timeout;
 800cf06:	6821      	ldr	r1, [r4, #0]
    if (tmptimeout == NULL) {
 800cf08:	b191      	cbz	r1, 800cf30 <sys_check_timeouts+0x3c>
    if (TIME_LESS_THAN(now, tmptimeout->time)) {
 800cf0a:	684b      	ldr	r3, [r1, #4]
 800cf0c:	1af2      	subs	r2, r6, r3
 800cf0e:	2a00      	cmp	r2, #0
 800cf10:	db0e      	blt.n	800cf30 <sys_check_timeouts+0x3c>
    next_timeout = tmptimeout->next;
 800cf12:	680a      	ldr	r2, [r1, #0]
 800cf14:	6022      	str	r2, [r4, #0]
    handler = tmptimeout->h;
 800cf16:	688d      	ldr	r5, [r1, #8]
    arg = tmptimeout->arg;
 800cf18:	f8d1 900c 	ldr.w	r9, [r1, #12]
    current_timeout_due_time = tmptimeout->time;
 800cf1c:	f8c8 3000 	str.w	r3, [r8]
    memp_free(MEMP_SYS_TIMEOUT, tmptimeout);
 800cf20:	4638      	mov	r0, r7
 800cf22:	f7fb f92f 	bl	8008184 <memp_free>
    if (handler != NULL) {
 800cf26:	2d00      	cmp	r5, #0
 800cf28:	d0ed      	beq.n	800cf06 <sys_check_timeouts+0x12>
      handler(arg);
 800cf2a:	4648      	mov	r0, r9
 800cf2c:	47a8      	blx	r5
 800cf2e:	e7e9      	b.n	800cf04 <sys_check_timeouts+0x10>
    }
    LWIP_TCPIP_THREAD_ALIVE();

    /* Repeat until all expired timers have been called */
  } while (1);
}
 800cf30:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800cf34:	20010964 	.word	0x20010964
 800cf38:	20010960 	.word	0x20010960

0800cf3c <sys_timeouts_sleeptime>:
/** Return the time left before the next timeout is due. If no timeouts are
 * enqueued, returns 0xffffffff
 */
u32_t
sys_timeouts_sleeptime(void)
{
 800cf3c:	b510      	push	{r4, lr}
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  if (next_timeout == NULL) {
 800cf3e:	4b0d      	ldr	r3, [pc, #52]	; (800cf74 <sys_timeouts_sleeptime+0x38>)
 800cf40:	681b      	ldr	r3, [r3, #0]
 800cf42:	b183      	cbz	r3, 800cf66 <sys_timeouts_sleeptime+0x2a>
    return SYS_TIMEOUTS_SLEEPTIME_INFINITE;
  }
  now = sys_now();
 800cf44:	f7f6 fb4e 	bl	80035e4 <sys_now>
  if (TIME_LESS_THAN(next_timeout->time, now)) {
 800cf48:	4b0a      	ldr	r3, [pc, #40]	; (800cf74 <sys_timeouts_sleeptime+0x38>)
 800cf4a:	681b      	ldr	r3, [r3, #0]
 800cf4c:	685c      	ldr	r4, [r3, #4]
 800cf4e:	1a24      	subs	r4, r4, r0
 800cf50:	d40c      	bmi.n	800cf6c <sys_timeouts_sleeptime+0x30>
    return 0;
  } else {
    u32_t ret = (u32_t)(next_timeout->time - now);
    LWIP_ASSERT("invalid sleeptime", ret <= LWIP_MAX_TIMEOUT);
 800cf52:	2c00      	cmp	r4, #0
 800cf54:	da0b      	bge.n	800cf6e <sys_timeouts_sleeptime+0x32>
 800cf56:	4b08      	ldr	r3, [pc, #32]	; (800cf78 <sys_timeouts_sleeptime+0x3c>)
 800cf58:	f44f 72dc 	mov.w	r2, #440	; 0x1b8
 800cf5c:	4907      	ldr	r1, [pc, #28]	; (800cf7c <sys_timeouts_sleeptime+0x40>)
 800cf5e:	4808      	ldr	r0, [pc, #32]	; (800cf80 <sys_timeouts_sleeptime+0x44>)
 800cf60:	f002 f8c8 	bl	800f0f4 <iprintf>
 800cf64:	e003      	b.n	800cf6e <sys_timeouts_sleeptime+0x32>
    return SYS_TIMEOUTS_SLEEPTIME_INFINITE;
 800cf66:	f04f 34ff 	mov.w	r4, #4294967295
 800cf6a:	e000      	b.n	800cf6e <sys_timeouts_sleeptime+0x32>
    return 0;
 800cf6c:	2400      	movs	r4, #0
    return ret;
  }
}
 800cf6e:	4620      	mov	r0, r4
 800cf70:	bd10      	pop	{r4, pc}
 800cf72:	bf00      	nop
 800cf74:	20010964 	.word	0x20010964
 800cf78:	08012548 	.word	0x08012548
 800cf7c:	080125f4 	.word	0x080125f4
 800cf80:	080103a4 	.word	0x080103a4

0800cf84 <udp_init>:
/**
 * Initialize this module.
 */
void
udp_init(void)
{
 800cf84:	b508      	push	{r3, lr}
#ifdef LWIP_RAND
  udp_port = UDP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 800cf86:	f002 f8cd 	bl	800f124 <rand>
 800cf8a:	ea6f 4080 	mvn.w	r0, r0, lsl #18
 800cf8e:	ea6f 4090 	mvn.w	r0, r0, lsr #18
 800cf92:	4b01      	ldr	r3, [pc, #4]	; (800cf98 <udp_init+0x14>)
 800cf94:	8018      	strh	r0, [r3, #0]
#endif /* LWIP_RAND */
}
 800cf96:	bd08      	pop	{r3, pc}
 800cf98:	2000002a 	.word	0x2000002a

0800cf9c <udp_input>:
 * @param inp network interface on which the datagram was received.
 *
 */
void
udp_input(struct pbuf *p, struct netif *inp)
{
 800cf9c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cfa0:	b085      	sub	sp, #20
 800cfa2:	460e      	mov	r6, r1

  LWIP_UNUSED_ARG(inp);

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("udp_input: invalid pbuf", p != NULL);
 800cfa4:	4681      	mov	r9, r0
 800cfa6:	b300      	cbz	r0, 800cfea <udp_input+0x4e>
  LWIP_ASSERT("udp_input: invalid netif", inp != NULL);
 800cfa8:	b336      	cbz	r6, 800cff8 <udp_input+0x5c>
  PERF_START;

  UDP_STATS_INC(udp.recv);

  /* Check minimum length (UDP header) */
  if (p->len < UDP_HLEN) {
 800cfaa:	f8b9 300a 	ldrh.w	r3, [r9, #10]
 800cfae:	2b07      	cmp	r3, #7
 800cfb0:	d929      	bls.n	800d006 <udp_input+0x6a>
    MIB2_STATS_INC(mib2.udpinerrors);
    pbuf_free(p);
    goto end;
  }

  udphdr = (struct udp_hdr *)p->payload;
 800cfb2:	f8d9 4004 	ldr.w	r4, [r9, #4]

  /* is broadcast packet ? */
  broadcast = ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif());
 800cfb6:	4b68      	ldr	r3, [pc, #416]	; (800d158 <udp_input+0x1bc>)
 800cfb8:	6819      	ldr	r1, [r3, #0]
 800cfba:	6958      	ldr	r0, [r3, #20]
 800cfbc:	f001 f8b3 	bl	800e126 <ip4_addr_isbroadcast_u32>
 800cfc0:	4607      	mov	r7, r0

  LWIP_DEBUGF(UDP_DEBUG, ("udp_input: received datagram of length %"U16_F"\n", p->tot_len));

  /* convert src and dest ports to host byte order */
  src = lwip_ntohs(udphdr->src);
 800cfc2:	8820      	ldrh	r0, [r4, #0]
 800cfc4:	f7fa fd60 	bl	8007a88 <lwip_htons>
 800cfc8:	4682      	mov	sl, r0
  dest = lwip_ntohs(udphdr->dest);
 800cfca:	8860      	ldrh	r0, [r4, #2]
 800cfcc:	f7fa fd5c 	bl	8007a88 <lwip_htons>
 800cfd0:	4605      	mov	r5, r0
  uncon_pcb = NULL;
  /* Iterate through the UDP pcb list for a matching pcb.
   * 'Perfect match' pcbs (connected to the remote port & ip address) are
   * preferred. If no perfect match is found, the first unconnected pcb that
   * matches the local port and ip address gets the datagram. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 800cfd2:	4b62      	ldr	r3, [pc, #392]	; (800d15c <udp_input+0x1c0>)
 800cfd4:	681c      	ldr	r4, [r3, #0]
 800cfd6:	2c00      	cmp	r4, #0
 800cfd8:	f000 8088 	beq.w	800d0ec <udp_input+0x150>
  uncon_pcb = NULL;
 800cfdc:	f04f 0b00 	mov.w	fp, #0
  prev = NULL;
 800cfe0:	f8cd b00c 	str.w	fp, [sp, #12]
      }

      /* compare PCB remote addr+port to UDP source addr+port */
      if ((pcb->remote_port == src) &&
          (ip_addr_isany_val(pcb->remote_ip) ||
           ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()))) {
 800cfe4:	f8df 8170 	ldr.w	r8, [pc, #368]	; 800d158 <udp_input+0x1bc>
 800cfe8:	e02c      	b.n	800d044 <udp_input+0xa8>
  LWIP_ASSERT("udp_input: invalid pbuf", p != NULL);
 800cfea:	4b5d      	ldr	r3, [pc, #372]	; (800d160 <udp_input+0x1c4>)
 800cfec:	22cf      	movs	r2, #207	; 0xcf
 800cfee:	495d      	ldr	r1, [pc, #372]	; (800d164 <udp_input+0x1c8>)
 800cff0:	485d      	ldr	r0, [pc, #372]	; (800d168 <udp_input+0x1cc>)
 800cff2:	f002 f87f 	bl	800f0f4 <iprintf>
 800cff6:	e7d7      	b.n	800cfa8 <udp_input+0xc>
  LWIP_ASSERT("udp_input: invalid netif", inp != NULL);
 800cff8:	4b59      	ldr	r3, [pc, #356]	; (800d160 <udp_input+0x1c4>)
 800cffa:	22d0      	movs	r2, #208	; 0xd0
 800cffc:	495b      	ldr	r1, [pc, #364]	; (800d16c <udp_input+0x1d0>)
 800cffe:	485a      	ldr	r0, [pc, #360]	; (800d168 <udp_input+0x1cc>)
 800d000:	f002 f878 	bl	800f0f4 <iprintf>
 800d004:	e7d1      	b.n	800cfaa <udp_input+0xe>
    pbuf_free(p);
 800d006:	4648      	mov	r0, r9
 800d008:	f7fb fb7e 	bl	8008708 <pbuf_free>
  UDP_STATS_INC(udp.drop);
  MIB2_STATS_INC(mib2.udpinerrors);
  pbuf_free(p);
  PERF_STOP("udp_input");
#endif /* CHECKSUM_CHECK_UDP */
}
 800d00c:	b005      	add	sp, #20
 800d00e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  LWIP_ASSERT("udp_input_local_match: invalid netif", inp != NULL);
 800d012:	4b53      	ldr	r3, [pc, #332]	; (800d160 <udp_input+0x1c4>)
 800d014:	2288      	movs	r2, #136	; 0x88
 800d016:	4956      	ldr	r1, [pc, #344]	; (800d170 <udp_input+0x1d4>)
 800d018:	4853      	ldr	r0, [pc, #332]	; (800d168 <udp_input+0x1cc>)
 800d01a:	f002 f86b 	bl	800f0f4 <iprintf>
 800d01e:	e016      	b.n	800d04e <udp_input+0xb2>
      if (ip_addr_isany(&pcb->local_ip) || ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 800d020:	6823      	ldr	r3, [r4, #0]
 800d022:	b11b      	cbz	r3, 800d02c <udp_input+0x90>
 800d024:	f8d8 2014 	ldr.w	r2, [r8, #20]
 800d028:	4293      	cmp	r3, r2
 800d02a:	d106      	bne.n	800d03a <udp_input+0x9e>
      if ((pcb->flags & UDP_FLAGS_CONNECTED) == 0) {
 800d02c:	7c23      	ldrb	r3, [r4, #16]
 800d02e:	f013 0f04 	tst.w	r3, #4
 800d032:	d025      	beq.n	800d080 <udp_input+0xe4>
      if ((pcb->remote_port == src) &&
 800d034:	8aa3      	ldrh	r3, [r4, #20]
 800d036:	4553      	cmp	r3, sl
 800d038:	d038      	beq.n	800d0ac <udp_input+0x110>
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 800d03a:	68e3      	ldr	r3, [r4, #12]
 800d03c:	9403      	str	r4, [sp, #12]
 800d03e:	2b00      	cmp	r3, #0
 800d040:	d051      	beq.n	800d0e6 <udp_input+0x14a>
 800d042:	461c      	mov	r4, r3
    if ((pcb->local_port == dest) &&
 800d044:	8a63      	ldrh	r3, [r4, #18]
 800d046:	42ab      	cmp	r3, r5
 800d048:	d1f7      	bne.n	800d03a <udp_input+0x9e>
  LWIP_ASSERT("udp_input_local_match: invalid netif", inp != NULL);
 800d04a:	2e00      	cmp	r6, #0
 800d04c:	d0e1      	beq.n	800d012 <udp_input+0x76>
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800d04e:	7a22      	ldrb	r2, [r4, #8]
 800d050:	b13a      	cbz	r2, 800d062 <udp_input+0xc6>
      (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800d052:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800d056:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800d05a:	3301      	adds	r3, #1
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800d05c:	b2db      	uxtb	r3, r3
 800d05e:	429a      	cmp	r2, r3
 800d060:	d1eb      	bne.n	800d03a <udp_input+0x9e>
    if (broadcast != 0) {
 800d062:	2f00      	cmp	r7, #0
 800d064:	d0dc      	beq.n	800d020 <udp_input+0x84>
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 800d066:	6823      	ldr	r3, [r4, #0]
 800d068:	2b00      	cmp	r3, #0
 800d06a:	d0df      	beq.n	800d02c <udp_input+0x90>
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 800d06c:	f8d8 2014 	ldr.w	r2, [r8, #20]
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 800d070:	f1b2 3fff 	cmp.w	r2, #4294967295
 800d074:	d0da      	beq.n	800d02c <udp_input+0x90>
            ip4_addr_netcmp(ip_2_ip4(&pcb->local_ip), ip4_current_dest_addr(), netif_ip4_netmask(inp))) {
 800d076:	4053      	eors	r3, r2
 800d078:	68b2      	ldr	r2, [r6, #8]
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 800d07a:	4213      	tst	r3, r2
 800d07c:	d1dd      	bne.n	800d03a <udp_input+0x9e>
 800d07e:	e7d5      	b.n	800d02c <udp_input+0x90>
        if (uncon_pcb == NULL) {
 800d080:	f1bb 0f00 	cmp.w	fp, #0
 800d084:	d010      	beq.n	800d0a8 <udp_input+0x10c>
        } else if (broadcast && ip4_current_dest_addr()->addr == IPADDR_BROADCAST) {
 800d086:	2f00      	cmp	r7, #0
 800d088:	d0d4      	beq.n	800d034 <udp_input+0x98>
 800d08a:	f8d8 3014 	ldr.w	r3, [r8, #20]
 800d08e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d092:	d1cf      	bne.n	800d034 <udp_input+0x98>
          if (!IP_IS_V4_VAL(uncon_pcb->local_ip) || !ip4_addr_cmp(ip_2_ip4(&uncon_pcb->local_ip), netif_ip4_addr(inp))) {
 800d094:	6873      	ldr	r3, [r6, #4]
 800d096:	f8db 2000 	ldr.w	r2, [fp]
 800d09a:	429a      	cmp	r2, r3
 800d09c:	d0ca      	beq.n	800d034 <udp_input+0x98>
            if (IP_IS_V4_VAL(pcb->local_ip) && ip4_addr_cmp(ip_2_ip4(&pcb->local_ip), netif_ip4_addr(inp))) {
 800d09e:	6822      	ldr	r2, [r4, #0]
 800d0a0:	4293      	cmp	r3, r2
 800d0a2:	bf08      	it	eq
 800d0a4:	46a3      	moveq	fp, r4
 800d0a6:	e7c5      	b.n	800d034 <udp_input+0x98>
 800d0a8:	46a3      	mov	fp, r4
 800d0aa:	e7c3      	b.n	800d034 <udp_input+0x98>
          (ip_addr_isany_val(pcb->remote_ip) ||
 800d0ac:	6863      	ldr	r3, [r4, #4]
      if ((pcb->remote_port == src) &&
 800d0ae:	b11b      	cbz	r3, 800d0b8 <udp_input+0x11c>
          (ip_addr_isany_val(pcb->remote_ip) ||
 800d0b0:	f8d8 2010 	ldr.w	r2, [r8, #16]
 800d0b4:	4293      	cmp	r3, r2
 800d0b6:	d1c0      	bne.n	800d03a <udp_input+0x9e>
        if (prev != NULL) {
 800d0b8:	9a03      	ldr	r2, [sp, #12]
 800d0ba:	b12a      	cbz	r2, 800d0c8 <udp_input+0x12c>
          prev->next = pcb->next;
 800d0bc:	68e3      	ldr	r3, [r4, #12]
 800d0be:	60d3      	str	r3, [r2, #12]
          pcb->next = udp_pcbs;
 800d0c0:	4b26      	ldr	r3, [pc, #152]	; (800d15c <udp_input+0x1c0>)
 800d0c2:	681a      	ldr	r2, [r3, #0]
 800d0c4:	60e2      	str	r2, [r4, #12]
          udp_pcbs = pcb;
 800d0c6:	601c      	str	r4, [r3, #0]
    if (pbuf_remove_header(p, UDP_HLEN)) {
 800d0c8:	2108      	movs	r1, #8
 800d0ca:	4648      	mov	r0, r9
 800d0cc:	f7fb fadc 	bl	8008688 <pbuf_remove_header>
 800d0d0:	bb08      	cbnz	r0, 800d116 <udp_input+0x17a>
      if (pcb->recv != NULL) {
 800d0d2:	69a5      	ldr	r5, [r4, #24]
 800d0d4:	b355      	cbz	r5, 800d12c <udp_input+0x190>
        pcb->recv(pcb->recv_arg, pcb, p, ip_current_src_addr(), src);
 800d0d6:	69e0      	ldr	r0, [r4, #28]
 800d0d8:	f8cd a000 	str.w	sl, [sp]
 800d0dc:	4b25      	ldr	r3, [pc, #148]	; (800d174 <udp_input+0x1d8>)
 800d0de:	464a      	mov	r2, r9
 800d0e0:	4621      	mov	r1, r4
 800d0e2:	47a8      	blx	r5
 800d0e4:	e792      	b.n	800d00c <udp_input+0x70>
  if (pcb != NULL) {
 800d0e6:	f1bb 0f00 	cmp.w	fp, #0
 800d0ea:	d133      	bne.n	800d154 <udp_input+0x1b8>
  if (for_us) {
 800d0ec:	6872      	ldr	r2, [r6, #4]
 800d0ee:	4b1a      	ldr	r3, [pc, #104]	; (800d158 <udp_input+0x1bc>)
 800d0f0:	695b      	ldr	r3, [r3, #20]
 800d0f2:	429a      	cmp	r2, r3
 800d0f4:	d12a      	bne.n	800d14c <udp_input+0x1b0>
    if (pbuf_remove_header(p, UDP_HLEN)) {
 800d0f6:	2108      	movs	r1, #8
 800d0f8:	4648      	mov	r0, r9
 800d0fa:	f7fb fac5 	bl	8008688 <pbuf_remove_header>
 800d0fe:	b950      	cbnz	r0, 800d116 <udp_input+0x17a>
      if (!broadcast && !ip_addr_ismulticast(ip_current_dest_addr())) {
 800d100:	b92f      	cbnz	r7, 800d10e <udp_input+0x172>
 800d102:	4b15      	ldr	r3, [pc, #84]	; (800d158 <udp_input+0x1bc>)
 800d104:	695b      	ldr	r3, [r3, #20]
 800d106:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800d10a:	2be0      	cmp	r3, #224	; 0xe0
 800d10c:	d112      	bne.n	800d134 <udp_input+0x198>
      pbuf_free(p);
 800d10e:	4648      	mov	r0, r9
 800d110:	f7fb fafa 	bl	8008708 <pbuf_free>
 800d114:	e77a      	b.n	800d00c <udp_input+0x70>
      LWIP_ASSERT("pbuf_remove_header failed\n", 0);
 800d116:	4b12      	ldr	r3, [pc, #72]	; (800d160 <udp_input+0x1c4>)
 800d118:	f44f 72b8 	mov.w	r2, #368	; 0x170
 800d11c:	4916      	ldr	r1, [pc, #88]	; (800d178 <udp_input+0x1dc>)
 800d11e:	4812      	ldr	r0, [pc, #72]	; (800d168 <udp_input+0x1cc>)
 800d120:	f001 ffe8 	bl	800f0f4 <iprintf>
      pbuf_free(p);
 800d124:	4648      	mov	r0, r9
 800d126:	f7fb faef 	bl	8008708 <pbuf_free>
      goto end;
 800d12a:	e76f      	b.n	800d00c <udp_input+0x70>
        pbuf_free(p);
 800d12c:	4648      	mov	r0, r9
 800d12e:	f7fb faeb 	bl	8008708 <pbuf_free>
        goto end;
 800d132:	e76b      	b.n	800d00c <udp_input+0x70>
        pbuf_header_force(p, (s16_t)(ip_current_header_tot_len() + UDP_HLEN));
 800d134:	4b08      	ldr	r3, [pc, #32]	; (800d158 <udp_input+0x1bc>)
 800d136:	8999      	ldrh	r1, [r3, #12]
 800d138:	3108      	adds	r1, #8
 800d13a:	b209      	sxth	r1, r1
 800d13c:	4648      	mov	r0, r9
 800d13e:	f7fb fad7 	bl	80086f0 <pbuf_header_force>
        icmp_port_unreach(ip_current_is_v6(), p);
 800d142:	2103      	movs	r1, #3
 800d144:	4648      	mov	r0, r9
 800d146:	f000 fe25 	bl	800dd94 <icmp_dest_unreach>
 800d14a:	e7e0      	b.n	800d10e <udp_input+0x172>
    pbuf_free(p);
 800d14c:	4648      	mov	r0, r9
 800d14e:	f7fb fadb 	bl	8008708 <pbuf_free>
  return;
 800d152:	e75b      	b.n	800d00c <udp_input+0x70>
 800d154:	465c      	mov	r4, fp
 800d156:	e7b7      	b.n	800d0c8 <udp_input+0x12c>
 800d158:	2000aff0 	.word	0x2000aff0
 800d15c:	2001096c 	.word	0x2001096c
 800d160:	08012620 	.word	0x08012620
 800d164:	08012650 	.word	0x08012650
 800d168:	080103a4 	.word	0x080103a4
 800d16c:	08012668 	.word	0x08012668
 800d170:	08012684 	.word	0x08012684
 800d174:	2000b000 	.word	0x2000b000
 800d178:	080126ac 	.word	0x080126ac

0800d17c <udp_bind>:
 *
 * @see udp_disconnect()
 */
err_t
udp_bind(struct udp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 800d17c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  LWIP_ASSERT_CORE_LOCKED();

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
    ipaddr = IP4_ADDR_ANY;
 800d17e:	4d3c      	ldr	r5, [pc, #240]	; (800d270 <udp_bind+0xf4>)
 800d180:	2900      	cmp	r1, #0
 800d182:	bf18      	it	ne
 800d184:	460d      	movne	r5, r1
  }
#else /* LWIP_IPV4 */
  LWIP_ERROR("udp_bind: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
#endif /* LWIP_IPV4 */

  LWIP_ERROR("udp_bind: invalid pcb", pcb != NULL, return ERR_ARG);
 800d186:	b168      	cbz	r0, 800d1a4 <udp_bind+0x28>
 800d188:	4604      	mov	r4, r0
  ip_addr_debug_print(UDP_DEBUG | LWIP_DBG_TRACE, ipaddr);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, (", port = %"U16_F")\n", port));

  rebind = 0;
  /* Check for double bind and rebind of the same pcb */
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 800d18a:	4b3a      	ldr	r3, [pc, #232]	; (800d274 <udp_bind+0xf8>)
 800d18c:	681b      	ldr	r3, [r3, #0]
 800d18e:	2b00      	cmp	r3, #0
 800d190:	d05c      	beq.n	800d24c <udp_bind+0xd0>
    /* is this UDP PCB already on active list? */
    if (pcb == ipcb) {
 800d192:	4298      	cmp	r0, r3
 800d194:	d05d      	beq.n	800d252 <udp_bind+0xd6>
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 800d196:	4619      	mov	r1, r3
 800d198:	68c9      	ldr	r1, [r1, #12]
 800d19a:	b169      	cbz	r1, 800d1b8 <udp_bind+0x3c>
    if (pcb == ipcb) {
 800d19c:	428c      	cmp	r4, r1
 800d19e:	d1fb      	bne.n	800d198 <udp_bind+0x1c>
      rebind = 1;
 800d1a0:	2701      	movs	r7, #1
 800d1a2:	e00a      	b.n	800d1ba <udp_bind+0x3e>
  LWIP_ERROR("udp_bind: invalid pcb", pcb != NULL, return ERR_ARG);
 800d1a4:	4b34      	ldr	r3, [pc, #208]	; (800d278 <udp_bind+0xfc>)
 800d1a6:	f240 32b7 	movw	r2, #951	; 0x3b7
 800d1aa:	4934      	ldr	r1, [pc, #208]	; (800d27c <udp_bind+0x100>)
 800d1ac:	4834      	ldr	r0, [pc, #208]	; (800d280 <udp_bind+0x104>)
 800d1ae:	f001 ffa1 	bl	800f0f4 <iprintf>
 800d1b2:	f06f 000f 	mvn.w	r0, #15
 800d1b6:	e056      	b.n	800d266 <udp_bind+0xea>
  rebind = 0;
 800d1b8:	2700      	movs	r7, #0
    ipaddr = &zoned_ipaddr;
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  /* no port specified? */
  if (port == 0) {
 800d1ba:	2a00      	cmp	r2, #0
 800d1bc:	d12f      	bne.n	800d21e <udp_bind+0xa2>
 800d1be:	4a31      	ldr	r2, [pc, #196]	; (800d284 <udp_bind+0x108>)
 800d1c0:	8810      	ldrh	r0, [r2, #0]
  rebind = 0;
 800d1c2:	f44f 4680 	mov.w	r6, #16384	; 0x4000
  if (udp_port++ == UDP_LOCAL_PORT_RANGE_END) {
 800d1c6:	f64f 7cff 	movw	ip, #65535	; 0xffff
    udp_port = UDP_LOCAL_PORT_RANGE_START;
 800d1ca:	f44f 4e40 	mov.w	lr, #49152	; 0xc000
  if (udp_port++ == UDP_LOCAL_PORT_RANGE_END) {
 800d1ce:	4560      	cmp	r0, ip
 800d1d0:	bf1a      	itte	ne
 800d1d2:	3001      	addne	r0, #1
 800d1d4:	b280      	uxthne	r0, r0
    udp_port = UDP_LOCAL_PORT_RANGE_START;
 800d1d6:	4670      	moveq	r0, lr
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 800d1d8:	b1db      	cbz	r3, 800d212 <udp_bind+0x96>
 800d1da:	461a      	mov	r2, r3
    if (pcb->local_port == udp_port) {
 800d1dc:	8a51      	ldrh	r1, [r2, #18]
 800d1de:	4281      	cmp	r1, r0
 800d1e0:	d00e      	beq.n	800d200 <udp_bind+0x84>
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 800d1e2:	68d2      	ldr	r2, [r2, #12]
 800d1e4:	2a00      	cmp	r2, #0
 800d1e6:	d1f9      	bne.n	800d1dc <udp_bind+0x60>
 800d1e8:	4b26      	ldr	r3, [pc, #152]	; (800d284 <udp_bind+0x108>)
 800d1ea:	8018      	strh	r0, [r3, #0]
  return udp_port;
 800d1ec:	4b25      	ldr	r3, [pc, #148]	; (800d284 <udp_bind+0x108>)
 800d1ee:	881a      	ldrh	r2, [r3, #0]
        }
      }
    }
  }

  ip_addr_set_ipaddr(&pcb->local_ip, ipaddr);
 800d1f0:	b325      	cbz	r5, 800d23c <udp_bind+0xc0>
 800d1f2:	682b      	ldr	r3, [r5, #0]
 800d1f4:	6023      	str	r3, [r4, #0]

  pcb->local_port = port;
 800d1f6:	8262      	strh	r2, [r4, #18]
  mib2_udp_bind(pcb);
  /* pcb not active yet? */
  if (rebind == 0) {
 800d1f8:	2f00      	cmp	r7, #0
 800d1fa:	d02f      	beq.n	800d25c <udp_bind+0xe0>
    udp_pcbs = pcb;
  }
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("udp_bind: bound to "));
  ip_addr_debug_print_val(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, pcb->local_ip);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, (", port %"U16_F")\n", pcb->local_port));
  return ERR_OK;
 800d1fc:	2000      	movs	r0, #0
 800d1fe:	e032      	b.n	800d266 <udp_bind+0xea>
      if (++n > (UDP_LOCAL_PORT_RANGE_END - UDP_LOCAL_PORT_RANGE_START)) {
 800d200:	3e01      	subs	r6, #1
 800d202:	b2b6      	uxth	r6, r6
 800d204:	2e00      	cmp	r6, #0
 800d206:	d1e2      	bne.n	800d1ce <udp_bind+0x52>
 800d208:	4b1e      	ldr	r3, [pc, #120]	; (800d284 <udp_bind+0x108>)
 800d20a:	8018      	strh	r0, [r3, #0]
      return ERR_USE;
 800d20c:	f06f 0007 	mvn.w	r0, #7
 800d210:	e029      	b.n	800d266 <udp_bind+0xea>
 800d212:	4b1c      	ldr	r3, [pc, #112]	; (800d284 <udp_bind+0x108>)
 800d214:	8018      	strh	r0, [r3, #0]
 800d216:	e7e9      	b.n	800d1ec <udp_bind+0x70>
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 800d218:	68db      	ldr	r3, [r3, #12]
 800d21a:	2b00      	cmp	r3, #0
 800d21c:	d0e8      	beq.n	800d1f0 <udp_bind+0x74>
      if (pcb != ipcb) {
 800d21e:	429c      	cmp	r4, r3
 800d220:	d0fa      	beq.n	800d218 <udp_bind+0x9c>
          if ((ipcb->local_port == port) &&
 800d222:	8a59      	ldrh	r1, [r3, #18]
 800d224:	4291      	cmp	r1, r2
 800d226:	d1f7      	bne.n	800d218 <udp_bind+0x9c>
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 800d228:	6818      	ldr	r0, [r3, #0]
 800d22a:	6829      	ldr	r1, [r5, #0]
          if ((ipcb->local_port == port) &&
 800d22c:	4288      	cmp	r0, r1
 800d22e:	d007      	beq.n	800d240 <udp_bind+0xc4>
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 800d230:	b149      	cbz	r1, 800d246 <udp_bind+0xca>
              ip_addr_isany(&ipcb->local_ip))) {
 800d232:	2800      	cmp	r0, #0
 800d234:	d1f0      	bne.n	800d218 <udp_bind+0x9c>
            return ERR_USE;
 800d236:	f06f 0007 	mvn.w	r0, #7
 800d23a:	e014      	b.n	800d266 <udp_bind+0xea>
  ip_addr_set_ipaddr(&pcb->local_ip, ipaddr);
 800d23c:	2300      	movs	r3, #0
 800d23e:	e7d9      	b.n	800d1f4 <udp_bind+0x78>
            return ERR_USE;
 800d240:	f06f 0007 	mvn.w	r0, #7
 800d244:	e00f      	b.n	800d266 <udp_bind+0xea>
 800d246:	f06f 0007 	mvn.w	r0, #7
 800d24a:	e00c      	b.n	800d266 <udp_bind+0xea>
  if (port == 0) {
 800d24c:	b962      	cbnz	r2, 800d268 <udp_bind+0xec>
  rebind = 0;
 800d24e:	2700      	movs	r7, #0
 800d250:	e7b5      	b.n	800d1be <udp_bind+0x42>
      rebind = 1;
 800d252:	2701      	movs	r7, #1
 800d254:	e7b1      	b.n	800d1ba <udp_bind+0x3e>
  ip_addr_set_ipaddr(&pcb->local_ip, ipaddr);
 800d256:	2300      	movs	r3, #0
 800d258:	6023      	str	r3, [r4, #0]
  pcb->local_port = port;
 800d25a:	8262      	strh	r2, [r4, #18]
    pcb->next = udp_pcbs;
 800d25c:	4b05      	ldr	r3, [pc, #20]	; (800d274 <udp_bind+0xf8>)
 800d25e:	681a      	ldr	r2, [r3, #0]
 800d260:	60e2      	str	r2, [r4, #12]
    udp_pcbs = pcb;
 800d262:	601c      	str	r4, [r3, #0]
  return ERR_OK;
 800d264:	2000      	movs	r0, #0
}
 800d266:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  ip_addr_set_ipaddr(&pcb->local_ip, ipaddr);
 800d268:	2d00      	cmp	r5, #0
 800d26a:	d0f4      	beq.n	800d256 <udp_bind+0xda>
  rebind = 0;
 800d26c:	2700      	movs	r7, #0
 800d26e:	e7c0      	b.n	800d1f2 <udp_bind+0x76>
 800d270:	080129f0 	.word	0x080129f0
 800d274:	2001096c 	.word	0x2001096c
 800d278:	08012620 	.word	0x08012620
 800d27c:	080126c8 	.word	0x080126c8
 800d280:	080103a4 	.word	0x080103a4
 800d284:	2000002a 	.word	0x2000002a

0800d288 <udp_recv>:
 * @param recv function pointer of the callback function
 * @param recv_arg additional argument to pass to the callback function
 */
void
udp_recv(struct udp_pcb *pcb, udp_recv_fn recv, void *recv_arg)
{
 800d288:	b508      	push	{r3, lr}
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_recv: invalid pcb", pcb != NULL, return);
 800d28a:	b110      	cbz	r0, 800d292 <udp_recv+0xa>

  /* remember recv() callback and user data */
  pcb->recv = recv;
 800d28c:	6181      	str	r1, [r0, #24]
  pcb->recv_arg = recv_arg;
 800d28e:	61c2      	str	r2, [r0, #28]
}
 800d290:	bd08      	pop	{r3, pc}
  LWIP_ERROR("udp_recv: invalid pcb", pcb != NULL, return);
 800d292:	4b04      	ldr	r3, [pc, #16]	; (800d2a4 <udp_recv+0x1c>)
 800d294:	f240 428a 	movw	r2, #1162	; 0x48a
 800d298:	4903      	ldr	r1, [pc, #12]	; (800d2a8 <udp_recv+0x20>)
 800d29a:	4804      	ldr	r0, [pc, #16]	; (800d2ac <udp_recv+0x24>)
 800d29c:	f001 ff2a 	bl	800f0f4 <iprintf>
 800d2a0:	e7f6      	b.n	800d290 <udp_recv+0x8>
 800d2a2:	bf00      	nop
 800d2a4:	08012620 	.word	0x08012620
 800d2a8:	080126e0 	.word	0x080126e0
 800d2ac:	080103a4 	.word	0x080103a4

0800d2b0 <udp_remove>:
 *
 * @see udp_new()
 */
void
udp_remove(struct udp_pcb *pcb)
{
 800d2b0:	b508      	push	{r3, lr}
  struct udp_pcb *pcb2;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_remove: invalid pcb", pcb != NULL, return);
 800d2b2:	b168      	cbz	r0, 800d2d0 <udp_remove+0x20>
 800d2b4:	4601      	mov	r1, r0

  mib2_udp_unbind(pcb);
  /* pcb to be removed is first in list? */
  if (udp_pcbs == pcb) {
 800d2b6:	4b0e      	ldr	r3, [pc, #56]	; (800d2f0 <udp_remove+0x40>)
 800d2b8:	681b      	ldr	r3, [r3, #0]
 800d2ba:	4283      	cmp	r3, r0
 800d2bc:	d010      	beq.n	800d2e0 <udp_remove+0x30>
    /* make list start at 2nd pcb */
    udp_pcbs = udp_pcbs->next;
    /* pcb not 1st in list */
  } else {
    for (pcb2 = udp_pcbs; pcb2 != NULL; pcb2 = pcb2->next) {
 800d2be:	b193      	cbz	r3, 800d2e6 <udp_remove+0x36>
      /* find pcb in udp_pcbs list */
      if (pcb2->next != NULL && pcb2->next == pcb) {
 800d2c0:	461a      	mov	r2, r3
 800d2c2:	68db      	ldr	r3, [r3, #12]
 800d2c4:	b17b      	cbz	r3, 800d2e6 <udp_remove+0x36>
 800d2c6:	428b      	cmp	r3, r1
 800d2c8:	d1fa      	bne.n	800d2c0 <udp_remove+0x10>
        /* remove pcb from list */
        pcb2->next = pcb->next;
 800d2ca:	68cb      	ldr	r3, [r1, #12]
 800d2cc:	60d3      	str	r3, [r2, #12]
        break;
 800d2ce:	e00a      	b.n	800d2e6 <udp_remove+0x36>
  LWIP_ERROR("udp_remove: invalid pcb", pcb != NULL, return);
 800d2d0:	4b08      	ldr	r3, [pc, #32]	; (800d2f4 <udp_remove+0x44>)
 800d2d2:	f240 42a1 	movw	r2, #1185	; 0x4a1
 800d2d6:	4908      	ldr	r1, [pc, #32]	; (800d2f8 <udp_remove+0x48>)
 800d2d8:	4808      	ldr	r0, [pc, #32]	; (800d2fc <udp_remove+0x4c>)
 800d2da:	f001 ff0b 	bl	800f0f4 <iprintf>
 800d2de:	e005      	b.n	800d2ec <udp_remove+0x3c>
    udp_pcbs = udp_pcbs->next;
 800d2e0:	68c2      	ldr	r2, [r0, #12]
 800d2e2:	4b03      	ldr	r3, [pc, #12]	; (800d2f0 <udp_remove+0x40>)
 800d2e4:	601a      	str	r2, [r3, #0]
      }
    }
  }
  memp_free(MEMP_UDP_PCB, pcb);
 800d2e6:	2000      	movs	r0, #0
 800d2e8:	f7fa ff4c 	bl	8008184 <memp_free>
}
 800d2ec:	bd08      	pop	{r3, pc}
 800d2ee:	bf00      	nop
 800d2f0:	2001096c 	.word	0x2001096c
 800d2f4:	08012620 	.word	0x08012620
 800d2f8:	080126f8 	.word	0x080126f8
 800d2fc:	080103a4 	.word	0x080103a4

0800d300 <udp_new>:
 *
 * @see udp_remove()
 */
struct udp_pcb *
udp_new(void)
{
 800d300:	b510      	push	{r4, lr}
  struct udp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct udp_pcb *)memp_malloc(MEMP_UDP_PCB);
 800d302:	2000      	movs	r0, #0
 800d304:	f7fa ff0e 	bl	8008124 <memp_malloc>
  /* could allocate UDP PCB? */
  if (pcb != NULL) {
 800d308:	4604      	mov	r4, r0
 800d30a:	b128      	cbz	r0, 800d318 <udp_new+0x18>
    /* UDP Lite: by initializing to all zeroes, chksum_len is set to 0
     * which means checksum is generated over the whole datagram per default
     * (recommended as default by RFC 3828). */
    /* initialize PCB to all zeroes */
    memset(pcb, 0, sizeof(struct udp_pcb));
 800d30c:	2220      	movs	r2, #32
 800d30e:	2100      	movs	r1, #0
 800d310:	f001 fe53 	bl	800efba <memset>
    pcb->ttl = UDP_TTL;
 800d314:	23ff      	movs	r3, #255	; 0xff
 800d316:	72e3      	strb	r3, [r4, #11]
#if LWIP_MULTICAST_TX_OPTIONS
    udp_set_multicast_ttl(pcb, UDP_TTL);
#endif /* LWIP_MULTICAST_TX_OPTIONS */
  }
  return pcb;
}
 800d318:	4620      	mov	r0, r4
 800d31a:	bd10      	pop	{r4, pc}

0800d31c <udp_new_ip_type>:
 *
 * @see udp_remove()
 */
struct udp_pcb *
udp_new_ip_type(u8_t type)
{
 800d31c:	b508      	push	{r3, lr}
  struct udp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = udp_new();
 800d31e:	f7ff ffef 	bl	800d300 <udp_new>
  }
#else
  LWIP_UNUSED_ARG(type);
#endif /* LWIP_IPV4 && LWIP_IPV6 */
  return pcb;
}
 800d322:	bd08      	pop	{r3, pc}

0800d324 <udp_netif_ip_addr_changed>:
 */
void udp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
  struct udp_pcb *upcb;

  if (!ip_addr_isany(old_addr) && !ip_addr_isany(new_addr)) {
 800d324:	b1a8      	cbz	r0, 800d352 <udp_netif_ip_addr_changed+0x2e>
 800d326:	4602      	mov	r2, r0
 800d328:	6803      	ldr	r3, [r0, #0]
 800d32a:	b193      	cbz	r3, 800d352 <udp_netif_ip_addr_changed+0x2e>
 800d32c:	b189      	cbz	r1, 800d352 <udp_netif_ip_addr_changed+0x2e>
 800d32e:	680b      	ldr	r3, [r1, #0]
 800d330:	b17b      	cbz	r3, 800d352 <udp_netif_ip_addr_changed+0x2e>
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 800d332:	4b08      	ldr	r3, [pc, #32]	; (800d354 <udp_netif_ip_addr_changed+0x30>)
 800d334:	681b      	ldr	r3, [r3, #0]
 800d336:	b163      	cbz	r3, 800d352 <udp_netif_ip_addr_changed+0x2e>
{
 800d338:	b410      	push	{r4}
      /* PCB bound to current local interface address? */
      if (ip_addr_cmp(&upcb->local_ip, old_addr)) {
 800d33a:	6810      	ldr	r0, [r2, #0]
 800d33c:	681c      	ldr	r4, [r3, #0]
 800d33e:	4284      	cmp	r4, r0
        /* The PCB is bound to the old ipaddr and
         * is set to bound to the new one instead */
        ip_addr_copy(upcb->local_ip, *new_addr);
 800d340:	bf04      	itt	eq
 800d342:	6808      	ldreq	r0, [r1, #0]
 800d344:	6018      	streq	r0, [r3, #0]
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 800d346:	68db      	ldr	r3, [r3, #12]
 800d348:	2b00      	cmp	r3, #0
 800d34a:	d1f6      	bne.n	800d33a <udp_netif_ip_addr_changed+0x16>
      }
    }
  }
}
 800d34c:	f85d 4b04 	ldr.w	r4, [sp], #4
 800d350:	4770      	bx	lr
 800d352:	4770      	bx	lr
 800d354:	2001096c 	.word	0x2001096c

0800d358 <etharp_free_entry>:
#endif /* ARP_QUEUEING */

/** Clean up ARP table entries */
static void
etharp_free_entry(int i)
{
 800d358:	b510      	push	{r4, lr}
 800d35a:	4604      	mov	r4, r0
  /* remove from SNMP ARP index tree */
  mib2_remove_arp_entry(arp_table[i].netif, &arp_table[i].ipaddr);
  /* and empty packet queue */
  if (arp_table[i].q != NULL) {
 800d35c:	eb00 0240 	add.w	r2, r0, r0, lsl #1
 800d360:	4b09      	ldr	r3, [pc, #36]	; (800d388 <etharp_free_entry+0x30>)
 800d362:	f853 0032 	ldr.w	r0, [r3, r2, lsl #3]
 800d366:	b138      	cbz	r0, 800d378 <etharp_free_entry+0x20>
    /* remove all queued packets */
    LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_free_entry: freeing entry %"U16_F", packet queue %p.\n", (u16_t)i, (void *)(arp_table[i].q)));
    free_etharp_q(arp_table[i].q);
 800d368:	f7fb f9ce 	bl	8008708 <pbuf_free>
    arp_table[i].q = NULL;
 800d36c:	eb04 0344 	add.w	r3, r4, r4, lsl #1
 800d370:	00db      	lsls	r3, r3, #3
 800d372:	4a05      	ldr	r2, [pc, #20]	; (800d388 <etharp_free_entry+0x30>)
 800d374:	2100      	movs	r1, #0
 800d376:	50d1      	str	r1, [r2, r3]
  }
  /* recycle entry for re-use */
  arp_table[i].state = ETHARP_STATE_EMPTY;
 800d378:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 800d37c:	4802      	ldr	r0, [pc, #8]	; (800d388 <etharp_free_entry+0x30>)
 800d37e:	eb00 04c4 	add.w	r4, r0, r4, lsl #3
 800d382:	2300      	movs	r3, #0
 800d384:	7523      	strb	r3, [r4, #20]
  arp_table[i].ctime = 0;
  arp_table[i].netif = NULL;
  ip4_addr_set_zero(&arp_table[i].ipaddr);
  arp_table[i].ethaddr = ethzero;
#endif /* LWIP_DEBUG */
}
 800d386:	bd10      	pop	{r4, pc}
 800d388:	20010970 	.word	0x20010970

0800d38c <etharp_find_entry>:
 * @return The ARP entry index that matched or is created, ERR_MEM if no
 * entry is found or could be recycled.
 */
static s16_t
etharp_find_entry(const ip4_addr_t *ipaddr, u8_t flags, struct netif *netif)
{
 800d38c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d390:	b085      	sub	sp, #20
 800d392:	4606      	mov	r6, r0
 800d394:	4617      	mov	r7, r2
   * 4) remember the oldest pending entry with queued packets (if any)
   * 5) search for a matching IP entry, either pending or stable
   *    until 5 matches, or all entries are searched for.
   */

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800d396:	4c4f      	ldr	r4, [pc, #316]	; (800d4d4 <etharp_find_entry+0x148>)
{
 800d398:	2300      	movs	r3, #0
  u16_t age_queue = 0, age_pending = 0, age_stable = 0;
 800d39a:	4699      	mov	r9, r3
 800d39c:	9302      	str	r3, [sp, #8]
 800d39e:	469b      	mov	fp, r3
  s16_t old_queue = ARP_TABLE_SIZE;
 800d3a0:	200a      	movs	r0, #10
  s16_t empty = ARP_TABLE_SIZE;
 800d3a2:	4605      	mov	r5, r0
  s16_t old_pending = ARP_TABLE_SIZE, old_stable = ARP_TABLE_SIZE;
 800d3a4:	4680      	mov	r8, r0
 800d3a6:	9003      	str	r0, [sp, #12]
 800d3a8:	4682      	mov	sl, r0
 800d3aa:	9101      	str	r1, [sp, #4]
 800d3ac:	e007      	b.n	800d3be <etharp_find_entry+0x32>
    u8_t state = arp_table[i].state;
    /* no empty entry found yet and now we do find one? */
    if ((empty == ARP_TABLE_SIZE) && (state == ETHARP_STATE_EMPTY)) {
 800d3ae:	f1bc 0f00 	cmp.w	ip, #0
 800d3b2:	d10e      	bne.n	800d3d2 <etharp_find_entry+0x46>
 800d3b4:	4675      	mov	r5, lr
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800d3b6:	3301      	adds	r3, #1
 800d3b8:	3418      	adds	r4, #24
 800d3ba:	2b0a      	cmp	r3, #10
 800d3bc:	d02e      	beq.n	800d41c <etharp_find_entry+0x90>
 800d3be:	fa0f fe83 	sxth.w	lr, r3
    u8_t state = arp_table[i].state;
 800d3c2:	4622      	mov	r2, r4
 800d3c4:	f894 c014 	ldrb.w	ip, [r4, #20]
    if ((empty == ARP_TABLE_SIZE) && (state == ETHARP_STATE_EMPTY)) {
 800d3c8:	2d0a      	cmp	r5, #10
 800d3ca:	d0f0      	beq.n	800d3ae <etharp_find_entry+0x22>
      LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_find_entry: found empty entry %d\n", (int)i));
      /* remember first empty entry */
      empty = i;
    } else if (state != ETHARP_STATE_EMPTY) {
 800d3cc:	f1bc 0f00 	cmp.w	ip, #0
 800d3d0:	d0f1      	beq.n	800d3b6 <etharp_find_entry+0x2a>
      LWIP_ASSERT("state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE",
                  state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE);
      /* if given, does IP address match IP address in ARP entry? */
      if (ipaddr && ip4_addr_cmp(ipaddr, &arp_table[i].ipaddr)
 800d3d2:	b11e      	cbz	r6, 800d3dc <etharp_find_entry+0x50>
 800d3d4:	6831      	ldr	r1, [r6, #0]
 800d3d6:	6850      	ldr	r0, [r2, #4]
 800d3d8:	4281      	cmp	r1, r0
 800d3da:	d008      	beq.n	800d3ee <etharp_find_entry+0x62>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: found matching entry %d\n", (int)i));
        /* found exact IP address match, simply bail out */
        return i;
      }
      /* pending entry? */
      if (state == ETHARP_STATE_PENDING) {
 800d3dc:	f1bc 0f01 	cmp.w	ip, #1
 800d3e0:	d00c      	beq.n	800d3fc <etharp_find_entry+0x70>
        /* don't record old_stable for static entries since they never expire */
        if (state < ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
        {
          /* remember entry with oldest stable entry in oldest, its age in maxtime */
          if (arp_table[i].ctime >= age_stable) {
 800d3e2:	8a52      	ldrh	r2, [r2, #18]
 800d3e4:	454a      	cmp	r2, r9
 800d3e6:	d3e6      	bcc.n	800d3b6 <etharp_find_entry+0x2a>
            old_stable = i;
            age_stable = arp_table[i].ctime;
 800d3e8:	4691      	mov	r9, r2
          if (arp_table[i].ctime >= age_stable) {
 800d3ea:	46f0      	mov	r8, lr
 800d3ec:	e7e3      	b.n	800d3b6 <etharp_find_entry+0x2a>
          && ((netif == NULL) || (netif == arp_table[i].netif))
 800d3ee:	2f00      	cmp	r7, #0
 800d3f0:	d064      	beq.n	800d4bc <etharp_find_entry+0x130>
 800d3f2:	6891      	ldr	r1, [r2, #8]
 800d3f4:	42b9      	cmp	r1, r7
 800d3f6:	d1f1      	bne.n	800d3dc <etharp_find_entry+0x50>
 800d3f8:	4675      	mov	r5, lr
 800d3fa:	e031      	b.n	800d460 <etharp_find_entry+0xd4>
        if (arp_table[i].q != NULL) {
 800d3fc:	6811      	ldr	r1, [r2, #0]
 800d3fe:	b129      	cbz	r1, 800d40c <etharp_find_entry+0x80>
          if (arp_table[i].ctime >= age_queue) {
 800d400:	8a52      	ldrh	r2, [r2, #18]
 800d402:	455a      	cmp	r2, fp
 800d404:	d3d7      	bcc.n	800d3b6 <etharp_find_entry+0x2a>
            age_queue = arp_table[i].ctime;
 800d406:	4693      	mov	fp, r2
          if (arp_table[i].ctime >= age_queue) {
 800d408:	46f2      	mov	sl, lr
 800d40a:	e7d4      	b.n	800d3b6 <etharp_find_entry+0x2a>
          if (arp_table[i].ctime >= age_pending) {
 800d40c:	8a52      	ldrh	r2, [r2, #18]
 800d40e:	9902      	ldr	r1, [sp, #8]
 800d410:	428a      	cmp	r2, r1
 800d412:	d3d0      	bcc.n	800d3b6 <etharp_find_entry+0x2a>
            age_pending = arp_table[i].ctime;
 800d414:	9202      	str	r2, [sp, #8]
          if (arp_table[i].ctime >= age_pending) {
 800d416:	f8cd e00c 	str.w	lr, [sp, #12]
 800d41a:	e7cc      	b.n	800d3b6 <etharp_find_entry+0x2a>
    }
  }
  /* { we have no match } => try to create a new entry */

  /* don't create new entry, only search? */
  if (((flags & ETHARP_FLAG_FIND_ONLY) != 0) ||
 800d41c:	4650      	mov	r0, sl
 800d41e:	9901      	ldr	r1, [sp, #4]
 800d420:	f011 0f02 	tst.w	r1, #2
 800d424:	d14c      	bne.n	800d4c0 <etharp_find_entry+0x134>
 800d426:	2d0a      	cmp	r5, #10
 800d428:	d01e      	beq.n	800d468 <etharp_find_entry+0xdc>
   *
   * { ETHARP_FLAG_TRY_HARD is set at this point }
   */

  /* 1) empty entry available? */
  if (empty < ARP_TABLE_SIZE) {
 800d42a:	2d09      	cmp	r5, #9
 800d42c:	dc1f      	bgt.n	800d46e <etharp_find_entry+0xe2>
    LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
    etharp_free_entry(i);
  }

  LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
  LWIP_ASSERT("arp_table[i].state == ETHARP_STATE_EMPTY",
 800d42e:	462c      	mov	r4, r5
 800d430:	eb05 0345 	add.w	r3, r5, r5, lsl #1
 800d434:	4a27      	ldr	r2, [pc, #156]	; (800d4d4 <etharp_find_entry+0x148>)
 800d436:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800d43a:	7d1b      	ldrb	r3, [r3, #20]
 800d43c:	2b00      	cmp	r3, #0
 800d43e:	d135      	bne.n	800d4ac <etharp_find_entry+0x120>
              arp_table[i].state == ETHARP_STATE_EMPTY);

  /* IP address given? */
  if (ipaddr != NULL) {
 800d440:	b136      	cbz	r6, 800d450 <etharp_find_entry+0xc4>
    /* set IP address */
    ip4_addr_copy(arp_table[i].ipaddr, *ipaddr);
 800d442:	6831      	ldr	r1, [r6, #0]
 800d444:	eb04 0344 	add.w	r3, r4, r4, lsl #1
 800d448:	4a22      	ldr	r2, [pc, #136]	; (800d4d4 <etharp_find_entry+0x148>)
 800d44a:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800d44e:	6059      	str	r1, [r3, #4]
  }
  arp_table[i].ctime = 0;
 800d450:	4b20      	ldr	r3, [pc, #128]	; (800d4d4 <etharp_find_entry+0x148>)
 800d452:	eb04 0244 	add.w	r2, r4, r4, lsl #1
 800d456:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
 800d45a:	2100      	movs	r1, #0
 800d45c:	8251      	strh	r1, [r2, #18]
#if ETHARP_TABLE_MATCH_NETIF
  arp_table[i].netif = netif;
 800d45e:	6097      	str	r7, [r2, #8]
#endif /* ETHARP_TABLE_MATCH_NETIF */
  return (s16_t)i;
}
 800d460:	4628      	mov	r0, r5
 800d462:	b005      	add	sp, #20
 800d464:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      ((empty == ARP_TABLE_SIZE) && ((flags & ETHARP_FLAG_TRY_HARD) == 0))) {
 800d468:	f011 0f01 	tst.w	r1, #1
 800d46c:	d02b      	beq.n	800d4c6 <etharp_find_entry+0x13a>
    if (old_stable < ARP_TABLE_SIZE) {
 800d46e:	f1b8 0f09 	cmp.w	r8, #9
 800d472:	dc11      	bgt.n	800d498 <etharp_find_entry+0x10c>
      LWIP_ASSERT("arp_table[i].q == NULL", arp_table[i].q == NULL);
 800d474:	eb08 0348 	add.w	r3, r8, r8, lsl #1
 800d478:	4a16      	ldr	r2, [pc, #88]	; (800d4d4 <etharp_find_entry+0x148>)
 800d47a:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800d47e:	b133      	cbz	r3, 800d48e <etharp_find_entry+0x102>
 800d480:	4b15      	ldr	r3, [pc, #84]	; (800d4d8 <etharp_find_entry+0x14c>)
 800d482:	f240 126d 	movw	r2, #365	; 0x16d
 800d486:	4915      	ldr	r1, [pc, #84]	; (800d4dc <etharp_find_entry+0x150>)
 800d488:	4815      	ldr	r0, [pc, #84]	; (800d4e0 <etharp_find_entry+0x154>)
 800d48a:	f001 fe33 	bl	800f0f4 <iprintf>
    etharp_free_entry(i);
 800d48e:	4640      	mov	r0, r8
 800d490:	f7ff ff62 	bl	800d358 <etharp_free_entry>
 800d494:	4645      	mov	r5, r8
 800d496:	e7ca      	b.n	800d42e <etharp_find_entry+0xa2>
    } else if (old_pending < ARP_TABLE_SIZE) {
 800d498:	9b03      	ldr	r3, [sp, #12]
 800d49a:	2b09      	cmp	r3, #9
 800d49c:	dd16      	ble.n	800d4cc <etharp_find_entry+0x140>
    } else if (old_queue < ARP_TABLE_SIZE) {
 800d49e:	2809      	cmp	r0, #9
      return (s16_t)ERR_MEM;
 800d4a0:	bfc8      	it	gt
 800d4a2:	f04f 35ff 	movgt.w	r5, #4294967295
    } else if (old_queue < ARP_TABLE_SIZE) {
 800d4a6:	dcdb      	bgt.n	800d460 <etharp_find_entry+0xd4>
 800d4a8:	4680      	mov	r8, r0
 800d4aa:	e7f0      	b.n	800d48e <etharp_find_entry+0x102>
  LWIP_ASSERT("arp_table[i].state == ETHARP_STATE_EMPTY",
 800d4ac:	4b0a      	ldr	r3, [pc, #40]	; (800d4d8 <etharp_find_entry+0x14c>)
 800d4ae:	f44f 72c2 	mov.w	r2, #388	; 0x184
 800d4b2:	490c      	ldr	r1, [pc, #48]	; (800d4e4 <etharp_find_entry+0x158>)
 800d4b4:	480a      	ldr	r0, [pc, #40]	; (800d4e0 <etharp_find_entry+0x154>)
 800d4b6:	f001 fe1d 	bl	800f0f4 <iprintf>
 800d4ba:	e7c1      	b.n	800d440 <etharp_find_entry+0xb4>
 800d4bc:	4675      	mov	r5, lr
 800d4be:	e7cf      	b.n	800d460 <etharp_find_entry+0xd4>
    return (s16_t)ERR_MEM;
 800d4c0:	f04f 35ff 	mov.w	r5, #4294967295
 800d4c4:	e7cc      	b.n	800d460 <etharp_find_entry+0xd4>
 800d4c6:	f04f 35ff 	mov.w	r5, #4294967295
 800d4ca:	e7c9      	b.n	800d460 <etharp_find_entry+0xd4>
 800d4cc:	f8dd 800c 	ldr.w	r8, [sp, #12]
 800d4d0:	e7dd      	b.n	800d48e <etharp_find_entry+0x102>
 800d4d2:	bf00      	nop
 800d4d4:	20010970 	.word	0x20010970
 800d4d8:	08012710 	.word	0x08012710
 800d4dc:	08012748 	.word	0x08012748
 800d4e0:	080103a4 	.word	0x080103a4
 800d4e4:	08012760 	.word	0x08012760

0800d4e8 <etharp_raw>:
etharp_raw(struct netif *netif, const struct eth_addr *ethsrc_addr,
           const struct eth_addr *ethdst_addr,
           const struct eth_addr *hwsrc_addr, const ip4_addr_t *ipsrc_addr,
           const struct eth_addr *hwdst_addr, const ip4_addr_t *ipdst_addr,
           const u16_t opcode)
{
 800d4e8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d4ec:	b082      	sub	sp, #8
 800d4ee:	460f      	mov	r7, r1
 800d4f0:	4690      	mov	r8, r2
 800d4f2:	461d      	mov	r5, r3
 800d4f4:	f8dd a02c 	ldr.w	sl, [sp, #44]	; 0x2c
  struct pbuf *p;
  err_t result = ERR_OK;
  struct etharp_hdr *hdr;

  LWIP_ASSERT("netif != NULL", netif != NULL);
 800d4f8:	4681      	mov	r9, r0
 800d4fa:	2800      	cmp	r0, #0
 800d4fc:	d042      	beq.n	800d584 <etharp_raw+0x9c>

  /* allocate a pbuf for the outgoing ARP request packet */
  p = pbuf_alloc(PBUF_LINK, SIZEOF_ETHARP_HDR, PBUF_RAM);
 800d4fe:	f44f 7220 	mov.w	r2, #640	; 0x280
 800d502:	211c      	movs	r1, #28
 800d504:	200e      	movs	r0, #14
 800d506:	f7fb f96f 	bl	80087e8 <pbuf_alloc>
  /* could allocate a pbuf for an ARP request? */
  if (p == NULL) {
 800d50a:	4606      	mov	r6, r0
 800d50c:	2800      	cmp	r0, #0
 800d50e:	d051      	beq.n	800d5b4 <etharp_raw+0xcc>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("etharp_raw: could not allocate pbuf for ARP request.\n"));
    ETHARP_STATS_INC(etharp.memerr);
    return ERR_MEM;
  }
  LWIP_ASSERT("check that first pbuf can hold struct etharp_hdr",
 800d510:	8943      	ldrh	r3, [r0, #10]
 800d512:	2b1b      	cmp	r3, #27
 800d514:	d93e      	bls.n	800d594 <etharp_raw+0xac>
              (p->len >= SIZEOF_ETHARP_HDR));

  hdr = (struct etharp_hdr *)p->payload;
 800d516:	6874      	ldr	r4, [r6, #4]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_raw: sending raw ARP packet.\n"));
  hdr->opcode = lwip_htons(opcode);
 800d518:	f8bd 0034 	ldrh.w	r0, [sp, #52]	; 0x34
 800d51c:	f7fa fab4 	bl	8007a88 <lwip_htons>
 800d520:	80e0      	strh	r0, [r4, #6]

  LWIP_ASSERT("netif->hwaddr_len must be the same as ETH_HWADDR_LEN for etharp!",
 800d522:	f899 302c 	ldrb.w	r3, [r9, #44]	; 0x2c
 800d526:	2b06      	cmp	r3, #6
 800d528:	d13c      	bne.n	800d5a4 <etharp_raw+0xbc>
              (netif->hwaddr_len == ETH_HWADDR_LEN));

  /* Write the ARP MAC-Addresses */
  SMEMCPY(&hdr->shwaddr, hwsrc_addr, ETH_HWADDR_LEN);
 800d52a:	682b      	ldr	r3, [r5, #0]
 800d52c:	60a3      	str	r3, [r4, #8]
 800d52e:	88ab      	ldrh	r3, [r5, #4]
 800d530:	81a3      	strh	r3, [r4, #12]
  SMEMCPY(&hdr->dhwaddr, hwdst_addr, ETH_HWADDR_LEN);
 800d532:	f8da 3000 	ldr.w	r3, [sl]
 800d536:	f8c4 3012 	str.w	r3, [r4, #18]
 800d53a:	f8ba 3004 	ldrh.w	r3, [sl, #4]
 800d53e:	82e3      	strh	r3, [r4, #22]
  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing. */
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->sipaddr, ipsrc_addr);
 800d540:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d542:	681b      	ldr	r3, [r3, #0]
 800d544:	f8c4 300e 	str.w	r3, [r4, #14]
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->dipaddr, ipdst_addr);
 800d548:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800d54a:	681b      	ldr	r3, [r3, #0]
 800d54c:	61a3      	str	r3, [r4, #24]

  hdr->hwtype = PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET);
 800d54e:	2500      	movs	r5, #0
 800d550:	7025      	strb	r5, [r4, #0]
 800d552:	2301      	movs	r3, #1
 800d554:	7063      	strb	r3, [r4, #1]
  hdr->proto = PP_HTONS(ETHTYPE_IP);
 800d556:	2308      	movs	r3, #8
 800d558:	70a3      	strb	r3, [r4, #2]
 800d55a:	70e5      	strb	r5, [r4, #3]
  /* set hwlen and protolen */
  hdr->hwlen = ETH_HWADDR_LEN;
 800d55c:	2306      	movs	r3, #6
 800d55e:	7123      	strb	r3, [r4, #4]
  hdr->protolen = sizeof(ip4_addr_t);
 800d560:	2304      	movs	r3, #4
 800d562:	7163      	strb	r3, [r4, #5]
  if (ip4_addr_islinklocal(ipsrc_addr)) {
    ethernet_output(netif, p, ethsrc_addr, &ethbroadcast, ETHTYPE_ARP);
  } else
#endif /* LWIP_AUTOIP */
  {
    ethernet_output(netif, p, ethsrc_addr, ethdst_addr, ETHTYPE_ARP);
 800d564:	f640 0306 	movw	r3, #2054	; 0x806
 800d568:	9300      	str	r3, [sp, #0]
 800d56a:	4643      	mov	r3, r8
 800d56c:	463a      	mov	r2, r7
 800d56e:	4631      	mov	r1, r6
 800d570:	4648      	mov	r0, r9
 800d572:	f001 faa9 	bl	800eac8 <ethernet_output>
  }

  ETHARP_STATS_INC(etharp.xmit);
  /* free ARP query packet */
  pbuf_free(p);
 800d576:	4630      	mov	r0, r6
 800d578:	f7fb f8c6 	bl	8008708 <pbuf_free>
  p = NULL;
  /* could not allocate pbuf for ARP request */

  return result;
 800d57c:	4628      	mov	r0, r5
}
 800d57e:	b002      	add	sp, #8
 800d580:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  LWIP_ASSERT("netif != NULL", netif != NULL);
 800d584:	4b0d      	ldr	r3, [pc, #52]	; (800d5bc <etharp_raw+0xd4>)
 800d586:	f240 4257 	movw	r2, #1111	; 0x457
 800d58a:	490d      	ldr	r1, [pc, #52]	; (800d5c0 <etharp_raw+0xd8>)
 800d58c:	480d      	ldr	r0, [pc, #52]	; (800d5c4 <etharp_raw+0xdc>)
 800d58e:	f001 fdb1 	bl	800f0f4 <iprintf>
 800d592:	e7b4      	b.n	800d4fe <etharp_raw+0x16>
  LWIP_ASSERT("check that first pbuf can hold struct etharp_hdr",
 800d594:	4b09      	ldr	r3, [pc, #36]	; (800d5bc <etharp_raw+0xd4>)
 800d596:	f240 4262 	movw	r2, #1122	; 0x462
 800d59a:	490b      	ldr	r1, [pc, #44]	; (800d5c8 <etharp_raw+0xe0>)
 800d59c:	4809      	ldr	r0, [pc, #36]	; (800d5c4 <etharp_raw+0xdc>)
 800d59e:	f001 fda9 	bl	800f0f4 <iprintf>
 800d5a2:	e7b8      	b.n	800d516 <etharp_raw+0x2e>
  LWIP_ASSERT("netif->hwaddr_len must be the same as ETH_HWADDR_LEN for etharp!",
 800d5a4:	4b05      	ldr	r3, [pc, #20]	; (800d5bc <etharp_raw+0xd4>)
 800d5a6:	f240 4269 	movw	r2, #1129	; 0x469
 800d5aa:	4908      	ldr	r1, [pc, #32]	; (800d5cc <etharp_raw+0xe4>)
 800d5ac:	4805      	ldr	r0, [pc, #20]	; (800d5c4 <etharp_raw+0xdc>)
 800d5ae:	f001 fda1 	bl	800f0f4 <iprintf>
 800d5b2:	e7ba      	b.n	800d52a <etharp_raw+0x42>
    return ERR_MEM;
 800d5b4:	f04f 30ff 	mov.w	r0, #4294967295
 800d5b8:	e7e1      	b.n	800d57e <etharp_raw+0x96>
 800d5ba:	bf00      	nop
 800d5bc:	08012710 	.word	0x08012710
 800d5c0:	08010394 	.word	0x08010394
 800d5c4:	080103a4 	.word	0x080103a4
 800d5c8:	0801278c 	.word	0x0801278c
 800d5cc:	080127c0 	.word	0x080127c0

0800d5d0 <etharp_cleanup_netif>:
{
 800d5d0:	b570      	push	{r4, r5, r6, lr}
 800d5d2:	4606      	mov	r6, r0
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800d5d4:	4c08      	ldr	r4, [pc, #32]	; (800d5f8 <etharp_cleanup_netif+0x28>)
 800d5d6:	2500      	movs	r5, #0
 800d5d8:	e003      	b.n	800d5e2 <etharp_cleanup_netif+0x12>
 800d5da:	3501      	adds	r5, #1
 800d5dc:	3418      	adds	r4, #24
 800d5de:	2d0a      	cmp	r5, #10
 800d5e0:	d009      	beq.n	800d5f6 <etharp_cleanup_netif+0x26>
    if ((state != ETHARP_STATE_EMPTY) && (arp_table[i].netif == netif)) {
 800d5e2:	7d23      	ldrb	r3, [r4, #20]
 800d5e4:	2b00      	cmp	r3, #0
 800d5e6:	d0f8      	beq.n	800d5da <etharp_cleanup_netif+0xa>
 800d5e8:	68a3      	ldr	r3, [r4, #8]
 800d5ea:	42b3      	cmp	r3, r6
 800d5ec:	d1f5      	bne.n	800d5da <etharp_cleanup_netif+0xa>
      etharp_free_entry(i);
 800d5ee:	4628      	mov	r0, r5
 800d5f0:	f7ff feb2 	bl	800d358 <etharp_free_entry>
 800d5f4:	e7f1      	b.n	800d5da <etharp_cleanup_netif+0xa>
}
 800d5f6:	bd70      	pop	{r4, r5, r6, pc}
 800d5f8:	20010970 	.word	0x20010970

0800d5fc <etharp_input>:
{
 800d5fc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800d600:	b087      	sub	sp, #28
  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 800d602:	b1a9      	cbz	r1, 800d630 <etharp_input+0x34>
 800d604:	4604      	mov	r4, r0
 800d606:	460e      	mov	r6, r1
  hdr = (struct etharp_hdr *)p->payload;
 800d608:	6845      	ldr	r5, [r0, #4]
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 800d60a:	882b      	ldrh	r3, [r5, #0]
 800d60c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800d610:	d108      	bne.n	800d624 <etharp_input+0x28>
 800d612:	792b      	ldrb	r3, [r5, #4]
 800d614:	2b06      	cmp	r3, #6
 800d616:	d105      	bne.n	800d624 <etharp_input+0x28>
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 800d618:	796b      	ldrb	r3, [r5, #5]
 800d61a:	2b04      	cmp	r3, #4
 800d61c:	d102      	bne.n	800d624 <etharp_input+0x28>
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 800d61e:	886b      	ldrh	r3, [r5, #2]
 800d620:	2b08      	cmp	r3, #8
 800d622:	d00d      	beq.n	800d640 <etharp_input+0x44>
    pbuf_free(p);
 800d624:	4620      	mov	r0, r4
 800d626:	f7fb f86f 	bl	8008708 <pbuf_free>
}
 800d62a:	b007      	add	sp, #28
 800d62c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 800d630:	4b44      	ldr	r3, [pc, #272]	; (800d744 <etharp_input+0x148>)
 800d632:	f240 228a 	movw	r2, #650	; 0x28a
 800d636:	4944      	ldr	r1, [pc, #272]	; (800d748 <etharp_input+0x14c>)
 800d638:	4844      	ldr	r0, [pc, #272]	; (800d74c <etharp_input+0x150>)
 800d63a:	f001 fd5b 	bl	800f0f4 <iprintf>
 800d63e:	e7f4      	b.n	800d62a <etharp_input+0x2e>
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&sipaddr, &hdr->sipaddr);
 800d640:	f8d5 300e 	ldr.w	r3, [r5, #14]
 800d644:	9305      	str	r3, [sp, #20]
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&dipaddr, &hdr->dipaddr);
 800d646:	69aa      	ldr	r2, [r5, #24]
  if (ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 800d648:	684b      	ldr	r3, [r1, #4]
 800d64a:	2b00      	cmp	r3, #0
 800d64c:	d153      	bne.n	800d6f6 <etharp_input+0xfa>
  etharp_update_arp_entry(netif, &sipaddr, &(hdr->shwaddr),
 800d64e:	f105 0708 	add.w	r7, r5, #8
    for_us = 0;
 800d652:	f04f 0900 	mov.w	r9, #0
  etharp_update_arp_entry(netif, &sipaddr, &(hdr->shwaddr),
 800d656:	f04f 0802 	mov.w	r8, #2
  LWIP_ASSERT("netif->hwaddr_len == ETH_HWADDR_LEN", netif->hwaddr_len == ETH_HWADDR_LEN);
 800d65a:	f896 302c 	ldrb.w	r3, [r6, #44]	; 0x2c
 800d65e:	2b06      	cmp	r3, #6
 800d660:	d155      	bne.n	800d70e <etharp_input+0x112>
  if (ip4_addr_isany(ipaddr) ||
 800d662:	9805      	ldr	r0, [sp, #20]
 800d664:	2800      	cmp	r0, #0
 800d666:	d03e      	beq.n	800d6e6 <etharp_input+0xea>
      ip4_addr_isbroadcast(ipaddr, netif) ||
 800d668:	4631      	mov	r1, r6
 800d66a:	f000 fd5c 	bl	800e126 <ip4_addr_isbroadcast_u32>
  if (ip4_addr_isany(ipaddr) ||
 800d66e:	2800      	cmp	r0, #0
 800d670:	d139      	bne.n	800d6e6 <etharp_input+0xea>
      ip4_addr_ismulticast(ipaddr)) {
 800d672:	9b05      	ldr	r3, [sp, #20]
 800d674:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
      ip4_addr_isbroadcast(ipaddr, netif) ||
 800d678:	2be0      	cmp	r3, #224	; 0xe0
 800d67a:	d034      	beq.n	800d6e6 <etharp_input+0xea>
  i = etharp_find_entry(ipaddr, flags, netif);
 800d67c:	4632      	mov	r2, r6
 800d67e:	4641      	mov	r1, r8
 800d680:	a805      	add	r0, sp, #20
 800d682:	f7ff fe83 	bl	800d38c <etharp_find_entry>
  if (i < 0) {
 800d686:	1e03      	subs	r3, r0, #0
 800d688:	db2d      	blt.n	800d6e6 <etharp_input+0xea>
    arp_table[i].state = ETHARP_STATE_STABLE;
 800d68a:	4931      	ldr	r1, [pc, #196]	; (800d750 <etharp_input+0x154>)
 800d68c:	eb03 0e43 	add.w	lr, r3, r3, lsl #1
 800d690:	eb01 0cce 	add.w	ip, r1, lr, lsl #3
 800d694:	2202      	movs	r2, #2
 800d696:	f88c 2014 	strb.w	r2, [ip, #20]
  arp_table[i].netif = netif;
 800d69a:	f8cc 6008 	str.w	r6, [ip, #8]
  SMEMCPY(&arp_table[i].ethaddr, ethaddr, ETH_HWADDR_LEN);
 800d69e:	4672      	mov	r2, lr
 800d6a0:	00d2      	lsls	r2, r2, #3
 800d6a2:	320c      	adds	r2, #12
 800d6a4:	eb01 0802 	add.w	r8, r1, r2
 800d6a8:	6838      	ldr	r0, [r7, #0]
 800d6aa:	5088      	str	r0, [r1, r2]
 800d6ac:	88ba      	ldrh	r2, [r7, #4]
 800d6ae:	f8a8 2004 	strh.w	r2, [r8, #4]
  arp_table[i].ctime = 0;
 800d6b2:	2200      	movs	r2, #0
 800d6b4:	f8ac 2012 	strh.w	r2, [ip, #18]
  if (arp_table[i].q != NULL) {
 800d6b8:	f851 803e 	ldr.w	r8, [r1, lr, lsl #3]
 800d6bc:	f1b8 0f00 	cmp.w	r8, #0
 800d6c0:	d011      	beq.n	800d6e6 <etharp_input+0xea>
    arp_table[i].q = NULL;
 800d6c2:	4673      	mov	r3, lr
 800d6c4:	00db      	lsls	r3, r3, #3
 800d6c6:	460a      	mov	r2, r1
 800d6c8:	2100      	movs	r1, #0
 800d6ca:	50d1      	str	r1, [r2, r3]
    ethernet_output(netif, p, (struct eth_addr *)(netif->hwaddr), ethaddr, ETHTYPE_IP);
 800d6cc:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800d6d0:	9300      	str	r3, [sp, #0]
 800d6d2:	463b      	mov	r3, r7
 800d6d4:	f106 0226 	add.w	r2, r6, #38	; 0x26
 800d6d8:	4641      	mov	r1, r8
 800d6da:	4630      	mov	r0, r6
 800d6dc:	f001 f9f4 	bl	800eac8 <ethernet_output>
    pbuf_free(p);
 800d6e0:	4640      	mov	r0, r8
 800d6e2:	f7fb f811 	bl	8008708 <pbuf_free>
  switch (hdr->opcode) {
 800d6e6:	88eb      	ldrh	r3, [r5, #6]
 800d6e8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800d6ec:	d017      	beq.n	800d71e <etharp_input+0x122>
  pbuf_free(p);
 800d6ee:	4620      	mov	r0, r4
 800d6f0:	f7fb f80a 	bl	8008708 <pbuf_free>
 800d6f4:	e799      	b.n	800d62a <etharp_input+0x2e>
  etharp_update_arp_entry(netif, &sipaddr, &(hdr->shwaddr),
 800d6f6:	f105 0708 	add.w	r7, r5, #8
 800d6fa:	4293      	cmp	r3, r2
    for_us = (u8_t)ip4_addr_cmp(&dipaddr, netif_ip4_addr(netif));
 800d6fc:	bf19      	ittee	ne
 800d6fe:	f04f 0900 	movne.w	r9, #0
  etharp_update_arp_entry(netif, &sipaddr, &(hdr->shwaddr),
 800d702:	f04f 0802 	movne.w	r8, #2
    for_us = (u8_t)ip4_addr_cmp(&dipaddr, netif_ip4_addr(netif));
 800d706:	f04f 0901 	moveq.w	r9, #1
  etharp_update_arp_entry(netif, &sipaddr, &(hdr->shwaddr),
 800d70a:	46c8      	moveq	r8, r9
 800d70c:	e7a5      	b.n	800d65a <etharp_input+0x5e>
  LWIP_ASSERT("netif->hwaddr_len == ETH_HWADDR_LEN", netif->hwaddr_len == ETH_HWADDR_LEN);
 800d70e:	4b0d      	ldr	r3, [pc, #52]	; (800d744 <etharp_input+0x148>)
 800d710:	f240 12a9 	movw	r2, #425	; 0x1a9
 800d714:	490f      	ldr	r1, [pc, #60]	; (800d754 <etharp_input+0x158>)
 800d716:	480d      	ldr	r0, [pc, #52]	; (800d74c <etharp_input+0x150>)
 800d718:	f001 fcec 	bl	800f0f4 <iprintf>
 800d71c:	e7a1      	b.n	800d662 <etharp_input+0x66>
      if (for_us) {
 800d71e:	f1b9 0f00 	cmp.w	r9, #0
 800d722:	d0e4      	beq.n	800d6ee <etharp_input+0xf2>
                   (struct eth_addr *)netif->hwaddr, &hdr->shwaddr,
 800d724:	f106 0126 	add.w	r1, r6, #38	; 0x26
        etharp_raw(netif,
 800d728:	2302      	movs	r3, #2
 800d72a:	9303      	str	r3, [sp, #12]
 800d72c:	ab05      	add	r3, sp, #20
 800d72e:	9302      	str	r3, [sp, #8]
 800d730:	9701      	str	r7, [sp, #4]
                   (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif),
 800d732:	1d33      	adds	r3, r6, #4
        etharp_raw(netif,
 800d734:	9300      	str	r3, [sp, #0]
 800d736:	460b      	mov	r3, r1
 800d738:	463a      	mov	r2, r7
 800d73a:	4630      	mov	r0, r6
 800d73c:	f7ff fed4 	bl	800d4e8 <etharp_raw>
 800d740:	e7d5      	b.n	800d6ee <etharp_input+0xf2>
 800d742:	bf00      	nop
 800d744:	08012710 	.word	0x08012710
 800d748:	08010394 	.word	0x08010394
 800d74c:	080103a4 	.word	0x080103a4
 800d750:	20010970 	.word	0x20010970
 800d754:	08012824 	.word	0x08012824

0800d758 <etharp_request>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
err_t
etharp_request(struct netif *netif, const ip4_addr_t *ipaddr)
{
 800d758:	b510      	push	{r4, lr}
 800d75a:	b084      	sub	sp, #16
 800d75c:	4602      	mov	r2, r0
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 800d75e:	f100 0326 	add.w	r3, r0, #38	; 0x26
 800d762:	2401      	movs	r4, #1
 800d764:	9403      	str	r4, [sp, #12]
 800d766:	9102      	str	r1, [sp, #8]
 800d768:	4904      	ldr	r1, [pc, #16]	; (800d77c <etharp_request+0x24>)
 800d76a:	9101      	str	r1, [sp, #4]
                    (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif), &ethzero,
 800d76c:	3204      	adds	r2, #4
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 800d76e:	9200      	str	r2, [sp, #0]
 800d770:	4a03      	ldr	r2, [pc, #12]	; (800d780 <etharp_request+0x28>)
 800d772:	4619      	mov	r1, r3
 800d774:	f7ff feb8 	bl	800d4e8 <etharp_raw>
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_request: sending ARP request.\n"));
  return etharp_request_dst(netif, ipaddr, &ethbroadcast);
}
 800d778:	b004      	add	sp, #16
 800d77a:	bd10      	pop	{r4, pc}
 800d77c:	08012bf8 	.word	0x08012bf8
 800d780:	08012bf0 	.word	0x08012bf0

0800d784 <etharp_tmr>:
{
 800d784:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800d786:	4c14      	ldr	r4, [pc, #80]	; (800d7d8 <etharp_tmr+0x54>)
 800d788:	2500      	movs	r5, #0
        arp_table[i].state = ETHARP_STATE_STABLE;
 800d78a:	2702      	movs	r7, #2
        arp_table[i].state = ETHARP_STATE_STABLE_REREQUESTING_2;
 800d78c:	2604      	movs	r6, #4
 800d78e:	e008      	b.n	800d7a2 <etharp_tmr+0x1e>
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 800d790:	2b04      	cmp	r3, #4
 800d792:	d91b      	bls.n	800d7cc <etharp_tmr+0x48>
        etharp_free_entry(i);
 800d794:	4628      	mov	r0, r5
 800d796:	f7ff fddf 	bl	800d358 <etharp_free_entry>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800d79a:	3501      	adds	r5, #1
 800d79c:	3418      	adds	r4, #24
 800d79e:	2d0a      	cmp	r5, #10
 800d7a0:	d018      	beq.n	800d7d4 <etharp_tmr+0x50>
    u8_t state = arp_table[i].state;
 800d7a2:	4621      	mov	r1, r4
 800d7a4:	7c22      	ldrb	r2, [r4, #16]
    if (state != ETHARP_STATE_EMPTY
 800d7a6:	2a00      	cmp	r2, #0
 800d7a8:	d0f7      	beq.n	800d79a <etharp_tmr+0x16>
      arp_table[i].ctime++;
 800d7aa:	89e3      	ldrh	r3, [r4, #14]
 800d7ac:	3301      	adds	r3, #1
 800d7ae:	b29b      	uxth	r3, r3
 800d7b0:	81e3      	strh	r3, [r4, #14]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 800d7b2:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 800d7b6:	d2ed      	bcs.n	800d794 <etharp_tmr+0x10>
 800d7b8:	2a01      	cmp	r2, #1
 800d7ba:	d0e9      	beq.n	800d790 <etharp_tmr+0xc>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_1) {
 800d7bc:	2a03      	cmp	r2, #3
 800d7be:	d003      	beq.n	800d7c8 <etharp_tmr+0x44>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_2) {
 800d7c0:	2a04      	cmp	r2, #4
 800d7c2:	d1ea      	bne.n	800d79a <etharp_tmr+0x16>
        arp_table[i].state = ETHARP_STATE_STABLE;
 800d7c4:	7427      	strb	r7, [r4, #16]
 800d7c6:	e7e8      	b.n	800d79a <etharp_tmr+0x16>
        arp_table[i].state = ETHARP_STATE_STABLE_REREQUESTING_2;
 800d7c8:	7426      	strb	r6, [r4, #16]
 800d7ca:	e7e6      	b.n	800d79a <etharp_tmr+0x16>
        etharp_request(arp_table[i].netif, &arp_table[i].ipaddr);
 800d7cc:	6860      	ldr	r0, [r4, #4]
 800d7ce:	f7ff ffc3 	bl	800d758 <etharp_request>
 800d7d2:	e7e2      	b.n	800d79a <etharp_tmr+0x16>
}
 800d7d4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d7d6:	bf00      	nop
 800d7d8:	20010974 	.word	0x20010974

0800d7dc <etharp_output_to_arp_index>:
{
 800d7dc:	b570      	push	{r4, r5, r6, lr}
 800d7de:	b084      	sub	sp, #16
 800d7e0:	4605      	mov	r5, r0
 800d7e2:	460e      	mov	r6, r1
 800d7e4:	4614      	mov	r4, r2
  LWIP_ASSERT("arp_table[arp_idx].state >= ETHARP_STATE_STABLE",
 800d7e6:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 800d7ea:	4b32      	ldr	r3, [pc, #200]	; (800d8b4 <etharp_output_to_arp_index+0xd8>)
 800d7ec:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800d7f0:	7d1b      	ldrb	r3, [r3, #20]
 800d7f2:	2b01      	cmp	r3, #1
 800d7f4:	d919      	bls.n	800d82a <etharp_output_to_arp_index+0x4e>
  if (arp_table[arp_idx].state == ETHARP_STATE_STABLE) {
 800d7f6:	eb04 0344 	add.w	r3, r4, r4, lsl #1
 800d7fa:	4a2e      	ldr	r2, [pc, #184]	; (800d8b4 <etharp_output_to_arp_index+0xd8>)
 800d7fc:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800d800:	7d1b      	ldrb	r3, [r3, #20]
 800d802:	2b02      	cmp	r3, #2
 800d804:	d019      	beq.n	800d83a <etharp_output_to_arp_index+0x5e>
  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), &arp_table[arp_idx].ethaddr, ETHTYPE_IP);
 800d806:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 800d80a:	4b2a      	ldr	r3, [pc, #168]	; (800d8b4 <etharp_output_to_arp_index+0xd8>)
 800d80c:	eb03 04c4 	add.w	r4, r3, r4, lsl #3
 800d810:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800d814:	9300      	str	r3, [sp, #0]
 800d816:	f104 030c 	add.w	r3, r4, #12
 800d81a:	f105 0226 	add.w	r2, r5, #38	; 0x26
 800d81e:	4631      	mov	r1, r6
 800d820:	4628      	mov	r0, r5
 800d822:	f001 f951 	bl	800eac8 <ethernet_output>
}
 800d826:	b004      	add	sp, #16
 800d828:	bd70      	pop	{r4, r5, r6, pc}
  LWIP_ASSERT("arp_table[arp_idx].state >= ETHARP_STATE_STABLE",
 800d82a:	4b23      	ldr	r3, [pc, #140]	; (800d8b8 <etharp_output_to_arp_index+0xdc>)
 800d82c:	f240 22ee 	movw	r2, #750	; 0x2ee
 800d830:	4922      	ldr	r1, [pc, #136]	; (800d8bc <etharp_output_to_arp_index+0xe0>)
 800d832:	4823      	ldr	r0, [pc, #140]	; (800d8c0 <etharp_output_to_arp_index+0xe4>)
 800d834:	f001 fc5e 	bl	800f0f4 <iprintf>
 800d838:	e7dd      	b.n	800d7f6 <etharp_output_to_arp_index+0x1a>
    if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_BROADCAST) {
 800d83a:	eb04 0344 	add.w	r3, r4, r4, lsl #1
 800d83e:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800d842:	8a5b      	ldrh	r3, [r3, #18]
 800d844:	f5b3 7f8e 	cmp.w	r3, #284	; 0x11c
 800d848:	d822      	bhi.n	800d890 <etharp_output_to_arp_index+0xb4>
    } else if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_UNICAST) {
 800d84a:	f5b3 7f87 	cmp.w	r3, #270	; 0x10e
 800d84e:	d3da      	bcc.n	800d806 <etharp_output_to_arp_index+0x2a>
      if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR_OK) {
 800d850:	eb04 0044 	add.w	r0, r4, r4, lsl #1
 800d854:	00c0      	lsls	r0, r0, #3
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 800d856:	f105 0126 	add.w	r1, r5, #38	; 0x26
      if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR_OK) {
 800d85a:	4a16      	ldr	r2, [pc, #88]	; (800d8b4 <etharp_output_to_arp_index+0xd8>)
 800d85c:	f100 0c0c 	add.w	ip, r0, #12
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 800d860:	2301      	movs	r3, #1
 800d862:	9303      	str	r3, [sp, #12]
      if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR_OK) {
 800d864:	3004      	adds	r0, #4
 800d866:	4410      	add	r0, r2
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 800d868:	9002      	str	r0, [sp, #8]
 800d86a:	4b16      	ldr	r3, [pc, #88]	; (800d8c4 <etharp_output_to_arp_index+0xe8>)
 800d86c:	9301      	str	r3, [sp, #4]
                    (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif), &ethzero,
 800d86e:	1d2b      	adds	r3, r5, #4
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 800d870:	9300      	str	r3, [sp, #0]
 800d872:	460b      	mov	r3, r1
 800d874:	4462      	add	r2, ip
 800d876:	4628      	mov	r0, r5
 800d878:	f7ff fe36 	bl	800d4e8 <etharp_raw>
      if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR_OK) {
 800d87c:	2800      	cmp	r0, #0
 800d87e:	d1c2      	bne.n	800d806 <etharp_output_to_arp_index+0x2a>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 800d880:	eb04 0344 	add.w	r3, r4, r4, lsl #1
 800d884:	4a0b      	ldr	r2, [pc, #44]	; (800d8b4 <etharp_output_to_arp_index+0xd8>)
 800d886:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800d88a:	2203      	movs	r2, #3
 800d88c:	751a      	strb	r2, [r3, #20]
 800d88e:	e7ba      	b.n	800d806 <etharp_output_to_arp_index+0x2a>
      if (etharp_request(netif, &arp_table[arp_idx].ipaddr) == ERR_OK) {
 800d890:	eb04 0144 	add.w	r1, r4, r4, lsl #1
 800d894:	eb02 01c1 	add.w	r1, r2, r1, lsl #3
 800d898:	3104      	adds	r1, #4
 800d89a:	4628      	mov	r0, r5
 800d89c:	f7ff ff5c 	bl	800d758 <etharp_request>
 800d8a0:	2800      	cmp	r0, #0
 800d8a2:	d1b0      	bne.n	800d806 <etharp_output_to_arp_index+0x2a>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 800d8a4:	eb04 0344 	add.w	r3, r4, r4, lsl #1
 800d8a8:	4a02      	ldr	r2, [pc, #8]	; (800d8b4 <etharp_output_to_arp_index+0xd8>)
 800d8aa:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800d8ae:	2203      	movs	r2, #3
 800d8b0:	751a      	strb	r2, [r3, #20]
 800d8b2:	e7a8      	b.n	800d806 <etharp_output_to_arp_index+0x2a>
 800d8b4:	20010970 	.word	0x20010970
 800d8b8:	08012710 	.word	0x08012710
 800d8bc:	08012848 	.word	0x08012848
 800d8c0:	080103a4 	.word	0x080103a4
 800d8c4:	08012bf8 	.word	0x08012bf8

0800d8c8 <etharp_query>:
{
 800d8c8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800d8cc:	b083      	sub	sp, #12
 800d8ce:	4606      	mov	r6, r0
 800d8d0:	460d      	mov	r5, r1
 800d8d2:	4617      	mov	r7, r2
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 800d8d4:	4601      	mov	r1, r0
 800d8d6:	6828      	ldr	r0, [r5, #0]
 800d8d8:	f000 fc25 	bl	800e126 <ip4_addr_isbroadcast_u32>
 800d8dc:	2800      	cmp	r0, #0
 800d8de:	d16b      	bne.n	800d9b8 <etharp_query+0xf0>
      ip4_addr_ismulticast(ipaddr) ||
 800d8e0:	682b      	ldr	r3, [r5, #0]
 800d8e2:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 800d8e6:	2ae0      	cmp	r2, #224	; 0xe0
 800d8e8:	d069      	beq.n	800d9be <etharp_query+0xf6>
      ip4_addr_isany(ipaddr)) {
 800d8ea:	2b00      	cmp	r3, #0
 800d8ec:	d06a      	beq.n	800d9c4 <etharp_query+0xfc>
  i_err = etharp_find_entry(ipaddr, ETHARP_FLAG_TRY_HARD, netif);
 800d8ee:	4632      	mov	r2, r6
 800d8f0:	2101      	movs	r1, #1
 800d8f2:	4628      	mov	r0, r5
 800d8f4:	f7ff fd4a 	bl	800d38c <etharp_find_entry>
  if (i_err < 0) {
 800d8f8:	1e04      	subs	r4, r0, #0
 800d8fa:	db2b      	blt.n	800d954 <etharp_query+0x8c>
  LWIP_ASSERT("type overflow", (size_t)i_err < NETIF_ADDR_IDX_MAX);
 800d8fc:	b2a3      	uxth	r3, r4
 800d8fe:	2b7e      	cmp	r3, #126	; 0x7e
 800d900:	d82a      	bhi.n	800d958 <etharp_query+0x90>
  i = (netif_addr_idx_t)i_err;
 800d902:	b2e4      	uxtb	r4, r4
  if (arp_table[i].state == ETHARP_STATE_EMPTY) {
 800d904:	eb04 0244 	add.w	r2, r4, r4, lsl #1
 800d908:	4b46      	ldr	r3, [pc, #280]	; (800da24 <etharp_query+0x15c>)
 800d90a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800d90e:	7d1b      	ldrb	r3, [r3, #20]
 800d910:	2b00      	cmp	r3, #0
 800d912:	f040 8082 	bne.w	800da1a <etharp_query+0x152>
    arp_table[i].state = ETHARP_STATE_PENDING;
 800d916:	4613      	mov	r3, r2
 800d918:	4a42      	ldr	r2, [pc, #264]	; (800da24 <etharp_query+0x15c>)
 800d91a:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800d91e:	2201      	movs	r2, #1
 800d920:	751a      	strb	r2, [r3, #20]
    arp_table[i].netif = netif;
 800d922:	609e      	str	r6, [r3, #8]
    result = etharp_request(netif, ipaddr);
 800d924:	4629      	mov	r1, r5
 800d926:	4630      	mov	r0, r6
 800d928:	f7ff ff16 	bl	800d758 <etharp_request>
    if (q == NULL) {
 800d92c:	b36f      	cbz	r7, 800d98a <etharp_query+0xc2>
  if (arp_table[i].state >= ETHARP_STATE_STABLE) {
 800d92e:	eb04 0344 	add.w	r3, r4, r4, lsl #1
 800d932:	4a3c      	ldr	r2, [pc, #240]	; (800da24 <etharp_query+0x15c>)
 800d934:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800d938:	7d1b      	ldrb	r3, [r3, #20]
 800d93a:	2b01      	cmp	r3, #1
 800d93c:	d814      	bhi.n	800d968 <etharp_query+0xa0>
  } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 800d93e:	2b01      	cmp	r3, #1
 800d940:	d123      	bne.n	800d98a <etharp_query+0xc2>
    while (p) {
 800d942:	2f00      	cmp	r7, #0
 800d944:	d044      	beq.n	800d9d0 <etharp_query+0x108>
    p = q;
 800d946:	463d      	mov	r5, r7
      LWIP_ASSERT("no packet queues allowed!", (p->len != p->tot_len) || (p->next == 0));
 800d948:	f8df 90e0 	ldr.w	r9, [pc, #224]	; 800da2c <etharp_query+0x164>
 800d94c:	f8df 80e8 	ldr.w	r8, [pc, #232]	; 800da38 <etharp_query+0x170>
 800d950:	4e35      	ldr	r6, [pc, #212]	; (800da28 <etharp_query+0x160>)
 800d952:	e023      	b.n	800d99c <etharp_query+0xd4>
    return (err_t)i_err;
 800d954:	b260      	sxtb	r0, r4
 800d956:	e018      	b.n	800d98a <etharp_query+0xc2>
  LWIP_ASSERT("type overflow", (size_t)i_err < NETIF_ADDR_IDX_MAX);
 800d958:	4b34      	ldr	r3, [pc, #208]	; (800da2c <etharp_query+0x164>)
 800d95a:	f240 32c1 	movw	r2, #961	; 0x3c1
 800d95e:	4934      	ldr	r1, [pc, #208]	; (800da30 <etharp_query+0x168>)
 800d960:	4831      	ldr	r0, [pc, #196]	; (800da28 <etharp_query+0x160>)
 800d962:	f001 fbc7 	bl	800f0f4 <iprintf>
 800d966:	e7cc      	b.n	800d902 <etharp_query+0x3a>
    ETHARP_SET_ADDRHINT(netif, i);
 800d968:	4b32      	ldr	r3, [pc, #200]	; (800da34 <etharp_query+0x16c>)
 800d96a:	701c      	strb	r4, [r3, #0]
    result = ethernet_output(netif, q, srcaddr, &(arp_table[i].ethaddr), ETHTYPE_IP);
 800d96c:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 800d970:	4b2c      	ldr	r3, [pc, #176]	; (800da24 <etharp_query+0x15c>)
 800d972:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800d976:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800d97a:	9200      	str	r2, [sp, #0]
 800d97c:	330c      	adds	r3, #12
 800d97e:	f106 0226 	add.w	r2, r6, #38	; 0x26
 800d982:	4639      	mov	r1, r7
 800d984:	4630      	mov	r0, r6
 800d986:	f001 f89f 	bl	800eac8 <ethernet_output>
}
 800d98a:	b003      	add	sp, #12
 800d98c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
      if (PBUF_NEEDS_COPY(p)) {
 800d990:	7b2b      	ldrb	r3, [r5, #12]
 800d992:	f013 0f40 	tst.w	r3, #64	; 0x40
 800d996:	d128      	bne.n	800d9ea <etharp_query+0x122>
      p = p->next;
 800d998:	682d      	ldr	r5, [r5, #0]
    while (p) {
 800d99a:	b1cd      	cbz	r5, 800d9d0 <etharp_query+0x108>
      LWIP_ASSERT("no packet queues allowed!", (p->len != p->tot_len) || (p->next == 0));
 800d99c:	896a      	ldrh	r2, [r5, #10]
 800d99e:	892b      	ldrh	r3, [r5, #8]
 800d9a0:	429a      	cmp	r2, r3
 800d9a2:	d1f5      	bne.n	800d990 <etharp_query+0xc8>
 800d9a4:	682b      	ldr	r3, [r5, #0]
 800d9a6:	b1e3      	cbz	r3, 800d9e2 <etharp_query+0x11a>
 800d9a8:	464b      	mov	r3, r9
 800d9aa:	f240 32f1 	movw	r2, #1009	; 0x3f1
 800d9ae:	4641      	mov	r1, r8
 800d9b0:	4630      	mov	r0, r6
 800d9b2:	f001 fb9f 	bl	800f0f4 <iprintf>
 800d9b6:	e7eb      	b.n	800d990 <etharp_query+0xc8>
    return ERR_ARG;
 800d9b8:	f06f 000f 	mvn.w	r0, #15
 800d9bc:	e7e5      	b.n	800d98a <etharp_query+0xc2>
 800d9be:	f06f 000f 	mvn.w	r0, #15
 800d9c2:	e7e2      	b.n	800d98a <etharp_query+0xc2>
 800d9c4:	f06f 000f 	mvn.w	r0, #15
 800d9c8:	e7df      	b.n	800d98a <etharp_query+0xc2>
      result = ERR_MEM;
 800d9ca:	f04f 30ff 	mov.w	r0, #4294967295
 800d9ce:	e7dc      	b.n	800d98a <etharp_query+0xc2>
      pbuf_ref(p);
 800d9d0:	4638      	mov	r0, r7
 800d9d2:	f7fb f81d 	bl	8008a10 <pbuf_ref>
 800d9d6:	e00f      	b.n	800d9f8 <etharp_query+0x130>
    result = etharp_request(netif, ipaddr);
 800d9d8:	4629      	mov	r1, r5
 800d9da:	4630      	mov	r0, r6
 800d9dc:	f7ff febc 	bl	800d758 <etharp_request>
    if (q == NULL) {
 800d9e0:	e7d3      	b.n	800d98a <etharp_query+0xc2>
      if (PBUF_NEEDS_COPY(p)) {
 800d9e2:	7b2b      	ldrb	r3, [r5, #12]
 800d9e4:	f013 0f40 	tst.w	r3, #64	; 0x40
 800d9e8:	d0f2      	beq.n	800d9d0 <etharp_query+0x108>
      p = pbuf_clone(PBUF_LINK, PBUF_RAM, q);
 800d9ea:	463a      	mov	r2, r7
 800d9ec:	f44f 7120 	mov.w	r1, #640	; 0x280
 800d9f0:	200e      	movs	r0, #14
 800d9f2:	f7fb f957 	bl	8008ca4 <pbuf_clone>
 800d9f6:	4607      	mov	r7, r0
    if (p != NULL) {
 800d9f8:	2f00      	cmp	r7, #0
 800d9fa:	d0e6      	beq.n	800d9ca <etharp_query+0x102>
      if (arp_table[i].q != NULL) {
 800d9fc:	eb04 0344 	add.w	r3, r4, r4, lsl #1
 800da00:	4a08      	ldr	r2, [pc, #32]	; (800da24 <etharp_query+0x15c>)
 800da02:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 800da06:	b108      	cbz	r0, 800da0c <etharp_query+0x144>
        pbuf_free(arp_table[i].q);
 800da08:	f7fa fe7e 	bl	8008708 <pbuf_free>
      arp_table[i].q = p;
 800da0c:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 800da10:	4a04      	ldr	r2, [pc, #16]	; (800da24 <etharp_query+0x15c>)
 800da12:	f842 7034 	str.w	r7, [r2, r4, lsl #3]
      result = ERR_OK;
 800da16:	2000      	movs	r0, #0
 800da18:	e7b7      	b.n	800d98a <etharp_query+0xc2>
  if (is_new_entry || (q == NULL)) {
 800da1a:	2f00      	cmp	r7, #0
 800da1c:	d0dc      	beq.n	800d9d8 <etharp_query+0x110>
  err_t result = ERR_MEM;
 800da1e:	f04f 30ff 	mov.w	r0, #4294967295
 800da22:	e784      	b.n	800d92e <etharp_query+0x66>
 800da24:	20010970 	.word	0x20010970
 800da28:	080103a4 	.word	0x080103a4
 800da2c:	08012710 	.word	0x08012710
 800da30:	08012878 	.word	0x08012878
 800da34:	20010a60 	.word	0x20010a60
 800da38:	08012888 	.word	0x08012888

0800da3c <etharp_output>:
{
 800da3c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800da3e:	b085      	sub	sp, #20
 800da40:	460e      	mov	r6, r1
 800da42:	4614      	mov	r4, r2
  LWIP_ASSERT("netif != NULL", netif != NULL);
 800da44:	4605      	mov	r5, r0
 800da46:	2800      	cmp	r0, #0
 800da48:	d032      	beq.n	800dab0 <etharp_output+0x74>
  LWIP_ASSERT("q != NULL", q != NULL);
 800da4a:	2e00      	cmp	r6, #0
 800da4c:	d038      	beq.n	800dac0 <etharp_output+0x84>
  LWIP_ASSERT("ipaddr != NULL", ipaddr != NULL);
 800da4e:	2c00      	cmp	r4, #0
 800da50:	d03e      	beq.n	800dad0 <etharp_output+0x94>
  if (ip4_addr_isbroadcast(ipaddr, netif)) {
 800da52:	4629      	mov	r1, r5
 800da54:	6820      	ldr	r0, [r4, #0]
 800da56:	f000 fb66 	bl	800e126 <ip4_addr_isbroadcast_u32>
 800da5a:	2800      	cmp	r0, #0
 800da5c:	f040 8082 	bne.w	800db64 <etharp_output+0x128>
  } else if (ip4_addr_ismulticast(ipaddr)) {
 800da60:	6823      	ldr	r3, [r4, #0]
 800da62:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800da66:	2ae0      	cmp	r2, #224	; 0xe0
 800da68:	d03a      	beq.n	800dae0 <etharp_output+0xa4>
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 800da6a:	686a      	ldr	r2, [r5, #4]
 800da6c:	405a      	eors	r2, r3
 800da6e:	68a9      	ldr	r1, [r5, #8]
 800da70:	420a      	tst	r2, r1
 800da72:	d009      	beq.n	800da88 <etharp_output+0x4c>
        !ip4_addr_islinklocal(ipaddr)) {
 800da74:	b29b      	uxth	r3, r3
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 800da76:	f64f 62a9 	movw	r2, #65193	; 0xfea9
 800da7a:	4293      	cmp	r3, r2
 800da7c:	d004      	beq.n	800da88 <etharp_output+0x4c>
          if (!ip4_addr_isany_val(*netif_ip4_gw(netif))) {
 800da7e:	68eb      	ldr	r3, [r5, #12]
 800da80:	2b00      	cmp	r3, #0
 800da82:	d07b      	beq.n	800db7c <etharp_output+0x140>
            dst_addr = netif_ip4_gw(netif);
 800da84:	f105 040c 	add.w	r4, r5, #12
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 800da88:	4b3e      	ldr	r3, [pc, #248]	; (800db84 <etharp_output+0x148>)
 800da8a:	781a      	ldrb	r2, [r3, #0]
 800da8c:	eb02 0142 	add.w	r1, r2, r2, lsl #1
 800da90:	4b3d      	ldr	r3, [pc, #244]	; (800db88 <etharp_output+0x14c>)
 800da92:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
 800da96:	7d1b      	ldrb	r3, [r3, #20]
 800da98:	2b01      	cmp	r3, #1
 800da9a:	d906      	bls.n	800daaa <etharp_output+0x6e>
            (arp_table[etharp_cached_entry].netif == netif) &&
 800da9c:	460b      	mov	r3, r1
 800da9e:	493a      	ldr	r1, [pc, #232]	; (800db88 <etharp_output+0x14c>)
 800daa0:	eb01 03c3 	add.w	r3, r1, r3, lsl #3
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 800daa4:	689b      	ldr	r3, [r3, #8]
 800daa6:	42ab      	cmp	r3, r5
 800daa8:	d030      	beq.n	800db0c <etharp_output+0xd0>
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 800daaa:	4b37      	ldr	r3, [pc, #220]	; (800db88 <etharp_output+0x14c>)
{
 800daac:	2000      	movs	r0, #0
 800daae:	e03f      	b.n	800db30 <etharp_output+0xf4>
  LWIP_ASSERT("netif != NULL", netif != NULL);
 800dab0:	4b36      	ldr	r3, [pc, #216]	; (800db8c <etharp_output+0x150>)
 800dab2:	f240 321e 	movw	r2, #798	; 0x31e
 800dab6:	4936      	ldr	r1, [pc, #216]	; (800db90 <etharp_output+0x154>)
 800dab8:	4836      	ldr	r0, [pc, #216]	; (800db94 <etharp_output+0x158>)
 800daba:	f001 fb1b 	bl	800f0f4 <iprintf>
 800dabe:	e7c4      	b.n	800da4a <etharp_output+0xe>
  LWIP_ASSERT("q != NULL", q != NULL);
 800dac0:	4b32      	ldr	r3, [pc, #200]	; (800db8c <etharp_output+0x150>)
 800dac2:	f240 321f 	movw	r2, #799	; 0x31f
 800dac6:	4934      	ldr	r1, [pc, #208]	; (800db98 <etharp_output+0x15c>)
 800dac8:	4832      	ldr	r0, [pc, #200]	; (800db94 <etharp_output+0x158>)
 800daca:	f001 fb13 	bl	800f0f4 <iprintf>
 800dace:	e7be      	b.n	800da4e <etharp_output+0x12>
  LWIP_ASSERT("ipaddr != NULL", ipaddr != NULL);
 800dad0:	4b2e      	ldr	r3, [pc, #184]	; (800db8c <etharp_output+0x150>)
 800dad2:	f44f 7248 	mov.w	r2, #800	; 0x320
 800dad6:	4931      	ldr	r1, [pc, #196]	; (800db9c <etharp_output+0x160>)
 800dad8:	482e      	ldr	r0, [pc, #184]	; (800db94 <etharp_output+0x158>)
 800dada:	f001 fb0b 	bl	800f0f4 <iprintf>
 800dade:	e7b8      	b.n	800da52 <etharp_output+0x16>
    mcastaddr.addr[0] = LL_IP4_MULTICAST_ADDR_0;
 800dae0:	2301      	movs	r3, #1
 800dae2:	f88d 3008 	strb.w	r3, [sp, #8]
    mcastaddr.addr[1] = LL_IP4_MULTICAST_ADDR_1;
 800dae6:	2300      	movs	r3, #0
 800dae8:	f88d 3009 	strb.w	r3, [sp, #9]
    mcastaddr.addr[2] = LL_IP4_MULTICAST_ADDR_2;
 800daec:	235e      	movs	r3, #94	; 0x5e
 800daee:	f88d 300a 	strb.w	r3, [sp, #10]
    mcastaddr.addr[3] = ip4_addr2(ipaddr) & 0x7f;
 800daf2:	7863      	ldrb	r3, [r4, #1]
 800daf4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800daf8:	f88d 300b 	strb.w	r3, [sp, #11]
    mcastaddr.addr[4] = ip4_addr3(ipaddr);
 800dafc:	78a3      	ldrb	r3, [r4, #2]
 800dafe:	f88d 300c 	strb.w	r3, [sp, #12]
    mcastaddr.addr[5] = ip4_addr4(ipaddr);
 800db02:	78e3      	ldrb	r3, [r4, #3]
 800db04:	f88d 300d 	strb.w	r3, [sp, #13]
    dest = &mcastaddr;
 800db08:	ab02      	add	r3, sp, #8
 800db0a:	e02c      	b.n	800db66 <etharp_output+0x12a>
            (ip4_addr_cmp(dst_addr, &arp_table[etharp_cached_entry].ipaddr))) {
 800db0c:	eb02 0342 	add.w	r3, r2, r2, lsl #1
 800db10:	491d      	ldr	r1, [pc, #116]	; (800db88 <etharp_output+0x14c>)
 800db12:	eb01 03c3 	add.w	r3, r1, r3, lsl #3
            (arp_table[etharp_cached_entry].netif == netif) &&
 800db16:	6821      	ldr	r1, [r4, #0]
 800db18:	685b      	ldr	r3, [r3, #4]
 800db1a:	4299      	cmp	r1, r3
 800db1c:	d1c5      	bne.n	800daaa <etharp_output+0x6e>
          return etharp_output_to_arp_index(netif, q, etharp_cached_entry);
 800db1e:	4631      	mov	r1, r6
 800db20:	4628      	mov	r0, r5
 800db22:	f7ff fe5b 	bl	800d7dc <etharp_output_to_arp_index>
 800db26:	e027      	b.n	800db78 <etharp_output+0x13c>
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 800db28:	3001      	adds	r0, #1
 800db2a:	3318      	adds	r3, #24
 800db2c:	280a      	cmp	r0, #10
 800db2e:	d013      	beq.n	800db58 <etharp_output+0x11c>
 800db30:	b2c2      	uxtb	r2, r0
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 800db32:	f893 c014 	ldrb.w	ip, [r3, #20]
 800db36:	f1bc 0f01 	cmp.w	ip, #1
 800db3a:	d9f5      	bls.n	800db28 <etharp_output+0xec>
 800db3c:	6899      	ldr	r1, [r3, #8]
 800db3e:	42a9      	cmp	r1, r5
 800db40:	d1f2      	bne.n	800db28 <etharp_output+0xec>
          (arp_table[i].netif == netif) &&
 800db42:	6821      	ldr	r1, [r4, #0]
 800db44:	685f      	ldr	r7, [r3, #4]
 800db46:	42b9      	cmp	r1, r7
 800db48:	d1ee      	bne.n	800db28 <etharp_output+0xec>
        ETHARP_SET_ADDRHINT(netif, i);
 800db4a:	4b0e      	ldr	r3, [pc, #56]	; (800db84 <etharp_output+0x148>)
 800db4c:	701a      	strb	r2, [r3, #0]
        return etharp_output_to_arp_index(netif, q, i);
 800db4e:	4631      	mov	r1, r6
 800db50:	4628      	mov	r0, r5
 800db52:	f7ff fe43 	bl	800d7dc <etharp_output_to_arp_index>
 800db56:	e00f      	b.n	800db78 <etharp_output+0x13c>
    return etharp_query(netif, dst_addr, q);
 800db58:	4632      	mov	r2, r6
 800db5a:	4621      	mov	r1, r4
 800db5c:	4628      	mov	r0, r5
 800db5e:	f7ff feb3 	bl	800d8c8 <etharp_query>
 800db62:	e009      	b.n	800db78 <etharp_output+0x13c>
    dest = (const struct eth_addr *)&ethbroadcast;
 800db64:	4b0e      	ldr	r3, [pc, #56]	; (800dba0 <etharp_output+0x164>)
  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), dest, ETHTYPE_IP);
 800db66:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800db6a:	9200      	str	r2, [sp, #0]
 800db6c:	f105 0226 	add.w	r2, r5, #38	; 0x26
 800db70:	4631      	mov	r1, r6
 800db72:	4628      	mov	r0, r5
 800db74:	f000 ffa8 	bl	800eac8 <ethernet_output>
}
 800db78:	b005      	add	sp, #20
 800db7a:	bdf0      	pop	{r4, r5, r6, r7, pc}
            return ERR_RTE;
 800db7c:	f06f 0003 	mvn.w	r0, #3
 800db80:	e7fa      	b.n	800db78 <etharp_output+0x13c>
 800db82:	bf00      	nop
 800db84:	20010a60 	.word	0x20010a60
 800db88:	20010970 	.word	0x20010970
 800db8c:	08012710 	.word	0x08012710
 800db90:	08010394 	.word	0x08010394
 800db94:	080103a4 	.word	0x080103a4
 800db98:	080128a4 	.word	0x080128a4
 800db9c:	08012804 	.word	0x08012804
 800dba0:	08012bf0 	.word	0x08012bf0

0800dba4 <icmp_send_response>:
 * @param type Type of the ICMP header
 * @param code Code of the ICMP header
 */
static void
icmp_send_response(struct pbuf *p, u8_t type, u8_t code)
{
 800dba4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800dba8:	b086      	sub	sp, #24
 800dbaa:	4606      	mov	r6, r0
 800dbac:	4688      	mov	r8, r1
 800dbae:	4617      	mov	r7, r2

  /* increase number of messages attempted to send */
  MIB2_STATS_INC(mib2.icmpoutmsgs);

  /* ICMP header + IP header + 8 bytes of data */
  q = pbuf_alloc(PBUF_IP, sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE,
 800dbb0:	f44f 7220 	mov.w	r2, #640	; 0x280
 800dbb4:	2124      	movs	r1, #36	; 0x24
 800dbb6:	2022      	movs	r0, #34	; 0x22
 800dbb8:	f7fa fe16 	bl	80087e8 <pbuf_alloc>
                 PBUF_RAM);
  if (q == NULL) {
 800dbbc:	b3a0      	cbz	r0, 800dc28 <icmp_send_response+0x84>
 800dbbe:	4605      	mov	r5, r0
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_time_exceeded: failed to allocate pbuf for ICMP packet.\n"));
    MIB2_STATS_INC(mib2.icmpouterrors);
    return;
  }
  LWIP_ASSERT("check that first pbuf can hold icmp message",
 800dbc0:	8943      	ldrh	r3, [r0, #10]
 800dbc2:	2b23      	cmp	r3, #35	; 0x23
 800dbc4:	d933      	bls.n	800dc2e <icmp_send_response+0x8a>
              (q->len >= (sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE)));

  iphdr = (struct ip_hdr *)p->payload;
 800dbc6:	f8d6 c004 	ldr.w	ip, [r6, #4]
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->src);
  LWIP_DEBUGF(ICMP_DEBUG, (" to "));
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->dest);
  LWIP_DEBUGF(ICMP_DEBUG, ("\n"));

  icmphdr = (struct icmp_echo_hdr *)q->payload;
 800dbca:	686c      	ldr	r4, [r5, #4]
  icmphdr->type = type;
 800dbcc:	f884 8000 	strb.w	r8, [r4]
  icmphdr->code = code;
 800dbd0:	7067      	strb	r7, [r4, #1]
  icmphdr->id = 0;
 800dbd2:	2300      	movs	r3, #0
 800dbd4:	7123      	strb	r3, [r4, #4]
 800dbd6:	7163      	strb	r3, [r4, #5]
  icmphdr->seqno = 0;
 800dbd8:	71a3      	strb	r3, [r4, #6]
 800dbda:	71e3      	strb	r3, [r4, #7]

  /* copy fields from original packet */
  SMEMCPY((u8_t *)q->payload + sizeof(struct icmp_echo_hdr), (u8_t *)p->payload,
 800dbdc:	686b      	ldr	r3, [r5, #4]
 800dbde:	6872      	ldr	r2, [r6, #4]
 800dbe0:	6816      	ldr	r6, [r2, #0]
 800dbe2:	6850      	ldr	r0, [r2, #4]
 800dbe4:	6891      	ldr	r1, [r2, #8]
 800dbe6:	68d7      	ldr	r7, [r2, #12]
 800dbe8:	609e      	str	r6, [r3, #8]
 800dbea:	60d8      	str	r0, [r3, #12]
 800dbec:	6119      	str	r1, [r3, #16]
 800dbee:	615f      	str	r7, [r3, #20]
 800dbf0:	6916      	ldr	r6, [r2, #16]
 800dbf2:	6950      	ldr	r0, [r2, #20]
 800dbf4:	6991      	ldr	r1, [r2, #24]
 800dbf6:	619e      	str	r6, [r3, #24]
 800dbf8:	61d8      	str	r0, [r3, #28]
 800dbfa:	6219      	str	r1, [r3, #32]
          IP_HLEN + ICMP_DEST_UNREACH_DATASIZE);

  ip4_addr_copy(iphdr_src, iphdr->src);
 800dbfc:	f8dc 300c 	ldr.w	r3, [ip, #12]
 800dc00:	9305      	str	r3, [sp, #20]
    ip4_addr_t iphdr_dst;
    ip4_addr_copy(iphdr_dst, iphdr->dest);
    netif = ip4_route_src(&iphdr_dst, &iphdr_src);
  }
#else
  netif = ip4_route(&iphdr_src);
 800dc02:	a805      	add	r0, sp, #20
 800dc04:	f000 f8ee 	bl	800dde4 <ip4_route>
#endif
  if (netif != NULL) {
 800dc08:	b158      	cbz	r0, 800dc22 <icmp_send_response+0x7e>
    /* calculate checksum */
    icmphdr->chksum = 0;
 800dc0a:	2100      	movs	r1, #0
 800dc0c:	70a1      	strb	r1, [r4, #2]
 800dc0e:	70e1      	strb	r1, [r4, #3]
    IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_ICMP) {
      icmphdr->chksum = inet_chksum(icmphdr, q->len);
    }
#endif
    ICMP_STATS_INC(icmp.xmit);
    ip4_output_if(q, NULL, &iphdr_src, ICMP_TTL, 0, IP_PROTO_ICMP, netif);
 800dc10:	9002      	str	r0, [sp, #8]
 800dc12:	2301      	movs	r3, #1
 800dc14:	9301      	str	r3, [sp, #4]
 800dc16:	9100      	str	r1, [sp, #0]
 800dc18:	23ff      	movs	r3, #255	; 0xff
 800dc1a:	aa05      	add	r2, sp, #20
 800dc1c:	4628      	mov	r0, r5
 800dc1e:	f000 fa6d 	bl	800e0fc <ip4_output_if>
  }
  pbuf_free(q);
 800dc22:	4628      	mov	r0, r5
 800dc24:	f7fa fd70 	bl	8008708 <pbuf_free>
}
 800dc28:	b006      	add	sp, #24
 800dc2a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  LWIP_ASSERT("check that first pbuf can hold icmp message",
 800dc2e:	4b04      	ldr	r3, [pc, #16]	; (800dc40 <icmp_send_response+0x9c>)
 800dc30:	f44f 72b4 	mov.w	r2, #360	; 0x168
 800dc34:	4903      	ldr	r1, [pc, #12]	; (800dc44 <icmp_send_response+0xa0>)
 800dc36:	4804      	ldr	r0, [pc, #16]	; (800dc48 <icmp_send_response+0xa4>)
 800dc38:	f001 fa5c 	bl	800f0f4 <iprintf>
 800dc3c:	e7c3      	b.n	800dbc6 <icmp_send_response+0x22>
 800dc3e:	bf00      	nop
 800dc40:	080128b0 	.word	0x080128b0
 800dc44:	080128e8 	.word	0x080128e8
 800dc48:	080103a4 	.word	0x080103a4

0800dc4c <icmp_input>:
{
 800dc4c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800dc50:	b085      	sub	sp, #20
 800dc52:	4605      	mov	r5, r0
  iphdr_in = ip4_current_header();
 800dc54:	4b4a      	ldr	r3, [pc, #296]	; (800dd80 <icmp_input+0x134>)
 800dc56:	689f      	ldr	r7, [r3, #8]
  hlen = IPH_HL_BYTES(iphdr_in);
 800dc58:	783b      	ldrb	r3, [r7, #0]
 800dc5a:	f003 030f 	and.w	r3, r3, #15
 800dc5e:	ea4f 0883 	mov.w	r8, r3, lsl #2
 800dc62:	4644      	mov	r4, r8
  if (hlen < IP_HLEN) {
 800dc64:	2c13      	cmp	r4, #19
 800dc66:	d915      	bls.n	800dc94 <icmp_input+0x48>
 800dc68:	460e      	mov	r6, r1
  if (p->len < sizeof(u16_t) * 2) {
 800dc6a:	8943      	ldrh	r3, [r0, #10]
 800dc6c:	2b03      	cmp	r3, #3
 800dc6e:	d911      	bls.n	800dc94 <icmp_input+0x48>
  type = *((u8_t *)p->payload);
 800dc70:	6843      	ldr	r3, [r0, #4]
  switch (type) {
 800dc72:	781b      	ldrb	r3, [r3, #0]
 800dc74:	2b08      	cmp	r3, #8
 800dc76:	d161      	bne.n	800dd3c <icmp_input+0xf0>
      if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 800dc78:	4b41      	ldr	r3, [pc, #260]	; (800dd80 <icmp_input+0x134>)
 800dc7a:	6958      	ldr	r0, [r3, #20]
 800dc7c:	f000 03f0 	and.w	r3, r0, #240	; 0xf0
 800dc80:	2be0      	cmp	r3, #224	; 0xe0
 800dc82:	d01a      	beq.n	800dcba <icmp_input+0x6e>
      if (ip4_addr_isbroadcast(ip4_current_dest_addr(), ip_current_netif())) {
 800dc84:	4b3e      	ldr	r3, [pc, #248]	; (800dd80 <icmp_input+0x134>)
 800dc86:	6819      	ldr	r1, [r3, #0]
 800dc88:	f000 fa4d 	bl	800e126 <ip4_addr_isbroadcast_u32>
 800dc8c:	b9a8      	cbnz	r0, 800dcba <icmp_input+0x6e>
      if (p->tot_len < sizeof(struct icmp_echo_hdr)) {
 800dc8e:	892b      	ldrh	r3, [r5, #8]
 800dc90:	2b07      	cmp	r3, #7
 800dc92:	d805      	bhi.n	800dca0 <icmp_input+0x54>
  pbuf_free(p);
 800dc94:	4628      	mov	r0, r5
 800dc96:	f7fa fd37 	bl	8008708 <pbuf_free>
}
 800dc9a:	b005      	add	sp, #20
 800dc9c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
      if (pbuf_add_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 800dca0:	f108 090e 	add.w	r9, r8, #14
 800dca4:	4649      	mov	r1, r9
 800dca6:	4628      	mov	r0, r5
 800dca8:	f7fa fce9 	bl	800867e <pbuf_add_header>
 800dcac:	2800      	cmp	r0, #0
 800dcae:	d03a      	beq.n	800dd26 <icmp_input+0xda>
        u16_t alloc_len = (u16_t)(p->tot_len + hlen);
 800dcb0:	892a      	ldrh	r2, [r5, #8]
 800dcb2:	1913      	adds	r3, r2, r4
 800dcb4:	b299      	uxth	r1, r3
        if (alloc_len < p->tot_len) {
 800dcb6:	428a      	cmp	r2, r1
 800dcb8:	d903      	bls.n	800dcc2 <icmp_input+0x76>
  pbuf_free(p);
 800dcba:	4628      	mov	r0, r5
 800dcbc:	f7fa fd24 	bl	8008708 <pbuf_free>
  return;
 800dcc0:	e7eb      	b.n	800dc9a <icmp_input+0x4e>
        r = pbuf_alloc(PBUF_LINK, alloc_len, PBUF_RAM);
 800dcc2:	f44f 7220 	mov.w	r2, #640	; 0x280
 800dcc6:	200e      	movs	r0, #14
 800dcc8:	f7fa fd8e 	bl	80087e8 <pbuf_alloc>
        if (r == NULL) {
 800dccc:	4604      	mov	r4, r0
 800dcce:	2800      	cmp	r0, #0
 800dcd0:	d0f3      	beq.n	800dcba <icmp_input+0x6e>
        if (r->len < hlen + sizeof(struct icmp_echo_hdr)) {
 800dcd2:	8942      	ldrh	r2, [r0, #10]
 800dcd4:	f108 0308 	add.w	r3, r8, #8
 800dcd8:	429a      	cmp	r2, r3
 800dcda:	d313      	bcc.n	800dd04 <icmp_input+0xb8>
        MEMCPY(r->payload, iphdr_in, hlen);
 800dcdc:	4642      	mov	r2, r8
 800dcde:	4639      	mov	r1, r7
 800dce0:	6840      	ldr	r0, [r0, #4]
 800dce2:	f001 f942 	bl	800ef6a <memcpy>
        if (pbuf_remove_header(r, hlen)) {
 800dce6:	4641      	mov	r1, r8
 800dce8:	4620      	mov	r0, r4
 800dcea:	f7fa fccd 	bl	8008688 <pbuf_remove_header>
 800dcee:	b960      	cbnz	r0, 800dd0a <icmp_input+0xbe>
        if (pbuf_copy(r, p) != ERR_OK) {
 800dcf0:	4629      	mov	r1, r5
 800dcf2:	4620      	mov	r0, r4
 800dcf4:	f7fa fee6 	bl	8008ac4 <pbuf_copy>
 800dcf8:	b988      	cbnz	r0, 800dd1e <icmp_input+0xd2>
        pbuf_free(p);
 800dcfa:	4628      	mov	r0, r5
 800dcfc:	f7fa fd04 	bl	8008708 <pbuf_free>
        p = r;
 800dd00:	4625      	mov	r5, r4
 800dd02:	e015      	b.n	800dd30 <icmp_input+0xe4>
          pbuf_free(r);
 800dd04:	f7fa fd00 	bl	8008708 <pbuf_free>
          goto icmperr;
 800dd08:	e7d7      	b.n	800dcba <icmp_input+0x6e>
          LWIP_ASSERT("icmp_input: moving r->payload to icmp header failed\n", 0);
 800dd0a:	4b1e      	ldr	r3, [pc, #120]	; (800dd84 <icmp_input+0x138>)
 800dd0c:	22b6      	movs	r2, #182	; 0xb6
 800dd0e:	491e      	ldr	r1, [pc, #120]	; (800dd88 <icmp_input+0x13c>)
 800dd10:	481e      	ldr	r0, [pc, #120]	; (800dd8c <icmp_input+0x140>)
 800dd12:	f001 f9ef 	bl	800f0f4 <iprintf>
          pbuf_free(r);
 800dd16:	4620      	mov	r0, r4
 800dd18:	f7fa fcf6 	bl	8008708 <pbuf_free>
          goto icmperr;
 800dd1c:	e7cd      	b.n	800dcba <icmp_input+0x6e>
          pbuf_free(r);
 800dd1e:	4620      	mov	r0, r4
 800dd20:	f7fa fcf2 	bl	8008708 <pbuf_free>
          goto icmperr;
 800dd24:	e7c9      	b.n	800dcba <icmp_input+0x6e>
        if (pbuf_remove_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 800dd26:	4649      	mov	r1, r9
 800dd28:	4628      	mov	r0, r5
 800dd2a:	f7fa fcad 	bl	8008688 <pbuf_remove_header>
 800dd2e:	b948      	cbnz	r0, 800dd44 <icmp_input+0xf8>
      iecho = (struct icmp_echo_hdr *)p->payload;
 800dd30:	686c      	ldr	r4, [r5, #4]
      if (pbuf_add_header(p, hlen)) {
 800dd32:	4641      	mov	r1, r8
 800dd34:	4628      	mov	r0, r5
 800dd36:	f7fa fca2 	bl	800867e <pbuf_add_header>
 800dd3a:	b150      	cbz	r0, 800dd52 <icmp_input+0x106>
  pbuf_free(p);
 800dd3c:	4628      	mov	r0, r5
 800dd3e:	f7fa fce3 	bl	8008708 <pbuf_free>
  return;
 800dd42:	e7aa      	b.n	800dc9a <icmp_input+0x4e>
          LWIP_ASSERT("icmp_input: restoring original p->payload failed\n", 0);
 800dd44:	4b0f      	ldr	r3, [pc, #60]	; (800dd84 <icmp_input+0x138>)
 800dd46:	22c7      	movs	r2, #199	; 0xc7
 800dd48:	4911      	ldr	r1, [pc, #68]	; (800dd90 <icmp_input+0x144>)
 800dd4a:	4810      	ldr	r0, [pc, #64]	; (800dd8c <icmp_input+0x140>)
 800dd4c:	f001 f9d2 	bl	800f0f4 <iprintf>
          goto icmperr;
 800dd50:	e7b3      	b.n	800dcba <icmp_input+0x6e>
        struct ip_hdr *iphdr = (struct ip_hdr *)p->payload;
 800dd52:	6868      	ldr	r0, [r5, #4]
        ip4_addr_copy(iphdr->src, *src);
 800dd54:	490a      	ldr	r1, [pc, #40]	; (800dd80 <icmp_input+0x134>)
 800dd56:	694b      	ldr	r3, [r1, #20]
 800dd58:	60c3      	str	r3, [r0, #12]
        ip4_addr_copy(iphdr->dest, *ip4_current_src_addr());
 800dd5a:	690b      	ldr	r3, [r1, #16]
 800dd5c:	6103      	str	r3, [r0, #16]
        ICMPH_TYPE_SET(iecho, ICMP_ER);
 800dd5e:	2200      	movs	r2, #0
 800dd60:	7022      	strb	r2, [r4, #0]
        iecho->chksum = 0;
 800dd62:	70a2      	strb	r2, [r4, #2]
 800dd64:	70e2      	strb	r2, [r4, #3]
        IPH_TTL_SET(iphdr, ICMP_TTL);
 800dd66:	23ff      	movs	r3, #255	; 0xff
 800dd68:	7203      	strb	r3, [r0, #8]
        IPH_CHKSUM_SET(iphdr, 0);
 800dd6a:	7282      	strb	r2, [r0, #10]
 800dd6c:	72c2      	strb	r2, [r0, #11]
        ret = ip4_output_if(p, src, LWIP_IP_HDRINCL,
 800dd6e:	9602      	str	r6, [sp, #8]
 800dd70:	2001      	movs	r0, #1
 800dd72:	9001      	str	r0, [sp, #4]
 800dd74:	9200      	str	r2, [sp, #0]
 800dd76:	3114      	adds	r1, #20
 800dd78:	4628      	mov	r0, r5
 800dd7a:	f000 f9bf 	bl	800e0fc <ip4_output_if>
        if (ret != ERR_OK) {
 800dd7e:	e7dd      	b.n	800dd3c <icmp_input+0xf0>
 800dd80:	2000aff0 	.word	0x2000aff0
 800dd84:	080128b0 	.word	0x080128b0
 800dd88:	08012914 	.word	0x08012914
 800dd8c:	080103a4 	.word	0x080103a4
 800dd90:	0801294c 	.word	0x0801294c

0800dd94 <icmp_dest_unreach>:
{
 800dd94:	b508      	push	{r3, lr}
 800dd96:	460a      	mov	r2, r1
  icmp_send_response(p, ICMP_DUR, t);
 800dd98:	2103      	movs	r1, #3
 800dd9a:	f7ff ff03 	bl	800dba4 <icmp_send_response>
}
 800dd9e:	bd08      	pop	{r3, pc}

0800dda0 <icmp_time_exceeded>:
{
 800dda0:	b508      	push	{r3, lr}
 800dda2:	460a      	mov	r2, r1
  icmp_send_response(p, ICMP_TE, t);
 800dda4:	210b      	movs	r1, #11
 800dda6:	f7ff fefd 	bl	800dba4 <icmp_send_response>
}
 800ddaa:	bd08      	pop	{r3, pc}

0800ddac <ip4_input_accept>:
#endif /* IP_FORWARD */

/** Return true if the current input packet should be accepted on this netif */
static int
ip4_input_accept(struct netif *netif)
{
 800ddac:	b508      	push	{r3, lr}
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(netif_ip4_addr(netif)) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ~ip4_addr_get_u32(netif_ip4_netmask(netif))));

  /* interface is up and configured? */
  if ((netif_is_up(netif)) && (!ip4_addr_isany_val(*netif_ip4_addr(netif)))) {
 800ddae:	f890 302d 	ldrb.w	r3, [r0, #45]	; 0x2d
 800ddb2:	f013 0f01 	tst.w	r3, #1
 800ddb6:	d00c      	beq.n	800ddd2 <ip4_input_accept+0x26>
 800ddb8:	4601      	mov	r1, r0
 800ddba:	6843      	ldr	r3, [r0, #4]
 800ddbc:	b15b      	cbz	r3, 800ddd6 <ip4_input_accept+0x2a>
    /* unicast to this interface address? */
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 800ddbe:	4a08      	ldr	r2, [pc, #32]	; (800dde0 <ip4_input_accept+0x34>)
 800ddc0:	6950      	ldr	r0, [r2, #20]
 800ddc2:	4283      	cmp	r3, r0
 800ddc4:	d009      	beq.n	800ddda <ip4_input_accept+0x2e>
        /* or broadcast on this interface network address? */
        ip4_addr_isbroadcast(ip4_current_dest_addr(), netif)
 800ddc6:	f000 f9ae 	bl	800e126 <ip4_addr_isbroadcast_u32>
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 800ddca:	3800      	subs	r0, #0
 800ddcc:	bf18      	it	ne
 800ddce:	2001      	movne	r0, #1
 800ddd0:	e000      	b.n	800ddd4 <ip4_input_accept+0x28>
      /* accept on this netif */
      return 1;
    }
#endif /* LWIP_AUTOIP */
  }
  return 0;
 800ddd2:	2000      	movs	r0, #0
}
 800ddd4:	bd08      	pop	{r3, pc}
  return 0;
 800ddd6:	2000      	movs	r0, #0
 800ddd8:	e7fc      	b.n	800ddd4 <ip4_input_accept+0x28>
      return 1;
 800ddda:	2001      	movs	r0, #1
 800dddc:	e7fa      	b.n	800ddd4 <ip4_input_accept+0x28>
 800ddde:	bf00      	nop
 800dde0:	2000aff0 	.word	0x2000aff0

0800dde4 <ip4_route>:
{
 800dde4:	b410      	push	{r4}
 800dde6:	4684      	mov	ip, r0
  NETIF_FOREACH(netif) {
 800dde8:	4b1a      	ldr	r3, [pc, #104]	; (800de54 <ip4_route+0x70>)
 800ddea:	6818      	ldr	r0, [r3, #0]
 800ddec:	b9a8      	cbnz	r0, 800de1a <ip4_route+0x36>
  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 800ddee:	4b1a      	ldr	r3, [pc, #104]	; (800de58 <ip4_route+0x74>)
 800ddf0:	6818      	ldr	r0, [r3, #0]
 800ddf2:	b160      	cbz	r0, 800de0e <ip4_route+0x2a>
 800ddf4:	f890 302d 	ldrb.w	r3, [r0, #45]	; 0x2d
 800ddf8:	f003 0305 	and.w	r3, r3, #5
 800ddfc:	2b05      	cmp	r3, #5
 800ddfe:	d124      	bne.n	800de4a <ip4_route+0x66>
 800de00:	6843      	ldr	r3, [r0, #4]
 800de02:	b323      	cbz	r3, 800de4e <ip4_route+0x6a>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 800de04:	f89c 3000 	ldrb.w	r3, [ip]
    return NULL;
 800de08:	2b7f      	cmp	r3, #127	; 0x7f
 800de0a:	bf08      	it	eq
 800de0c:	2000      	moveq	r0, #0
}
 800de0e:	f85d 4b04 	ldr.w	r4, [sp], #4
 800de12:	4770      	bx	lr
  NETIF_FOREACH(netif) {
 800de14:	6800      	ldr	r0, [r0, #0]
 800de16:	2800      	cmp	r0, #0
 800de18:	d0e9      	beq.n	800ddee <ip4_route+0xa>
    if (netif_is_up(netif) && netif_is_link_up(netif) && !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 800de1a:	f890 302d 	ldrb.w	r3, [r0, #45]	; 0x2d
 800de1e:	f013 0f01 	tst.w	r3, #1
 800de22:	d0f7      	beq.n	800de14 <ip4_route+0x30>
 800de24:	f013 0f04 	tst.w	r3, #4
 800de28:	d0f4      	beq.n	800de14 <ip4_route+0x30>
 800de2a:	6842      	ldr	r2, [r0, #4]
 800de2c:	2a00      	cmp	r2, #0
 800de2e:	d0f1      	beq.n	800de14 <ip4_route+0x30>
      if (ip4_addr_netcmp(dest, netif_ip4_addr(netif), netif_ip4_netmask(netif))) {
 800de30:	f8dc 1000 	ldr.w	r1, [ip]
 800de34:	404a      	eors	r2, r1
 800de36:	6884      	ldr	r4, [r0, #8]
 800de38:	4222      	tst	r2, r4
 800de3a:	d0e8      	beq.n	800de0e <ip4_route+0x2a>
      if (((netif->flags & NETIF_FLAG_BROADCAST) == 0) && ip4_addr_cmp(dest, netif_ip4_gw(netif))) {
 800de3c:	f013 0f02 	tst.w	r3, #2
 800de40:	d1e8      	bne.n	800de14 <ip4_route+0x30>
 800de42:	68c3      	ldr	r3, [r0, #12]
 800de44:	4299      	cmp	r1, r3
 800de46:	d1e5      	bne.n	800de14 <ip4_route+0x30>
 800de48:	e7e1      	b.n	800de0e <ip4_route+0x2a>
    return NULL;
 800de4a:	2000      	movs	r0, #0
 800de4c:	e7df      	b.n	800de0e <ip4_route+0x2a>
 800de4e:	2000      	movs	r0, #0
 800de50:	e7dd      	b.n	800de0e <ip4_route+0x2a>
 800de52:	bf00      	nop
 800de54:	200108fc 	.word	0x200108fc
 800de58:	200108f8 	.word	0x200108f8

0800de5c <ip4_input>:
 * @return ERR_OK if the packet was processed (could return ERR_* if it wasn't
 *         processed, but currently always returns ERR_OK)
 */
err_t
ip4_input(struct pbuf *p, struct netif *inp)
{
 800de5c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800de60:	4604      	mov	r4, r0

  IP_STATS_INC(ip.recv);
  MIB2_STATS_INC(mib2.ipinreceives);

  /* identify the IP header */
  iphdr = (struct ip_hdr *)p->payload;
 800de62:	f8d0 8004 	ldr.w	r8, [r0, #4]
  if (IPH_V(iphdr) != 4) {
 800de66:	f898 3000 	ldrb.w	r3, [r8]
 800de6a:	091a      	lsrs	r2, r3, #4
 800de6c:	2a04      	cmp	r2, #4
 800de6e:	d004      	beq.n	800de7a <ip4_input+0x1e>
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_WARNING, ("IP packet dropped due to bad version number %"U16_F"\n", (u16_t)IPH_V(iphdr)));
    ip4_debug_print(p);
    pbuf_free(p);
 800de70:	f7fa fc4a 	bl	8008708 <pbuf_free>
  ip_data.current_ip_header_tot_len = 0;
  ip4_addr_set_any(ip4_current_src_addr());
  ip4_addr_set_any(ip4_current_dest_addr());

  return ERR_OK;
}
 800de74:	2000      	movs	r0, #0
 800de76:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800de7a:	460f      	mov	r7, r1
  iphdr_hlen = IPH_HL_BYTES(iphdr);
 800de7c:	f003 030f 	and.w	r3, r3, #15
 800de80:	ea4f 0983 	mov.w	r9, r3, lsl #2
 800de84:	464d      	mov	r5, r9
  iphdr_len = lwip_ntohs(IPH_LEN(iphdr));
 800de86:	f8b8 0002 	ldrh.w	r0, [r8, #2]
 800de8a:	f7f9 fdfd 	bl	8007a88 <lwip_htons>
 800de8e:	4606      	mov	r6, r0
  if (iphdr_len < p->tot_len) {
 800de90:	8923      	ldrh	r3, [r4, #8]
 800de92:	4283      	cmp	r3, r0
 800de94:	d860      	bhi.n	800df58 <ip4_input+0xfc>
  if ((iphdr_hlen > p->len) || (iphdr_len > p->tot_len) || (iphdr_hlen < IP_HLEN)) {
 800de96:	8963      	ldrh	r3, [r4, #10]
 800de98:	42ab      	cmp	r3, r5
 800de9a:	d362      	bcc.n	800df62 <ip4_input+0x106>
 800de9c:	8923      	ldrh	r3, [r4, #8]
 800de9e:	42b3      	cmp	r3, r6
 800dea0:	d35f      	bcc.n	800df62 <ip4_input+0x106>
 800dea2:	2d13      	cmp	r5, #19
 800dea4:	d95d      	bls.n	800df62 <ip4_input+0x106>
  ip_addr_copy_from_ip4(ip_data.current_iphdr_dest, iphdr->dest);
 800dea6:	f8d8 3010 	ldr.w	r3, [r8, #16]
 800deaa:	4a52      	ldr	r2, [pc, #328]	; (800dff4 <ip4_input+0x198>)
 800deac:	6153      	str	r3, [r2, #20]
  ip_addr_copy_from_ip4(ip_data.current_iphdr_src, iphdr->src);
 800deae:	f8d8 100c 	ldr.w	r1, [r8, #12]
 800deb2:	6111      	str	r1, [r2, #16]
  if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 800deb4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800deb8:	2be0      	cmp	r3, #224	; 0xe0
 800deba:	d156      	bne.n	800df6a <ip4_input+0x10e>
    if ((netif_is_up(inp)) && (!ip4_addr_isany_val(*netif_ip4_addr(inp)))) {
 800debc:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800dec0:	f013 0f01 	tst.w	r3, #1
 800dec4:	d068      	beq.n	800df98 <ip4_input+0x13c>
 800dec6:	687b      	ldr	r3, [r7, #4]
      netif = inp;
 800dec8:	2b00      	cmp	r3, #0
 800deca:	bf14      	ite	ne
 800decc:	463d      	movne	r5, r7
 800dece:	2500      	moveq	r5, #0
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 800ded0:	4639      	mov	r1, r7
 800ded2:	4b48      	ldr	r3, [pc, #288]	; (800dff4 <ip4_input+0x198>)
 800ded4:	6918      	ldr	r0, [r3, #16]
 800ded6:	f000 f926 	bl	800e126 <ip4_addr_isbroadcast_u32>
 800deda:	2800      	cmp	r0, #0
 800dedc:	d162      	bne.n	800dfa4 <ip4_input+0x148>
        (ip4_addr_ismulticast(ip4_current_src_addr()))) {
 800dede:	4b45      	ldr	r3, [pc, #276]	; (800dff4 <ip4_input+0x198>)
 800dee0:	691b      	ldr	r3, [r3, #16]
 800dee2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 800dee6:	2be0      	cmp	r3, #224	; 0xe0
 800dee8:	d05c      	beq.n	800dfa4 <ip4_input+0x148>
  if (netif == NULL) {
 800deea:	2d00      	cmp	r5, #0
 800deec:	d05e      	beq.n	800dfac <ip4_input+0x150>
  if ((IPH_OFFSET(iphdr) & PP_HTONS(IP_OFFMASK | IP_MF)) != 0) {
 800deee:	f8b8 3006 	ldrh.w	r3, [r8, #6]
 800def2:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800def6:	b29b      	uxth	r3, r3
 800def8:	b13b      	cbz	r3, 800df0a <ip4_input+0xae>
    p = ip4_reass(p);
 800defa:	4620      	mov	r0, r4
 800defc:	f000 fa62 	bl	800e3c4 <ip4_reass>
    if (p == NULL) {
 800df00:	4604      	mov	r4, r0
 800df02:	2800      	cmp	r0, #0
 800df04:	d0b6      	beq.n	800de74 <ip4_input+0x18>
    iphdr = (const struct ip_hdr *)p->payload;
 800df06:	f8d0 8004 	ldr.w	r8, [r0, #4]
  ip_data.current_netif = netif;
 800df0a:	4a3a      	ldr	r2, [pc, #232]	; (800dff4 <ip4_input+0x198>)
 800df0c:	6015      	str	r5, [r2, #0]
  ip_data.current_input_netif = inp;
 800df0e:	6057      	str	r7, [r2, #4]
  ip_data.current_ip4_header = iphdr;
 800df10:	f8c2 8008 	str.w	r8, [r2, #8]
  ip_data.current_ip_header_tot_len = IPH_HL_BYTES(iphdr);
 800df14:	f898 3000 	ldrb.w	r3, [r8]
 800df18:	f003 030f 	and.w	r3, r3, #15
 800df1c:	009b      	lsls	r3, r3, #2
 800df1e:	8193      	strh	r3, [r2, #12]
    pbuf_remove_header(p, iphdr_hlen); /* Move to payload, no check necessary. */
 800df20:	4649      	mov	r1, r9
 800df22:	4620      	mov	r0, r4
 800df24:	f7fa fbb0 	bl	8008688 <pbuf_remove_header>
    switch (IPH_PROTO(iphdr)) {
 800df28:	f898 3009 	ldrb.w	r3, [r8, #9]
 800df2c:	2b06      	cmp	r3, #6
 800df2e:	d04e      	beq.n	800dfce <ip4_input+0x172>
 800df30:	2b11      	cmp	r3, #17
 800df32:	d03f      	beq.n	800dfb4 <ip4_input+0x158>
 800df34:	2b01      	cmp	r3, #1
 800df36:	d04f      	beq.n	800dfd8 <ip4_input+0x17c>
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 800df38:	4629      	mov	r1, r5
 800df3a:	4b2e      	ldr	r3, [pc, #184]	; (800dff4 <ip4_input+0x198>)
 800df3c:	6958      	ldr	r0, [r3, #20]
 800df3e:	f000 f8f2 	bl	800e126 <ip4_addr_isbroadcast_u32>
 800df42:	b928      	cbnz	r0, 800df50 <ip4_input+0xf4>
              !ip4_addr_ismulticast(ip4_current_dest_addr())) {
 800df44:	4b2b      	ldr	r3, [pc, #172]	; (800dff4 <ip4_input+0x198>)
 800df46:	695b      	ldr	r3, [r3, #20]
 800df48:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 800df4c:	2be0      	cmp	r3, #224	; 0xe0
 800df4e:	d148      	bne.n	800dfe2 <ip4_input+0x186>
        pbuf_free(p);
 800df50:	4620      	mov	r0, r4
 800df52:	f7fa fbd9 	bl	8008708 <pbuf_free>
        break;
 800df56:	e031      	b.n	800dfbc <ip4_input+0x160>
    pbuf_realloc(p, iphdr_len);
 800df58:	4601      	mov	r1, r0
 800df5a:	4620      	mov	r0, r4
 800df5c:	f7fa fcec 	bl	8008938 <pbuf_realloc>
 800df60:	e799      	b.n	800de96 <ip4_input+0x3a>
    pbuf_free(p);
 800df62:	4620      	mov	r0, r4
 800df64:	f7fa fbd0 	bl	8008708 <pbuf_free>
    return ERR_OK;
 800df68:	e784      	b.n	800de74 <ip4_input+0x18>
    if (ip4_input_accept(inp)) {
 800df6a:	4638      	mov	r0, r7
 800df6c:	f7ff ff1e 	bl	800ddac <ip4_input_accept>
 800df70:	b9a0      	cbnz	r0, 800df9c <ip4_input+0x140>
      if (!ip4_addr_isloopback(ip4_current_dest_addr()))
 800df72:	4b20      	ldr	r3, [pc, #128]	; (800dff4 <ip4_input+0x198>)
 800df74:	7d1b      	ldrb	r3, [r3, #20]
 800df76:	2b7f      	cmp	r3, #127	; 0x7f
 800df78:	d012      	beq.n	800dfa0 <ip4_input+0x144>
        NETIF_FOREACH(netif) {
 800df7a:	4b1f      	ldr	r3, [pc, #124]	; (800dff8 <ip4_input+0x19c>)
 800df7c:	681d      	ldr	r5, [r3, #0]
 800df7e:	b91d      	cbnz	r5, 800df88 <ip4_input+0x12c>
 800df80:	e7a6      	b.n	800ded0 <ip4_input+0x74>
 800df82:	682d      	ldr	r5, [r5, #0]
 800df84:	2d00      	cmp	r5, #0
 800df86:	d0a3      	beq.n	800ded0 <ip4_input+0x74>
          if (netif == inp) {
 800df88:	42af      	cmp	r7, r5
 800df8a:	d0fa      	beq.n	800df82 <ip4_input+0x126>
          if (ip4_input_accept(netif)) {
 800df8c:	4628      	mov	r0, r5
 800df8e:	f7ff ff0d 	bl	800ddac <ip4_input_accept>
 800df92:	2800      	cmp	r0, #0
 800df94:	d0f5      	beq.n	800df82 <ip4_input+0x126>
 800df96:	e79b      	b.n	800ded0 <ip4_input+0x74>
      netif = NULL;
 800df98:	2500      	movs	r5, #0
 800df9a:	e799      	b.n	800ded0 <ip4_input+0x74>
      netif = inp;
 800df9c:	463d      	mov	r5, r7
 800df9e:	e797      	b.n	800ded0 <ip4_input+0x74>
      netif = NULL;
 800dfa0:	2500      	movs	r5, #0
 800dfa2:	e795      	b.n	800ded0 <ip4_input+0x74>
      pbuf_free(p);
 800dfa4:	4620      	mov	r0, r4
 800dfa6:	f7fa fbaf 	bl	8008708 <pbuf_free>
      return ERR_OK;
 800dfaa:	e763      	b.n	800de74 <ip4_input+0x18>
    pbuf_free(p);
 800dfac:	4620      	mov	r0, r4
 800dfae:	f7fa fbab 	bl	8008708 <pbuf_free>
    return ERR_OK;
 800dfb2:	e75f      	b.n	800de74 <ip4_input+0x18>
        udp_input(p, inp);
 800dfb4:	4639      	mov	r1, r7
 800dfb6:	4620      	mov	r0, r4
 800dfb8:	f7fe fff0 	bl	800cf9c <udp_input>
  ip_data.current_netif = NULL;
 800dfbc:	4b0d      	ldr	r3, [pc, #52]	; (800dff4 <ip4_input+0x198>)
 800dfbe:	2200      	movs	r2, #0
 800dfc0:	601a      	str	r2, [r3, #0]
  ip_data.current_input_netif = NULL;
 800dfc2:	605a      	str	r2, [r3, #4]
  ip_data.current_ip4_header = NULL;
 800dfc4:	609a      	str	r2, [r3, #8]
  ip_data.current_ip_header_tot_len = 0;
 800dfc6:	819a      	strh	r2, [r3, #12]
  ip4_addr_set_any(ip4_current_src_addr());
 800dfc8:	611a      	str	r2, [r3, #16]
  ip4_addr_set_any(ip4_current_dest_addr());
 800dfca:	615a      	str	r2, [r3, #20]
  return ERR_OK;
 800dfcc:	e752      	b.n	800de74 <ip4_input+0x18>
        tcp_input(p, inp);
 800dfce:	4639      	mov	r1, r7
 800dfd0:	4620      	mov	r0, r4
 800dfd2:	f7fc fdf5 	bl	800abc0 <tcp_input>
        break;
 800dfd6:	e7f1      	b.n	800dfbc <ip4_input+0x160>
        icmp_input(p, inp);
 800dfd8:	4639      	mov	r1, r7
 800dfda:	4620      	mov	r0, r4
 800dfdc:	f7ff fe36 	bl	800dc4c <icmp_input>
        break;
 800dfe0:	e7ec      	b.n	800dfbc <ip4_input+0x160>
            pbuf_header_force(p, (s16_t)iphdr_hlen); /* Move to ip header, no check necessary. */
 800dfe2:	4649      	mov	r1, r9
 800dfe4:	4620      	mov	r0, r4
 800dfe6:	f7fa fb83 	bl	80086f0 <pbuf_header_force>
            icmp_dest_unreach(p, ICMP_DUR_PROTO);
 800dfea:	2102      	movs	r1, #2
 800dfec:	4620      	mov	r0, r4
 800dfee:	f7ff fed1 	bl	800dd94 <icmp_dest_unreach>
 800dff2:	e7ad      	b.n	800df50 <ip4_input+0xf4>
 800dff4:	2000aff0 	.word	0x2000aff0
 800dff8:	200108fc 	.word	0x200108fc

0800dffc <ip4_output_if_src>:
 */
err_t
ip4_output_if_src(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos,
                  u8_t proto, struct netif *netif)
{
 800dffc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800e000:	b083      	sub	sp, #12
 800e002:	4604      	mov	r4, r0
 800e004:	460f      	mov	r7, r1
 800e006:	4616      	mov	r6, r2
 800e008:	4699      	mov	r9, r3
 800e00a:	f8dd 8030 	ldr.w	r8, [sp, #48]	; 0x30
#if CHECKSUM_GEN_IP_INLINE
  u32_t chk_sum = 0;
#endif /* CHECKSUM_GEN_IP_INLINE */

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_IP_CHECK_PBUF_REF_COUNT_FOR_TX(p);
 800e00e:	7b82      	ldrb	r2, [r0, #14]
 800e010:	2a01      	cmp	r2, #1
 800e012:	d13f      	bne.n	800e094 <ip4_output_if_src+0x98>

  MIB2_STATS_INC(mib2.ipoutrequests);

  /* Should the IP header be generated or is it already included in p? */
  if (dest != LWIP_IP_HDRINCL) {
 800e014:	2e00      	cmp	r6, #0
 800e016:	d050      	beq.n	800e0ba <ip4_output_if_src+0xbe>
      }
#endif /* CHECKSUM_GEN_IP_INLINE */
    }
#endif /* IP_OPTIONS_SEND */
    /* generate IP header */
    if (pbuf_add_header(p, IP_HLEN)) {
 800e018:	2114      	movs	r1, #20
 800e01a:	4620      	mov	r0, r4
 800e01c:	f7fa fb2f 	bl	800867e <pbuf_add_header>
 800e020:	2800      	cmp	r0, #0
 800e022:	d158      	bne.n	800e0d6 <ip4_output_if_src+0xda>
      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
    }

    iphdr = (struct ip_hdr *)p->payload;
 800e024:	6865      	ldr	r5, [r4, #4]
    LWIP_ASSERT("check that first pbuf can hold struct ip_hdr",
 800e026:	8963      	ldrh	r3, [r4, #10]
 800e028:	2b13      	cmp	r3, #19
 800e02a:	d93b      	bls.n	800e0a4 <ip4_output_if_src+0xa8>
                (p->len >= sizeof(struct ip_hdr)));

    IPH_TTL_SET(iphdr, ttl);
 800e02c:	f885 9008 	strb.w	r9, [r5, #8]
    IPH_PROTO_SET(iphdr, proto);
 800e030:	f89d 302c 	ldrb.w	r3, [sp, #44]	; 0x2c
 800e034:	726b      	strb	r3, [r5, #9]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(proto | (ttl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */

    /* dest cannot be NULL here */
    ip4_addr_copy(iphdr->dest, *dest);
 800e036:	6833      	ldr	r3, [r6, #0]
 800e038:	612b      	str	r3, [r5, #16]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += ip4_addr_get_u32(&iphdr->dest) & 0xFFFF;
    chk_sum += ip4_addr_get_u32(&iphdr->dest) >> 16;
#endif /* CHECKSUM_GEN_IP_INLINE */

    IPH_VHL_SET(iphdr, 4, ip_hlen / 4);
 800e03a:	2345      	movs	r3, #69	; 0x45
 800e03c:	702b      	strb	r3, [r5, #0]
    IPH_TOS_SET(iphdr, tos);
 800e03e:	f89d 3028 	ldrb.w	r3, [sp, #40]	; 0x28
 800e042:	706b      	strb	r3, [r5, #1]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(tos | (iphdr->_v_hl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_LEN_SET(iphdr, lwip_htons(p->tot_len));
 800e044:	8920      	ldrh	r0, [r4, #8]
 800e046:	f7f9 fd1f 	bl	8007a88 <lwip_htons>
 800e04a:	8068      	strh	r0, [r5, #2]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_len;
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_OFFSET_SET(iphdr, 0);
 800e04c:	2300      	movs	r3, #0
 800e04e:	71ab      	strb	r3, [r5, #6]
 800e050:	71eb      	strb	r3, [r5, #7]
    IPH_ID_SET(iphdr, lwip_htons(ip_id));
 800e052:	f8df 90a4 	ldr.w	r9, [pc, #164]	; 800e0f8 <ip4_output_if_src+0xfc>
 800e056:	f8b9 0000 	ldrh.w	r0, [r9]
 800e05a:	f7f9 fd15 	bl	8007a88 <lwip_htons>
 800e05e:	80a8      	strh	r0, [r5, #4]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_id;
#endif /* CHECKSUM_GEN_IP_INLINE */
    ++ip_id;
 800e060:	f8b9 3000 	ldrh.w	r3, [r9]
 800e064:	3301      	adds	r3, #1
 800e066:	f8a9 3000 	strh.w	r3, [r9]

    if (src == NULL) {
 800e06a:	b31f      	cbz	r7, 800e0b4 <ip4_output_if_src+0xb8>
      ip4_addr_copy(iphdr->src, *IP4_ADDR_ANY4);
    } else {
      /* src cannot be NULL here */
      ip4_addr_copy(iphdr->src, *src);
 800e06c:	683b      	ldr	r3, [r7, #0]
 800e06e:	60eb      	str	r3, [r5, #12]
    else {
      IPH_CHKSUM_SET(iphdr, 0);
    }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF*/
#else /* CHECKSUM_GEN_IP_INLINE */
    IPH_CHKSUM_SET(iphdr, 0);
 800e070:	2300      	movs	r3, #0
 800e072:	72ab      	strb	r3, [r5, #10]
 800e074:	72eb      	strb	r3, [r5, #11]
  }
#endif /* LWIP_MULTICAST_TX_OPTIONS */
#endif /* ENABLE_LOOPBACK */
#if IP_FRAG
  /* don't fragment if interface has mtu set to 0 [loopif] */
  if (netif->mtu && (p->tot_len > netif->mtu)) {
 800e076:	f8b8 3024 	ldrh.w	r3, [r8, #36]	; 0x24
 800e07a:	b113      	cbz	r3, 800e082 <ip4_output_if_src+0x86>
 800e07c:	8922      	ldrh	r2, [r4, #8]
 800e07e:	429a      	cmp	r2, r3
 800e080:	d823      	bhi.n	800e0ca <ip4_output_if_src+0xce>
    return ip4_frag(p, netif, dest);
  }
#endif /* IP_FRAG */

  LWIP_DEBUGF(IP_DEBUG, ("ip4_output_if: call netif->output()\n"));
  return netif->output(netif, p, dest);
 800e082:	f8d8 3014 	ldr.w	r3, [r8, #20]
 800e086:	4632      	mov	r2, r6
 800e088:	4621      	mov	r1, r4
 800e08a:	4640      	mov	r0, r8
 800e08c:	4798      	blx	r3
}
 800e08e:	b003      	add	sp, #12
 800e090:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  LWIP_IP_CHECK_PBUF_REF_COUNT_FOR_TX(p);
 800e094:	4b13      	ldr	r3, [pc, #76]	; (800e0e4 <ip4_output_if_src+0xe8>)
 800e096:	f44f 7255 	mov.w	r2, #852	; 0x354
 800e09a:	4913      	ldr	r1, [pc, #76]	; (800e0e8 <ip4_output_if_src+0xec>)
 800e09c:	4813      	ldr	r0, [pc, #76]	; (800e0ec <ip4_output_if_src+0xf0>)
 800e09e:	f001 f829 	bl	800f0f4 <iprintf>
 800e0a2:	e7b7      	b.n	800e014 <ip4_output_if_src+0x18>
    LWIP_ASSERT("check that first pbuf can hold struct ip_hdr",
 800e0a4:	4b0f      	ldr	r3, [pc, #60]	; (800e0e4 <ip4_output_if_src+0xe8>)
 800e0a6:	f44f 7262 	mov.w	r2, #904	; 0x388
 800e0aa:	4911      	ldr	r1, [pc, #68]	; (800e0f0 <ip4_output_if_src+0xf4>)
 800e0ac:	480f      	ldr	r0, [pc, #60]	; (800e0ec <ip4_output_if_src+0xf0>)
 800e0ae:	f001 f821 	bl	800f0f4 <iprintf>
 800e0b2:	e7bb      	b.n	800e02c <ip4_output_if_src+0x30>
      ip4_addr_copy(iphdr->src, *IP4_ADDR_ANY4);
 800e0b4:	4b0f      	ldr	r3, [pc, #60]	; (800e0f4 <ip4_output_if_src+0xf8>)
 800e0b6:	681b      	ldr	r3, [r3, #0]
 800e0b8:	e7d9      	b.n	800e06e <ip4_output_if_src+0x72>
    if (p->len < IP_HLEN) {
 800e0ba:	8963      	ldrh	r3, [r4, #10]
 800e0bc:	2b13      	cmp	r3, #19
 800e0be:	d90d      	bls.n	800e0dc <ip4_output_if_src+0xe0>
    ip4_addr_copy(dest_addr, iphdr->dest);
 800e0c0:	6863      	ldr	r3, [r4, #4]
 800e0c2:	691b      	ldr	r3, [r3, #16]
 800e0c4:	9301      	str	r3, [sp, #4]
    dest = &dest_addr;
 800e0c6:	ae01      	add	r6, sp, #4
 800e0c8:	e7d5      	b.n	800e076 <ip4_output_if_src+0x7a>
    return ip4_frag(p, netif, dest);
 800e0ca:	4632      	mov	r2, r6
 800e0cc:	4641      	mov	r1, r8
 800e0ce:	4620      	mov	r0, r4
 800e0d0:	f000 fba2 	bl	800e818 <ip4_frag>
 800e0d4:	e7db      	b.n	800e08e <ip4_output_if_src+0x92>
      return ERR_BUF;
 800e0d6:	f06f 0001 	mvn.w	r0, #1
 800e0da:	e7d8      	b.n	800e08e <ip4_output_if_src+0x92>
      return ERR_BUF;
 800e0dc:	f06f 0001 	mvn.w	r0, #1
 800e0e0:	e7d5      	b.n	800e08e <ip4_output_if_src+0x92>
 800e0e2:	bf00      	nop
 800e0e4:	08012980 	.word	0x08012980
 800e0e8:	080129b4 	.word	0x080129b4
 800e0ec:	080103a4 	.word	0x080103a4
 800e0f0:	080129c0 	.word	0x080129c0
 800e0f4:	080129f0 	.word	0x080129f0
 800e0f8:	20010a62 	.word	0x20010a62

0800e0fc <ip4_output_if>:
{
 800e0fc:	b510      	push	{r4, lr}
 800e0fe:	b084      	sub	sp, #16
 800e100:	9c08      	ldr	r4, [sp, #32]
  if (dest != LWIP_IP_HDRINCL) {
 800e102:	4694      	mov	ip, r2
 800e104:	b11a      	cbz	r2, 800e10e <ip4_output_if+0x12>
    if (ip4_addr_isany(src)) {
 800e106:	b109      	cbz	r1, 800e10c <ip4_output_if+0x10>
 800e108:	680a      	ldr	r2, [r1, #0]
 800e10a:	b902      	cbnz	r2, 800e10e <ip4_output_if+0x12>
      src_used = netif_ip4_addr(netif);
 800e10c:	1d21      	adds	r1, r4, #4
  return ip4_output_if_src(p, src_used, dest, ttl, tos, proto, netif);
 800e10e:	9402      	str	r4, [sp, #8]
 800e110:	f89d 201c 	ldrb.w	r2, [sp, #28]
 800e114:	9201      	str	r2, [sp, #4]
 800e116:	f89d 2018 	ldrb.w	r2, [sp, #24]
 800e11a:	9200      	str	r2, [sp, #0]
 800e11c:	4662      	mov	r2, ip
 800e11e:	f7ff ff6d 	bl	800dffc <ip4_output_if_src>
}
 800e122:	b004      	add	sp, #16
 800e124:	bd10      	pop	{r4, pc}

0800e126 <ip4_addr_isbroadcast_u32>:
 * @param netif the network interface against which the address is checked
 * @return returns non-zero if the address is a broadcast address
 */
u8_t
ip4_addr_isbroadcast_u32(u32_t addr, const struct netif *netif)
{
 800e126:	4603      	mov	r3, r0
  ip4_addr_t ipaddr;
  ip4_addr_set_u32(&ipaddr, addr);

  /* all ones (broadcast) or all zeroes (old skool broadcast) */
  if ((~addr == IPADDR_ANY) ||
 800e128:	1e42      	subs	r2, r0, #1
 800e12a:	f112 0f03 	cmn.w	r2, #3
 800e12e:	d813      	bhi.n	800e158 <ip4_addr_isbroadcast_u32+0x32>
      (addr == IPADDR_ANY)) {
    return 1;
    /* no broadcast support on this network interface? */
  } else if ((netif->flags & NETIF_FLAG_BROADCAST) == 0) {
 800e130:	f891 002d 	ldrb.w	r0, [r1, #45]	; 0x2d
 800e134:	f010 0002 	ands.w	r0, r0, #2
 800e138:	d013      	beq.n	800e162 <ip4_addr_isbroadcast_u32+0x3c>
    /* the given address cannot be a broadcast address
     * nor can we check against any broadcast addresses */
    return 0;
    /* address matches network interface address exactly? => no broadcast */
  } else if (addr == ip4_addr_get_u32(netif_ip4_addr(netif))) {
 800e13a:	684a      	ldr	r2, [r1, #4]
 800e13c:	429a      	cmp	r2, r3
 800e13e:	d00d      	beq.n	800e15c <ip4_addr_isbroadcast_u32+0x36>
    return 0;
    /*  on the same (sub) network... */
  } else if (ip4_addr_netcmp(&ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif))
 800e140:	6889      	ldr	r1, [r1, #8]
 800e142:	405a      	eors	r2, r3
 800e144:	420a      	tst	r2, r1
 800e146:	d10b      	bne.n	800e160 <ip4_addr_isbroadcast_u32+0x3a>
             /* ...and host identifier bits are all ones? =>... */
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 800e148:	43c8      	mvns	r0, r1
 800e14a:	ea23 0301 	bic.w	r3, r3, r1
                 (IPADDR_BROADCAST & ~ip4_addr_get_u32(netif_ip4_netmask(netif))))) {
    /* => network broadcast address */
    return 1;
  } else {
    return 0;
 800e14e:	4283      	cmp	r3, r0
 800e150:	bf14      	ite	ne
 800e152:	2000      	movne	r0, #0
 800e154:	2001      	moveq	r0, #1
 800e156:	4770      	bx	lr
    return 1;
 800e158:	2001      	movs	r0, #1
 800e15a:	4770      	bx	lr
    return 0;
 800e15c:	2000      	movs	r0, #0
 800e15e:	4770      	bx	lr
    return 0;
 800e160:	2000      	movs	r0, #0
  }
}
 800e162:	4770      	bx	lr

0800e164 <ip_reass_dequeue_datagram>:
 * Dequeues a datagram from the datagram queue. Doesn't deallocate the pbufs.
 * @param ipr points to the queue entry to dequeue
 */
static void
ip_reass_dequeue_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 800e164:	b538      	push	{r3, r4, r5, lr}
 800e166:	4604      	mov	r4, r0
  /* dequeue the reass struct  */
  if (reassdatagrams == ipr) {
 800e168:	4b0c      	ldr	r3, [pc, #48]	; (800e19c <ip_reass_dequeue_datagram+0x38>)
 800e16a:	681b      	ldr	r3, [r3, #0]
 800e16c:	4283      	cmp	r3, r0
 800e16e:	d008      	beq.n	800e182 <ip_reass_dequeue_datagram+0x1e>
 800e170:	460d      	mov	r5, r1
    /* it was the first in the list */
    reassdatagrams = ipr->next;
  } else {
    /* it wasn't the first, so it must have a valid 'prev' */
    LWIP_ASSERT("sanity check linked list", prev != NULL);
 800e172:	b151      	cbz	r1, 800e18a <ip_reass_dequeue_datagram+0x26>
    prev->next = ipr->next;
 800e174:	6823      	ldr	r3, [r4, #0]
 800e176:	602b      	str	r3, [r5, #0]
  }

  /* now we can free the ip_reassdata struct */
  memp_free(MEMP_REASSDATA, ipr);
 800e178:	4621      	mov	r1, r4
 800e17a:	2004      	movs	r0, #4
 800e17c:	f7fa f802 	bl	8008184 <memp_free>
}
 800e180:	bd38      	pop	{r3, r4, r5, pc}
    reassdatagrams = ipr->next;
 800e182:	6802      	ldr	r2, [r0, #0]
 800e184:	4b05      	ldr	r3, [pc, #20]	; (800e19c <ip_reass_dequeue_datagram+0x38>)
 800e186:	601a      	str	r2, [r3, #0]
 800e188:	e7f6      	b.n	800e178 <ip_reass_dequeue_datagram+0x14>
    LWIP_ASSERT("sanity check linked list", prev != NULL);
 800e18a:	4b05      	ldr	r3, [pc, #20]	; (800e1a0 <ip_reass_dequeue_datagram+0x3c>)
 800e18c:	f240 1245 	movw	r2, #325	; 0x145
 800e190:	4904      	ldr	r1, [pc, #16]	; (800e1a4 <ip_reass_dequeue_datagram+0x40>)
 800e192:	4805      	ldr	r0, [pc, #20]	; (800e1a8 <ip_reass_dequeue_datagram+0x44>)
 800e194:	f000 ffae 	bl	800f0f4 <iprintf>
 800e198:	e7ec      	b.n	800e174 <ip_reass_dequeue_datagram+0x10>
 800e19a:	bf00      	nop
 800e19c:	20010a68 	.word	0x20010a68
 800e1a0:	080129f4 	.word	0x080129f4
 800e1a4:	08012a30 	.word	0x08012a30
 800e1a8:	080103a4 	.word	0x080103a4

0800e1ac <ip_reass_free_complete_datagram>:
{
 800e1ac:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e1b0:	4680      	mov	r8, r0
 800e1b2:	4689      	mov	r9, r1
  LWIP_ASSERT("prev != ipr", prev != ipr);
 800e1b4:	4281      	cmp	r1, r0
 800e1b6:	d017      	beq.n	800e1e8 <ip_reass_free_complete_datagram+0x3c>
  if (prev != NULL) {
 800e1b8:	f1b9 0f00 	cmp.w	r9, #0
 800e1bc:	d009      	beq.n	800e1d2 <ip_reass_free_complete_datagram+0x26>
    LWIP_ASSERT("prev->next == ipr", prev->next == ipr);
 800e1be:	f8d9 3000 	ldr.w	r3, [r9]
 800e1c2:	4543      	cmp	r3, r8
 800e1c4:	d005      	beq.n	800e1d2 <ip_reass_free_complete_datagram+0x26>
 800e1c6:	4b34      	ldr	r3, [pc, #208]	; (800e298 <ip_reass_free_complete_datagram+0xec>)
 800e1c8:	22ad      	movs	r2, #173	; 0xad
 800e1ca:	4934      	ldr	r1, [pc, #208]	; (800e29c <ip_reass_free_complete_datagram+0xf0>)
 800e1cc:	4834      	ldr	r0, [pc, #208]	; (800e2a0 <ip_reass_free_complete_datagram+0xf4>)
 800e1ce:	f000 ff91 	bl	800f0f4 <iprintf>
  iprh = (struct ip_reass_helper *)ipr->p->payload;
 800e1d2:	f8d8 6004 	ldr.w	r6, [r8, #4]
 800e1d6:	6873      	ldr	r3, [r6, #4]
  if (iprh->start == 0) {
 800e1d8:	889a      	ldrh	r2, [r3, #4]
 800e1da:	b162      	cbz	r2, 800e1f6 <ip_reass_free_complete_datagram+0x4a>
  u16_t pbufs_freed = 0;
 800e1dc:	2400      	movs	r4, #0
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 800e1de:	f8df b0b8 	ldr.w	fp, [pc, #184]	; 800e298 <ip_reass_free_complete_datagram+0xec>
 800e1e2:	f8df a0cc 	ldr.w	sl, [pc, #204]	; 800e2b0 <ip_reass_free_complete_datagram+0x104>
 800e1e6:	e03e      	b.n	800e266 <ip_reass_free_complete_datagram+0xba>
  LWIP_ASSERT("prev != ipr", prev != ipr);
 800e1e8:	4b2b      	ldr	r3, [pc, #172]	; (800e298 <ip_reass_free_complete_datagram+0xec>)
 800e1ea:	22ab      	movs	r2, #171	; 0xab
 800e1ec:	492d      	ldr	r1, [pc, #180]	; (800e2a4 <ip_reass_free_complete_datagram+0xf8>)
 800e1ee:	482c      	ldr	r0, [pc, #176]	; (800e2a0 <ip_reass_free_complete_datagram+0xf4>)
 800e1f0:	f000 ff80 	bl	800f0f4 <iprintf>
 800e1f4:	e7e0      	b.n	800e1b8 <ip_reass_free_complete_datagram+0xc>
    ipr->p = iprh->next_pbuf;
 800e1f6:	681b      	ldr	r3, [r3, #0]
 800e1f8:	f8c8 3004 	str.w	r3, [r8, #4]
    SMEMCPY(p->payload, &ipr->iphdr, IP_HLEN);
 800e1fc:	6873      	ldr	r3, [r6, #4]
 800e1fe:	f8d8 2008 	ldr.w	r2, [r8, #8]
 800e202:	f8d8 400c 	ldr.w	r4, [r8, #12]
 800e206:	f8d8 0010 	ldr.w	r0, [r8, #16]
 800e20a:	f8d8 1014 	ldr.w	r1, [r8, #20]
 800e20e:	601a      	str	r2, [r3, #0]
 800e210:	605c      	str	r4, [r3, #4]
 800e212:	6098      	str	r0, [r3, #8]
 800e214:	60d9      	str	r1, [r3, #12]
 800e216:	f8d8 2018 	ldr.w	r2, [r8, #24]
 800e21a:	611a      	str	r2, [r3, #16]
    icmp_time_exceeded(p, ICMP_TE_FRAG);
 800e21c:	2101      	movs	r1, #1
 800e21e:	4630      	mov	r0, r6
 800e220:	f7ff fdbe 	bl	800dda0 <icmp_time_exceeded>
    clen = pbuf_clen(p);
 800e224:	4630      	mov	r0, r6
 800e226:	f7fa fbe7 	bl	80089f8 <pbuf_clen>
 800e22a:	4604      	mov	r4, r0
    pbuf_free(p);
 800e22c:	4630      	mov	r0, r6
 800e22e:	f7fa fa6b 	bl	8008708 <pbuf_free>
  p = ipr->p;
 800e232:	f8d8 6004 	ldr.w	r6, [r8, #4]
  while (p != NULL) {
 800e236:	2e00      	cmp	r6, #0
 800e238:	d1d1      	bne.n	800e1de <ip_reass_free_complete_datagram+0x32>
  ip_reass_dequeue_datagram(ipr, prev);
 800e23a:	4649      	mov	r1, r9
 800e23c:	4640      	mov	r0, r8
 800e23e:	f7ff ff91 	bl	800e164 <ip_reass_dequeue_datagram>
  LWIP_ASSERT("ip_reass_pbufcount >= pbufs_freed", ip_reass_pbufcount >= pbufs_freed);
 800e242:	4b19      	ldr	r3, [pc, #100]	; (800e2a8 <ip_reass_free_complete_datagram+0xfc>)
 800e244:	881b      	ldrh	r3, [r3, #0]
 800e246:	42a3      	cmp	r3, r4
 800e248:	d31f      	bcc.n	800e28a <ip_reass_free_complete_datagram+0xde>
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - pbufs_freed);
 800e24a:	4a17      	ldr	r2, [pc, #92]	; (800e2a8 <ip_reass_free_complete_datagram+0xfc>)
 800e24c:	8813      	ldrh	r3, [r2, #0]
 800e24e:	1b1b      	subs	r3, r3, r4
 800e250:	8013      	strh	r3, [r2, #0]
}
 800e252:	4620      	mov	r0, r4
 800e254:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 800e258:	4425      	add	r5, r4
 800e25a:	b2ac      	uxth	r4, r5
    pbuf_free(pcur);
 800e25c:	4638      	mov	r0, r7
 800e25e:	f7fa fa53 	bl	8008708 <pbuf_free>
  while (p != NULL) {
 800e262:	2e00      	cmp	r6, #0
 800e264:	d0e9      	beq.n	800e23a <ip_reass_free_complete_datagram+0x8e>
    iprh = (struct ip_reass_helper *)p->payload;
 800e266:	6873      	ldr	r3, [r6, #4]
    p = iprh->next_pbuf;
 800e268:	4637      	mov	r7, r6
 800e26a:	681e      	ldr	r6, [r3, #0]
    clen = pbuf_clen(pcur);
 800e26c:	4638      	mov	r0, r7
 800e26e:	f7fa fbc3 	bl	80089f8 <pbuf_clen>
 800e272:	4605      	mov	r5, r0
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 800e274:	1823      	adds	r3, r4, r0
 800e276:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800e27a:	dbed      	blt.n	800e258 <ip_reass_free_complete_datagram+0xac>
 800e27c:	465b      	mov	r3, fp
 800e27e:	22cc      	movs	r2, #204	; 0xcc
 800e280:	4651      	mov	r1, sl
 800e282:	4807      	ldr	r0, [pc, #28]	; (800e2a0 <ip_reass_free_complete_datagram+0xf4>)
 800e284:	f000 ff36 	bl	800f0f4 <iprintf>
 800e288:	e7e6      	b.n	800e258 <ip_reass_free_complete_datagram+0xac>
  LWIP_ASSERT("ip_reass_pbufcount >= pbufs_freed", ip_reass_pbufcount >= pbufs_freed);
 800e28a:	4b03      	ldr	r3, [pc, #12]	; (800e298 <ip_reass_free_complete_datagram+0xec>)
 800e28c:	22d2      	movs	r2, #210	; 0xd2
 800e28e:	4907      	ldr	r1, [pc, #28]	; (800e2ac <ip_reass_free_complete_datagram+0x100>)
 800e290:	4803      	ldr	r0, [pc, #12]	; (800e2a0 <ip_reass_free_complete_datagram+0xf4>)
 800e292:	f000 ff2f 	bl	800f0f4 <iprintf>
 800e296:	e7d8      	b.n	800e24a <ip_reass_free_complete_datagram+0x9e>
 800e298:	080129f4 	.word	0x080129f4
 800e29c:	08012a58 	.word	0x08012a58
 800e2a0:	080103a4 	.word	0x080103a4
 800e2a4:	08012a4c 	.word	0x08012a4c
 800e2a8:	20010a64 	.word	0x20010a64
 800e2ac:	08012a8c 	.word	0x08012a8c
 800e2b0:	08012a6c 	.word	0x08012a6c

0800e2b4 <ip_reass_remove_oldest_datagram>:
{
 800e2b4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e2b8:	4605      	mov	r5, r0
 800e2ba:	460f      	mov	r7, r1
  int pbufs_freed = 0, pbufs_freed_current;
 800e2bc:	2600      	movs	r6, #0
    r = reassdatagrams;
 800e2be:	f8df 8070 	ldr.w	r8, [pc, #112]	; 800e330 <ip_reass_remove_oldest_datagram+0x7c>
 800e2c2:	e027      	b.n	800e314 <ip_reass_remove_oldest_datagram+0x60>
        other_datagrams++;
 800e2c4:	3401      	adds	r4, #1
        if (oldest == NULL) {
 800e2c6:	b1d0      	cbz	r0, 800e2fe <ip_reass_remove_oldest_datagram+0x4a>
        } else if (r->timer <= oldest->timer) {
 800e2c8:	f893 901f 	ldrb.w	r9, [r3, #31]
 800e2cc:	7fc2      	ldrb	r2, [r0, #31]
 800e2ce:	4591      	cmp	r9, r2
 800e2d0:	bf98      	it	ls
 800e2d2:	4661      	movls	r1, ip
 800e2d4:	4591      	cmp	r9, r2
 800e2d6:	bf98      	it	ls
 800e2d8:	4618      	movls	r0, r3
      if (r->next != NULL) {
 800e2da:	681a      	ldr	r2, [r3, #0]
 800e2dc:	469c      	mov	ip, r3
 800e2de:	b18a      	cbz	r2, 800e304 <ip_reass_remove_oldest_datagram+0x50>
 800e2e0:	4613      	mov	r3, r2
      if (!IP_ADDRESSES_AND_ID_MATCH(&r->iphdr, fraghdr)) {
 800e2e2:	695a      	ldr	r2, [r3, #20]
 800e2e4:	4572      	cmp	r2, lr
 800e2e6:	d1ed      	bne.n	800e2c4 <ip_reass_remove_oldest_datagram+0x10>
 800e2e8:	f8d5 9010 	ldr.w	r9, [r5, #16]
 800e2ec:	699a      	ldr	r2, [r3, #24]
 800e2ee:	454a      	cmp	r2, r9
 800e2f0:	d1e8      	bne.n	800e2c4 <ip_reass_remove_oldest_datagram+0x10>
 800e2f2:	f8b3 900c 	ldrh.w	r9, [r3, #12]
 800e2f6:	88aa      	ldrh	r2, [r5, #4]
 800e2f8:	4591      	cmp	r9, r2
 800e2fa:	d1e3      	bne.n	800e2c4 <ip_reass_remove_oldest_datagram+0x10>
 800e2fc:	e7ed      	b.n	800e2da <ip_reass_remove_oldest_datagram+0x26>
 800e2fe:	4661      	mov	r1, ip
 800e300:	4618      	mov	r0, r3
 800e302:	e7ea      	b.n	800e2da <ip_reass_remove_oldest_datagram+0x26>
    if (oldest != NULL) {
 800e304:	b110      	cbz	r0, 800e30c <ip_reass_remove_oldest_datagram+0x58>
      pbufs_freed_current = ip_reass_free_complete_datagram(oldest, oldest_prev);
 800e306:	f7ff ff51 	bl	800e1ac <ip_reass_free_complete_datagram>
      pbufs_freed += pbufs_freed_current;
 800e30a:	4406      	add	r6, r0
  } while ((pbufs_freed < pbufs_needed) && (other_datagrams > 1));
 800e30c:	42be      	cmp	r6, r7
 800e30e:	da0b      	bge.n	800e328 <ip_reass_remove_oldest_datagram+0x74>
 800e310:	2c01      	cmp	r4, #1
 800e312:	dd09      	ble.n	800e328 <ip_reass_remove_oldest_datagram+0x74>
    r = reassdatagrams;
 800e314:	f8d8 3000 	ldr.w	r3, [r8]
    while (r != NULL) {
 800e318:	b133      	cbz	r3, 800e328 <ip_reass_remove_oldest_datagram+0x74>
      if (!IP_ADDRESSES_AND_ID_MATCH(&r->iphdr, fraghdr)) {
 800e31a:	f8d5 e00c 	ldr.w	lr, [r5, #12]
    other_datagrams = 0;
 800e31e:	2400      	movs	r4, #0
    oldest_prev = NULL;
 800e320:	4621      	mov	r1, r4
    prev = NULL;
 800e322:	46a4      	mov	ip, r4
    oldest = NULL;
 800e324:	4620      	mov	r0, r4
 800e326:	e7dc      	b.n	800e2e2 <ip_reass_remove_oldest_datagram+0x2e>
}
 800e328:	4630      	mov	r0, r6
 800e32a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e32e:	bf00      	nop
 800e330:	20010a68 	.word	0x20010a68

0800e334 <ip_frag_free_pbuf_custom_ref>:
}

/** Free a struct pbuf_custom_ref */
static void
ip_frag_free_pbuf_custom_ref(struct pbuf_custom_ref *p)
{
 800e334:	b510      	push	{r4, lr}
  LWIP_ASSERT("p != NULL", p != NULL);
 800e336:	4604      	mov	r4, r0
 800e338:	b120      	cbz	r0, 800e344 <ip_frag_free_pbuf_custom_ref+0x10>
  memp_free(MEMP_FRAG_PBUF, p);
 800e33a:	4621      	mov	r1, r4
 800e33c:	2005      	movs	r0, #5
 800e33e:	f7f9 ff21 	bl	8008184 <memp_free>
}
 800e342:	bd10      	pop	{r4, pc}
  LWIP_ASSERT("p != NULL", p != NULL);
 800e344:	4b03      	ldr	r3, [pc, #12]	; (800e354 <ip_frag_free_pbuf_custom_ref+0x20>)
 800e346:	f44f 7231 	mov.w	r2, #708	; 0x2c4
 800e34a:	4903      	ldr	r1, [pc, #12]	; (800e358 <ip_frag_free_pbuf_custom_ref+0x24>)
 800e34c:	4803      	ldr	r0, [pc, #12]	; (800e35c <ip_frag_free_pbuf_custom_ref+0x28>)
 800e34e:	f000 fed1 	bl	800f0f4 <iprintf>
 800e352:	e7f2      	b.n	800e33a <ip_frag_free_pbuf_custom_ref+0x6>
 800e354:	080129f4 	.word	0x080129f4
 800e358:	08010748 	.word	0x08010748
 800e35c:	080103a4 	.word	0x080103a4

0800e360 <ipfrag_free_pbuf_custom>:

/** Free-callback function to free a 'struct pbuf_custom_ref', called by
 * pbuf_free. */
static void
ipfrag_free_pbuf_custom(struct pbuf *p)
{
 800e360:	b510      	push	{r4, lr}
  struct pbuf_custom_ref *pcr = (struct pbuf_custom_ref *)p;
  LWIP_ASSERT("pcr != NULL", pcr != NULL);
 800e362:	4604      	mov	r4, r0
 800e364:	b138      	cbz	r0, 800e376 <ipfrag_free_pbuf_custom+0x16>
  LWIP_ASSERT("pcr == p", (void *)pcr == (void *)p);
  if (pcr->original != NULL) {
 800e366:	6960      	ldr	r0, [r4, #20]
 800e368:	b108      	cbz	r0, 800e36e <ipfrag_free_pbuf_custom+0xe>
    pbuf_free(pcr->original);
 800e36a:	f7fa f9cd 	bl	8008708 <pbuf_free>
  }
  ip_frag_free_pbuf_custom_ref(pcr);
 800e36e:	4620      	mov	r0, r4
 800e370:	f7ff ffe0 	bl	800e334 <ip_frag_free_pbuf_custom_ref>
}
 800e374:	bd10      	pop	{r4, pc}
  LWIP_ASSERT("pcr != NULL", pcr != NULL);
 800e376:	4b04      	ldr	r3, [pc, #16]	; (800e388 <ipfrag_free_pbuf_custom+0x28>)
 800e378:	f240 22ce 	movw	r2, #718	; 0x2ce
 800e37c:	4903      	ldr	r1, [pc, #12]	; (800e38c <ipfrag_free_pbuf_custom+0x2c>)
 800e37e:	4804      	ldr	r0, [pc, #16]	; (800e390 <ipfrag_free_pbuf_custom+0x30>)
 800e380:	f000 feb8 	bl	800f0f4 <iprintf>
 800e384:	e7ef      	b.n	800e366 <ipfrag_free_pbuf_custom+0x6>
 800e386:	bf00      	nop
 800e388:	080129f4 	.word	0x080129f4
 800e38c:	08012ab0 	.word	0x08012ab0
 800e390:	080103a4 	.word	0x080103a4

0800e394 <ip_reass_tmr>:
{
 800e394:	b538      	push	{r3, r4, r5, lr}
  r = reassdatagrams;
 800e396:	4b0a      	ldr	r3, [pc, #40]	; (800e3c0 <ip_reass_tmr+0x2c>)
 800e398:	6818      	ldr	r0, [r3, #0]
  while (r != NULL) {
 800e39a:	b178      	cbz	r0, 800e3bc <ip_reass_tmr+0x28>
  struct ip_reassdata *r, *prev = NULL;
 800e39c:	2400      	movs	r4, #0
 800e39e:	e004      	b.n	800e3aa <ip_reass_tmr+0x16>
      r->timer--;
 800e3a0:	3b01      	subs	r3, #1
 800e3a2:	77c3      	strb	r3, [r0, #31]
      r = r->next;
 800e3a4:	4604      	mov	r4, r0
 800e3a6:	6800      	ldr	r0, [r0, #0]
  while (r != NULL) {
 800e3a8:	b140      	cbz	r0, 800e3bc <ip_reass_tmr+0x28>
    if (r->timer > 0) {
 800e3aa:	7fc3      	ldrb	r3, [r0, #31]
 800e3ac:	2b00      	cmp	r3, #0
 800e3ae:	d1f7      	bne.n	800e3a0 <ip_reass_tmr+0xc>
      r = r->next;
 800e3b0:	6805      	ldr	r5, [r0, #0]
      ip_reass_free_complete_datagram(tmp, prev);
 800e3b2:	4621      	mov	r1, r4
 800e3b4:	f7ff fefa 	bl	800e1ac <ip_reass_free_complete_datagram>
      r = r->next;
 800e3b8:	4628      	mov	r0, r5
 800e3ba:	e7f5      	b.n	800e3a8 <ip_reass_tmr+0x14>
}
 800e3bc:	bd38      	pop	{r3, r4, r5, pc}
 800e3be:	bf00      	nop
 800e3c0:	20010a68 	.word	0x20010a68

0800e3c4 <ip4_reass>:
{
 800e3c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e3c8:	b083      	sub	sp, #12
 800e3ca:	4605      	mov	r5, r0
  fraghdr = (struct ip_hdr *)p->payload;
 800e3cc:	f8d0 9004 	ldr.w	r9, [r0, #4]
  if (IPH_HL_BYTES(fraghdr) != IP_HLEN) {
 800e3d0:	f899 3000 	ldrb.w	r3, [r9]
 800e3d4:	f003 030f 	and.w	r3, r3, #15
 800e3d8:	2b05      	cmp	r3, #5
 800e3da:	d16e      	bne.n	800e4ba <ip4_reass+0xf6>
  offset = IPH_OFFSET_BYTES(fraghdr);
 800e3dc:	f8b9 0006 	ldrh.w	r0, [r9, #6]
 800e3e0:	f7f9 fb52 	bl	8007a88 <lwip_htons>
 800e3e4:	4607      	mov	r7, r0
  len = lwip_ntohs(IPH_LEN(fraghdr));
 800e3e6:	f8b9 0002 	ldrh.w	r0, [r9, #2]
 800e3ea:	f7f9 fb4d 	bl	8007a88 <lwip_htons>
  hlen = IPH_HL_BYTES(fraghdr);
 800e3ee:	f899 3000 	ldrb.w	r3, [r9]
 800e3f2:	f003 030f 	and.w	r3, r3, #15
  if (hlen > len) {
 800e3f6:	009e      	lsls	r6, r3, #2
 800e3f8:	ebb0 0f83 	cmp.w	r0, r3, lsl #2
 800e3fc:	d35d      	bcc.n	800e4ba <ip4_reass+0xf6>
  len = (u16_t)(len - hlen);
 800e3fe:	1b80      	subs	r0, r0, r6
 800e400:	b286      	uxth	r6, r0
  clen = pbuf_clen(p);
 800e402:	4628      	mov	r0, r5
 800e404:	f7fa faf8 	bl	80089f8 <pbuf_clen>
 800e408:	4680      	mov	r8, r0
  if ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS) {
 800e40a:	4ba4      	ldr	r3, [pc, #656]	; (800e69c <ip4_reass+0x2d8>)
 800e40c:	881b      	ldrh	r3, [r3, #0]
 800e40e:	4403      	add	r3, r0
 800e410:	2b0a      	cmp	r3, #10
 800e412:	dc07      	bgt.n	800e424 <ip4_reass+0x60>
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 800e414:	4ba2      	ldr	r3, [pc, #648]	; (800e6a0 <ip4_reass+0x2dc>)
 800e416:	681c      	ldr	r4, [r3, #0]
 800e418:	2c00      	cmp	r4, #0
 800e41a:	f000 81c7 	beq.w	800e7ac <ip4_reass+0x3e8>
    if (IP_ADDRESSES_AND_ID_MATCH(&ipr->iphdr, fraghdr)) {
 800e41e:	f8d9 200c 	ldr.w	r2, [r9, #12]
 800e422:	e00f      	b.n	800e444 <ip4_reass+0x80>
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 800e424:	4601      	mov	r1, r0
 800e426:	4648      	mov	r0, r9
 800e428:	f7ff ff44 	bl	800e2b4 <ip_reass_remove_oldest_datagram>
 800e42c:	2800      	cmp	r0, #0
 800e42e:	d044      	beq.n	800e4ba <ip4_reass+0xf6>
        ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS))
 800e430:	4b9a      	ldr	r3, [pc, #616]	; (800e69c <ip4_reass+0x2d8>)
 800e432:	881b      	ldrh	r3, [r3, #0]
 800e434:	4443      	add	r3, r8
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 800e436:	2b0a      	cmp	r3, #10
 800e438:	ddec      	ble.n	800e414 <ip4_reass+0x50>
 800e43a:	e03e      	b.n	800e4ba <ip4_reass+0xf6>
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 800e43c:	6824      	ldr	r4, [r4, #0]
 800e43e:	2c00      	cmp	r4, #0
 800e440:	f000 81b4 	beq.w	800e7ac <ip4_reass+0x3e8>
    if (IP_ADDRESSES_AND_ID_MATCH(&ipr->iphdr, fraghdr)) {
 800e444:	6963      	ldr	r3, [r4, #20]
 800e446:	4293      	cmp	r3, r2
 800e448:	d1f8      	bne.n	800e43c <ip4_reass+0x78>
 800e44a:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800e44e:	69a1      	ldr	r1, [r4, #24]
 800e450:	4299      	cmp	r1, r3
 800e452:	d1f3      	bne.n	800e43c <ip4_reass+0x78>
 800e454:	89a1      	ldrh	r1, [r4, #12]
 800e456:	f8b9 3004 	ldrh.w	r3, [r9, #4]
 800e45a:	4299      	cmp	r1, r3
 800e45c:	d1ee      	bne.n	800e43c <ip4_reass+0x78>
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 800e45e:	f8b9 0006 	ldrh.w	r0, [r9, #6]
 800e462:	f7f9 fb11 	bl	8007a88 <lwip_htons>
 800e466:	f3c0 000c 	ubfx	r0, r0, #0, #13
 800e46a:	2800      	cmp	r0, #0
 800e46c:	d03b      	beq.n	800e4e6 <ip4_reass+0x122>
  offset = IPH_OFFSET_BYTES(fraghdr);
 800e46e:	f3c7 070c 	ubfx	r7, r7, #0, #13
 800e472:	00ff      	lsls	r7, r7, #3
  is_last = (IPH_OFFSET(fraghdr) & PP_NTOHS(IP_MF)) == 0;
 800e474:	f8b9 9006 	ldrh.w	r9, [r9, #6]
  if (is_last) {
 800e478:	f019 0920 	ands.w	r9, r9, #32
 800e47c:	d107      	bne.n	800e48e <ip4_reass+0xca>
    u16_t datagram_len = (u16_t)(offset + len);
 800e47e:	19bb      	adds	r3, r7, r6
 800e480:	b29b      	uxth	r3, r3
    if ((datagram_len < offset) || (datagram_len > (0xFFFF - IP_HLEN))) {
 800e482:	429f      	cmp	r7, r3
 800e484:	d812      	bhi.n	800e4ac <ip4_reass+0xe8>
 800e486:	f64f 72eb 	movw	r2, #65515	; 0xffeb
 800e48a:	4293      	cmp	r3, r2
 800e48c:	d80e      	bhi.n	800e4ac <ip4_reass+0xe8>
  fraghdr = (struct ip_hdr *)new_p->payload;
 800e48e:	f8d5 a004 	ldr.w	sl, [r5, #4]
  len = lwip_ntohs(IPH_LEN(fraghdr));
 800e492:	f8ba 0002 	ldrh.w	r0, [sl, #2]
 800e496:	f7f9 faf7 	bl	8007a88 <lwip_htons>
  hlen = IPH_HL_BYTES(fraghdr);
 800e49a:	f89a 3000 	ldrb.w	r3, [sl]
 800e49e:	f003 030f 	and.w	r3, r3, #15
  if (hlen > len) {
 800e4a2:	ea4f 0b83 	mov.w	fp, r3, lsl #2
 800e4a6:	ebb0 0f83 	cmp.w	r0, r3, lsl #2
 800e4aa:	d233      	bcs.n	800e514 <ip4_reass+0x150>
  LWIP_ASSERT("ipr != NULL", ipr != NULL);
 800e4ac:	2c00      	cmp	r4, #0
 800e4ae:	f000 814c 	beq.w	800e74a <ip4_reass+0x386>
  if (ipr->p == NULL) {
 800e4b2:	6863      	ldr	r3, [r4, #4]
 800e4b4:	2b00      	cmp	r3, #0
 800e4b6:	f000 8150 	beq.w	800e75a <ip4_reass+0x396>
  pbuf_free(p);
 800e4ba:	4628      	mov	r0, r5
 800e4bc:	f7fa f924 	bl	8008708 <pbuf_free>
  return NULL;
 800e4c0:	2500      	movs	r5, #0
}
 800e4c2:	4628      	mov	r0, r5
 800e4c4:	b003      	add	sp, #12
 800e4c6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if (ip_reass_remove_oldest_datagram(fraghdr, clen) >= clen) {
 800e4ca:	4641      	mov	r1, r8
 800e4cc:	4648      	mov	r0, r9
 800e4ce:	f7ff fef1 	bl	800e2b4 <ip_reass_remove_oldest_datagram>
 800e4d2:	4580      	cmp	r8, r0
 800e4d4:	dcf1      	bgt.n	800e4ba <ip4_reass+0xf6>
      ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 800e4d6:	2004      	movs	r0, #4
 800e4d8:	f7f9 fe24 	bl	8008124 <memp_malloc>
    if (ipr == NULL)
 800e4dc:	4604      	mov	r4, r0
 800e4de:	2800      	cmp	r0, #0
 800e4e0:	f040 816b 	bne.w	800e7ba <ip4_reass+0x3f6>
 800e4e4:	e7e9      	b.n	800e4ba <ip4_reass+0xf6>
        ((lwip_ntohs(IPH_OFFSET(&ipr->iphdr)) & IP_OFFMASK) != 0)) {
 800e4e6:	89e0      	ldrh	r0, [r4, #14]
 800e4e8:	f7f9 face 	bl	8007a88 <lwip_htons>
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 800e4ec:	f3c0 000c 	ubfx	r0, r0, #0, #13
 800e4f0:	2800      	cmp	r0, #0
 800e4f2:	d0bc      	beq.n	800e46e <ip4_reass+0xaa>
      SMEMCPY(&ipr->iphdr, fraghdr, IP_HLEN);
 800e4f4:	f8d9 3000 	ldr.w	r3, [r9]
 800e4f8:	f8d9 0004 	ldr.w	r0, [r9, #4]
 800e4fc:	f8d9 1008 	ldr.w	r1, [r9, #8]
 800e500:	f8d9 200c 	ldr.w	r2, [r9, #12]
 800e504:	60a3      	str	r3, [r4, #8]
 800e506:	60e0      	str	r0, [r4, #12]
 800e508:	6121      	str	r1, [r4, #16]
 800e50a:	6162      	str	r2, [r4, #20]
 800e50c:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800e510:	61a3      	str	r3, [r4, #24]
 800e512:	e7ac      	b.n	800e46e <ip4_reass+0xaa>
  len = (u16_t)(len - hlen);
 800e514:	eba0 000b 	sub.w	r0, r0, fp
 800e518:	fa1f fb80 	uxth.w	fp, r0
  offset = IPH_OFFSET_BYTES(fraghdr);
 800e51c:	f8ba 0006 	ldrh.w	r0, [sl, #6]
 800e520:	f7f9 fab2 	bl	8007a88 <lwip_htons>
 800e524:	f3c0 020c 	ubfx	r2, r0, #0, #13
 800e528:	00d2      	lsls	r2, r2, #3
  iprh = (struct ip_reass_helper *)new_p->payload;
 800e52a:	f8d5 a004 	ldr.w	sl, [r5, #4]
  iprh->next_pbuf = NULL;
 800e52e:	2300      	movs	r3, #0
 800e530:	f88a 3000 	strb.w	r3, [sl]
 800e534:	f88a 3001 	strb.w	r3, [sl, #1]
 800e538:	f88a 3002 	strb.w	r3, [sl, #2]
 800e53c:	f88a 3003 	strb.w	r3, [sl, #3]
  iprh->start = offset;
 800e540:	f8aa 2004 	strh.w	r2, [sl, #4]
  iprh->end = (u16_t)(offset + len);
 800e544:	4493      	add	fp, r2
 800e546:	fa1f f38b 	uxth.w	r3, fp
 800e54a:	9301      	str	r3, [sp, #4]
 800e54c:	f8aa b006 	strh.w	fp, [sl, #6]
  if (iprh->end < offset) {
 800e550:	429a      	cmp	r2, r3
 800e552:	d8ab      	bhi.n	800e4ac <ip4_reass+0xe8>
  for (q = ipr->p; q != NULL;) {
 800e554:	6860      	ldr	r0, [r4, #4]
 800e556:	2800      	cmp	r0, #0
 800e558:	f000 8120 	beq.w	800e79c <ip4_reass+0x3d8>
  int valid = 1;
 800e55c:	f04f 0e01 	mov.w	lr, #1
  struct ip_reass_helper *iprh, *iprh_tmp, *iprh_prev = NULL;
 800e560:	2300      	movs	r3, #0
 800e562:	e030      	b.n	800e5c6 <ip4_reass+0x202>
      iprh->next_pbuf = q;
 800e564:	f8ca 0000 	str.w	r0, [sl]
      if (iprh_prev != NULL) {
 800e568:	f1bc 0f00 	cmp.w	ip, #0
 800e56c:	d020      	beq.n	800e5b0 <ip4_reass+0x1ec>
        if ((iprh->start < iprh_prev->end) || (iprh->end > iprh_tmp->start)) {
 800e56e:	f8bc 1006 	ldrh.w	r1, [ip, #6]
 800e572:	428a      	cmp	r2, r1
 800e574:	d39d      	bcc.n	800e4b2 <ip4_reass+0xee>
 800e576:	889b      	ldrh	r3, [r3, #4]
 800e578:	9a01      	ldr	r2, [sp, #4]
 800e57a:	4293      	cmp	r3, r2
 800e57c:	d399      	bcc.n	800e4b2 <ip4_reass+0xee>
        iprh_prev->next_pbuf = new_p;
 800e57e:	f8cc 5000 	str.w	r5, [ip]
        if (iprh_prev->end != iprh->start) {
 800e582:	f8ba 3004 	ldrh.w	r3, [sl, #4]
          valid = 0;
 800e586:	428b      	cmp	r3, r1
 800e588:	bf18      	it	ne
 800e58a:	f04f 0e00 	movne.w	lr, #0
  if (is_last || ((ipr->flags & IP_REASS_FLAG_LASTFRAG) != 0)) {
 800e58e:	f1b9 0f00 	cmp.w	r9, #0
 800e592:	d02f      	beq.n	800e5f4 <ip4_reass+0x230>
 800e594:	7fa3      	ldrb	r3, [r4, #30]
 800e596:	f013 0f01 	tst.w	r3, #1
 800e59a:	d12b      	bne.n	800e5f4 <ip4_reass+0x230>
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount + clen);
 800e59c:	4a3f      	ldr	r2, [pc, #252]	; (800e69c <ip4_reass+0x2d8>)
 800e59e:	8813      	ldrh	r3, [r2, #0]
 800e5a0:	4498      	add	r8, r3
 800e5a2:	f8a2 8000 	strh.w	r8, [r2]
  if (is_last) {
 800e5a6:	f1b9 0f00 	cmp.w	r9, #0
 800e5aa:	d074      	beq.n	800e696 <ip4_reass+0x2d2>
  return NULL;
 800e5ac:	2500      	movs	r5, #0
 800e5ae:	e788      	b.n	800e4c2 <ip4_reass+0xfe>
        if (iprh->end > iprh_tmp->start) {
 800e5b0:	889b      	ldrh	r3, [r3, #4]
 800e5b2:	9a01      	ldr	r2, [sp, #4]
 800e5b4:	4293      	cmp	r3, r2
 800e5b6:	f4ff af7c 	bcc.w	800e4b2 <ip4_reass+0xee>
        ipr->p = new_p;
 800e5ba:	6065      	str	r5, [r4, #4]
 800e5bc:	e7e7      	b.n	800e58e <ip4_reass+0x1ca>
    q = iprh_tmp->next_pbuf;
 800e5be:	6818      	ldr	r0, [r3, #0]
  for (q = ipr->p; q != NULL;) {
 800e5c0:	2800      	cmp	r0, #0
 800e5c2:	f000 80da 	beq.w	800e77a <ip4_reass+0x3b6>
    iprh_tmp = (struct ip_reass_helper *)q->payload;
 800e5c6:	469c      	mov	ip, r3
 800e5c8:	6843      	ldr	r3, [r0, #4]
    if (iprh->start < iprh_tmp->start) {
 800e5ca:	8899      	ldrh	r1, [r3, #4]
 800e5cc:	428a      	cmp	r2, r1
 800e5ce:	d3c9      	bcc.n	800e564 <ip4_reass+0x1a0>
    } else if (iprh->start == iprh_tmp->start) {
 800e5d0:	428a      	cmp	r2, r1
 800e5d2:	f43f af6e 	beq.w	800e4b2 <ip4_reass+0xee>
    } else if (iprh->start < iprh_tmp->end) {
 800e5d6:	f8b3 b006 	ldrh.w	fp, [r3, #6]
 800e5da:	455a      	cmp	r2, fp
 800e5dc:	f4ff af69 	bcc.w	800e4b2 <ip4_reass+0xee>
      if (iprh_prev != NULL) {
 800e5e0:	f1bc 0f00 	cmp.w	ip, #0
 800e5e4:	d0eb      	beq.n	800e5be <ip4_reass+0x1fa>
        if (iprh_prev->end != iprh_tmp->start) {
 800e5e6:	f8bc 0006 	ldrh.w	r0, [ip, #6]
          valid = 0;
 800e5ea:	4288      	cmp	r0, r1
 800e5ec:	bf18      	it	ne
 800e5ee:	f04f 0e00 	movne.w	lr, #0
 800e5f2:	e7e4      	b.n	800e5be <ip4_reass+0x1fa>
    if (valid) {
 800e5f4:	f1be 0f00 	cmp.w	lr, #0
 800e5f8:	d02f      	beq.n	800e65a <ip4_reass+0x296>
      if ((ipr->p == NULL) || (((struct ip_reass_helper *)ipr->p->payload)->start != 0)) {
 800e5fa:	6863      	ldr	r3, [r4, #4]
 800e5fc:	b343      	cbz	r3, 800e650 <ip4_reass+0x28c>
 800e5fe:	6859      	ldr	r1, [r3, #4]
 800e600:	888b      	ldrh	r3, [r1, #4]
 800e602:	bb43      	cbnz	r3, 800e656 <ip4_reass+0x292>
        q = iprh->next_pbuf;
 800e604:	f8da 3000 	ldr.w	r3, [sl]
        while (q != NULL) {
 800e608:	b15b      	cbz	r3, 800e622 <ip4_reass+0x25e>
          iprh = (struct ip_reass_helper *)q->payload;
 800e60a:	4652      	mov	r2, sl
 800e60c:	f8d3 a004 	ldr.w	sl, [r3, #4]
          if (iprh_prev->end != iprh->start) {
 800e610:	88d2      	ldrh	r2, [r2, #6]
 800e612:	f8ba 3004 	ldrh.w	r3, [sl, #4]
 800e616:	429a      	cmp	r2, r3
 800e618:	d134      	bne.n	800e684 <ip4_reass+0x2c0>
          q = iprh->next_pbuf;
 800e61a:	f8da 3000 	ldr.w	r3, [sl]
        while (q != NULL) {
 800e61e:	2b00      	cmp	r3, #0
 800e620:	d1f3      	bne.n	800e60a <ip4_reass+0x246>
          LWIP_ASSERT("sanity check",
 800e622:	458a      	cmp	sl, r1
 800e624:	f040 80e7 	bne.w	800e7f6 <ip4_reass+0x432>
 800e628:	4b1e      	ldr	r3, [pc, #120]	; (800e6a4 <ip4_reass+0x2e0>)
 800e62a:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 800e62e:	491e      	ldr	r1, [pc, #120]	; (800e6a8 <ip4_reass+0x2e4>)
 800e630:	481e      	ldr	r0, [pc, #120]	; (800e6ac <ip4_reass+0x2e8>)
 800e632:	f000 fd5f 	bl	800f0f4 <iprintf>
          LWIP_ASSERT("validate_datagram:next_pbuf!=NULL",
 800e636:	f8da 3000 	ldr.w	r3, [sl]
 800e63a:	b333      	cbz	r3, 800e68a <ip4_reass+0x2c6>
 800e63c:	4b19      	ldr	r3, [pc, #100]	; (800e6a4 <ip4_reass+0x2e0>)
 800e63e:	f44f 72f1 	mov.w	r2, #482	; 0x1e2
 800e642:	491b      	ldr	r1, [pc, #108]	; (800e6b0 <ip4_reass+0x2ec>)
 800e644:	4819      	ldr	r0, [pc, #100]	; (800e6ac <ip4_reass+0x2e8>)
 800e646:	f000 fd55 	bl	800f0f4 <iprintf>
 800e64a:	f04f 0e01 	mov.w	lr, #1
 800e64e:	e004      	b.n	800e65a <ip4_reass+0x296>
        valid = 0;
 800e650:	f04f 0e00 	mov.w	lr, #0
 800e654:	e001      	b.n	800e65a <ip4_reass+0x296>
 800e656:	f04f 0e00 	mov.w	lr, #0
    return valid ? IP_REASS_VALIDATE_TELEGRAM_FINISHED : IP_REASS_VALIDATE_PBUF_QUEUED;
 800e65a:	f1be 0100 	subs.w	r1, lr, #0
 800e65e:	bf18      	it	ne
 800e660:	2101      	movne	r1, #1
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount + clen);
 800e662:	4a0e      	ldr	r2, [pc, #56]	; (800e69c <ip4_reass+0x2d8>)
 800e664:	8813      	ldrh	r3, [r2, #0]
 800e666:	4498      	add	r8, r3
 800e668:	f8a2 8000 	strh.w	r8, [r2]
  if (is_last) {
 800e66c:	f1b9 0f00 	cmp.w	r9, #0
 800e670:	d105      	bne.n	800e67e <ip4_reass+0x2ba>
    u16_t datagram_len = (u16_t)(offset + len);
 800e672:	443e      	add	r6, r7
    ipr->datagram_len = datagram_len;
 800e674:	83a6      	strh	r6, [r4, #28]
    ipr->flags |= IP_REASS_FLAG_LASTFRAG;
 800e676:	7fa3      	ldrb	r3, [r4, #30]
 800e678:	f043 0301 	orr.w	r3, r3, #1
 800e67c:	77a3      	strb	r3, [r4, #30]
  if (valid == IP_REASS_VALIDATE_TELEGRAM_FINISHED) {
 800e67e:	b9c9      	cbnz	r1, 800e6b4 <ip4_reass+0x2f0>
  return NULL;
 800e680:	2500      	movs	r5, #0
 800e682:	e71e      	b.n	800e4c2 <ip4_reass+0xfe>
 800e684:	f04f 0e00 	mov.w	lr, #0
 800e688:	e7e7      	b.n	800e65a <ip4_reass+0x296>
 800e68a:	f04f 0e01 	mov.w	lr, #1
 800e68e:	e7e4      	b.n	800e65a <ip4_reass+0x296>
  if (is_last || ((ipr->flags & IP_REASS_FLAG_LASTFRAG) != 0)) {
 800e690:	f04f 0e00 	mov.w	lr, #0
 800e694:	e7e1      	b.n	800e65a <ip4_reass+0x296>
  if (is_last) {
 800e696:	2100      	movs	r1, #0
 800e698:	e7eb      	b.n	800e672 <ip4_reass+0x2ae>
 800e69a:	bf00      	nop
 800e69c:	20010a64 	.word	0x20010a64
 800e6a0:	20010a68 	.word	0x20010a68
 800e6a4:	080129f4 	.word	0x080129f4
 800e6a8:	08012abc 	.word	0x08012abc
 800e6ac:	080103a4 	.word	0x080103a4
 800e6b0:	08012acc 	.word	0x08012acc
    u16_t datagram_len = (u16_t)(ipr->datagram_len + IP_HLEN);
 800e6b4:	8ba0      	ldrh	r0, [r4, #28]
 800e6b6:	3014      	adds	r0, #20
    r = ((struct ip_reass_helper *)ipr->p->payload)->next_pbuf;
 800e6b8:	6863      	ldr	r3, [r4, #4]
 800e6ba:	685d      	ldr	r5, [r3, #4]
 800e6bc:	682e      	ldr	r6, [r5, #0]
    SMEMCPY(fraghdr, &ipr->iphdr, IP_HLEN);
 800e6be:	68a3      	ldr	r3, [r4, #8]
 800e6c0:	68e7      	ldr	r7, [r4, #12]
 800e6c2:	6921      	ldr	r1, [r4, #16]
 800e6c4:	6962      	ldr	r2, [r4, #20]
 800e6c6:	602b      	str	r3, [r5, #0]
 800e6c8:	606f      	str	r7, [r5, #4]
 800e6ca:	60a9      	str	r1, [r5, #8]
 800e6cc:	60ea      	str	r2, [r5, #12]
 800e6ce:	69a3      	ldr	r3, [r4, #24]
 800e6d0:	612b      	str	r3, [r5, #16]
    IPH_LEN_SET(fraghdr, lwip_htons(datagram_len));
 800e6d2:	b280      	uxth	r0, r0
 800e6d4:	f7f9 f9d8 	bl	8007a88 <lwip_htons>
 800e6d8:	8068      	strh	r0, [r5, #2]
    IPH_OFFSET_SET(fraghdr, 0);
 800e6da:	2300      	movs	r3, #0
 800e6dc:	71ab      	strb	r3, [r5, #6]
 800e6de:	71eb      	strb	r3, [r5, #7]
    IPH_CHKSUM_SET(fraghdr, 0);
 800e6e0:	72ab      	strb	r3, [r5, #10]
 800e6e2:	72eb      	strb	r3, [r5, #11]
    p = ipr->p;
 800e6e4:	6865      	ldr	r5, [r4, #4]
    while (r != NULL) {
 800e6e6:	b16e      	cbz	r6, 800e704 <ip4_reass+0x340>
      pbuf_remove_header(r, IP_HLEN);
 800e6e8:	f04f 0814 	mov.w	r8, #20
      iprh = (struct ip_reass_helper *)r->payload;
 800e6ec:	6877      	ldr	r7, [r6, #4]
      pbuf_remove_header(r, IP_HLEN);
 800e6ee:	4641      	mov	r1, r8
 800e6f0:	4630      	mov	r0, r6
 800e6f2:	f7f9 ffc9 	bl	8008688 <pbuf_remove_header>
      pbuf_cat(p, r);
 800e6f6:	4631      	mov	r1, r6
 800e6f8:	4628      	mov	r0, r5
 800e6fa:	f7fa f9a5 	bl	8008a48 <pbuf_cat>
      r = iprh->next_pbuf;
 800e6fe:	683e      	ldr	r6, [r7, #0]
    while (r != NULL) {
 800e700:	2e00      	cmp	r6, #0
 800e702:	d1f3      	bne.n	800e6ec <ip4_reass+0x328>
    if (ipr == reassdatagrams) {
 800e704:	4b3d      	ldr	r3, [pc, #244]	; (800e7fc <ip4_reass+0x438>)
 800e706:	6819      	ldr	r1, [r3, #0]
 800e708:	42a1      	cmp	r1, r4
 800e70a:	d005      	beq.n	800e718 <ip4_reass+0x354>
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 800e70c:	b129      	cbz	r1, 800e71a <ip4_reass+0x356>
        if (ipr_prev->next == ipr) {
 800e70e:	680b      	ldr	r3, [r1, #0]
 800e710:	42a3      	cmp	r3, r4
 800e712:	d002      	beq.n	800e71a <ip4_reass+0x356>
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 800e714:	4619      	mov	r1, r3
 800e716:	e7f9      	b.n	800e70c <ip4_reass+0x348>
      ipr_prev = NULL;
 800e718:	2100      	movs	r1, #0
    ip_reass_dequeue_datagram(ipr, ipr_prev);
 800e71a:	4620      	mov	r0, r4
 800e71c:	f7ff fd22 	bl	800e164 <ip_reass_dequeue_datagram>
    clen = pbuf_clen(p);
 800e720:	4628      	mov	r0, r5
 800e722:	f7fa f969 	bl	80089f8 <pbuf_clen>
 800e726:	4604      	mov	r4, r0
    LWIP_ASSERT("ip_reass_pbufcount >= clen", ip_reass_pbufcount >= clen);
 800e728:	4b35      	ldr	r3, [pc, #212]	; (800e800 <ip4_reass+0x43c>)
 800e72a:	881b      	ldrh	r3, [r3, #0]
 800e72c:	4283      	cmp	r3, r0
 800e72e:	d304      	bcc.n	800e73a <ip4_reass+0x376>
    ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - clen);
 800e730:	4a33      	ldr	r2, [pc, #204]	; (800e800 <ip4_reass+0x43c>)
 800e732:	8813      	ldrh	r3, [r2, #0]
 800e734:	1b1c      	subs	r4, r3, r4
 800e736:	8014      	strh	r4, [r2, #0]
    return p;
 800e738:	e6c3      	b.n	800e4c2 <ip4_reass+0xfe>
    LWIP_ASSERT("ip_reass_pbufcount >= clen", ip_reass_pbufcount >= clen);
 800e73a:	4b32      	ldr	r3, [pc, #200]	; (800e804 <ip4_reass+0x440>)
 800e73c:	f240 229b 	movw	r2, #667	; 0x29b
 800e740:	4931      	ldr	r1, [pc, #196]	; (800e808 <ip4_reass+0x444>)
 800e742:	4832      	ldr	r0, [pc, #200]	; (800e80c <ip4_reass+0x448>)
 800e744:	f000 fcd6 	bl	800f0f4 <iprintf>
 800e748:	e7f2      	b.n	800e730 <ip4_reass+0x36c>
  LWIP_ASSERT("ipr != NULL", ipr != NULL);
 800e74a:	4b2e      	ldr	r3, [pc, #184]	; (800e804 <ip4_reass+0x440>)
 800e74c:	f44f 722a 	mov.w	r2, #680	; 0x2a8
 800e750:	492f      	ldr	r1, [pc, #188]	; (800e810 <ip4_reass+0x44c>)
 800e752:	482e      	ldr	r0, [pc, #184]	; (800e80c <ip4_reass+0x448>)
 800e754:	f000 fcce 	bl	800f0f4 <iprintf>
 800e758:	e6ab      	b.n	800e4b2 <ip4_reass+0xee>
    LWIP_ASSERT("not firstalthough just enqueued", ipr == reassdatagrams);
 800e75a:	4b28      	ldr	r3, [pc, #160]	; (800e7fc <ip4_reass+0x438>)
 800e75c:	681b      	ldr	r3, [r3, #0]
 800e75e:	42a3      	cmp	r3, r4
 800e760:	d006      	beq.n	800e770 <ip4_reass+0x3ac>
 800e762:	4b28      	ldr	r3, [pc, #160]	; (800e804 <ip4_reass+0x440>)
 800e764:	f240 22ab 	movw	r2, #683	; 0x2ab
 800e768:	492a      	ldr	r1, [pc, #168]	; (800e814 <ip4_reass+0x450>)
 800e76a:	4828      	ldr	r0, [pc, #160]	; (800e80c <ip4_reass+0x448>)
 800e76c:	f000 fcc2 	bl	800f0f4 <iprintf>
    ip_reass_dequeue_datagram(ipr, NULL);
 800e770:	2100      	movs	r1, #0
 800e772:	4620      	mov	r0, r4
 800e774:	f7ff fcf6 	bl	800e164 <ip_reass_dequeue_datagram>
 800e778:	e69f      	b.n	800e4ba <ip4_reass+0xf6>
      iprh_prev->next_pbuf = new_p;
 800e77a:	601d      	str	r5, [r3, #0]
      if (iprh_prev->end != iprh->start) {
 800e77c:	f8ba 3004 	ldrh.w	r3, [sl, #4]
 800e780:	455b      	cmp	r3, fp
 800e782:	f43f af04 	beq.w	800e58e <ip4_reass+0x1ca>
  if (is_last || ((ipr->flags & IP_REASS_FLAG_LASTFRAG) != 0)) {
 800e786:	f1b9 0f00 	cmp.w	r9, #0
 800e78a:	d081      	beq.n	800e690 <ip4_reass+0x2cc>
 800e78c:	7fa3      	ldrb	r3, [r4, #30]
 800e78e:	f013 0f01 	tst.w	r3, #1
 800e792:	f43f af03 	beq.w	800e59c <ip4_reass+0x1d8>
 800e796:	f04f 0e00 	mov.w	lr, #0
 800e79a:	e75e      	b.n	800e65a <ip4_reass+0x296>
      ipr->p = new_p;
 800e79c:	6065      	str	r5, [r4, #4]
  if (is_last || ((ipr->flags & IP_REASS_FLAG_LASTFRAG) != 0)) {
 800e79e:	f1b9 0f00 	cmp.w	r9, #0
 800e7a2:	f43f af2a 	beq.w	800e5fa <ip4_reass+0x236>
  int valid = 1;
 800e7a6:	f04f 0e01 	mov.w	lr, #1
 800e7aa:	e6f3      	b.n	800e594 <ip4_reass+0x1d0>
  ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 800e7ac:	2004      	movs	r0, #4
 800e7ae:	f7f9 fcb9 	bl	8008124 <memp_malloc>
  if (ipr == NULL) {
 800e7b2:	4604      	mov	r4, r0
 800e7b4:	2800      	cmp	r0, #0
 800e7b6:	f43f ae88 	beq.w	800e4ca <ip4_reass+0x106>
  memset(ipr, 0, sizeof(struct ip_reassdata));
 800e7ba:	2300      	movs	r3, #0
 800e7bc:	6063      	str	r3, [r4, #4]
 800e7be:	60a3      	str	r3, [r4, #8]
 800e7c0:	60e3      	str	r3, [r4, #12]
 800e7c2:	6123      	str	r3, [r4, #16]
 800e7c4:	6163      	str	r3, [r4, #20]
 800e7c6:	61a3      	str	r3, [r4, #24]
 800e7c8:	61e3      	str	r3, [r4, #28]
  ipr->timer = IP_REASS_MAXAGE;
 800e7ca:	230f      	movs	r3, #15
 800e7cc:	77e3      	strb	r3, [r4, #31]
  ipr->next = reassdatagrams;
 800e7ce:	4b0b      	ldr	r3, [pc, #44]	; (800e7fc <ip4_reass+0x438>)
 800e7d0:	681a      	ldr	r2, [r3, #0]
 800e7d2:	6022      	str	r2, [r4, #0]
  reassdatagrams = ipr;
 800e7d4:	601c      	str	r4, [r3, #0]
  SMEMCPY(&(ipr->iphdr), fraghdr, IP_HLEN);
 800e7d6:	f8d9 3000 	ldr.w	r3, [r9]
 800e7da:	f8d9 0004 	ldr.w	r0, [r9, #4]
 800e7de:	f8d9 1008 	ldr.w	r1, [r9, #8]
 800e7e2:	f8d9 200c 	ldr.w	r2, [r9, #12]
 800e7e6:	60a3      	str	r3, [r4, #8]
 800e7e8:	60e0      	str	r0, [r4, #12]
 800e7ea:	6121      	str	r1, [r4, #16]
 800e7ec:	6162      	str	r2, [r4, #20]
 800e7ee:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800e7f2:	61a3      	str	r3, [r4, #24]
    if (ipr == NULL) {
 800e7f4:	e63b      	b.n	800e46e <ip4_reass+0xaa>
          LWIP_ASSERT("sanity check",
 800e7f6:	f04f 0e01 	mov.w	lr, #1
 800e7fa:	e72e      	b.n	800e65a <ip4_reass+0x296>
 800e7fc:	20010a68 	.word	0x20010a68
 800e800:	20010a64 	.word	0x20010a64
 800e804:	080129f4 	.word	0x080129f4
 800e808:	08012af0 	.word	0x08012af0
 800e80c:	080103a4 	.word	0x080103a4
 800e810:	08012b0c 	.word	0x08012b0c
 800e814:	08012b18 	.word	0x08012b18

0800e818 <ip4_frag>:
 *
 * @return ERR_OK if sent successfully, err_t otherwise
 */
err_t
ip4_frag(struct pbuf *p, struct netif *netif, const ip4_addr_t *dest)
{
 800e818:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e81c:	b08d      	sub	sp, #52	; 0x34
 800e81e:	4605      	mov	r5, r0
 800e820:	9107      	str	r1, [sp, #28]
 800e822:	920a      	str	r2, [sp, #40]	; 0x28
  u16_t newpbuflen = 0;
  u16_t left_to_copy;
#endif
  struct ip_hdr *original_iphdr;
  struct ip_hdr *iphdr;
  const u16_t nfb = (u16_t)((netif->mtu - IP_HLEN) / 8);
 800e824:	8c8b      	ldrh	r3, [r1, #36]	; 0x24
 800e826:	3b14      	subs	r3, #20
 800e828:	bf48      	it	mi
 800e82a:	3307      	addmi	r3, #7
 800e82c:	f3c3 03cf 	ubfx	r3, r3, #3, #16
 800e830:	9306      	str	r3, [sp, #24]
  int last;
  u16_t poff = IP_HLEN;
  u16_t tmp;
  int mf_set;

  original_iphdr = (struct ip_hdr *)p->payload;
 800e832:	f8d0 a004 	ldr.w	sl, [r0, #4]
  iphdr = original_iphdr;
  if (IPH_HL_BYTES(iphdr) != IP_HLEN) {
 800e836:	f89a 3000 	ldrb.w	r3, [sl]
 800e83a:	f003 030f 	and.w	r3, r3, #15
 800e83e:	2b05      	cmp	r3, #5
 800e840:	f040 80d9 	bne.w	800e9f6 <ip4_frag+0x1de>
    /* ip4_frag() does not support IP options */
    return ERR_VAL;
  }
  LWIP_ERROR("ip4_frag(): pbuf too short", p->len >= IP_HLEN, return ERR_VAL);
 800e844:	8943      	ldrh	r3, [r0, #10]
 800e846:	2b13      	cmp	r3, #19
 800e848:	d943      	bls.n	800e8d2 <ip4_frag+0xba>

  /* Save original offset */
  tmp = lwip_ntohs(IPH_OFFSET(iphdr));
 800e84a:	f8ba 0006 	ldrh.w	r0, [sl, #6]
 800e84e:	f7f9 f91b 	bl	8007a88 <lwip_htons>
  ofo = tmp & IP_OFFMASK;
 800e852:	f3c0 030c 	ubfx	r3, r0, #0, #13
 800e856:	9305      	str	r3, [sp, #20]
  /* already fragmented? if so, the last fragment we create must have MF, too */
  mf_set = tmp & IP_MF;
 800e858:	f400 5300 	and.w	r3, r0, #8192	; 0x2000
 800e85c:	930b      	str	r3, [sp, #44]	; 0x2c

  left = (u16_t)(p->tot_len - IP_HLEN);
 800e85e:	892b      	ldrh	r3, [r5, #8]
 800e860:	3b14      	subs	r3, #20
 800e862:	b29b      	uxth	r3, r3
 800e864:	9303      	str	r3, [sp, #12]

  while (left) {
 800e866:	2b00      	cmp	r3, #0
 800e868:	f000 80c8 	beq.w	800e9fc <ip4_frag+0x1e4>
    /* Fill this fragment */
    fragsize = LWIP_MIN(left, (u16_t)(nfb * 8));
 800e86c:	9b06      	ldr	r3, [sp, #24]
 800e86e:	00db      	lsls	r3, r3, #3
 800e870:	b29b      	uxth	r3, r3
 800e872:	9308      	str	r3, [sp, #32]
  u16_t poff = IP_HLEN;
 800e874:	f04f 0914 	mov.w	r9, #20
  u16_t newpbuflen = 0;
 800e878:	2400      	movs	r4, #0
    fragsize = LWIP_MIN(left, (u16_t)(nfb * 8));
 800e87a:	9b08      	ldr	r3, [sp, #32]
 800e87c:	9a03      	ldr	r2, [sp, #12]
 800e87e:	4293      	cmp	r3, r2
 800e880:	bf28      	it	cs
 800e882:	4613      	movcs	r3, r2
 800e884:	9304      	str	r3, [sp, #16]
    /* When not using a static buffer, create a chain of pbufs.
     * The first will be a PBUF_RAM holding the link and IP header.
     * The rest will be PBUF_REFs mirroring the pbuf chain to be fragged,
     * but limited to the size of an mtu.
     */
    rambuf = pbuf_alloc(PBUF_LINK, IP_HLEN, PBUF_RAM);
 800e886:	f44f 7220 	mov.w	r2, #640	; 0x280
 800e88a:	2114      	movs	r1, #20
 800e88c:	200e      	movs	r0, #14
 800e88e:	f7f9 ffab 	bl	80087e8 <pbuf_alloc>
    if (rambuf == NULL) {
 800e892:	4683      	mov	fp, r0
 800e894:	2800      	cmp	r0, #0
 800e896:	f000 80b3 	beq.w	800ea00 <ip4_frag+0x1e8>
      goto memerr;
    }
    LWIP_ASSERT("this needs a pbuf in one piece!",
 800e89a:	8943      	ldrh	r3, [r0, #10]
 800e89c:	2b13      	cmp	r3, #19
 800e89e:	d922      	bls.n	800e8e6 <ip4_frag+0xce>
                (rambuf->len >= (IP_HLEN)));
    SMEMCPY(rambuf->payload, original_iphdr, IP_HLEN);
 800e8a0:	f8db 3004 	ldr.w	r3, [fp, #4]
 800e8a4:	f8da 2000 	ldr.w	r2, [sl]
 800e8a8:	f8da 6004 	ldr.w	r6, [sl, #4]
 800e8ac:	f8da 0008 	ldr.w	r0, [sl, #8]
 800e8b0:	f8da 100c 	ldr.w	r1, [sl, #12]
 800e8b4:	601a      	str	r2, [r3, #0]
 800e8b6:	605e      	str	r6, [r3, #4]
 800e8b8:	6098      	str	r0, [r3, #8]
 800e8ba:	60d9      	str	r1, [r3, #12]
 800e8bc:	f8da 2010 	ldr.w	r2, [sl, #16]
 800e8c0:	611a      	str	r2, [r3, #16]
    iphdr = (struct ip_hdr *)rambuf->payload;
 800e8c2:	f8db 3004 	ldr.w	r3, [fp, #4]
 800e8c6:	9309      	str	r3, [sp, #36]	; 0x24

    left_to_copy = fragsize;
    while (left_to_copy) {
 800e8c8:	9b04      	ldr	r3, [sp, #16]
 800e8ca:	2b00      	cmp	r3, #0
 800e8cc:	d04e      	beq.n	800e96c <ip4_frag+0x154>
    left_to_copy = fragsize;
 800e8ce:	461e      	mov	r6, r3
 800e8d0:	e01d      	b.n	800e90e <ip4_frag+0xf6>
  LWIP_ERROR("ip4_frag(): pbuf too short", p->len >= IP_HLEN, return ERR_VAL);
 800e8d2:	4b4d      	ldr	r3, [pc, #308]	; (800ea08 <ip4_frag+0x1f0>)
 800e8d4:	f44f 723f 	mov.w	r2, #764	; 0x2fc
 800e8d8:	494c      	ldr	r1, [pc, #304]	; (800ea0c <ip4_frag+0x1f4>)
 800e8da:	484d      	ldr	r0, [pc, #308]	; (800ea10 <ip4_frag+0x1f8>)
 800e8dc:	f000 fc0a 	bl	800f0f4 <iprintf>
 800e8e0:	f06f 0005 	mvn.w	r0, #5
 800e8e4:	e07b      	b.n	800e9de <ip4_frag+0x1c6>
    LWIP_ASSERT("this needs a pbuf in one piece!",
 800e8e6:	4b48      	ldr	r3, [pc, #288]	; (800ea08 <ip4_frag+0x1f0>)
 800e8e8:	f44f 7249 	mov.w	r2, #804	; 0x324
 800e8ec:	4949      	ldr	r1, [pc, #292]	; (800ea14 <ip4_frag+0x1fc>)
 800e8ee:	4848      	ldr	r0, [pc, #288]	; (800ea10 <ip4_frag+0x1f8>)
 800e8f0:	f000 fc00 	bl	800f0f4 <iprintf>
 800e8f4:	e7d4      	b.n	800e8a0 <ip4_frag+0x88>
      struct pbuf_custom_ref *pcr;
      u16_t plen = (u16_t)(p->len - poff);
      LWIP_ASSERT("p->len >= poff", p->len >= poff);
 800e8f6:	4b44      	ldr	r3, [pc, #272]	; (800ea08 <ip4_frag+0x1f0>)
 800e8f8:	f240 322d 	movw	r2, #813	; 0x32d
 800e8fc:	4946      	ldr	r1, [pc, #280]	; (800ea18 <ip4_frag+0x200>)
 800e8fe:	4844      	ldr	r0, [pc, #272]	; (800ea10 <ip4_frag+0x1f8>)
 800e900:	f000 fbf8 	bl	800f0f4 <iprintf>
 800e904:	e009      	b.n	800e91a <ip4_frag+0x102>
      newpbuflen = LWIP_MIN(left_to_copy, plen);
      /* Is this pbuf already empty? */
      if (!newpbuflen) {
        poff = 0;
        p = p->next;
 800e906:	682d      	ldr	r5, [r5, #0]
    while (left_to_copy) {
 800e908:	b376      	cbz	r6, 800e968 <ip4_frag+0x150>
  u16_t newpbuflen = 0;
 800e90a:	f04f 0900 	mov.w	r9, #0
      u16_t plen = (u16_t)(p->len - poff);
 800e90e:	896b      	ldrh	r3, [r5, #10]
 800e910:	eba3 0409 	sub.w	r4, r3, r9
 800e914:	b2a4      	uxth	r4, r4
      LWIP_ASSERT("p->len >= poff", p->len >= poff);
 800e916:	454b      	cmp	r3, r9
 800e918:	d3ed      	bcc.n	800e8f6 <ip4_frag+0xde>
      newpbuflen = LWIP_MIN(left_to_copy, plen);
 800e91a:	42b4      	cmp	r4, r6
 800e91c:	bf28      	it	cs
 800e91e:	4634      	movcs	r4, r6
      if (!newpbuflen) {
 800e920:	2c00      	cmp	r4, #0
 800e922:	d0f0      	beq.n	800e906 <ip4_frag+0xee>
  return (struct pbuf_custom_ref *)memp_malloc(MEMP_FRAG_PBUF);
 800e924:	2005      	movs	r0, #5
 800e926:	f7f9 fbfd 	bl	8008124 <memp_malloc>
        continue;
      }
      pcr = ip_frag_alloc_pbuf_custom_ref();
      if (pcr == NULL) {
 800e92a:	4607      	mov	r7, r0
 800e92c:	2800      	cmp	r0, #0
 800e92e:	d051      	beq.n	800e9d4 <ip4_frag+0x1bc>
        pbuf_free(rambuf);
        goto memerr;
      }
      /* Mirror this pbuf, although we might not need all of it. */
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 800e930:	9401      	str	r4, [sp, #4]
 800e932:	686b      	ldr	r3, [r5, #4]
 800e934:	444b      	add	r3, r9
 800e936:	9300      	str	r3, [sp, #0]
 800e938:	4603      	mov	r3, r0
 800e93a:	2241      	movs	r2, #65	; 0x41
 800e93c:	4621      	mov	r1, r4
 800e93e:	2000      	movs	r0, #0
 800e940:	f7f9 fe80 	bl	8008644 <pbuf_alloced_custom>
                                    (u8_t *)p->payload + poff, newpbuflen);
      if (newpbuf == NULL) {
 800e944:	4680      	mov	r8, r0
 800e946:	2800      	cmp	r0, #0
 800e948:	d04c      	beq.n	800e9e4 <ip4_frag+0x1cc>
        ip_frag_free_pbuf_custom_ref(pcr);
        pbuf_free(rambuf);
        goto memerr;
      }
      pbuf_ref(p);
 800e94a:	4628      	mov	r0, r5
 800e94c:	f7fa f860 	bl	8008a10 <pbuf_ref>
      pcr->original = p;
 800e950:	617d      	str	r5, [r7, #20]
      pcr->pc.custom_free_function = ipfrag_free_pbuf_custom;
 800e952:	4b32      	ldr	r3, [pc, #200]	; (800ea1c <ip4_frag+0x204>)
 800e954:	613b      	str	r3, [r7, #16]

      /* Add it to end of rambuf's chain, but using pbuf_cat, not pbuf_chain
       * so that it is removed when pbuf_dechain is later called on rambuf.
       */
      pbuf_cat(rambuf, newpbuf);
 800e956:	4641      	mov	r1, r8
 800e958:	4658      	mov	r0, fp
 800e95a:	f7fa f875 	bl	8008a48 <pbuf_cat>
      left_to_copy = (u16_t)(left_to_copy - newpbuflen);
 800e95e:	1b36      	subs	r6, r6, r4
 800e960:	b2b6      	uxth	r6, r6
      if (left_to_copy) {
 800e962:	b11e      	cbz	r6, 800e96c <ip4_frag+0x154>
        poff = 0;
        p = p->next;
 800e964:	682d      	ldr	r5, [r5, #0]
    while (left_to_copy) {
 800e966:	e7d0      	b.n	800e90a <ip4_frag+0xf2>
        poff = 0;
 800e968:	46b1      	mov	r9, r6
 800e96a:	4634      	mov	r4, r6
      }
    }
    poff = (u16_t)(poff + newpbuflen);
 800e96c:	44a1      	add	r9, r4
 800e96e:	fa1f f989 	uxth.w	r9, r9

    /* Correct header */
    last = (left <= netif->mtu - IP_HLEN);

    /* Set new offset and MF flag */
    tmp = (IP_OFFMASK & (ofo));
 800e972:	9b05      	ldr	r3, [sp, #20]
 800e974:	f3c3 000c 	ubfx	r0, r3, #0, #13
    last = (left <= netif->mtu - IP_HLEN);
 800e978:	9b07      	ldr	r3, [sp, #28]
 800e97a:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800e97c:	3b13      	subs	r3, #19
    if (!last || mf_set) {
 800e97e:	9a03      	ldr	r2, [sp, #12]
 800e980:	4293      	cmp	r3, r2
 800e982:	dd01      	ble.n	800e988 <ip4_frag+0x170>
 800e984:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800e986:	b10b      	cbz	r3, 800e98c <ip4_frag+0x174>
      /* the last fragment has MF set if the input frame had it */
      tmp = tmp | IP_MF;
 800e988:	f440 5000 	orr.w	r0, r0, #8192	; 0x2000
    }
    IPH_OFFSET_SET(iphdr, lwip_htons(tmp));
 800e98c:	f7f9 f87c 	bl	8007a88 <lwip_htons>
 800e990:	9e09      	ldr	r6, [sp, #36]	; 0x24
 800e992:	80f0      	strh	r0, [r6, #6]
    IPH_LEN_SET(iphdr, lwip_htons((u16_t)(fragsize + IP_HLEN)));
 800e994:	9f04      	ldr	r7, [sp, #16]
 800e996:	f107 0014 	add.w	r0, r7, #20
 800e99a:	b280      	uxth	r0, r0
 800e99c:	f7f9 f874 	bl	8007a88 <lwip_htons>
 800e9a0:	8070      	strh	r0, [r6, #2]
    IPH_CHKSUM_SET(iphdr, 0);
 800e9a2:	2300      	movs	r3, #0
 800e9a4:	72b3      	strb	r3, [r6, #10]
 800e9a6:	72f3      	strb	r3, [r6, #11]
#endif /* CHECKSUM_GEN_IP */

    /* No need for separate header pbuf - we allowed room for it in rambuf
     * when allocated.
     */
    netif->output(netif, rambuf, dest);
 800e9a8:	9807      	ldr	r0, [sp, #28]
 800e9aa:	6943      	ldr	r3, [r0, #20]
 800e9ac:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800e9ae:	4659      	mov	r1, fp
 800e9b0:	4798      	blx	r3
     * recreate it next time round the loop. If we're lucky the hardware
     * will have already sent the packet, the free will really free, and
     * there will be zero memory penalty.
     */

    pbuf_free(rambuf);
 800e9b2:	4658      	mov	r0, fp
 800e9b4:	f7f9 fea8 	bl	8008708 <pbuf_free>
    left = (u16_t)(left - fragsize);
 800e9b8:	9b03      	ldr	r3, [sp, #12]
 800e9ba:	1bdb      	subs	r3, r3, r7
 800e9bc:	b29a      	uxth	r2, r3
 800e9be:	9203      	str	r2, [sp, #12]
    ofo = (u16_t)(ofo + nfb);
 800e9c0:	9b05      	ldr	r3, [sp, #20]
 800e9c2:	9906      	ldr	r1, [sp, #24]
 800e9c4:	440b      	add	r3, r1
 800e9c6:	b29b      	uxth	r3, r3
 800e9c8:	9305      	str	r3, [sp, #20]
  while (left) {
 800e9ca:	2a00      	cmp	r2, #0
 800e9cc:	f47f af55 	bne.w	800e87a <ip4_frag+0x62>
  }
  MIB2_STATS_INC(mib2.ipfragoks);
  return ERR_OK;
 800e9d0:	2000      	movs	r0, #0
 800e9d2:	e004      	b.n	800e9de <ip4_frag+0x1c6>
        pbuf_free(rambuf);
 800e9d4:	4658      	mov	r0, fp
 800e9d6:	f7f9 fe97 	bl	8008708 <pbuf_free>
memerr:
  MIB2_STATS_INC(mib2.ipfragfails);
  return ERR_MEM;
 800e9da:	f04f 30ff 	mov.w	r0, #4294967295
}
 800e9de:	b00d      	add	sp, #52	; 0x34
 800e9e0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        ip_frag_free_pbuf_custom_ref(pcr);
 800e9e4:	4638      	mov	r0, r7
 800e9e6:	f7ff fca5 	bl	800e334 <ip_frag_free_pbuf_custom_ref>
        pbuf_free(rambuf);
 800e9ea:	4658      	mov	r0, fp
 800e9ec:	f7f9 fe8c 	bl	8008708 <pbuf_free>
  return ERR_MEM;
 800e9f0:	f04f 30ff 	mov.w	r0, #4294967295
        goto memerr;
 800e9f4:	e7f3      	b.n	800e9de <ip4_frag+0x1c6>
    return ERR_VAL;
 800e9f6:	f06f 0005 	mvn.w	r0, #5
 800e9fa:	e7f0      	b.n	800e9de <ip4_frag+0x1c6>
  return ERR_OK;
 800e9fc:	2000      	movs	r0, #0
 800e9fe:	e7ee      	b.n	800e9de <ip4_frag+0x1c6>
  return ERR_MEM;
 800ea00:	f04f 30ff 	mov.w	r0, #4294967295
 800ea04:	e7eb      	b.n	800e9de <ip4_frag+0x1c6>
 800ea06:	bf00      	nop
 800ea08:	080129f4 	.word	0x080129f4
 800ea0c:	08012b38 	.word	0x08012b38
 800ea10:	080103a4 	.word	0x080103a4
 800ea14:	08012b54 	.word	0x08012b54
 800ea18:	08012b74 	.word	0x08012b74
 800ea1c:	0800e361 	.word	0x0800e361

0800ea20 <ethernet_input>:
 * @see ETHARP_SUPPORT_VLAN
 * @see LWIP_HOOK_VLAN_CHECK
 */
err_t
ethernet_input(struct pbuf *p, struct netif *netif)
{
 800ea20:	b570      	push	{r4, r5, r6, lr}
 800ea22:	4604      	mov	r4, r0
  u16_t next_hdr_offset = SIZEOF_ETH_HDR;
#endif /* LWIP_ARP || ETHARP_SUPPORT_VLAN */

  LWIP_ASSERT_CORE_LOCKED();

  if (p->len <= SIZEOF_ETH_HDR) {
 800ea24:	8943      	ldrh	r3, [r0, #10]
 800ea26:	2b0e      	cmp	r3, #14
 800ea28:	d91c      	bls.n	800ea64 <ethernet_input+0x44>
 800ea2a:	460d      	mov	r5, r1
    ETHARP_STATS_INC(etharp.drop);
    MIB2_STATS_NETIF_INC(netif, ifinerrors);
    goto free_and_return;
  }

  if (p->if_idx == NETIF_NO_INDEX) {
 800ea2c:	7bc3      	ldrb	r3, [r0, #15]
 800ea2e:	b91b      	cbnz	r3, 800ea38 <ethernet_input+0x18>
    p->if_idx = netif_get_index(netif);
 800ea30:	f891 3030 	ldrb.w	r3, [r1, #48]	; 0x30
 800ea34:	3301      	adds	r3, #1
 800ea36:	73c3      	strb	r3, [r0, #15]
  }

  /* points to packet payload, which starts with an Ethernet header */
  ethhdr = (struct eth_hdr *)p->payload;
 800ea38:	6860      	ldr	r0, [r4, #4]
               (unsigned char)ethhdr->dest.addr[3], (unsigned char)ethhdr->dest.addr[4], (unsigned char)ethhdr->dest.addr[5],
               (unsigned char)ethhdr->src.addr[0],  (unsigned char)ethhdr->src.addr[1],  (unsigned char)ethhdr->src.addr[2],
               (unsigned char)ethhdr->src.addr[3],  (unsigned char)ethhdr->src.addr[4],  (unsigned char)ethhdr->src.addr[5],
               lwip_htons(ethhdr->type)));

  type = ethhdr->type;
 800ea3a:	8986      	ldrh	r6, [r0, #12]

#if LWIP_ARP_FILTER_NETIF
  netif = LWIP_ARP_FILTER_NETIF_FN(p, netif, lwip_htons(type));
#endif /* LWIP_ARP_FILTER_NETIF*/

  if (ethhdr->dest.addr[0] & 1) {
 800ea3c:	7803      	ldrb	r3, [r0, #0]
 800ea3e:	f013 0f01 	tst.w	r3, #1
 800ea42:	d00a      	beq.n	800ea5a <ethernet_input+0x3a>
    /* this might be a multicast or broadcast packet */
    if (ethhdr->dest.addr[0] == LL_IP4_MULTICAST_ADDR_0) {
 800ea44:	2b01      	cmp	r3, #1
 800ea46:	d012      	beq.n	800ea6e <ethernet_input+0x4e>
             (ethhdr->dest.addr[1] == LL_IP6_MULTICAST_ADDR_1)) {
      /* mark the pbuf as link-layer multicast */
      p->flags |= PBUF_FLAG_LLMCAST;
    }
#endif /* LWIP_IPV6 */
    else if (eth_addr_cmp(&ethhdr->dest, &ethbroadcast)) {
 800ea48:	2206      	movs	r2, #6
 800ea4a:	491e      	ldr	r1, [pc, #120]	; (800eac4 <ethernet_input+0xa4>)
 800ea4c:	f000 fa7d 	bl	800ef4a <memcmp>
 800ea50:	b918      	cbnz	r0, 800ea5a <ethernet_input+0x3a>
      /* mark the pbuf as link-layer broadcast */
      p->flags |= PBUF_FLAG_LLBCAST;
 800ea52:	7b63      	ldrb	r3, [r4, #13]
 800ea54:	f043 0308 	orr.w	r3, r3, #8
 800ea58:	7363      	strb	r3, [r4, #13]
    }
  }

  switch (type) {
 800ea5a:	2e08      	cmp	r6, #8
 800ea5c:	d012      	beq.n	800ea84 <ethernet_input+0x64>
 800ea5e:	f5b6 6fc1 	cmp.w	r6, #1544	; 0x608
 800ea62:	d01f      	beq.n	800eaa4 <ethernet_input+0x84>
  /* This means the pbuf is freed or consumed,
     so the caller doesn't have to free it again */
  return ERR_OK;

free_and_return:
  pbuf_free(p);
 800ea64:	4620      	mov	r0, r4
 800ea66:	f7f9 fe4f 	bl	8008708 <pbuf_free>
  return ERR_OK;
}
 800ea6a:	2000      	movs	r0, #0
 800ea6c:	bd70      	pop	{r4, r5, r6, pc}
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 800ea6e:	7843      	ldrb	r3, [r0, #1]
 800ea70:	2b00      	cmp	r3, #0
 800ea72:	d1f2      	bne.n	800ea5a <ethernet_input+0x3a>
 800ea74:	7883      	ldrb	r3, [r0, #2]
 800ea76:	2b5e      	cmp	r3, #94	; 0x5e
 800ea78:	d1ef      	bne.n	800ea5a <ethernet_input+0x3a>
        p->flags |= PBUF_FLAG_LLMCAST;
 800ea7a:	7b63      	ldrb	r3, [r4, #13]
 800ea7c:	f043 0310 	orr.w	r3, r3, #16
 800ea80:	7363      	strb	r3, [r4, #13]
 800ea82:	e7ea      	b.n	800ea5a <ethernet_input+0x3a>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 800ea84:	f895 302d 	ldrb.w	r3, [r5, #45]	; 0x2d
 800ea88:	f013 0f08 	tst.w	r3, #8
 800ea8c:	d0ea      	beq.n	800ea64 <ethernet_input+0x44>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 800ea8e:	210e      	movs	r1, #14
 800ea90:	4620      	mov	r0, r4
 800ea92:	f7f9 fdf9 	bl	8008688 <pbuf_remove_header>
 800ea96:	2800      	cmp	r0, #0
 800ea98:	d1e4      	bne.n	800ea64 <ethernet_input+0x44>
        ip4_input(p, netif);
 800ea9a:	4629      	mov	r1, r5
 800ea9c:	4620      	mov	r0, r4
 800ea9e:	f7ff f9dd 	bl	800de5c <ip4_input>
      break;
 800eaa2:	e7e2      	b.n	800ea6a <ethernet_input+0x4a>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 800eaa4:	f895 302d 	ldrb.w	r3, [r5, #45]	; 0x2d
 800eaa8:	f013 0f08 	tst.w	r3, #8
 800eaac:	d0da      	beq.n	800ea64 <ethernet_input+0x44>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 800eaae:	210e      	movs	r1, #14
 800eab0:	4620      	mov	r0, r4
 800eab2:	f7f9 fde9 	bl	8008688 <pbuf_remove_header>
 800eab6:	2800      	cmp	r0, #0
 800eab8:	d1d4      	bne.n	800ea64 <ethernet_input+0x44>
        etharp_input(p, netif);
 800eaba:	4629      	mov	r1, r5
 800eabc:	4620      	mov	r0, r4
 800eabe:	f7fe fd9d 	bl	800d5fc <etharp_input>
      break;
 800eac2:	e7d2      	b.n	800ea6a <ethernet_input+0x4a>
 800eac4:	08012bf0 	.word	0x08012bf0

0800eac8 <ethernet_output>:
 * @return ERR_OK if the packet was sent, any other err_t on failure
 */
err_t
ethernet_output(struct netif * netif, struct pbuf * p,
                const struct eth_addr * src, const struct eth_addr * dst,
                u16_t eth_type) {
 800eac8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800eacc:	4605      	mov	r5, r0
 800eace:	460c      	mov	r4, r1
 800ead0:	4616      	mov	r6, r2
 800ead2:	461f      	mov	r7, r3
  struct eth_hdr *ethhdr;
  u16_t eth_type_be = lwip_htons(eth_type);
 800ead4:	f8bd 0018 	ldrh.w	r0, [sp, #24]
 800ead8:	f7f8 ffd6 	bl	8007a88 <lwip_htons>
 800eadc:	4680      	mov	r8, r0

    eth_type_be = PP_HTONS(ETHTYPE_VLAN);
  } else
#endif /* ETHARP_SUPPORT_VLAN && defined(LWIP_HOOK_VLAN_SET) */
  {
    if (pbuf_add_header(p, SIZEOF_ETH_HDR) != 0) {
 800eade:	210e      	movs	r1, #14
 800eae0:	4620      	mov	r0, r4
 800eae2:	f7f9 fdcc 	bl	800867e <pbuf_add_header>
 800eae6:	b9e8      	cbnz	r0, 800eb24 <ethernet_output+0x5c>
    }
  }

  LWIP_ASSERT_CORE_LOCKED();

  ethhdr = (struct eth_hdr *)p->payload;
 800eae8:	6861      	ldr	r1, [r4, #4]
  ethhdr->type = eth_type_be;
 800eaea:	f8a1 800c 	strh.w	r8, [r1, #12]
  SMEMCPY(&ethhdr->dest, dst, ETH_HWADDR_LEN);
 800eaee:	683b      	ldr	r3, [r7, #0]
 800eaf0:	600b      	str	r3, [r1, #0]
 800eaf2:	88bb      	ldrh	r3, [r7, #4]
 800eaf4:	808b      	strh	r3, [r1, #4]
  SMEMCPY(&ethhdr->src,  src, ETH_HWADDR_LEN);
 800eaf6:	6833      	ldr	r3, [r6, #0]
 800eaf8:	f8c1 3006 	str.w	r3, [r1, #6]
 800eafc:	88b3      	ldrh	r3, [r6, #4]
 800eafe:	814b      	strh	r3, [r1, #10]

  LWIP_ASSERT("netif->hwaddr_len must be 6 for ethernet_output!",
 800eb00:	f895 302c 	ldrb.w	r3, [r5, #44]	; 0x2c
 800eb04:	2b06      	cmp	r3, #6
 800eb06:	d105      	bne.n	800eb14 <ethernet_output+0x4c>
              (netif->hwaddr_len == ETH_HWADDR_LEN));
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE,
              ("ethernet_output: sending packet %p\n", (void *)p));

  /* send the packet */
  return netif->linkoutput(netif, p);
 800eb08:	69ab      	ldr	r3, [r5, #24]
 800eb0a:	4621      	mov	r1, r4
 800eb0c:	4628      	mov	r0, r5
 800eb0e:	4798      	blx	r3
pbuf_header_failed:
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
              ("ethernet_output: could not allocate room for header.\n"));
  LINK_STATS_INC(link.lenerr);
  return ERR_BUF;
}
 800eb10:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  LWIP_ASSERT("netif->hwaddr_len must be 6 for ethernet_output!",
 800eb14:	4b05      	ldr	r3, [pc, #20]	; (800eb2c <ethernet_output+0x64>)
 800eb16:	f44f 7299 	mov.w	r2, #306	; 0x132
 800eb1a:	4905      	ldr	r1, [pc, #20]	; (800eb30 <ethernet_output+0x68>)
 800eb1c:	4805      	ldr	r0, [pc, #20]	; (800eb34 <ethernet_output+0x6c>)
 800eb1e:	f000 fae9 	bl	800f0f4 <iprintf>
 800eb22:	e7f1      	b.n	800eb08 <ethernet_output+0x40>
  return ERR_BUF;
 800eb24:	f06f 0001 	mvn.w	r0, #1
 800eb28:	e7f2      	b.n	800eb10 <ethernet_output+0x48>
 800eb2a:	bf00      	nop
 800eb2c:	08012b84 	.word	0x08012b84
 800eb30:	08012bbc 	.word	0x08012bbc
 800eb34:	080103a4 	.word	0x080103a4

0800eb38 <sys_mbox_new>:
#endif

/*-----------------------------------------------------------------------------------*/
//  Creates an empty mailbox.
err_t sys_mbox_new(sys_mbox_t *mbox, int size)
{
 800eb38:	b510      	push	{r4, lr}
 800eb3a:	4604      	mov	r4, r0
 800eb3c:	4608      	mov	r0, r1
#if (osCMSIS < 0x20000U)
  osMessageQDef(QUEUE, size, void *);
  *mbox = osMessageCreate(osMessageQ(QUEUE), NULL);
#else
  *mbox = osMessageQueueNew(size, sizeof(void *), NULL);
 800eb3e:	2200      	movs	r2, #0
 800eb40:	2104      	movs	r1, #4
 800eb42:	f7f5 f894 	bl	8003c6e <osMessageQueueNew>
 800eb46:	6020      	str	r0, [r4, #0]
  if(lwip_stats.sys.mbox.max < lwip_stats.sys.mbox.used)
  {
    lwip_stats.sys.mbox.max = lwip_stats.sys.mbox.used;
  }
#endif /* SYS_STATS */
  if(*mbox == NULL)
 800eb48:	fab0 f080 	clz	r0, r0
 800eb4c:	0940      	lsrs	r0, r0, #5
    return ERR_MEM;

  return ERR_OK;
}
 800eb4e:	4240      	negs	r0, r0
 800eb50:	bd10      	pop	{r4, pc}

0800eb52 <sys_mbox_free>:
  Deallocates a mailbox. If there are messages still present in the
  mailbox when the mailbox is deallocated, it is an indication of a
  programming error in lwIP and the developer should be notified.
*/
void sys_mbox_free(sys_mbox_t *mbox)
{
 800eb52:	b510      	push	{r4, lr}
 800eb54:	4604      	mov	r4, r0
#if (osCMSIS < 0x20000U)
  if(osMessageWaiting(*mbox))
#else
  if(osMessageQueueGetCount(*mbox))
 800eb56:	6800      	ldr	r0, [r0, #0]
 800eb58:	f7f5 f952 	bl	8003e00 <osMessageQueueGetCount>

  }
#if (osCMSIS < 0x20000U)
  osMessageDelete(*mbox);
#else
  osMessageQueueDelete(*mbox);
 800eb5c:	6820      	ldr	r0, [r4, #0]
 800eb5e:	f7f5 f95c 	bl	8003e1a <osMessageQueueDelete>
#endif
#if SYS_STATS
  --lwip_stats.sys.mbox.used;
#endif /* SYS_STATS */
}
 800eb62:	bd10      	pop	{r4, pc}

0800eb64 <sys_mbox_trypost>:


/*-----------------------------------------------------------------------------------*/
//   Try to post the "msg" to the mailbox.
err_t sys_mbox_trypost(sys_mbox_t *mbox, void *msg)
{
 800eb64:	b500      	push	{lr}
 800eb66:	b083      	sub	sp, #12
 800eb68:	9101      	str	r1, [sp, #4]
  err_t result;
#if (osCMSIS < 0x20000U)
  if(osMessagePut(*mbox, (uint32_t)msg, 0) == osOK)
#else
  if(osMessageQueuePut(*mbox, &msg, 0, 0) == osOK)
 800eb6a:	2300      	movs	r3, #0
 800eb6c:	461a      	mov	r2, r3
 800eb6e:	a901      	add	r1, sp, #4
 800eb70:	6800      	ldr	r0, [r0, #0]
 800eb72:	f7f5 f8c2 	bl	8003cfa <osMessageQueuePut>
 800eb76:	3800      	subs	r0, #0
 800eb78:	bf18      	it	ne
 800eb7a:	2001      	movne	r0, #1
    lwip_stats.sys.mbox.err++;
#endif /* SYS_STATS */
  }

  return result;
}
 800eb7c:	4240      	negs	r0, r0
 800eb7e:	b003      	add	sp, #12
 800eb80:	f85d fb04 	ldr.w	pc, [sp], #4

0800eb84 <sys_arch_mbox_fetch>:

  Note that a function with a similar name, sys_mbox_fetch(), is
  implemented by lwIP.
*/
u32_t sys_arch_mbox_fetch(sys_mbox_t *mbox, void **msg, u32_t timeout)
{
 800eb84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800eb86:	4606      	mov	r6, r0
 800eb88:	460f      	mov	r7, r1
 800eb8a:	4615      	mov	r5, r2
#if (osCMSIS < 0x20000U)
  osEvent event;
  uint32_t starttime = osKernelSysTick();
#else
  osStatus_t status;
  uint32_t starttime = osKernelGetTickCount();
 800eb8c:	f7f4 fea8 	bl	80038e0 <osKernelGetTickCount>
 800eb90:	4604      	mov	r4, r0
#endif
  if(timeout != 0)
 800eb92:	b16d      	cbz	r5, 800ebb0 <sys_arch_mbox_fetch+0x2c>
    {
      *msg = (void *)event.value.v;
      return (osKernelSysTick() - starttime);
    }
#else
    status = osMessageQueueGet(*mbox, msg, 0, timeout);
 800eb94:	462b      	mov	r3, r5
 800eb96:	2200      	movs	r2, #0
 800eb98:	4639      	mov	r1, r7
 800eb9a:	6830      	ldr	r0, [r6, #0]
 800eb9c:	f7f5 f8ef 	bl	8003d7e <osMessageQueueGet>
    if (status == osOK)
 800eba0:	b110      	cbz	r0, 800eba8 <sys_arch_mbox_fetch+0x24>
      return (osKernelGetTickCount() - starttime);
    }
#endif
    else
    {
      return SYS_ARCH_TIMEOUT;
 800eba2:	f04f 30ff 	mov.w	r0, #4294967295
#else
    osMessageQueueGet(*mbox, msg, 0, osWaitForever );
    return (osKernelGetTickCount() - starttime);
#endif
  }
}
 800eba6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      return (osKernelGetTickCount() - starttime);
 800eba8:	f7f4 fe9a 	bl	80038e0 <osKernelGetTickCount>
 800ebac:	1b00      	subs	r0, r0, r4
 800ebae:	e7fa      	b.n	800eba6 <sys_arch_mbox_fetch+0x22>
    osMessageQueueGet(*mbox, msg, 0, osWaitForever );
 800ebb0:	f04f 33ff 	mov.w	r3, #4294967295
 800ebb4:	2200      	movs	r2, #0
 800ebb6:	4639      	mov	r1, r7
 800ebb8:	6830      	ldr	r0, [r6, #0]
 800ebba:	f7f5 f8e0 	bl	8003d7e <osMessageQueueGet>
    return (osKernelGetTickCount() - starttime);
 800ebbe:	f7f4 fe8f 	bl	80038e0 <osKernelGetTickCount>
 800ebc2:	1b00      	subs	r0, r0, r4
 800ebc4:	e7ef      	b.n	800eba6 <sys_arch_mbox_fetch+0x22>

0800ebc6 <sys_arch_mbox_tryfetch>:
/*
  Similar to sys_arch_mbox_fetch, but if message is not ready immediately, we'll
  return with SYS_MBOX_EMPTY.  On success, 0 is returned.
*/
u32_t sys_arch_mbox_tryfetch(sys_mbox_t *mbox, void **msg)
{
 800ebc6:	b508      	push	{r3, lr}

  if(event.status == osEventMessage)
  {
    *msg = (void *)event.value.v;
#else
  if (osMessageQueueGet(*mbox, msg, 0, 0) == osOK)
 800ebc8:	2300      	movs	r3, #0
 800ebca:	461a      	mov	r2, r3
 800ebcc:	6800      	ldr	r0, [r0, #0]
 800ebce:	f7f5 f8d6 	bl	8003d7e <osMessageQueueGet>
 800ebd2:	3800      	subs	r0, #0
 800ebd4:	bf18      	it	ne
 800ebd6:	2001      	movne	r0, #1
  }
  else
  {
    return SYS_MBOX_EMPTY;
  }
}
 800ebd8:	4240      	negs	r0, r0
 800ebda:	bd08      	pop	{r3, pc}

0800ebdc <sys_mbox_valid>:
/*----------------------------------------------------------------------------------*/
int sys_mbox_valid(sys_mbox_t *mbox)
{
  if (*mbox == SYS_MBOX_NULL)
 800ebdc:	6800      	ldr	r0, [r0, #0]
    return 0;
  else
    return 1;
}
 800ebde:	3800      	subs	r0, #0
 800ebe0:	bf18      	it	ne
 800ebe2:	2001      	movne	r0, #1
 800ebe4:	4770      	bx	lr

0800ebe6 <sys_mbox_set_invalid>:
/*-----------------------------------------------------------------------------------*/
void sys_mbox_set_invalid(sys_mbox_t *mbox)
{
  *mbox = SYS_MBOX_NULL;
 800ebe6:	2300      	movs	r3, #0
 800ebe8:	6003      	str	r3, [r0, #0]
}
 800ebea:	4770      	bx	lr

0800ebec <sys_sem_new>:

/*-----------------------------------------------------------------------------------*/
//  Creates a new semaphore. The "count" argument specifies
//  the initial state of the semaphore.
err_t sys_sem_new(sys_sem_t *sem, u8_t count)
{
 800ebec:	b538      	push	{r3, r4, r5, lr}
 800ebee:	4604      	mov	r4, r0
 800ebf0:	460d      	mov	r5, r1
#if (osCMSIS < 0x20000U)
  osSemaphoreDef(SEM);
  *sem = osSemaphoreCreate (osSemaphore(SEM), 1);
#else
  *sem = osSemaphoreNew(UINT16_MAX, count, NULL);
 800ebf2:	2200      	movs	r2, #0
 800ebf4:	f64f 70ff 	movw	r0, #65535	; 0xffff
 800ebf8:	f7f4 ff66 	bl	8003ac8 <osSemaphoreNew>
 800ebfc:	6020      	str	r0, [r4, #0]
#endif

  if(*sem == NULL)
 800ebfe:	b138      	cbz	r0, 800ec10 <sys_sem_new+0x24>
    ++lwip_stats.sys.sem.err;
#endif /* SYS_STATS */
    return ERR_MEM;
  }

  if(count == 0)	// Means it can't be taken
 800ec00:	b10d      	cbz	r5, 800ec06 <sys_sem_new+0x1a>
  if (lwip_stats.sys.sem.max < lwip_stats.sys.sem.used) {
    lwip_stats.sys.sem.max = lwip_stats.sys.sem.used;
  }
#endif /* SYS_STATS */

  return ERR_OK;
 800ec02:	2000      	movs	r0, #0
}
 800ec04:	bd38      	pop	{r3, r4, r5, pc}
    osSemaphoreAcquire(*sem, 0);
 800ec06:	2100      	movs	r1, #0
 800ec08:	f7f4 ffbc 	bl	8003b84 <osSemaphoreAcquire>
  return ERR_OK;
 800ec0c:	2000      	movs	r0, #0
 800ec0e:	e7f9      	b.n	800ec04 <sys_sem_new+0x18>
    return ERR_MEM;
 800ec10:	f04f 30ff 	mov.w	r0, #4294967295
 800ec14:	e7f6      	b.n	800ec04 <sys_sem_new+0x18>

0800ec16 <sys_arch_sem_wait>:

  Notice that lwIP implements a function with a similar name,
  sys_sem_wait(), that uses the sys_arch_sem_wait() function.
*/
u32_t sys_arch_sem_wait(sys_sem_t *sem, u32_t timeout)
{
 800ec16:	b570      	push	{r4, r5, r6, lr}
 800ec18:	4604      	mov	r4, r0
 800ec1a:	460e      	mov	r6, r1
#if (osCMSIS < 0x20000U)
  uint32_t starttime = osKernelSysTick();
#else
  uint32_t starttime = osKernelGetTickCount();
 800ec1c:	f7f4 fe60 	bl	80038e0 <osKernelGetTickCount>
 800ec20:	4605      	mov	r5, r0
#endif
  if(timeout != 0)
 800ec22:	b95e      	cbnz	r6, 800ec3c <sys_arch_sem_wait+0x26>
  {
#if (osCMSIS < 0x20000U)
    while(osSemaphoreWait (*sem, osWaitForever) != osOK);
    return (osKernelSysTick() - starttime);
#else
    while(osSemaphoreAcquire(*sem, osWaitForever) != osOK);
 800ec24:	f04f 36ff 	mov.w	r6, #4294967295
 800ec28:	4631      	mov	r1, r6
 800ec2a:	6820      	ldr	r0, [r4, #0]
 800ec2c:	f7f4 ffaa 	bl	8003b84 <osSemaphoreAcquire>
 800ec30:	2800      	cmp	r0, #0
 800ec32:	d1f9      	bne.n	800ec28 <sys_arch_sem_wait+0x12>
    return (osKernelGetTickCount() - starttime);
 800ec34:	f7f4 fe54 	bl	80038e0 <osKernelGetTickCount>
 800ec38:	1b40      	subs	r0, r0, r5
#endif
  }
}
 800ec3a:	bd70      	pop	{r4, r5, r6, pc}
    if(osSemaphoreAcquire(*sem, timeout) == osOK)
 800ec3c:	4631      	mov	r1, r6
 800ec3e:	6820      	ldr	r0, [r4, #0]
 800ec40:	f7f4 ffa0 	bl	8003b84 <osSemaphoreAcquire>
 800ec44:	b110      	cbz	r0, 800ec4c <sys_arch_sem_wait+0x36>
      return SYS_ARCH_TIMEOUT;
 800ec46:	f04f 30ff 	mov.w	r0, #4294967295
 800ec4a:	e7f6      	b.n	800ec3a <sys_arch_sem_wait+0x24>
        return (osKernelGetTickCount() - starttime);
 800ec4c:	f7f4 fe48 	bl	80038e0 <osKernelGetTickCount>
 800ec50:	1b40      	subs	r0, r0, r5
 800ec52:	e7f2      	b.n	800ec3a <sys_arch_sem_wait+0x24>

0800ec54 <sys_sem_signal>:

/*-----------------------------------------------------------------------------------*/
// Signals a semaphore
void sys_sem_signal(sys_sem_t *sem)
{
 800ec54:	b508      	push	{r3, lr}
  osSemaphoreRelease(*sem);
 800ec56:	6800      	ldr	r0, [r0, #0]
 800ec58:	f7f4 ffc8 	bl	8003bec <osSemaphoreRelease>
}
 800ec5c:	bd08      	pop	{r3, pc}

0800ec5e <sys_sem_free>:

/*-----------------------------------------------------------------------------------*/
// Deallocates a semaphore
void sys_sem_free(sys_sem_t *sem)
{
 800ec5e:	b508      	push	{r3, lr}
#if SYS_STATS
  --lwip_stats.sys.sem.used;
#endif /* SYS_STATS */

  osSemaphoreDelete(*sem);
 800ec60:	6800      	ldr	r0, [r0, #0]
 800ec62:	f7f4 fff1 	bl	8003c48 <osSemaphoreDelete>
}
 800ec66:	bd08      	pop	{r3, pc}

0800ec68 <sys_sem_valid>:
/*-----------------------------------------------------------------------------------*/
int sys_sem_valid(sys_sem_t *sem)
{
  if (*sem == SYS_SEM_NULL)
 800ec68:	6800      	ldr	r0, [r0, #0]
    return 0;
  else
    return 1;
}
 800ec6a:	3800      	subs	r0, #0
 800ec6c:	bf18      	it	ne
 800ec6e:	2001      	movne	r0, #1
 800ec70:	4770      	bx	lr

0800ec72 <sys_sem_set_invalid>:

/*-----------------------------------------------------------------------------------*/
void sys_sem_set_invalid(sys_sem_t *sem)
{
  *sem = SYS_SEM_NULL;
 800ec72:	2300      	movs	r3, #0
 800ec74:	6003      	str	r3, [r0, #0]
}
 800ec76:	4770      	bx	lr

0800ec78 <sys_init>:
#else
osMutexId_t lwip_sys_mutex;
#endif
// Initialize sys arch
void sys_init(void)
{
 800ec78:	b508      	push	{r3, lr}
#if (osCMSIS < 0x20000U)
  lwip_sys_mutex = osMutexCreate(osMutex(lwip_sys_mutex));
#else
  lwip_sys_mutex = osMutexNew(NULL);
 800ec7a:	2000      	movs	r0, #0
 800ec7c:	f7f4 fe94 	bl	80039a8 <osMutexNew>
 800ec80:	4b01      	ldr	r3, [pc, #4]	; (800ec88 <sys_init+0x10>)
 800ec82:	6018      	str	r0, [r3, #0]
#endif
}
 800ec84:	bd08      	pop	{r3, pc}
 800ec86:	bf00      	nop
 800ec88:	20010a6c 	.word	0x20010a6c

0800ec8c <sys_mutex_new>:
                                      /* Mutexes*/
/*-----------------------------------------------------------------------------------*/
/*-----------------------------------------------------------------------------------*/
#if LWIP_COMPAT_MUTEX == 0
/* Create a new mutex*/
err_t sys_mutex_new(sys_mutex_t *mutex) {
 800ec8c:	b510      	push	{r4, lr}
 800ec8e:	4604      	mov	r4, r0

#if (osCMSIS < 0x20000U)
  osMutexDef(MUTEX);
  *mutex = osMutexCreate(osMutex(MUTEX));
#else
  *mutex = osMutexNew(NULL);
 800ec90:	2000      	movs	r0, #0
 800ec92:	f7f4 fe89 	bl	80039a8 <osMutexNew>
 800ec96:	6020      	str	r0, [r4, #0]
#endif

  if(*mutex == NULL)
 800ec98:	fab0 f080 	clz	r0, r0
 800ec9c:	0940      	lsrs	r0, r0, #5
  if (lwip_stats.sys.mutex.max < lwip_stats.sys.mutex.used) {
    lwip_stats.sys.mutex.max = lwip_stats.sys.mutex.used;
  }
#endif /* SYS_STATS */
  return ERR_OK;
}
 800ec9e:	4240      	negs	r0, r0
 800eca0:	bd10      	pop	{r4, pc}

0800eca2 <sys_mutex_lock>:
  osMutexDelete(*mutex);
}
/*-----------------------------------------------------------------------------------*/
/* Lock a mutex*/
void sys_mutex_lock(sys_mutex_t *mutex)
{
 800eca2:	b508      	push	{r3, lr}
#if (osCMSIS < 0x20000U)
  osMutexWait(*mutex, osWaitForever);
#else
  osMutexAcquire(*mutex, osWaitForever);
 800eca4:	f04f 31ff 	mov.w	r1, #4294967295
 800eca8:	6800      	ldr	r0, [r0, #0]
 800ecaa:	f7f4 febd 	bl	8003a28 <osMutexAcquire>
#endif
}
 800ecae:	bd08      	pop	{r3, pc}

0800ecb0 <sys_mutex_unlock>:

/*-----------------------------------------------------------------------------------*/
/* Unlock a mutex*/
void sys_mutex_unlock(sys_mutex_t *mutex)
{
 800ecb0:	b508      	push	{r3, lr}
  osMutexRelease(*mutex);
 800ecb2:	6800      	ldr	r0, [r0, #0]
 800ecb4:	f7f4 fee4 	bl	8003a80 <osMutexRelease>
}
 800ecb8:	bd08      	pop	{r3, pc}

0800ecba <sys_thread_new>:
  function "thread()". The "arg" argument will be passed as an argument to the
  thread() function. The id of the new thread is returned. Both the id and
  the priority are system dependent.
*/
sys_thread_t sys_thread_new(const char *name, lwip_thread_fn thread , void *arg, int stacksize, int prio)
{
 800ecba:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ecbc:	b08b      	sub	sp, #44	; 0x2c
 800ecbe:	4607      	mov	r7, r0
 800ecc0:	460c      	mov	r4, r1
 800ecc2:	4615      	mov	r5, r2
 800ecc4:	461e      	mov	r6, r3
#if (osCMSIS < 0x20000U)
  const osThreadDef_t os_thread_def = { (char *)name, (os_pthread)thread, (osPriority)prio, 0, stacksize};
  return osThreadCreate(&os_thread_def, arg);
#else
  const osThreadAttr_t attributes = {
 800ecc6:	2220      	movs	r2, #32
 800ecc8:	2100      	movs	r1, #0
 800ecca:	a802      	add	r0, sp, #8
 800eccc:	f000 f975 	bl	800efba <memset>
 800ecd0:	9701      	str	r7, [sp, #4]
 800ecd2:	9606      	str	r6, [sp, #24]
 800ecd4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800ecd6:	9307      	str	r3, [sp, #28]
                        .name = name,
                        .stack_size = stacksize,
                        .priority = (osPriority_t)prio,
                      };
  return osThreadNew(thread, arg, &attributes);
 800ecd8:	aa01      	add	r2, sp, #4
 800ecda:	4629      	mov	r1, r5
 800ecdc:	4620      	mov	r0, r4
 800ecde:	f7f4 fe09 	bl	80038f4 <osThreadNew>
#endif
}
 800ece2:	b00b      	add	sp, #44	; 0x2c
 800ece4:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

0800ece8 <sys_arch_protect>:

  Note: This function is based on FreeRTOS API, because no equivalent CMSIS-RTOS
        API is available
*/
sys_prot_t sys_arch_protect(void)
{
 800ece8:	b508      	push	{r3, lr}
#if (osCMSIS < 0x20000U)
  osMutexWait(lwip_sys_mutex, osWaitForever);
#else
  osMutexAcquire(lwip_sys_mutex, osWaitForever);
 800ecea:	f04f 31ff 	mov.w	r1, #4294967295
 800ecee:	4b03      	ldr	r3, [pc, #12]	; (800ecfc <sys_arch_protect+0x14>)
 800ecf0:	6818      	ldr	r0, [r3, #0]
 800ecf2:	f7f4 fe99 	bl	8003a28 <osMutexAcquire>
#endif
  return (sys_prot_t)1;
}
 800ecf6:	2001      	movs	r0, #1
 800ecf8:	bd08      	pop	{r3, pc}
 800ecfa:	bf00      	nop
 800ecfc:	20010a6c 	.word	0x20010a6c

0800ed00 <sys_arch_unprotect>:

  Note: This function is based on FreeRTOS API, because no equivalent CMSIS-RTOS
        API is available
*/
void sys_arch_unprotect(sys_prot_t pval)
{
 800ed00:	b508      	push	{r3, lr}
  ( void ) pval;
  osMutexRelease(lwip_sys_mutex);
 800ed02:	4b02      	ldr	r3, [pc, #8]	; (800ed0c <sys_arch_unprotect+0xc>)
 800ed04:	6818      	ldr	r0, [r3, #0]
 800ed06:	f7f4 febb 	bl	8003a80 <osMutexRelease>
}
 800ed0a:	bd08      	pop	{r3, pc}
 800ed0c:	20010a6c 	.word	0x20010a6c

0800ed10 <std>:
 800ed10:	2300      	movs	r3, #0
 800ed12:	b510      	push	{r4, lr}
 800ed14:	4604      	mov	r4, r0
 800ed16:	e9c0 3300 	strd	r3, r3, [r0]
 800ed1a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800ed1e:	6083      	str	r3, [r0, #8]
 800ed20:	8181      	strh	r1, [r0, #12]
 800ed22:	6643      	str	r3, [r0, #100]	; 0x64
 800ed24:	81c2      	strh	r2, [r0, #14]
 800ed26:	6183      	str	r3, [r0, #24]
 800ed28:	4619      	mov	r1, r3
 800ed2a:	2208      	movs	r2, #8
 800ed2c:	305c      	adds	r0, #92	; 0x5c
 800ed2e:	f000 f944 	bl	800efba <memset>
 800ed32:	4b05      	ldr	r3, [pc, #20]	; (800ed48 <std+0x38>)
 800ed34:	6263      	str	r3, [r4, #36]	; 0x24
 800ed36:	4b05      	ldr	r3, [pc, #20]	; (800ed4c <std+0x3c>)
 800ed38:	62a3      	str	r3, [r4, #40]	; 0x28
 800ed3a:	4b05      	ldr	r3, [pc, #20]	; (800ed50 <std+0x40>)
 800ed3c:	62e3      	str	r3, [r4, #44]	; 0x2c
 800ed3e:	4b05      	ldr	r3, [pc, #20]	; (800ed54 <std+0x44>)
 800ed40:	6224      	str	r4, [r4, #32]
 800ed42:	6323      	str	r3, [r4, #48]	; 0x30
 800ed44:	bd10      	pop	{r4, pc}
 800ed46:	bf00      	nop
 800ed48:	0800f2d5 	.word	0x0800f2d5
 800ed4c:	0800f2f7 	.word	0x0800f2f7
 800ed50:	0800f32f 	.word	0x0800f32f
 800ed54:	0800f353 	.word	0x0800f353

0800ed58 <_cleanup_r>:
 800ed58:	4901      	ldr	r1, [pc, #4]	; (800ed60 <_cleanup_r+0x8>)
 800ed5a:	f000 b8af 	b.w	800eebc <_fwalk_reent>
 800ed5e:	bf00      	nop
 800ed60:	0800f50d 	.word	0x0800f50d

0800ed64 <__sfmoreglue>:
 800ed64:	b570      	push	{r4, r5, r6, lr}
 800ed66:	2268      	movs	r2, #104	; 0x68
 800ed68:	1e4d      	subs	r5, r1, #1
 800ed6a:	4355      	muls	r5, r2
 800ed6c:	460e      	mov	r6, r1
 800ed6e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800ed72:	f000 f94b 	bl	800f00c <_malloc_r>
 800ed76:	4604      	mov	r4, r0
 800ed78:	b140      	cbz	r0, 800ed8c <__sfmoreglue+0x28>
 800ed7a:	2100      	movs	r1, #0
 800ed7c:	e9c0 1600 	strd	r1, r6, [r0]
 800ed80:	300c      	adds	r0, #12
 800ed82:	60a0      	str	r0, [r4, #8]
 800ed84:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800ed88:	f000 f917 	bl	800efba <memset>
 800ed8c:	4620      	mov	r0, r4
 800ed8e:	bd70      	pop	{r4, r5, r6, pc}

0800ed90 <__sfp_lock_acquire>:
 800ed90:	4801      	ldr	r0, [pc, #4]	; (800ed98 <__sfp_lock_acquire+0x8>)
 800ed92:	f000 b8d8 	b.w	800ef46 <__retarget_lock_acquire_recursive>
 800ed96:	bf00      	nop
 800ed98:	20010a71 	.word	0x20010a71

0800ed9c <__sfp_lock_release>:
 800ed9c:	4801      	ldr	r0, [pc, #4]	; (800eda4 <__sfp_lock_release+0x8>)
 800ed9e:	f000 b8d3 	b.w	800ef48 <__retarget_lock_release_recursive>
 800eda2:	bf00      	nop
 800eda4:	20010a71 	.word	0x20010a71

0800eda8 <__sinit_lock_acquire>:
 800eda8:	4801      	ldr	r0, [pc, #4]	; (800edb0 <__sinit_lock_acquire+0x8>)
 800edaa:	f000 b8cc 	b.w	800ef46 <__retarget_lock_acquire_recursive>
 800edae:	bf00      	nop
 800edb0:	20010a72 	.word	0x20010a72

0800edb4 <__sinit_lock_release>:
 800edb4:	4801      	ldr	r0, [pc, #4]	; (800edbc <__sinit_lock_release+0x8>)
 800edb6:	f000 b8c7 	b.w	800ef48 <__retarget_lock_release_recursive>
 800edba:	bf00      	nop
 800edbc:	20010a72 	.word	0x20010a72

0800edc0 <__sinit>:
 800edc0:	b510      	push	{r4, lr}
 800edc2:	4604      	mov	r4, r0
 800edc4:	f7ff fff0 	bl	800eda8 <__sinit_lock_acquire>
 800edc8:	69a3      	ldr	r3, [r4, #24]
 800edca:	b11b      	cbz	r3, 800edd4 <__sinit+0x14>
 800edcc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800edd0:	f7ff bff0 	b.w	800edb4 <__sinit_lock_release>
 800edd4:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800edd8:	6523      	str	r3, [r4, #80]	; 0x50
 800edda:	4b13      	ldr	r3, [pc, #76]	; (800ee28 <__sinit+0x68>)
 800eddc:	4a13      	ldr	r2, [pc, #76]	; (800ee2c <__sinit+0x6c>)
 800edde:	681b      	ldr	r3, [r3, #0]
 800ede0:	62a2      	str	r2, [r4, #40]	; 0x28
 800ede2:	42a3      	cmp	r3, r4
 800ede4:	bf04      	itt	eq
 800ede6:	2301      	moveq	r3, #1
 800ede8:	61a3      	streq	r3, [r4, #24]
 800edea:	4620      	mov	r0, r4
 800edec:	f000 f820 	bl	800ee30 <__sfp>
 800edf0:	6060      	str	r0, [r4, #4]
 800edf2:	4620      	mov	r0, r4
 800edf4:	f000 f81c 	bl	800ee30 <__sfp>
 800edf8:	60a0      	str	r0, [r4, #8]
 800edfa:	4620      	mov	r0, r4
 800edfc:	f000 f818 	bl	800ee30 <__sfp>
 800ee00:	2200      	movs	r2, #0
 800ee02:	60e0      	str	r0, [r4, #12]
 800ee04:	2104      	movs	r1, #4
 800ee06:	6860      	ldr	r0, [r4, #4]
 800ee08:	f7ff ff82 	bl	800ed10 <std>
 800ee0c:	68a0      	ldr	r0, [r4, #8]
 800ee0e:	2201      	movs	r2, #1
 800ee10:	2109      	movs	r1, #9
 800ee12:	f7ff ff7d 	bl	800ed10 <std>
 800ee16:	68e0      	ldr	r0, [r4, #12]
 800ee18:	2202      	movs	r2, #2
 800ee1a:	2112      	movs	r1, #18
 800ee1c:	f7ff ff78 	bl	800ed10 <std>
 800ee20:	2301      	movs	r3, #1
 800ee22:	61a3      	str	r3, [r4, #24]
 800ee24:	e7d2      	b.n	800edcc <__sinit+0xc>
 800ee26:	bf00      	nop
 800ee28:	08012c60 	.word	0x08012c60
 800ee2c:	0800ed59 	.word	0x0800ed59

0800ee30 <__sfp>:
 800ee30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ee32:	4607      	mov	r7, r0
 800ee34:	f7ff ffac 	bl	800ed90 <__sfp_lock_acquire>
 800ee38:	4b1e      	ldr	r3, [pc, #120]	; (800eeb4 <__sfp+0x84>)
 800ee3a:	681e      	ldr	r6, [r3, #0]
 800ee3c:	69b3      	ldr	r3, [r6, #24]
 800ee3e:	b913      	cbnz	r3, 800ee46 <__sfp+0x16>
 800ee40:	4630      	mov	r0, r6
 800ee42:	f7ff ffbd 	bl	800edc0 <__sinit>
 800ee46:	3648      	adds	r6, #72	; 0x48
 800ee48:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800ee4c:	3b01      	subs	r3, #1
 800ee4e:	d503      	bpl.n	800ee58 <__sfp+0x28>
 800ee50:	6833      	ldr	r3, [r6, #0]
 800ee52:	b30b      	cbz	r3, 800ee98 <__sfp+0x68>
 800ee54:	6836      	ldr	r6, [r6, #0]
 800ee56:	e7f7      	b.n	800ee48 <__sfp+0x18>
 800ee58:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800ee5c:	b9d5      	cbnz	r5, 800ee94 <__sfp+0x64>
 800ee5e:	4b16      	ldr	r3, [pc, #88]	; (800eeb8 <__sfp+0x88>)
 800ee60:	60e3      	str	r3, [r4, #12]
 800ee62:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800ee66:	6665      	str	r5, [r4, #100]	; 0x64
 800ee68:	f000 f86c 	bl	800ef44 <__retarget_lock_init_recursive>
 800ee6c:	f7ff ff96 	bl	800ed9c <__sfp_lock_release>
 800ee70:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800ee74:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800ee78:	6025      	str	r5, [r4, #0]
 800ee7a:	61a5      	str	r5, [r4, #24]
 800ee7c:	2208      	movs	r2, #8
 800ee7e:	4629      	mov	r1, r5
 800ee80:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800ee84:	f000 f899 	bl	800efba <memset>
 800ee88:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800ee8c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800ee90:	4620      	mov	r0, r4
 800ee92:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ee94:	3468      	adds	r4, #104	; 0x68
 800ee96:	e7d9      	b.n	800ee4c <__sfp+0x1c>
 800ee98:	2104      	movs	r1, #4
 800ee9a:	4638      	mov	r0, r7
 800ee9c:	f7ff ff62 	bl	800ed64 <__sfmoreglue>
 800eea0:	4604      	mov	r4, r0
 800eea2:	6030      	str	r0, [r6, #0]
 800eea4:	2800      	cmp	r0, #0
 800eea6:	d1d5      	bne.n	800ee54 <__sfp+0x24>
 800eea8:	f7ff ff78 	bl	800ed9c <__sfp_lock_release>
 800eeac:	230c      	movs	r3, #12
 800eeae:	603b      	str	r3, [r7, #0]
 800eeb0:	e7ee      	b.n	800ee90 <__sfp+0x60>
 800eeb2:	bf00      	nop
 800eeb4:	08012c60 	.word	0x08012c60
 800eeb8:	ffff0001 	.word	0xffff0001

0800eebc <_fwalk_reent>:
 800eebc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800eec0:	4606      	mov	r6, r0
 800eec2:	4688      	mov	r8, r1
 800eec4:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800eec8:	2700      	movs	r7, #0
 800eeca:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800eece:	f1b9 0901 	subs.w	r9, r9, #1
 800eed2:	d505      	bpl.n	800eee0 <_fwalk_reent+0x24>
 800eed4:	6824      	ldr	r4, [r4, #0]
 800eed6:	2c00      	cmp	r4, #0
 800eed8:	d1f7      	bne.n	800eeca <_fwalk_reent+0xe>
 800eeda:	4638      	mov	r0, r7
 800eedc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800eee0:	89ab      	ldrh	r3, [r5, #12]
 800eee2:	2b01      	cmp	r3, #1
 800eee4:	d907      	bls.n	800eef6 <_fwalk_reent+0x3a>
 800eee6:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800eeea:	3301      	adds	r3, #1
 800eeec:	d003      	beq.n	800eef6 <_fwalk_reent+0x3a>
 800eeee:	4629      	mov	r1, r5
 800eef0:	4630      	mov	r0, r6
 800eef2:	47c0      	blx	r8
 800eef4:	4307      	orrs	r7, r0
 800eef6:	3568      	adds	r5, #104	; 0x68
 800eef8:	e7e9      	b.n	800eece <_fwalk_reent+0x12>
	...

0800eefc <__libc_init_array>:
 800eefc:	b570      	push	{r4, r5, r6, lr}
 800eefe:	4d0d      	ldr	r5, [pc, #52]	; (800ef34 <__libc_init_array+0x38>)
 800ef00:	4c0d      	ldr	r4, [pc, #52]	; (800ef38 <__libc_init_array+0x3c>)
 800ef02:	1b64      	subs	r4, r4, r5
 800ef04:	10a4      	asrs	r4, r4, #2
 800ef06:	2600      	movs	r6, #0
 800ef08:	42a6      	cmp	r6, r4
 800ef0a:	d109      	bne.n	800ef20 <__libc_init_array+0x24>
 800ef0c:	4d0b      	ldr	r5, [pc, #44]	; (800ef3c <__libc_init_array+0x40>)
 800ef0e:	4c0c      	ldr	r4, [pc, #48]	; (800ef40 <__libc_init_array+0x44>)
 800ef10:	f001 f9e2 	bl	80102d8 <_init>
 800ef14:	1b64      	subs	r4, r4, r5
 800ef16:	10a4      	asrs	r4, r4, #2
 800ef18:	2600      	movs	r6, #0
 800ef1a:	42a6      	cmp	r6, r4
 800ef1c:	d105      	bne.n	800ef2a <__libc_init_array+0x2e>
 800ef1e:	bd70      	pop	{r4, r5, r6, pc}
 800ef20:	f855 3b04 	ldr.w	r3, [r5], #4
 800ef24:	4798      	blx	r3
 800ef26:	3601      	adds	r6, #1
 800ef28:	e7ee      	b.n	800ef08 <__libc_init_array+0xc>
 800ef2a:	f855 3b04 	ldr.w	r3, [r5], #4
 800ef2e:	4798      	blx	r3
 800ef30:	3601      	adds	r6, #1
 800ef32:	e7f2      	b.n	800ef1a <__libc_init_array+0x1e>
 800ef34:	08012d50 	.word	0x08012d50
 800ef38:	08012d50 	.word	0x08012d50
 800ef3c:	08012d50 	.word	0x08012d50
 800ef40:	08012d54 	.word	0x08012d54

0800ef44 <__retarget_lock_init_recursive>:
 800ef44:	4770      	bx	lr

0800ef46 <__retarget_lock_acquire_recursive>:
 800ef46:	4770      	bx	lr

0800ef48 <__retarget_lock_release_recursive>:
 800ef48:	4770      	bx	lr

0800ef4a <memcmp>:
 800ef4a:	b510      	push	{r4, lr}
 800ef4c:	3901      	subs	r1, #1
 800ef4e:	4402      	add	r2, r0
 800ef50:	4290      	cmp	r0, r2
 800ef52:	d101      	bne.n	800ef58 <memcmp+0xe>
 800ef54:	2000      	movs	r0, #0
 800ef56:	e005      	b.n	800ef64 <memcmp+0x1a>
 800ef58:	7803      	ldrb	r3, [r0, #0]
 800ef5a:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 800ef5e:	42a3      	cmp	r3, r4
 800ef60:	d001      	beq.n	800ef66 <memcmp+0x1c>
 800ef62:	1b18      	subs	r0, r3, r4
 800ef64:	bd10      	pop	{r4, pc}
 800ef66:	3001      	adds	r0, #1
 800ef68:	e7f2      	b.n	800ef50 <memcmp+0x6>

0800ef6a <memcpy>:
 800ef6a:	440a      	add	r2, r1
 800ef6c:	4291      	cmp	r1, r2
 800ef6e:	f100 33ff 	add.w	r3, r0, #4294967295
 800ef72:	d100      	bne.n	800ef76 <memcpy+0xc>
 800ef74:	4770      	bx	lr
 800ef76:	b510      	push	{r4, lr}
 800ef78:	f811 4b01 	ldrb.w	r4, [r1], #1
 800ef7c:	f803 4f01 	strb.w	r4, [r3, #1]!
 800ef80:	4291      	cmp	r1, r2
 800ef82:	d1f9      	bne.n	800ef78 <memcpy+0xe>
 800ef84:	bd10      	pop	{r4, pc}

0800ef86 <memmove>:
 800ef86:	4288      	cmp	r0, r1
 800ef88:	b510      	push	{r4, lr}
 800ef8a:	eb01 0402 	add.w	r4, r1, r2
 800ef8e:	d902      	bls.n	800ef96 <memmove+0x10>
 800ef90:	4284      	cmp	r4, r0
 800ef92:	4623      	mov	r3, r4
 800ef94:	d807      	bhi.n	800efa6 <memmove+0x20>
 800ef96:	1e43      	subs	r3, r0, #1
 800ef98:	42a1      	cmp	r1, r4
 800ef9a:	d008      	beq.n	800efae <memmove+0x28>
 800ef9c:	f811 2b01 	ldrb.w	r2, [r1], #1
 800efa0:	f803 2f01 	strb.w	r2, [r3, #1]!
 800efa4:	e7f8      	b.n	800ef98 <memmove+0x12>
 800efa6:	4402      	add	r2, r0
 800efa8:	4601      	mov	r1, r0
 800efaa:	428a      	cmp	r2, r1
 800efac:	d100      	bne.n	800efb0 <memmove+0x2a>
 800efae:	bd10      	pop	{r4, pc}
 800efb0:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800efb4:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800efb8:	e7f7      	b.n	800efaa <memmove+0x24>

0800efba <memset>:
 800efba:	4402      	add	r2, r0
 800efbc:	4603      	mov	r3, r0
 800efbe:	4293      	cmp	r3, r2
 800efc0:	d100      	bne.n	800efc4 <memset+0xa>
 800efc2:	4770      	bx	lr
 800efc4:	f803 1b01 	strb.w	r1, [r3], #1
 800efc8:	e7f9      	b.n	800efbe <memset+0x4>
	...

0800efcc <sbrk_aligned>:
 800efcc:	b570      	push	{r4, r5, r6, lr}
 800efce:	4e0e      	ldr	r6, [pc, #56]	; (800f008 <sbrk_aligned+0x3c>)
 800efd0:	460c      	mov	r4, r1
 800efd2:	6831      	ldr	r1, [r6, #0]
 800efd4:	4605      	mov	r5, r0
 800efd6:	b911      	cbnz	r1, 800efde <sbrk_aligned+0x12>
 800efd8:	f000 f94c 	bl	800f274 <_sbrk_r>
 800efdc:	6030      	str	r0, [r6, #0]
 800efde:	4621      	mov	r1, r4
 800efe0:	4628      	mov	r0, r5
 800efe2:	f000 f947 	bl	800f274 <_sbrk_r>
 800efe6:	1c43      	adds	r3, r0, #1
 800efe8:	d00a      	beq.n	800f000 <sbrk_aligned+0x34>
 800efea:	1cc4      	adds	r4, r0, #3
 800efec:	f024 0403 	bic.w	r4, r4, #3
 800eff0:	42a0      	cmp	r0, r4
 800eff2:	d007      	beq.n	800f004 <sbrk_aligned+0x38>
 800eff4:	1a21      	subs	r1, r4, r0
 800eff6:	4628      	mov	r0, r5
 800eff8:	f000 f93c 	bl	800f274 <_sbrk_r>
 800effc:	3001      	adds	r0, #1
 800effe:	d101      	bne.n	800f004 <sbrk_aligned+0x38>
 800f000:	f04f 34ff 	mov.w	r4, #4294967295
 800f004:	4620      	mov	r0, r4
 800f006:	bd70      	pop	{r4, r5, r6, pc}
 800f008:	20010a78 	.word	0x20010a78

0800f00c <_malloc_r>:
 800f00c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f010:	1ccd      	adds	r5, r1, #3
 800f012:	f025 0503 	bic.w	r5, r5, #3
 800f016:	3508      	adds	r5, #8
 800f018:	2d0c      	cmp	r5, #12
 800f01a:	bf38      	it	cc
 800f01c:	250c      	movcc	r5, #12
 800f01e:	2d00      	cmp	r5, #0
 800f020:	4607      	mov	r7, r0
 800f022:	db01      	blt.n	800f028 <_malloc_r+0x1c>
 800f024:	42a9      	cmp	r1, r5
 800f026:	d905      	bls.n	800f034 <_malloc_r+0x28>
 800f028:	230c      	movs	r3, #12
 800f02a:	603b      	str	r3, [r7, #0]
 800f02c:	2600      	movs	r6, #0
 800f02e:	4630      	mov	r0, r6
 800f030:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f034:	4e2e      	ldr	r6, [pc, #184]	; (800f0f0 <_malloc_r+0xe4>)
 800f036:	f000 fad1 	bl	800f5dc <__malloc_lock>
 800f03a:	6833      	ldr	r3, [r6, #0]
 800f03c:	461c      	mov	r4, r3
 800f03e:	bb34      	cbnz	r4, 800f08e <_malloc_r+0x82>
 800f040:	4629      	mov	r1, r5
 800f042:	4638      	mov	r0, r7
 800f044:	f7ff ffc2 	bl	800efcc <sbrk_aligned>
 800f048:	1c43      	adds	r3, r0, #1
 800f04a:	4604      	mov	r4, r0
 800f04c:	d14d      	bne.n	800f0ea <_malloc_r+0xde>
 800f04e:	6834      	ldr	r4, [r6, #0]
 800f050:	4626      	mov	r6, r4
 800f052:	2e00      	cmp	r6, #0
 800f054:	d140      	bne.n	800f0d8 <_malloc_r+0xcc>
 800f056:	6823      	ldr	r3, [r4, #0]
 800f058:	4631      	mov	r1, r6
 800f05a:	4638      	mov	r0, r7
 800f05c:	eb04 0803 	add.w	r8, r4, r3
 800f060:	f000 f908 	bl	800f274 <_sbrk_r>
 800f064:	4580      	cmp	r8, r0
 800f066:	d13a      	bne.n	800f0de <_malloc_r+0xd2>
 800f068:	6821      	ldr	r1, [r4, #0]
 800f06a:	3503      	adds	r5, #3
 800f06c:	1a6d      	subs	r5, r5, r1
 800f06e:	f025 0503 	bic.w	r5, r5, #3
 800f072:	3508      	adds	r5, #8
 800f074:	2d0c      	cmp	r5, #12
 800f076:	bf38      	it	cc
 800f078:	250c      	movcc	r5, #12
 800f07a:	4629      	mov	r1, r5
 800f07c:	4638      	mov	r0, r7
 800f07e:	f7ff ffa5 	bl	800efcc <sbrk_aligned>
 800f082:	3001      	adds	r0, #1
 800f084:	d02b      	beq.n	800f0de <_malloc_r+0xd2>
 800f086:	6823      	ldr	r3, [r4, #0]
 800f088:	442b      	add	r3, r5
 800f08a:	6023      	str	r3, [r4, #0]
 800f08c:	e00e      	b.n	800f0ac <_malloc_r+0xa0>
 800f08e:	6822      	ldr	r2, [r4, #0]
 800f090:	1b52      	subs	r2, r2, r5
 800f092:	d41e      	bmi.n	800f0d2 <_malloc_r+0xc6>
 800f094:	2a0b      	cmp	r2, #11
 800f096:	d916      	bls.n	800f0c6 <_malloc_r+0xba>
 800f098:	1961      	adds	r1, r4, r5
 800f09a:	42a3      	cmp	r3, r4
 800f09c:	6025      	str	r5, [r4, #0]
 800f09e:	bf18      	it	ne
 800f0a0:	6059      	strne	r1, [r3, #4]
 800f0a2:	6863      	ldr	r3, [r4, #4]
 800f0a4:	bf08      	it	eq
 800f0a6:	6031      	streq	r1, [r6, #0]
 800f0a8:	5162      	str	r2, [r4, r5]
 800f0aa:	604b      	str	r3, [r1, #4]
 800f0ac:	4638      	mov	r0, r7
 800f0ae:	f104 060b 	add.w	r6, r4, #11
 800f0b2:	f000 fa99 	bl	800f5e8 <__malloc_unlock>
 800f0b6:	f026 0607 	bic.w	r6, r6, #7
 800f0ba:	1d23      	adds	r3, r4, #4
 800f0bc:	1af2      	subs	r2, r6, r3
 800f0be:	d0b6      	beq.n	800f02e <_malloc_r+0x22>
 800f0c0:	1b9b      	subs	r3, r3, r6
 800f0c2:	50a3      	str	r3, [r4, r2]
 800f0c4:	e7b3      	b.n	800f02e <_malloc_r+0x22>
 800f0c6:	6862      	ldr	r2, [r4, #4]
 800f0c8:	42a3      	cmp	r3, r4
 800f0ca:	bf0c      	ite	eq
 800f0cc:	6032      	streq	r2, [r6, #0]
 800f0ce:	605a      	strne	r2, [r3, #4]
 800f0d0:	e7ec      	b.n	800f0ac <_malloc_r+0xa0>
 800f0d2:	4623      	mov	r3, r4
 800f0d4:	6864      	ldr	r4, [r4, #4]
 800f0d6:	e7b2      	b.n	800f03e <_malloc_r+0x32>
 800f0d8:	4634      	mov	r4, r6
 800f0da:	6876      	ldr	r6, [r6, #4]
 800f0dc:	e7b9      	b.n	800f052 <_malloc_r+0x46>
 800f0de:	230c      	movs	r3, #12
 800f0e0:	603b      	str	r3, [r7, #0]
 800f0e2:	4638      	mov	r0, r7
 800f0e4:	f000 fa80 	bl	800f5e8 <__malloc_unlock>
 800f0e8:	e7a1      	b.n	800f02e <_malloc_r+0x22>
 800f0ea:	6025      	str	r5, [r4, #0]
 800f0ec:	e7de      	b.n	800f0ac <_malloc_r+0xa0>
 800f0ee:	bf00      	nop
 800f0f0:	20010a74 	.word	0x20010a74

0800f0f4 <iprintf>:
 800f0f4:	b40f      	push	{r0, r1, r2, r3}
 800f0f6:	4b0a      	ldr	r3, [pc, #40]	; (800f120 <iprintf+0x2c>)
 800f0f8:	b513      	push	{r0, r1, r4, lr}
 800f0fa:	681c      	ldr	r4, [r3, #0]
 800f0fc:	b124      	cbz	r4, 800f108 <iprintf+0x14>
 800f0fe:	69a3      	ldr	r3, [r4, #24]
 800f100:	b913      	cbnz	r3, 800f108 <iprintf+0x14>
 800f102:	4620      	mov	r0, r4
 800f104:	f7ff fe5c 	bl	800edc0 <__sinit>
 800f108:	ab05      	add	r3, sp, #20
 800f10a:	9a04      	ldr	r2, [sp, #16]
 800f10c:	68a1      	ldr	r1, [r4, #8]
 800f10e:	9301      	str	r3, [sp, #4]
 800f110:	4620      	mov	r0, r4
 800f112:	f000 fc41 	bl	800f998 <_vfiprintf_r>
 800f116:	b002      	add	sp, #8
 800f118:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800f11c:	b004      	add	sp, #16
 800f11e:	4770      	bx	lr
 800f120:	2000002c 	.word	0x2000002c

0800f124 <rand>:
 800f124:	4b16      	ldr	r3, [pc, #88]	; (800f180 <rand+0x5c>)
 800f126:	b510      	push	{r4, lr}
 800f128:	681c      	ldr	r4, [r3, #0]
 800f12a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800f12c:	b9b3      	cbnz	r3, 800f15c <rand+0x38>
 800f12e:	2018      	movs	r0, #24
 800f130:	f000 fa4c 	bl	800f5cc <malloc>
 800f134:	63a0      	str	r0, [r4, #56]	; 0x38
 800f136:	b928      	cbnz	r0, 800f144 <rand+0x20>
 800f138:	4602      	mov	r2, r0
 800f13a:	4b12      	ldr	r3, [pc, #72]	; (800f184 <rand+0x60>)
 800f13c:	4812      	ldr	r0, [pc, #72]	; (800f188 <rand+0x64>)
 800f13e:	214e      	movs	r1, #78	; 0x4e
 800f140:	f000 f930 	bl	800f3a4 <__assert_func>
 800f144:	4a11      	ldr	r2, [pc, #68]	; (800f18c <rand+0x68>)
 800f146:	4b12      	ldr	r3, [pc, #72]	; (800f190 <rand+0x6c>)
 800f148:	e9c0 2300 	strd	r2, r3, [r0]
 800f14c:	4b11      	ldr	r3, [pc, #68]	; (800f194 <rand+0x70>)
 800f14e:	6083      	str	r3, [r0, #8]
 800f150:	230b      	movs	r3, #11
 800f152:	8183      	strh	r3, [r0, #12]
 800f154:	2201      	movs	r2, #1
 800f156:	2300      	movs	r3, #0
 800f158:	e9c0 2304 	strd	r2, r3, [r0, #16]
 800f15c:	6ba4      	ldr	r4, [r4, #56]	; 0x38
 800f15e:	4a0e      	ldr	r2, [pc, #56]	; (800f198 <rand+0x74>)
 800f160:	6920      	ldr	r0, [r4, #16]
 800f162:	6963      	ldr	r3, [r4, #20]
 800f164:	490d      	ldr	r1, [pc, #52]	; (800f19c <rand+0x78>)
 800f166:	4342      	muls	r2, r0
 800f168:	fb01 2203 	mla	r2, r1, r3, r2
 800f16c:	fba0 0101 	umull	r0, r1, r0, r1
 800f170:	1c43      	adds	r3, r0, #1
 800f172:	eb42 0001 	adc.w	r0, r2, r1
 800f176:	e9c4 3004 	strd	r3, r0, [r4, #16]
 800f17a:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 800f17e:	bd10      	pop	{r4, pc}
 800f180:	2000002c 	.word	0x2000002c
 800f184:	08012c64 	.word	0x08012c64
 800f188:	08012c7b 	.word	0x08012c7b
 800f18c:	abcd330e 	.word	0xabcd330e
 800f190:	e66d1234 	.word	0xe66d1234
 800f194:	0005deec 	.word	0x0005deec
 800f198:	5851f42d 	.word	0x5851f42d
 800f19c:	4c957f2d 	.word	0x4c957f2d

0800f1a0 <cleanup_glue>:
 800f1a0:	b538      	push	{r3, r4, r5, lr}
 800f1a2:	460c      	mov	r4, r1
 800f1a4:	6809      	ldr	r1, [r1, #0]
 800f1a6:	4605      	mov	r5, r0
 800f1a8:	b109      	cbz	r1, 800f1ae <cleanup_glue+0xe>
 800f1aa:	f7ff fff9 	bl	800f1a0 <cleanup_glue>
 800f1ae:	4621      	mov	r1, r4
 800f1b0:	4628      	mov	r0, r5
 800f1b2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800f1b6:	f000 ba1d 	b.w	800f5f4 <_free_r>
	...

0800f1bc <_reclaim_reent>:
 800f1bc:	4b2c      	ldr	r3, [pc, #176]	; (800f270 <_reclaim_reent+0xb4>)
 800f1be:	681b      	ldr	r3, [r3, #0]
 800f1c0:	4283      	cmp	r3, r0
 800f1c2:	b570      	push	{r4, r5, r6, lr}
 800f1c4:	4604      	mov	r4, r0
 800f1c6:	d051      	beq.n	800f26c <_reclaim_reent+0xb0>
 800f1c8:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800f1ca:	b143      	cbz	r3, 800f1de <_reclaim_reent+0x22>
 800f1cc:	68db      	ldr	r3, [r3, #12]
 800f1ce:	2b00      	cmp	r3, #0
 800f1d0:	d14a      	bne.n	800f268 <_reclaim_reent+0xac>
 800f1d2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800f1d4:	6819      	ldr	r1, [r3, #0]
 800f1d6:	b111      	cbz	r1, 800f1de <_reclaim_reent+0x22>
 800f1d8:	4620      	mov	r0, r4
 800f1da:	f000 fa0b 	bl	800f5f4 <_free_r>
 800f1de:	6961      	ldr	r1, [r4, #20]
 800f1e0:	b111      	cbz	r1, 800f1e8 <_reclaim_reent+0x2c>
 800f1e2:	4620      	mov	r0, r4
 800f1e4:	f000 fa06 	bl	800f5f4 <_free_r>
 800f1e8:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800f1ea:	b111      	cbz	r1, 800f1f2 <_reclaim_reent+0x36>
 800f1ec:	4620      	mov	r0, r4
 800f1ee:	f000 fa01 	bl	800f5f4 <_free_r>
 800f1f2:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800f1f4:	b111      	cbz	r1, 800f1fc <_reclaim_reent+0x40>
 800f1f6:	4620      	mov	r0, r4
 800f1f8:	f000 f9fc 	bl	800f5f4 <_free_r>
 800f1fc:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 800f1fe:	b111      	cbz	r1, 800f206 <_reclaim_reent+0x4a>
 800f200:	4620      	mov	r0, r4
 800f202:	f000 f9f7 	bl	800f5f4 <_free_r>
 800f206:	6c21      	ldr	r1, [r4, #64]	; 0x40
 800f208:	b111      	cbz	r1, 800f210 <_reclaim_reent+0x54>
 800f20a:	4620      	mov	r0, r4
 800f20c:	f000 f9f2 	bl	800f5f4 <_free_r>
 800f210:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 800f212:	b111      	cbz	r1, 800f21a <_reclaim_reent+0x5e>
 800f214:	4620      	mov	r0, r4
 800f216:	f000 f9ed 	bl	800f5f4 <_free_r>
 800f21a:	6da1      	ldr	r1, [r4, #88]	; 0x58
 800f21c:	b111      	cbz	r1, 800f224 <_reclaim_reent+0x68>
 800f21e:	4620      	mov	r0, r4
 800f220:	f000 f9e8 	bl	800f5f4 <_free_r>
 800f224:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800f226:	b111      	cbz	r1, 800f22e <_reclaim_reent+0x72>
 800f228:	4620      	mov	r0, r4
 800f22a:	f000 f9e3 	bl	800f5f4 <_free_r>
 800f22e:	69a3      	ldr	r3, [r4, #24]
 800f230:	b1e3      	cbz	r3, 800f26c <_reclaim_reent+0xb0>
 800f232:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800f234:	4620      	mov	r0, r4
 800f236:	4798      	blx	r3
 800f238:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800f23a:	b1b9      	cbz	r1, 800f26c <_reclaim_reent+0xb0>
 800f23c:	4620      	mov	r0, r4
 800f23e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800f242:	f7ff bfad 	b.w	800f1a0 <cleanup_glue>
 800f246:	5949      	ldr	r1, [r1, r5]
 800f248:	b941      	cbnz	r1, 800f25c <_reclaim_reent+0xa0>
 800f24a:	3504      	adds	r5, #4
 800f24c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800f24e:	2d80      	cmp	r5, #128	; 0x80
 800f250:	68d9      	ldr	r1, [r3, #12]
 800f252:	d1f8      	bne.n	800f246 <_reclaim_reent+0x8a>
 800f254:	4620      	mov	r0, r4
 800f256:	f000 f9cd 	bl	800f5f4 <_free_r>
 800f25a:	e7ba      	b.n	800f1d2 <_reclaim_reent+0x16>
 800f25c:	680e      	ldr	r6, [r1, #0]
 800f25e:	4620      	mov	r0, r4
 800f260:	f000 f9c8 	bl	800f5f4 <_free_r>
 800f264:	4631      	mov	r1, r6
 800f266:	e7ef      	b.n	800f248 <_reclaim_reent+0x8c>
 800f268:	2500      	movs	r5, #0
 800f26a:	e7ef      	b.n	800f24c <_reclaim_reent+0x90>
 800f26c:	bd70      	pop	{r4, r5, r6, pc}
 800f26e:	bf00      	nop
 800f270:	2000002c 	.word	0x2000002c

0800f274 <_sbrk_r>:
 800f274:	b538      	push	{r3, r4, r5, lr}
 800f276:	4d06      	ldr	r5, [pc, #24]	; (800f290 <_sbrk_r+0x1c>)
 800f278:	2300      	movs	r3, #0
 800f27a:	4604      	mov	r4, r0
 800f27c:	4608      	mov	r0, r1
 800f27e:	602b      	str	r3, [r5, #0]
 800f280:	f7f1 fc06 	bl	8000a90 <_sbrk>
 800f284:	1c43      	adds	r3, r0, #1
 800f286:	d102      	bne.n	800f28e <_sbrk_r+0x1a>
 800f288:	682b      	ldr	r3, [r5, #0]
 800f28a:	b103      	cbz	r3, 800f28e <_sbrk_r+0x1a>
 800f28c:	6023      	str	r3, [r4, #0]
 800f28e:	bd38      	pop	{r3, r4, r5, pc}
 800f290:	20010a7c 	.word	0x20010a7c

0800f294 <siprintf>:
 800f294:	b40e      	push	{r1, r2, r3}
 800f296:	b500      	push	{lr}
 800f298:	b09c      	sub	sp, #112	; 0x70
 800f29a:	ab1d      	add	r3, sp, #116	; 0x74
 800f29c:	9002      	str	r0, [sp, #8]
 800f29e:	9006      	str	r0, [sp, #24]
 800f2a0:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800f2a4:	4809      	ldr	r0, [pc, #36]	; (800f2cc <siprintf+0x38>)
 800f2a6:	9107      	str	r1, [sp, #28]
 800f2a8:	9104      	str	r1, [sp, #16]
 800f2aa:	4909      	ldr	r1, [pc, #36]	; (800f2d0 <siprintf+0x3c>)
 800f2ac:	f853 2b04 	ldr.w	r2, [r3], #4
 800f2b0:	9105      	str	r1, [sp, #20]
 800f2b2:	6800      	ldr	r0, [r0, #0]
 800f2b4:	9301      	str	r3, [sp, #4]
 800f2b6:	a902      	add	r1, sp, #8
 800f2b8:	f000 fa44 	bl	800f744 <_svfiprintf_r>
 800f2bc:	9b02      	ldr	r3, [sp, #8]
 800f2be:	2200      	movs	r2, #0
 800f2c0:	701a      	strb	r2, [r3, #0]
 800f2c2:	b01c      	add	sp, #112	; 0x70
 800f2c4:	f85d eb04 	ldr.w	lr, [sp], #4
 800f2c8:	b003      	add	sp, #12
 800f2ca:	4770      	bx	lr
 800f2cc:	2000002c 	.word	0x2000002c
 800f2d0:	ffff0208 	.word	0xffff0208

0800f2d4 <__sread>:
 800f2d4:	b510      	push	{r4, lr}
 800f2d6:	460c      	mov	r4, r1
 800f2d8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f2dc:	f000 fe20 	bl	800ff20 <_read_r>
 800f2e0:	2800      	cmp	r0, #0
 800f2e2:	bfab      	itete	ge
 800f2e4:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800f2e6:	89a3      	ldrhlt	r3, [r4, #12]
 800f2e8:	181b      	addge	r3, r3, r0
 800f2ea:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800f2ee:	bfac      	ite	ge
 800f2f0:	6563      	strge	r3, [r4, #84]	; 0x54
 800f2f2:	81a3      	strhlt	r3, [r4, #12]
 800f2f4:	bd10      	pop	{r4, pc}

0800f2f6 <__swrite>:
 800f2f6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f2fa:	461f      	mov	r7, r3
 800f2fc:	898b      	ldrh	r3, [r1, #12]
 800f2fe:	05db      	lsls	r3, r3, #23
 800f300:	4605      	mov	r5, r0
 800f302:	460c      	mov	r4, r1
 800f304:	4616      	mov	r6, r2
 800f306:	d505      	bpl.n	800f314 <__swrite+0x1e>
 800f308:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f30c:	2302      	movs	r3, #2
 800f30e:	2200      	movs	r2, #0
 800f310:	f000 f94a 	bl	800f5a8 <_lseek_r>
 800f314:	89a3      	ldrh	r3, [r4, #12]
 800f316:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800f31a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800f31e:	81a3      	strh	r3, [r4, #12]
 800f320:	4632      	mov	r2, r6
 800f322:	463b      	mov	r3, r7
 800f324:	4628      	mov	r0, r5
 800f326:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800f32a:	f000 b829 	b.w	800f380 <_write_r>

0800f32e <__sseek>:
 800f32e:	b510      	push	{r4, lr}
 800f330:	460c      	mov	r4, r1
 800f332:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f336:	f000 f937 	bl	800f5a8 <_lseek_r>
 800f33a:	1c43      	adds	r3, r0, #1
 800f33c:	89a3      	ldrh	r3, [r4, #12]
 800f33e:	bf15      	itete	ne
 800f340:	6560      	strne	r0, [r4, #84]	; 0x54
 800f342:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800f346:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800f34a:	81a3      	strheq	r3, [r4, #12]
 800f34c:	bf18      	it	ne
 800f34e:	81a3      	strhne	r3, [r4, #12]
 800f350:	bd10      	pop	{r4, pc}

0800f352 <__sclose>:
 800f352:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f356:	f000 b843 	b.w	800f3e0 <_close_r>

0800f35a <strncpy>:
 800f35a:	b510      	push	{r4, lr}
 800f35c:	3901      	subs	r1, #1
 800f35e:	4603      	mov	r3, r0
 800f360:	b132      	cbz	r2, 800f370 <strncpy+0x16>
 800f362:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 800f366:	f803 4b01 	strb.w	r4, [r3], #1
 800f36a:	3a01      	subs	r2, #1
 800f36c:	2c00      	cmp	r4, #0
 800f36e:	d1f7      	bne.n	800f360 <strncpy+0x6>
 800f370:	441a      	add	r2, r3
 800f372:	2100      	movs	r1, #0
 800f374:	4293      	cmp	r3, r2
 800f376:	d100      	bne.n	800f37a <strncpy+0x20>
 800f378:	bd10      	pop	{r4, pc}
 800f37a:	f803 1b01 	strb.w	r1, [r3], #1
 800f37e:	e7f9      	b.n	800f374 <strncpy+0x1a>

0800f380 <_write_r>:
 800f380:	b538      	push	{r3, r4, r5, lr}
 800f382:	4d07      	ldr	r5, [pc, #28]	; (800f3a0 <_write_r+0x20>)
 800f384:	4604      	mov	r4, r0
 800f386:	4608      	mov	r0, r1
 800f388:	4611      	mov	r1, r2
 800f38a:	2200      	movs	r2, #0
 800f38c:	602a      	str	r2, [r5, #0]
 800f38e:	461a      	mov	r2, r3
 800f390:	f7f1 fb65 	bl	8000a5e <_write>
 800f394:	1c43      	adds	r3, r0, #1
 800f396:	d102      	bne.n	800f39e <_write_r+0x1e>
 800f398:	682b      	ldr	r3, [r5, #0]
 800f39a:	b103      	cbz	r3, 800f39e <_write_r+0x1e>
 800f39c:	6023      	str	r3, [r4, #0]
 800f39e:	bd38      	pop	{r3, r4, r5, pc}
 800f3a0:	20010a7c 	.word	0x20010a7c

0800f3a4 <__assert_func>:
 800f3a4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800f3a6:	4614      	mov	r4, r2
 800f3a8:	461a      	mov	r2, r3
 800f3aa:	4b09      	ldr	r3, [pc, #36]	; (800f3d0 <__assert_func+0x2c>)
 800f3ac:	681b      	ldr	r3, [r3, #0]
 800f3ae:	4605      	mov	r5, r0
 800f3b0:	68d8      	ldr	r0, [r3, #12]
 800f3b2:	b14c      	cbz	r4, 800f3c8 <__assert_func+0x24>
 800f3b4:	4b07      	ldr	r3, [pc, #28]	; (800f3d4 <__assert_func+0x30>)
 800f3b6:	9100      	str	r1, [sp, #0]
 800f3b8:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800f3bc:	4906      	ldr	r1, [pc, #24]	; (800f3d8 <__assert_func+0x34>)
 800f3be:	462b      	mov	r3, r5
 800f3c0:	f000 f8e0 	bl	800f584 <fiprintf>
 800f3c4:	f000 fe7e 	bl	80100c4 <abort>
 800f3c8:	4b04      	ldr	r3, [pc, #16]	; (800f3dc <__assert_func+0x38>)
 800f3ca:	461c      	mov	r4, r3
 800f3cc:	e7f3      	b.n	800f3b6 <__assert_func+0x12>
 800f3ce:	bf00      	nop
 800f3d0:	2000002c 	.word	0x2000002c
 800f3d4:	08012cd6 	.word	0x08012cd6
 800f3d8:	08012ce3 	.word	0x08012ce3
 800f3dc:	08012d11 	.word	0x08012d11

0800f3e0 <_close_r>:
 800f3e0:	b538      	push	{r3, r4, r5, lr}
 800f3e2:	4d06      	ldr	r5, [pc, #24]	; (800f3fc <_close_r+0x1c>)
 800f3e4:	2300      	movs	r3, #0
 800f3e6:	4604      	mov	r4, r0
 800f3e8:	4608      	mov	r0, r1
 800f3ea:	602b      	str	r3, [r5, #0]
 800f3ec:	f7f1 fb44 	bl	8000a78 <_close>
 800f3f0:	1c43      	adds	r3, r0, #1
 800f3f2:	d102      	bne.n	800f3fa <_close_r+0x1a>
 800f3f4:	682b      	ldr	r3, [r5, #0]
 800f3f6:	b103      	cbz	r3, 800f3fa <_close_r+0x1a>
 800f3f8:	6023      	str	r3, [r4, #0]
 800f3fa:	bd38      	pop	{r3, r4, r5, pc}
 800f3fc:	20010a7c 	.word	0x20010a7c

0800f400 <__sflush_r>:
 800f400:	898a      	ldrh	r2, [r1, #12]
 800f402:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f406:	4605      	mov	r5, r0
 800f408:	0710      	lsls	r0, r2, #28
 800f40a:	460c      	mov	r4, r1
 800f40c:	d458      	bmi.n	800f4c0 <__sflush_r+0xc0>
 800f40e:	684b      	ldr	r3, [r1, #4]
 800f410:	2b00      	cmp	r3, #0
 800f412:	dc05      	bgt.n	800f420 <__sflush_r+0x20>
 800f414:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800f416:	2b00      	cmp	r3, #0
 800f418:	dc02      	bgt.n	800f420 <__sflush_r+0x20>
 800f41a:	2000      	movs	r0, #0
 800f41c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f420:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800f422:	2e00      	cmp	r6, #0
 800f424:	d0f9      	beq.n	800f41a <__sflush_r+0x1a>
 800f426:	2300      	movs	r3, #0
 800f428:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800f42c:	682f      	ldr	r7, [r5, #0]
 800f42e:	602b      	str	r3, [r5, #0]
 800f430:	d032      	beq.n	800f498 <__sflush_r+0x98>
 800f432:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800f434:	89a3      	ldrh	r3, [r4, #12]
 800f436:	075a      	lsls	r2, r3, #29
 800f438:	d505      	bpl.n	800f446 <__sflush_r+0x46>
 800f43a:	6863      	ldr	r3, [r4, #4]
 800f43c:	1ac0      	subs	r0, r0, r3
 800f43e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800f440:	b10b      	cbz	r3, 800f446 <__sflush_r+0x46>
 800f442:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800f444:	1ac0      	subs	r0, r0, r3
 800f446:	2300      	movs	r3, #0
 800f448:	4602      	mov	r2, r0
 800f44a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800f44c:	6a21      	ldr	r1, [r4, #32]
 800f44e:	4628      	mov	r0, r5
 800f450:	47b0      	blx	r6
 800f452:	1c43      	adds	r3, r0, #1
 800f454:	89a3      	ldrh	r3, [r4, #12]
 800f456:	d106      	bne.n	800f466 <__sflush_r+0x66>
 800f458:	6829      	ldr	r1, [r5, #0]
 800f45a:	291d      	cmp	r1, #29
 800f45c:	d82c      	bhi.n	800f4b8 <__sflush_r+0xb8>
 800f45e:	4a2a      	ldr	r2, [pc, #168]	; (800f508 <__sflush_r+0x108>)
 800f460:	40ca      	lsrs	r2, r1
 800f462:	07d6      	lsls	r6, r2, #31
 800f464:	d528      	bpl.n	800f4b8 <__sflush_r+0xb8>
 800f466:	2200      	movs	r2, #0
 800f468:	6062      	str	r2, [r4, #4]
 800f46a:	04d9      	lsls	r1, r3, #19
 800f46c:	6922      	ldr	r2, [r4, #16]
 800f46e:	6022      	str	r2, [r4, #0]
 800f470:	d504      	bpl.n	800f47c <__sflush_r+0x7c>
 800f472:	1c42      	adds	r2, r0, #1
 800f474:	d101      	bne.n	800f47a <__sflush_r+0x7a>
 800f476:	682b      	ldr	r3, [r5, #0]
 800f478:	b903      	cbnz	r3, 800f47c <__sflush_r+0x7c>
 800f47a:	6560      	str	r0, [r4, #84]	; 0x54
 800f47c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800f47e:	602f      	str	r7, [r5, #0]
 800f480:	2900      	cmp	r1, #0
 800f482:	d0ca      	beq.n	800f41a <__sflush_r+0x1a>
 800f484:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800f488:	4299      	cmp	r1, r3
 800f48a:	d002      	beq.n	800f492 <__sflush_r+0x92>
 800f48c:	4628      	mov	r0, r5
 800f48e:	f000 f8b1 	bl	800f5f4 <_free_r>
 800f492:	2000      	movs	r0, #0
 800f494:	6360      	str	r0, [r4, #52]	; 0x34
 800f496:	e7c1      	b.n	800f41c <__sflush_r+0x1c>
 800f498:	6a21      	ldr	r1, [r4, #32]
 800f49a:	2301      	movs	r3, #1
 800f49c:	4628      	mov	r0, r5
 800f49e:	47b0      	blx	r6
 800f4a0:	1c41      	adds	r1, r0, #1
 800f4a2:	d1c7      	bne.n	800f434 <__sflush_r+0x34>
 800f4a4:	682b      	ldr	r3, [r5, #0]
 800f4a6:	2b00      	cmp	r3, #0
 800f4a8:	d0c4      	beq.n	800f434 <__sflush_r+0x34>
 800f4aa:	2b1d      	cmp	r3, #29
 800f4ac:	d001      	beq.n	800f4b2 <__sflush_r+0xb2>
 800f4ae:	2b16      	cmp	r3, #22
 800f4b0:	d101      	bne.n	800f4b6 <__sflush_r+0xb6>
 800f4b2:	602f      	str	r7, [r5, #0]
 800f4b4:	e7b1      	b.n	800f41a <__sflush_r+0x1a>
 800f4b6:	89a3      	ldrh	r3, [r4, #12]
 800f4b8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800f4bc:	81a3      	strh	r3, [r4, #12]
 800f4be:	e7ad      	b.n	800f41c <__sflush_r+0x1c>
 800f4c0:	690f      	ldr	r7, [r1, #16]
 800f4c2:	2f00      	cmp	r7, #0
 800f4c4:	d0a9      	beq.n	800f41a <__sflush_r+0x1a>
 800f4c6:	0793      	lsls	r3, r2, #30
 800f4c8:	680e      	ldr	r6, [r1, #0]
 800f4ca:	bf08      	it	eq
 800f4cc:	694b      	ldreq	r3, [r1, #20]
 800f4ce:	600f      	str	r7, [r1, #0]
 800f4d0:	bf18      	it	ne
 800f4d2:	2300      	movne	r3, #0
 800f4d4:	eba6 0807 	sub.w	r8, r6, r7
 800f4d8:	608b      	str	r3, [r1, #8]
 800f4da:	f1b8 0f00 	cmp.w	r8, #0
 800f4de:	dd9c      	ble.n	800f41a <__sflush_r+0x1a>
 800f4e0:	6a21      	ldr	r1, [r4, #32]
 800f4e2:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800f4e4:	4643      	mov	r3, r8
 800f4e6:	463a      	mov	r2, r7
 800f4e8:	4628      	mov	r0, r5
 800f4ea:	47b0      	blx	r6
 800f4ec:	2800      	cmp	r0, #0
 800f4ee:	dc06      	bgt.n	800f4fe <__sflush_r+0xfe>
 800f4f0:	89a3      	ldrh	r3, [r4, #12]
 800f4f2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800f4f6:	81a3      	strh	r3, [r4, #12]
 800f4f8:	f04f 30ff 	mov.w	r0, #4294967295
 800f4fc:	e78e      	b.n	800f41c <__sflush_r+0x1c>
 800f4fe:	4407      	add	r7, r0
 800f500:	eba8 0800 	sub.w	r8, r8, r0
 800f504:	e7e9      	b.n	800f4da <__sflush_r+0xda>
 800f506:	bf00      	nop
 800f508:	20400001 	.word	0x20400001

0800f50c <_fflush_r>:
 800f50c:	b538      	push	{r3, r4, r5, lr}
 800f50e:	690b      	ldr	r3, [r1, #16]
 800f510:	4605      	mov	r5, r0
 800f512:	460c      	mov	r4, r1
 800f514:	b913      	cbnz	r3, 800f51c <_fflush_r+0x10>
 800f516:	2500      	movs	r5, #0
 800f518:	4628      	mov	r0, r5
 800f51a:	bd38      	pop	{r3, r4, r5, pc}
 800f51c:	b118      	cbz	r0, 800f526 <_fflush_r+0x1a>
 800f51e:	6983      	ldr	r3, [r0, #24]
 800f520:	b90b      	cbnz	r3, 800f526 <_fflush_r+0x1a>
 800f522:	f7ff fc4d 	bl	800edc0 <__sinit>
 800f526:	4b14      	ldr	r3, [pc, #80]	; (800f578 <_fflush_r+0x6c>)
 800f528:	429c      	cmp	r4, r3
 800f52a:	d11b      	bne.n	800f564 <_fflush_r+0x58>
 800f52c:	686c      	ldr	r4, [r5, #4]
 800f52e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f532:	2b00      	cmp	r3, #0
 800f534:	d0ef      	beq.n	800f516 <_fflush_r+0xa>
 800f536:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800f538:	07d0      	lsls	r0, r2, #31
 800f53a:	d404      	bmi.n	800f546 <_fflush_r+0x3a>
 800f53c:	0599      	lsls	r1, r3, #22
 800f53e:	d402      	bmi.n	800f546 <_fflush_r+0x3a>
 800f540:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800f542:	f7ff fd00 	bl	800ef46 <__retarget_lock_acquire_recursive>
 800f546:	4628      	mov	r0, r5
 800f548:	4621      	mov	r1, r4
 800f54a:	f7ff ff59 	bl	800f400 <__sflush_r>
 800f54e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800f550:	07da      	lsls	r2, r3, #31
 800f552:	4605      	mov	r5, r0
 800f554:	d4e0      	bmi.n	800f518 <_fflush_r+0xc>
 800f556:	89a3      	ldrh	r3, [r4, #12]
 800f558:	059b      	lsls	r3, r3, #22
 800f55a:	d4dd      	bmi.n	800f518 <_fflush_r+0xc>
 800f55c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800f55e:	f7ff fcf3 	bl	800ef48 <__retarget_lock_release_recursive>
 800f562:	e7d9      	b.n	800f518 <_fflush_r+0xc>
 800f564:	4b05      	ldr	r3, [pc, #20]	; (800f57c <_fflush_r+0x70>)
 800f566:	429c      	cmp	r4, r3
 800f568:	d101      	bne.n	800f56e <_fflush_r+0x62>
 800f56a:	68ac      	ldr	r4, [r5, #8]
 800f56c:	e7df      	b.n	800f52e <_fflush_r+0x22>
 800f56e:	4b04      	ldr	r3, [pc, #16]	; (800f580 <_fflush_r+0x74>)
 800f570:	429c      	cmp	r4, r3
 800f572:	bf08      	it	eq
 800f574:	68ec      	ldreq	r4, [r5, #12]
 800f576:	e7da      	b.n	800f52e <_fflush_r+0x22>
 800f578:	08012c20 	.word	0x08012c20
 800f57c:	08012c40 	.word	0x08012c40
 800f580:	08012c00 	.word	0x08012c00

0800f584 <fiprintf>:
 800f584:	b40e      	push	{r1, r2, r3}
 800f586:	b503      	push	{r0, r1, lr}
 800f588:	4601      	mov	r1, r0
 800f58a:	ab03      	add	r3, sp, #12
 800f58c:	4805      	ldr	r0, [pc, #20]	; (800f5a4 <fiprintf+0x20>)
 800f58e:	f853 2b04 	ldr.w	r2, [r3], #4
 800f592:	6800      	ldr	r0, [r0, #0]
 800f594:	9301      	str	r3, [sp, #4]
 800f596:	f000 f9ff 	bl	800f998 <_vfiprintf_r>
 800f59a:	b002      	add	sp, #8
 800f59c:	f85d eb04 	ldr.w	lr, [sp], #4
 800f5a0:	b003      	add	sp, #12
 800f5a2:	4770      	bx	lr
 800f5a4:	2000002c 	.word	0x2000002c

0800f5a8 <_lseek_r>:
 800f5a8:	b538      	push	{r3, r4, r5, lr}
 800f5aa:	4d07      	ldr	r5, [pc, #28]	; (800f5c8 <_lseek_r+0x20>)
 800f5ac:	4604      	mov	r4, r0
 800f5ae:	4608      	mov	r0, r1
 800f5b0:	4611      	mov	r1, r2
 800f5b2:	2200      	movs	r2, #0
 800f5b4:	602a      	str	r2, [r5, #0]
 800f5b6:	461a      	mov	r2, r3
 800f5b8:	f7f1 fa68 	bl	8000a8c <_lseek>
 800f5bc:	1c43      	adds	r3, r0, #1
 800f5be:	d102      	bne.n	800f5c6 <_lseek_r+0x1e>
 800f5c0:	682b      	ldr	r3, [r5, #0]
 800f5c2:	b103      	cbz	r3, 800f5c6 <_lseek_r+0x1e>
 800f5c4:	6023      	str	r3, [r4, #0]
 800f5c6:	bd38      	pop	{r3, r4, r5, pc}
 800f5c8:	20010a7c 	.word	0x20010a7c

0800f5cc <malloc>:
 800f5cc:	4b02      	ldr	r3, [pc, #8]	; (800f5d8 <malloc+0xc>)
 800f5ce:	4601      	mov	r1, r0
 800f5d0:	6818      	ldr	r0, [r3, #0]
 800f5d2:	f7ff bd1b 	b.w	800f00c <_malloc_r>
 800f5d6:	bf00      	nop
 800f5d8:	2000002c 	.word	0x2000002c

0800f5dc <__malloc_lock>:
 800f5dc:	4801      	ldr	r0, [pc, #4]	; (800f5e4 <__malloc_lock+0x8>)
 800f5de:	f7ff bcb2 	b.w	800ef46 <__retarget_lock_acquire_recursive>
 800f5e2:	bf00      	nop
 800f5e4:	20010a70 	.word	0x20010a70

0800f5e8 <__malloc_unlock>:
 800f5e8:	4801      	ldr	r0, [pc, #4]	; (800f5f0 <__malloc_unlock+0x8>)
 800f5ea:	f7ff bcad 	b.w	800ef48 <__retarget_lock_release_recursive>
 800f5ee:	bf00      	nop
 800f5f0:	20010a70 	.word	0x20010a70

0800f5f4 <_free_r>:
 800f5f4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800f5f6:	2900      	cmp	r1, #0
 800f5f8:	d044      	beq.n	800f684 <_free_r+0x90>
 800f5fa:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800f5fe:	9001      	str	r0, [sp, #4]
 800f600:	2b00      	cmp	r3, #0
 800f602:	f1a1 0404 	sub.w	r4, r1, #4
 800f606:	bfb8      	it	lt
 800f608:	18e4      	addlt	r4, r4, r3
 800f60a:	f7ff ffe7 	bl	800f5dc <__malloc_lock>
 800f60e:	4a1e      	ldr	r2, [pc, #120]	; (800f688 <_free_r+0x94>)
 800f610:	9801      	ldr	r0, [sp, #4]
 800f612:	6813      	ldr	r3, [r2, #0]
 800f614:	b933      	cbnz	r3, 800f624 <_free_r+0x30>
 800f616:	6063      	str	r3, [r4, #4]
 800f618:	6014      	str	r4, [r2, #0]
 800f61a:	b003      	add	sp, #12
 800f61c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800f620:	f7ff bfe2 	b.w	800f5e8 <__malloc_unlock>
 800f624:	42a3      	cmp	r3, r4
 800f626:	d908      	bls.n	800f63a <_free_r+0x46>
 800f628:	6825      	ldr	r5, [r4, #0]
 800f62a:	1961      	adds	r1, r4, r5
 800f62c:	428b      	cmp	r3, r1
 800f62e:	bf01      	itttt	eq
 800f630:	6819      	ldreq	r1, [r3, #0]
 800f632:	685b      	ldreq	r3, [r3, #4]
 800f634:	1949      	addeq	r1, r1, r5
 800f636:	6021      	streq	r1, [r4, #0]
 800f638:	e7ed      	b.n	800f616 <_free_r+0x22>
 800f63a:	461a      	mov	r2, r3
 800f63c:	685b      	ldr	r3, [r3, #4]
 800f63e:	b10b      	cbz	r3, 800f644 <_free_r+0x50>
 800f640:	42a3      	cmp	r3, r4
 800f642:	d9fa      	bls.n	800f63a <_free_r+0x46>
 800f644:	6811      	ldr	r1, [r2, #0]
 800f646:	1855      	adds	r5, r2, r1
 800f648:	42a5      	cmp	r5, r4
 800f64a:	d10b      	bne.n	800f664 <_free_r+0x70>
 800f64c:	6824      	ldr	r4, [r4, #0]
 800f64e:	4421      	add	r1, r4
 800f650:	1854      	adds	r4, r2, r1
 800f652:	42a3      	cmp	r3, r4
 800f654:	6011      	str	r1, [r2, #0]
 800f656:	d1e0      	bne.n	800f61a <_free_r+0x26>
 800f658:	681c      	ldr	r4, [r3, #0]
 800f65a:	685b      	ldr	r3, [r3, #4]
 800f65c:	6053      	str	r3, [r2, #4]
 800f65e:	4421      	add	r1, r4
 800f660:	6011      	str	r1, [r2, #0]
 800f662:	e7da      	b.n	800f61a <_free_r+0x26>
 800f664:	d902      	bls.n	800f66c <_free_r+0x78>
 800f666:	230c      	movs	r3, #12
 800f668:	6003      	str	r3, [r0, #0]
 800f66a:	e7d6      	b.n	800f61a <_free_r+0x26>
 800f66c:	6825      	ldr	r5, [r4, #0]
 800f66e:	1961      	adds	r1, r4, r5
 800f670:	428b      	cmp	r3, r1
 800f672:	bf04      	itt	eq
 800f674:	6819      	ldreq	r1, [r3, #0]
 800f676:	685b      	ldreq	r3, [r3, #4]
 800f678:	6063      	str	r3, [r4, #4]
 800f67a:	bf04      	itt	eq
 800f67c:	1949      	addeq	r1, r1, r5
 800f67e:	6021      	streq	r1, [r4, #0]
 800f680:	6054      	str	r4, [r2, #4]
 800f682:	e7ca      	b.n	800f61a <_free_r+0x26>
 800f684:	b003      	add	sp, #12
 800f686:	bd30      	pop	{r4, r5, pc}
 800f688:	20010a74 	.word	0x20010a74

0800f68c <__ssputs_r>:
 800f68c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f690:	688e      	ldr	r6, [r1, #8]
 800f692:	429e      	cmp	r6, r3
 800f694:	4682      	mov	sl, r0
 800f696:	460c      	mov	r4, r1
 800f698:	4690      	mov	r8, r2
 800f69a:	461f      	mov	r7, r3
 800f69c:	d838      	bhi.n	800f710 <__ssputs_r+0x84>
 800f69e:	898a      	ldrh	r2, [r1, #12]
 800f6a0:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800f6a4:	d032      	beq.n	800f70c <__ssputs_r+0x80>
 800f6a6:	6825      	ldr	r5, [r4, #0]
 800f6a8:	6909      	ldr	r1, [r1, #16]
 800f6aa:	eba5 0901 	sub.w	r9, r5, r1
 800f6ae:	6965      	ldr	r5, [r4, #20]
 800f6b0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800f6b4:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800f6b8:	3301      	adds	r3, #1
 800f6ba:	444b      	add	r3, r9
 800f6bc:	106d      	asrs	r5, r5, #1
 800f6be:	429d      	cmp	r5, r3
 800f6c0:	bf38      	it	cc
 800f6c2:	461d      	movcc	r5, r3
 800f6c4:	0553      	lsls	r3, r2, #21
 800f6c6:	d531      	bpl.n	800f72c <__ssputs_r+0xa0>
 800f6c8:	4629      	mov	r1, r5
 800f6ca:	f7ff fc9f 	bl	800f00c <_malloc_r>
 800f6ce:	4606      	mov	r6, r0
 800f6d0:	b950      	cbnz	r0, 800f6e8 <__ssputs_r+0x5c>
 800f6d2:	230c      	movs	r3, #12
 800f6d4:	f8ca 3000 	str.w	r3, [sl]
 800f6d8:	89a3      	ldrh	r3, [r4, #12]
 800f6da:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800f6de:	81a3      	strh	r3, [r4, #12]
 800f6e0:	f04f 30ff 	mov.w	r0, #4294967295
 800f6e4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f6e8:	6921      	ldr	r1, [r4, #16]
 800f6ea:	464a      	mov	r2, r9
 800f6ec:	f7ff fc3d 	bl	800ef6a <memcpy>
 800f6f0:	89a3      	ldrh	r3, [r4, #12]
 800f6f2:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800f6f6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800f6fa:	81a3      	strh	r3, [r4, #12]
 800f6fc:	6126      	str	r6, [r4, #16]
 800f6fe:	6165      	str	r5, [r4, #20]
 800f700:	444e      	add	r6, r9
 800f702:	eba5 0509 	sub.w	r5, r5, r9
 800f706:	6026      	str	r6, [r4, #0]
 800f708:	60a5      	str	r5, [r4, #8]
 800f70a:	463e      	mov	r6, r7
 800f70c:	42be      	cmp	r6, r7
 800f70e:	d900      	bls.n	800f712 <__ssputs_r+0x86>
 800f710:	463e      	mov	r6, r7
 800f712:	6820      	ldr	r0, [r4, #0]
 800f714:	4632      	mov	r2, r6
 800f716:	4641      	mov	r1, r8
 800f718:	f7ff fc35 	bl	800ef86 <memmove>
 800f71c:	68a3      	ldr	r3, [r4, #8]
 800f71e:	1b9b      	subs	r3, r3, r6
 800f720:	60a3      	str	r3, [r4, #8]
 800f722:	6823      	ldr	r3, [r4, #0]
 800f724:	4433      	add	r3, r6
 800f726:	6023      	str	r3, [r4, #0]
 800f728:	2000      	movs	r0, #0
 800f72a:	e7db      	b.n	800f6e4 <__ssputs_r+0x58>
 800f72c:	462a      	mov	r2, r5
 800f72e:	f000 fd35 	bl	801019c <_realloc_r>
 800f732:	4606      	mov	r6, r0
 800f734:	2800      	cmp	r0, #0
 800f736:	d1e1      	bne.n	800f6fc <__ssputs_r+0x70>
 800f738:	6921      	ldr	r1, [r4, #16]
 800f73a:	4650      	mov	r0, sl
 800f73c:	f7ff ff5a 	bl	800f5f4 <_free_r>
 800f740:	e7c7      	b.n	800f6d2 <__ssputs_r+0x46>
	...

0800f744 <_svfiprintf_r>:
 800f744:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f748:	4698      	mov	r8, r3
 800f74a:	898b      	ldrh	r3, [r1, #12]
 800f74c:	061b      	lsls	r3, r3, #24
 800f74e:	b09d      	sub	sp, #116	; 0x74
 800f750:	4607      	mov	r7, r0
 800f752:	460d      	mov	r5, r1
 800f754:	4614      	mov	r4, r2
 800f756:	d50e      	bpl.n	800f776 <_svfiprintf_r+0x32>
 800f758:	690b      	ldr	r3, [r1, #16]
 800f75a:	b963      	cbnz	r3, 800f776 <_svfiprintf_r+0x32>
 800f75c:	2140      	movs	r1, #64	; 0x40
 800f75e:	f7ff fc55 	bl	800f00c <_malloc_r>
 800f762:	6028      	str	r0, [r5, #0]
 800f764:	6128      	str	r0, [r5, #16]
 800f766:	b920      	cbnz	r0, 800f772 <_svfiprintf_r+0x2e>
 800f768:	230c      	movs	r3, #12
 800f76a:	603b      	str	r3, [r7, #0]
 800f76c:	f04f 30ff 	mov.w	r0, #4294967295
 800f770:	e0d1      	b.n	800f916 <_svfiprintf_r+0x1d2>
 800f772:	2340      	movs	r3, #64	; 0x40
 800f774:	616b      	str	r3, [r5, #20]
 800f776:	2300      	movs	r3, #0
 800f778:	9309      	str	r3, [sp, #36]	; 0x24
 800f77a:	2320      	movs	r3, #32
 800f77c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800f780:	f8cd 800c 	str.w	r8, [sp, #12]
 800f784:	2330      	movs	r3, #48	; 0x30
 800f786:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800f930 <_svfiprintf_r+0x1ec>
 800f78a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800f78e:	f04f 0901 	mov.w	r9, #1
 800f792:	4623      	mov	r3, r4
 800f794:	469a      	mov	sl, r3
 800f796:	f813 2b01 	ldrb.w	r2, [r3], #1
 800f79a:	b10a      	cbz	r2, 800f7a0 <_svfiprintf_r+0x5c>
 800f79c:	2a25      	cmp	r2, #37	; 0x25
 800f79e:	d1f9      	bne.n	800f794 <_svfiprintf_r+0x50>
 800f7a0:	ebba 0b04 	subs.w	fp, sl, r4
 800f7a4:	d00b      	beq.n	800f7be <_svfiprintf_r+0x7a>
 800f7a6:	465b      	mov	r3, fp
 800f7a8:	4622      	mov	r2, r4
 800f7aa:	4629      	mov	r1, r5
 800f7ac:	4638      	mov	r0, r7
 800f7ae:	f7ff ff6d 	bl	800f68c <__ssputs_r>
 800f7b2:	3001      	adds	r0, #1
 800f7b4:	f000 80aa 	beq.w	800f90c <_svfiprintf_r+0x1c8>
 800f7b8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800f7ba:	445a      	add	r2, fp
 800f7bc:	9209      	str	r2, [sp, #36]	; 0x24
 800f7be:	f89a 3000 	ldrb.w	r3, [sl]
 800f7c2:	2b00      	cmp	r3, #0
 800f7c4:	f000 80a2 	beq.w	800f90c <_svfiprintf_r+0x1c8>
 800f7c8:	2300      	movs	r3, #0
 800f7ca:	f04f 32ff 	mov.w	r2, #4294967295
 800f7ce:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800f7d2:	f10a 0a01 	add.w	sl, sl, #1
 800f7d6:	9304      	str	r3, [sp, #16]
 800f7d8:	9307      	str	r3, [sp, #28]
 800f7da:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800f7de:	931a      	str	r3, [sp, #104]	; 0x68
 800f7e0:	4654      	mov	r4, sl
 800f7e2:	2205      	movs	r2, #5
 800f7e4:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f7e8:	4851      	ldr	r0, [pc, #324]	; (800f930 <_svfiprintf_r+0x1ec>)
 800f7ea:	f7f0 fd09 	bl	8000200 <memchr>
 800f7ee:	9a04      	ldr	r2, [sp, #16]
 800f7f0:	b9d8      	cbnz	r0, 800f82a <_svfiprintf_r+0xe6>
 800f7f2:	06d0      	lsls	r0, r2, #27
 800f7f4:	bf44      	itt	mi
 800f7f6:	2320      	movmi	r3, #32
 800f7f8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800f7fc:	0711      	lsls	r1, r2, #28
 800f7fe:	bf44      	itt	mi
 800f800:	232b      	movmi	r3, #43	; 0x2b
 800f802:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800f806:	f89a 3000 	ldrb.w	r3, [sl]
 800f80a:	2b2a      	cmp	r3, #42	; 0x2a
 800f80c:	d015      	beq.n	800f83a <_svfiprintf_r+0xf6>
 800f80e:	9a07      	ldr	r2, [sp, #28]
 800f810:	4654      	mov	r4, sl
 800f812:	2000      	movs	r0, #0
 800f814:	f04f 0c0a 	mov.w	ip, #10
 800f818:	4621      	mov	r1, r4
 800f81a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800f81e:	3b30      	subs	r3, #48	; 0x30
 800f820:	2b09      	cmp	r3, #9
 800f822:	d94e      	bls.n	800f8c2 <_svfiprintf_r+0x17e>
 800f824:	b1b0      	cbz	r0, 800f854 <_svfiprintf_r+0x110>
 800f826:	9207      	str	r2, [sp, #28]
 800f828:	e014      	b.n	800f854 <_svfiprintf_r+0x110>
 800f82a:	eba0 0308 	sub.w	r3, r0, r8
 800f82e:	fa09 f303 	lsl.w	r3, r9, r3
 800f832:	4313      	orrs	r3, r2
 800f834:	9304      	str	r3, [sp, #16]
 800f836:	46a2      	mov	sl, r4
 800f838:	e7d2      	b.n	800f7e0 <_svfiprintf_r+0x9c>
 800f83a:	9b03      	ldr	r3, [sp, #12]
 800f83c:	1d19      	adds	r1, r3, #4
 800f83e:	681b      	ldr	r3, [r3, #0]
 800f840:	9103      	str	r1, [sp, #12]
 800f842:	2b00      	cmp	r3, #0
 800f844:	bfbb      	ittet	lt
 800f846:	425b      	neglt	r3, r3
 800f848:	f042 0202 	orrlt.w	r2, r2, #2
 800f84c:	9307      	strge	r3, [sp, #28]
 800f84e:	9307      	strlt	r3, [sp, #28]
 800f850:	bfb8      	it	lt
 800f852:	9204      	strlt	r2, [sp, #16]
 800f854:	7823      	ldrb	r3, [r4, #0]
 800f856:	2b2e      	cmp	r3, #46	; 0x2e
 800f858:	d10c      	bne.n	800f874 <_svfiprintf_r+0x130>
 800f85a:	7863      	ldrb	r3, [r4, #1]
 800f85c:	2b2a      	cmp	r3, #42	; 0x2a
 800f85e:	d135      	bne.n	800f8cc <_svfiprintf_r+0x188>
 800f860:	9b03      	ldr	r3, [sp, #12]
 800f862:	1d1a      	adds	r2, r3, #4
 800f864:	681b      	ldr	r3, [r3, #0]
 800f866:	9203      	str	r2, [sp, #12]
 800f868:	2b00      	cmp	r3, #0
 800f86a:	bfb8      	it	lt
 800f86c:	f04f 33ff 	movlt.w	r3, #4294967295
 800f870:	3402      	adds	r4, #2
 800f872:	9305      	str	r3, [sp, #20]
 800f874:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800f940 <_svfiprintf_r+0x1fc>
 800f878:	7821      	ldrb	r1, [r4, #0]
 800f87a:	2203      	movs	r2, #3
 800f87c:	4650      	mov	r0, sl
 800f87e:	f7f0 fcbf 	bl	8000200 <memchr>
 800f882:	b140      	cbz	r0, 800f896 <_svfiprintf_r+0x152>
 800f884:	2340      	movs	r3, #64	; 0x40
 800f886:	eba0 000a 	sub.w	r0, r0, sl
 800f88a:	fa03 f000 	lsl.w	r0, r3, r0
 800f88e:	9b04      	ldr	r3, [sp, #16]
 800f890:	4303      	orrs	r3, r0
 800f892:	3401      	adds	r4, #1
 800f894:	9304      	str	r3, [sp, #16]
 800f896:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f89a:	4826      	ldr	r0, [pc, #152]	; (800f934 <_svfiprintf_r+0x1f0>)
 800f89c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800f8a0:	2206      	movs	r2, #6
 800f8a2:	f7f0 fcad 	bl	8000200 <memchr>
 800f8a6:	2800      	cmp	r0, #0
 800f8a8:	d038      	beq.n	800f91c <_svfiprintf_r+0x1d8>
 800f8aa:	4b23      	ldr	r3, [pc, #140]	; (800f938 <_svfiprintf_r+0x1f4>)
 800f8ac:	bb1b      	cbnz	r3, 800f8f6 <_svfiprintf_r+0x1b2>
 800f8ae:	9b03      	ldr	r3, [sp, #12]
 800f8b0:	3307      	adds	r3, #7
 800f8b2:	f023 0307 	bic.w	r3, r3, #7
 800f8b6:	3308      	adds	r3, #8
 800f8b8:	9303      	str	r3, [sp, #12]
 800f8ba:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f8bc:	4433      	add	r3, r6
 800f8be:	9309      	str	r3, [sp, #36]	; 0x24
 800f8c0:	e767      	b.n	800f792 <_svfiprintf_r+0x4e>
 800f8c2:	fb0c 3202 	mla	r2, ip, r2, r3
 800f8c6:	460c      	mov	r4, r1
 800f8c8:	2001      	movs	r0, #1
 800f8ca:	e7a5      	b.n	800f818 <_svfiprintf_r+0xd4>
 800f8cc:	2300      	movs	r3, #0
 800f8ce:	3401      	adds	r4, #1
 800f8d0:	9305      	str	r3, [sp, #20]
 800f8d2:	4619      	mov	r1, r3
 800f8d4:	f04f 0c0a 	mov.w	ip, #10
 800f8d8:	4620      	mov	r0, r4
 800f8da:	f810 2b01 	ldrb.w	r2, [r0], #1
 800f8de:	3a30      	subs	r2, #48	; 0x30
 800f8e0:	2a09      	cmp	r2, #9
 800f8e2:	d903      	bls.n	800f8ec <_svfiprintf_r+0x1a8>
 800f8e4:	2b00      	cmp	r3, #0
 800f8e6:	d0c5      	beq.n	800f874 <_svfiprintf_r+0x130>
 800f8e8:	9105      	str	r1, [sp, #20]
 800f8ea:	e7c3      	b.n	800f874 <_svfiprintf_r+0x130>
 800f8ec:	fb0c 2101 	mla	r1, ip, r1, r2
 800f8f0:	4604      	mov	r4, r0
 800f8f2:	2301      	movs	r3, #1
 800f8f4:	e7f0      	b.n	800f8d8 <_svfiprintf_r+0x194>
 800f8f6:	ab03      	add	r3, sp, #12
 800f8f8:	9300      	str	r3, [sp, #0]
 800f8fa:	462a      	mov	r2, r5
 800f8fc:	4b0f      	ldr	r3, [pc, #60]	; (800f93c <_svfiprintf_r+0x1f8>)
 800f8fe:	a904      	add	r1, sp, #16
 800f900:	4638      	mov	r0, r7
 800f902:	f3af 8000 	nop.w
 800f906:	1c42      	adds	r2, r0, #1
 800f908:	4606      	mov	r6, r0
 800f90a:	d1d6      	bne.n	800f8ba <_svfiprintf_r+0x176>
 800f90c:	89ab      	ldrh	r3, [r5, #12]
 800f90e:	065b      	lsls	r3, r3, #25
 800f910:	f53f af2c 	bmi.w	800f76c <_svfiprintf_r+0x28>
 800f914:	9809      	ldr	r0, [sp, #36]	; 0x24
 800f916:	b01d      	add	sp, #116	; 0x74
 800f918:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f91c:	ab03      	add	r3, sp, #12
 800f91e:	9300      	str	r3, [sp, #0]
 800f920:	462a      	mov	r2, r5
 800f922:	4b06      	ldr	r3, [pc, #24]	; (800f93c <_svfiprintf_r+0x1f8>)
 800f924:	a904      	add	r1, sp, #16
 800f926:	4638      	mov	r0, r7
 800f928:	f000 f9d4 	bl	800fcd4 <_printf_i>
 800f92c:	e7eb      	b.n	800f906 <_svfiprintf_r+0x1c2>
 800f92e:	bf00      	nop
 800f930:	08012d12 	.word	0x08012d12
 800f934:	08012d1c 	.word	0x08012d1c
 800f938:	00000000 	.word	0x00000000
 800f93c:	0800f68d 	.word	0x0800f68d
 800f940:	08012d18 	.word	0x08012d18

0800f944 <__sfputc_r>:
 800f944:	6893      	ldr	r3, [r2, #8]
 800f946:	3b01      	subs	r3, #1
 800f948:	2b00      	cmp	r3, #0
 800f94a:	b410      	push	{r4}
 800f94c:	6093      	str	r3, [r2, #8]
 800f94e:	da08      	bge.n	800f962 <__sfputc_r+0x1e>
 800f950:	6994      	ldr	r4, [r2, #24]
 800f952:	42a3      	cmp	r3, r4
 800f954:	db01      	blt.n	800f95a <__sfputc_r+0x16>
 800f956:	290a      	cmp	r1, #10
 800f958:	d103      	bne.n	800f962 <__sfputc_r+0x1e>
 800f95a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800f95e:	f000 baf1 	b.w	800ff44 <__swbuf_r>
 800f962:	6813      	ldr	r3, [r2, #0]
 800f964:	1c58      	adds	r0, r3, #1
 800f966:	6010      	str	r0, [r2, #0]
 800f968:	7019      	strb	r1, [r3, #0]
 800f96a:	4608      	mov	r0, r1
 800f96c:	f85d 4b04 	ldr.w	r4, [sp], #4
 800f970:	4770      	bx	lr

0800f972 <__sfputs_r>:
 800f972:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f974:	4606      	mov	r6, r0
 800f976:	460f      	mov	r7, r1
 800f978:	4614      	mov	r4, r2
 800f97a:	18d5      	adds	r5, r2, r3
 800f97c:	42ac      	cmp	r4, r5
 800f97e:	d101      	bne.n	800f984 <__sfputs_r+0x12>
 800f980:	2000      	movs	r0, #0
 800f982:	e007      	b.n	800f994 <__sfputs_r+0x22>
 800f984:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f988:	463a      	mov	r2, r7
 800f98a:	4630      	mov	r0, r6
 800f98c:	f7ff ffda 	bl	800f944 <__sfputc_r>
 800f990:	1c43      	adds	r3, r0, #1
 800f992:	d1f3      	bne.n	800f97c <__sfputs_r+0xa>
 800f994:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800f998 <_vfiprintf_r>:
 800f998:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f99c:	460d      	mov	r5, r1
 800f99e:	b09d      	sub	sp, #116	; 0x74
 800f9a0:	4614      	mov	r4, r2
 800f9a2:	4698      	mov	r8, r3
 800f9a4:	4606      	mov	r6, r0
 800f9a6:	b118      	cbz	r0, 800f9b0 <_vfiprintf_r+0x18>
 800f9a8:	6983      	ldr	r3, [r0, #24]
 800f9aa:	b90b      	cbnz	r3, 800f9b0 <_vfiprintf_r+0x18>
 800f9ac:	f7ff fa08 	bl	800edc0 <__sinit>
 800f9b0:	4b89      	ldr	r3, [pc, #548]	; (800fbd8 <_vfiprintf_r+0x240>)
 800f9b2:	429d      	cmp	r5, r3
 800f9b4:	d11b      	bne.n	800f9ee <_vfiprintf_r+0x56>
 800f9b6:	6875      	ldr	r5, [r6, #4]
 800f9b8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800f9ba:	07d9      	lsls	r1, r3, #31
 800f9bc:	d405      	bmi.n	800f9ca <_vfiprintf_r+0x32>
 800f9be:	89ab      	ldrh	r3, [r5, #12]
 800f9c0:	059a      	lsls	r2, r3, #22
 800f9c2:	d402      	bmi.n	800f9ca <_vfiprintf_r+0x32>
 800f9c4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800f9c6:	f7ff fabe 	bl	800ef46 <__retarget_lock_acquire_recursive>
 800f9ca:	89ab      	ldrh	r3, [r5, #12]
 800f9cc:	071b      	lsls	r3, r3, #28
 800f9ce:	d501      	bpl.n	800f9d4 <_vfiprintf_r+0x3c>
 800f9d0:	692b      	ldr	r3, [r5, #16]
 800f9d2:	b9eb      	cbnz	r3, 800fa10 <_vfiprintf_r+0x78>
 800f9d4:	4629      	mov	r1, r5
 800f9d6:	4630      	mov	r0, r6
 800f9d8:	f000 fb06 	bl	800ffe8 <__swsetup_r>
 800f9dc:	b1c0      	cbz	r0, 800fa10 <_vfiprintf_r+0x78>
 800f9de:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800f9e0:	07dc      	lsls	r4, r3, #31
 800f9e2:	d50e      	bpl.n	800fa02 <_vfiprintf_r+0x6a>
 800f9e4:	f04f 30ff 	mov.w	r0, #4294967295
 800f9e8:	b01d      	add	sp, #116	; 0x74
 800f9ea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f9ee:	4b7b      	ldr	r3, [pc, #492]	; (800fbdc <_vfiprintf_r+0x244>)
 800f9f0:	429d      	cmp	r5, r3
 800f9f2:	d101      	bne.n	800f9f8 <_vfiprintf_r+0x60>
 800f9f4:	68b5      	ldr	r5, [r6, #8]
 800f9f6:	e7df      	b.n	800f9b8 <_vfiprintf_r+0x20>
 800f9f8:	4b79      	ldr	r3, [pc, #484]	; (800fbe0 <_vfiprintf_r+0x248>)
 800f9fa:	429d      	cmp	r5, r3
 800f9fc:	bf08      	it	eq
 800f9fe:	68f5      	ldreq	r5, [r6, #12]
 800fa00:	e7da      	b.n	800f9b8 <_vfiprintf_r+0x20>
 800fa02:	89ab      	ldrh	r3, [r5, #12]
 800fa04:	0598      	lsls	r0, r3, #22
 800fa06:	d4ed      	bmi.n	800f9e4 <_vfiprintf_r+0x4c>
 800fa08:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800fa0a:	f7ff fa9d 	bl	800ef48 <__retarget_lock_release_recursive>
 800fa0e:	e7e9      	b.n	800f9e4 <_vfiprintf_r+0x4c>
 800fa10:	2300      	movs	r3, #0
 800fa12:	9309      	str	r3, [sp, #36]	; 0x24
 800fa14:	2320      	movs	r3, #32
 800fa16:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800fa1a:	f8cd 800c 	str.w	r8, [sp, #12]
 800fa1e:	2330      	movs	r3, #48	; 0x30
 800fa20:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800fbe4 <_vfiprintf_r+0x24c>
 800fa24:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800fa28:	f04f 0901 	mov.w	r9, #1
 800fa2c:	4623      	mov	r3, r4
 800fa2e:	469a      	mov	sl, r3
 800fa30:	f813 2b01 	ldrb.w	r2, [r3], #1
 800fa34:	b10a      	cbz	r2, 800fa3a <_vfiprintf_r+0xa2>
 800fa36:	2a25      	cmp	r2, #37	; 0x25
 800fa38:	d1f9      	bne.n	800fa2e <_vfiprintf_r+0x96>
 800fa3a:	ebba 0b04 	subs.w	fp, sl, r4
 800fa3e:	d00b      	beq.n	800fa58 <_vfiprintf_r+0xc0>
 800fa40:	465b      	mov	r3, fp
 800fa42:	4622      	mov	r2, r4
 800fa44:	4629      	mov	r1, r5
 800fa46:	4630      	mov	r0, r6
 800fa48:	f7ff ff93 	bl	800f972 <__sfputs_r>
 800fa4c:	3001      	adds	r0, #1
 800fa4e:	f000 80aa 	beq.w	800fba6 <_vfiprintf_r+0x20e>
 800fa52:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800fa54:	445a      	add	r2, fp
 800fa56:	9209      	str	r2, [sp, #36]	; 0x24
 800fa58:	f89a 3000 	ldrb.w	r3, [sl]
 800fa5c:	2b00      	cmp	r3, #0
 800fa5e:	f000 80a2 	beq.w	800fba6 <_vfiprintf_r+0x20e>
 800fa62:	2300      	movs	r3, #0
 800fa64:	f04f 32ff 	mov.w	r2, #4294967295
 800fa68:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800fa6c:	f10a 0a01 	add.w	sl, sl, #1
 800fa70:	9304      	str	r3, [sp, #16]
 800fa72:	9307      	str	r3, [sp, #28]
 800fa74:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800fa78:	931a      	str	r3, [sp, #104]	; 0x68
 800fa7a:	4654      	mov	r4, sl
 800fa7c:	2205      	movs	r2, #5
 800fa7e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800fa82:	4858      	ldr	r0, [pc, #352]	; (800fbe4 <_vfiprintf_r+0x24c>)
 800fa84:	f7f0 fbbc 	bl	8000200 <memchr>
 800fa88:	9a04      	ldr	r2, [sp, #16]
 800fa8a:	b9d8      	cbnz	r0, 800fac4 <_vfiprintf_r+0x12c>
 800fa8c:	06d1      	lsls	r1, r2, #27
 800fa8e:	bf44      	itt	mi
 800fa90:	2320      	movmi	r3, #32
 800fa92:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800fa96:	0713      	lsls	r3, r2, #28
 800fa98:	bf44      	itt	mi
 800fa9a:	232b      	movmi	r3, #43	; 0x2b
 800fa9c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800faa0:	f89a 3000 	ldrb.w	r3, [sl]
 800faa4:	2b2a      	cmp	r3, #42	; 0x2a
 800faa6:	d015      	beq.n	800fad4 <_vfiprintf_r+0x13c>
 800faa8:	9a07      	ldr	r2, [sp, #28]
 800faaa:	4654      	mov	r4, sl
 800faac:	2000      	movs	r0, #0
 800faae:	f04f 0c0a 	mov.w	ip, #10
 800fab2:	4621      	mov	r1, r4
 800fab4:	f811 3b01 	ldrb.w	r3, [r1], #1
 800fab8:	3b30      	subs	r3, #48	; 0x30
 800faba:	2b09      	cmp	r3, #9
 800fabc:	d94e      	bls.n	800fb5c <_vfiprintf_r+0x1c4>
 800fabe:	b1b0      	cbz	r0, 800faee <_vfiprintf_r+0x156>
 800fac0:	9207      	str	r2, [sp, #28]
 800fac2:	e014      	b.n	800faee <_vfiprintf_r+0x156>
 800fac4:	eba0 0308 	sub.w	r3, r0, r8
 800fac8:	fa09 f303 	lsl.w	r3, r9, r3
 800facc:	4313      	orrs	r3, r2
 800face:	9304      	str	r3, [sp, #16]
 800fad0:	46a2      	mov	sl, r4
 800fad2:	e7d2      	b.n	800fa7a <_vfiprintf_r+0xe2>
 800fad4:	9b03      	ldr	r3, [sp, #12]
 800fad6:	1d19      	adds	r1, r3, #4
 800fad8:	681b      	ldr	r3, [r3, #0]
 800fada:	9103      	str	r1, [sp, #12]
 800fadc:	2b00      	cmp	r3, #0
 800fade:	bfbb      	ittet	lt
 800fae0:	425b      	neglt	r3, r3
 800fae2:	f042 0202 	orrlt.w	r2, r2, #2
 800fae6:	9307      	strge	r3, [sp, #28]
 800fae8:	9307      	strlt	r3, [sp, #28]
 800faea:	bfb8      	it	lt
 800faec:	9204      	strlt	r2, [sp, #16]
 800faee:	7823      	ldrb	r3, [r4, #0]
 800faf0:	2b2e      	cmp	r3, #46	; 0x2e
 800faf2:	d10c      	bne.n	800fb0e <_vfiprintf_r+0x176>
 800faf4:	7863      	ldrb	r3, [r4, #1]
 800faf6:	2b2a      	cmp	r3, #42	; 0x2a
 800faf8:	d135      	bne.n	800fb66 <_vfiprintf_r+0x1ce>
 800fafa:	9b03      	ldr	r3, [sp, #12]
 800fafc:	1d1a      	adds	r2, r3, #4
 800fafe:	681b      	ldr	r3, [r3, #0]
 800fb00:	9203      	str	r2, [sp, #12]
 800fb02:	2b00      	cmp	r3, #0
 800fb04:	bfb8      	it	lt
 800fb06:	f04f 33ff 	movlt.w	r3, #4294967295
 800fb0a:	3402      	adds	r4, #2
 800fb0c:	9305      	str	r3, [sp, #20]
 800fb0e:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800fbf4 <_vfiprintf_r+0x25c>
 800fb12:	7821      	ldrb	r1, [r4, #0]
 800fb14:	2203      	movs	r2, #3
 800fb16:	4650      	mov	r0, sl
 800fb18:	f7f0 fb72 	bl	8000200 <memchr>
 800fb1c:	b140      	cbz	r0, 800fb30 <_vfiprintf_r+0x198>
 800fb1e:	2340      	movs	r3, #64	; 0x40
 800fb20:	eba0 000a 	sub.w	r0, r0, sl
 800fb24:	fa03 f000 	lsl.w	r0, r3, r0
 800fb28:	9b04      	ldr	r3, [sp, #16]
 800fb2a:	4303      	orrs	r3, r0
 800fb2c:	3401      	adds	r4, #1
 800fb2e:	9304      	str	r3, [sp, #16]
 800fb30:	f814 1b01 	ldrb.w	r1, [r4], #1
 800fb34:	482c      	ldr	r0, [pc, #176]	; (800fbe8 <_vfiprintf_r+0x250>)
 800fb36:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800fb3a:	2206      	movs	r2, #6
 800fb3c:	f7f0 fb60 	bl	8000200 <memchr>
 800fb40:	2800      	cmp	r0, #0
 800fb42:	d03f      	beq.n	800fbc4 <_vfiprintf_r+0x22c>
 800fb44:	4b29      	ldr	r3, [pc, #164]	; (800fbec <_vfiprintf_r+0x254>)
 800fb46:	bb1b      	cbnz	r3, 800fb90 <_vfiprintf_r+0x1f8>
 800fb48:	9b03      	ldr	r3, [sp, #12]
 800fb4a:	3307      	adds	r3, #7
 800fb4c:	f023 0307 	bic.w	r3, r3, #7
 800fb50:	3308      	adds	r3, #8
 800fb52:	9303      	str	r3, [sp, #12]
 800fb54:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800fb56:	443b      	add	r3, r7
 800fb58:	9309      	str	r3, [sp, #36]	; 0x24
 800fb5a:	e767      	b.n	800fa2c <_vfiprintf_r+0x94>
 800fb5c:	fb0c 3202 	mla	r2, ip, r2, r3
 800fb60:	460c      	mov	r4, r1
 800fb62:	2001      	movs	r0, #1
 800fb64:	e7a5      	b.n	800fab2 <_vfiprintf_r+0x11a>
 800fb66:	2300      	movs	r3, #0
 800fb68:	3401      	adds	r4, #1
 800fb6a:	9305      	str	r3, [sp, #20]
 800fb6c:	4619      	mov	r1, r3
 800fb6e:	f04f 0c0a 	mov.w	ip, #10
 800fb72:	4620      	mov	r0, r4
 800fb74:	f810 2b01 	ldrb.w	r2, [r0], #1
 800fb78:	3a30      	subs	r2, #48	; 0x30
 800fb7a:	2a09      	cmp	r2, #9
 800fb7c:	d903      	bls.n	800fb86 <_vfiprintf_r+0x1ee>
 800fb7e:	2b00      	cmp	r3, #0
 800fb80:	d0c5      	beq.n	800fb0e <_vfiprintf_r+0x176>
 800fb82:	9105      	str	r1, [sp, #20]
 800fb84:	e7c3      	b.n	800fb0e <_vfiprintf_r+0x176>
 800fb86:	fb0c 2101 	mla	r1, ip, r1, r2
 800fb8a:	4604      	mov	r4, r0
 800fb8c:	2301      	movs	r3, #1
 800fb8e:	e7f0      	b.n	800fb72 <_vfiprintf_r+0x1da>
 800fb90:	ab03      	add	r3, sp, #12
 800fb92:	9300      	str	r3, [sp, #0]
 800fb94:	462a      	mov	r2, r5
 800fb96:	4b16      	ldr	r3, [pc, #88]	; (800fbf0 <_vfiprintf_r+0x258>)
 800fb98:	a904      	add	r1, sp, #16
 800fb9a:	4630      	mov	r0, r6
 800fb9c:	f3af 8000 	nop.w
 800fba0:	4607      	mov	r7, r0
 800fba2:	1c78      	adds	r0, r7, #1
 800fba4:	d1d6      	bne.n	800fb54 <_vfiprintf_r+0x1bc>
 800fba6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800fba8:	07d9      	lsls	r1, r3, #31
 800fbaa:	d405      	bmi.n	800fbb8 <_vfiprintf_r+0x220>
 800fbac:	89ab      	ldrh	r3, [r5, #12]
 800fbae:	059a      	lsls	r2, r3, #22
 800fbb0:	d402      	bmi.n	800fbb8 <_vfiprintf_r+0x220>
 800fbb2:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800fbb4:	f7ff f9c8 	bl	800ef48 <__retarget_lock_release_recursive>
 800fbb8:	89ab      	ldrh	r3, [r5, #12]
 800fbba:	065b      	lsls	r3, r3, #25
 800fbbc:	f53f af12 	bmi.w	800f9e4 <_vfiprintf_r+0x4c>
 800fbc0:	9809      	ldr	r0, [sp, #36]	; 0x24
 800fbc2:	e711      	b.n	800f9e8 <_vfiprintf_r+0x50>
 800fbc4:	ab03      	add	r3, sp, #12
 800fbc6:	9300      	str	r3, [sp, #0]
 800fbc8:	462a      	mov	r2, r5
 800fbca:	4b09      	ldr	r3, [pc, #36]	; (800fbf0 <_vfiprintf_r+0x258>)
 800fbcc:	a904      	add	r1, sp, #16
 800fbce:	4630      	mov	r0, r6
 800fbd0:	f000 f880 	bl	800fcd4 <_printf_i>
 800fbd4:	e7e4      	b.n	800fba0 <_vfiprintf_r+0x208>
 800fbd6:	bf00      	nop
 800fbd8:	08012c20 	.word	0x08012c20
 800fbdc:	08012c40 	.word	0x08012c40
 800fbe0:	08012c00 	.word	0x08012c00
 800fbe4:	08012d12 	.word	0x08012d12
 800fbe8:	08012d1c 	.word	0x08012d1c
 800fbec:	00000000 	.word	0x00000000
 800fbf0:	0800f973 	.word	0x0800f973
 800fbf4:	08012d18 	.word	0x08012d18

0800fbf8 <_printf_common>:
 800fbf8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800fbfc:	4616      	mov	r6, r2
 800fbfe:	4699      	mov	r9, r3
 800fc00:	688a      	ldr	r2, [r1, #8]
 800fc02:	690b      	ldr	r3, [r1, #16]
 800fc04:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800fc08:	4293      	cmp	r3, r2
 800fc0a:	bfb8      	it	lt
 800fc0c:	4613      	movlt	r3, r2
 800fc0e:	6033      	str	r3, [r6, #0]
 800fc10:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800fc14:	4607      	mov	r7, r0
 800fc16:	460c      	mov	r4, r1
 800fc18:	b10a      	cbz	r2, 800fc1e <_printf_common+0x26>
 800fc1a:	3301      	adds	r3, #1
 800fc1c:	6033      	str	r3, [r6, #0]
 800fc1e:	6823      	ldr	r3, [r4, #0]
 800fc20:	0699      	lsls	r1, r3, #26
 800fc22:	bf42      	ittt	mi
 800fc24:	6833      	ldrmi	r3, [r6, #0]
 800fc26:	3302      	addmi	r3, #2
 800fc28:	6033      	strmi	r3, [r6, #0]
 800fc2a:	6825      	ldr	r5, [r4, #0]
 800fc2c:	f015 0506 	ands.w	r5, r5, #6
 800fc30:	d106      	bne.n	800fc40 <_printf_common+0x48>
 800fc32:	f104 0a19 	add.w	sl, r4, #25
 800fc36:	68e3      	ldr	r3, [r4, #12]
 800fc38:	6832      	ldr	r2, [r6, #0]
 800fc3a:	1a9b      	subs	r3, r3, r2
 800fc3c:	42ab      	cmp	r3, r5
 800fc3e:	dc26      	bgt.n	800fc8e <_printf_common+0x96>
 800fc40:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800fc44:	1e13      	subs	r3, r2, #0
 800fc46:	6822      	ldr	r2, [r4, #0]
 800fc48:	bf18      	it	ne
 800fc4a:	2301      	movne	r3, #1
 800fc4c:	0692      	lsls	r2, r2, #26
 800fc4e:	d42b      	bmi.n	800fca8 <_printf_common+0xb0>
 800fc50:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800fc54:	4649      	mov	r1, r9
 800fc56:	4638      	mov	r0, r7
 800fc58:	47c0      	blx	r8
 800fc5a:	3001      	adds	r0, #1
 800fc5c:	d01e      	beq.n	800fc9c <_printf_common+0xa4>
 800fc5e:	6823      	ldr	r3, [r4, #0]
 800fc60:	68e5      	ldr	r5, [r4, #12]
 800fc62:	6832      	ldr	r2, [r6, #0]
 800fc64:	f003 0306 	and.w	r3, r3, #6
 800fc68:	2b04      	cmp	r3, #4
 800fc6a:	bf08      	it	eq
 800fc6c:	1aad      	subeq	r5, r5, r2
 800fc6e:	68a3      	ldr	r3, [r4, #8]
 800fc70:	6922      	ldr	r2, [r4, #16]
 800fc72:	bf0c      	ite	eq
 800fc74:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800fc78:	2500      	movne	r5, #0
 800fc7a:	4293      	cmp	r3, r2
 800fc7c:	bfc4      	itt	gt
 800fc7e:	1a9b      	subgt	r3, r3, r2
 800fc80:	18ed      	addgt	r5, r5, r3
 800fc82:	2600      	movs	r6, #0
 800fc84:	341a      	adds	r4, #26
 800fc86:	42b5      	cmp	r5, r6
 800fc88:	d11a      	bne.n	800fcc0 <_printf_common+0xc8>
 800fc8a:	2000      	movs	r0, #0
 800fc8c:	e008      	b.n	800fca0 <_printf_common+0xa8>
 800fc8e:	2301      	movs	r3, #1
 800fc90:	4652      	mov	r2, sl
 800fc92:	4649      	mov	r1, r9
 800fc94:	4638      	mov	r0, r7
 800fc96:	47c0      	blx	r8
 800fc98:	3001      	adds	r0, #1
 800fc9a:	d103      	bne.n	800fca4 <_printf_common+0xac>
 800fc9c:	f04f 30ff 	mov.w	r0, #4294967295
 800fca0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800fca4:	3501      	adds	r5, #1
 800fca6:	e7c6      	b.n	800fc36 <_printf_common+0x3e>
 800fca8:	18e1      	adds	r1, r4, r3
 800fcaa:	1c5a      	adds	r2, r3, #1
 800fcac:	2030      	movs	r0, #48	; 0x30
 800fcae:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800fcb2:	4422      	add	r2, r4
 800fcb4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800fcb8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800fcbc:	3302      	adds	r3, #2
 800fcbe:	e7c7      	b.n	800fc50 <_printf_common+0x58>
 800fcc0:	2301      	movs	r3, #1
 800fcc2:	4622      	mov	r2, r4
 800fcc4:	4649      	mov	r1, r9
 800fcc6:	4638      	mov	r0, r7
 800fcc8:	47c0      	blx	r8
 800fcca:	3001      	adds	r0, #1
 800fccc:	d0e6      	beq.n	800fc9c <_printf_common+0xa4>
 800fcce:	3601      	adds	r6, #1
 800fcd0:	e7d9      	b.n	800fc86 <_printf_common+0x8e>
	...

0800fcd4 <_printf_i>:
 800fcd4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800fcd8:	7e0f      	ldrb	r7, [r1, #24]
 800fcda:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800fcdc:	2f78      	cmp	r7, #120	; 0x78
 800fcde:	4691      	mov	r9, r2
 800fce0:	4680      	mov	r8, r0
 800fce2:	460c      	mov	r4, r1
 800fce4:	469a      	mov	sl, r3
 800fce6:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800fcea:	d807      	bhi.n	800fcfc <_printf_i+0x28>
 800fcec:	2f62      	cmp	r7, #98	; 0x62
 800fcee:	d80a      	bhi.n	800fd06 <_printf_i+0x32>
 800fcf0:	2f00      	cmp	r7, #0
 800fcf2:	f000 80d8 	beq.w	800fea6 <_printf_i+0x1d2>
 800fcf6:	2f58      	cmp	r7, #88	; 0x58
 800fcf8:	f000 80a3 	beq.w	800fe42 <_printf_i+0x16e>
 800fcfc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800fd00:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800fd04:	e03a      	b.n	800fd7c <_printf_i+0xa8>
 800fd06:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800fd0a:	2b15      	cmp	r3, #21
 800fd0c:	d8f6      	bhi.n	800fcfc <_printf_i+0x28>
 800fd0e:	a101      	add	r1, pc, #4	; (adr r1, 800fd14 <_printf_i+0x40>)
 800fd10:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800fd14:	0800fd6d 	.word	0x0800fd6d
 800fd18:	0800fd81 	.word	0x0800fd81
 800fd1c:	0800fcfd 	.word	0x0800fcfd
 800fd20:	0800fcfd 	.word	0x0800fcfd
 800fd24:	0800fcfd 	.word	0x0800fcfd
 800fd28:	0800fcfd 	.word	0x0800fcfd
 800fd2c:	0800fd81 	.word	0x0800fd81
 800fd30:	0800fcfd 	.word	0x0800fcfd
 800fd34:	0800fcfd 	.word	0x0800fcfd
 800fd38:	0800fcfd 	.word	0x0800fcfd
 800fd3c:	0800fcfd 	.word	0x0800fcfd
 800fd40:	0800fe8d 	.word	0x0800fe8d
 800fd44:	0800fdb1 	.word	0x0800fdb1
 800fd48:	0800fe6f 	.word	0x0800fe6f
 800fd4c:	0800fcfd 	.word	0x0800fcfd
 800fd50:	0800fcfd 	.word	0x0800fcfd
 800fd54:	0800feaf 	.word	0x0800feaf
 800fd58:	0800fcfd 	.word	0x0800fcfd
 800fd5c:	0800fdb1 	.word	0x0800fdb1
 800fd60:	0800fcfd 	.word	0x0800fcfd
 800fd64:	0800fcfd 	.word	0x0800fcfd
 800fd68:	0800fe77 	.word	0x0800fe77
 800fd6c:	682b      	ldr	r3, [r5, #0]
 800fd6e:	1d1a      	adds	r2, r3, #4
 800fd70:	681b      	ldr	r3, [r3, #0]
 800fd72:	602a      	str	r2, [r5, #0]
 800fd74:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800fd78:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800fd7c:	2301      	movs	r3, #1
 800fd7e:	e0a3      	b.n	800fec8 <_printf_i+0x1f4>
 800fd80:	6820      	ldr	r0, [r4, #0]
 800fd82:	6829      	ldr	r1, [r5, #0]
 800fd84:	0606      	lsls	r6, r0, #24
 800fd86:	f101 0304 	add.w	r3, r1, #4
 800fd8a:	d50a      	bpl.n	800fda2 <_printf_i+0xce>
 800fd8c:	680e      	ldr	r6, [r1, #0]
 800fd8e:	602b      	str	r3, [r5, #0]
 800fd90:	2e00      	cmp	r6, #0
 800fd92:	da03      	bge.n	800fd9c <_printf_i+0xc8>
 800fd94:	232d      	movs	r3, #45	; 0x2d
 800fd96:	4276      	negs	r6, r6
 800fd98:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800fd9c:	485e      	ldr	r0, [pc, #376]	; (800ff18 <_printf_i+0x244>)
 800fd9e:	230a      	movs	r3, #10
 800fda0:	e019      	b.n	800fdd6 <_printf_i+0x102>
 800fda2:	680e      	ldr	r6, [r1, #0]
 800fda4:	602b      	str	r3, [r5, #0]
 800fda6:	f010 0f40 	tst.w	r0, #64	; 0x40
 800fdaa:	bf18      	it	ne
 800fdac:	b236      	sxthne	r6, r6
 800fdae:	e7ef      	b.n	800fd90 <_printf_i+0xbc>
 800fdb0:	682b      	ldr	r3, [r5, #0]
 800fdb2:	6820      	ldr	r0, [r4, #0]
 800fdb4:	1d19      	adds	r1, r3, #4
 800fdb6:	6029      	str	r1, [r5, #0]
 800fdb8:	0601      	lsls	r1, r0, #24
 800fdba:	d501      	bpl.n	800fdc0 <_printf_i+0xec>
 800fdbc:	681e      	ldr	r6, [r3, #0]
 800fdbe:	e002      	b.n	800fdc6 <_printf_i+0xf2>
 800fdc0:	0646      	lsls	r6, r0, #25
 800fdc2:	d5fb      	bpl.n	800fdbc <_printf_i+0xe8>
 800fdc4:	881e      	ldrh	r6, [r3, #0]
 800fdc6:	4854      	ldr	r0, [pc, #336]	; (800ff18 <_printf_i+0x244>)
 800fdc8:	2f6f      	cmp	r7, #111	; 0x6f
 800fdca:	bf0c      	ite	eq
 800fdcc:	2308      	moveq	r3, #8
 800fdce:	230a      	movne	r3, #10
 800fdd0:	2100      	movs	r1, #0
 800fdd2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800fdd6:	6865      	ldr	r5, [r4, #4]
 800fdd8:	60a5      	str	r5, [r4, #8]
 800fdda:	2d00      	cmp	r5, #0
 800fddc:	bfa2      	ittt	ge
 800fdde:	6821      	ldrge	r1, [r4, #0]
 800fde0:	f021 0104 	bicge.w	r1, r1, #4
 800fde4:	6021      	strge	r1, [r4, #0]
 800fde6:	b90e      	cbnz	r6, 800fdec <_printf_i+0x118>
 800fde8:	2d00      	cmp	r5, #0
 800fdea:	d04d      	beq.n	800fe88 <_printf_i+0x1b4>
 800fdec:	4615      	mov	r5, r2
 800fdee:	fbb6 f1f3 	udiv	r1, r6, r3
 800fdf2:	fb03 6711 	mls	r7, r3, r1, r6
 800fdf6:	5dc7      	ldrb	r7, [r0, r7]
 800fdf8:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800fdfc:	4637      	mov	r7, r6
 800fdfe:	42bb      	cmp	r3, r7
 800fe00:	460e      	mov	r6, r1
 800fe02:	d9f4      	bls.n	800fdee <_printf_i+0x11a>
 800fe04:	2b08      	cmp	r3, #8
 800fe06:	d10b      	bne.n	800fe20 <_printf_i+0x14c>
 800fe08:	6823      	ldr	r3, [r4, #0]
 800fe0a:	07de      	lsls	r6, r3, #31
 800fe0c:	d508      	bpl.n	800fe20 <_printf_i+0x14c>
 800fe0e:	6923      	ldr	r3, [r4, #16]
 800fe10:	6861      	ldr	r1, [r4, #4]
 800fe12:	4299      	cmp	r1, r3
 800fe14:	bfde      	ittt	le
 800fe16:	2330      	movle	r3, #48	; 0x30
 800fe18:	f805 3c01 	strble.w	r3, [r5, #-1]
 800fe1c:	f105 35ff 	addle.w	r5, r5, #4294967295
 800fe20:	1b52      	subs	r2, r2, r5
 800fe22:	6122      	str	r2, [r4, #16]
 800fe24:	f8cd a000 	str.w	sl, [sp]
 800fe28:	464b      	mov	r3, r9
 800fe2a:	aa03      	add	r2, sp, #12
 800fe2c:	4621      	mov	r1, r4
 800fe2e:	4640      	mov	r0, r8
 800fe30:	f7ff fee2 	bl	800fbf8 <_printf_common>
 800fe34:	3001      	adds	r0, #1
 800fe36:	d14c      	bne.n	800fed2 <_printf_i+0x1fe>
 800fe38:	f04f 30ff 	mov.w	r0, #4294967295
 800fe3c:	b004      	add	sp, #16
 800fe3e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800fe42:	4835      	ldr	r0, [pc, #212]	; (800ff18 <_printf_i+0x244>)
 800fe44:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800fe48:	6829      	ldr	r1, [r5, #0]
 800fe4a:	6823      	ldr	r3, [r4, #0]
 800fe4c:	f851 6b04 	ldr.w	r6, [r1], #4
 800fe50:	6029      	str	r1, [r5, #0]
 800fe52:	061d      	lsls	r5, r3, #24
 800fe54:	d514      	bpl.n	800fe80 <_printf_i+0x1ac>
 800fe56:	07df      	lsls	r7, r3, #31
 800fe58:	bf44      	itt	mi
 800fe5a:	f043 0320 	orrmi.w	r3, r3, #32
 800fe5e:	6023      	strmi	r3, [r4, #0]
 800fe60:	b91e      	cbnz	r6, 800fe6a <_printf_i+0x196>
 800fe62:	6823      	ldr	r3, [r4, #0]
 800fe64:	f023 0320 	bic.w	r3, r3, #32
 800fe68:	6023      	str	r3, [r4, #0]
 800fe6a:	2310      	movs	r3, #16
 800fe6c:	e7b0      	b.n	800fdd0 <_printf_i+0xfc>
 800fe6e:	6823      	ldr	r3, [r4, #0]
 800fe70:	f043 0320 	orr.w	r3, r3, #32
 800fe74:	6023      	str	r3, [r4, #0]
 800fe76:	2378      	movs	r3, #120	; 0x78
 800fe78:	4828      	ldr	r0, [pc, #160]	; (800ff1c <_printf_i+0x248>)
 800fe7a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800fe7e:	e7e3      	b.n	800fe48 <_printf_i+0x174>
 800fe80:	0659      	lsls	r1, r3, #25
 800fe82:	bf48      	it	mi
 800fe84:	b2b6      	uxthmi	r6, r6
 800fe86:	e7e6      	b.n	800fe56 <_printf_i+0x182>
 800fe88:	4615      	mov	r5, r2
 800fe8a:	e7bb      	b.n	800fe04 <_printf_i+0x130>
 800fe8c:	682b      	ldr	r3, [r5, #0]
 800fe8e:	6826      	ldr	r6, [r4, #0]
 800fe90:	6961      	ldr	r1, [r4, #20]
 800fe92:	1d18      	adds	r0, r3, #4
 800fe94:	6028      	str	r0, [r5, #0]
 800fe96:	0635      	lsls	r5, r6, #24
 800fe98:	681b      	ldr	r3, [r3, #0]
 800fe9a:	d501      	bpl.n	800fea0 <_printf_i+0x1cc>
 800fe9c:	6019      	str	r1, [r3, #0]
 800fe9e:	e002      	b.n	800fea6 <_printf_i+0x1d2>
 800fea0:	0670      	lsls	r0, r6, #25
 800fea2:	d5fb      	bpl.n	800fe9c <_printf_i+0x1c8>
 800fea4:	8019      	strh	r1, [r3, #0]
 800fea6:	2300      	movs	r3, #0
 800fea8:	6123      	str	r3, [r4, #16]
 800feaa:	4615      	mov	r5, r2
 800feac:	e7ba      	b.n	800fe24 <_printf_i+0x150>
 800feae:	682b      	ldr	r3, [r5, #0]
 800feb0:	1d1a      	adds	r2, r3, #4
 800feb2:	602a      	str	r2, [r5, #0]
 800feb4:	681d      	ldr	r5, [r3, #0]
 800feb6:	6862      	ldr	r2, [r4, #4]
 800feb8:	2100      	movs	r1, #0
 800feba:	4628      	mov	r0, r5
 800febc:	f7f0 f9a0 	bl	8000200 <memchr>
 800fec0:	b108      	cbz	r0, 800fec6 <_printf_i+0x1f2>
 800fec2:	1b40      	subs	r0, r0, r5
 800fec4:	6060      	str	r0, [r4, #4]
 800fec6:	6863      	ldr	r3, [r4, #4]
 800fec8:	6123      	str	r3, [r4, #16]
 800feca:	2300      	movs	r3, #0
 800fecc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800fed0:	e7a8      	b.n	800fe24 <_printf_i+0x150>
 800fed2:	6923      	ldr	r3, [r4, #16]
 800fed4:	462a      	mov	r2, r5
 800fed6:	4649      	mov	r1, r9
 800fed8:	4640      	mov	r0, r8
 800feda:	47d0      	blx	sl
 800fedc:	3001      	adds	r0, #1
 800fede:	d0ab      	beq.n	800fe38 <_printf_i+0x164>
 800fee0:	6823      	ldr	r3, [r4, #0]
 800fee2:	079b      	lsls	r3, r3, #30
 800fee4:	d413      	bmi.n	800ff0e <_printf_i+0x23a>
 800fee6:	68e0      	ldr	r0, [r4, #12]
 800fee8:	9b03      	ldr	r3, [sp, #12]
 800feea:	4298      	cmp	r0, r3
 800feec:	bfb8      	it	lt
 800feee:	4618      	movlt	r0, r3
 800fef0:	e7a4      	b.n	800fe3c <_printf_i+0x168>
 800fef2:	2301      	movs	r3, #1
 800fef4:	4632      	mov	r2, r6
 800fef6:	4649      	mov	r1, r9
 800fef8:	4640      	mov	r0, r8
 800fefa:	47d0      	blx	sl
 800fefc:	3001      	adds	r0, #1
 800fefe:	d09b      	beq.n	800fe38 <_printf_i+0x164>
 800ff00:	3501      	adds	r5, #1
 800ff02:	68e3      	ldr	r3, [r4, #12]
 800ff04:	9903      	ldr	r1, [sp, #12]
 800ff06:	1a5b      	subs	r3, r3, r1
 800ff08:	42ab      	cmp	r3, r5
 800ff0a:	dcf2      	bgt.n	800fef2 <_printf_i+0x21e>
 800ff0c:	e7eb      	b.n	800fee6 <_printf_i+0x212>
 800ff0e:	2500      	movs	r5, #0
 800ff10:	f104 0619 	add.w	r6, r4, #25
 800ff14:	e7f5      	b.n	800ff02 <_printf_i+0x22e>
 800ff16:	bf00      	nop
 800ff18:	08012d23 	.word	0x08012d23
 800ff1c:	08012d34 	.word	0x08012d34

0800ff20 <_read_r>:
 800ff20:	b538      	push	{r3, r4, r5, lr}
 800ff22:	4d07      	ldr	r5, [pc, #28]	; (800ff40 <_read_r+0x20>)
 800ff24:	4604      	mov	r4, r0
 800ff26:	4608      	mov	r0, r1
 800ff28:	4611      	mov	r1, r2
 800ff2a:	2200      	movs	r2, #0
 800ff2c:	602a      	str	r2, [r5, #0]
 800ff2e:	461a      	mov	r2, r3
 800ff30:	f7f0 fd88 	bl	8000a44 <_read>
 800ff34:	1c43      	adds	r3, r0, #1
 800ff36:	d102      	bne.n	800ff3e <_read_r+0x1e>
 800ff38:	682b      	ldr	r3, [r5, #0]
 800ff3a:	b103      	cbz	r3, 800ff3e <_read_r+0x1e>
 800ff3c:	6023      	str	r3, [r4, #0]
 800ff3e:	bd38      	pop	{r3, r4, r5, pc}
 800ff40:	20010a7c 	.word	0x20010a7c

0800ff44 <__swbuf_r>:
 800ff44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ff46:	460e      	mov	r6, r1
 800ff48:	4614      	mov	r4, r2
 800ff4a:	4605      	mov	r5, r0
 800ff4c:	b118      	cbz	r0, 800ff56 <__swbuf_r+0x12>
 800ff4e:	6983      	ldr	r3, [r0, #24]
 800ff50:	b90b      	cbnz	r3, 800ff56 <__swbuf_r+0x12>
 800ff52:	f7fe ff35 	bl	800edc0 <__sinit>
 800ff56:	4b21      	ldr	r3, [pc, #132]	; (800ffdc <__swbuf_r+0x98>)
 800ff58:	429c      	cmp	r4, r3
 800ff5a:	d12b      	bne.n	800ffb4 <__swbuf_r+0x70>
 800ff5c:	686c      	ldr	r4, [r5, #4]
 800ff5e:	69a3      	ldr	r3, [r4, #24]
 800ff60:	60a3      	str	r3, [r4, #8]
 800ff62:	89a3      	ldrh	r3, [r4, #12]
 800ff64:	071a      	lsls	r2, r3, #28
 800ff66:	d52f      	bpl.n	800ffc8 <__swbuf_r+0x84>
 800ff68:	6923      	ldr	r3, [r4, #16]
 800ff6a:	b36b      	cbz	r3, 800ffc8 <__swbuf_r+0x84>
 800ff6c:	6923      	ldr	r3, [r4, #16]
 800ff6e:	6820      	ldr	r0, [r4, #0]
 800ff70:	1ac0      	subs	r0, r0, r3
 800ff72:	6963      	ldr	r3, [r4, #20]
 800ff74:	b2f6      	uxtb	r6, r6
 800ff76:	4283      	cmp	r3, r0
 800ff78:	4637      	mov	r7, r6
 800ff7a:	dc04      	bgt.n	800ff86 <__swbuf_r+0x42>
 800ff7c:	4621      	mov	r1, r4
 800ff7e:	4628      	mov	r0, r5
 800ff80:	f7ff fac4 	bl	800f50c <_fflush_r>
 800ff84:	bb30      	cbnz	r0, 800ffd4 <__swbuf_r+0x90>
 800ff86:	68a3      	ldr	r3, [r4, #8]
 800ff88:	3b01      	subs	r3, #1
 800ff8a:	60a3      	str	r3, [r4, #8]
 800ff8c:	6823      	ldr	r3, [r4, #0]
 800ff8e:	1c5a      	adds	r2, r3, #1
 800ff90:	6022      	str	r2, [r4, #0]
 800ff92:	701e      	strb	r6, [r3, #0]
 800ff94:	6963      	ldr	r3, [r4, #20]
 800ff96:	3001      	adds	r0, #1
 800ff98:	4283      	cmp	r3, r0
 800ff9a:	d004      	beq.n	800ffa6 <__swbuf_r+0x62>
 800ff9c:	89a3      	ldrh	r3, [r4, #12]
 800ff9e:	07db      	lsls	r3, r3, #31
 800ffa0:	d506      	bpl.n	800ffb0 <__swbuf_r+0x6c>
 800ffa2:	2e0a      	cmp	r6, #10
 800ffa4:	d104      	bne.n	800ffb0 <__swbuf_r+0x6c>
 800ffa6:	4621      	mov	r1, r4
 800ffa8:	4628      	mov	r0, r5
 800ffaa:	f7ff faaf 	bl	800f50c <_fflush_r>
 800ffae:	b988      	cbnz	r0, 800ffd4 <__swbuf_r+0x90>
 800ffb0:	4638      	mov	r0, r7
 800ffb2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ffb4:	4b0a      	ldr	r3, [pc, #40]	; (800ffe0 <__swbuf_r+0x9c>)
 800ffb6:	429c      	cmp	r4, r3
 800ffb8:	d101      	bne.n	800ffbe <__swbuf_r+0x7a>
 800ffba:	68ac      	ldr	r4, [r5, #8]
 800ffbc:	e7cf      	b.n	800ff5e <__swbuf_r+0x1a>
 800ffbe:	4b09      	ldr	r3, [pc, #36]	; (800ffe4 <__swbuf_r+0xa0>)
 800ffc0:	429c      	cmp	r4, r3
 800ffc2:	bf08      	it	eq
 800ffc4:	68ec      	ldreq	r4, [r5, #12]
 800ffc6:	e7ca      	b.n	800ff5e <__swbuf_r+0x1a>
 800ffc8:	4621      	mov	r1, r4
 800ffca:	4628      	mov	r0, r5
 800ffcc:	f000 f80c 	bl	800ffe8 <__swsetup_r>
 800ffd0:	2800      	cmp	r0, #0
 800ffd2:	d0cb      	beq.n	800ff6c <__swbuf_r+0x28>
 800ffd4:	f04f 37ff 	mov.w	r7, #4294967295
 800ffd8:	e7ea      	b.n	800ffb0 <__swbuf_r+0x6c>
 800ffda:	bf00      	nop
 800ffdc:	08012c20 	.word	0x08012c20
 800ffe0:	08012c40 	.word	0x08012c40
 800ffe4:	08012c00 	.word	0x08012c00

0800ffe8 <__swsetup_r>:
 800ffe8:	4b32      	ldr	r3, [pc, #200]	; (80100b4 <__swsetup_r+0xcc>)
 800ffea:	b570      	push	{r4, r5, r6, lr}
 800ffec:	681d      	ldr	r5, [r3, #0]
 800ffee:	4606      	mov	r6, r0
 800fff0:	460c      	mov	r4, r1
 800fff2:	b125      	cbz	r5, 800fffe <__swsetup_r+0x16>
 800fff4:	69ab      	ldr	r3, [r5, #24]
 800fff6:	b913      	cbnz	r3, 800fffe <__swsetup_r+0x16>
 800fff8:	4628      	mov	r0, r5
 800fffa:	f7fe fee1 	bl	800edc0 <__sinit>
 800fffe:	4b2e      	ldr	r3, [pc, #184]	; (80100b8 <__swsetup_r+0xd0>)
 8010000:	429c      	cmp	r4, r3
 8010002:	d10f      	bne.n	8010024 <__swsetup_r+0x3c>
 8010004:	686c      	ldr	r4, [r5, #4]
 8010006:	89a3      	ldrh	r3, [r4, #12]
 8010008:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801000c:	0719      	lsls	r1, r3, #28
 801000e:	d42c      	bmi.n	801006a <__swsetup_r+0x82>
 8010010:	06dd      	lsls	r5, r3, #27
 8010012:	d411      	bmi.n	8010038 <__swsetup_r+0x50>
 8010014:	2309      	movs	r3, #9
 8010016:	6033      	str	r3, [r6, #0]
 8010018:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 801001c:	81a3      	strh	r3, [r4, #12]
 801001e:	f04f 30ff 	mov.w	r0, #4294967295
 8010022:	e03e      	b.n	80100a2 <__swsetup_r+0xba>
 8010024:	4b25      	ldr	r3, [pc, #148]	; (80100bc <__swsetup_r+0xd4>)
 8010026:	429c      	cmp	r4, r3
 8010028:	d101      	bne.n	801002e <__swsetup_r+0x46>
 801002a:	68ac      	ldr	r4, [r5, #8]
 801002c:	e7eb      	b.n	8010006 <__swsetup_r+0x1e>
 801002e:	4b24      	ldr	r3, [pc, #144]	; (80100c0 <__swsetup_r+0xd8>)
 8010030:	429c      	cmp	r4, r3
 8010032:	bf08      	it	eq
 8010034:	68ec      	ldreq	r4, [r5, #12]
 8010036:	e7e6      	b.n	8010006 <__swsetup_r+0x1e>
 8010038:	0758      	lsls	r0, r3, #29
 801003a:	d512      	bpl.n	8010062 <__swsetup_r+0x7a>
 801003c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801003e:	b141      	cbz	r1, 8010052 <__swsetup_r+0x6a>
 8010040:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8010044:	4299      	cmp	r1, r3
 8010046:	d002      	beq.n	801004e <__swsetup_r+0x66>
 8010048:	4630      	mov	r0, r6
 801004a:	f7ff fad3 	bl	800f5f4 <_free_r>
 801004e:	2300      	movs	r3, #0
 8010050:	6363      	str	r3, [r4, #52]	; 0x34
 8010052:	89a3      	ldrh	r3, [r4, #12]
 8010054:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8010058:	81a3      	strh	r3, [r4, #12]
 801005a:	2300      	movs	r3, #0
 801005c:	6063      	str	r3, [r4, #4]
 801005e:	6923      	ldr	r3, [r4, #16]
 8010060:	6023      	str	r3, [r4, #0]
 8010062:	89a3      	ldrh	r3, [r4, #12]
 8010064:	f043 0308 	orr.w	r3, r3, #8
 8010068:	81a3      	strh	r3, [r4, #12]
 801006a:	6923      	ldr	r3, [r4, #16]
 801006c:	b94b      	cbnz	r3, 8010082 <__swsetup_r+0x9a>
 801006e:	89a3      	ldrh	r3, [r4, #12]
 8010070:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8010074:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8010078:	d003      	beq.n	8010082 <__swsetup_r+0x9a>
 801007a:	4621      	mov	r1, r4
 801007c:	4630      	mov	r0, r6
 801007e:	f000 f84d 	bl	801011c <__smakebuf_r>
 8010082:	89a0      	ldrh	r0, [r4, #12]
 8010084:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8010088:	f010 0301 	ands.w	r3, r0, #1
 801008c:	d00a      	beq.n	80100a4 <__swsetup_r+0xbc>
 801008e:	2300      	movs	r3, #0
 8010090:	60a3      	str	r3, [r4, #8]
 8010092:	6963      	ldr	r3, [r4, #20]
 8010094:	425b      	negs	r3, r3
 8010096:	61a3      	str	r3, [r4, #24]
 8010098:	6923      	ldr	r3, [r4, #16]
 801009a:	b943      	cbnz	r3, 80100ae <__swsetup_r+0xc6>
 801009c:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80100a0:	d1ba      	bne.n	8010018 <__swsetup_r+0x30>
 80100a2:	bd70      	pop	{r4, r5, r6, pc}
 80100a4:	0781      	lsls	r1, r0, #30
 80100a6:	bf58      	it	pl
 80100a8:	6963      	ldrpl	r3, [r4, #20]
 80100aa:	60a3      	str	r3, [r4, #8]
 80100ac:	e7f4      	b.n	8010098 <__swsetup_r+0xb0>
 80100ae:	2000      	movs	r0, #0
 80100b0:	e7f7      	b.n	80100a2 <__swsetup_r+0xba>
 80100b2:	bf00      	nop
 80100b4:	2000002c 	.word	0x2000002c
 80100b8:	08012c20 	.word	0x08012c20
 80100bc:	08012c40 	.word	0x08012c40
 80100c0:	08012c00 	.word	0x08012c00

080100c4 <abort>:
 80100c4:	b508      	push	{r3, lr}
 80100c6:	2006      	movs	r0, #6
 80100c8:	f000 f8c0 	bl	801024c <raise>
 80100cc:	2001      	movs	r0, #1
 80100ce:	f7f0 fcb3 	bl	8000a38 <_exit>

080100d2 <__swhatbuf_r>:
 80100d2:	b570      	push	{r4, r5, r6, lr}
 80100d4:	460e      	mov	r6, r1
 80100d6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80100da:	2900      	cmp	r1, #0
 80100dc:	b096      	sub	sp, #88	; 0x58
 80100de:	4614      	mov	r4, r2
 80100e0:	461d      	mov	r5, r3
 80100e2:	da08      	bge.n	80100f6 <__swhatbuf_r+0x24>
 80100e4:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 80100e8:	2200      	movs	r2, #0
 80100ea:	602a      	str	r2, [r5, #0]
 80100ec:	061a      	lsls	r2, r3, #24
 80100ee:	d410      	bmi.n	8010112 <__swhatbuf_r+0x40>
 80100f0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80100f4:	e00e      	b.n	8010114 <__swhatbuf_r+0x42>
 80100f6:	466a      	mov	r2, sp
 80100f8:	f000 f8c4 	bl	8010284 <_fstat_r>
 80100fc:	2800      	cmp	r0, #0
 80100fe:	dbf1      	blt.n	80100e4 <__swhatbuf_r+0x12>
 8010100:	9a01      	ldr	r2, [sp, #4]
 8010102:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8010106:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 801010a:	425a      	negs	r2, r3
 801010c:	415a      	adcs	r2, r3
 801010e:	602a      	str	r2, [r5, #0]
 8010110:	e7ee      	b.n	80100f0 <__swhatbuf_r+0x1e>
 8010112:	2340      	movs	r3, #64	; 0x40
 8010114:	2000      	movs	r0, #0
 8010116:	6023      	str	r3, [r4, #0]
 8010118:	b016      	add	sp, #88	; 0x58
 801011a:	bd70      	pop	{r4, r5, r6, pc}

0801011c <__smakebuf_r>:
 801011c:	898b      	ldrh	r3, [r1, #12]
 801011e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8010120:	079d      	lsls	r5, r3, #30
 8010122:	4606      	mov	r6, r0
 8010124:	460c      	mov	r4, r1
 8010126:	d507      	bpl.n	8010138 <__smakebuf_r+0x1c>
 8010128:	f104 0347 	add.w	r3, r4, #71	; 0x47
 801012c:	6023      	str	r3, [r4, #0]
 801012e:	6123      	str	r3, [r4, #16]
 8010130:	2301      	movs	r3, #1
 8010132:	6163      	str	r3, [r4, #20]
 8010134:	b002      	add	sp, #8
 8010136:	bd70      	pop	{r4, r5, r6, pc}
 8010138:	ab01      	add	r3, sp, #4
 801013a:	466a      	mov	r2, sp
 801013c:	f7ff ffc9 	bl	80100d2 <__swhatbuf_r>
 8010140:	9900      	ldr	r1, [sp, #0]
 8010142:	4605      	mov	r5, r0
 8010144:	4630      	mov	r0, r6
 8010146:	f7fe ff61 	bl	800f00c <_malloc_r>
 801014a:	b948      	cbnz	r0, 8010160 <__smakebuf_r+0x44>
 801014c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8010150:	059a      	lsls	r2, r3, #22
 8010152:	d4ef      	bmi.n	8010134 <__smakebuf_r+0x18>
 8010154:	f023 0303 	bic.w	r3, r3, #3
 8010158:	f043 0302 	orr.w	r3, r3, #2
 801015c:	81a3      	strh	r3, [r4, #12]
 801015e:	e7e3      	b.n	8010128 <__smakebuf_r+0xc>
 8010160:	4b0d      	ldr	r3, [pc, #52]	; (8010198 <__smakebuf_r+0x7c>)
 8010162:	62b3      	str	r3, [r6, #40]	; 0x28
 8010164:	89a3      	ldrh	r3, [r4, #12]
 8010166:	6020      	str	r0, [r4, #0]
 8010168:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801016c:	81a3      	strh	r3, [r4, #12]
 801016e:	9b00      	ldr	r3, [sp, #0]
 8010170:	6163      	str	r3, [r4, #20]
 8010172:	9b01      	ldr	r3, [sp, #4]
 8010174:	6120      	str	r0, [r4, #16]
 8010176:	b15b      	cbz	r3, 8010190 <__smakebuf_r+0x74>
 8010178:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801017c:	4630      	mov	r0, r6
 801017e:	f000 f893 	bl	80102a8 <_isatty_r>
 8010182:	b128      	cbz	r0, 8010190 <__smakebuf_r+0x74>
 8010184:	89a3      	ldrh	r3, [r4, #12]
 8010186:	f023 0303 	bic.w	r3, r3, #3
 801018a:	f043 0301 	orr.w	r3, r3, #1
 801018e:	81a3      	strh	r3, [r4, #12]
 8010190:	89a0      	ldrh	r0, [r4, #12]
 8010192:	4305      	orrs	r5, r0
 8010194:	81a5      	strh	r5, [r4, #12]
 8010196:	e7cd      	b.n	8010134 <__smakebuf_r+0x18>
 8010198:	0800ed59 	.word	0x0800ed59

0801019c <_realloc_r>:
 801019c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80101a0:	4680      	mov	r8, r0
 80101a2:	4614      	mov	r4, r2
 80101a4:	460e      	mov	r6, r1
 80101a6:	b921      	cbnz	r1, 80101b2 <_realloc_r+0x16>
 80101a8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80101ac:	4611      	mov	r1, r2
 80101ae:	f7fe bf2d 	b.w	800f00c <_malloc_r>
 80101b2:	b92a      	cbnz	r2, 80101c0 <_realloc_r+0x24>
 80101b4:	f7ff fa1e 	bl	800f5f4 <_free_r>
 80101b8:	4625      	mov	r5, r4
 80101ba:	4628      	mov	r0, r5
 80101bc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80101c0:	f000 f882 	bl	80102c8 <_malloc_usable_size_r>
 80101c4:	4284      	cmp	r4, r0
 80101c6:	4607      	mov	r7, r0
 80101c8:	d802      	bhi.n	80101d0 <_realloc_r+0x34>
 80101ca:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80101ce:	d812      	bhi.n	80101f6 <_realloc_r+0x5a>
 80101d0:	4621      	mov	r1, r4
 80101d2:	4640      	mov	r0, r8
 80101d4:	f7fe ff1a 	bl	800f00c <_malloc_r>
 80101d8:	4605      	mov	r5, r0
 80101da:	2800      	cmp	r0, #0
 80101dc:	d0ed      	beq.n	80101ba <_realloc_r+0x1e>
 80101de:	42bc      	cmp	r4, r7
 80101e0:	4622      	mov	r2, r4
 80101e2:	4631      	mov	r1, r6
 80101e4:	bf28      	it	cs
 80101e6:	463a      	movcs	r2, r7
 80101e8:	f7fe febf 	bl	800ef6a <memcpy>
 80101ec:	4631      	mov	r1, r6
 80101ee:	4640      	mov	r0, r8
 80101f0:	f7ff fa00 	bl	800f5f4 <_free_r>
 80101f4:	e7e1      	b.n	80101ba <_realloc_r+0x1e>
 80101f6:	4635      	mov	r5, r6
 80101f8:	e7df      	b.n	80101ba <_realloc_r+0x1e>

080101fa <_raise_r>:
 80101fa:	291f      	cmp	r1, #31
 80101fc:	b538      	push	{r3, r4, r5, lr}
 80101fe:	4604      	mov	r4, r0
 8010200:	460d      	mov	r5, r1
 8010202:	d904      	bls.n	801020e <_raise_r+0x14>
 8010204:	2316      	movs	r3, #22
 8010206:	6003      	str	r3, [r0, #0]
 8010208:	f04f 30ff 	mov.w	r0, #4294967295
 801020c:	bd38      	pop	{r3, r4, r5, pc}
 801020e:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8010210:	b112      	cbz	r2, 8010218 <_raise_r+0x1e>
 8010212:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8010216:	b94b      	cbnz	r3, 801022c <_raise_r+0x32>
 8010218:	4620      	mov	r0, r4
 801021a:	f000 f831 	bl	8010280 <_getpid_r>
 801021e:	462a      	mov	r2, r5
 8010220:	4601      	mov	r1, r0
 8010222:	4620      	mov	r0, r4
 8010224:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8010228:	f000 b818 	b.w	801025c <_kill_r>
 801022c:	2b01      	cmp	r3, #1
 801022e:	d00a      	beq.n	8010246 <_raise_r+0x4c>
 8010230:	1c59      	adds	r1, r3, #1
 8010232:	d103      	bne.n	801023c <_raise_r+0x42>
 8010234:	2316      	movs	r3, #22
 8010236:	6003      	str	r3, [r0, #0]
 8010238:	2001      	movs	r0, #1
 801023a:	e7e7      	b.n	801020c <_raise_r+0x12>
 801023c:	2400      	movs	r4, #0
 801023e:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8010242:	4628      	mov	r0, r5
 8010244:	4798      	blx	r3
 8010246:	2000      	movs	r0, #0
 8010248:	e7e0      	b.n	801020c <_raise_r+0x12>
	...

0801024c <raise>:
 801024c:	4b02      	ldr	r3, [pc, #8]	; (8010258 <raise+0xc>)
 801024e:	4601      	mov	r1, r0
 8010250:	6818      	ldr	r0, [r3, #0]
 8010252:	f7ff bfd2 	b.w	80101fa <_raise_r>
 8010256:	bf00      	nop
 8010258:	2000002c 	.word	0x2000002c

0801025c <_kill_r>:
 801025c:	b538      	push	{r3, r4, r5, lr}
 801025e:	4d07      	ldr	r5, [pc, #28]	; (801027c <_kill_r+0x20>)
 8010260:	2300      	movs	r3, #0
 8010262:	4604      	mov	r4, r0
 8010264:	4608      	mov	r0, r1
 8010266:	4611      	mov	r1, r2
 8010268:	602b      	str	r3, [r5, #0]
 801026a:	f7f0 fbdd 	bl	8000a28 <_kill>
 801026e:	1c43      	adds	r3, r0, #1
 8010270:	d102      	bne.n	8010278 <_kill_r+0x1c>
 8010272:	682b      	ldr	r3, [r5, #0]
 8010274:	b103      	cbz	r3, 8010278 <_kill_r+0x1c>
 8010276:	6023      	str	r3, [r4, #0]
 8010278:	bd38      	pop	{r3, r4, r5, pc}
 801027a:	bf00      	nop
 801027c:	20010a7c 	.word	0x20010a7c

08010280 <_getpid_r>:
 8010280:	f7f0 bbd0 	b.w	8000a24 <_getpid>

08010284 <_fstat_r>:
 8010284:	b538      	push	{r3, r4, r5, lr}
 8010286:	4d07      	ldr	r5, [pc, #28]	; (80102a4 <_fstat_r+0x20>)
 8010288:	2300      	movs	r3, #0
 801028a:	4604      	mov	r4, r0
 801028c:	4608      	mov	r0, r1
 801028e:	4611      	mov	r1, r2
 8010290:	602b      	str	r3, [r5, #0]
 8010292:	f7f0 fbf4 	bl	8000a7e <_fstat>
 8010296:	1c43      	adds	r3, r0, #1
 8010298:	d102      	bne.n	80102a0 <_fstat_r+0x1c>
 801029a:	682b      	ldr	r3, [r5, #0]
 801029c:	b103      	cbz	r3, 80102a0 <_fstat_r+0x1c>
 801029e:	6023      	str	r3, [r4, #0]
 80102a0:	bd38      	pop	{r3, r4, r5, pc}
 80102a2:	bf00      	nop
 80102a4:	20010a7c 	.word	0x20010a7c

080102a8 <_isatty_r>:
 80102a8:	b538      	push	{r3, r4, r5, lr}
 80102aa:	4d06      	ldr	r5, [pc, #24]	; (80102c4 <_isatty_r+0x1c>)
 80102ac:	2300      	movs	r3, #0
 80102ae:	4604      	mov	r4, r0
 80102b0:	4608      	mov	r0, r1
 80102b2:	602b      	str	r3, [r5, #0]
 80102b4:	f7f0 fbe8 	bl	8000a88 <_isatty>
 80102b8:	1c43      	adds	r3, r0, #1
 80102ba:	d102      	bne.n	80102c2 <_isatty_r+0x1a>
 80102bc:	682b      	ldr	r3, [r5, #0]
 80102be:	b103      	cbz	r3, 80102c2 <_isatty_r+0x1a>
 80102c0:	6023      	str	r3, [r4, #0]
 80102c2:	bd38      	pop	{r3, r4, r5, pc}
 80102c4:	20010a7c 	.word	0x20010a7c

080102c8 <_malloc_usable_size_r>:
 80102c8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80102cc:	1f18      	subs	r0, r3, #4
 80102ce:	2b00      	cmp	r3, #0
 80102d0:	bfbc      	itt	lt
 80102d2:	580b      	ldrlt	r3, [r1, r0]
 80102d4:	18c0      	addlt	r0, r0, r3
 80102d6:	4770      	bx	lr

080102d8 <_init>:
 80102d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80102da:	bf00      	nop
 80102dc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80102de:	bc08      	pop	{r3}
 80102e0:	469e      	mov	lr, r3
 80102e2:	4770      	bx	lr

080102e4 <_fini>:
 80102e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80102e6:	bf00      	nop
 80102e8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80102ea:	bc08      	pop	{r3}
 80102ec:	469e      	mov	lr, r3
 80102ee:	4770      	bx	lr
