
ethernet-lwip-http.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000c83c  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00005ea0  0800c9ec  0800c9ec  0001c9ec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801288c  0801288c  0003009c  2**0
                  CONTENTS
  4 .ARM          00000008  0801288c  0801288c  0002288c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08012894  08012894  0003009c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08012894  08012894  00022894  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08012898  08012898  00022898  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000009c  20000000  0801289c  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0003009c  2**0
                  CONTENTS
 10 .bss          0000af34  2000009c  2000009c  0003009c  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  2000afd0  2000afd0  0003009c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0003009c  2**0
                  CONTENTS, READONLY
 13 .debug_info   00035bb5  00000000  00000000  000300cc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000743b  00000000  00000000  00065c81  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_loc    00024eb9  00000000  00000000  0006d0bc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00001ac8  00000000  00000000  00091f78  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_ranges 00002660  00000000  00000000  00093a40  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  00032473  00000000  00000000  000960a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   0003a706  00000000  00000000  000c8513  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000f66bf  00000000  00000000  00102c19  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .comment      00000050  00000000  00000000  001f92d8  2**0
                  CONTENTS, READONLY
 22 .debug_frame  00005928  00000000  00000000  001f9328  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	2000009c 	.word	0x2000009c
 80001cc:	00000000 	.word	0x00000000
 80001d0:	0800c9d4 	.word	0x0800c9d4

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	200000a0 	.word	0x200000a0
 80001ec:	0800c9d4 	.word	0x0800c9d4

080001f0 <strcmp>:
 80001f0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001f4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001f8:	2a01      	cmp	r2, #1
 80001fa:	bf28      	it	cs
 80001fc:	429a      	cmpcs	r2, r3
 80001fe:	d0f7      	beq.n	80001f0 <strcmp>
 8000200:	1ad0      	subs	r0, r2, r3
 8000202:	4770      	bx	lr

08000204 <strlen>:
 8000204:	4603      	mov	r3, r0
 8000206:	f813 2b01 	ldrb.w	r2, [r3], #1
 800020a:	2a00      	cmp	r2, #0
 800020c:	d1fb      	bne.n	8000206 <strlen+0x2>
 800020e:	1a18      	subs	r0, r3, r0
 8000210:	3801      	subs	r0, #1
 8000212:	4770      	bx	lr
	...

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_uldivmod>:
 80002c0:	b953      	cbnz	r3, 80002d8 <__aeabi_uldivmod+0x18>
 80002c2:	b94a      	cbnz	r2, 80002d8 <__aeabi_uldivmod+0x18>
 80002c4:	2900      	cmp	r1, #0
 80002c6:	bf08      	it	eq
 80002c8:	2800      	cmpeq	r0, #0
 80002ca:	bf1c      	itt	ne
 80002cc:	f04f 31ff 	movne.w	r1, #4294967295
 80002d0:	f04f 30ff 	movne.w	r0, #4294967295
 80002d4:	f000 b974 	b.w	80005c0 <__aeabi_idiv0>
 80002d8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002dc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002e0:	f000 f806 	bl	80002f0 <__udivmoddi4>
 80002e4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002e8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ec:	b004      	add	sp, #16
 80002ee:	4770      	bx	lr

080002f0 <__udivmoddi4>:
 80002f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002f4:	9d08      	ldr	r5, [sp, #32]
 80002f6:	4604      	mov	r4, r0
 80002f8:	468e      	mov	lr, r1
 80002fa:	2b00      	cmp	r3, #0
 80002fc:	d14d      	bne.n	800039a <__udivmoddi4+0xaa>
 80002fe:	428a      	cmp	r2, r1
 8000300:	4694      	mov	ip, r2
 8000302:	d969      	bls.n	80003d8 <__udivmoddi4+0xe8>
 8000304:	fab2 f282 	clz	r2, r2
 8000308:	b152      	cbz	r2, 8000320 <__udivmoddi4+0x30>
 800030a:	fa01 f302 	lsl.w	r3, r1, r2
 800030e:	f1c2 0120 	rsb	r1, r2, #32
 8000312:	fa20 f101 	lsr.w	r1, r0, r1
 8000316:	fa0c fc02 	lsl.w	ip, ip, r2
 800031a:	ea41 0e03 	orr.w	lr, r1, r3
 800031e:	4094      	lsls	r4, r2
 8000320:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000324:	0c21      	lsrs	r1, r4, #16
 8000326:	fbbe f6f8 	udiv	r6, lr, r8
 800032a:	fa1f f78c 	uxth.w	r7, ip
 800032e:	fb08 e316 	mls	r3, r8, r6, lr
 8000332:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000336:	fb06 f107 	mul.w	r1, r6, r7
 800033a:	4299      	cmp	r1, r3
 800033c:	d90a      	bls.n	8000354 <__udivmoddi4+0x64>
 800033e:	eb1c 0303 	adds.w	r3, ip, r3
 8000342:	f106 30ff 	add.w	r0, r6, #4294967295
 8000346:	f080 811f 	bcs.w	8000588 <__udivmoddi4+0x298>
 800034a:	4299      	cmp	r1, r3
 800034c:	f240 811c 	bls.w	8000588 <__udivmoddi4+0x298>
 8000350:	3e02      	subs	r6, #2
 8000352:	4463      	add	r3, ip
 8000354:	1a5b      	subs	r3, r3, r1
 8000356:	b2a4      	uxth	r4, r4
 8000358:	fbb3 f0f8 	udiv	r0, r3, r8
 800035c:	fb08 3310 	mls	r3, r8, r0, r3
 8000360:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000364:	fb00 f707 	mul.w	r7, r0, r7
 8000368:	42a7      	cmp	r7, r4
 800036a:	d90a      	bls.n	8000382 <__udivmoddi4+0x92>
 800036c:	eb1c 0404 	adds.w	r4, ip, r4
 8000370:	f100 33ff 	add.w	r3, r0, #4294967295
 8000374:	f080 810a 	bcs.w	800058c <__udivmoddi4+0x29c>
 8000378:	42a7      	cmp	r7, r4
 800037a:	f240 8107 	bls.w	800058c <__udivmoddi4+0x29c>
 800037e:	4464      	add	r4, ip
 8000380:	3802      	subs	r0, #2
 8000382:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000386:	1be4      	subs	r4, r4, r7
 8000388:	2600      	movs	r6, #0
 800038a:	b11d      	cbz	r5, 8000394 <__udivmoddi4+0xa4>
 800038c:	40d4      	lsrs	r4, r2
 800038e:	2300      	movs	r3, #0
 8000390:	e9c5 4300 	strd	r4, r3, [r5]
 8000394:	4631      	mov	r1, r6
 8000396:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800039a:	428b      	cmp	r3, r1
 800039c:	d909      	bls.n	80003b2 <__udivmoddi4+0xc2>
 800039e:	2d00      	cmp	r5, #0
 80003a0:	f000 80ef 	beq.w	8000582 <__udivmoddi4+0x292>
 80003a4:	2600      	movs	r6, #0
 80003a6:	e9c5 0100 	strd	r0, r1, [r5]
 80003aa:	4630      	mov	r0, r6
 80003ac:	4631      	mov	r1, r6
 80003ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003b2:	fab3 f683 	clz	r6, r3
 80003b6:	2e00      	cmp	r6, #0
 80003b8:	d14a      	bne.n	8000450 <__udivmoddi4+0x160>
 80003ba:	428b      	cmp	r3, r1
 80003bc:	d302      	bcc.n	80003c4 <__udivmoddi4+0xd4>
 80003be:	4282      	cmp	r2, r0
 80003c0:	f200 80f9 	bhi.w	80005b6 <__udivmoddi4+0x2c6>
 80003c4:	1a84      	subs	r4, r0, r2
 80003c6:	eb61 0303 	sbc.w	r3, r1, r3
 80003ca:	2001      	movs	r0, #1
 80003cc:	469e      	mov	lr, r3
 80003ce:	2d00      	cmp	r5, #0
 80003d0:	d0e0      	beq.n	8000394 <__udivmoddi4+0xa4>
 80003d2:	e9c5 4e00 	strd	r4, lr, [r5]
 80003d6:	e7dd      	b.n	8000394 <__udivmoddi4+0xa4>
 80003d8:	b902      	cbnz	r2, 80003dc <__udivmoddi4+0xec>
 80003da:	deff      	udf	#255	; 0xff
 80003dc:	fab2 f282 	clz	r2, r2
 80003e0:	2a00      	cmp	r2, #0
 80003e2:	f040 8092 	bne.w	800050a <__udivmoddi4+0x21a>
 80003e6:	eba1 010c 	sub.w	r1, r1, ip
 80003ea:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003ee:	fa1f fe8c 	uxth.w	lr, ip
 80003f2:	2601      	movs	r6, #1
 80003f4:	0c20      	lsrs	r0, r4, #16
 80003f6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003fa:	fb07 1113 	mls	r1, r7, r3, r1
 80003fe:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000402:	fb0e f003 	mul.w	r0, lr, r3
 8000406:	4288      	cmp	r0, r1
 8000408:	d908      	bls.n	800041c <__udivmoddi4+0x12c>
 800040a:	eb1c 0101 	adds.w	r1, ip, r1
 800040e:	f103 38ff 	add.w	r8, r3, #4294967295
 8000412:	d202      	bcs.n	800041a <__udivmoddi4+0x12a>
 8000414:	4288      	cmp	r0, r1
 8000416:	f200 80cb 	bhi.w	80005b0 <__udivmoddi4+0x2c0>
 800041a:	4643      	mov	r3, r8
 800041c:	1a09      	subs	r1, r1, r0
 800041e:	b2a4      	uxth	r4, r4
 8000420:	fbb1 f0f7 	udiv	r0, r1, r7
 8000424:	fb07 1110 	mls	r1, r7, r0, r1
 8000428:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800042c:	fb0e fe00 	mul.w	lr, lr, r0
 8000430:	45a6      	cmp	lr, r4
 8000432:	d908      	bls.n	8000446 <__udivmoddi4+0x156>
 8000434:	eb1c 0404 	adds.w	r4, ip, r4
 8000438:	f100 31ff 	add.w	r1, r0, #4294967295
 800043c:	d202      	bcs.n	8000444 <__udivmoddi4+0x154>
 800043e:	45a6      	cmp	lr, r4
 8000440:	f200 80bb 	bhi.w	80005ba <__udivmoddi4+0x2ca>
 8000444:	4608      	mov	r0, r1
 8000446:	eba4 040e 	sub.w	r4, r4, lr
 800044a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800044e:	e79c      	b.n	800038a <__udivmoddi4+0x9a>
 8000450:	f1c6 0720 	rsb	r7, r6, #32
 8000454:	40b3      	lsls	r3, r6
 8000456:	fa22 fc07 	lsr.w	ip, r2, r7
 800045a:	ea4c 0c03 	orr.w	ip, ip, r3
 800045e:	fa20 f407 	lsr.w	r4, r0, r7
 8000462:	fa01 f306 	lsl.w	r3, r1, r6
 8000466:	431c      	orrs	r4, r3
 8000468:	40f9      	lsrs	r1, r7
 800046a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800046e:	fa00 f306 	lsl.w	r3, r0, r6
 8000472:	fbb1 f8f9 	udiv	r8, r1, r9
 8000476:	0c20      	lsrs	r0, r4, #16
 8000478:	fa1f fe8c 	uxth.w	lr, ip
 800047c:	fb09 1118 	mls	r1, r9, r8, r1
 8000480:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000484:	fb08 f00e 	mul.w	r0, r8, lr
 8000488:	4288      	cmp	r0, r1
 800048a:	fa02 f206 	lsl.w	r2, r2, r6
 800048e:	d90b      	bls.n	80004a8 <__udivmoddi4+0x1b8>
 8000490:	eb1c 0101 	adds.w	r1, ip, r1
 8000494:	f108 3aff 	add.w	sl, r8, #4294967295
 8000498:	f080 8088 	bcs.w	80005ac <__udivmoddi4+0x2bc>
 800049c:	4288      	cmp	r0, r1
 800049e:	f240 8085 	bls.w	80005ac <__udivmoddi4+0x2bc>
 80004a2:	f1a8 0802 	sub.w	r8, r8, #2
 80004a6:	4461      	add	r1, ip
 80004a8:	1a09      	subs	r1, r1, r0
 80004aa:	b2a4      	uxth	r4, r4
 80004ac:	fbb1 f0f9 	udiv	r0, r1, r9
 80004b0:	fb09 1110 	mls	r1, r9, r0, r1
 80004b4:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80004b8:	fb00 fe0e 	mul.w	lr, r0, lr
 80004bc:	458e      	cmp	lr, r1
 80004be:	d908      	bls.n	80004d2 <__udivmoddi4+0x1e2>
 80004c0:	eb1c 0101 	adds.w	r1, ip, r1
 80004c4:	f100 34ff 	add.w	r4, r0, #4294967295
 80004c8:	d26c      	bcs.n	80005a4 <__udivmoddi4+0x2b4>
 80004ca:	458e      	cmp	lr, r1
 80004cc:	d96a      	bls.n	80005a4 <__udivmoddi4+0x2b4>
 80004ce:	3802      	subs	r0, #2
 80004d0:	4461      	add	r1, ip
 80004d2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004d6:	fba0 9402 	umull	r9, r4, r0, r2
 80004da:	eba1 010e 	sub.w	r1, r1, lr
 80004de:	42a1      	cmp	r1, r4
 80004e0:	46c8      	mov	r8, r9
 80004e2:	46a6      	mov	lr, r4
 80004e4:	d356      	bcc.n	8000594 <__udivmoddi4+0x2a4>
 80004e6:	d053      	beq.n	8000590 <__udivmoddi4+0x2a0>
 80004e8:	b15d      	cbz	r5, 8000502 <__udivmoddi4+0x212>
 80004ea:	ebb3 0208 	subs.w	r2, r3, r8
 80004ee:	eb61 010e 	sbc.w	r1, r1, lr
 80004f2:	fa01 f707 	lsl.w	r7, r1, r7
 80004f6:	fa22 f306 	lsr.w	r3, r2, r6
 80004fa:	40f1      	lsrs	r1, r6
 80004fc:	431f      	orrs	r7, r3
 80004fe:	e9c5 7100 	strd	r7, r1, [r5]
 8000502:	2600      	movs	r6, #0
 8000504:	4631      	mov	r1, r6
 8000506:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800050a:	f1c2 0320 	rsb	r3, r2, #32
 800050e:	40d8      	lsrs	r0, r3
 8000510:	fa0c fc02 	lsl.w	ip, ip, r2
 8000514:	fa21 f303 	lsr.w	r3, r1, r3
 8000518:	4091      	lsls	r1, r2
 800051a:	4301      	orrs	r1, r0
 800051c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000520:	fa1f fe8c 	uxth.w	lr, ip
 8000524:	fbb3 f0f7 	udiv	r0, r3, r7
 8000528:	fb07 3610 	mls	r6, r7, r0, r3
 800052c:	0c0b      	lsrs	r3, r1, #16
 800052e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000532:	fb00 f60e 	mul.w	r6, r0, lr
 8000536:	429e      	cmp	r6, r3
 8000538:	fa04 f402 	lsl.w	r4, r4, r2
 800053c:	d908      	bls.n	8000550 <__udivmoddi4+0x260>
 800053e:	eb1c 0303 	adds.w	r3, ip, r3
 8000542:	f100 38ff 	add.w	r8, r0, #4294967295
 8000546:	d22f      	bcs.n	80005a8 <__udivmoddi4+0x2b8>
 8000548:	429e      	cmp	r6, r3
 800054a:	d92d      	bls.n	80005a8 <__udivmoddi4+0x2b8>
 800054c:	3802      	subs	r0, #2
 800054e:	4463      	add	r3, ip
 8000550:	1b9b      	subs	r3, r3, r6
 8000552:	b289      	uxth	r1, r1
 8000554:	fbb3 f6f7 	udiv	r6, r3, r7
 8000558:	fb07 3316 	mls	r3, r7, r6, r3
 800055c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000560:	fb06 f30e 	mul.w	r3, r6, lr
 8000564:	428b      	cmp	r3, r1
 8000566:	d908      	bls.n	800057a <__udivmoddi4+0x28a>
 8000568:	eb1c 0101 	adds.w	r1, ip, r1
 800056c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000570:	d216      	bcs.n	80005a0 <__udivmoddi4+0x2b0>
 8000572:	428b      	cmp	r3, r1
 8000574:	d914      	bls.n	80005a0 <__udivmoddi4+0x2b0>
 8000576:	3e02      	subs	r6, #2
 8000578:	4461      	add	r1, ip
 800057a:	1ac9      	subs	r1, r1, r3
 800057c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000580:	e738      	b.n	80003f4 <__udivmoddi4+0x104>
 8000582:	462e      	mov	r6, r5
 8000584:	4628      	mov	r0, r5
 8000586:	e705      	b.n	8000394 <__udivmoddi4+0xa4>
 8000588:	4606      	mov	r6, r0
 800058a:	e6e3      	b.n	8000354 <__udivmoddi4+0x64>
 800058c:	4618      	mov	r0, r3
 800058e:	e6f8      	b.n	8000382 <__udivmoddi4+0x92>
 8000590:	454b      	cmp	r3, r9
 8000592:	d2a9      	bcs.n	80004e8 <__udivmoddi4+0x1f8>
 8000594:	ebb9 0802 	subs.w	r8, r9, r2
 8000598:	eb64 0e0c 	sbc.w	lr, r4, ip
 800059c:	3801      	subs	r0, #1
 800059e:	e7a3      	b.n	80004e8 <__udivmoddi4+0x1f8>
 80005a0:	4646      	mov	r6, r8
 80005a2:	e7ea      	b.n	800057a <__udivmoddi4+0x28a>
 80005a4:	4620      	mov	r0, r4
 80005a6:	e794      	b.n	80004d2 <__udivmoddi4+0x1e2>
 80005a8:	4640      	mov	r0, r8
 80005aa:	e7d1      	b.n	8000550 <__udivmoddi4+0x260>
 80005ac:	46d0      	mov	r8, sl
 80005ae:	e77b      	b.n	80004a8 <__udivmoddi4+0x1b8>
 80005b0:	3b02      	subs	r3, #2
 80005b2:	4461      	add	r1, ip
 80005b4:	e732      	b.n	800041c <__udivmoddi4+0x12c>
 80005b6:	4630      	mov	r0, r6
 80005b8:	e709      	b.n	80003ce <__udivmoddi4+0xde>
 80005ba:	4464      	add	r4, ip
 80005bc:	3802      	subs	r0, #2
 80005be:	e742      	b.n	8000446 <__udivmoddi4+0x156>

080005c0 <__aeabi_idiv0>:
 80005c0:	4770      	bx	lr
 80005c2:	bf00      	nop

080005c4 <ssi_handler>:
char const** TAGS=TAGCHAR;

extern UART_HandleTypeDef huart3;

uint16_t ssi_handler (int iIndex, char *pcInsert, int iInsertLen)
{
 80005c4:	b510      	push	{r4, lr}
 80005c6:	460c      	mov	r4, r1
	switch (iIndex) {
 80005c8:	2801      	cmp	r0, #1
 80005ca:	d011      	beq.n	80005f0 <ssi_handler+0x2c>
 80005cc:	2802      	cmp	r0, #2
 80005ce:	d01c      	beq.n	800060a <ssi_handler+0x46>
 80005d0:	b108      	cbz	r0, 80005d6 <ssi_handler+0x12>
 80005d2:	2000      	movs	r0, #0
		default :
			break;
	}

	return 0;
}
 80005d4:	bd10      	pop	{r4, pc}
			indx+=1;
 80005d6:	4b13      	ldr	r3, [pc, #76]	; (8000624 <ssi_handler+0x60>)
 80005d8:	681a      	ldr	r2, [r3, #0]
 80005da:	3201      	adds	r2, #1
 80005dc:	601a      	str	r2, [r3, #0]
			sprintf(pcInsert, "%d", indx);
 80005de:	4912      	ldr	r1, [pc, #72]	; (8000628 <ssi_handler+0x64>)
 80005e0:	4620      	mov	r0, r4
 80005e2:	f00a ff7f 	bl	800b4e4 <siprintf>
			return strlen(pcInsert);
 80005e6:	4620      	mov	r0, r4
 80005e8:	f7ff fe0c 	bl	8000204 <strlen>
 80005ec:	b280      	uxth	r0, r0
 80005ee:	e7f1      	b.n	80005d4 <ssi_handler+0x10>
			indx+=1;
 80005f0:	4b0c      	ldr	r3, [pc, #48]	; (8000624 <ssi_handler+0x60>)
 80005f2:	681a      	ldr	r2, [r3, #0]
 80005f4:	3201      	adds	r2, #1
 80005f6:	601a      	str	r2, [r3, #0]
			sprintf(pcInsert, "%d", indx);
 80005f8:	490b      	ldr	r1, [pc, #44]	; (8000628 <ssi_handler+0x64>)
 80005fa:	4620      	mov	r0, r4
 80005fc:	f00a ff72 	bl	800b4e4 <siprintf>
			return strlen(pcInsert);
 8000600:	4620      	mov	r0, r4
 8000602:	f7ff fdff 	bl	8000204 <strlen>
 8000606:	b280      	uxth	r0, r0
 8000608:	e7e4      	b.n	80005d4 <ssi_handler+0x10>
			indx+=1;
 800060a:	4b06      	ldr	r3, [pc, #24]	; (8000624 <ssi_handler+0x60>)
 800060c:	681a      	ldr	r2, [r3, #0]
 800060e:	3201      	adds	r2, #1
 8000610:	601a      	str	r2, [r3, #0]
			sprintf(pcInsert, "%d", indx);
 8000612:	4905      	ldr	r1, [pc, #20]	; (8000628 <ssi_handler+0x64>)
 8000614:	4620      	mov	r0, r4
 8000616:	f00a ff65 	bl	800b4e4 <siprintf>
			return strlen(pcInsert);
 800061a:	4620      	mov	r0, r4
 800061c:	f7ff fdf2 	bl	8000204 <strlen>
 8000620:	b280      	uxth	r0, r0
 8000622:	e7d7      	b.n	80005d4 <ssi_handler+0x10>
 8000624:	200000f0 	.word	0x200000f0
 8000628:	0800c9ec 	.word	0x0800c9ec

0800062c <CGIForm_Handler>:
tCGI CGI_TAB[3];


const char *CGIForm_Handler(int iIndex, int iNumParams, char *pcParam[], char *pcValue[])
{
	if (iIndex == 0)
 800062c:	bbb8      	cbnz	r0, 800069e <CGIForm_Handler+0x72>
	{
		for (int i=0; i<iNumParams; i++)
 800062e:	2900      	cmp	r1, #0
 8000630:	dd35      	ble.n	800069e <CGIForm_Handler+0x72>
{
 8000632:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000636:	1f14      	subs	r4, r2, #4
 8000638:	461d      	mov	r5, r3
 800063a:	eb04 0781 	add.w	r7, r4, r1, lsl #2
		{
			if (strcmp(pcParam[i], "fname") == 0)  // if the fname string is found
 800063e:	f8df 906c 	ldr.w	r9, [pc, #108]	; 80006ac <CGIForm_Handler+0x80>
			{
				memset(name, '\0', 30);
				strcpy(name, pcValue[i]);
			}

			else if (strcmp(pcParam[i], "lname") == 0)  // if the fname string is found
 8000642:	f8df a06c 	ldr.w	sl, [pc, #108]	; 80006b0 <CGIForm_Handler+0x84>
			{
				strcat(name, " ");
 8000646:	f8df 806c 	ldr.w	r8, [pc, #108]	; 80006b4 <CGIForm_Handler+0x88>
 800064a:	e00b      	b.n	8000664 <CGIForm_Handler+0x38>
				memset(name, '\0', 30);
 800064c:	221e      	movs	r2, #30
 800064e:	2100      	movs	r1, #0
 8000650:	4640      	mov	r0, r8
 8000652:	f00a fee9 	bl	800b428 <memset>
				strcpy(name, pcValue[i]);
 8000656:	6829      	ldr	r1, [r5, #0]
 8000658:	4640      	mov	r0, r8
 800065a:	f00a ff7f 	bl	800b55c <strcpy>
		for (int i=0; i<iNumParams; i++)
 800065e:	3504      	adds	r5, #4
 8000660:	42bc      	cmp	r4, r7
 8000662:	d019      	beq.n	8000698 <CGIForm_Handler+0x6c>
			if (strcmp(pcParam[i], "fname") == 0)  // if the fname string is found
 8000664:	f854 6f04 	ldr.w	r6, [r4, #4]!
 8000668:	4649      	mov	r1, r9
 800066a:	4630      	mov	r0, r6
 800066c:	f7ff fdc0 	bl	80001f0 <strcmp>
 8000670:	2800      	cmp	r0, #0
 8000672:	d0eb      	beq.n	800064c <CGIForm_Handler+0x20>
			else if (strcmp(pcParam[i], "lname") == 0)  // if the fname string is found
 8000674:	4651      	mov	r1, sl
 8000676:	4630      	mov	r0, r6
 8000678:	f7ff fdba 	bl	80001f0 <strcmp>
 800067c:	2800      	cmp	r0, #0
 800067e:	d1ee      	bne.n	800065e <CGIForm_Handler+0x32>
				strcat(name, " ");
 8000680:	4640      	mov	r0, r8
 8000682:	f7ff fdbf 	bl	8000204 <strlen>
 8000686:	4b07      	ldr	r3, [pc, #28]	; (80006a4 <CGIForm_Handler+0x78>)
 8000688:	881b      	ldrh	r3, [r3, #0]
 800068a:	f828 3000 	strh.w	r3, [r8, r0]
				strcat(name, pcValue[i]);
 800068e:	6829      	ldr	r1, [r5, #0]
 8000690:	4640      	mov	r0, r8
 8000692:	f00a ff47 	bl	800b524 <strcat>
 8000696:	e7e2      	b.n	800065e <CGIForm_Handler+0x32>
			}
		}
	}

	return "/cgiform.html";
}
 8000698:	4803      	ldr	r0, [pc, #12]	; (80006a8 <CGIForm_Handler+0x7c>)
 800069a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800069e:	4802      	ldr	r0, [pc, #8]	; (80006a8 <CGIForm_Handler+0x7c>)
 80006a0:	4770      	bx	lr
 80006a2:	bf00      	nop
 80006a4:	0800ca00 	.word	0x0800ca00
 80006a8:	0800ca04 	.word	0x0800ca04
 80006ac:	0800c9f0 	.word	0x0800c9f0
 80006b0:	0800c9f8 	.word	0x0800c9f8
 80006b4:	200000f4 	.word	0x200000f4

080006b8 <CGILED_Handler>:


const char *CGILED_Handler(int iIndex, int iNumParams, char *pcParam[], char *pcValue[])
{
	if (iIndex == 1)
 80006b8:	2801      	cmp	r0, #1
 80006ba:	d001      	beq.n	80006c0 <CGILED_Handler+0x8>
			}
		}
	}

	return "/cgiled.html";
}
 80006bc:	481b      	ldr	r0, [pc, #108]	; (800072c <CGILED_Handler+0x74>)
 80006be:	4770      	bx	lr
{
 80006c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80006c4:	460f      	mov	r7, r1
		for (int i=0; i<iNumParams; i++)
 80006c6:	2900      	cmp	r1, #0
 80006c8:	dd2d      	ble.n	8000726 <CGILED_Handler+0x6e>
 80006ca:	1f14      	subs	r4, r2, #4
 80006cc:	2600      	movs	r6, #0
			if (!(strcmp(pcParam[i], "led1")))
 80006ce:	f8df 8064 	ldr.w	r8, [pc, #100]	; 8000734 <CGILED_Handler+0x7c>
			else if (!(strcmp(pcParam[i], "led2")))
 80006d2:	f8df a064 	ldr.w	sl, [pc, #100]	; 8000738 <CGILED_Handler+0x80>
				HAL_GPIO_TogglePin(LD3_GPIO_Port, LD3_Pin);
 80006d6:	f8df 9064 	ldr.w	r9, [pc, #100]	; 800073c <CGILED_Handler+0x84>
 80006da:	e006      	b.n	80006ea <CGILED_Handler+0x32>
				HAL_GPIO_TogglePin(LD1_GPIO_Port, LD1_Pin);
 80006dc:	2101      	movs	r1, #1
 80006de:	4648      	mov	r0, r9
 80006e0:	f001 fc38 	bl	8001f54 <HAL_GPIO_TogglePin>
		for (int i=0; i<iNumParams; i++)
 80006e4:	3601      	adds	r6, #1
 80006e6:	42b7      	cmp	r7, r6
 80006e8:	d01d      	beq.n	8000726 <CGILED_Handler+0x6e>
			if (!(strcmp(pcParam[i], "led1")))
 80006ea:	f854 5f04 	ldr.w	r5, [r4, #4]!
 80006ee:	4641      	mov	r1, r8
 80006f0:	4628      	mov	r0, r5
 80006f2:	f7ff fd7d 	bl	80001f0 <strcmp>
 80006f6:	2800      	cmp	r0, #0
 80006f8:	d0f0      	beq.n	80006dc <CGILED_Handler+0x24>
			else if (!(strcmp(pcParam[i], "led2")))
 80006fa:	4651      	mov	r1, sl
 80006fc:	4628      	mov	r0, r5
 80006fe:	f7ff fd77 	bl	80001f0 <strcmp>
 8000702:	b158      	cbz	r0, 800071c <CGILED_Handler+0x64>
			else if (!(strcmp(pcParam[i], "led3")))
 8000704:	490a      	ldr	r1, [pc, #40]	; (8000730 <CGILED_Handler+0x78>)
 8000706:	4628      	mov	r0, r5
 8000708:	f7ff fd72 	bl	80001f0 <strcmp>
 800070c:	2800      	cmp	r0, #0
 800070e:	d1e9      	bne.n	80006e4 <CGILED_Handler+0x2c>
				HAL_GPIO_TogglePin(LD3_GPIO_Port, LD3_Pin);
 8000710:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000714:	4648      	mov	r0, r9
 8000716:	f001 fc1d 	bl	8001f54 <HAL_GPIO_TogglePin>
 800071a:	e7e3      	b.n	80006e4 <CGILED_Handler+0x2c>
				HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 800071c:	2180      	movs	r1, #128	; 0x80
 800071e:	4648      	mov	r0, r9
 8000720:	f001 fc18 	bl	8001f54 <HAL_GPIO_TogglePin>
 8000724:	e7de      	b.n	80006e4 <CGILED_Handler+0x2c>
}
 8000726:	4801      	ldr	r0, [pc, #4]	; (800072c <CGILED_Handler+0x74>)
 8000728:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800072c:	0800ca2c 	.word	0x0800ca2c
 8000730:	0800ca24 	.word	0x0800ca24
 8000734:	0800ca14 	.word	0x0800ca14
 8000738:	0800ca1c 	.word	0x0800ca1c
 800073c:	40020400 	.word	0x40020400

08000740 <CGIUART_Handler>:

const char *CGIUART_Handler(int iIndex, int iNumParams, char *pcParam[], char *pcValue[])
{
 8000740:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000744:	4688      	mov	r8, r1
	int baud,parity,data,stop;

	huart3.Instance = USART3;
 8000746:	4970      	ldr	r1, [pc, #448]	; (8000908 <CGIUART_Handler+0x1c8>)
 8000748:	4c70      	ldr	r4, [pc, #448]	; (800090c <CGIUART_Handler+0x1cc>)
 800074a:	600c      	str	r4, [r1, #0]
	huart3.Init.Mode = UART_MODE_TX_RX;
 800074c:	240c      	movs	r4, #12
 800074e:	614c      	str	r4, [r1, #20]
	huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000750:	2400      	movs	r4, #0
 8000752:	61cc      	str	r4, [r1, #28]

	if (iIndex == 2)
 8000754:	2802      	cmp	r0, #2
 8000756:	d002      	beq.n	800075e <CGIUART_Handler+0x1e>
			 }
		}
	}

	return "/cgiuart.html";
}
 8000758:	486d      	ldr	r0, [pc, #436]	; (8000910 <CGIUART_Handler+0x1d0>)
 800075a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
		for (int i=0; i<iNumParams; i++)
 800075e:	45a0      	cmp	r8, r4
 8000760:	ddfa      	ble.n	8000758 <CGIUART_Handler+0x18>
 8000762:	1f16      	subs	r6, r2, #4
 8000764:	461c      	mov	r4, r3
 8000766:	2700      	movs	r7, #0
			if (!(strcmp(pcParam[i], "baud")))
 8000768:	f8df a1cc 	ldr.w	sl, [pc, #460]	; 8000938 <CGIUART_Handler+0x1f8>
			else if (!(strcmp(pcParam[i], "parity")))
 800076c:	f8df b1cc 	ldr.w	fp, [pc, #460]	; 800093c <CGIUART_Handler+0x1fc>
				HAL_UART_Transmit(&huart3, buff, strlen(buff), 3000);
 8000770:	4689      	mov	r9, r1
 8000772:	e018      	b.n	80007a6 <CGIUART_Handler+0x66>
				memset(buff, '\0', 30);
 8000774:	4d67      	ldr	r5, [pc, #412]	; (8000914 <CGIUART_Handler+0x1d4>)
 8000776:	221e      	movs	r2, #30
 8000778:	2100      	movs	r1, #0
 800077a:	4628      	mov	r0, r5
 800077c:	f00a fe54 	bl	800b428 <memset>
				strcpy(buff, pcValue[i]);
 8000780:	6821      	ldr	r1, [r4, #0]
 8000782:	4628      	mov	r0, r5
 8000784:	f00a feea 	bl	800b55c <strcpy>
				baud = atoi(buff);
 8000788:	4628      	mov	r0, r5
 800078a:	f00a fded 	bl	800b368 <atoi>
				huart3.Init.BaudRate = baud;
 800078e:	f8c9 0004 	str.w	r0, [r9, #4]
			 if (HAL_UART_Init(&huart3) != HAL_OK)
 8000792:	4648      	mov	r0, r9
 8000794:	f002 fa5a 	bl	8002c4c <HAL_UART_Init>
 8000798:	2800      	cmp	r0, #0
 800079a:	f040 80b1 	bne.w	8000900 <CGIUART_Handler+0x1c0>
		for (int i=0; i<iNumParams; i++)
 800079e:	3701      	adds	r7, #1
 80007a0:	3404      	adds	r4, #4
 80007a2:	45b8      	cmp	r8, r7
 80007a4:	d0d8      	beq.n	8000758 <CGIUART_Handler+0x18>
			if (!(strcmp(pcParam[i], "baud")))
 80007a6:	f856 5f04 	ldr.w	r5, [r6, #4]!
 80007aa:	4651      	mov	r1, sl
 80007ac:	4628      	mov	r0, r5
 80007ae:	f7ff fd1f 	bl	80001f0 <strcmp>
 80007b2:	2800      	cmp	r0, #0
 80007b4:	d0de      	beq.n	8000774 <CGIUART_Handler+0x34>
			else if (!(strcmp(pcParam[i], "parity")))
 80007b6:	4659      	mov	r1, fp
 80007b8:	4628      	mov	r0, r5
 80007ba:	f7ff fd19 	bl	80001f0 <strcmp>
 80007be:	b360      	cbz	r0, 800081a <CGIUART_Handler+0xda>
			else if (!(strcmp(pcParam[i], "data")))
 80007c0:	4955      	ldr	r1, [pc, #340]	; (8000918 <CGIUART_Handler+0x1d8>)
 80007c2:	4628      	mov	r0, r5
 80007c4:	f7ff fd14 	bl	80001f0 <strcmp>
 80007c8:	2800      	cmp	r0, #0
 80007ca:	d04e      	beq.n	800086a <CGIUART_Handler+0x12a>
			else if (!(strcmp(pcParam[i], "stop")))
 80007cc:	4953      	ldr	r1, [pc, #332]	; (800091c <CGIUART_Handler+0x1dc>)
 80007ce:	4628      	mov	r0, r5
 80007d0:	f7ff fd0e 	bl	80001f0 <strcmp>
 80007d4:	2800      	cmp	r0, #0
 80007d6:	d059      	beq.n	800088c <CGIUART_Handler+0x14c>
			else if (!(strcmp(pcParam[i], "hardware")))
 80007d8:	4951      	ldr	r1, [pc, #324]	; (8000920 <CGIUART_Handler+0x1e0>)
 80007da:	4628      	mov	r0, r5
 80007dc:	f7ff fd08 	bl	80001f0 <strcmp>
 80007e0:	2800      	cmp	r0, #0
 80007e2:	d06e      	beq.n	80008c2 <CGIUART_Handler+0x182>
			else if (!(strcmp(pcParam[i], "send")))
 80007e4:	494f      	ldr	r1, [pc, #316]	; (8000924 <CGIUART_Handler+0x1e4>)
 80007e6:	4628      	mov	r0, r5
 80007e8:	f7ff fd02 	bl	80001f0 <strcmp>
 80007ec:	2800      	cmp	r0, #0
 80007ee:	d1d0      	bne.n	8000792 <CGIUART_Handler+0x52>
				memset(buff, '\0', 30);
 80007f0:	4d48      	ldr	r5, [pc, #288]	; (8000914 <CGIUART_Handler+0x1d4>)
 80007f2:	221e      	movs	r2, #30
 80007f4:	2100      	movs	r1, #0
 80007f6:	4628      	mov	r0, r5
 80007f8:	f00a fe16 	bl	800b428 <memset>
				strcpy(buff, pcValue[i]);
 80007fc:	6821      	ldr	r1, [r4, #0]
 80007fe:	4628      	mov	r0, r5
 8000800:	f00a feac 	bl	800b55c <strcpy>
				HAL_UART_Transmit(&huart3, buff, strlen(buff), 3000);
 8000804:	4628      	mov	r0, r5
 8000806:	f7ff fcfd 	bl	8000204 <strlen>
 800080a:	f640 33b8 	movw	r3, #3000	; 0xbb8
 800080e:	b282      	uxth	r2, r0
 8000810:	4629      	mov	r1, r5
 8000812:	4648      	mov	r0, r9
 8000814:	f002 fa49 	bl	8002caa <HAL_UART_Transmit>
 8000818:	e7bb      	b.n	8000792 <CGIUART_Handler+0x52>
				memset(buff, '\0', 30);
 800081a:	4d3e      	ldr	r5, [pc, #248]	; (8000914 <CGIUART_Handler+0x1d4>)
 800081c:	221e      	movs	r2, #30
 800081e:	2100      	movs	r1, #0
 8000820:	4628      	mov	r0, r5
 8000822:	f00a fe01 	bl	800b428 <memset>
				strcpy(buff, pcValue[i]);
 8000826:	6821      	ldr	r1, [r4, #0]
 8000828:	4628      	mov	r0, r5
 800082a:	f00a fe97 	bl	800b55c <strcpy>
				if (!(strcmp(buff, "None")))
 800082e:	493e      	ldr	r1, [pc, #248]	; (8000928 <CGIUART_Handler+0x1e8>)
 8000830:	4628      	mov	r0, r5
 8000832:	f7ff fcdd 	bl	80001f0 <strcmp>
 8000836:	b918      	cbnz	r0, 8000840 <CGIUART_Handler+0x100>
					huart3.Init.Parity = UART_PARITY_NONE;
 8000838:	2300      	movs	r3, #0
 800083a:	f8c9 3010 	str.w	r3, [r9, #16]
 800083e:	e7a8      	b.n	8000792 <CGIUART_Handler+0x52>
				else  if (!(strcmp(buff, "Odd")))
 8000840:	493a      	ldr	r1, [pc, #232]	; (800092c <CGIUART_Handler+0x1ec>)
 8000842:	4834      	ldr	r0, [pc, #208]	; (8000914 <CGIUART_Handler+0x1d4>)
 8000844:	f7ff fcd4 	bl	80001f0 <strcmp>
 8000848:	b920      	cbnz	r0, 8000854 <CGIUART_Handler+0x114>
					huart3.Init.Parity = UART_PARITY_ODD;
 800084a:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 800084e:	f8c9 3010 	str.w	r3, [r9, #16]
 8000852:	e79e      	b.n	8000792 <CGIUART_Handler+0x52>
				else  if (!(strcmp(buff, "Even")))
 8000854:	4936      	ldr	r1, [pc, #216]	; (8000930 <CGIUART_Handler+0x1f0>)
 8000856:	482f      	ldr	r0, [pc, #188]	; (8000914 <CGIUART_Handler+0x1d4>)
 8000858:	f7ff fcca 	bl	80001f0 <strcmp>
 800085c:	2800      	cmp	r0, #0
 800085e:	d198      	bne.n	8000792 <CGIUART_Handler+0x52>
					huart3.Init.Parity = UART_PARITY_EVEN;
 8000860:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000864:	f8c9 3010 	str.w	r3, [r9, #16]
 8000868:	e793      	b.n	8000792 <CGIUART_Handler+0x52>
				memset(buff, '\0', 30);
 800086a:	4d2a      	ldr	r5, [pc, #168]	; (8000914 <CGIUART_Handler+0x1d4>)
 800086c:	221e      	movs	r2, #30
 800086e:	2100      	movs	r1, #0
 8000870:	4628      	mov	r0, r5
 8000872:	f00a fdd9 	bl	800b428 <memset>
				strcpy(buff, pcValue[i]);
 8000876:	6821      	ldr	r1, [r4, #0]
 8000878:	4628      	mov	r0, r5
 800087a:	f00a fe6f 	bl	800b55c <strcpy>
				data = atoi(buff);
 800087e:	4628      	mov	r0, r5
 8000880:	f00a fd72 	bl	800b368 <atoi>
					 huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000884:	2300      	movs	r3, #0
 8000886:	f8c9 3008 	str.w	r3, [r9, #8]
 800088a:	e782      	b.n	8000792 <CGIUART_Handler+0x52>
				memset(buff, '\0', 30);
 800088c:	4d21      	ldr	r5, [pc, #132]	; (8000914 <CGIUART_Handler+0x1d4>)
 800088e:	221e      	movs	r2, #30
 8000890:	2100      	movs	r1, #0
 8000892:	4628      	mov	r0, r5
 8000894:	f00a fdc8 	bl	800b428 <memset>
				strcpy(buff, pcValue[i]);
 8000898:	6821      	ldr	r1, [r4, #0]
 800089a:	4628      	mov	r0, r5
 800089c:	f00a fe5e 	bl	800b55c <strcpy>
				stop = atoi(buff);
 80008a0:	4628      	mov	r0, r5
 80008a2:	f00a fd61 	bl	800b368 <atoi>
				if(stop == 1)
 80008a6:	2801      	cmp	r0, #1
 80008a8:	d007      	beq.n	80008ba <CGIUART_Handler+0x17a>
				else if (stop == 2)
 80008aa:	2802      	cmp	r0, #2
 80008ac:	f47f af71 	bne.w	8000792 <CGIUART_Handler+0x52>
					huart3.Init.StopBits = UART_STOPBITS_2;
 80008b0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80008b4:	f8c9 300c 	str.w	r3, [r9, #12]
 80008b8:	e76b      	b.n	8000792 <CGIUART_Handler+0x52>
					huart3.Init.StopBits = UART_STOPBITS_1;
 80008ba:	2300      	movs	r3, #0
 80008bc:	f8c9 300c 	str.w	r3, [r9, #12]
 80008c0:	e767      	b.n	8000792 <CGIUART_Handler+0x52>
				memset(buff, '\0', 30);
 80008c2:	4d14      	ldr	r5, [pc, #80]	; (8000914 <CGIUART_Handler+0x1d4>)
 80008c4:	221e      	movs	r2, #30
 80008c6:	2100      	movs	r1, #0
 80008c8:	4628      	mov	r0, r5
 80008ca:	f00a fdad 	bl	800b428 <memset>
				strcpy(buff, pcValue[i]);
 80008ce:	6821      	ldr	r1, [r4, #0]
 80008d0:	4628      	mov	r0, r5
 80008d2:	f00a fe43 	bl	800b55c <strcpy>
				if (!(strcmp(buff, "None")))
 80008d6:	4914      	ldr	r1, [pc, #80]	; (8000928 <CGIUART_Handler+0x1e8>)
 80008d8:	4628      	mov	r0, r5
 80008da:	f7ff fc89 	bl	80001f0 <strcmp>
 80008de:	b918      	cbnz	r0, 80008e8 <CGIUART_Handler+0x1a8>
					huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80008e0:	2300      	movs	r3, #0
 80008e2:	f8c9 3018 	str.w	r3, [r9, #24]
 80008e6:	e754      	b.n	8000792 <CGIUART_Handler+0x52>
				else if (!(strcmp(buff, "RTS/CTS")))
 80008e8:	4912      	ldr	r1, [pc, #72]	; (8000934 <CGIUART_Handler+0x1f4>)
 80008ea:	480a      	ldr	r0, [pc, #40]	; (8000914 <CGIUART_Handler+0x1d4>)
 80008ec:	f7ff fc80 	bl	80001f0 <strcmp>
 80008f0:	2800      	cmp	r0, #0
 80008f2:	f47f af4e 	bne.w	8000792 <CGIUART_Handler+0x52>
					huart3.Init.HwFlowCtl = UART_HWCONTROL_RTS_CTS;
 80008f6:	f44f 7340 	mov.w	r3, #768	; 0x300
 80008fa:	f8c9 3018 	str.w	r3, [r9, #24]
 80008fe:	e748      	b.n	8000792 <CGIUART_Handler+0x52>
			   Error_Handler();
 8000900:	f000 f96a 	bl	8000bd8 <Error_Handler>
 8000904:	e74b      	b.n	800079e <CGIUART_Handler+0x5e>
 8000906:	bf00      	nop
 8000908:	20000620 	.word	0x20000620
 800090c:	40004800 	.word	0x40004800
 8000910:	0800ca8c 	.word	0x0800ca8c
 8000914:	200000d0 	.word	0x200000d0
 8000918:	0800ca60 	.word	0x0800ca60
 800091c:	0800ca68 	.word	0x0800ca68
 8000920:	0800ca70 	.word	0x0800ca70
 8000924:	0800ca84 	.word	0x0800ca84
 8000928:	0800ca4c 	.word	0x0800ca4c
 800092c:	0800ca54 	.word	0x0800ca54
 8000930:	0800ca58 	.word	0x0800ca58
 8000934:	0800ca7c 	.word	0x0800ca7c
 8000938:	0800ca3c 	.word	0x0800ca3c
 800093c:	0800ca44 	.word	0x0800ca44

08000940 <http_server_init>:

void http_server_init (void)
{
 8000940:	b508      	push	{r3, lr}
	httpd_init();
 8000942:	f003 fd6d 	bl	8004420 <httpd_init>

	http_set_ssi_handler(ssi_handler, (char const**) TAGS, 3);
 8000946:	2203      	movs	r2, #3
 8000948:	4b0d      	ldr	r3, [pc, #52]	; (8000980 <http_server_init+0x40>)
 800094a:	6819      	ldr	r1, [r3, #0]
 800094c:	480d      	ldr	r0, [pc, #52]	; (8000984 <http_server_init+0x44>)
 800094e:	f003 fda7 	bl	80044a0 <http_set_ssi_handler>

	CGI_TAB[0] = FORM_CGI;
 8000952:	4b0d      	ldr	r3, [pc, #52]	; (8000988 <http_server_init+0x48>)
 8000954:	4a0d      	ldr	r2, [pc, #52]	; (800098c <http_server_init+0x4c>)
 8000956:	e892 0003 	ldmia.w	r2, {r0, r1}
 800095a:	e883 0003 	stmia.w	r3, {r0, r1}
	CGI_TAB[1] = LED_CGI;
 800095e:	490c      	ldr	r1, [pc, #48]	; (8000990 <http_server_init+0x50>)
 8000960:	f103 0208 	add.w	r2, r3, #8
 8000964:	c903      	ldmia	r1, {r0, r1}
 8000966:	e882 0003 	stmia.w	r2, {r0, r1}
	CGI_TAB[2] = UART_CGI;
 800096a:	490a      	ldr	r1, [pc, #40]	; (8000994 <http_server_init+0x54>)
 800096c:	f103 0210 	add.w	r2, r3, #16
 8000970:	c903      	ldmia	r1, {r0, r1}
 8000972:	e882 0003 	stmia.w	r2, {r0, r1}

	http_set_cgi_handlers(CGI_TAB, 3);
 8000976:	2103      	movs	r1, #3
 8000978:	4618      	mov	r0, r3
 800097a:	f003 fdc9 	bl	8004510 <http_set_cgi_handlers>
}
 800097e:	bd08      	pop	{r3, pc}
 8000980:	2000000c 	.word	0x2000000c
 8000984:	080005c5 	.word	0x080005c5
 8000988:	200000b8 	.word	0x200000b8
 800098c:	0800cac8 	.word	0x0800cac8
 8000990:	0800cad0 	.word	0x0800cad0
 8000994:	0800cad8 	.word	0x0800cad8

08000998 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000998:	b500      	push	{lr}
 800099a:	b095      	sub	sp, #84	; 0x54
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800099c:	2230      	movs	r2, #48	; 0x30
 800099e:	2100      	movs	r1, #0
 80009a0:	a808      	add	r0, sp, #32
 80009a2:	f00a fd41 	bl	800b428 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80009a6:	2300      	movs	r3, #0
 80009a8:	9303      	str	r3, [sp, #12]
 80009aa:	9304      	str	r3, [sp, #16]
 80009ac:	9305      	str	r3, [sp, #20]
 80009ae:	9306      	str	r3, [sp, #24]
 80009b0:	9307      	str	r3, [sp, #28]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80009b2:	9301      	str	r3, [sp, #4]
 80009b4:	4a20      	ldr	r2, [pc, #128]	; (8000a38 <SystemClock_Config+0xa0>)
 80009b6:	6c11      	ldr	r1, [r2, #64]	; 0x40
 80009b8:	f041 5180 	orr.w	r1, r1, #268435456	; 0x10000000
 80009bc:	6411      	str	r1, [r2, #64]	; 0x40
 80009be:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80009c0:	f002 5280 	and.w	r2, r2, #268435456	; 0x10000000
 80009c4:	9201      	str	r2, [sp, #4]
 80009c6:	9a01      	ldr	r2, [sp, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80009c8:	9302      	str	r3, [sp, #8]
 80009ca:	4b1c      	ldr	r3, [pc, #112]	; (8000a3c <SystemClock_Config+0xa4>)
 80009cc:	681a      	ldr	r2, [r3, #0]
 80009ce:	f442 4240 	orr.w	r2, r2, #49152	; 0xc000
 80009d2:	601a      	str	r2, [r3, #0]
 80009d4:	681b      	ldr	r3, [r3, #0]
 80009d6:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80009da:	9302      	str	r3, [sp, #8]
 80009dc:	9b02      	ldr	r3, [sp, #8]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80009de:	2301      	movs	r3, #1
 80009e0:	9308      	str	r3, [sp, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 80009e2:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 80009e6:	9309      	str	r3, [sp, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80009e8:	2302      	movs	r3, #2
 80009ea:	930e      	str	r3, [sp, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80009ec:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 80009f0:	920f      	str	r2, [sp, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 80009f2:	2204      	movs	r2, #4
 80009f4:	9210      	str	r2, [sp, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 80009f6:	22a8      	movs	r2, #168	; 0xa8
 80009f8:	9211      	str	r2, [sp, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80009fa:	9312      	str	r3, [sp, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80009fc:	2307      	movs	r3, #7
 80009fe:	9313      	str	r3, [sp, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000a00:	a808      	add	r0, sp, #32
 8000a02:	f001 fb47 	bl	8002094 <HAL_RCC_OscConfig>
 8000a06:	b998      	cbnz	r0, 8000a30 <SystemClock_Config+0x98>
    Error_Handler();
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000a08:	230f      	movs	r3, #15
 8000a0a:	9303      	str	r3, [sp, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000a0c:	2302      	movs	r3, #2
 8000a0e:	9304      	str	r3, [sp, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000a10:	2300      	movs	r3, #0
 8000a12:	9305      	str	r3, [sp, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000a14:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000a18:	9306      	str	r3, [sp, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000a1a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000a1e:	9307      	str	r3, [sp, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000a20:	2105      	movs	r1, #5
 8000a22:	a803      	add	r0, sp, #12
 8000a24:	f001 fd9c 	bl	8002560 <HAL_RCC_ClockConfig>
 8000a28:	b920      	cbnz	r0, 8000a34 <SystemClock_Config+0x9c>
  {
    Error_Handler();
  }
}
 8000a2a:	b015      	add	sp, #84	; 0x54
 8000a2c:	f85d fb04 	ldr.w	pc, [sp], #4
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000a30:	b672      	cpsid	i
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000a32:	e7fe      	b.n	8000a32 <SystemClock_Config+0x9a>
 8000a34:	b672      	cpsid	i
 8000a36:	e7fe      	b.n	8000a36 <SystemClock_Config+0x9e>
 8000a38:	40023800 	.word	0x40023800
 8000a3c:	40007000 	.word	0x40007000

08000a40 <main>:
{
 8000a40:	b580      	push	{r7, lr}
 8000a42:	b08c      	sub	sp, #48	; 0x30
  HAL_Init();
 8000a44:	f000 fb3e 	bl	80010c4 <HAL_Init>
  SystemClock_Config();
 8000a48:	f7ff ffa6 	bl	8000998 <SystemClock_Config>
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a4c:	2400      	movs	r4, #0
 8000a4e:	9407      	str	r4, [sp, #28]
 8000a50:	9408      	str	r4, [sp, #32]
 8000a52:	9409      	str	r4, [sp, #36]	; 0x24
 8000a54:	940a      	str	r4, [sp, #40]	; 0x28
 8000a56:	940b      	str	r4, [sp, #44]	; 0x2c
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000a58:	9401      	str	r4, [sp, #4]
 8000a5a:	4b51      	ldr	r3, [pc, #324]	; (8000ba0 <main+0x160>)
 8000a5c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000a5e:	f042 0204 	orr.w	r2, r2, #4
 8000a62:	631a      	str	r2, [r3, #48]	; 0x30
 8000a64:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000a66:	f002 0204 	and.w	r2, r2, #4
 8000a6a:	9201      	str	r2, [sp, #4]
 8000a6c:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000a6e:	9402      	str	r4, [sp, #8]
 8000a70:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000a72:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8000a76:	631a      	str	r2, [r3, #48]	; 0x30
 8000a78:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000a7a:	f002 0280 	and.w	r2, r2, #128	; 0x80
 8000a7e:	9202      	str	r2, [sp, #8]
 8000a80:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a82:	9403      	str	r4, [sp, #12]
 8000a84:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000a86:	f042 0201 	orr.w	r2, r2, #1
 8000a8a:	631a      	str	r2, [r3, #48]	; 0x30
 8000a8c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000a8e:	f002 0201 	and.w	r2, r2, #1
 8000a92:	9203      	str	r2, [sp, #12]
 8000a94:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a96:	9404      	str	r4, [sp, #16]
 8000a98:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000a9a:	f042 0202 	orr.w	r2, r2, #2
 8000a9e:	631a      	str	r2, [r3, #48]	; 0x30
 8000aa0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000aa2:	f002 0202 	and.w	r2, r2, #2
 8000aa6:	9204      	str	r2, [sp, #16]
 8000aa8:	9a04      	ldr	r2, [sp, #16]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000aaa:	9405      	str	r4, [sp, #20]
 8000aac:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000aae:	f042 0208 	orr.w	r2, r2, #8
 8000ab2:	631a      	str	r2, [r3, #48]	; 0x30
 8000ab4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000ab6:	f002 0208 	and.w	r2, r2, #8
 8000aba:	9205      	str	r2, [sp, #20]
 8000abc:	9a05      	ldr	r2, [sp, #20]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000abe:	9406      	str	r4, [sp, #24]
 8000ac0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000ac2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8000ac6:	631a      	str	r2, [r3, #48]	; 0x30
 8000ac8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000aca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000ace:	9306      	str	r3, [sp, #24]
 8000ad0:	9b06      	ldr	r3, [sp, #24]
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8000ad2:	4f34      	ldr	r7, [pc, #208]	; (8000ba4 <main+0x164>)
 8000ad4:	4622      	mov	r2, r4
 8000ad6:	f244 0181 	movw	r1, #16513	; 0x4081
 8000ada:	4638      	mov	r0, r7
 8000adc:	f001 fa34 	bl	8001f48 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8000ae0:	4d31      	ldr	r5, [pc, #196]	; (8000ba8 <main+0x168>)
 8000ae2:	4622      	mov	r2, r4
 8000ae4:	2140      	movs	r1, #64	; 0x40
 8000ae6:	4628      	mov	r0, r5
 8000ae8:	f001 fa2e 	bl	8001f48 <HAL_GPIO_WritePin>
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 8000aec:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000af0:	9307      	str	r3, [sp, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000af2:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000af6:	9308      	str	r3, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000af8:	9409      	str	r4, [sp, #36]	; 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8000afa:	a907      	add	r1, sp, #28
 8000afc:	482b      	ldr	r0, [pc, #172]	; (8000bac <main+0x16c>)
 8000afe:	f001 f90f 	bl	8001d20 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 8000b02:	f244 0381 	movw	r3, #16513	; 0x4081
 8000b06:	9307      	str	r3, [sp, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b08:	2601      	movs	r6, #1
 8000b0a:	9608      	str	r6, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b0c:	9409      	str	r4, [sp, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b0e:	940a      	str	r4, [sp, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b10:	a907      	add	r1, sp, #28
 8000b12:	4638      	mov	r0, r7
 8000b14:	f001 f904 	bl	8001d20 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8000b18:	2340      	movs	r3, #64	; 0x40
 8000b1a:	9307      	str	r3, [sp, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b1c:	9608      	str	r6, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b1e:	9409      	str	r4, [sp, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b20:	940a      	str	r4, [sp, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000b22:	a907      	add	r1, sp, #28
 8000b24:	4628      	mov	r0, r5
 8000b26:	f001 f8fb 	bl	8001d20 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8000b2a:	2380      	movs	r3, #128	; 0x80
 8000b2c:	9307      	str	r3, [sp, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000b2e:	9408      	str	r4, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b30:	9409      	str	r4, [sp, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000b32:	a907      	add	r1, sp, #28
 8000b34:	4628      	mov	r0, r5
 8000b36:	f001 f8f3 	bl	8001d20 <HAL_GPIO_Init>
  huart3.Instance = USART3;
 8000b3a:	481d      	ldr	r0, [pc, #116]	; (8000bb0 <main+0x170>)
 8000b3c:	4b1d      	ldr	r3, [pc, #116]	; (8000bb4 <main+0x174>)
 8000b3e:	6003      	str	r3, [r0, #0]
  huart3.Init.BaudRate = 115200;
 8000b40:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 8000b44:	6043      	str	r3, [r0, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000b46:	6084      	str	r4, [r0, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000b48:	60c4      	str	r4, [r0, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000b4a:	6104      	str	r4, [r0, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000b4c:	230c      	movs	r3, #12
 8000b4e:	6143      	str	r3, [r0, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000b50:	6184      	str	r4, [r0, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000b52:	61c4      	str	r4, [r0, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000b54:	f002 f87a 	bl	8002c4c <HAL_UART_Init>
 8000b58:	b9f0      	cbnz	r0, 8000b98 <main+0x158>
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8000b5a:	4817      	ldr	r0, [pc, #92]	; (8000bb8 <main+0x178>)
 8000b5c:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8000b60:	6003      	str	r3, [r0, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 8000b62:	2304      	movs	r3, #4
 8000b64:	6043      	str	r3, [r0, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8000b66:	2202      	movs	r2, #2
 8000b68:	60c2      	str	r2, [r0, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8000b6a:	2300      	movs	r3, #0
 8000b6c:	6103      	str	r3, [r0, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8000b6e:	6182      	str	r2, [r0, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 8000b70:	2201      	movs	r2, #1
 8000b72:	61c2      	str	r2, [r0, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8000b74:	6203      	str	r3, [r0, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8000b76:	6243      	str	r3, [r0, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8000b78:	62c2      	str	r2, [r0, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8000b7a:	6303      	str	r3, [r0, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8000b7c:	f001 f9f3 	bl	8001f66 <HAL_PCD_Init>
 8000b80:	b960      	cbnz	r0, 8000b9c <main+0x15c>
  MX_LWIP_Init();
 8000b82:	f002 fadb 	bl	800313c <MX_LWIP_Init>
  http_server_init();
 8000b86:	f7ff fedb 	bl	8000940 <http_server_init>
  ethernetif_input(&gnetif);
 8000b8a:	4c0c      	ldr	r4, [pc, #48]	; (8000bbc <main+0x17c>)
 8000b8c:	4620      	mov	r0, r4
 8000b8e:	f002 fbc7 	bl	8003320 <ethernetif_input>
  sys_check_timeouts();
 8000b92:	f008 feb5 	bl	8009900 <sys_check_timeouts>
  while (1)
 8000b96:	e7f9      	b.n	8000b8c <main+0x14c>
 8000b98:	b672      	cpsid	i
  while (1)
 8000b9a:	e7fe      	b.n	8000b9a <main+0x15a>
 8000b9c:	b672      	cpsid	i
 8000b9e:	e7fe      	b.n	8000b9e <main+0x15e>
 8000ba0:	40023800 	.word	0x40023800
 8000ba4:	40020400 	.word	0x40020400
 8000ba8:	40021800 	.word	0x40021800
 8000bac:	40020800 	.word	0x40020800
 8000bb0:	20000620 	.word	0x20000620
 8000bb4:	40004800 	.word	0x40004800
 8000bb8:	20000114 	.word	0x20000114
 8000bbc:	200006c0 	.word	0x200006c0

08000bc0 <HAL_TIM_PeriodElapsedCallback>:
{
 8000bc0:	b508      	push	{r3, lr}
  if (htim->Instance == TIM6) {
 8000bc2:	6802      	ldr	r2, [r0, #0]
 8000bc4:	4b03      	ldr	r3, [pc, #12]	; (8000bd4 <HAL_TIM_PeriodElapsedCallback+0x14>)
 8000bc6:	429a      	cmp	r2, r3
 8000bc8:	d000      	beq.n	8000bcc <HAL_TIM_PeriodElapsedCallback+0xc>
}
 8000bca:	bd08      	pop	{r3, pc}
    HAL_IncTick();
 8000bcc:	f000 fa94 	bl	80010f8 <HAL_IncTick>
}
 8000bd0:	e7fb      	b.n	8000bca <HAL_TIM_PeriodElapsedCallback+0xa>
 8000bd2:	bf00      	nop
 8000bd4:	40001000 	.word	0x40001000

08000bd8 <Error_Handler>:
 8000bd8:	b672      	cpsid	i
  while (1)
 8000bda:	e7fe      	b.n	8000bda <Error_Handler+0x2>

08000bdc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000bdc:	b082      	sub	sp, #8
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000bde:	2100      	movs	r1, #0
 8000be0:	9100      	str	r1, [sp, #0]
 8000be2:	4b0b      	ldr	r3, [pc, #44]	; (8000c10 <HAL_MspInit+0x34>)
 8000be4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8000be6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8000bea:	645a      	str	r2, [r3, #68]	; 0x44
 8000bec:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8000bee:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 8000bf2:	9200      	str	r2, [sp, #0]
 8000bf4:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000bf6:	9101      	str	r1, [sp, #4]
 8000bf8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000bfa:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8000bfe:	641a      	str	r2, [r3, #64]	; 0x40
 8000c00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c02:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000c06:	9301      	str	r3, [sp, #4]
 8000c08:	9b01      	ldr	r3, [sp, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000c0a:	b002      	add	sp, #8
 8000c0c:	4770      	bx	lr
 8000c0e:	bf00      	nop
 8000c10:	40023800 	.word	0x40023800

08000c14 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000c14:	b500      	push	{lr}
 8000c16:	b089      	sub	sp, #36	; 0x24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c18:	2300      	movs	r3, #0
 8000c1a:	9303      	str	r3, [sp, #12]
 8000c1c:	9304      	str	r3, [sp, #16]
 8000c1e:	9305      	str	r3, [sp, #20]
 8000c20:	9306      	str	r3, [sp, #24]
 8000c22:	9307      	str	r3, [sp, #28]
  if(huart->Instance==USART3)
 8000c24:	6802      	ldr	r2, [r0, #0]
 8000c26:	4b15      	ldr	r3, [pc, #84]	; (8000c7c <HAL_UART_MspInit+0x68>)
 8000c28:	429a      	cmp	r2, r3
 8000c2a:	d002      	beq.n	8000c32 <HAL_UART_MspInit+0x1e>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8000c2c:	b009      	add	sp, #36	; 0x24
 8000c2e:	f85d fb04 	ldr.w	pc, [sp], #4
    __HAL_RCC_USART3_CLK_ENABLE();
 8000c32:	2100      	movs	r1, #0
 8000c34:	9101      	str	r1, [sp, #4]
 8000c36:	f503 33f8 	add.w	r3, r3, #126976	; 0x1f000
 8000c3a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000c3c:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8000c40:	641a      	str	r2, [r3, #64]	; 0x40
 8000c42:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000c44:	f402 2280 	and.w	r2, r2, #262144	; 0x40000
 8000c48:	9201      	str	r2, [sp, #4]
 8000c4a:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000c4c:	9102      	str	r1, [sp, #8]
 8000c4e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000c50:	f042 0208 	orr.w	r2, r2, #8
 8000c54:	631a      	str	r2, [r3, #48]	; 0x30
 8000c56:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c58:	f003 0308 	and.w	r3, r3, #8
 8000c5c:	9302      	str	r3, [sp, #8]
 8000c5e:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8000c60:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000c64:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c66:	2302      	movs	r3, #2
 8000c68:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c6a:	2303      	movs	r3, #3
 8000c6c:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000c6e:	2307      	movs	r3, #7
 8000c70:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000c72:	a903      	add	r1, sp, #12
 8000c74:	4802      	ldr	r0, [pc, #8]	; (8000c80 <HAL_UART_MspInit+0x6c>)
 8000c76:	f001 f853 	bl	8001d20 <HAL_GPIO_Init>
}
 8000c7a:	e7d7      	b.n	8000c2c <HAL_UART_MspInit+0x18>
 8000c7c:	40004800 	.word	0x40004800
 8000c80:	40020c00 	.word	0x40020c00

08000c84 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8000c84:	b570      	push	{r4, r5, r6, lr}
 8000c86:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c88:	2300      	movs	r3, #0
 8000c8a:	9303      	str	r3, [sp, #12]
 8000c8c:	9304      	str	r3, [sp, #16]
 8000c8e:	9305      	str	r3, [sp, #20]
 8000c90:	9306      	str	r3, [sp, #24]
 8000c92:	9307      	str	r3, [sp, #28]
  if(hpcd->Instance==USB_OTG_FS)
 8000c94:	6803      	ldr	r3, [r0, #0]
 8000c96:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8000c9a:	d001      	beq.n	8000ca0 <HAL_PCD_MspInit+0x1c>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 8000c9c:	b008      	add	sp, #32
 8000c9e:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ca0:	2500      	movs	r5, #0
 8000ca2:	9501      	str	r5, [sp, #4]
 8000ca4:	4c17      	ldr	r4, [pc, #92]	; (8000d04 <HAL_PCD_MspInit+0x80>)
 8000ca6:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8000ca8:	f043 0301 	orr.w	r3, r3, #1
 8000cac:	6323      	str	r3, [r4, #48]	; 0x30
 8000cae:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8000cb0:	f003 0301 	and.w	r3, r3, #1
 8000cb4:	9301      	str	r3, [sp, #4]
 8000cb6:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8000cb8:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 8000cbc:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cbe:	2302      	movs	r3, #2
 8000cc0:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000cc2:	2303      	movs	r3, #3
 8000cc4:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8000cc6:	230a      	movs	r3, #10
 8000cc8:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000cca:	4e0f      	ldr	r6, [pc, #60]	; (8000d08 <HAL_PCD_MspInit+0x84>)
 8000ccc:	a903      	add	r1, sp, #12
 8000cce:	4630      	mov	r0, r6
 8000cd0:	f001 f826 	bl	8001d20 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8000cd4:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000cd8:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000cda:	9504      	str	r5, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cdc:	9505      	str	r5, [sp, #20]
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8000cde:	a903      	add	r1, sp, #12
 8000ce0:	4630      	mov	r0, r6
 8000ce2:	f001 f81d 	bl	8001d20 <HAL_GPIO_Init>
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8000ce6:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8000ce8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000cec:	6363      	str	r3, [r4, #52]	; 0x34
 8000cee:	9502      	str	r5, [sp, #8]
 8000cf0:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8000cf2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000cf6:	6463      	str	r3, [r4, #68]	; 0x44
 8000cf8:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8000cfa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000cfe:	9302      	str	r3, [sp, #8]
 8000d00:	9b02      	ldr	r3, [sp, #8]
}
 8000d02:	e7cb      	b.n	8000c9c <HAL_PCD_MspInit+0x18>
 8000d04:	40023800 	.word	0x40023800
 8000d08:	40020000 	.word	0x40020000

08000d0c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000d0c:	b530      	push	{r4, r5, lr}
 8000d0e:	b089      	sub	sp, #36	; 0x24
 8000d10:	4604      	mov	r4, r0
  uint32_t              uwPrescalerValue = 0U;
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8000d12:	2300      	movs	r3, #0
 8000d14:	9301      	str	r3, [sp, #4]
 8000d16:	4b21      	ldr	r3, [pc, #132]	; (8000d9c <HAL_InitTick+0x90>)
 8000d18:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000d1a:	f042 0210 	orr.w	r2, r2, #16
 8000d1e:	641a      	str	r2, [r3, #64]	; 0x40
 8000d20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d22:	f003 0310 	and.w	r3, r3, #16
 8000d26:	9301      	str	r3, [sp, #4]
 8000d28:	9b01      	ldr	r3, [sp, #4]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000d2a:	a902      	add	r1, sp, #8
 8000d2c:	a803      	add	r0, sp, #12
 8000d2e:	f001 fcef 	bl	8002710 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8000d32:	9b06      	ldr	r3, [sp, #24]
 8000d34:	b9cb      	cbnz	r3, 8000d6a <HAL_InitTick+0x5e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8000d36:	f001 fccb 	bl	80026d0 <HAL_RCC_GetPCLK1Freq>
 8000d3a:	4603      	mov	r3, r0

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8000d3c:	4818      	ldr	r0, [pc, #96]	; (8000da0 <HAL_InitTick+0x94>)
 8000d3e:	4a19      	ldr	r2, [pc, #100]	; (8000da4 <HAL_InitTick+0x98>)
 8000d40:	6002      	str	r2, [r0, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8000d42:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000d46:	60c2      	str	r2, [r0, #12]
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000d48:	4a17      	ldr	r2, [pc, #92]	; (8000da8 <HAL_InitTick+0x9c>)
 8000d4a:	fba2 2303 	umull	r2, r3, r2, r3
 8000d4e:	0c9b      	lsrs	r3, r3, #18
 8000d50:	3b01      	subs	r3, #1
  htim6.Init.Prescaler = uwPrescalerValue;
 8000d52:	6043      	str	r3, [r0, #4]
  htim6.Init.ClockDivision = 0;
 8000d54:	2300      	movs	r3, #0
 8000d56:	6103      	str	r3, [r0, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000d58:	6083      	str	r3, [r0, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000d5a:	6183      	str	r3, [r0, #24]

  status = HAL_TIM_Base_Init(&htim6);
 8000d5c:	f001 fe82 	bl	8002a64 <HAL_TIM_Base_Init>
  if (status == HAL_OK)
 8000d60:	4605      	mov	r5, r0
 8000d62:	b130      	cbz	r0, 8000d72 <HAL_InitTick+0x66>
    }
  }

 /* Return function status */
  return status;
}
 8000d64:	4628      	mov	r0, r5
 8000d66:	b009      	add	sp, #36	; 0x24
 8000d68:	bd30      	pop	{r4, r5, pc}
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8000d6a:	f001 fcb1 	bl	80026d0 <HAL_RCC_GetPCLK1Freq>
 8000d6e:	0043      	lsls	r3, r0, #1
 8000d70:	e7e4      	b.n	8000d3c <HAL_InitTick+0x30>
    status = HAL_TIM_Base_Start_IT(&htim6);
 8000d72:	480b      	ldr	r0, [pc, #44]	; (8000da0 <HAL_InitTick+0x94>)
 8000d74:	f001 fcec 	bl	8002750 <HAL_TIM_Base_Start_IT>
    if (status == HAL_OK)
 8000d78:	4605      	mov	r5, r0
 8000d7a:	2800      	cmp	r0, #0
 8000d7c:	d1f2      	bne.n	8000d64 <HAL_InitTick+0x58>
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8000d7e:	2036      	movs	r0, #54	; 0x36
 8000d80:	f000 fa28 	bl	80011d4 <HAL_NVIC_EnableIRQ>
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000d84:	2c0f      	cmp	r4, #15
 8000d86:	d901      	bls.n	8000d8c <HAL_InitTick+0x80>
        status = HAL_ERROR;
 8000d88:	2501      	movs	r5, #1
 8000d8a:	e7eb      	b.n	8000d64 <HAL_InitTick+0x58>
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 8000d8c:	2200      	movs	r2, #0
 8000d8e:	4621      	mov	r1, r4
 8000d90:	2036      	movs	r0, #54	; 0x36
 8000d92:	f000 f9e9 	bl	8001168 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000d96:	4b05      	ldr	r3, [pc, #20]	; (8000dac <HAL_InitTick+0xa0>)
 8000d98:	601c      	str	r4, [r3, #0]
 8000d9a:	e7e3      	b.n	8000d64 <HAL_InitTick+0x58>
 8000d9c:	40023800 	.word	0x40023800
 8000da0:	20000664 	.word	0x20000664
 8000da4:	40001000 	.word	0x40001000
 8000da8:	431bde83 	.word	0x431bde83
 8000dac:	20000018 	.word	0x20000018

08000db0 <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000db0:	e7fe      	b.n	8000db0 <NMI_Handler>

08000db2 <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000db2:	e7fe      	b.n	8000db2 <HardFault_Handler>

08000db4 <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000db4:	e7fe      	b.n	8000db4 <MemManage_Handler>

08000db6 <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000db6:	e7fe      	b.n	8000db6 <BusFault_Handler>

08000db8 <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000db8:	e7fe      	b.n	8000db8 <UsageFault_Handler>

08000dba <SVC_Handler>:

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000dba:	4770      	bx	lr

08000dbc <DebugMon_Handler>:

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000dbc:	4770      	bx	lr

08000dbe <PendSV_Handler>:

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000dbe:	4770      	bx	lr

08000dc0 <SysTick_Handler>:
  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000dc0:	4770      	bx	lr
	...

08000dc4 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8000dc4:	b508      	push	{r3, lr}
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8000dc6:	4802      	ldr	r0, [pc, #8]	; (8000dd0 <TIM6_DAC_IRQHandler+0xc>)
 8000dc8:	f001 fd0a 	bl	80027e0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8000dcc:	bd08      	pop	{r3, pc}
 8000dce:	bf00      	nop
 8000dd0:	20000664 	.word	0x20000664

08000dd4 <_getpid>:
}

int _getpid(void)
{
	return 1;
}
 8000dd4:	2001      	movs	r0, #1
 8000dd6:	4770      	bx	lr

08000dd8 <_kill>:

int _kill(int pid, int sig)
{
	errno = EINVAL;
 8000dd8:	4b02      	ldr	r3, [pc, #8]	; (8000de4 <_kill+0xc>)
 8000dda:	2216      	movs	r2, #22
 8000ddc:	601a      	str	r2, [r3, #0]
	return -1;
}
 8000dde:	f04f 30ff 	mov.w	r0, #4294967295
 8000de2:	4770      	bx	lr
 8000de4:	2000afc0 	.word	0x2000afc0

08000de8 <_exit>:
	errno = EINVAL;
 8000de8:	4b01      	ldr	r3, [pc, #4]	; (8000df0 <_exit+0x8>)
 8000dea:	2216      	movs	r2, #22
 8000dec:	601a      	str	r2, [r3, #0]

void _exit (int status)
{
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
 8000dee:	e7fe      	b.n	8000dee <_exit+0x6>
 8000df0:	2000afc0 	.word	0x2000afc0

08000df4 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000df4:	b570      	push	{r4, r5, r6, lr}
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000df6:	1e16      	subs	r6, r2, #0
 8000df8:	dd07      	ble.n	8000e0a <_read+0x16>
 8000dfa:	460c      	mov	r4, r1
 8000dfc:	198d      	adds	r5, r1, r6
	{
		*ptr++ = __io_getchar();
 8000dfe:	f3af 8000 	nop.w
 8000e02:	f804 0b01 	strb.w	r0, [r4], #1
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000e06:	42a5      	cmp	r5, r4
 8000e08:	d1f9      	bne.n	8000dfe <_read+0xa>
	}

return len;
}
 8000e0a:	4630      	mov	r0, r6
 8000e0c:	bd70      	pop	{r4, r5, r6, pc}

08000e0e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000e0e:	b570      	push	{r4, r5, r6, lr}
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000e10:	1e16      	subs	r6, r2, #0
 8000e12:	dd07      	ble.n	8000e24 <_write+0x16>
 8000e14:	460c      	mov	r4, r1
 8000e16:	198d      	adds	r5, r1, r6
	{
		__io_putchar(*ptr++);
 8000e18:	f814 0b01 	ldrb.w	r0, [r4], #1
 8000e1c:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000e20:	42a5      	cmp	r5, r4
 8000e22:	d1f9      	bne.n	8000e18 <_write+0xa>
	}
	return len;
}
 8000e24:	4630      	mov	r0, r6
 8000e26:	bd70      	pop	{r4, r5, r6, pc}

08000e28 <_close>:

int _close(int file)
{
	return -1;
}
 8000e28:	f04f 30ff 	mov.w	r0, #4294967295
 8000e2c:	4770      	bx	lr

08000e2e <_fstat>:


int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
 8000e2e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000e32:	604b      	str	r3, [r1, #4]
	return 0;
}
 8000e34:	2000      	movs	r0, #0
 8000e36:	4770      	bx	lr

08000e38 <_isatty>:

int _isatty(int file)
{
	return 1;
}
 8000e38:	2001      	movs	r0, #1
 8000e3a:	4770      	bx	lr

08000e3c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
	return 0;
}
 8000e3c:	2000      	movs	r0, #0
 8000e3e:	4770      	bx	lr

08000e40 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000e40:	4603      	mov	r3, r0
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
  const uint8_t *max_heap = (uint8_t *)stack_limit;
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000e42:	4a0c      	ldr	r2, [pc, #48]	; (8000e74 <_sbrk+0x34>)
 8000e44:	6812      	ldr	r2, [r2, #0]
 8000e46:	b152      	cbz	r2, 8000e5e <_sbrk+0x1e>
  {
    __sbrk_heap_end = &_end;
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000e48:	4a0a      	ldr	r2, [pc, #40]	; (8000e74 <_sbrk+0x34>)
 8000e4a:	6810      	ldr	r0, [r2, #0]
 8000e4c:	4403      	add	r3, r0
 8000e4e:	4a0a      	ldr	r2, [pc, #40]	; (8000e78 <_sbrk+0x38>)
 8000e50:	490a      	ldr	r1, [pc, #40]	; (8000e7c <_sbrk+0x3c>)
 8000e52:	1a52      	subs	r2, r2, r1
 8000e54:	4293      	cmp	r3, r2
 8000e56:	d806      	bhi.n	8000e66 <_sbrk+0x26>
    errno = ENOMEM;
    return (void *)-1;
  }

  prev_heap_end = __sbrk_heap_end;
  __sbrk_heap_end += incr;
 8000e58:	4a06      	ldr	r2, [pc, #24]	; (8000e74 <_sbrk+0x34>)
 8000e5a:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
}
 8000e5c:	4770      	bx	lr
    __sbrk_heap_end = &_end;
 8000e5e:	4a05      	ldr	r2, [pc, #20]	; (8000e74 <_sbrk+0x34>)
 8000e60:	4907      	ldr	r1, [pc, #28]	; (8000e80 <_sbrk+0x40>)
 8000e62:	6011      	str	r1, [r2, #0]
 8000e64:	e7f0      	b.n	8000e48 <_sbrk+0x8>
    errno = ENOMEM;
 8000e66:	4b07      	ldr	r3, [pc, #28]	; (8000e84 <_sbrk+0x44>)
 8000e68:	220c      	movs	r2, #12
 8000e6a:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000e6c:	f04f 30ff 	mov.w	r0, #4294967295
 8000e70:	4770      	bx	lr
 8000e72:	bf00      	nop
 8000e74:	200006ac 	.word	0x200006ac
 8000e78:	20030000 	.word	0x20030000
 8000e7c:	00000400 	.word	0x00000400
 8000e80:	2000afd0 	.word	0x2000afd0
 8000e84:	2000afc0 	.word	0x2000afc0

08000e88 <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000e88:	4a03      	ldr	r2, [pc, #12]	; (8000e98 <SystemInit+0x10>)
 8000e8a:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8000e8e:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000e92:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000e96:	4770      	bx	lr
 8000e98:	e000ed00 	.word	0xe000ed00

08000e9c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 8000e9c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000ed4 <LoopFillZerobss+0x12>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000ea0:	480d      	ldr	r0, [pc, #52]	; (8000ed8 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000ea2:	490e      	ldr	r1, [pc, #56]	; (8000edc <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000ea4:	4a0e      	ldr	r2, [pc, #56]	; (8000ee0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000ea6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000ea8:	e002      	b.n	8000eb0 <LoopCopyDataInit>

08000eaa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000eaa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000eac:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000eae:	3304      	adds	r3, #4

08000eb0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000eb0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000eb2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000eb4:	d3f9      	bcc.n	8000eaa <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000eb6:	4a0b      	ldr	r2, [pc, #44]	; (8000ee4 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000eb8:	4c0b      	ldr	r4, [pc, #44]	; (8000ee8 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000eba:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000ebc:	e001      	b.n	8000ec2 <LoopFillZerobss>

08000ebe <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000ebe:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000ec0:	3204      	adds	r2, #4

08000ec2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000ec2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000ec4:	d3fb      	bcc.n	8000ebe <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000ec6:	f7ff ffdf 	bl	8000e88 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000eca:	f00a fa51 	bl	800b370 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000ece:	f7ff fdb7 	bl	8000a40 <main>
  bx  lr    
 8000ed2:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8000ed4:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 8000ed8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000edc:	2000009c 	.word	0x2000009c
  ldr r2, =_sidata
 8000ee0:	0801289c 	.word	0x0801289c
  ldr r2, =_sbss
 8000ee4:	2000009c 	.word	0x2000009c
  ldr r4, =_ebss
 8000ee8:	2000afd0 	.word	0x2000afd0

08000eec <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000eec:	e7fe      	b.n	8000eec <ADC_IRQHandler>

08000eee <LAN8742_RegisterBusIO>:
  * @retval LAN8742_STATUS_OK  if OK
  *         LAN8742_STATUS_ERROR if missing mandatory function
  */
int32_t  LAN8742_RegisterBusIO(lan8742_Object_t *pObj, lan8742_IOCtx_t *ioctx)
{
  if(!pObj || !ioctx->ReadReg || !ioctx->WriteReg || !ioctx->GetTick)
 8000eee:	b188      	cbz	r0, 8000f14 <LAN8742_RegisterBusIO+0x26>
 8000ef0:	68ca      	ldr	r2, [r1, #12]
 8000ef2:	b192      	cbz	r2, 8000f1a <LAN8742_RegisterBusIO+0x2c>
 8000ef4:	688a      	ldr	r2, [r1, #8]
 8000ef6:	b19a      	cbz	r2, 8000f20 <LAN8742_RegisterBusIO+0x32>
 8000ef8:	690a      	ldr	r2, [r1, #16]
 8000efa:	b1a2      	cbz	r2, 8000f26 <LAN8742_RegisterBusIO+0x38>
  {
    return LAN8742_STATUS_ERROR;
  }
  
  pObj->IO.Init = ioctx->Init;
 8000efc:	680a      	ldr	r2, [r1, #0]
 8000efe:	6082      	str	r2, [r0, #8]
  pObj->IO.DeInit = ioctx->DeInit;
 8000f00:	684a      	ldr	r2, [r1, #4]
 8000f02:	60c2      	str	r2, [r0, #12]
  pObj->IO.ReadReg = ioctx->ReadReg;
 8000f04:	68ca      	ldr	r2, [r1, #12]
 8000f06:	6142      	str	r2, [r0, #20]
  pObj->IO.WriteReg = ioctx->WriteReg;
 8000f08:	688a      	ldr	r2, [r1, #8]
 8000f0a:	6102      	str	r2, [r0, #16]
  pObj->IO.GetTick = ioctx->GetTick;
 8000f0c:	690a      	ldr	r2, [r1, #16]
 8000f0e:	6182      	str	r2, [r0, #24]
  
  return LAN8742_STATUS_OK;
 8000f10:	2000      	movs	r0, #0
 8000f12:	4770      	bx	lr
    return LAN8742_STATUS_ERROR;
 8000f14:	f04f 30ff 	mov.w	r0, #4294967295
 8000f18:	4770      	bx	lr
 8000f1a:	f04f 30ff 	mov.w	r0, #4294967295
 8000f1e:	4770      	bx	lr
 8000f20:	f04f 30ff 	mov.w	r0, #4294967295
 8000f24:	4770      	bx	lr
 8000f26:	f04f 30ff 	mov.w	r0, #4294967295
}
 8000f2a:	4770      	bx	lr

08000f2c <LAN8742_Init>:
  *         LAN8742_STATUS_READ_ERROR if connot read register
  *         LAN8742_STATUS_WRITE_ERROR if connot write to register
  *         LAN8742_STATUS_RESET_TIMEOUT if cannot perform a software reset
  */
 int32_t LAN8742_Init(lan8742_Object_t *pObj)
 {
 8000f2c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000f30:	b082      	sub	sp, #8
 8000f32:	4605      	mov	r5, r0
   uint32_t tickstart = 0, regvalue = 0, addr = 0;
 8000f34:	2300      	movs	r3, #0
 8000f36:	9301      	str	r3, [sp, #4]
   int32_t status = LAN8742_STATUS_OK;
   
   if(pObj->Is_Initialized == 0)
 8000f38:	6844      	ldr	r4, [r0, #4]
 8000f3a:	2c00      	cmp	r4, #0
 8000f3c:	d149      	bne.n	8000fd2 <LAN8742_Init+0xa6>
   {
     if(pObj->IO.Init != 0)
 8000f3e:	6883      	ldr	r3, [r0, #8]
 8000f40:	b103      	cbz	r3, 8000f44 <LAN8742_Init+0x18>
     {
       /* GPIO and Clocks initialization */
       pObj->IO.Init();
 8000f42:	4798      	blx	r3
     }
   
     /* for later check */
     pObj->DevAddr = LAN8742_MAX_DEV_ADDR + 1;
 8000f44:	2320      	movs	r3, #32
 8000f46:	602b      	str	r3, [r5, #0]
   int32_t status = LAN8742_STATUS_OK;
 8000f48:	2700      	movs	r7, #0
   
     /* Get the device address from special mode register */  
     for(addr = 0; addr <= LAN8742_MAX_DEV_ADDR; addr ++)
     {
       if(pObj->IO.ReadReg(addr, LAN8742_SMR, &regvalue) < 0)
 8000f4a:	2612      	movs	r6, #18
       { 
         status = LAN8742_STATUS_READ_ERROR;
 8000f4c:	f06f 0804 	mvn.w	r8, #4
 8000f50:	e003      	b.n	8000f5a <LAN8742_Init+0x2e>
 8000f52:	4647      	mov	r7, r8
     for(addr = 0; addr <= LAN8742_MAX_DEV_ADDR; addr ++)
 8000f54:	3401      	adds	r4, #1
 8000f56:	2c20      	cmp	r4, #32
 8000f58:	d033      	beq.n	8000fc2 <LAN8742_Init+0x96>
       if(pObj->IO.ReadReg(addr, LAN8742_SMR, &regvalue) < 0)
 8000f5a:	696b      	ldr	r3, [r5, #20]
 8000f5c:	aa01      	add	r2, sp, #4
 8000f5e:	4631      	mov	r1, r6
 8000f60:	4620      	mov	r0, r4
 8000f62:	4798      	blx	r3
 8000f64:	2800      	cmp	r0, #0
 8000f66:	dbf4      	blt.n	8000f52 <LAN8742_Init+0x26>
         /* Can't read from this device address 
            continue with next address */
         continue;
       }
     
       if((regvalue & LAN8742_SMR_PHY_ADDR) == addr)
 8000f68:	9b01      	ldr	r3, [sp, #4]
 8000f6a:	f003 031f 	and.w	r3, r3, #31
 8000f6e:	42a3      	cmp	r3, r4
 8000f70:	d1f0      	bne.n	8000f54 <LAN8742_Init+0x28>
       {
         pObj->DevAddr = addr;
 8000f72:	602c      	str	r4, [r5, #0]
     
     /* if device address is matched */
     if(status == LAN8742_STATUS_OK)
     {
       /* set a software reset  */
       if(pObj->IO.WriteReg(pObj->DevAddr, LAN8742_BCR, LAN8742_BCR_SOFT_RESET) >= 0)
 8000f74:	692b      	ldr	r3, [r5, #16]
 8000f76:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8000f7a:	2100      	movs	r1, #0
 8000f7c:	4620      	mov	r0, r4
 8000f7e:	4798      	blx	r3
 8000f80:	2800      	cmp	r0, #0
 8000f82:	db36      	blt.n	8000ff2 <LAN8742_Init+0xc6>
       { 
         /* get software reset status */
         if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BCR, &regvalue) >= 0)
 8000f84:	696b      	ldr	r3, [r5, #20]
 8000f86:	aa01      	add	r2, sp, #4
 8000f88:	2100      	movs	r1, #0
 8000f8a:	6828      	ldr	r0, [r5, #0]
 8000f8c:	4798      	blx	r3
 8000f8e:	2800      	cmp	r0, #0
 8000f90:	db32      	blt.n	8000ff8 <LAN8742_Init+0xcc>
         { 
           tickstart = pObj->IO.GetTick();
 8000f92:	69ab      	ldr	r3, [r5, #24]
 8000f94:	4798      	blx	r3
 8000f96:	4604      	mov	r4, r0
           /* wait until software reset is done or timeout occured  */
           while(regvalue & LAN8742_BCR_SOFT_RESET)
           {
             if((pObj->IO.GetTick() - tickstart) <= LAN8742_SW_RESET_TO)
             {
               if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BCR, &regvalue) < 0)
 8000f98:	2600      	movs	r6, #0
           while(regvalue & LAN8742_BCR_SOFT_RESET)
 8000f9a:	9b01      	ldr	r3, [sp, #4]
 8000f9c:	f413 4f00 	tst.w	r3, #32768	; 0x8000
 8000fa0:	d017      	beq.n	8000fd2 <LAN8742_Init+0xa6>
             if((pObj->IO.GetTick() - tickstart) <= LAN8742_SW_RESET_TO)
 8000fa2:	69ab      	ldr	r3, [r5, #24]
 8000fa4:	4798      	blx	r3
 8000fa6:	1b00      	subs	r0, r0, r4
 8000fa8:	f5b0 7ffa 	cmp.w	r0, #500	; 0x1f4
 8000fac:	d827      	bhi.n	8000ffe <LAN8742_Init+0xd2>
               if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BCR, &regvalue) < 0)
 8000fae:	696b      	ldr	r3, [r5, #20]
 8000fb0:	aa01      	add	r2, sp, #4
 8000fb2:	4631      	mov	r1, r6
 8000fb4:	6828      	ldr	r0, [r5, #0]
 8000fb6:	4798      	blx	r3
 8000fb8:	2800      	cmp	r0, #0
 8000fba:	daee      	bge.n	8000f9a <LAN8742_Init+0x6e>
               { 
                 status = LAN8742_STATUS_READ_ERROR;
 8000fbc:	f06f 0704 	mvn.w	r7, #4
         status = LAN8742_STATUS_WRITE_ERROR;
       }
     }
   }
      
   if(status == LAN8742_STATUS_OK)
 8000fc0:	e013      	b.n	8000fea <LAN8742_Init+0xbe>
     if(pObj->DevAddr > LAN8742_MAX_DEV_ADDR)
 8000fc2:	682c      	ldr	r4, [r5, #0]
 8000fc4:	2c1f      	cmp	r4, #31
 8000fc6:	d902      	bls.n	8000fce <LAN8742_Init+0xa2>
       status = LAN8742_STATUS_ADDRESS_ERROR;
 8000fc8:	f06f 0702 	mvn.w	r7, #2
 8000fcc:	e00d      	b.n	8000fea <LAN8742_Init+0xbe>
     if(status == LAN8742_STATUS_OK)
 8000fce:	b967      	cbnz	r7, 8000fea <LAN8742_Init+0xbe>
 8000fd0:	e7d0      	b.n	8000f74 <LAN8742_Init+0x48>
   {
     tickstart =  pObj->IO.GetTick();
 8000fd2:	69ab      	ldr	r3, [r5, #24]
 8000fd4:	4798      	blx	r3
 8000fd6:	4604      	mov	r4, r0
     
     /* Wait for 2s to perform initialization */
     while((pObj->IO.GetTick() - tickstart) <= LAN8742_INIT_TO)
 8000fd8:	69ab      	ldr	r3, [r5, #24]
 8000fda:	4798      	blx	r3
 8000fdc:	1b03      	subs	r3, r0, r4
 8000fde:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8000fe2:	d9f9      	bls.n	8000fd8 <LAN8742_Init+0xac>
     {
     }
     pObj->Is_Initialized = 1;
 8000fe4:	2301      	movs	r3, #1
 8000fe6:	606b      	str	r3, [r5, #4]
 8000fe8:	2700      	movs	r7, #0
   }
   
   return status;
 }
 8000fea:	4638      	mov	r0, r7
 8000fec:	b002      	add	sp, #8
 8000fee:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
         status = LAN8742_STATUS_WRITE_ERROR;
 8000ff2:	f06f 0703 	mvn.w	r7, #3
 8000ff6:	e7f8      	b.n	8000fea <LAN8742_Init+0xbe>
           status = LAN8742_STATUS_READ_ERROR;
 8000ff8:	f06f 0704 	mvn.w	r7, #4
   return status;
 8000ffc:	e7f5      	b.n	8000fea <LAN8742_Init+0xbe>
               status = LAN8742_STATUS_RESET_TIMEOUT;
 8000ffe:	f06f 0701 	mvn.w	r7, #1
 8001002:	e7f2      	b.n	8000fea <LAN8742_Init+0xbe>

08001004 <LAN8742_GetLinkState>:
  *         LAN8742_STATUS_10MBITS_HALFDUPLEX  if 10Mb/s HD       
  *         LAN8742_STATUS_READ_ERROR if connot read register
  *         LAN8742_STATUS_WRITE_ERROR if connot write to register
  */
int32_t LAN8742_GetLinkState(lan8742_Object_t *pObj)
{
 8001004:	b510      	push	{r4, lr}
 8001006:	b082      	sub	sp, #8
 8001008:	4604      	mov	r4, r0
  uint32_t readval = 0;
 800100a:	2300      	movs	r3, #0
 800100c:	9301      	str	r3, [sp, #4]
  
  /* Read Status register  */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BSR, &readval) < 0)
 800100e:	6943      	ldr	r3, [r0, #20]
 8001010:	aa01      	add	r2, sp, #4
 8001012:	2101      	movs	r1, #1
 8001014:	6800      	ldr	r0, [r0, #0]
 8001016:	4798      	blx	r3
 8001018:	2800      	cmp	r0, #0
 800101a:	db39      	blt.n	8001090 <LAN8742_GetLinkState+0x8c>
  {
    return LAN8742_STATUS_READ_ERROR;
  }
  
  /* Read Status register again */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BSR, &readval) < 0)
 800101c:	6963      	ldr	r3, [r4, #20]
 800101e:	aa01      	add	r2, sp, #4
 8001020:	2101      	movs	r1, #1
 8001022:	6820      	ldr	r0, [r4, #0]
 8001024:	4798      	blx	r3
 8001026:	2800      	cmp	r0, #0
 8001028:	db35      	blt.n	8001096 <LAN8742_GetLinkState+0x92>
  {
    return LAN8742_STATUS_READ_ERROR;
  }
  
  if((readval & LAN8742_BSR_LINK_STATUS) == 0)
 800102a:	9b01      	ldr	r3, [sp, #4]
 800102c:	f013 0f04 	tst.w	r3, #4
 8001030:	d034      	beq.n	800109c <LAN8742_GetLinkState+0x98>
    /* Return Link Down status */
    return LAN8742_STATUS_LINK_DOWN;    
  }
  
  /* Check Auto negotiaition */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BCR, &readval) < 0)
 8001032:	6963      	ldr	r3, [r4, #20]
 8001034:	aa01      	add	r2, sp, #4
 8001036:	2100      	movs	r1, #0
 8001038:	6820      	ldr	r0, [r4, #0]
 800103a:	4798      	blx	r3
 800103c:	2800      	cmp	r0, #0
 800103e:	db30      	blt.n	80010a2 <LAN8742_GetLinkState+0x9e>
  {
    return LAN8742_STATUS_READ_ERROR;
  }
  
  if((readval & LAN8742_BCR_AUTONEGO_EN) != LAN8742_BCR_AUTONEGO_EN)
 8001040:	9b01      	ldr	r3, [sp, #4]
 8001042:	f413 5f80 	tst.w	r3, #4096	; 0x1000
 8001046:	d10d      	bne.n	8001064 <LAN8742_GetLinkState+0x60>
  {
    if(((readval & LAN8742_BCR_SPEED_SELECT) == LAN8742_BCR_SPEED_SELECT) && ((readval & LAN8742_BCR_DUPLEX_MODE) == LAN8742_BCR_DUPLEX_MODE)) 
 8001048:	f403 5204 	and.w	r2, r3, #8448	; 0x2100
 800104c:	f5b2 5f04 	cmp.w	r2, #8448	; 0x2100
 8001050:	d02a      	beq.n	80010a8 <LAN8742_GetLinkState+0xa4>
    {
      return LAN8742_STATUS_100MBITS_FULLDUPLEX;
    }
    else if ((readval & LAN8742_BCR_SPEED_SELECT) == LAN8742_BCR_SPEED_SELECT)
 8001052:	f413 5f00 	tst.w	r3, #8192	; 0x2000
 8001056:	d129      	bne.n	80010ac <LAN8742_GetLinkState+0xa8>
    {
      return LAN8742_STATUS_10MBITS_FULLDUPLEX;
    }
    else
    {
      return LAN8742_STATUS_10MBITS_HALFDUPLEX;
 8001058:	f413 7f80 	tst.w	r3, #256	; 0x100
 800105c:	bf14      	ite	ne
 800105e:	2004      	movne	r0, #4
 8001060:	2005      	moveq	r0, #5
 8001062:	e01c      	b.n	800109e <LAN8742_GetLinkState+0x9a>
    }  		
  }
  else /* Auto Nego enabled */
  {
    if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_PHYSCSR, &readval) < 0)
 8001064:	6963      	ldr	r3, [r4, #20]
 8001066:	aa01      	add	r2, sp, #4
 8001068:	211f      	movs	r1, #31
 800106a:	6820      	ldr	r0, [r4, #0]
 800106c:	4798      	blx	r3
 800106e:	2800      	cmp	r0, #0
 8001070:	db1e      	blt.n	80010b0 <LAN8742_GetLinkState+0xac>
    {
      return LAN8742_STATUS_READ_ERROR;
    }
    
    /* Check if auto nego not done */
    if((readval & LAN8742_PHYSCSR_AUTONEGO_DONE) == 0)
 8001072:	9b01      	ldr	r3, [sp, #4]
 8001074:	f413 5f80 	tst.w	r3, #4096	; 0x1000
 8001078:	d01d      	beq.n	80010b6 <LAN8742_GetLinkState+0xb2>
    {
      return LAN8742_STATUS_AUTONEGO_NOTDONE;
    }
    
    if((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_100BTX_FD)
 800107a:	f003 031c 	and.w	r3, r3, #28
 800107e:	2b18      	cmp	r3, #24
 8001080:	d01b      	beq.n	80010ba <LAN8742_GetLinkState+0xb6>
    {
      return LAN8742_STATUS_100MBITS_FULLDUPLEX;
    }
    else if ((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_100BTX_HD)
 8001082:	2b08      	cmp	r3, #8
 8001084:	d01b      	beq.n	80010be <LAN8742_GetLinkState+0xba>
    {
      return LAN8742_STATUS_10MBITS_FULLDUPLEX;
    }
    else
    {
      return LAN8742_STATUS_10MBITS_HALFDUPLEX;
 8001086:	2b14      	cmp	r3, #20
 8001088:	bf0c      	ite	eq
 800108a:	2004      	moveq	r0, #4
 800108c:	2005      	movne	r0, #5
 800108e:	e006      	b.n	800109e <LAN8742_GetLinkState+0x9a>
    return LAN8742_STATUS_READ_ERROR;
 8001090:	f06f 0004 	mvn.w	r0, #4
 8001094:	e003      	b.n	800109e <LAN8742_GetLinkState+0x9a>
    return LAN8742_STATUS_READ_ERROR;
 8001096:	f06f 0004 	mvn.w	r0, #4
 800109a:	e000      	b.n	800109e <LAN8742_GetLinkState+0x9a>
    return LAN8742_STATUS_LINK_DOWN;    
 800109c:	2001      	movs	r0, #1
    }				
  }
}
 800109e:	b002      	add	sp, #8
 80010a0:	bd10      	pop	{r4, pc}
    return LAN8742_STATUS_READ_ERROR;
 80010a2:	f06f 0004 	mvn.w	r0, #4
 80010a6:	e7fa      	b.n	800109e <LAN8742_GetLinkState+0x9a>
      return LAN8742_STATUS_100MBITS_FULLDUPLEX;
 80010a8:	2002      	movs	r0, #2
 80010aa:	e7f8      	b.n	800109e <LAN8742_GetLinkState+0x9a>
      return LAN8742_STATUS_100MBITS_HALFDUPLEX;
 80010ac:	2003      	movs	r0, #3
 80010ae:	e7f6      	b.n	800109e <LAN8742_GetLinkState+0x9a>
      return LAN8742_STATUS_READ_ERROR;
 80010b0:	f06f 0004 	mvn.w	r0, #4
 80010b4:	e7f3      	b.n	800109e <LAN8742_GetLinkState+0x9a>
      return LAN8742_STATUS_AUTONEGO_NOTDONE;
 80010b6:	2006      	movs	r0, #6
 80010b8:	e7f1      	b.n	800109e <LAN8742_GetLinkState+0x9a>
      return LAN8742_STATUS_100MBITS_FULLDUPLEX;
 80010ba:	2002      	movs	r0, #2
 80010bc:	e7ef      	b.n	800109e <LAN8742_GetLinkState+0x9a>
      return LAN8742_STATUS_100MBITS_HALFDUPLEX;
 80010be:	2003      	movs	r0, #3
 80010c0:	e7ed      	b.n	800109e <LAN8742_GetLinkState+0x9a>
	...

080010c4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80010c4:	b508      	push	{r3, lr}
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80010c6:	4b0b      	ldr	r3, [pc, #44]	; (80010f4 <HAL_Init+0x30>)
 80010c8:	681a      	ldr	r2, [r3, #0]
 80010ca:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80010ce:	601a      	str	r2, [r3, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80010d0:	681a      	ldr	r2, [r3, #0]
 80010d2:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80010d6:	601a      	str	r2, [r3, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80010d8:	681a      	ldr	r2, [r3, #0]
 80010da:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80010de:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80010e0:	2003      	movs	r0, #3
 80010e2:	f000 f82f 	bl	8001144 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80010e6:	200f      	movs	r0, #15
 80010e8:	f7ff fe10 	bl	8000d0c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80010ec:	f7ff fd76 	bl	8000bdc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
}
 80010f0:	2000      	movs	r0, #0
 80010f2:	bd08      	pop	{r3, pc}
 80010f4:	40023c00 	.word	0x40023c00

080010f8 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 80010f8:	4a03      	ldr	r2, [pc, #12]	; (8001108 <HAL_IncTick+0x10>)
 80010fa:	6811      	ldr	r1, [r2, #0]
 80010fc:	4b03      	ldr	r3, [pc, #12]	; (800110c <HAL_IncTick+0x14>)
 80010fe:	781b      	ldrb	r3, [r3, #0]
 8001100:	440b      	add	r3, r1
 8001102:	6013      	str	r3, [r2, #0]
}
 8001104:	4770      	bx	lr
 8001106:	bf00      	nop
 8001108:	200006b0 	.word	0x200006b0
 800110c:	20000014 	.word	0x20000014

08001110 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8001110:	4b01      	ldr	r3, [pc, #4]	; (8001118 <HAL_GetTick+0x8>)
 8001112:	6818      	ldr	r0, [r3, #0]
}
 8001114:	4770      	bx	lr
 8001116:	bf00      	nop
 8001118:	200006b0 	.word	0x200006b0

0800111c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800111c:	b538      	push	{r3, r4, r5, lr}
 800111e:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8001120:	f7ff fff6 	bl	8001110 <HAL_GetTick>
 8001124:	4605      	mov	r5, r0
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001126:	f1b4 3fff 	cmp.w	r4, #4294967295
 800112a:	d002      	beq.n	8001132 <HAL_Delay+0x16>
  {
    wait += (uint32_t)(uwTickFreq);
 800112c:	4b04      	ldr	r3, [pc, #16]	; (8001140 <HAL_Delay+0x24>)
 800112e:	781b      	ldrb	r3, [r3, #0]
 8001130:	441c      	add	r4, r3
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001132:	f7ff ffed 	bl	8001110 <HAL_GetTick>
 8001136:	1b40      	subs	r0, r0, r5
 8001138:	42a0      	cmp	r0, r4
 800113a:	d3fa      	bcc.n	8001132 <HAL_Delay+0x16>
  {
  }
}
 800113c:	bd38      	pop	{r3, r4, r5, pc}
 800113e:	bf00      	nop
 8001140:	20000014 	.word	0x20000014

08001144 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001144:	4907      	ldr	r1, [pc, #28]	; (8001164 <HAL_NVIC_SetPriorityGrouping+0x20>)
 8001146:	68ca      	ldr	r2, [r1, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001148:	0203      	lsls	r3, r0, #8
 800114a:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800114e:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8001152:	0412      	lsls	r2, r2, #16
 8001154:	0c12      	lsrs	r2, r2, #16
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001156:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001158:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800115c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  SCB->AIRCR =  reg_value;
 8001160:	60cb      	str	r3, [r1, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 8001162:	4770      	bx	lr
 8001164:	e000ed00 	.word	0xe000ed00

08001168 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001168:	b500      	push	{lr}
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800116a:	4b18      	ldr	r3, [pc, #96]	; (80011cc <HAL_NVIC_SetPriority+0x64>)
 800116c:	68db      	ldr	r3, [r3, #12]
 800116e:	f3c3 2302 	ubfx	r3, r3, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001172:	f1c3 0c07 	rsb	ip, r3, #7
 8001176:	f1bc 0f04 	cmp.w	ip, #4
 800117a:	bf28      	it	cs
 800117c:	f04f 0c04 	movcs.w	ip, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001180:	f103 0e04 	add.w	lr, r3, #4
 8001184:	f1be 0f06 	cmp.w	lr, #6
 8001188:	bf8c      	ite	hi
 800118a:	3b03      	subhi	r3, #3
 800118c:	2300      	movls	r3, #0

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800118e:	f04f 3eff 	mov.w	lr, #4294967295
 8001192:	fa0e fc0c 	lsl.w	ip, lr, ip
 8001196:	ea21 010c 	bic.w	r1, r1, ip
 800119a:	4099      	lsls	r1, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800119c:	fa0e f303 	lsl.w	r3, lr, r3
 80011a0:	ea22 0203 	bic.w	r2, r2, r3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80011a4:	4311      	orrs	r1, r2
  if ((int32_t)(IRQn) >= 0)
 80011a6:	2800      	cmp	r0, #0
 80011a8:	db09      	blt.n	80011be <HAL_NVIC_SetPriority+0x56>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80011aa:	0109      	lsls	r1, r1, #4
 80011ac:	b2c9      	uxtb	r1, r1
 80011ae:	f100 4060 	add.w	r0, r0, #3758096384	; 0xe0000000
 80011b2:	f500 4061 	add.w	r0, r0, #57600	; 0xe100
 80011b6:	f880 1300 	strb.w	r1, [r0, #768]	; 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 80011ba:	f85d fb04 	ldr.w	pc, [sp], #4
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80011be:	f000 000f 	and.w	r0, r0, #15
 80011c2:	0109      	lsls	r1, r1, #4
 80011c4:	b2c9      	uxtb	r1, r1
 80011c6:	4b02      	ldr	r3, [pc, #8]	; (80011d0 <HAL_NVIC_SetPriority+0x68>)
 80011c8:	5419      	strb	r1, [r3, r0]
 80011ca:	e7f6      	b.n	80011ba <HAL_NVIC_SetPriority+0x52>
 80011cc:	e000ed00 	.word	0xe000ed00
 80011d0:	e000ed14 	.word	0xe000ed14

080011d4 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 80011d4:	2800      	cmp	r0, #0
 80011d6:	db08      	blt.n	80011ea <HAL_NVIC_EnableIRQ+0x16>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80011d8:	0942      	lsrs	r2, r0, #5
 80011da:	f000 001f 	and.w	r0, r0, #31
 80011de:	2301      	movs	r3, #1
 80011e0:	fa03 f000 	lsl.w	r0, r3, r0
 80011e4:	4b01      	ldr	r3, [pc, #4]	; (80011ec <HAL_NVIC_EnableIRQ+0x18>)
 80011e6:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 80011ea:	4770      	bx	lr
 80011ec:	e000e100 	.word	0xe000e100

080011f0 <ETH_UpdateDescriptor>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_UpdateDescriptor(ETH_HandleTypeDef *heth)
{
 80011f0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80011f4:	b083      	sub	sp, #12
  uint32_t descidx;
  uint32_t desccount;
  ETH_DMADescTypeDef *dmarxdesc;
  uint8_t *buff = NULL;
 80011f6:	2300      	movs	r3, #0
 80011f8:	9301      	str	r3, [sp, #4]
  uint8_t allocStatus = 1U;

  descidx = heth->RxDescList.RxBuildDescIdx;
 80011fa:	6e87      	ldr	r7, [r0, #104]	; 0x68
  dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 80011fc:	f107 0312 	add.w	r3, r7, #18
 8001200:	f850 4023 	ldr.w	r4, [r0, r3, lsl #2]
  desccount = heth->RxDescList.RxBuildDescCnt;
 8001204:	6ec5      	ldr	r5, [r0, #108]	; 0x6c

  while ((desccount > 0U) && (allocStatus != 0U))
 8001206:	2d00      	cmp	r5, #0
 8001208:	d035      	beq.n	8001276 <ETH_UpdateDescriptor+0x86>
 800120a:	4606      	mov	r6, r0
      {
        WRITE_REG(dmarxdesc->DESC1, ETH_DMARXDESC_DIC | ETH_RX_BUF_SIZE | ETH_DMARXDESC_RCH);
      }
      else
      {
        WRITE_REG(dmarxdesc->DESC1, ETH_RX_BUF_SIZE | ETH_DMARXDESC_RCH);
 800120c:	f244 59f8 	movw	r9, #17912	; 0x45f8
        WRITE_REG(dmarxdesc->DESC1, ETH_DMARXDESC_DIC | ETH_RX_BUF_SIZE | ETH_DMARXDESC_RCH);
 8001210:	f8df 8068 	ldr.w	r8, [pc, #104]	; 800127c <ETH_UpdateDescriptor+0x8c>
 8001214:	e01a      	b.n	800124c <ETH_UpdateDescriptor+0x5c>
      HAL_ETH_RxAllocateCallback(&buff);
 8001216:	a801      	add	r0, sp, #4
 8001218:	f002 fa26 	bl	8003668 <HAL_ETH_RxAllocateCallback>
      if (buff == NULL)
 800121c:	9b01      	ldr	r3, [sp, #4]
 800121e:	b1f3      	cbz	r3, 800125e <ETH_UpdateDescriptor+0x6e>
        WRITE_REG(dmarxdesc->BackupAddr0, (uint32_t)buff);
 8001220:	6223      	str	r3, [r4, #32]
        WRITE_REG(dmarxdesc->DESC2, (uint32_t)buff);
 8001222:	60a3      	str	r3, [r4, #8]
 8001224:	e015      	b.n	8001252 <ETH_UpdateDescriptor+0x62>
        WRITE_REG(dmarxdesc->DESC1, ETH_RX_BUF_SIZE | ETH_DMARXDESC_RCH);
 8001226:	f8c4 9004 	str.w	r9, [r4, #4]
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 800122a:	f3bf 8f5f 	dmb	sy
         is fully performed.
         The __DMB() instruction is added to avoid any potential compiler optimization that
         may lead to abnormal behavior. */
      __DMB();

      SET_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_OWN);
 800122e:	6823      	ldr	r3, [r4, #0]
 8001230:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8001234:	6023      	str	r3, [r4, #0]

      /* Increment current rx descriptor index */
      INCR_RX_DESC_INDEX(descidx, 1U);
 8001236:	1c7b      	adds	r3, r7, #1
 8001238:	2b03      	cmp	r3, #3
 800123a:	bf8c      	ite	hi
 800123c:	3f03      	subhi	r7, #3
 800123e:	461f      	movls	r7, r3
      /* Get current descriptor address */
      dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 8001240:	f107 0312 	add.w	r3, r7, #18
 8001244:	f856 4023 	ldr.w	r4, [r6, r3, lsl #2]
  while ((desccount > 0U) && (allocStatus != 0U))
 8001248:	3d01      	subs	r5, #1
 800124a:	d009      	beq.n	8001260 <ETH_UpdateDescriptor+0x70>
    if (READ_REG(dmarxdesc->BackupAddr0) == 0U)
 800124c:	6a23      	ldr	r3, [r4, #32]
 800124e:	2b00      	cmp	r3, #0
 8001250:	d0e1      	beq.n	8001216 <ETH_UpdateDescriptor+0x26>
      if (heth->RxDescList.ItMode == 0U)
 8001252:	6db3      	ldr	r3, [r6, #88]	; 0x58
 8001254:	2b00      	cmp	r3, #0
 8001256:	d1e6      	bne.n	8001226 <ETH_UpdateDescriptor+0x36>
        WRITE_REG(dmarxdesc->DESC1, ETH_DMARXDESC_DIC | ETH_RX_BUF_SIZE | ETH_DMARXDESC_RCH);
 8001258:	f8c4 8004 	str.w	r8, [r4, #4]
 800125c:	e7e5      	b.n	800122a <ETH_UpdateDescriptor+0x3a>
  while ((desccount > 0U) && (allocStatus != 0U))
 800125e:	b905      	cbnz	r5, 8001262 <ETH_UpdateDescriptor+0x72>
      INCR_RX_DESC_INDEX(descidx, 1U);
 8001260:	2500      	movs	r5, #0
      desccount--;
    }
  }

  if (heth->RxDescList.RxBuildDescCnt != desccount)
 8001262:	6ef3      	ldr	r3, [r6, #108]	; 0x6c
 8001264:	42ab      	cmp	r3, r5
 8001266:	d006      	beq.n	8001276 <ETH_UpdateDescriptor+0x86>
  {
    /* Set the Tail pointer address */
    WRITE_REG(heth->Instance->DMARPDR, 0);
 8001268:	6833      	ldr	r3, [r6, #0]
 800126a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800126e:	2200      	movs	r2, #0
 8001270:	609a      	str	r2, [r3, #8]

    heth->RxDescList.RxBuildDescIdx = descidx;
 8001272:	66b7      	str	r7, [r6, #104]	; 0x68
    heth->RxDescList.RxBuildDescCnt = desccount;
 8001274:	66f5      	str	r5, [r6, #108]	; 0x6c
  }
}
 8001276:	b003      	add	sp, #12
 8001278:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800127c:	800045f8 	.word	0x800045f8

08001280 <ETH_Prepare_Tx_Descriptors>:
  * @param  pTxConfig: Tx packet configuration
  * @param  ItMode: Enable or disable Tx EOT interrept
  * @retval Status
  */
static uint32_t ETH_Prepare_Tx_Descriptors(ETH_HandleTypeDef *heth, ETH_TxPacketConfig *pTxConfig, uint32_t ItMode)
{
 8001280:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  ETH_TxDescListTypeDef *dmatxdesclist = &heth->TxDescList;
  uint32_t descidx = dmatxdesclist->CurTxDesc;
 8001284:	6a87      	ldr	r7, [r0, #40]	; 0x28
  uint32_t firstdescidx = dmatxdesclist->CurTxDesc;
  uint32_t idx;
  uint32_t descnbr = 0;
  ETH_DMADescTypeDef *dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8001286:	eb00 0c87 	add.w	ip, r0, r7, lsl #2
 800128a:	f8dc 3018 	ldr.w	r3, [ip, #24]

  ETH_BufferTypeDef  *txbuffer = pTxConfig->TxBuffer;
  uint32_t           bd_count = 0;

  /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
  if ((READ_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN) == ETH_DMATXDESC_OWN)
 800128e:	681c      	ldr	r4, [r3, #0]
 8001290:	2c00      	cmp	r4, #0
 8001292:	f2c0 80ad 	blt.w	80013f0 <ETH_Prepare_Tx_Descriptors+0x170>
 8001296:	4690      	mov	r8, r2
      || (dmatxdesclist->PacketAddress[descidx] != NULL))
 8001298:	f8dc 402c 	ldr.w	r4, [ip, #44]	; 0x2c
 800129c:	2c00      	cmp	r4, #0
 800129e:	f040 80a9 	bne.w	80013f4 <ETH_Prepare_Tx_Descriptors+0x174>
  ETH_BufferTypeDef  *txbuffer = pTxConfig->TxBuffer;
 80012a2:	688c      	ldr	r4, [r1, #8]


  descnbr += 1U;

  /* Set header or buffer 1 address */
  WRITE_REG(dmatxdesc->DESC2, (uint32_t)txbuffer->buffer);
 80012a4:	6825      	ldr	r5, [r4, #0]
 80012a6:	609d      	str	r5, [r3, #8]

  /* Set header or buffer 1 Length */
  MODIFY_REG(dmatxdesc->DESC1, ETH_DMATXDESC_TBS1, txbuffer->len);
 80012a8:	685e      	ldr	r6, [r3, #4]
 80012aa:	f426 56ff 	bic.w	r6, r6, #8160	; 0x1fe0
 80012ae:	f026 061f 	bic.w	r6, r6, #31
 80012b2:	6865      	ldr	r5, [r4, #4]
 80012b4:	4335      	orrs	r5, r6
 80012b6:	605d      	str	r5, [r3, #4]

  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CSUM) != 0U)
 80012b8:	680d      	ldr	r5, [r1, #0]
 80012ba:	f015 0f01 	tst.w	r5, #1
 80012be:	d005      	beq.n	80012cc <ETH_Prepare_Tx_Descriptors+0x4c>
  {
    MODIFY_REG(dmatxdesc->DESC0, ETH_DMATXDESC_CIC, pTxConfig->ChecksumCtrl);
 80012c0:	681e      	ldr	r6, [r3, #0]
 80012c2:	f426 0640 	bic.w	r6, r6, #12582912	; 0xc00000
 80012c6:	694d      	ldr	r5, [r1, #20]
 80012c8:	4335      	orrs	r5, r6
 80012ca:	601d      	str	r5, [r3, #0]
  }

  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CRCPAD) != 0U)
 80012cc:	680d      	ldr	r5, [r1, #0]
 80012ce:	f015 0f20 	tst.w	r5, #32
 80012d2:	d005      	beq.n	80012e0 <ETH_Prepare_Tx_Descriptors+0x60>
  {
    MODIFY_REG(dmatxdesc->DESC0, ETH_CRC_PAD_DISABLE, pTxConfig->CRCPadCtrl);
 80012d4:	681e      	ldr	r6, [r3, #0]
 80012d6:	f026 6640 	bic.w	r6, r6, #201326592	; 0xc000000
 80012da:	690d      	ldr	r5, [r1, #16]
 80012dc:	4335      	orrs	r5, r6
 80012de:	601d      	str	r5, [r3, #0]
  }


  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_VLANTAG) != 0U)
 80012e0:	6809      	ldr	r1, [r1, #0]
 80012e2:	f011 0f04 	tst.w	r1, #4
 80012e6:	d003      	beq.n	80012f0 <ETH_Prepare_Tx_Descriptors+0x70>
  {
    /* Set Vlan Type */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_VF);
 80012e8:	6819      	ldr	r1, [r3, #0]
 80012ea:	f041 0180 	orr.w	r1, r1, #128	; 0x80
 80012ee:	6019      	str	r1, [r3, #0]
  }

  /* Mark it as First Descriptor */
  SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_FS);
 80012f0:	6819      	ldr	r1, [r3, #0]
 80012f2:	f041 5180 	orr.w	r1, r1, #268435456	; 0x10000000
 80012f6:	6019      	str	r1, [r3, #0]
 80012f8:	f3bf 8f5f 	dmb	sy

  /* Ensure rest of descriptor is written to RAM before the OWN bit */
  __DMB();
  /* set OWN bit of FIRST descriptor */
  SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN);
 80012fc:	6819      	ldr	r1, [r3, #0]
 80012fe:	f041 4100 	orr.w	r1, r1, #2147483648	; 0x80000000
 8001302:	6019      	str	r1, [r3, #0]

  /* only if the packet is split into more than one descriptors > 1 */
  while (txbuffer->next != NULL)
 8001304:	68a1      	ldr	r1, [r4, #8]
 8001306:	2900      	cmp	r1, #0
 8001308:	d053      	beq.n	80013b2 <ETH_Prepare_Tx_Descriptors+0x132>
  uint32_t descidx = dmatxdesclist->CurTxDesc;
 800130a:	463d      	mov	r5, r7
  while (txbuffer->next != NULL)
 800130c:	2601      	movs	r6, #1
 800130e:	e02c      	b.n	800136a <ETH_Prepare_Tx_Descriptors+0xea>
      SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
    }
    else
    {
      /* Clear Interrupt on completion bit */
      CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 8001310:	6819      	ldr	r1, [r3, #0]
 8001312:	f021 4180 	bic.w	r1, r1, #1073741824	; 0x40000000
 8001316:	6019      	str	r1, [r3, #0]
    }
    /* Increment current tx descriptor index */
    INCR_TX_DESC_INDEX(descidx, 1U);
 8001318:	1c6b      	adds	r3, r5, #1
 800131a:	2b03      	cmp	r3, #3
 800131c:	bf8c      	ite	hi
 800131e:	3d03      	subhi	r5, #3
 8001320:	461d      	movls	r5, r3
    /* Get current descriptor address */
    dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8001322:	eb00 0e85 	add.w	lr, r0, r5, lsl #2
 8001326:	f8de 3018 	ldr.w	r3, [lr, #24]

    /* Clear the FD bit of new Descriptor */
    CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_FS);
 800132a:	6819      	ldr	r1, [r3, #0]
 800132c:	f021 5180 	bic.w	r1, r1, #268435456	; 0x10000000
 8001330:	6019      	str	r1, [r3, #0]

    /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
    if ((READ_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN) == ETH_DMATXDESC_OWN)
 8001332:	6819      	ldr	r1, [r3, #0]
 8001334:	2900      	cmp	r1, #0
 8001336:	db24      	blt.n	8001382 <ETH_Prepare_Tx_Descriptors+0x102>
        || (dmatxdesclist->PacketAddress[descidx] != NULL))
 8001338:	f8de 102c 	ldr.w	r1, [lr, #44]	; 0x2c
 800133c:	bb09      	cbnz	r1, 8001382 <ETH_Prepare_Tx_Descriptors+0x102>
    }

    descnbr += 1U;

    /* Get the next Tx buffer in the list */
    txbuffer = txbuffer->next;
 800133e:	68a4      	ldr	r4, [r4, #8]

    /* Set header or buffer 1 address */
    WRITE_REG(dmatxdesc->DESC2, (uint32_t)txbuffer->buffer);
 8001340:	6821      	ldr	r1, [r4, #0]
 8001342:	6099      	str	r1, [r3, #8]

    /* Set header or buffer 1 Length */
    MODIFY_REG(dmatxdesc->DESC1, ETH_DMATXDESC_TBS1, txbuffer->len);
 8001344:	6859      	ldr	r1, [r3, #4]
 8001346:	f421 51ff 	bic.w	r1, r1, #8160	; 0x1fe0
 800134a:	f021 011f 	bic.w	r1, r1, #31
 800134e:	6862      	ldr	r2, [r4, #4]
 8001350:	4311      	orrs	r1, r2
 8001352:	6059      	str	r1, [r3, #4]
 8001354:	f3bf 8f5f 	dmb	sy
    bd_count += 1U;

    /* Ensure rest of descriptor is written to RAM before the OWN bit */
    __DMB();
    /* Set Own bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN);
 8001358:	6819      	ldr	r1, [r3, #0]
 800135a:	f041 4100 	orr.w	r1, r1, #2147483648	; 0x80000000
 800135e:	6019      	str	r1, [r3, #0]
  while (txbuffer->next != NULL)
 8001360:	f106 0e01 	add.w	lr, r6, #1
 8001364:	68a1      	ldr	r1, [r4, #8]
 8001366:	b331      	cbz	r1, 80013b6 <ETH_Prepare_Tx_Descriptors+0x136>
 8001368:	4676      	mov	r6, lr
    CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_LS);
 800136a:	6819      	ldr	r1, [r3, #0]
 800136c:	f021 5100 	bic.w	r1, r1, #536870912	; 0x20000000
 8001370:	6019      	str	r1, [r3, #0]
    if (ItMode != ((uint32_t)RESET))
 8001372:	f1b8 0f00 	cmp.w	r8, #0
 8001376:	d0cb      	beq.n	8001310 <ETH_Prepare_Tx_Descriptors+0x90>
      SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 8001378:	6819      	ldr	r1, [r3, #0]
 800137a:	f041 4180 	orr.w	r1, r1, #1073741824	; 0x40000000
 800137e:	6019      	str	r1, [r3, #0]
 8001380:	e7ca      	b.n	8001318 <ETH_Prepare_Tx_Descriptors+0x98>
      dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8001382:	f8dc 2018 	ldr.w	r2, [ip, #24]
      for (idx = 0; idx < descnbr; idx ++)
 8001386:	2e00      	cmp	r6, #0
 8001388:	d037      	beq.n	80013fa <ETH_Prepare_Tx_Descriptors+0x17a>
 800138a:	2100      	movs	r1, #0
 800138c:	f3bf 8f5f 	dmb	sy
        CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN);
 8001390:	6813      	ldr	r3, [r2, #0]
 8001392:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8001396:	6013      	str	r3, [r2, #0]
        INCR_TX_DESC_INDEX(descidx, 1U);
 8001398:	1c7b      	adds	r3, r7, #1
 800139a:	2b03      	cmp	r3, #3
 800139c:	bf8c      	ite	hi
 800139e:	3f03      	subhi	r7, #3
 80013a0:	461f      	movls	r7, r3
        dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 80013a2:	eb00 0387 	add.w	r3, r0, r7, lsl #2
 80013a6:	699a      	ldr	r2, [r3, #24]
      for (idx = 0; idx < descnbr; idx ++)
 80013a8:	3101      	adds	r1, #1
 80013aa:	428e      	cmp	r6, r1
 80013ac:	d1ee      	bne.n	800138c <ETH_Prepare_Tx_Descriptors+0x10c>
      return HAL_ETH_ERROR_BUSY;
 80013ae:	2002      	movs	r0, #2
 80013b0:	e021      	b.n	80013f6 <ETH_Prepare_Tx_Descriptors+0x176>
  uint32_t descidx = dmatxdesclist->CurTxDesc;
 80013b2:	463d      	mov	r5, r7
  uint32_t           bd_count = 0;
 80013b4:	2600      	movs	r6, #0
  }

  if (ItMode != ((uint32_t)RESET))
 80013b6:	f1b8 0f00 	cmp.w	r8, #0
 80013ba:	d014      	beq.n	80013e6 <ETH_Prepare_Tx_Descriptors+0x166>
  {
    /* Set Interrupt on completion bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 80013bc:	681a      	ldr	r2, [r3, #0]
 80013be:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80013c2:	601a      	str	r2, [r3, #0]
    /* Clear Interrupt on completion bit */
    CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
  }

  /* Mark it as LAST descriptor */
  SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_LS);
 80013c4:	681a      	ldr	r2, [r3, #0]
 80013c6:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 80013ca:	601a      	str	r2, [r3, #0]
  /* Save the current packet address to expose it to the application */
  dmatxdesclist->PacketAddress[descidx] = dmatxdesclist->CurrentPacketAddress;
 80013cc:	eb00 0385 	add.w	r3, r0, r5, lsl #2
 80013d0:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 80013d2:	62da      	str	r2, [r3, #44]	; 0x2c

  dmatxdesclist->CurTxDesc = descidx;
 80013d4:	6285      	str	r5, [r0, #40]	; 0x28
  __ASM volatile ("cpsid i" : : : "memory");
 80013d6:	b672      	cpsid	i

  /* disable the interrupt */
  __disable_irq();

  dmatxdesclist->BuffersInUse += bd_count + 1U;
 80013d8:	6c03      	ldr	r3, [r0, #64]	; 0x40
 80013da:	3301      	adds	r3, #1
 80013dc:	441e      	add	r6, r3
 80013de:	6406      	str	r6, [r0, #64]	; 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 80013e0:	b662      	cpsie	i
  /* Enable interrupts back */
  __enable_irq();


  /* Return function status */
  return HAL_ETH_ERROR_NONE;
 80013e2:	2000      	movs	r0, #0
 80013e4:	e007      	b.n	80013f6 <ETH_Prepare_Tx_Descriptors+0x176>
    CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 80013e6:	681a      	ldr	r2, [r3, #0]
 80013e8:	f022 4280 	bic.w	r2, r2, #1073741824	; 0x40000000
 80013ec:	601a      	str	r2, [r3, #0]
 80013ee:	e7e9      	b.n	80013c4 <ETH_Prepare_Tx_Descriptors+0x144>
    return HAL_ETH_ERROR_BUSY;
 80013f0:	2002      	movs	r0, #2
 80013f2:	e000      	b.n	80013f6 <ETH_Prepare_Tx_Descriptors+0x176>
 80013f4:	2002      	movs	r0, #2
}
 80013f6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      return HAL_ETH_ERROR_BUSY;
 80013fa:	2002      	movs	r0, #2
 80013fc:	e7fb      	b.n	80013f6 <ETH_Prepare_Tx_Descriptors+0x176>
	...

08001400 <ETH_SetMACConfig>:
{
 8001400:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001404:	4605      	mov	r5, r0
 8001406:	460c      	mov	r4, r1
  tmpreg1 = (heth->Instance)->MACCR;
 8001408:	6801      	ldr	r1, [r0, #0]
 800140a:	680b      	ldr	r3, [r1, #0]
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 800140c:	4e3b      	ldr	r6, [pc, #236]	; (80014fc <ETH_SetMACConfig+0xfc>)
 800140e:	401e      	ands	r6, r3
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8001410:	7c23      	ldrb	r3, [r4, #16]
 8001412:	2b00      	cmp	r3, #0
 8001414:	bf0c      	ite	eq
 8001416:	f44f 0e00 	moveq.w	lr, #8388608	; 0x800000
 800141a:	f04f 0e00 	movne.w	lr, #0
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 800141e:	7c63      	ldrb	r3, [r4, #17]
 8001420:	2b00      	cmp	r3, #0
 8001422:	bf0c      	ite	eq
 8001424:	f44f 0c80 	moveq.w	ip, #4194304	; 0x400000
 8001428:	f04f 0c00 	movne.w	ip, #0
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 800142c:	f894 801f 	ldrb.w	r8, [r4, #31]
 8001430:	68a3      	ldr	r3, [r4, #8]
 8001432:	6962      	ldr	r2, [r4, #20]
 8001434:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 8001436:	7fa2      	ldrb	r2, [r4, #30]
 8001438:	2a00      	cmp	r2, #0
 800143a:	bf0c      	ite	eq
 800143c:	f44f 5000 	moveq.w	r0, #8192	; 0x2000
 8001440:	2000      	movne	r0, #0
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 8001442:	f894 901c 	ldrb.w	r9, [r4, #28]
 8001446:	69a2      	ldr	r2, [r4, #24]
 8001448:	4313      	orrs	r3, r2
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 800144a:	7927      	ldrb	r7, [r4, #4]
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 800144c:	f894 2020 	ldrb.w	r2, [r4, #32]
 8001450:	2a00      	cmp	r2, #0
 8001452:	bf0c      	ite	eq
 8001454:	f44f 7a00 	moveq.w	sl, #512	; 0x200
 8001458:	f04f 0a00 	movne.w	sl, #0
 800145c:	6a62      	ldr	r2, [r4, #36]	; 0x24
 800145e:	4313      	orrs	r3, r2
 8001460:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8001464:	ea43 3309 	orr.w	r3, r3, r9, lsl #12
 8001468:	ea43 2387 	orr.w	r3, r3, r7, lsl #10
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 800146c:	7be7      	ldrb	r7, [r4, #15]
 800146e:	ea43 13c7 	orr.w	r3, r3, r7, lsl #7
                        ((uint32_t)macconf->DeferralCheck << 4U));
 8001472:	f894 7028 	ldrb.w	r7, [r4, #40]	; 0x28
 8001476:	ea43 1307 	orr.w	r3, r3, r7, lsl #4
 800147a:	4333      	orrs	r3, r6
 800147c:	ea43 030e 	orr.w	r3, r3, lr
 8001480:	ea43 030c 	orr.w	r3, r3, ip
 8001484:	4303      	orrs	r3, r0
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8001486:	ea43 030a 	orr.w	r3, r3, sl
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 800148a:	600b      	str	r3, [r1, #0]
  tmpreg1 = (heth->Instance)->MACCR;
 800148c:	682b      	ldr	r3, [r5, #0]
 800148e:	681e      	ldr	r6, [r3, #0]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8001490:	2001      	movs	r0, #1
 8001492:	f7ff fe43 	bl	800111c <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 8001496:	682b      	ldr	r3, [r5, #0]
 8001498:	601e      	str	r6, [r3, #0]
  tmpreg1 = (heth->Instance)->MACFCR;
 800149a:	6828      	ldr	r0, [r5, #0]
 800149c:	6981      	ldr	r1, [r0, #24]
  tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 800149e:	f021 01be 	bic.w	r1, r1, #190	; 0xbe
 80014a2:	0409      	lsls	r1, r1, #16
 80014a4:	0c09      	lsrs	r1, r1, #16
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 80014a6:	6ca6      	ldr	r6, [r4, #72]	; 0x48
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 80014a8:	f894 304c 	ldrb.w	r3, [r4, #76]	; 0x4c
 80014ac:	2b00      	cmp	r3, #0
 80014ae:	bf0c      	ite	eq
 80014b0:	2380      	moveq	r3, #128	; 0x80
 80014b2:	2300      	movne	r3, #0
 80014b4:	6d22      	ldr	r2, [r4, #80]	; 0x50
 80014b6:	ea42 4206 	orr.w	r2, r2, r6, lsl #16
 80014ba:	430a      	orrs	r2, r1
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 80014bc:	f894 1055 	ldrb.w	r1, [r4, #85]	; 0x55
 80014c0:	2901      	cmp	r1, #1
 80014c2:	bf0c      	ite	eq
 80014c4:	2108      	moveq	r1, #8
 80014c6:	2100      	movne	r1, #0
 80014c8:	431a      	orrs	r2, r3
                        ((uint32_t)((macconf->ReceiveFlowControl == ENABLE) ? 1U : 0U) << 2U) |
 80014ca:	f894 3056 	ldrb.w	r3, [r4, #86]	; 0x56
 80014ce:	2b01      	cmp	r3, #1
 80014d0:	bf0c      	ite	eq
 80014d2:	2304      	moveq	r3, #4
 80014d4:	2300      	movne	r3, #0
 80014d6:	430a      	orrs	r2, r1
                        ((uint32_t)((macconf->TransmitFlowControl == ENABLE) ? 1U : 0U) << 1U));
 80014d8:	f894 1054 	ldrb.w	r1, [r4, #84]	; 0x54
 80014dc:	2901      	cmp	r1, #1
 80014de:	bf0c      	ite	eq
 80014e0:	2102      	moveq	r1, #2
 80014e2:	2100      	movne	r1, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 80014e4:	4313      	orrs	r3, r2
 80014e6:	430b      	orrs	r3, r1
  (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 80014e8:	6183      	str	r3, [r0, #24]
  tmpreg1 = (heth->Instance)->MACFCR;
 80014ea:	682b      	ldr	r3, [r5, #0]
 80014ec:	699c      	ldr	r4, [r3, #24]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80014ee:	2001      	movs	r0, #1
 80014f0:	f7ff fe14 	bl	800111c <HAL_Delay>
  (heth->Instance)->MACFCR = tmpreg1;
 80014f4:	682b      	ldr	r3, [r5, #0]
 80014f6:	619c      	str	r4, [r3, #24]
}
 80014f8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80014fc:	ff20810f 	.word	0xff20810f

08001500 <ETH_SetDMAConfig>:
{
 8001500:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001502:	4605      	mov	r5, r0
 8001504:	460c      	mov	r4, r1
  tmpreg1 = (heth->Instance)->DMAOMR;
 8001506:	6802      	ldr	r2, [r0, #0]
 8001508:	f502 5380 	add.w	r3, r2, #4096	; 0x1000
 800150c:	699b      	ldr	r3, [r3, #24]
  tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 800150e:	482c      	ldr	r0, [pc, #176]	; (80015c0 <ETH_SetDMAConfig+0xc0>)
 8001510:	4018      	ands	r0, r3
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8001512:	7b0b      	ldrb	r3, [r1, #12]
 8001514:	2b00      	cmp	r3, #0
 8001516:	bf0c      	ite	eq
 8001518:	f04f 6680 	moveq.w	r6, #67108864	; 0x4000000
 800151c:	2600      	movne	r6, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 800151e:	f891 c00d 	ldrb.w	ip, [r1, #13]
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 8001522:	7f4b      	ldrb	r3, [r1, #29]
 8001524:	2b00      	cmp	r3, #0
 8001526:	bf0c      	ite	eq
 8001528:	f44f 1180 	moveq.w	r1, #1048576	; 0x100000
 800152c:	2100      	movne	r1, #0
 800152e:	6963      	ldr	r3, [r4, #20]
 8001530:	6a27      	ldr	r7, [r4, #32]
 8001532:	433b      	orrs	r3, r7
 8001534:	ea43 634c 	orr.w	r3, r3, ip, lsl #25
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8001538:	f894 c00e 	ldrb.w	ip, [r4, #14]
 800153c:	ea43 534c 	orr.w	r3, r3, ip, lsl #21
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 8001540:	f894 c01c 	ldrb.w	ip, [r4, #28]
 8001544:	ea43 13cc 	orr.w	r3, r3, ip, lsl #7
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 8001548:	f894 c01e 	ldrb.w	ip, [r4, #30]
 800154c:	ea43 138c 	orr.w	r3, r3, ip, lsl #6
                        ((uint32_t)dmaconf->SecondFrameOperate << 2U));
 8001550:	f894 c024 	ldrb.w	ip, [r4, #36]	; 0x24
 8001554:	ea43 038c 	orr.w	r3, r3, ip, lsl #2
 8001558:	4303      	orrs	r3, r0
 800155a:	4333      	orrs	r3, r6
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 800155c:	430b      	orrs	r3, r1
  (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 800155e:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001562:	6193      	str	r3, [r2, #24]
  tmpreg1 = (heth->Instance)->DMAOMR;
 8001564:	682b      	ldr	r3, [r5, #0]
 8001566:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800156a:	699e      	ldr	r6, [r3, #24]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 800156c:	2001      	movs	r0, #1
 800156e:	f7ff fdd5 	bl	800111c <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 8001572:	682b      	ldr	r3, [r5, #0]
 8001574:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001578:	619e      	str	r6, [r3, #24]
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 800157a:	682a      	ldr	r2, [r5, #0]
                                        (dmaconf->DescriptorSkipLength << 2U) |
 800157c:	68a3      	ldr	r3, [r4, #8]
 800157e:	69a1      	ldr	r1, [r4, #24]
 8001580:	430b      	orrs	r3, r1
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 8001582:	f894 1025 	ldrb.w	r1, [r4, #37]	; 0x25
                                        (dmaconf->DescriptorSkipLength << 2U) |
 8001586:	ea43 13c1 	orr.w	r3, r3, r1, lsl #7
 800158a:	6921      	ldr	r1, [r4, #16]
 800158c:	430b      	orrs	r3, r1
 800158e:	6821      	ldr	r1, [r4, #0]
 8001590:	430b      	orrs	r3, r1
 8001592:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 8001594:	ea43 0381 	orr.w	r3, r3, r1, lsl #2
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8001598:	7921      	ldrb	r1, [r4, #4]
                                        (dmaconf->DescriptorSkipLength << 2U) |
 800159a:	ea43 6341 	orr.w	r3, r3, r1, lsl #25
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 800159e:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80015a2:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80015a6:	6013      	str	r3, [r2, #0]
  tmpreg1 = (heth->Instance)->DMABMR;
 80015a8:	682b      	ldr	r3, [r5, #0]
 80015aa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80015ae:	681c      	ldr	r4, [r3, #0]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80015b0:	2001      	movs	r0, #1
 80015b2:	f7ff fdb3 	bl	800111c <HAL_Delay>
  (heth->Instance)->DMABMR = tmpreg1;
 80015b6:	682b      	ldr	r3, [r5, #0]
 80015b8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80015bc:	601c      	str	r4, [r3, #0]
}
 80015be:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80015c0:	f8de3f23 	.word	0xf8de3f23

080015c4 <ETH_FlushTransmitFIFO>:
{
 80015c4:	b510      	push	{r4, lr}
 80015c6:	b082      	sub	sp, #8
 80015c8:	4604      	mov	r4, r0
  __IO uint32_t tmpreg = 0;
 80015ca:	2300      	movs	r3, #0
 80015cc:	9301      	str	r3, [sp, #4]
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_FTF;
 80015ce:	6803      	ldr	r3, [r0, #0]
 80015d0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80015d4:	699a      	ldr	r2, [r3, #24]
 80015d6:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 80015da:	619a      	str	r2, [r3, #24]
  tmpreg = (heth->Instance)->DMAOMR;
 80015dc:	6803      	ldr	r3, [r0, #0]
 80015de:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80015e2:	699b      	ldr	r3, [r3, #24]
 80015e4:	9301      	str	r3, [sp, #4]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80015e6:	2001      	movs	r0, #1
 80015e8:	f7ff fd98 	bl	800111c <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg;
 80015ec:	6823      	ldr	r3, [r4, #0]
 80015ee:	9a01      	ldr	r2, [sp, #4]
 80015f0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80015f4:	619a      	str	r2, [r3, #24]
}
 80015f6:	b002      	add	sp, #8
 80015f8:	bd10      	pop	{r4, pc}
	...

080015fc <HAL_ETH_Init>:
  if (heth == NULL)
 80015fc:	2800      	cmp	r0, #0
 80015fe:	f000 8109 	beq.w	8001814 <HAL_ETH_Init+0x218>
{
 8001602:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001604:	b0a7      	sub	sp, #156	; 0x9c
 8001606:	4605      	mov	r5, r0
  if (heth->gState == HAL_ETH_STATE_RESET)
 8001608:	f8d0 3084 	ldr.w	r3, [r0, #132]	; 0x84
 800160c:	2b00      	cmp	r3, #0
 800160e:	d034      	beq.n	800167a <HAL_ETH_Init+0x7e>
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001610:	2300      	movs	r3, #0
 8001612:	9301      	str	r3, [sp, #4]
 8001614:	4b80      	ldr	r3, [pc, #512]	; (8001818 <HAL_ETH_Init+0x21c>)
 8001616:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001618:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800161c:	645a      	str	r2, [r3, #68]	; 0x44
 800161e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001620:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001624:	9301      	str	r3, [sp, #4]
 8001626:	9b01      	ldr	r3, [sp, #4]
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 8001628:	4b7c      	ldr	r3, [pc, #496]	; (800181c <HAL_ETH_Init+0x220>)
 800162a:	685a      	ldr	r2, [r3, #4]
 800162c:	f422 0200 	bic.w	r2, r2, #8388608	; 0x800000
 8001630:	605a      	str	r2, [r3, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 8001632:	685a      	ldr	r2, [r3, #4]
 8001634:	68a9      	ldr	r1, [r5, #8]
 8001636:	430a      	orrs	r2, r1
 8001638:	605a      	str	r2, [r3, #4]
  (void)SYSCFG->PMC;
 800163a:	685b      	ldr	r3, [r3, #4]
  SET_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR);
 800163c:	682b      	ldr	r3, [r5, #0]
 800163e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001642:	681a      	ldr	r2, [r3, #0]
 8001644:	f042 0201 	orr.w	r2, r2, #1
 8001648:	601a      	str	r2, [r3, #0]
  tickstart = HAL_GetTick();
 800164a:	f7ff fd61 	bl	8001110 <HAL_GetTick>
 800164e:	4606      	mov	r6, r0
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 8001650:	682b      	ldr	r3, [r5, #0]
 8001652:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001656:	681c      	ldr	r4, [r3, #0]
 8001658:	f014 0401 	ands.w	r4, r4, #1
 800165c:	d013      	beq.n	8001686 <HAL_ETH_Init+0x8a>
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 800165e:	f7ff fd57 	bl	8001110 <HAL_GetTick>
 8001662:	1b80      	subs	r0, r0, r6
 8001664:	f5b0 7ffa 	cmp.w	r0, #500	; 0x1f4
 8001668:	d9f2      	bls.n	8001650 <HAL_ETH_Init+0x54>
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 800166a:	2304      	movs	r3, #4
 800166c:	f8c5 3088 	str.w	r3, [r5, #136]	; 0x88
      heth->gState = HAL_ETH_STATE_ERROR;
 8001670:	23e0      	movs	r3, #224	; 0xe0
 8001672:	f8c5 3084 	str.w	r3, [r5, #132]	; 0x84
      return HAL_ERROR;
 8001676:	2001      	movs	r0, #1
 8001678:	e0ca      	b.n	8001810 <HAL_ETH_Init+0x214>
    heth->gState = HAL_ETH_STATE_BUSY;
 800167a:	2323      	movs	r3, #35	; 0x23
 800167c:	f8c0 3084 	str.w	r3, [r0, #132]	; 0x84
    HAL_ETH_MspInit(heth);
 8001680:	f001 fe76 	bl	8003370 <HAL_ETH_MspInit>
 8001684:	e7c4      	b.n	8001610 <HAL_ETH_Init+0x14>
  macDefaultConf.Watchdog = ENABLE;
 8001686:	2701      	movs	r7, #1
 8001688:	f88d 7044 	strb.w	r7, [sp, #68]	; 0x44
  macDefaultConf.Jabber = ENABLE;
 800168c:	f88d 7045 	strb.w	r7, [sp, #69]	; 0x45
  macDefaultConf.InterPacketGapVal = ETH_INTERFRAMEGAP_96BIT;
 8001690:	2600      	movs	r6, #0
 8001692:	960f      	str	r6, [sp, #60]	; 0x3c
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 8001694:	f88d 6053 	strb.w	r6, [sp, #83]	; 0x53
  macDefaultConf.ReceiveOwn = ENABLE;
 8001698:	f88d 7052 	strb.w	r7, [sp, #82]	; 0x52
  macDefaultConf.LoopbackMode = DISABLE;
 800169c:	f88d 6050 	strb.w	r6, [sp, #80]	; 0x50
  macDefaultConf.ChecksumOffload = ENABLE;
 80016a0:	f88d 7038 	strb.w	r7, [sp, #56]	; 0x38
  macDefaultConf.RetryTransmission = DISABLE;
 80016a4:	f88d 6054 	strb.w	r6, [sp, #84]	; 0x54
  macDefaultConf.AutomaticPadCRCStrip = DISABLE;
 80016a8:	f88d 6043 	strb.w	r6, [sp, #67]	; 0x43
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 80016ac:	9616      	str	r6, [sp, #88]	; 0x58
  macDefaultConf.DeferralCheck = DISABLE;
 80016ae:	f88d 605c 	strb.w	r6, [sp, #92]	; 0x5c
  macDefaultConf.PauseTime = 0x0U;
 80016b2:	961f      	str	r6, [sp, #124]	; 0x7c
  macDefaultConf.ZeroQuantaPause = DISABLE;
 80016b4:	f88d 6080 	strb.w	r6, [sp, #128]	; 0x80
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 80016b8:	9621      	str	r6, [sp, #132]	; 0x84
  macDefaultConf.ReceiveFlowControl = DISABLE;
 80016ba:	f88d 608a 	strb.w	r6, [sp, #138]	; 0x8a
  macDefaultConf.TransmitFlowControl = DISABLE;
 80016be:	f88d 6088 	strb.w	r6, [sp, #136]	; 0x88
  macDefaultConf.Speed = ETH_SPEED_100M;
 80016c2:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80016c6:	9312      	str	r3, [sp, #72]	; 0x48
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 80016c8:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80016cc:	9313      	str	r3, [sp, #76]	; 0x4c
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 80016ce:	f88d 6089 	strb.w	r6, [sp, #137]	; 0x89
  ETH_SetMACConfig(heth, &macDefaultConf);
 80016d2:	a90d      	add	r1, sp, #52	; 0x34
 80016d4:	4628      	mov	r0, r5
 80016d6:	f7ff fe93 	bl	8001400 <ETH_SetMACConfig>
  dmaDefaultConf.DropTCPIPChecksumErrorFrame = ENABLE;
 80016da:	f88d 7014 	strb.w	r7, [sp, #20]
  dmaDefaultConf.ReceiveStoreForward = ENABLE;
 80016de:	f88d 7015 	strb.w	r7, [sp, #21]
  dmaDefaultConf.FlushRxPacket = ENABLE;
 80016e2:	f88d 7025 	strb.w	r7, [sp, #37]	; 0x25
  dmaDefaultConf.TransmitStoreForward = ENABLE;
 80016e6:	f88d 7016 	strb.w	r7, [sp, #22]
  dmaDefaultConf.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 80016ea:	9607      	str	r6, [sp, #28]
  dmaDefaultConf.ForwardErrorFrames = DISABLE;
 80016ec:	f88d 6024 	strb.w	r6, [sp, #36]	; 0x24
  dmaDefaultConf.ForwardUndersizedGoodFrames = DISABLE;
 80016f0:	f88d 6026 	strb.w	r6, [sp, #38]	; 0x26
  dmaDefaultConf.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 80016f4:	960a      	str	r6, [sp, #40]	; 0x28
  dmaDefaultConf.SecondFrameOperate = ENABLE;
 80016f6:	f88d 702c 	strb.w	r7, [sp, #44]	; 0x2c
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 80016fa:	f88d 700c 	strb.w	r7, [sp, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 80016fe:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001702:	9304      	str	r3, [sp, #16]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8001704:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001708:	9308      	str	r3, [sp, #32]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 800170a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800170e:	9306      	str	r3, [sp, #24]
  dmaDefaultConf.EnhancedDescriptorFormat = ENABLE;
 8001710:	f88d 702d 	strb.w	r7, [sp, #45]	; 0x2d
  dmaDefaultConf.DescriptorSkipLength = 0x0U;
 8001714:	960c      	str	r6, [sp, #48]	; 0x30
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 8001716:	9602      	str	r6, [sp, #8]
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 8001718:	a902      	add	r1, sp, #8
 800171a:	4628      	mov	r0, r5
 800171c:	f7ff fef0 	bl	8001500 <ETH_SetDMAConfig>
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8001720:	f105 0c18 	add.w	ip, r5, #24
 8001724:	4623      	mov	r3, r4
    WRITE_REG(dmatxdesc->DESC0, 0x0);
 8001726:	4630      	mov	r0, r6
 8001728:	e00a      	b.n	8001740 <HAL_ETH_Init+0x144>
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc + i + 1U));
 800172a:	f103 0e28 	add.w	lr, r3, #40	; 0x28
 800172e:	68ee      	ldr	r6, [r5, #12]
 8001730:	4476      	add	r6, lr
 8001732:	60ce      	str	r6, [r1, #12]
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL);
 8001734:	58d1      	ldr	r1, [r2, r3]
 8001736:	f441 0140 	orr.w	r1, r1, #12582912	; 0xc00000
 800173a:	50d1      	str	r1, [r2, r3]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 800173c:	3328      	adds	r3, #40	; 0x28
 800173e:	3701      	adds	r7, #1
    dmatxdesc = heth->Init.TxDesc + i;
 8001740:	68ea      	ldr	r2, [r5, #12]
 8001742:	18d1      	adds	r1, r2, r3
    WRITE_REG(dmatxdesc->DESC0, 0x0);
 8001744:	50d0      	str	r0, [r2, r3]
    WRITE_REG(dmatxdesc->DESC1, 0x0);
 8001746:	6048      	str	r0, [r1, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0);
 8001748:	6088      	str	r0, [r1, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0);
 800174a:	60c8      	str	r0, [r1, #12]
    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 800174c:	f84c 1b04 	str.w	r1, [ip], #4
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_TCH);
 8001750:	58d6      	ldr	r6, [r2, r3]
 8001752:	f446 1680 	orr.w	r6, r6, #1048576	; 0x100000
 8001756:	50d6      	str	r6, [r2, r3]
    if (i < ((uint32_t)ETH_TX_DESC_CNT - 1U))
 8001758:	1e7e      	subs	r6, r7, #1
 800175a:	2e02      	cmp	r6, #2
 800175c:	d9e5      	bls.n	800172a <HAL_ETH_Init+0x12e>
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc));
 800175e:	68ee      	ldr	r6, [r5, #12]
 8001760:	60ce      	str	r6, [r1, #12]
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL);
 8001762:	58d1      	ldr	r1, [r2, r3]
 8001764:	f441 0140 	orr.w	r1, r1, #12582912	; 0xc00000
 8001768:	50d1      	str	r1, [r2, r3]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 800176a:	2f03      	cmp	r7, #3
 800176c:	d9e6      	bls.n	800173c <HAL_ETH_Init+0x140>
  heth->TxDescList.CurTxDesc = 0;
 800176e:	2300      	movs	r3, #0
 8001770:	62ab      	str	r3, [r5, #40]	; 0x28
  WRITE_REG(heth->Instance->DMATDLAR, (uint32_t) heth->Init.TxDesc);
 8001772:	682b      	ldr	r3, [r5, #0]
 8001774:	68ea      	ldr	r2, [r5, #12]
 8001776:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800177a:	611a      	str	r2, [r3, #16]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 800177c:	f105 0648 	add.w	r6, r5, #72	; 0x48
  WRITE_REG(heth->Instance->DMATDLAR, (uint32_t) heth->Init.TxDesc);
 8001780:	2001      	movs	r0, #1
    WRITE_REG(dmarxdesc->DESC0, 0x0);
 8001782:	2100      	movs	r1, #0
    dmarxdesc->DESC0 = ETH_DMARXDESC_OWN;
 8001784:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
    dmarxdesc->DESC1 = ETH_DMARXDESC_RCH | ETH_RX_BUF_SIZE;
 8001788:	f244 57f8 	movw	r7, #17912	; 0x45f8
 800178c:	e006      	b.n	800179c <HAL_ETH_Init+0x1a0>
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc + i + 1U));
 800178e:	f104 0e28 	add.w	lr, r4, #40	; 0x28
 8001792:	692a      	ldr	r2, [r5, #16]
 8001794:	4472      	add	r2, lr
 8001796:	60da      	str	r2, [r3, #12]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8001798:	3428      	adds	r4, #40	; 0x28
 800179a:	3001      	adds	r0, #1
    dmarxdesc =  heth->Init.RxDesc + i;
 800179c:	692a      	ldr	r2, [r5, #16]
 800179e:	1913      	adds	r3, r2, r4
    WRITE_REG(dmarxdesc->DESC0, 0x0);
 80017a0:	5111      	str	r1, [r2, r4]
    WRITE_REG(dmarxdesc->DESC1, 0x0);
 80017a2:	6059      	str	r1, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0);
 80017a4:	6099      	str	r1, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0);
 80017a6:	60d9      	str	r1, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0);
 80017a8:	6219      	str	r1, [r3, #32]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0);
 80017aa:	6259      	str	r1, [r3, #36]	; 0x24
    dmarxdesc->DESC0 = ETH_DMARXDESC_OWN;
 80017ac:	f842 c004 	str.w	ip, [r2, r4]
    dmarxdesc->DESC1 = ETH_DMARXDESC_RCH | ETH_RX_BUF_SIZE;
 80017b0:	605f      	str	r7, [r3, #4]
    dmarxdesc->DESC1 &= ~ETH_DMARXDESC_DIC;
 80017b2:	685a      	ldr	r2, [r3, #4]
 80017b4:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80017b8:	605a      	str	r2, [r3, #4]
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 80017ba:	f846 3b04 	str.w	r3, [r6], #4
    if (i < ((uint32_t)ETH_RX_DESC_CNT - 1U))
 80017be:	1e42      	subs	r2, r0, #1
 80017c0:	2a02      	cmp	r2, #2
 80017c2:	d9e4      	bls.n	800178e <HAL_ETH_Init+0x192>
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc));
 80017c4:	692a      	ldr	r2, [r5, #16]
 80017c6:	60da      	str	r2, [r3, #12]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 80017c8:	2803      	cmp	r0, #3
 80017ca:	d9e5      	bls.n	8001798 <HAL_ETH_Init+0x19c>
  WRITE_REG(heth->RxDescList.RxDescIdx, 0);
 80017cc:	2000      	movs	r0, #0
 80017ce:	65e8      	str	r0, [r5, #92]	; 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0);
 80017d0:	6628      	str	r0, [r5, #96]	; 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0);
 80017d2:	66a8      	str	r0, [r5, #104]	; 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0);
 80017d4:	66e8      	str	r0, [r5, #108]	; 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0);
 80017d6:	65a8      	str	r0, [r5, #88]	; 0x58
  WRITE_REG(heth->Instance->DMARDLAR, (uint32_t) heth->Init.RxDesc);
 80017d8:	682b      	ldr	r3, [r5, #0]
 80017da:	692a      	ldr	r2, [r5, #16]
 80017dc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80017e0:	60da      	str	r2, [r3, #12]
  ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 80017e2:	686a      	ldr	r2, [r5, #4]
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 80017e4:	7951      	ldrb	r1, [r2, #5]
 80017e6:	7913      	ldrb	r3, [r2, #4]
 80017e8:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 80017ec:	490c      	ldr	r1, [pc, #48]	; (8001820 <HAL_ETH_Init+0x224>)
 80017ee:	640b      	str	r3, [r1, #64]	; 0x40
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 80017f0:	78d4      	ldrb	r4, [r2, #3]
 80017f2:	7893      	ldrb	r3, [r2, #2]
 80017f4:	041b      	lsls	r3, r3, #16
 80017f6:	ea43 6304 	orr.w	r3, r3, r4, lsl #24
 80017fa:	7814      	ldrb	r4, [r2, #0]
 80017fc:	4323      	orrs	r3, r4
 80017fe:	7852      	ldrb	r2, [r2, #1]
 8001800:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 8001804:	644b      	str	r3, [r1, #68]	; 0x44
  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 8001806:	f8c5 0088 	str.w	r0, [r5, #136]	; 0x88
  heth->gState = HAL_ETH_STATE_READY;
 800180a:	2310      	movs	r3, #16
 800180c:	f8c5 3084 	str.w	r3, [r5, #132]	; 0x84
}
 8001810:	b027      	add	sp, #156	; 0x9c
 8001812:	bdf0      	pop	{r4, r5, r6, r7, pc}
    return HAL_ERROR;
 8001814:	2001      	movs	r0, #1
}
 8001816:	4770      	bx	lr
 8001818:	40023800 	.word	0x40023800
 800181c:	40013800 	.word	0x40013800
 8001820:	40028000 	.word	0x40028000

08001824 <HAL_ETH_Start>:
  if (heth->gState == HAL_ETH_STATE_READY)
 8001824:	f8d0 3084 	ldr.w	r3, [r0, #132]	; 0x84
 8001828:	2b10      	cmp	r3, #16
 800182a:	d001      	beq.n	8001830 <HAL_ETH_Start+0xc>
    return HAL_ERROR;
 800182c:	2001      	movs	r0, #1
}
 800182e:	4770      	bx	lr
{
 8001830:	b570      	push	{r4, r5, r6, lr}
 8001832:	4604      	mov	r4, r0
    heth->gState = HAL_ETH_STATE_BUSY;
 8001834:	2523      	movs	r5, #35	; 0x23
 8001836:	f8c0 5084 	str.w	r5, [r0, #132]	; 0x84
    heth->RxDescList.RxBuildDescCnt = ETH_RX_DESC_CNT;
 800183a:	2304      	movs	r3, #4
 800183c:	66c3      	str	r3, [r0, #108]	; 0x6c
    ETH_UpdateDescriptor(heth);
 800183e:	f7ff fcd7 	bl	80011f0 <ETH_UpdateDescriptor>
    SET_BIT(heth->Instance->MACCR, ETH_MACCR_TE);
 8001842:	6822      	ldr	r2, [r4, #0]
 8001844:	6813      	ldr	r3, [r2, #0]
 8001846:	f043 0308 	orr.w	r3, r3, #8
 800184a:	6013      	str	r3, [r2, #0]
    tmpreg1 = (heth->Instance)->MACCR;
 800184c:	6823      	ldr	r3, [r4, #0]
 800184e:	681e      	ldr	r6, [r3, #0]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8001850:	2001      	movs	r0, #1
 8001852:	f7ff fc63 	bl	800111c <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 8001856:	6823      	ldr	r3, [r4, #0]
 8001858:	601e      	str	r6, [r3, #0]
    SET_BIT(heth->Instance->MACCR, ETH_MACCR_RE);
 800185a:	6822      	ldr	r2, [r4, #0]
 800185c:	6813      	ldr	r3, [r2, #0]
 800185e:	f043 0304 	orr.w	r3, r3, #4
 8001862:	6013      	str	r3, [r2, #0]
    tmpreg1 = (heth->Instance)->MACCR;
 8001864:	6823      	ldr	r3, [r4, #0]
 8001866:	681e      	ldr	r6, [r3, #0]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8001868:	2001      	movs	r0, #1
 800186a:	f7ff fc57 	bl	800111c <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 800186e:	6823      	ldr	r3, [r4, #0]
 8001870:	601e      	str	r6, [r3, #0]
    ETH_FlushTransmitFIFO(heth);
 8001872:	4620      	mov	r0, r4
 8001874:	f7ff fea6 	bl	80015c4 <ETH_FlushTransmitFIFO>
    SET_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_ST);
 8001878:	6823      	ldr	r3, [r4, #0]
 800187a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800187e:	699a      	ldr	r2, [r3, #24]
 8001880:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8001884:	619a      	str	r2, [r3, #24]
    SET_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_SR);
 8001886:	6823      	ldr	r3, [r4, #0]
 8001888:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800188c:	699a      	ldr	r2, [r3, #24]
 800188e:	f042 0202 	orr.w	r2, r2, #2
 8001892:	619a      	str	r2, [r3, #24]
    heth->gState = HAL_ETH_STATE_STARTED;
 8001894:	f8c4 5084 	str.w	r5, [r4, #132]	; 0x84
    return HAL_OK;
 8001898:	2000      	movs	r0, #0
}
 800189a:	bd70      	pop	{r4, r5, r6, pc}

0800189c <HAL_ETH_Stop>:
{
 800189c:	b538      	push	{r3, r4, r5, lr}
  if (heth->gState == HAL_ETH_STATE_STARTED)
 800189e:	f8d0 3084 	ldr.w	r3, [r0, #132]	; 0x84
 80018a2:	2b23      	cmp	r3, #35	; 0x23
 80018a4:	d001      	beq.n	80018aa <HAL_ETH_Stop+0xe>
    return HAL_ERROR;
 80018a6:	2001      	movs	r0, #1
}
 80018a8:	bd38      	pop	{r3, r4, r5, pc}
 80018aa:	4604      	mov	r4, r0
    heth->gState = HAL_ETH_STATE_BUSY;
 80018ac:	f8c0 3084 	str.w	r3, [r0, #132]	; 0x84
    CLEAR_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_ST);
 80018b0:	6803      	ldr	r3, [r0, #0]
 80018b2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80018b6:	699a      	ldr	r2, [r3, #24]
 80018b8:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80018bc:	619a      	str	r2, [r3, #24]
    CLEAR_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_SR);
 80018be:	6803      	ldr	r3, [r0, #0]
 80018c0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80018c4:	699a      	ldr	r2, [r3, #24]
 80018c6:	f022 0202 	bic.w	r2, r2, #2
 80018ca:	619a      	str	r2, [r3, #24]
    CLEAR_BIT(heth->Instance->MACCR, ETH_MACCR_RE);
 80018cc:	6802      	ldr	r2, [r0, #0]
 80018ce:	6813      	ldr	r3, [r2, #0]
 80018d0:	f023 0304 	bic.w	r3, r3, #4
 80018d4:	6013      	str	r3, [r2, #0]
    tmpreg1 = (heth->Instance)->MACCR;
 80018d6:	6803      	ldr	r3, [r0, #0]
 80018d8:	681d      	ldr	r5, [r3, #0]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 80018da:	2001      	movs	r0, #1
 80018dc:	f7ff fc1e 	bl	800111c <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 80018e0:	6823      	ldr	r3, [r4, #0]
 80018e2:	601d      	str	r5, [r3, #0]
    ETH_FlushTransmitFIFO(heth);
 80018e4:	4620      	mov	r0, r4
 80018e6:	f7ff fe6d 	bl	80015c4 <ETH_FlushTransmitFIFO>
    CLEAR_BIT(heth->Instance->MACCR, ETH_MACCR_TE);
 80018ea:	6822      	ldr	r2, [r4, #0]
 80018ec:	6813      	ldr	r3, [r2, #0]
 80018ee:	f023 0308 	bic.w	r3, r3, #8
 80018f2:	6013      	str	r3, [r2, #0]
    tmpreg1 = (heth->Instance)->MACCR;
 80018f4:	6823      	ldr	r3, [r4, #0]
 80018f6:	681d      	ldr	r5, [r3, #0]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 80018f8:	2001      	movs	r0, #1
 80018fa:	f7ff fc0f 	bl	800111c <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 80018fe:	6823      	ldr	r3, [r4, #0]
 8001900:	601d      	str	r5, [r3, #0]
    heth->gState = HAL_ETH_STATE_READY;
 8001902:	2310      	movs	r3, #16
 8001904:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
    return HAL_OK;
 8001908:	2000      	movs	r0, #0
 800190a:	e7cd      	b.n	80018a8 <HAL_ETH_Stop+0xc>

0800190c <HAL_ETH_Transmit>:
{
 800190c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800190e:	4604      	mov	r4, r0
  if (pTxConfig == NULL)
 8001910:	b131      	cbz	r1, 8001920 <HAL_ETH_Transmit+0x14>
 8001912:	4615      	mov	r5, r2
  if (heth->gState == HAL_ETH_STATE_STARTED)
 8001914:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
 8001918:	2b23      	cmp	r3, #35	; 0x23
 800191a:	d009      	beq.n	8001930 <HAL_ETH_Transmit+0x24>
    return HAL_ERROR;
 800191c:	2001      	movs	r0, #1
}
 800191e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    heth->ErrorCode |= HAL_ETH_ERROR_PARAM;
 8001920:	f8d0 3088 	ldr.w	r3, [r0, #136]	; 0x88
 8001924:	f043 0301 	orr.w	r3, r3, #1
 8001928:	f8c0 3088 	str.w	r3, [r0, #136]	; 0x88
    return HAL_ERROR;
 800192c:	2001      	movs	r0, #1
 800192e:	e7f6      	b.n	800191e <HAL_ETH_Transmit+0x12>
    if (ETH_Prepare_Tx_Descriptors(heth, pTxConfig, 0) != HAL_ETH_ERROR_NONE)
 8001930:	2200      	movs	r2, #0
 8001932:	4620      	mov	r0, r4
 8001934:	f7ff fca4 	bl	8001280 <ETH_Prepare_Tx_Descriptors>
 8001938:	2800      	cmp	r0, #0
 800193a:	d135      	bne.n	80019a8 <HAL_ETH_Transmit+0x9c>
  __ASM volatile ("dsb 0xF":::"memory");
 800193c:	f3bf 8f4f 	dsb	sy
    dmatxdesc = (ETH_DMADescTypeDef *)(&heth->TxDescList)->TxDesc[heth->TxDescList.CurTxDesc];
 8001940:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8001942:	1d9a      	adds	r2, r3, #6
 8001944:	f854 6022 	ldr.w	r6, [r4, r2, lsl #2]
    INCR_TX_DESC_INDEX(heth->TxDescList.CurTxDesc, 1U);
 8001948:	1c5a      	adds	r2, r3, #1
 800194a:	2a03      	cmp	r2, #3
 800194c:	bf92      	itee	ls
 800194e:	62a2      	strls	r2, [r4, #40]	; 0x28
 8001950:	3b03      	subhi	r3, #3
 8001952:	62a3      	strhi	r3, [r4, #40]	; 0x28
    WRITE_REG(heth->Instance->DMATPDR, (uint32_t)(heth->TxDescList.TxDesc[heth->TxDescList.CurTxDesc]));
 8001954:	6823      	ldr	r3, [r4, #0]
 8001956:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8001958:	3206      	adds	r2, #6
 800195a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800195e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001962:	605a      	str	r2, [r3, #4]
    tickstart = HAL_GetTick();
 8001964:	f7ff fbd4 	bl	8001110 <HAL_GetTick>
 8001968:	4607      	mov	r7, r0
    while ((dmatxdesc->DESC0 & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 800196a:	6833      	ldr	r3, [r6, #0]
 800196c:	2b00      	cmp	r3, #0
 800196e:	da30      	bge.n	80019d2 <HAL_ETH_Transmit+0xc6>
      if ((heth->Instance->DMASR & ETH_DMASR_FBES) != (uint32_t)RESET)
 8001970:	6823      	ldr	r3, [r4, #0]
 8001972:	f503 5280 	add.w	r2, r3, #4096	; 0x1000
 8001976:	6952      	ldr	r2, [r2, #20]
 8001978:	f412 5f00 	tst.w	r2, #8192	; 0x2000
 800197c:	d11c      	bne.n	80019b8 <HAL_ETH_Transmit+0xac>
      if (Timeout != HAL_MAX_DELAY)
 800197e:	f1b5 3fff 	cmp.w	r5, #4294967295
 8001982:	d0f2      	beq.n	800196a <HAL_ETH_Transmit+0x5e>
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8001984:	f7ff fbc4 	bl	8001110 <HAL_GetTick>
 8001988:	1bc0      	subs	r0, r0, r7
 800198a:	42a8      	cmp	r0, r5
 800198c:	d801      	bhi.n	8001992 <HAL_ETH_Transmit+0x86>
 800198e:	2d00      	cmp	r5, #0
 8001990:	d1eb      	bne.n	800196a <HAL_ETH_Transmit+0x5e>
          heth->ErrorCode |= HAL_ETH_ERROR_TIMEOUT;
 8001992:	f8d4 3088 	ldr.w	r3, [r4, #136]	; 0x88
 8001996:	f043 0304 	orr.w	r3, r3, #4
 800199a:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
          dmatxdesc->DESC0 = (ETH_DMATXDESC_FS | ETH_DMATXDESC_LS);
 800199e:	f04f 5340 	mov.w	r3, #805306368	; 0x30000000
 80019a2:	6033      	str	r3, [r6, #0]
          return HAL_ERROR;
 80019a4:	2001      	movs	r0, #1
 80019a6:	e7ba      	b.n	800191e <HAL_ETH_Transmit+0x12>
      heth->ErrorCode |= HAL_ETH_ERROR_BUSY;
 80019a8:	f8d4 3088 	ldr.w	r3, [r4, #136]	; 0x88
 80019ac:	f043 0302 	orr.w	r3, r3, #2
 80019b0:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
      return HAL_ERROR;
 80019b4:	2001      	movs	r0, #1
 80019b6:	e7b2      	b.n	800191e <HAL_ETH_Transmit+0x12>
        heth->ErrorCode |= HAL_ETH_ERROR_DMA;
 80019b8:	f8d4 2088 	ldr.w	r2, [r4, #136]	; 0x88
 80019bc:	f042 0208 	orr.w	r2, r2, #8
 80019c0:	f8c4 2088 	str.w	r2, [r4, #136]	; 0x88
        heth->DMAErrorCode = heth->Instance->DMASR;
 80019c4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80019c8:	695b      	ldr	r3, [r3, #20]
 80019ca:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c
        return HAL_ERROR;
 80019ce:	2001      	movs	r0, #1
 80019d0:	e7a5      	b.n	800191e <HAL_ETH_Transmit+0x12>
    return HAL_OK;
 80019d2:	2000      	movs	r0, #0
 80019d4:	e7a3      	b.n	800191e <HAL_ETH_Transmit+0x12>

080019d6 <HAL_ETH_ReadData>:
{
 80019d6:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80019da:	b085      	sub	sp, #20
 80019dc:	4605      	mov	r5, r0
  if (pAppBuff == NULL)
 80019de:	9103      	str	r1, [sp, #12]
 80019e0:	b1e1      	cbz	r1, 8001a1c <HAL_ETH_ReadData+0x46>
  if (heth->gState != HAL_ETH_STATE_STARTED)
 80019e2:	f8d0 3084 	ldr.w	r3, [r0, #132]	; 0x84
 80019e6:	2b23      	cmp	r3, #35	; 0x23
 80019e8:	d17e      	bne.n	8001ae8 <HAL_ETH_ReadData+0x112>
  descidx = heth->RxDescList.RxDescIdx;
 80019ea:	6dc7      	ldr	r7, [r0, #92]	; 0x5c
  dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 80019ec:	f107 0312 	add.w	r3, r7, #18
 80019f0:	f850 4023 	ldr.w	r4, [r0, r3, lsl #2]
  desccntmax = ETH_RX_DESC_CNT - heth->RxDescList.RxBuildDescCnt;
 80019f4:	6ec3      	ldr	r3, [r0, #108]	; 0x6c
 80019f6:	f1c3 0b04 	rsb	fp, r3, #4
  while ((READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (desccnt < desccntmax)
 80019fa:	6822      	ldr	r2, [r4, #0]
 80019fc:	2a00      	cmp	r2, #0
 80019fe:	f2c0 8083 	blt.w	8001b08 <HAL_ETH_ReadData+0x132>
 8001a02:	f1bb 0f00 	cmp.w	fp, #0
 8001a06:	d066      	beq.n	8001ad6 <HAL_ETH_ReadData+0x100>
  uint32_t desccnt = 0U;
 8001a08:	f04f 0800 	mov.w	r8, #0
      HAL_ETH_RxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
 8001a0c:	f100 0380 	add.w	r3, r0, #128	; 0x80
 8001a10:	9301      	str	r3, [sp, #4]
 8001a12:	f100 037c 	add.w	r3, r0, #124	; 0x7c
 8001a16:	9302      	str	r3, [sp, #8]
      dmarxdesc->BackupAddr0 = 0;
 8001a18:	46c1      	mov	r9, r8
 8001a1a:	e037      	b.n	8001a8c <HAL_ETH_ReadData+0xb6>
    heth->ErrorCode |= HAL_ETH_ERROR_PARAM;
 8001a1c:	f8d0 3088 	ldr.w	r3, [r0, #136]	; 0x88
 8001a20:	f043 0301 	orr.w	r3, r3, #1
 8001a24:	f8c0 3088 	str.w	r3, [r0, #136]	; 0x88
    return HAL_ERROR;
 8001a28:	2001      	movs	r0, #1
 8001a2a:	e05e      	b.n	8001aea <HAL_ETH_ReadData+0x114>
      if (READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_FS) != (uint32_t)RESET)
 8001a2c:	6823      	ldr	r3, [r4, #0]
 8001a2e:	f413 7f00 	tst.w	r3, #512	; 0x200
        heth->RxDescList.RxDescCnt = 0;
 8001a32:	bf1c      	itt	ne
 8001a34:	f8c5 9060 	strne.w	r9, [r5, #96]	; 0x60
        heth->RxDescList.RxDataLength = 0;
 8001a38:	f8c5 9064 	strne.w	r9, [r5, #100]	; 0x64
      if (READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_LS) != (uint32_t)RESET)
 8001a3c:	6823      	ldr	r3, [r4, #0]
 8001a3e:	f413 7f80 	tst.w	r3, #256	; 0x100
 8001a42:	d134      	bne.n	8001aae <HAL_ETH_ReadData+0xd8>
      bufflength = heth->Init.RxBuffLen;
 8001a44:	696e      	ldr	r6, [r5, #20]
 8001a46:	46ca      	mov	sl, r9
      WRITE_REG(dmarxdesc->BackupAddr0, dmarxdesc->DESC2);
 8001a48:	68a2      	ldr	r2, [r4, #8]
 8001a4a:	6222      	str	r2, [r4, #32]
      HAL_ETH_RxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
 8001a4c:	b2b3      	uxth	r3, r6
 8001a4e:	9901      	ldr	r1, [sp, #4]
 8001a50:	9802      	ldr	r0, [sp, #8]
 8001a52:	f001 fe2f 	bl	80036b4 <HAL_ETH_RxLinkCallback>
      heth->RxDescList.RxDescCnt++;
 8001a56:	6e2b      	ldr	r3, [r5, #96]	; 0x60
 8001a58:	3301      	adds	r3, #1
 8001a5a:	662b      	str	r3, [r5, #96]	; 0x60
      heth->RxDescList.RxDataLength += bufflength;
 8001a5c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8001a5e:	4433      	add	r3, r6
 8001a60:	666b      	str	r3, [r5, #100]	; 0x64
      dmarxdesc->BackupAddr0 = 0;
 8001a62:	f8c4 9020 	str.w	r9, [r4, #32]
    INCR_RX_DESC_INDEX(descidx, 1U);
 8001a66:	1c7b      	adds	r3, r7, #1
 8001a68:	2b03      	cmp	r3, #3
 8001a6a:	bf8c      	ite	hi
 8001a6c:	3f03      	subhi	r7, #3
 8001a6e:	461f      	movls	r7, r3
    dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 8001a70:	f107 0312 	add.w	r3, r7, #18
 8001a74:	f855 4023 	ldr.w	r4, [r5, r3, lsl #2]
    desccnt++;
 8001a78:	f108 0801 	add.w	r8, r8, #1
  while ((READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (desccnt < desccntmax)
 8001a7c:	6823      	ldr	r3, [r4, #0]
 8001a7e:	2b00      	cmp	r3, #0
 8001a80:	db1f      	blt.n	8001ac2 <HAL_ETH_ReadData+0xec>
 8001a82:	45c3      	cmp	fp, r8
 8001a84:	d01c      	beq.n	8001ac0 <HAL_ETH_ReadData+0xea>
         && (rxdataready == 0U))
 8001a86:	f1ba 0f00 	cmp.w	sl, #0
 8001a8a:	d131      	bne.n	8001af0 <HAL_ETH_ReadData+0x11a>
    if (READ_BIT(dmarxdesc->DESC0,  ETH_DMARXDESC_LS)  != (uint32_t)RESET)
 8001a8c:	6823      	ldr	r3, [r4, #0]
 8001a8e:	f413 7f80 	tst.w	r3, #256	; 0x100
 8001a92:	d003      	beq.n	8001a9c <HAL_ETH_ReadData+0xc6>
      heth->RxDescList.TimeStamp.TimeStampHigh = dmarxdesc->DESC6;
 8001a94:	69a3      	ldr	r3, [r4, #24]
 8001a96:	67ab      	str	r3, [r5, #120]	; 0x78
      heth->RxDescList.TimeStamp.TimeStampLow  = dmarxdesc->DESC7;
 8001a98:	69e3      	ldr	r3, [r4, #28]
 8001a9a:	676b      	str	r3, [r5, #116]	; 0x74
    if ((READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_FS) != (uint32_t)RESET) || (heth->RxDescList.pRxStart != NULL))
 8001a9c:	6823      	ldr	r3, [r4, #0]
 8001a9e:	f413 7f00 	tst.w	r3, #512	; 0x200
 8001aa2:	d1c3      	bne.n	8001a2c <HAL_ETH_ReadData+0x56>
 8001aa4:	6feb      	ldr	r3, [r5, #124]	; 0x7c
 8001aa6:	2b00      	cmp	r3, #0
 8001aa8:	d1c0      	bne.n	8001a2c <HAL_ETH_ReadData+0x56>
 8001aaa:	46ca      	mov	sl, r9
 8001aac:	e7db      	b.n	8001a66 <HAL_ETH_ReadData+0x90>
        bufflength = ((dmarxdesc->DESC0 & ETH_DMARXDESC_FL) >> ETH_DMARXDESC_FRAMELENGTHSHIFT) - 4U;
 8001aae:	6826      	ldr	r6, [r4, #0]
 8001ab0:	f3c6 460d 	ubfx	r6, r6, #16, #14
 8001ab4:	3e04      	subs	r6, #4
        heth->RxDescList.pRxLastRxDesc = dmarxdesc->DESC0;
 8001ab6:	6823      	ldr	r3, [r4, #0]
 8001ab8:	672b      	str	r3, [r5, #112]	; 0x70
        rxdataready = 1;
 8001aba:	f04f 0a01 	mov.w	sl, #1
 8001abe:	e7c3      	b.n	8001a48 <HAL_ETH_ReadData+0x72>
    desccnt++;
 8001ac0:	46d8      	mov	r8, fp
  heth->RxDescList.RxBuildDescCnt += desccnt;
 8001ac2:	6eeb      	ldr	r3, [r5, #108]	; 0x6c
 8001ac4:	4443      	add	r3, r8
 8001ac6:	66eb      	str	r3, [r5, #108]	; 0x6c
  if ((heth->RxDescList.RxBuildDescCnt) != 0U)
 8001ac8:	b93b      	cbnz	r3, 8001ada <HAL_ETH_ReadData+0x104>
  heth->RxDescList.RxDescIdx = descidx;
 8001aca:	65ef      	str	r7, [r5, #92]	; 0x5c
  return HAL_ERROR;
 8001acc:	2001      	movs	r0, #1
  if (rxdataready == 1U)
 8001ace:	f1ba 0f00 	cmp.w	sl, #0
 8001ad2:	d00a      	beq.n	8001aea <HAL_ETH_ReadData+0x114>
 8001ad4:	e012      	b.n	8001afc <HAL_ETH_ReadData+0x126>
  uint8_t rxdataready = 0U;
 8001ad6:	f04f 0a00 	mov.w	sl, #0
    ETH_UpdateDescriptor(heth);
 8001ada:	4628      	mov	r0, r5
 8001adc:	f7ff fb88 	bl	80011f0 <ETH_UpdateDescriptor>
 8001ae0:	e7f3      	b.n	8001aca <HAL_ETH_ReadData+0xf4>
  uint8_t rxdataready = 0U;
 8001ae2:	f04f 0a00 	mov.w	sl, #0
 8001ae6:	e7f8      	b.n	8001ada <HAL_ETH_ReadData+0x104>
    return HAL_ERROR;
 8001ae8:	2001      	movs	r0, #1
}
 8001aea:	b005      	add	sp, #20
 8001aec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  heth->RxDescList.RxBuildDescCnt += desccnt;
 8001af0:	6eeb      	ldr	r3, [r5, #108]	; 0x6c
 8001af2:	4443      	add	r3, r8
 8001af4:	66eb      	str	r3, [r5, #108]	; 0x6c
  if ((heth->RxDescList.RxBuildDescCnt) != 0U)
 8001af6:	2b00      	cmp	r3, #0
 8001af8:	d1ef      	bne.n	8001ada <HAL_ETH_ReadData+0x104>
  heth->RxDescList.RxDescIdx = descidx;
 8001afa:	65ef      	str	r7, [r5, #92]	; 0x5c
    *pAppBuff = heth->RxDescList.pRxStart;
 8001afc:	6feb      	ldr	r3, [r5, #124]	; 0x7c
 8001afe:	9a03      	ldr	r2, [sp, #12]
 8001b00:	6013      	str	r3, [r2, #0]
    heth->RxDescList.pRxStart = NULL;
 8001b02:	2000      	movs	r0, #0
 8001b04:	67e8      	str	r0, [r5, #124]	; 0x7c
    return HAL_OK;
 8001b06:	e7f0      	b.n	8001aea <HAL_ETH_ReadData+0x114>
  if ((heth->RxDescList.RxBuildDescCnt) != 0U)
 8001b08:	2b00      	cmp	r3, #0
 8001b0a:	d1ea      	bne.n	8001ae2 <HAL_ETH_ReadData+0x10c>
  return HAL_ERROR;
 8001b0c:	2001      	movs	r0, #1
 8001b0e:	e7ec      	b.n	8001aea <HAL_ETH_ReadData+0x114>

08001b10 <HAL_ETH_ReadPHYRegister>:
{
 8001b10:	b570      	push	{r4, r5, r6, lr}
 8001b12:	4604      	mov	r4, r0
 8001b14:	461e      	mov	r6, r3
  tmpreg1 = heth->Instance->MACMIIAR;
 8001b16:	6805      	ldr	r5, [r0, #0]
 8001b18:	6928      	ldr	r0, [r5, #16]
  tmpreg1 |= (((uint32_t)PHYReg << 6U) & ETH_MACMIIAR_MR);                /* Set the PHY register address */
 8001b1a:	0192      	lsls	r2, r2, #6
 8001b1c:	f402 63f8 	and.w	r3, r2, #1984	; 0x7c0
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 8001b20:	f000 021c 	and.w	r2, r0, #28
 8001b24:	431a      	orrs	r2, r3
  tmpreg1 |= ((PHYAddr << 11U) & ETH_MACMIIAR_PA);                        /* Set the PHY device address   */
 8001b26:	02cb      	lsls	r3, r1, #11
 8001b28:	b29b      	uxth	r3, r3
  tmpreg1 |= (((uint32_t)PHYReg << 6U) & ETH_MACMIIAR_MR);                /* Set the PHY register address */
 8001b2a:	4313      	orrs	r3, r2
  tmpreg1 |= ETH_MACMIIAR_MB;                                             /* Set the MII Busy bit         */
 8001b2c:	f043 0301 	orr.w	r3, r3, #1
  heth->Instance->MACMIIAR = tmpreg1;
 8001b30:	612b      	str	r3, [r5, #16]
  tickstart = HAL_GetTick();
 8001b32:	f7ff faed 	bl	8001110 <HAL_GetTick>
 8001b36:	4605      	mov	r5, r0
    if ((HAL_GetTick() - tickstart) > PHY_READ_TO)
 8001b38:	f7ff faea 	bl	8001110 <HAL_GetTick>
 8001b3c:	1b40      	subs	r0, r0, r5
 8001b3e:	f5b0 3f80 	cmp.w	r0, #65536	; 0x10000
 8001b42:	d209      	bcs.n	8001b58 <HAL_ETH_ReadPHYRegister+0x48>
    tmpreg1 = heth->Instance->MACMIIAR;
 8001b44:	6822      	ldr	r2, [r4, #0]
 8001b46:	6911      	ldr	r1, [r2, #16]
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8001b48:	f011 0f01 	tst.w	r1, #1
 8001b4c:	d1f4      	bne.n	8001b38 <HAL_ETH_ReadPHYRegister+0x28>
  *pRegValue = (uint16_t)(heth->Instance->MACMIIDR);
 8001b4e:	6953      	ldr	r3, [r2, #20]
 8001b50:	b29b      	uxth	r3, r3
 8001b52:	6033      	str	r3, [r6, #0]
  return HAL_OK;
 8001b54:	2000      	movs	r0, #0
}
 8001b56:	bd70      	pop	{r4, r5, r6, pc}
      return HAL_ERROR;
 8001b58:	2001      	movs	r0, #1
 8001b5a:	e7fc      	b.n	8001b56 <HAL_ETH_ReadPHYRegister+0x46>

08001b5c <HAL_ETH_WritePHYRegister>:
{
 8001b5c:	b538      	push	{r3, r4, r5, lr}
 8001b5e:	4604      	mov	r4, r0
  tmpreg1 = heth->Instance->MACMIIAR;
 8001b60:	6805      	ldr	r5, [r0, #0]
 8001b62:	6928      	ldr	r0, [r5, #16]
  tmpreg1 |= (((uint32_t)PHYReg << 6U) & ETH_MACMIIAR_MR);              /* Set the PHY register address */
 8001b64:	0192      	lsls	r2, r2, #6
 8001b66:	f402 62f8 	and.w	r2, r2, #1984	; 0x7c0
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 8001b6a:	f000 001c 	and.w	r0, r0, #28
 8001b6e:	4310      	orrs	r0, r2
  tmpreg1 |= ((PHYAddr << 11U) & ETH_MACMIIAR_PA);                      /* Set the PHY device address */
 8001b70:	02ca      	lsls	r2, r1, #11
 8001b72:	b292      	uxth	r2, r2
  tmpreg1 |= (((uint32_t)PHYReg << 6U) & ETH_MACMIIAR_MR);              /* Set the PHY register address */
 8001b74:	4302      	orrs	r2, r0
  tmpreg1 |= ETH_MACMIIAR_MB;                                           /* Set the MII Busy bit */
 8001b76:	f042 0203 	orr.w	r2, r2, #3
  heth->Instance->MACMIIDR = (uint16_t)RegValue;
 8001b7a:	b29b      	uxth	r3, r3
 8001b7c:	616b      	str	r3, [r5, #20]
  heth->Instance->MACMIIAR = tmpreg1;
 8001b7e:	6823      	ldr	r3, [r4, #0]
 8001b80:	611a      	str	r2, [r3, #16]
  tickstart = HAL_GetTick();
 8001b82:	f7ff fac5 	bl	8001110 <HAL_GetTick>
 8001b86:	4605      	mov	r5, r0
    if ((HAL_GetTick() - tickstart) > PHY_WRITE_TO)
 8001b88:	f7ff fac2 	bl	8001110 <HAL_GetTick>
 8001b8c:	1b40      	subs	r0, r0, r5
 8001b8e:	f5b0 3f80 	cmp.w	r0, #65536	; 0x10000
 8001b92:	d206      	bcs.n	8001ba2 <HAL_ETH_WritePHYRegister+0x46>
    tmpreg1 = heth->Instance->MACMIIAR;
 8001b94:	6823      	ldr	r3, [r4, #0]
 8001b96:	691b      	ldr	r3, [r3, #16]
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8001b98:	f013 0f01 	tst.w	r3, #1
 8001b9c:	d1f4      	bne.n	8001b88 <HAL_ETH_WritePHYRegister+0x2c>
  return HAL_OK;
 8001b9e:	2000      	movs	r0, #0
 8001ba0:	e000      	b.n	8001ba4 <HAL_ETH_WritePHYRegister+0x48>
      return HAL_ERROR;
 8001ba2:	2001      	movs	r0, #1
}
 8001ba4:	bd38      	pop	{r3, r4, r5, pc}

08001ba6 <HAL_ETH_GetMACConfig>:
  if (macconf == NULL)
 8001ba6:	2900      	cmp	r1, #0
 8001ba8:	d06f      	beq.n	8001c8a <HAL_ETH_GetMACConfig+0xe4>
  macconf->DeferralCheck = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DC) >> 4) > 0U) ? ENABLE : DISABLE;
 8001baa:	6802      	ldr	r2, [r0, #0]
 8001bac:	6812      	ldr	r2, [r2, #0]
 8001bae:	f3c2 1200 	ubfx	r2, r2, #4, #1
 8001bb2:	f881 2028 	strb.w	r2, [r1, #40]	; 0x28
  macconf->BackOffLimit = READ_BIT(heth->Instance->MACCR, ETH_MACCR_BL);
 8001bb6:	6802      	ldr	r2, [r0, #0]
 8001bb8:	6812      	ldr	r2, [r2, #0]
 8001bba:	f002 0260 	and.w	r2, r2, #96	; 0x60
 8001bbe:	624a      	str	r2, [r1, #36]	; 0x24
  macconf->RetryTransmission = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_RD) >> 9) == 0U) ? ENABLE : DISABLE;
 8001bc0:	6802      	ldr	r2, [r0, #0]
 8001bc2:	6812      	ldr	r2, [r2, #0]
 8001bc4:	f482 7200 	eor.w	r2, r2, #512	; 0x200
 8001bc8:	f3c2 2240 	ubfx	r2, r2, #9, #1
 8001bcc:	f881 2020 	strb.w	r2, [r1, #32]
  macconf->CarrierSenseDuringTransmit = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_CSD) >> 16) > 0U)
 8001bd0:	6802      	ldr	r2, [r0, #0]
 8001bd2:	6812      	ldr	r2, [r2, #0]
                                        ? ENABLE : DISABLE;
 8001bd4:	f3c2 4200 	ubfx	r2, r2, #16, #1
  macconf->CarrierSenseDuringTransmit = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_CSD) >> 16) > 0U)
 8001bd8:	77ca      	strb	r2, [r1, #31]
  macconf->ReceiveOwn = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_ROD) >> 13) == 0U) ? ENABLE : DISABLE;
 8001bda:	6802      	ldr	r2, [r0, #0]
 8001bdc:	6812      	ldr	r2, [r2, #0]
 8001bde:	f482 5200 	eor.w	r2, r2, #8192	; 0x2000
 8001be2:	f3c2 3240 	ubfx	r2, r2, #13, #1
 8001be6:	778a      	strb	r2, [r1, #30]
  macconf->LoopbackMode = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_LM) >> 12) > 0U) ? ENABLE : DISABLE;
 8001be8:	6802      	ldr	r2, [r0, #0]
 8001bea:	6812      	ldr	r2, [r2, #0]
 8001bec:	f3c2 3200 	ubfx	r2, r2, #12, #1
 8001bf0:	770a      	strb	r2, [r1, #28]
  macconf->DuplexMode = READ_BIT(heth->Instance->MACCR, ETH_MACCR_DM);
 8001bf2:	6802      	ldr	r2, [r0, #0]
 8001bf4:	6812      	ldr	r2, [r2, #0]
 8001bf6:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8001bfa:	618a      	str	r2, [r1, #24]
  macconf->Speed = READ_BIT(heth->Instance->MACCR, ETH_MACCR_FES);
 8001bfc:	6802      	ldr	r2, [r0, #0]
 8001bfe:	6812      	ldr	r2, [r2, #0]
 8001c00:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 8001c04:	614a      	str	r2, [r1, #20]
  macconf->Jabber = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_JD) >> 22) == 0U) ? ENABLE : DISABLE;
 8001c06:	6802      	ldr	r2, [r0, #0]
 8001c08:	6812      	ldr	r2, [r2, #0]
 8001c0a:	f482 0280 	eor.w	r2, r2, #4194304	; 0x400000
 8001c0e:	f3c2 5280 	ubfx	r2, r2, #22, #1
 8001c12:	744a      	strb	r2, [r1, #17]
  macconf->Watchdog = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_WD) >> 23) == 0U) ? ENABLE : DISABLE;
 8001c14:	6802      	ldr	r2, [r0, #0]
 8001c16:	6812      	ldr	r2, [r2, #0]
 8001c18:	f482 0200 	eor.w	r2, r2, #8388608	; 0x800000
 8001c1c:	f3c2 52c0 	ubfx	r2, r2, #23, #1
 8001c20:	740a      	strb	r2, [r1, #16]
  macconf->AutomaticPadCRCStrip = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_APCS) >> 7) > 0U) ? ENABLE : DISABLE;
 8001c22:	6802      	ldr	r2, [r0, #0]
 8001c24:	6812      	ldr	r2, [r2, #0]
 8001c26:	f3c2 12c0 	ubfx	r2, r2, #7, #1
 8001c2a:	73ca      	strb	r2, [r1, #15]
  macconf->InterPacketGapVal = READ_BIT(heth->Instance->MACCR, ETH_MACCR_IFG);
 8001c2c:	6802      	ldr	r2, [r0, #0]
 8001c2e:	6812      	ldr	r2, [r2, #0]
 8001c30:	f402 2260 	and.w	r2, r2, #917504	; 0xe0000
 8001c34:	608a      	str	r2, [r1, #8]
  macconf->ChecksumOffload = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_IPCO) >> 10U) > 0U) ? ENABLE : DISABLE;
 8001c36:	6802      	ldr	r2, [r0, #0]
 8001c38:	6812      	ldr	r2, [r2, #0]
 8001c3a:	f3c2 2280 	ubfx	r2, r2, #10, #1
 8001c3e:	710a      	strb	r2, [r1, #4]
  macconf->TransmitFlowControl = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_TFCE) >> 1) > 0U) ? ENABLE : DISABLE;
 8001c40:	6802      	ldr	r2, [r0, #0]
 8001c42:	6992      	ldr	r2, [r2, #24]
 8001c44:	f3c2 0240 	ubfx	r2, r2, #1, #1
 8001c48:	f881 2054 	strb.w	r2, [r1, #84]	; 0x54
  macconf->ZeroQuantaPause = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_ZQPD) >> 7) == 0U) ? ENABLE : DISABLE;
 8001c4c:	6802      	ldr	r2, [r0, #0]
 8001c4e:	6992      	ldr	r2, [r2, #24]
 8001c50:	f082 0280 	eor.w	r2, r2, #128	; 0x80
 8001c54:	f3c2 12c0 	ubfx	r2, r2, #7, #1
 8001c58:	f881 204c 	strb.w	r2, [r1, #76]	; 0x4c
  macconf->PauseLowThreshold = READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_PLT);
 8001c5c:	6802      	ldr	r2, [r0, #0]
 8001c5e:	6992      	ldr	r2, [r2, #24]
 8001c60:	f002 0230 	and.w	r2, r2, #48	; 0x30
 8001c64:	650a      	str	r2, [r1, #80]	; 0x50
  macconf->PauseTime = (READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_PT) >> 16);
 8001c66:	6802      	ldr	r2, [r0, #0]
 8001c68:	6992      	ldr	r2, [r2, #24]
 8001c6a:	0c12      	lsrs	r2, r2, #16
 8001c6c:	648a      	str	r2, [r1, #72]	; 0x48
  macconf->ReceiveFlowControl = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_RFCE) >> 2U) > 0U) ? ENABLE : DISABLE;
 8001c6e:	6802      	ldr	r2, [r0, #0]
 8001c70:	6992      	ldr	r2, [r2, #24]
 8001c72:	f3c2 0280 	ubfx	r2, r2, #2, #1
 8001c76:	f881 2056 	strb.w	r2, [r1, #86]	; 0x56
  macconf->UnicastPausePacketDetect = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_UPFD) >> 3U) > 0U)
 8001c7a:	6802      	ldr	r2, [r0, #0]
 8001c7c:	6992      	ldr	r2, [r2, #24]
                                      ? ENABLE : DISABLE;
 8001c7e:	f3c2 02c0 	ubfx	r2, r2, #3, #1
  macconf->UnicastPausePacketDetect = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_UPFD) >> 3U) > 0U)
 8001c82:	f881 2055 	strb.w	r2, [r1, #85]	; 0x55
  return HAL_OK;
 8001c86:	2000      	movs	r0, #0
 8001c88:	4770      	bx	lr
    return HAL_ERROR;
 8001c8a:	2001      	movs	r0, #1
}
 8001c8c:	4770      	bx	lr

08001c8e <HAL_ETH_SetMACConfig>:
  if (macconf == NULL)
 8001c8e:	b151      	cbz	r1, 8001ca6 <HAL_ETH_SetMACConfig+0x18>
{
 8001c90:	b508      	push	{r3, lr}
  if (heth->gState == HAL_ETH_STATE_READY)
 8001c92:	f8d0 3084 	ldr.w	r3, [r0, #132]	; 0x84
 8001c96:	2b10      	cmp	r3, #16
 8001c98:	d001      	beq.n	8001c9e <HAL_ETH_SetMACConfig+0x10>
    return HAL_ERROR;
 8001c9a:	2001      	movs	r0, #1
}
 8001c9c:	bd08      	pop	{r3, pc}
    ETH_SetMACConfig(heth, macconf);
 8001c9e:	f7ff fbaf 	bl	8001400 <ETH_SetMACConfig>
    return HAL_OK;
 8001ca2:	2000      	movs	r0, #0
 8001ca4:	e7fa      	b.n	8001c9c <HAL_ETH_SetMACConfig+0xe>
    return HAL_ERROR;
 8001ca6:	2001      	movs	r0, #1
}
 8001ca8:	4770      	bx	lr
	...

08001cac <HAL_ETH_SetMDIOClockRange>:
{
 8001cac:	b538      	push	{r3, r4, r5, lr}
 8001cae:	4605      	mov	r5, r0
  tmpreg = (heth->Instance)->MACMIIAR;
 8001cb0:	6803      	ldr	r3, [r0, #0]
 8001cb2:	691c      	ldr	r4, [r3, #16]
  tmpreg &= ETH_MACMIIAR_CR_MASK;
 8001cb4:	f024 041c 	bic.w	r4, r4, #28
  hclk = HAL_RCC_GetHCLKFreq();
 8001cb8:	f000 fd04 	bl	80026c4 <HAL_RCC_GetHCLKFreq>
  if ((hclk >= 20000000U) && (hclk < 35000000U))
 8001cbc:	4b10      	ldr	r3, [pc, #64]	; (8001d00 <HAL_ETH_SetMDIOClockRange+0x54>)
 8001cbe:	4403      	add	r3, r0
 8001cc0:	4a10      	ldr	r2, [pc, #64]	; (8001d04 <HAL_ETH_SetMDIOClockRange+0x58>)
 8001cc2:	4293      	cmp	r3, r2
 8001cc4:	d204      	bcs.n	8001cd0 <HAL_ETH_SetMDIOClockRange+0x24>
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div16;
 8001cc6:	f044 0408 	orr.w	r4, r4, #8
  (heth->Instance)->MACMIIAR = (uint32_t)tmpreg;
 8001cca:	682b      	ldr	r3, [r5, #0]
 8001ccc:	611c      	str	r4, [r3, #16]
}
 8001cce:	bd38      	pop	{r3, r4, r5, pc}
  else if ((hclk >= 35000000U) && (hclk < 60000000U))
 8001cd0:	4b0d      	ldr	r3, [pc, #52]	; (8001d08 <HAL_ETH_SetMDIOClockRange+0x5c>)
 8001cd2:	4403      	add	r3, r0
 8001cd4:	4a0d      	ldr	r2, [pc, #52]	; (8001d0c <HAL_ETH_SetMDIOClockRange+0x60>)
 8001cd6:	4293      	cmp	r3, r2
 8001cd8:	d802      	bhi.n	8001ce0 <HAL_ETH_SetMDIOClockRange+0x34>
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div26;
 8001cda:	f044 040c 	orr.w	r4, r4, #12
 8001cde:	e7f4      	b.n	8001cca <HAL_ETH_SetMDIOClockRange+0x1e>
  else if ((hclk >= 60000000U) && (hclk < 100000000U))
 8001ce0:	4b0b      	ldr	r3, [pc, #44]	; (8001d10 <HAL_ETH_SetMDIOClockRange+0x64>)
 8001ce2:	4403      	add	r3, r0
 8001ce4:	4a0b      	ldr	r2, [pc, #44]	; (8001d14 <HAL_ETH_SetMDIOClockRange+0x68>)
 8001ce6:	4293      	cmp	r3, r2
 8001ce8:	d3ef      	bcc.n	8001cca <HAL_ETH_SetMDIOClockRange+0x1e>
  else if ((hclk >= 100000000U) && (hclk < 150000000U))
 8001cea:	4b0b      	ldr	r3, [pc, #44]	; (8001d18 <HAL_ETH_SetMDIOClockRange+0x6c>)
 8001cec:	4403      	add	r3, r0
 8001cee:	4a0b      	ldr	r2, [pc, #44]	; (8001d1c <HAL_ETH_SetMDIOClockRange+0x70>)
 8001cf0:	4293      	cmp	r3, r2
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div62;
 8001cf2:	bf94      	ite	ls
 8001cf4:	f044 0404 	orrls.w	r4, r4, #4
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div102;
 8001cf8:	f044 0410 	orrhi.w	r4, r4, #16
 8001cfc:	e7e5      	b.n	8001cca <HAL_ETH_SetMDIOClockRange+0x1e>
 8001cfe:	bf00      	nop
 8001d00:	feced300 	.word	0xfeced300
 8001d04:	00e4e1c0 	.word	0x00e4e1c0
 8001d08:	fde9f140 	.word	0xfde9f140
 8001d0c:	017d783f 	.word	0x017d783f
 8001d10:	fc6c7900 	.word	0xfc6c7900
 8001d14:	02625a00 	.word	0x02625a00
 8001d18:	fa0a1f00 	.word	0xfa0a1f00
 8001d1c:	02faf07f 	.word	0x02faf07f

08001d20 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001d20:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001d24:	b083      	sub	sp, #12
 8001d26:	2200      	movs	r2, #0
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001d28:	4613      	mov	r3, r2
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001d2a:	4d82      	ldr	r5, [pc, #520]	; (8001f34 <HAL_GPIO_Init+0x214>)
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
        SYSCFG->EXTICR[position >> 2U] = temp;

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001d2c:	4c82      	ldr	r4, [pc, #520]	; (8001f38 <HAL_GPIO_Init+0x218>)
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001d2e:	f8df 8210 	ldr.w	r8, [pc, #528]	; 8001f40 <HAL_GPIO_Init+0x220>
 8001d32:	e04d      	b.n	8001dd0 <HAL_GPIO_Init+0xb0>
        temp = GPIOx->OSPEEDR; 
 8001d34:	6887      	ldr	r7, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001d36:	f04f 0903 	mov.w	r9, #3
 8001d3a:	fa09 f902 	lsl.w	r9, r9, r2
 8001d3e:	ea27 0909 	bic.w	r9, r7, r9
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001d42:	68cf      	ldr	r7, [r1, #12]
 8001d44:	4097      	lsls	r7, r2
 8001d46:	ea47 0709 	orr.w	r7, r7, r9
        GPIOx->OSPEEDR = temp;
 8001d4a:	6087      	str	r7, [r0, #8]
        temp = GPIOx->OTYPER;
 8001d4c:	6847      	ldr	r7, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001d4e:	ea27 0e0e 	bic.w	lr, r7, lr
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001d52:	684f      	ldr	r7, [r1, #4]
 8001d54:	f3c7 1700 	ubfx	r7, r7, #4, #1
 8001d58:	409f      	lsls	r7, r3
 8001d5a:	ea47 070e 	orr.w	r7, r7, lr
        GPIOx->OTYPER = temp;
 8001d5e:	6047      	str	r7, [r0, #4]
 8001d60:	e046      	b.n	8001df0 <HAL_GPIO_Init+0xd0>
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001d62:	f04f 0e00 	mov.w	lr, #0
 8001d66:	fa0e fe0b 	lsl.w	lr, lr, fp
 8001d6a:	ea4e 0e0a 	orr.w	lr, lr, sl
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001d6e:	f8c7 e008 	str.w	lr, [r7, #8]
        temp = EXTI->RTSR;
 8001d72:	68a7      	ldr	r7, [r4, #8]
        temp &= ~((uint32_t)iocurrent);
 8001d74:	ea6f 0e0c 	mvn.w	lr, ip
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001d78:	684e      	ldr	r6, [r1, #4]
 8001d7a:	f416 1f80 	tst.w	r6, #1048576	; 0x100000
        temp &= ~((uint32_t)iocurrent);
 8001d7e:	bf0c      	ite	eq
 8001d80:	ea0e 0707 	andeq.w	r7, lr, r7
        {
          temp |= iocurrent;
 8001d84:	ea4c 0707 	orrne.w	r7, ip, r7
        }
        EXTI->RTSR = temp;
 8001d88:	60a7      	str	r7, [r4, #8]

        temp = EXTI->FTSR;
 8001d8a:	68e7      	ldr	r7, [r4, #12]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001d8c:	684e      	ldr	r6, [r1, #4]
 8001d8e:	f416 1f00 	tst.w	r6, #2097152	; 0x200000
        temp &= ~((uint32_t)iocurrent);
 8001d92:	bf0c      	ite	eq
 8001d94:	ea0e 0707 	andeq.w	r7, lr, r7
        {
          temp |= iocurrent;
 8001d98:	ea4c 0707 	orrne.w	r7, ip, r7
        }
        EXTI->FTSR = temp;
 8001d9c:	60e7      	str	r7, [r4, #12]

        temp = EXTI->EMR;
 8001d9e:	6867      	ldr	r7, [r4, #4]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001da0:	684e      	ldr	r6, [r1, #4]
 8001da2:	f416 3f00 	tst.w	r6, #131072	; 0x20000
        temp &= ~((uint32_t)iocurrent);
 8001da6:	bf0c      	ite	eq
 8001da8:	ea0e 0707 	andeq.w	r7, lr, r7
        {
          temp |= iocurrent;
 8001dac:	ea4c 0707 	orrne.w	r7, ip, r7
        }
        EXTI->EMR = temp;
 8001db0:	6067      	str	r7, [r4, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001db2:	6827      	ldr	r7, [r4, #0]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001db4:	684e      	ldr	r6, [r1, #4]
 8001db6:	f416 3f80 	tst.w	r6, #65536	; 0x10000
        temp &= ~((uint32_t)iocurrent);
 8001dba:	bf0c      	ite	eq
 8001dbc:	ea0e 0707 	andeq.w	r7, lr, r7
        {
          temp |= iocurrent;
 8001dc0:	ea4c 0707 	orrne.w	r7, ip, r7
        }
        EXTI->IMR = temp;
 8001dc4:	6027      	str	r7, [r4, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001dc6:	3301      	adds	r3, #1
 8001dc8:	3202      	adds	r2, #2
 8001dca:	2b10      	cmp	r3, #16
 8001dcc:	f000 80af 	beq.w	8001f2e <HAL_GPIO_Init+0x20e>
    ioposition = 0x01U << position;
 8001dd0:	f04f 0e01 	mov.w	lr, #1
 8001dd4:	fa0e fe03 	lsl.w	lr, lr, r3
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001dd8:	680f      	ldr	r7, [r1, #0]
 8001dda:	ea0e 0c07 	and.w	ip, lr, r7
    if(iocurrent == ioposition)
 8001dde:	ea3e 0607 	bics.w	r6, lr, r7
 8001de2:	d1f0      	bne.n	8001dc6 <HAL_GPIO_Init+0xa6>
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001de4:	684f      	ldr	r7, [r1, #4]
 8001de6:	f007 0703 	and.w	r7, r7, #3
 8001dea:	3f01      	subs	r7, #1
 8001dec:	2f01      	cmp	r7, #1
 8001dee:	d9a1      	bls.n	8001d34 <HAL_GPIO_Init+0x14>
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001df0:	684f      	ldr	r7, [r1, #4]
 8001df2:	f007 0703 	and.w	r7, r7, #3
 8001df6:	2f03      	cmp	r7, #3
 8001df8:	d027      	beq.n	8001e4a <HAL_GPIO_Init+0x12a>
        temp = GPIOx->PUPDR;
 8001dfa:	68c7      	ldr	r7, [r0, #12]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001dfc:	f04f 0e03 	mov.w	lr, #3
 8001e00:	fa0e fe02 	lsl.w	lr, lr, r2
 8001e04:	ea27 0e0e 	bic.w	lr, r7, lr
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001e08:	688f      	ldr	r7, [r1, #8]
 8001e0a:	4097      	lsls	r7, r2
 8001e0c:	ea47 070e 	orr.w	r7, r7, lr
        GPIOx->PUPDR = temp;
 8001e10:	60c7      	str	r7, [r0, #12]
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001e12:	684f      	ldr	r7, [r1, #4]
 8001e14:	f007 0703 	and.w	r7, r7, #3
 8001e18:	2f02      	cmp	r7, #2
 8001e1a:	d116      	bne.n	8001e4a <HAL_GPIO_Init+0x12a>
        temp = GPIOx->AFR[position >> 3U];
 8001e1c:	ea4f 0ed3 	mov.w	lr, r3, lsr #3
 8001e20:	eb00 0e8e 	add.w	lr, r0, lr, lsl #2
 8001e24:	f8de 7020 	ldr.w	r7, [lr, #32]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001e28:	f003 0907 	and.w	r9, r3, #7
 8001e2c:	ea4f 0989 	mov.w	r9, r9, lsl #2
 8001e30:	f04f 0a0f 	mov.w	sl, #15
 8001e34:	fa0a fa09 	lsl.w	sl, sl, r9
 8001e38:	ea27 0a0a 	bic.w	sl, r7, sl
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001e3c:	690f      	ldr	r7, [r1, #16]
 8001e3e:	fa07 f709 	lsl.w	r7, r7, r9
 8001e42:	ea47 070a 	orr.w	r7, r7, sl
        GPIOx->AFR[position >> 3U] = temp;
 8001e46:	f8ce 7020 	str.w	r7, [lr, #32]
      temp = GPIOx->MODER;
 8001e4a:	6807      	ldr	r7, [r0, #0]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001e4c:	f04f 0e03 	mov.w	lr, #3
 8001e50:	fa0e fe02 	lsl.w	lr, lr, r2
 8001e54:	ea27 0e0e 	bic.w	lr, r7, lr
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001e58:	684f      	ldr	r7, [r1, #4]
 8001e5a:	f007 0703 	and.w	r7, r7, #3
 8001e5e:	4097      	lsls	r7, r2
 8001e60:	ea47 070e 	orr.w	r7, r7, lr
      GPIOx->MODER = temp;
 8001e64:	6007      	str	r7, [r0, #0]
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001e66:	684f      	ldr	r7, [r1, #4]
 8001e68:	f417 3f40 	tst.w	r7, #196608	; 0x30000
 8001e6c:	d0ab      	beq.n	8001dc6 <HAL_GPIO_Init+0xa6>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001e6e:	2700      	movs	r7, #0
 8001e70:	9701      	str	r7, [sp, #4]
 8001e72:	6c6f      	ldr	r7, [r5, #68]	; 0x44
 8001e74:	f447 4780 	orr.w	r7, r7, #16384	; 0x4000
 8001e78:	646f      	str	r7, [r5, #68]	; 0x44
 8001e7a:	6c6f      	ldr	r7, [r5, #68]	; 0x44
 8001e7c:	f407 4780 	and.w	r7, r7, #16384	; 0x4000
 8001e80:	9701      	str	r7, [sp, #4]
 8001e82:	9f01      	ldr	r7, [sp, #4]
        temp = SYSCFG->EXTICR[position >> 2U];
 8001e84:	f023 0703 	bic.w	r7, r3, #3
 8001e88:	f107 4780 	add.w	r7, r7, #1073741824	; 0x40000000
 8001e8c:	f507 379c 	add.w	r7, r7, #79872	; 0x13800
 8001e90:	f8d7 a008 	ldr.w	sl, [r7, #8]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001e94:	f003 0e03 	and.w	lr, r3, #3
 8001e98:	ea4f 0b8e 	mov.w	fp, lr, lsl #2
 8001e9c:	f04f 0e0f 	mov.w	lr, #15
 8001ea0:	fa0e fe0b 	lsl.w	lr, lr, fp
 8001ea4:	ea2a 0a0e 	bic.w	sl, sl, lr
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001ea8:	4e24      	ldr	r6, [pc, #144]	; (8001f3c <HAL_GPIO_Init+0x21c>)
 8001eaa:	42b0      	cmp	r0, r6
 8001eac:	f43f af59 	beq.w	8001d62 <HAL_GPIO_Init+0x42>
 8001eb0:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8001eb4:	42b0      	cmp	r0, r6
 8001eb6:	d022      	beq.n	8001efe <HAL_GPIO_Init+0x1de>
 8001eb8:	4540      	cmp	r0, r8
 8001eba:	d023      	beq.n	8001f04 <HAL_GPIO_Init+0x1e4>
 8001ebc:	f506 6600 	add.w	r6, r6, #2048	; 0x800
 8001ec0:	42b0      	cmp	r0, r6
 8001ec2:	d022      	beq.n	8001f0a <HAL_GPIO_Init+0x1ea>
 8001ec4:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8001ec8:	42b0      	cmp	r0, r6
 8001eca:	d021      	beq.n	8001f10 <HAL_GPIO_Init+0x1f0>
 8001ecc:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8001ed0:	42b0      	cmp	r0, r6
 8001ed2:	d020      	beq.n	8001f16 <HAL_GPIO_Init+0x1f6>
 8001ed4:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8001ed8:	42b0      	cmp	r0, r6
 8001eda:	d01f      	beq.n	8001f1c <HAL_GPIO_Init+0x1fc>
 8001edc:	f8df e064 	ldr.w	lr, [pc, #100]	; 8001f44 <HAL_GPIO_Init+0x224>
 8001ee0:	4570      	cmp	r0, lr
 8001ee2:	d01e      	beq.n	8001f22 <HAL_GPIO_Init+0x202>
 8001ee4:	f50e 6e80 	add.w	lr, lr, #1024	; 0x400
 8001ee8:	4570      	cmp	r0, lr
 8001eea:	d01d      	beq.n	8001f28 <HAL_GPIO_Init+0x208>
 8001eec:	f50e 6e80 	add.w	lr, lr, #1024	; 0x400
 8001ef0:	4570      	cmp	r0, lr
 8001ef2:	bf0c      	ite	eq
 8001ef4:	f04f 0e09 	moveq.w	lr, #9
 8001ef8:	f04f 0e0a 	movne.w	lr, #10
 8001efc:	e733      	b.n	8001d66 <HAL_GPIO_Init+0x46>
 8001efe:	f04f 0e01 	mov.w	lr, #1
 8001f02:	e730      	b.n	8001d66 <HAL_GPIO_Init+0x46>
 8001f04:	f04f 0e02 	mov.w	lr, #2
 8001f08:	e72d      	b.n	8001d66 <HAL_GPIO_Init+0x46>
 8001f0a:	f04f 0e03 	mov.w	lr, #3
 8001f0e:	e72a      	b.n	8001d66 <HAL_GPIO_Init+0x46>
 8001f10:	f04f 0e04 	mov.w	lr, #4
 8001f14:	e727      	b.n	8001d66 <HAL_GPIO_Init+0x46>
 8001f16:	f04f 0e05 	mov.w	lr, #5
 8001f1a:	e724      	b.n	8001d66 <HAL_GPIO_Init+0x46>
 8001f1c:	f04f 0e06 	mov.w	lr, #6
 8001f20:	e721      	b.n	8001d66 <HAL_GPIO_Init+0x46>
 8001f22:	f04f 0e07 	mov.w	lr, #7
 8001f26:	e71e      	b.n	8001d66 <HAL_GPIO_Init+0x46>
 8001f28:	f04f 0e08 	mov.w	lr, #8
 8001f2c:	e71b      	b.n	8001d66 <HAL_GPIO_Init+0x46>
      }
    }
  }
}
 8001f2e:	b003      	add	sp, #12
 8001f30:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001f34:	40023800 	.word	0x40023800
 8001f38:	40013c00 	.word	0x40013c00
 8001f3c:	40020000 	.word	0x40020000
 8001f40:	40020800 	.word	0x40020800
 8001f44:	40021c00 	.word	0x40021c00

08001f48 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001f48:	b10a      	cbz	r2, 8001f4e <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001f4a:	6181      	str	r1, [r0, #24]
 8001f4c:	4770      	bx	lr
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001f4e:	0409      	lsls	r1, r1, #16
 8001f50:	6181      	str	r1, [r0, #24]
  }
}
 8001f52:	4770      	bx	lr

08001f54 <HAL_GPIO_TogglePin>:

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001f54:	6943      	ldr	r3, [r0, #20]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001f56:	ea01 0203 	and.w	r2, r1, r3
 8001f5a:	ea21 0103 	bic.w	r1, r1, r3
 8001f5e:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8001f62:	6181      	str	r1, [r0, #24]
}
 8001f64:	4770      	bx	lr

08001f66 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8001f66:	b570      	push	{r4, r5, r6, lr}
 8001f68:	b08a      	sub	sp, #40	; 0x28
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8001f6a:	2800      	cmp	r0, #0
 8001f6c:	f000 8090 	beq.w	8002090 <HAL_PCD_Init+0x12a>
 8001f70:	4605      	mov	r5, r0
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8001f72:	6804      	ldr	r4, [r0, #0]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8001f74:	f890 34bd 	ldrb.w	r3, [r0, #1213]	; 0x4bd
 8001f78:	b33b      	cbz	r3, 8001fca <HAL_PCD_Init+0x64>
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8001f7a:	2303      	movs	r3, #3
 8001f7c:	f885 34bd 	strb.w	r3, [r5, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8001f80:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8001f82:	f413 7f80 	tst.w	r3, #256	; 0x100
  {
    hpcd->Init.dma_enable = 0U;
 8001f86:	bf04      	itt	eq
 8001f88:	2300      	moveq	r3, #0
 8001f8a:	612b      	streq	r3, [r5, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8001f8c:	6828      	ldr	r0, [r5, #0]
 8001f8e:	f000 ff6c 	bl	8002e6a <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001f92:	462c      	mov	r4, r5
 8001f94:	f854 6b10 	ldr.w	r6, [r4], #16
 8001f98:	46ec      	mov	ip, sp
 8001f9a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001f9c:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8001fa0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001fa2:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8001fa6:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001faa:	e88c 0003 	stmia.w	ip, {r0, r1}
 8001fae:	1d2b      	adds	r3, r5, #4
 8001fb0:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001fb2:	4630      	mov	r0, r6
 8001fb4:	f000 ff14 	bl	8002de0 <USB_CoreInit>
 8001fb8:	4604      	mov	r4, r0
 8001fba:	b158      	cbz	r0, 8001fd4 <HAL_PCD_Init+0x6e>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001fbc:	2302      	movs	r3, #2
 8001fbe:	f885 34bd 	strb.w	r3, [r5, #1213]	; 0x4bd
    return HAL_ERROR;
 8001fc2:	2401      	movs	r4, #1
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);

  return HAL_OK;
}
 8001fc4:	4620      	mov	r0, r4
 8001fc6:	b00a      	add	sp, #40	; 0x28
 8001fc8:	bd70      	pop	{r4, r5, r6, pc}
    hpcd->Lock = HAL_UNLOCKED;
 8001fca:	f880 34bc 	strb.w	r3, [r0, #1212]	; 0x4bc
    HAL_PCD_MspInit(hpcd);
 8001fce:	f7fe fe59 	bl	8000c84 <HAL_PCD_MspInit>
 8001fd2:	e7d2      	b.n	8001f7a <HAL_PCD_Init+0x14>
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8001fd4:	2100      	movs	r1, #0
 8001fd6:	6828      	ldr	r0, [r5, #0]
 8001fd8:	f000 ff4d 	bl	8002e76 <USB_SetCurrentMode>
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001fdc:	6868      	ldr	r0, [r5, #4]
 8001fde:	b398      	cbz	r0, 8002048 <HAL_PCD_Init+0xe2>
 8001fe0:	4623      	mov	r3, r4
    hpcd->IN_ep[i].is_in = 1U;
 8001fe2:	f04f 0c01 	mov.w	ip, #1
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8001fe6:	2100      	movs	r1, #0
    hpcd->IN_ep[i].is_in = 1U;
 8001fe8:	eb03 02c3 	add.w	r2, r3, r3, lsl #3
 8001fec:	eb05 0282 	add.w	r2, r5, r2, lsl #2
 8001ff0:	f882 c03d 	strb.w	ip, [r2, #61]	; 0x3d
    hpcd->IN_ep[i].num = i;
 8001ff4:	f882 303c 	strb.w	r3, [r2, #60]	; 0x3c
    hpcd->IN_ep[i].tx_fifo_num = i;
 8001ff8:	f8a2 3044 	strh.w	r3, [r2, #68]	; 0x44
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8001ffc:	f882 1040 	strb.w	r1, [r2, #64]	; 0x40
    hpcd->IN_ep[i].maxpacket = 0U;
 8002000:	6491      	str	r1, [r2, #72]	; 0x48
    hpcd->IN_ep[i].xfer_buff = 0U;
 8002002:	64d1      	str	r1, [r2, #76]	; 0x4c
    hpcd->IN_ep[i].xfer_len = 0U;
 8002004:	eb03 02c3 	add.w	r2, r3, r3, lsl #3
 8002008:	eb05 0282 	add.w	r2, r5, r2, lsl #2
 800200c:	6551      	str	r1, [r2, #84]	; 0x54
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800200e:	3301      	adds	r3, #1
 8002010:	b2db      	uxtb	r3, r3
 8002012:	4283      	cmp	r3, r0
 8002014:	d3e8      	bcc.n	8001fe8 <HAL_PCD_Init+0x82>
    hpcd->OUT_ep[i].is_in = 0U;
 8002016:	2200      	movs	r2, #0
 8002018:	eb04 03c4 	add.w	r3, r4, r4, lsl #3
 800201c:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 8002020:	f883 227d 	strb.w	r2, [r3, #637]	; 0x27d
    hpcd->OUT_ep[i].num = i;
 8002024:	f883 427c 	strb.w	r4, [r3, #636]	; 0x27c
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8002028:	f883 2280 	strb.w	r2, [r3, #640]	; 0x280
    hpcd->OUT_ep[i].maxpacket = 0U;
 800202c:	f8c3 2288 	str.w	r2, [r3, #648]	; 0x288
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8002030:	f8c3 228c 	str.w	r2, [r3, #652]	; 0x28c
    hpcd->OUT_ep[i].xfer_len = 0U;
 8002034:	eb04 03c4 	add.w	r3, r4, r4, lsl #3
 8002038:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 800203c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002040:	3401      	adds	r4, #1
 8002042:	b2e4      	uxtb	r4, r4
 8002044:	4284      	cmp	r4, r0
 8002046:	d3e7      	bcc.n	8002018 <HAL_PCD_Init+0xb2>
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002048:	462c      	mov	r4, r5
 800204a:	f854 6b10 	ldr.w	r6, [r4], #16
 800204e:	46ec      	mov	ip, sp
 8002050:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002052:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8002056:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002058:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800205c:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002060:	e88c 0003 	stmia.w	ip, {r0, r1}
 8002064:	1d2b      	adds	r3, r5, #4
 8002066:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002068:	4630      	mov	r0, r6
 800206a:	f000 ff8b 	bl	8002f84 <USB_DevInit>
 800206e:	4604      	mov	r4, r0
 8002070:	b120      	cbz	r0, 800207c <HAL_PCD_Init+0x116>
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002072:	2302      	movs	r3, #2
 8002074:	f885 34bd 	strb.w	r3, [r5, #1213]	; 0x4bd
    return HAL_ERROR;
 8002078:	2401      	movs	r4, #1
 800207a:	e7a3      	b.n	8001fc4 <HAL_PCD_Init+0x5e>
  hpcd->USB_Address = 0U;
 800207c:	2300      	movs	r3, #0
 800207e:	f885 3038 	strb.w	r3, [r5, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8002082:	2301      	movs	r3, #1
 8002084:	f885 34bd 	strb.w	r3, [r5, #1213]	; 0x4bd
  (void)USB_DevDisconnect(hpcd->Instance);
 8002088:	6828      	ldr	r0, [r5, #0]
 800208a:	f001 f847 	bl	800311c <USB_DevDisconnect>
  return HAL_OK;
 800208e:	e799      	b.n	8001fc4 <HAL_PCD_Init+0x5e>
    return HAL_ERROR;
 8002090:	2401      	movs	r4, #1
 8002092:	e797      	b.n	8001fc4 <HAL_PCD_Init+0x5e>

08002094 <HAL_RCC_OscConfig>:
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002094:	2800      	cmp	r0, #0
 8002096:	f000 81e1 	beq.w	800245c <HAL_RCC_OscConfig+0x3c8>
{
 800209a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800209e:	b082      	sub	sp, #8
 80020a0:	4604      	mov	r4, r0
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80020a2:	6803      	ldr	r3, [r0, #0]
 80020a4:	f013 0f01 	tst.w	r3, #1
 80020a8:	d03b      	beq.n	8002122 <HAL_RCC_OscConfig+0x8e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80020aa:	4b9f      	ldr	r3, [pc, #636]	; (8002328 <HAL_RCC_OscConfig+0x294>)
 80020ac:	689b      	ldr	r3, [r3, #8]
 80020ae:	f003 030c 	and.w	r3, r3, #12
 80020b2:	2b04      	cmp	r3, #4
 80020b4:	d02c      	beq.n	8002110 <HAL_RCC_OscConfig+0x7c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80020b6:	4b9c      	ldr	r3, [pc, #624]	; (8002328 <HAL_RCC_OscConfig+0x294>)
 80020b8:	689b      	ldr	r3, [r3, #8]
 80020ba:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80020be:	2b08      	cmp	r3, #8
 80020c0:	d021      	beq.n	8002106 <HAL_RCC_OscConfig+0x72>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80020c2:	6863      	ldr	r3, [r4, #4]
 80020c4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80020c8:	d04f      	beq.n	800216a <HAL_RCC_OscConfig+0xd6>
 80020ca:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80020ce:	d052      	beq.n	8002176 <HAL_RCC_OscConfig+0xe2>
 80020d0:	4b95      	ldr	r3, [pc, #596]	; (8002328 <HAL_RCC_OscConfig+0x294>)
 80020d2:	681a      	ldr	r2, [r3, #0]
 80020d4:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80020d8:	601a      	str	r2, [r3, #0]
 80020da:	681a      	ldr	r2, [r3, #0]
 80020dc:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80020e0:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80020e2:	6863      	ldr	r3, [r4, #4]
 80020e4:	2b00      	cmp	r3, #0
 80020e6:	d050      	beq.n	800218a <HAL_RCC_OscConfig+0xf6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80020e8:	f7ff f812 	bl	8001110 <HAL_GetTick>
 80020ec:	4605      	mov	r5, r0

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80020ee:	4e8e      	ldr	r6, [pc, #568]	; (8002328 <HAL_RCC_OscConfig+0x294>)
 80020f0:	6833      	ldr	r3, [r6, #0]
 80020f2:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 80020f6:	d114      	bne.n	8002122 <HAL_RCC_OscConfig+0x8e>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80020f8:	f7ff f80a 	bl	8001110 <HAL_GetTick>
 80020fc:	1b40      	subs	r0, r0, r5
 80020fe:	2864      	cmp	r0, #100	; 0x64
 8002100:	d9f6      	bls.n	80020f0 <HAL_RCC_OscConfig+0x5c>
          {
            return HAL_TIMEOUT;
 8002102:	2003      	movs	r0, #3
 8002104:	e1b1      	b.n	800246a <HAL_RCC_OscConfig+0x3d6>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002106:	4b88      	ldr	r3, [pc, #544]	; (8002328 <HAL_RCC_OscConfig+0x294>)
 8002108:	685b      	ldr	r3, [r3, #4]
 800210a:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
 800210e:	d0d8      	beq.n	80020c2 <HAL_RCC_OscConfig+0x2e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002110:	4b85      	ldr	r3, [pc, #532]	; (8002328 <HAL_RCC_OscConfig+0x294>)
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8002118:	d003      	beq.n	8002122 <HAL_RCC_OscConfig+0x8e>
 800211a:	6863      	ldr	r3, [r4, #4]
 800211c:	2b00      	cmp	r3, #0
 800211e:	f000 819f 	beq.w	8002460 <HAL_RCC_OscConfig+0x3cc>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002122:	6823      	ldr	r3, [r4, #0]
 8002124:	f013 0f02 	tst.w	r3, #2
 8002128:	d054      	beq.n	80021d4 <HAL_RCC_OscConfig+0x140>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800212a:	4b7f      	ldr	r3, [pc, #508]	; (8002328 <HAL_RCC_OscConfig+0x294>)
 800212c:	689b      	ldr	r3, [r3, #8]
 800212e:	f013 0f0c 	tst.w	r3, #12
 8002132:	d03e      	beq.n	80021b2 <HAL_RCC_OscConfig+0x11e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002134:	4b7c      	ldr	r3, [pc, #496]	; (8002328 <HAL_RCC_OscConfig+0x294>)
 8002136:	689b      	ldr	r3, [r3, #8]
 8002138:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800213c:	2b08      	cmp	r3, #8
 800213e:	d033      	beq.n	80021a8 <HAL_RCC_OscConfig+0x114>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002140:	68e3      	ldr	r3, [r4, #12]
 8002142:	2b00      	cmp	r3, #0
 8002144:	d068      	beq.n	8002218 <HAL_RCC_OscConfig+0x184>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002146:	4b79      	ldr	r3, [pc, #484]	; (800232c <HAL_RCC_OscConfig+0x298>)
 8002148:	2201      	movs	r2, #1
 800214a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800214c:	f7fe ffe0 	bl	8001110 <HAL_GetTick>
 8002150:	4605      	mov	r5, r0

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002152:	4e75      	ldr	r6, [pc, #468]	; (8002328 <HAL_RCC_OscConfig+0x294>)
 8002154:	6833      	ldr	r3, [r6, #0]
 8002156:	f013 0f02 	tst.w	r3, #2
 800215a:	d154      	bne.n	8002206 <HAL_RCC_OscConfig+0x172>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800215c:	f7fe ffd8 	bl	8001110 <HAL_GetTick>
 8002160:	1b40      	subs	r0, r0, r5
 8002162:	2802      	cmp	r0, #2
 8002164:	d9f6      	bls.n	8002154 <HAL_RCC_OscConfig+0xc0>
          {
            return HAL_TIMEOUT;
 8002166:	2003      	movs	r0, #3
 8002168:	e17f      	b.n	800246a <HAL_RCC_OscConfig+0x3d6>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800216a:	4a6f      	ldr	r2, [pc, #444]	; (8002328 <HAL_RCC_OscConfig+0x294>)
 800216c:	6813      	ldr	r3, [r2, #0]
 800216e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002172:	6013      	str	r3, [r2, #0]
 8002174:	e7b5      	b.n	80020e2 <HAL_RCC_OscConfig+0x4e>
 8002176:	4b6c      	ldr	r3, [pc, #432]	; (8002328 <HAL_RCC_OscConfig+0x294>)
 8002178:	681a      	ldr	r2, [r3, #0]
 800217a:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 800217e:	601a      	str	r2, [r3, #0]
 8002180:	681a      	ldr	r2, [r3, #0]
 8002182:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8002186:	601a      	str	r2, [r3, #0]
 8002188:	e7ab      	b.n	80020e2 <HAL_RCC_OscConfig+0x4e>
        tickstart = HAL_GetTick();
 800218a:	f7fe ffc1 	bl	8001110 <HAL_GetTick>
 800218e:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002190:	4e65      	ldr	r6, [pc, #404]	; (8002328 <HAL_RCC_OscConfig+0x294>)
 8002192:	6833      	ldr	r3, [r6, #0]
 8002194:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8002198:	d0c3      	beq.n	8002122 <HAL_RCC_OscConfig+0x8e>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800219a:	f7fe ffb9 	bl	8001110 <HAL_GetTick>
 800219e:	1b40      	subs	r0, r0, r5
 80021a0:	2864      	cmp	r0, #100	; 0x64
 80021a2:	d9f6      	bls.n	8002192 <HAL_RCC_OscConfig+0xfe>
            return HAL_TIMEOUT;
 80021a4:	2003      	movs	r0, #3
 80021a6:	e160      	b.n	800246a <HAL_RCC_OscConfig+0x3d6>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80021a8:	4b5f      	ldr	r3, [pc, #380]	; (8002328 <HAL_RCC_OscConfig+0x294>)
 80021aa:	685b      	ldr	r3, [r3, #4]
 80021ac:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
 80021b0:	d1c6      	bne.n	8002140 <HAL_RCC_OscConfig+0xac>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80021b2:	4b5d      	ldr	r3, [pc, #372]	; (8002328 <HAL_RCC_OscConfig+0x294>)
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	f013 0f02 	tst.w	r3, #2
 80021ba:	d003      	beq.n	80021c4 <HAL_RCC_OscConfig+0x130>
 80021bc:	68e3      	ldr	r3, [r4, #12]
 80021be:	2b01      	cmp	r3, #1
 80021c0:	f040 8150 	bne.w	8002464 <HAL_RCC_OscConfig+0x3d0>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80021c4:	4a58      	ldr	r2, [pc, #352]	; (8002328 <HAL_RCC_OscConfig+0x294>)
 80021c6:	6813      	ldr	r3, [r2, #0]
 80021c8:	6921      	ldr	r1, [r4, #16]
 80021ca:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 80021ce:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 80021d2:	6013      	str	r3, [r2, #0]
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80021d4:	6823      	ldr	r3, [r4, #0]
 80021d6:	f013 0f08 	tst.w	r3, #8
 80021da:	d042      	beq.n	8002262 <HAL_RCC_OscConfig+0x1ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80021dc:	6963      	ldr	r3, [r4, #20]
 80021de:	b36b      	cbz	r3, 800223c <HAL_RCC_OscConfig+0x1a8>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80021e0:	4b52      	ldr	r3, [pc, #328]	; (800232c <HAL_RCC_OscConfig+0x298>)
 80021e2:	2201      	movs	r2, #1
 80021e4:	f8c3 2e80 	str.w	r2, [r3, #3712]	; 0xe80

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80021e8:	f7fe ff92 	bl	8001110 <HAL_GetTick>
 80021ec:	4605      	mov	r5, r0

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80021ee:	4e4e      	ldr	r6, [pc, #312]	; (8002328 <HAL_RCC_OscConfig+0x294>)
 80021f0:	6f73      	ldr	r3, [r6, #116]	; 0x74
 80021f2:	f013 0f02 	tst.w	r3, #2
 80021f6:	d134      	bne.n	8002262 <HAL_RCC_OscConfig+0x1ce>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80021f8:	f7fe ff8a 	bl	8001110 <HAL_GetTick>
 80021fc:	1b40      	subs	r0, r0, r5
 80021fe:	2802      	cmp	r0, #2
 8002200:	d9f6      	bls.n	80021f0 <HAL_RCC_OscConfig+0x15c>
        {
          return HAL_TIMEOUT;
 8002202:	2003      	movs	r0, #3
 8002204:	e131      	b.n	800246a <HAL_RCC_OscConfig+0x3d6>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002206:	4a48      	ldr	r2, [pc, #288]	; (8002328 <HAL_RCC_OscConfig+0x294>)
 8002208:	6813      	ldr	r3, [r2, #0]
 800220a:	6921      	ldr	r1, [r4, #16]
 800220c:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8002210:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8002214:	6013      	str	r3, [r2, #0]
 8002216:	e7dd      	b.n	80021d4 <HAL_RCC_OscConfig+0x140>
        __HAL_RCC_HSI_DISABLE();
 8002218:	4b44      	ldr	r3, [pc, #272]	; (800232c <HAL_RCC_OscConfig+0x298>)
 800221a:	2200      	movs	r2, #0
 800221c:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 800221e:	f7fe ff77 	bl	8001110 <HAL_GetTick>
 8002222:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002224:	4e40      	ldr	r6, [pc, #256]	; (8002328 <HAL_RCC_OscConfig+0x294>)
 8002226:	6833      	ldr	r3, [r6, #0]
 8002228:	f013 0f02 	tst.w	r3, #2
 800222c:	d0d2      	beq.n	80021d4 <HAL_RCC_OscConfig+0x140>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800222e:	f7fe ff6f 	bl	8001110 <HAL_GetTick>
 8002232:	1b40      	subs	r0, r0, r5
 8002234:	2802      	cmp	r0, #2
 8002236:	d9f6      	bls.n	8002226 <HAL_RCC_OscConfig+0x192>
            return HAL_TIMEOUT;
 8002238:	2003      	movs	r0, #3
 800223a:	e116      	b.n	800246a <HAL_RCC_OscConfig+0x3d6>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800223c:	4b3b      	ldr	r3, [pc, #236]	; (800232c <HAL_RCC_OscConfig+0x298>)
 800223e:	2200      	movs	r2, #0
 8002240:	f8c3 2e80 	str.w	r2, [r3, #3712]	; 0xe80

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002244:	f7fe ff64 	bl	8001110 <HAL_GetTick>
 8002248:	4605      	mov	r5, r0

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800224a:	4e37      	ldr	r6, [pc, #220]	; (8002328 <HAL_RCC_OscConfig+0x294>)
 800224c:	6f73      	ldr	r3, [r6, #116]	; 0x74
 800224e:	f013 0f02 	tst.w	r3, #2
 8002252:	d006      	beq.n	8002262 <HAL_RCC_OscConfig+0x1ce>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002254:	f7fe ff5c 	bl	8001110 <HAL_GetTick>
 8002258:	1b40      	subs	r0, r0, r5
 800225a:	2802      	cmp	r0, #2
 800225c:	d9f6      	bls.n	800224c <HAL_RCC_OscConfig+0x1b8>
        {
          return HAL_TIMEOUT;
 800225e:	2003      	movs	r0, #3
 8002260:	e103      	b.n	800246a <HAL_RCC_OscConfig+0x3d6>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002262:	6823      	ldr	r3, [r4, #0]
 8002264:	f013 0f04 	tst.w	r3, #4
 8002268:	d076      	beq.n	8002358 <HAL_RCC_OscConfig+0x2c4>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800226a:	4b2f      	ldr	r3, [pc, #188]	; (8002328 <HAL_RCC_OscConfig+0x294>)
 800226c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800226e:	f013 5f80 	tst.w	r3, #268435456	; 0x10000000
 8002272:	d133      	bne.n	80022dc <HAL_RCC_OscConfig+0x248>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002274:	2300      	movs	r3, #0
 8002276:	9301      	str	r3, [sp, #4]
 8002278:	4b2b      	ldr	r3, [pc, #172]	; (8002328 <HAL_RCC_OscConfig+0x294>)
 800227a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800227c:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8002280:	641a      	str	r2, [r3, #64]	; 0x40
 8002282:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002284:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002288:	9301      	str	r3, [sp, #4]
 800228a:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 800228c:	2501      	movs	r5, #1
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800228e:	4b28      	ldr	r3, [pc, #160]	; (8002330 <HAL_RCC_OscConfig+0x29c>)
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	f413 7f80 	tst.w	r3, #256	; 0x100
 8002296:	d023      	beq.n	80022e0 <HAL_RCC_OscConfig+0x24c>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002298:	68a3      	ldr	r3, [r4, #8]
 800229a:	2b01      	cmp	r3, #1
 800229c:	d034      	beq.n	8002308 <HAL_RCC_OscConfig+0x274>
 800229e:	2b05      	cmp	r3, #5
 80022a0:	d038      	beq.n	8002314 <HAL_RCC_OscConfig+0x280>
 80022a2:	4b21      	ldr	r3, [pc, #132]	; (8002328 <HAL_RCC_OscConfig+0x294>)
 80022a4:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80022a6:	f022 0201 	bic.w	r2, r2, #1
 80022aa:	671a      	str	r2, [r3, #112]	; 0x70
 80022ac:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80022ae:	f022 0204 	bic.w	r2, r2, #4
 80022b2:	671a      	str	r2, [r3, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80022b4:	68a3      	ldr	r3, [r4, #8]
 80022b6:	2b00      	cmp	r3, #0
 80022b8:	d03c      	beq.n	8002334 <HAL_RCC_OscConfig+0x2a0>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80022ba:	f7fe ff29 	bl	8001110 <HAL_GetTick>
 80022be:	4606      	mov	r6, r0

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80022c0:	4f19      	ldr	r7, [pc, #100]	; (8002328 <HAL_RCC_OscConfig+0x294>)
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80022c2:	f241 3888 	movw	r8, #5000	; 0x1388
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80022c6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80022c8:	f013 0f02 	tst.w	r3, #2
 80022cc:	d143      	bne.n	8002356 <HAL_RCC_OscConfig+0x2c2>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80022ce:	f7fe ff1f 	bl	8001110 <HAL_GetTick>
 80022d2:	1b80      	subs	r0, r0, r6
 80022d4:	4540      	cmp	r0, r8
 80022d6:	d9f6      	bls.n	80022c6 <HAL_RCC_OscConfig+0x232>
        {
          return HAL_TIMEOUT;
 80022d8:	2003      	movs	r0, #3
 80022da:	e0c6      	b.n	800246a <HAL_RCC_OscConfig+0x3d6>
    FlagStatus       pwrclkchanged = RESET;
 80022dc:	2500      	movs	r5, #0
 80022de:	e7d6      	b.n	800228e <HAL_RCC_OscConfig+0x1fa>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80022e0:	4a13      	ldr	r2, [pc, #76]	; (8002330 <HAL_RCC_OscConfig+0x29c>)
 80022e2:	6813      	ldr	r3, [r2, #0]
 80022e4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80022e8:	6013      	str	r3, [r2, #0]
      tickstart = HAL_GetTick();
 80022ea:	f7fe ff11 	bl	8001110 <HAL_GetTick>
 80022ee:	4606      	mov	r6, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80022f0:	4f0f      	ldr	r7, [pc, #60]	; (8002330 <HAL_RCC_OscConfig+0x29c>)
 80022f2:	683b      	ldr	r3, [r7, #0]
 80022f4:	f413 7f80 	tst.w	r3, #256	; 0x100
 80022f8:	d1ce      	bne.n	8002298 <HAL_RCC_OscConfig+0x204>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80022fa:	f7fe ff09 	bl	8001110 <HAL_GetTick>
 80022fe:	1b80      	subs	r0, r0, r6
 8002300:	2802      	cmp	r0, #2
 8002302:	d9f6      	bls.n	80022f2 <HAL_RCC_OscConfig+0x25e>
          return HAL_TIMEOUT;
 8002304:	2003      	movs	r0, #3
 8002306:	e0b0      	b.n	800246a <HAL_RCC_OscConfig+0x3d6>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002308:	4a07      	ldr	r2, [pc, #28]	; (8002328 <HAL_RCC_OscConfig+0x294>)
 800230a:	6f13      	ldr	r3, [r2, #112]	; 0x70
 800230c:	f043 0301 	orr.w	r3, r3, #1
 8002310:	6713      	str	r3, [r2, #112]	; 0x70
 8002312:	e7cf      	b.n	80022b4 <HAL_RCC_OscConfig+0x220>
 8002314:	4b04      	ldr	r3, [pc, #16]	; (8002328 <HAL_RCC_OscConfig+0x294>)
 8002316:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8002318:	f042 0204 	orr.w	r2, r2, #4
 800231c:	671a      	str	r2, [r3, #112]	; 0x70
 800231e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8002320:	f042 0201 	orr.w	r2, r2, #1
 8002324:	671a      	str	r2, [r3, #112]	; 0x70
 8002326:	e7c5      	b.n	80022b4 <HAL_RCC_OscConfig+0x220>
 8002328:	40023800 	.word	0x40023800
 800232c:	42470000 	.word	0x42470000
 8002330:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002334:	f7fe feec 	bl	8001110 <HAL_GetTick>
 8002338:	4606      	mov	r6, r0

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800233a:	4f52      	ldr	r7, [pc, #328]	; (8002484 <HAL_RCC_OscConfig+0x3f0>)
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800233c:	f241 3888 	movw	r8, #5000	; 0x1388
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002340:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002342:	f013 0f02 	tst.w	r3, #2
 8002346:	d006      	beq.n	8002356 <HAL_RCC_OscConfig+0x2c2>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002348:	f7fe fee2 	bl	8001110 <HAL_GetTick>
 800234c:	1b80      	subs	r0, r0, r6
 800234e:	4540      	cmp	r0, r8
 8002350:	d9f6      	bls.n	8002340 <HAL_RCC_OscConfig+0x2ac>
        {
          return HAL_TIMEOUT;
 8002352:	2003      	movs	r0, #3
 8002354:	e089      	b.n	800246a <HAL_RCC_OscConfig+0x3d6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002356:	b9ed      	cbnz	r5, 8002394 <HAL_RCC_OscConfig+0x300>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002358:	69a3      	ldr	r3, [r4, #24]
 800235a:	2b00      	cmp	r3, #0
 800235c:	f000 8084 	beq.w	8002468 <HAL_RCC_OscConfig+0x3d4>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002360:	4a48      	ldr	r2, [pc, #288]	; (8002484 <HAL_RCC_OscConfig+0x3f0>)
 8002362:	6892      	ldr	r2, [r2, #8]
 8002364:	f002 020c 	and.w	r2, r2, #12
 8002368:	2a08      	cmp	r2, #8
 800236a:	d051      	beq.n	8002410 <HAL_RCC_OscConfig+0x37c>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800236c:	2b02      	cmp	r3, #2
 800236e:	d017      	beq.n	80023a0 <HAL_RCC_OscConfig+0x30c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002370:	4b45      	ldr	r3, [pc, #276]	; (8002488 <HAL_RCC_OscConfig+0x3f4>)
 8002372:	2200      	movs	r2, #0
 8002374:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002376:	f7fe fecb 	bl	8001110 <HAL_GetTick>
 800237a:	4604      	mov	r4, r0

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800237c:	4d41      	ldr	r5, [pc, #260]	; (8002484 <HAL_RCC_OscConfig+0x3f0>)
 800237e:	682b      	ldr	r3, [r5, #0]
 8002380:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8002384:	d042      	beq.n	800240c <HAL_RCC_OscConfig+0x378>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002386:	f7fe fec3 	bl	8001110 <HAL_GetTick>
 800238a:	1b00      	subs	r0, r0, r4
 800238c:	2802      	cmp	r0, #2
 800238e:	d9f6      	bls.n	800237e <HAL_RCC_OscConfig+0x2ea>
          {
            return HAL_TIMEOUT;
 8002390:	2003      	movs	r0, #3
 8002392:	e06a      	b.n	800246a <HAL_RCC_OscConfig+0x3d6>
      __HAL_RCC_PWR_CLK_DISABLE();
 8002394:	4a3b      	ldr	r2, [pc, #236]	; (8002484 <HAL_RCC_OscConfig+0x3f0>)
 8002396:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8002398:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800239c:	6413      	str	r3, [r2, #64]	; 0x40
 800239e:	e7db      	b.n	8002358 <HAL_RCC_OscConfig+0x2c4>
        __HAL_RCC_PLL_DISABLE();
 80023a0:	4b39      	ldr	r3, [pc, #228]	; (8002488 <HAL_RCC_OscConfig+0x3f4>)
 80023a2:	2200      	movs	r2, #0
 80023a4:	661a      	str	r2, [r3, #96]	; 0x60
        tickstart = HAL_GetTick();
 80023a6:	f7fe feb3 	bl	8001110 <HAL_GetTick>
 80023aa:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80023ac:	4e35      	ldr	r6, [pc, #212]	; (8002484 <HAL_RCC_OscConfig+0x3f0>)
 80023ae:	6833      	ldr	r3, [r6, #0]
 80023b0:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 80023b4:	d006      	beq.n	80023c4 <HAL_RCC_OscConfig+0x330>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80023b6:	f7fe feab 	bl	8001110 <HAL_GetTick>
 80023ba:	1b40      	subs	r0, r0, r5
 80023bc:	2802      	cmp	r0, #2
 80023be:	d9f6      	bls.n	80023ae <HAL_RCC_OscConfig+0x31a>
            return HAL_TIMEOUT;
 80023c0:	2003      	movs	r0, #3
 80023c2:	e052      	b.n	800246a <HAL_RCC_OscConfig+0x3d6>
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80023c4:	69e3      	ldr	r3, [r4, #28]
 80023c6:	6a22      	ldr	r2, [r4, #32]
 80023c8:	4313      	orrs	r3, r2
 80023ca:	6a62      	ldr	r2, [r4, #36]	; 0x24
 80023cc:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 80023d0:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 80023d2:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 80023d6:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 80023d8:	0852      	lsrs	r2, r2, #1
 80023da:	3a01      	subs	r2, #1
 80023dc:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80023e0:	4a28      	ldr	r2, [pc, #160]	; (8002484 <HAL_RCC_OscConfig+0x3f0>)
 80023e2:	6053      	str	r3, [r2, #4]
        __HAL_RCC_PLL_ENABLE();
 80023e4:	4b28      	ldr	r3, [pc, #160]	; (8002488 <HAL_RCC_OscConfig+0x3f4>)
 80023e6:	2201      	movs	r2, #1
 80023e8:	661a      	str	r2, [r3, #96]	; 0x60
        tickstart = HAL_GetTick();
 80023ea:	f7fe fe91 	bl	8001110 <HAL_GetTick>
 80023ee:	4604      	mov	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80023f0:	4d24      	ldr	r5, [pc, #144]	; (8002484 <HAL_RCC_OscConfig+0x3f0>)
 80023f2:	682b      	ldr	r3, [r5, #0]
 80023f4:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 80023f8:	d106      	bne.n	8002408 <HAL_RCC_OscConfig+0x374>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80023fa:	f7fe fe89 	bl	8001110 <HAL_GetTick>
 80023fe:	1b00      	subs	r0, r0, r4
 8002400:	2802      	cmp	r0, #2
 8002402:	d9f6      	bls.n	80023f2 <HAL_RCC_OscConfig+0x35e>
            return HAL_TIMEOUT;
 8002404:	2003      	movs	r0, #3
 8002406:	e030      	b.n	800246a <HAL_RCC_OscConfig+0x3d6>
          return HAL_ERROR;
        }
      }
    }
  }
  return HAL_OK;
 8002408:	2000      	movs	r0, #0
 800240a:	e02e      	b.n	800246a <HAL_RCC_OscConfig+0x3d6>
 800240c:	2000      	movs	r0, #0
 800240e:	e02c      	b.n	800246a <HAL_RCC_OscConfig+0x3d6>
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002410:	2b01      	cmp	r3, #1
 8002412:	d02d      	beq.n	8002470 <HAL_RCC_OscConfig+0x3dc>
        pll_config = RCC->PLLCFGR;
 8002414:	4b1b      	ldr	r3, [pc, #108]	; (8002484 <HAL_RCC_OscConfig+0x3f0>)
 8002416:	685b      	ldr	r3, [r3, #4]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002418:	f403 0180 	and.w	r1, r3, #4194304	; 0x400000
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800241c:	69e2      	ldr	r2, [r4, #28]
 800241e:	4291      	cmp	r1, r2
 8002420:	d128      	bne.n	8002474 <HAL_RCC_OscConfig+0x3e0>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002422:	f003 023f 	and.w	r2, r3, #63	; 0x3f
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002426:	6a21      	ldr	r1, [r4, #32]
 8002428:	428a      	cmp	r2, r1
 800242a:	d125      	bne.n	8002478 <HAL_RCC_OscConfig+0x3e4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800242c:	6a61      	ldr	r1, [r4, #36]	; 0x24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800242e:	f647 72c0 	movw	r2, #32704	; 0x7fc0
 8002432:	401a      	ands	r2, r3
 8002434:	ebb2 1f81 	cmp.w	r2, r1, lsl #6
 8002438:	d120      	bne.n	800247c <HAL_RCC_OscConfig+0x3e8>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800243a:	f403 3140 	and.w	r1, r3, #196608	; 0x30000
 800243e:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8002440:	0852      	lsrs	r2, r2, #1
 8002442:	3a01      	subs	r2, #1
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002444:	ebb1 4f02 	cmp.w	r1, r2, lsl #16
 8002448:	d11a      	bne.n	8002480 <HAL_RCC_OscConfig+0x3ec>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800244a:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 800244c:	f003 6370 	and.w	r3, r3, #251658240	; 0xf000000
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002450:	ebb3 6f02 	cmp.w	r3, r2, lsl #24
        return HAL_ERROR;
 8002454:	bf14      	ite	ne
 8002456:	2001      	movne	r0, #1
 8002458:	2000      	moveq	r0, #0
 800245a:	e006      	b.n	800246a <HAL_RCC_OscConfig+0x3d6>
    return HAL_ERROR;
 800245c:	2001      	movs	r0, #1
}
 800245e:	4770      	bx	lr
        return HAL_ERROR;
 8002460:	2001      	movs	r0, #1
 8002462:	e002      	b.n	800246a <HAL_RCC_OscConfig+0x3d6>
        return HAL_ERROR;
 8002464:	2001      	movs	r0, #1
 8002466:	e000      	b.n	800246a <HAL_RCC_OscConfig+0x3d6>
  return HAL_OK;
 8002468:	2000      	movs	r0, #0
}
 800246a:	b002      	add	sp, #8
 800246c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        return HAL_ERROR;
 8002470:	2001      	movs	r0, #1
 8002472:	e7fa      	b.n	800246a <HAL_RCC_OscConfig+0x3d6>
          return HAL_ERROR;
 8002474:	2001      	movs	r0, #1
 8002476:	e7f8      	b.n	800246a <HAL_RCC_OscConfig+0x3d6>
 8002478:	2001      	movs	r0, #1
 800247a:	e7f6      	b.n	800246a <HAL_RCC_OscConfig+0x3d6>
 800247c:	2001      	movs	r0, #1
 800247e:	e7f4      	b.n	800246a <HAL_RCC_OscConfig+0x3d6>
 8002480:	2001      	movs	r0, #1
 8002482:	e7f2      	b.n	800246a <HAL_RCC_OscConfig+0x3d6>
 8002484:	40023800 	.word	0x40023800
 8002488:	42470000 	.word	0x42470000

0800248c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800248c:	b508      	push	{r3, lr}
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
  uint32_t sysclockfreq = 0U;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800248e:	4b31      	ldr	r3, [pc, #196]	; (8002554 <HAL_RCC_GetSysClockFreq+0xc8>)
 8002490:	689b      	ldr	r3, [r3, #8]
 8002492:	f003 030c 	and.w	r3, r3, #12
 8002496:	2b04      	cmp	r3, #4
 8002498:	d057      	beq.n	800254a <HAL_RCC_GetSysClockFreq+0xbe>
 800249a:	2b08      	cmp	r3, #8
 800249c:	d157      	bne.n	800254e <HAL_RCC_GetSysClockFreq+0xc2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800249e:	4b2d      	ldr	r3, [pc, #180]	; (8002554 <HAL_RCC_GetSysClockFreq+0xc8>)
 80024a0:	685a      	ldr	r2, [r3, #4]
 80024a2:	f002 023f 	and.w	r2, r2, #63	; 0x3f
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80024a6:	685b      	ldr	r3, [r3, #4]
 80024a8:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
 80024ac:	d02a      	beq.n	8002504 <HAL_RCC_GetSysClockFreq+0x78>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80024ae:	4b29      	ldr	r3, [pc, #164]	; (8002554 <HAL_RCC_GetSysClockFreq+0xc8>)
 80024b0:	6859      	ldr	r1, [r3, #4]
 80024b2:	f3c1 1c88 	ubfx	ip, r1, #6, #9
 80024b6:	ea4f 114c 	mov.w	r1, ip, lsl #5
 80024ba:	ebb1 000c 	subs.w	r0, r1, ip
 80024be:	eb6e 0e0e 	sbc.w	lr, lr, lr
 80024c2:	ea4f 138e 	mov.w	r3, lr, lsl #6
 80024c6:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80024ca:	0181      	lsls	r1, r0, #6
 80024cc:	1a09      	subs	r1, r1, r0
 80024ce:	eb63 030e 	sbc.w	r3, r3, lr
 80024d2:	00db      	lsls	r3, r3, #3
 80024d4:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80024d8:	00c9      	lsls	r1, r1, #3
 80024da:	eb11 0c0c 	adds.w	ip, r1, ip
 80024de:	f143 0300 	adc.w	r3, r3, #0
 80024e2:	0259      	lsls	r1, r3, #9
 80024e4:	2300      	movs	r3, #0
 80024e6:	ea4f 204c 	mov.w	r0, ip, lsl #9
 80024ea:	ea41 51dc 	orr.w	r1, r1, ip, lsr #23
 80024ee:	f7fd fee7 	bl	80002c0 <__aeabi_uldivmod>
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80024f2:	4b18      	ldr	r3, [pc, #96]	; (8002554 <HAL_RCC_GetSysClockFreq+0xc8>)
 80024f4:	685b      	ldr	r3, [r3, #4]
 80024f6:	f3c3 4301 	ubfx	r3, r3, #16, #2
 80024fa:	3301      	adds	r3, #1
 80024fc:	005b      	lsls	r3, r3, #1

      sysclockfreq = pllvco/pllp;
 80024fe:	fbb0 f0f3 	udiv	r0, r0, r3
      break;
 8002502:	e025      	b.n	8002550 <HAL_RCC_GetSysClockFreq+0xc4>
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002504:	4b13      	ldr	r3, [pc, #76]	; (8002554 <HAL_RCC_GetSysClockFreq+0xc8>)
 8002506:	6859      	ldr	r1, [r3, #4]
 8002508:	f3c1 1c88 	ubfx	ip, r1, #6, #9
 800250c:	ea4f 114c 	mov.w	r1, ip, lsl #5
 8002510:	ebb1 000c 	subs.w	r0, r1, ip
 8002514:	eb6e 0e0e 	sbc.w	lr, lr, lr
 8002518:	ea4f 138e 	mov.w	r3, lr, lsl #6
 800251c:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8002520:	0181      	lsls	r1, r0, #6
 8002522:	1a09      	subs	r1, r1, r0
 8002524:	eb63 030e 	sbc.w	r3, r3, lr
 8002528:	00db      	lsls	r3, r3, #3
 800252a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800252e:	00c9      	lsls	r1, r1, #3
 8002530:	eb11 0c0c 	adds.w	ip, r1, ip
 8002534:	f143 0300 	adc.w	r3, r3, #0
 8002538:	0299      	lsls	r1, r3, #10
 800253a:	2300      	movs	r3, #0
 800253c:	ea4f 208c 	mov.w	r0, ip, lsl #10
 8002540:	ea41 519c 	orr.w	r1, r1, ip, lsr #22
 8002544:	f7fd febc 	bl	80002c0 <__aeabi_uldivmod>
 8002548:	e7d3      	b.n	80024f2 <HAL_RCC_GetSysClockFreq+0x66>
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800254a:	4803      	ldr	r0, [pc, #12]	; (8002558 <HAL_RCC_GetSysClockFreq+0xcc>)
 800254c:	e000      	b.n	8002550 <HAL_RCC_GetSysClockFreq+0xc4>
      sysclockfreq = HSI_VALUE;
 800254e:	4803      	ldr	r0, [pc, #12]	; (800255c <HAL_RCC_GetSysClockFreq+0xd0>)
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 8002550:	bd08      	pop	{r3, pc}
 8002552:	bf00      	nop
 8002554:	40023800 	.word	0x40023800
 8002558:	007a1200 	.word	0x007a1200
 800255c:	00f42400 	.word	0x00f42400

08002560 <HAL_RCC_ClockConfig>:
  if(RCC_ClkInitStruct == NULL)
 8002560:	2800      	cmp	r0, #0
 8002562:	f000 809d 	beq.w	80026a0 <HAL_RCC_ClockConfig+0x140>
{
 8002566:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800256a:	460d      	mov	r5, r1
 800256c:	4604      	mov	r4, r0
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800256e:	4b50      	ldr	r3, [pc, #320]	; (80026b0 <HAL_RCC_ClockConfig+0x150>)
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	f003 030f 	and.w	r3, r3, #15
 8002576:	428b      	cmp	r3, r1
 8002578:	d208      	bcs.n	800258c <HAL_RCC_ClockConfig+0x2c>
    __HAL_FLASH_SET_LATENCY(FLatency);
 800257a:	b2cb      	uxtb	r3, r1
 800257c:	4a4c      	ldr	r2, [pc, #304]	; (80026b0 <HAL_RCC_ClockConfig+0x150>)
 800257e:	7013      	strb	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002580:	6813      	ldr	r3, [r2, #0]
 8002582:	f003 030f 	and.w	r3, r3, #15
 8002586:	428b      	cmp	r3, r1
 8002588:	f040 808c 	bne.w	80026a4 <HAL_RCC_ClockConfig+0x144>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800258c:	6823      	ldr	r3, [r4, #0]
 800258e:	f013 0f02 	tst.w	r3, #2
 8002592:	d017      	beq.n	80025c4 <HAL_RCC_ClockConfig+0x64>
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002594:	f013 0f04 	tst.w	r3, #4
 8002598:	d004      	beq.n	80025a4 <HAL_RCC_ClockConfig+0x44>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800259a:	4a46      	ldr	r2, [pc, #280]	; (80026b4 <HAL_RCC_ClockConfig+0x154>)
 800259c:	6893      	ldr	r3, [r2, #8]
 800259e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80025a2:	6093      	str	r3, [r2, #8]
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80025a4:	6823      	ldr	r3, [r4, #0]
 80025a6:	f013 0f08 	tst.w	r3, #8
 80025aa:	d004      	beq.n	80025b6 <HAL_RCC_ClockConfig+0x56>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80025ac:	4a41      	ldr	r2, [pc, #260]	; (80026b4 <HAL_RCC_ClockConfig+0x154>)
 80025ae:	6893      	ldr	r3, [r2, #8]
 80025b0:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80025b4:	6093      	str	r3, [r2, #8]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80025b6:	4a3f      	ldr	r2, [pc, #252]	; (80026b4 <HAL_RCC_ClockConfig+0x154>)
 80025b8:	6893      	ldr	r3, [r2, #8]
 80025ba:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80025be:	68a1      	ldr	r1, [r4, #8]
 80025c0:	430b      	orrs	r3, r1
 80025c2:	6093      	str	r3, [r2, #8]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80025c4:	6823      	ldr	r3, [r4, #0]
 80025c6:	f013 0f01 	tst.w	r3, #1
 80025ca:	d032      	beq.n	8002632 <HAL_RCC_ClockConfig+0xd2>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80025cc:	6862      	ldr	r2, [r4, #4]
 80025ce:	2a01      	cmp	r2, #1
 80025d0:	d021      	beq.n	8002616 <HAL_RCC_ClockConfig+0xb6>
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80025d2:	1e93      	subs	r3, r2, #2
 80025d4:	2b01      	cmp	r3, #1
 80025d6:	d925      	bls.n	8002624 <HAL_RCC_ClockConfig+0xc4>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80025d8:	4b36      	ldr	r3, [pc, #216]	; (80026b4 <HAL_RCC_ClockConfig+0x154>)
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	f013 0f02 	tst.w	r3, #2
 80025e0:	d062      	beq.n	80026a8 <HAL_RCC_ClockConfig+0x148>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80025e2:	4934      	ldr	r1, [pc, #208]	; (80026b4 <HAL_RCC_ClockConfig+0x154>)
 80025e4:	688b      	ldr	r3, [r1, #8]
 80025e6:	f023 0303 	bic.w	r3, r3, #3
 80025ea:	4313      	orrs	r3, r2
 80025ec:	608b      	str	r3, [r1, #8]
    tickstart = HAL_GetTick();
 80025ee:	f7fe fd8f 	bl	8001110 <HAL_GetTick>
 80025f2:	4606      	mov	r6, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80025f4:	4f2f      	ldr	r7, [pc, #188]	; (80026b4 <HAL_RCC_ClockConfig+0x154>)
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80025f6:	f241 3888 	movw	r8, #5000	; 0x1388
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80025fa:	68bb      	ldr	r3, [r7, #8]
 80025fc:	f003 030c 	and.w	r3, r3, #12
 8002600:	6862      	ldr	r2, [r4, #4]
 8002602:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8002606:	d014      	beq.n	8002632 <HAL_RCC_ClockConfig+0xd2>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002608:	f7fe fd82 	bl	8001110 <HAL_GetTick>
 800260c:	1b80      	subs	r0, r0, r6
 800260e:	4540      	cmp	r0, r8
 8002610:	d9f3      	bls.n	80025fa <HAL_RCC_ClockConfig+0x9a>
        return HAL_TIMEOUT;
 8002612:	2003      	movs	r0, #3
 8002614:	e042      	b.n	800269c <HAL_RCC_ClockConfig+0x13c>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002616:	4b27      	ldr	r3, [pc, #156]	; (80026b4 <HAL_RCC_ClockConfig+0x154>)
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 800261e:	d1e0      	bne.n	80025e2 <HAL_RCC_ClockConfig+0x82>
        return HAL_ERROR;
 8002620:	2001      	movs	r0, #1
 8002622:	e03b      	b.n	800269c <HAL_RCC_ClockConfig+0x13c>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002624:	4b23      	ldr	r3, [pc, #140]	; (80026b4 <HAL_RCC_ClockConfig+0x154>)
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 800262c:	d1d9      	bne.n	80025e2 <HAL_RCC_ClockConfig+0x82>
        return HAL_ERROR;
 800262e:	2001      	movs	r0, #1
 8002630:	e034      	b.n	800269c <HAL_RCC_ClockConfig+0x13c>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002632:	4b1f      	ldr	r3, [pc, #124]	; (80026b0 <HAL_RCC_ClockConfig+0x150>)
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	f003 030f 	and.w	r3, r3, #15
 800263a:	42ab      	cmp	r3, r5
 800263c:	d907      	bls.n	800264e <HAL_RCC_ClockConfig+0xee>
    __HAL_FLASH_SET_LATENCY(FLatency);
 800263e:	b2ea      	uxtb	r2, r5
 8002640:	4b1b      	ldr	r3, [pc, #108]	; (80026b0 <HAL_RCC_ClockConfig+0x150>)
 8002642:	701a      	strb	r2, [r3, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	f003 030f 	and.w	r3, r3, #15
 800264a:	42ab      	cmp	r3, r5
 800264c:	d12e      	bne.n	80026ac <HAL_RCC_ClockConfig+0x14c>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800264e:	6823      	ldr	r3, [r4, #0]
 8002650:	f013 0f04 	tst.w	r3, #4
 8002654:	d006      	beq.n	8002664 <HAL_RCC_ClockConfig+0x104>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002656:	4a17      	ldr	r2, [pc, #92]	; (80026b4 <HAL_RCC_ClockConfig+0x154>)
 8002658:	6893      	ldr	r3, [r2, #8]
 800265a:	f423 53e0 	bic.w	r3, r3, #7168	; 0x1c00
 800265e:	68e1      	ldr	r1, [r4, #12]
 8002660:	430b      	orrs	r3, r1
 8002662:	6093      	str	r3, [r2, #8]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002664:	6823      	ldr	r3, [r4, #0]
 8002666:	f013 0f08 	tst.w	r3, #8
 800266a:	d007      	beq.n	800267c <HAL_RCC_ClockConfig+0x11c>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800266c:	4a11      	ldr	r2, [pc, #68]	; (80026b4 <HAL_RCC_ClockConfig+0x154>)
 800266e:	6893      	ldr	r3, [r2, #8]
 8002670:	6921      	ldr	r1, [r4, #16]
 8002672:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 8002676:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 800267a:	6093      	str	r3, [r2, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800267c:	f7ff ff06 	bl	800248c <HAL_RCC_GetSysClockFreq>
 8002680:	4b0c      	ldr	r3, [pc, #48]	; (80026b4 <HAL_RCC_ClockConfig+0x154>)
 8002682:	689b      	ldr	r3, [r3, #8]
 8002684:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8002688:	4a0b      	ldr	r2, [pc, #44]	; (80026b8 <HAL_RCC_ClockConfig+0x158>)
 800268a:	5cd3      	ldrb	r3, [r2, r3]
 800268c:	40d8      	lsrs	r0, r3
 800268e:	4b0b      	ldr	r3, [pc, #44]	; (80026bc <HAL_RCC_ClockConfig+0x15c>)
 8002690:	6018      	str	r0, [r3, #0]
  HAL_InitTick (uwTickPrio);
 8002692:	4b0b      	ldr	r3, [pc, #44]	; (80026c0 <HAL_RCC_ClockConfig+0x160>)
 8002694:	6818      	ldr	r0, [r3, #0]
 8002696:	f7fe fb39 	bl	8000d0c <HAL_InitTick>
  return HAL_OK;
 800269a:	2000      	movs	r0, #0
}
 800269c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return HAL_ERROR;
 80026a0:	2001      	movs	r0, #1
}
 80026a2:	4770      	bx	lr
      return HAL_ERROR;
 80026a4:	2001      	movs	r0, #1
 80026a6:	e7f9      	b.n	800269c <HAL_RCC_ClockConfig+0x13c>
        return HAL_ERROR;
 80026a8:	2001      	movs	r0, #1
 80026aa:	e7f7      	b.n	800269c <HAL_RCC_ClockConfig+0x13c>
      return HAL_ERROR;
 80026ac:	2001      	movs	r0, #1
 80026ae:	e7f5      	b.n	800269c <HAL_RCC_ClockConfig+0x13c>
 80026b0:	40023c00 	.word	0x40023c00
 80026b4:	40023800 	.word	0x40023800
 80026b8:	0800cae0 	.word	0x0800cae0
 80026bc:	20000010 	.word	0x20000010
 80026c0:	20000018 	.word	0x20000018

080026c4 <HAL_RCC_GetHCLKFreq>:
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
  return SystemCoreClock;
}
 80026c4:	4b01      	ldr	r3, [pc, #4]	; (80026cc <HAL_RCC_GetHCLKFreq+0x8>)
 80026c6:	6818      	ldr	r0, [r3, #0]
 80026c8:	4770      	bx	lr
 80026ca:	bf00      	nop
 80026cc:	20000010 	.word	0x20000010

080026d0 <HAL_RCC_GetPCLK1Freq>:
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80026d0:	4b04      	ldr	r3, [pc, #16]	; (80026e4 <HAL_RCC_GetPCLK1Freq+0x14>)
 80026d2:	689b      	ldr	r3, [r3, #8]
 80026d4:	f3c3 2382 	ubfx	r3, r3, #10, #3
 80026d8:	4a03      	ldr	r2, [pc, #12]	; (80026e8 <HAL_RCC_GetPCLK1Freq+0x18>)
 80026da:	5cd3      	ldrb	r3, [r2, r3]
 80026dc:	4a03      	ldr	r2, [pc, #12]	; (80026ec <HAL_RCC_GetPCLK1Freq+0x1c>)
 80026de:	6810      	ldr	r0, [r2, #0]
}
 80026e0:	40d8      	lsrs	r0, r3
 80026e2:	4770      	bx	lr
 80026e4:	40023800 	.word	0x40023800
 80026e8:	0800caf0 	.word	0x0800caf0
 80026ec:	20000010 	.word	0x20000010

080026f0 <HAL_RCC_GetPCLK2Freq>:
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80026f0:	4b04      	ldr	r3, [pc, #16]	; (8002704 <HAL_RCC_GetPCLK2Freq+0x14>)
 80026f2:	689b      	ldr	r3, [r3, #8]
 80026f4:	f3c3 3342 	ubfx	r3, r3, #13, #3
 80026f8:	4a03      	ldr	r2, [pc, #12]	; (8002708 <HAL_RCC_GetPCLK2Freq+0x18>)
 80026fa:	5cd3      	ldrb	r3, [r2, r3]
 80026fc:	4a03      	ldr	r2, [pc, #12]	; (800270c <HAL_RCC_GetPCLK2Freq+0x1c>)
 80026fe:	6810      	ldr	r0, [r2, #0]
}
 8002700:	40d8      	lsrs	r0, r3
 8002702:	4770      	bx	lr
 8002704:	40023800 	.word	0x40023800
 8002708:	0800caf0 	.word	0x0800caf0
 800270c:	20000010 	.word	0x20000010

08002710 <HAL_RCC_GetClockConfig>:
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8002710:	230f      	movs	r3, #15
 8002712:	6003      	str	r3, [r0, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8002714:	4b0b      	ldr	r3, [pc, #44]	; (8002744 <HAL_RCC_GetClockConfig+0x34>)
 8002716:	689a      	ldr	r2, [r3, #8]
 8002718:	f002 0203 	and.w	r2, r2, #3
 800271c:	6042      	str	r2, [r0, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 800271e:	689a      	ldr	r2, [r3, #8]
 8002720:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
 8002724:	6082      	str	r2, [r0, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8002726:	689a      	ldr	r2, [r3, #8]
 8002728:	f402 52e0 	and.w	r2, r2, #7168	; 0x1c00
 800272c:	60c2      	str	r2, [r0, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 800272e:	689b      	ldr	r3, [r3, #8]
 8002730:	08db      	lsrs	r3, r3, #3
 8002732:	f403 53e0 	and.w	r3, r3, #7168	; 0x1c00
 8002736:	6103      	str	r3, [r0, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8002738:	4b03      	ldr	r3, [pc, #12]	; (8002748 <HAL_RCC_GetClockConfig+0x38>)
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	f003 030f 	and.w	r3, r3, #15
 8002740:	600b      	str	r3, [r1, #0]
}
 8002742:	4770      	bx	lr
 8002744:	40023800 	.word	0x40023800
 8002748:	40023c00 	.word	0x40023c00

0800274c <HAL_TIM_Base_MspInit>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 800274c:	4770      	bx	lr
	...

08002750 <HAL_TIM_Base_Start_IT>:

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002750:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8002754:	b2db      	uxtb	r3, r3
 8002756:	2b01      	cmp	r3, #1
 8002758:	d137      	bne.n	80027ca <HAL_TIM_Base_Start_IT+0x7a>
  {
    return HAL_ERROR;
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800275a:	2302      	movs	r3, #2
 800275c:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002760:	6802      	ldr	r2, [r0, #0]
 8002762:	68d3      	ldr	r3, [r2, #12]
 8002764:	f043 0301 	orr.w	r3, r3, #1
 8002768:	60d3      	str	r3, [r2, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800276a:	6803      	ldr	r3, [r0, #0]
 800276c:	4a19      	ldr	r2, [pc, #100]	; (80027d4 <HAL_TIM_Base_Start_IT+0x84>)
 800276e:	4293      	cmp	r3, r2
 8002770:	d020      	beq.n	80027b4 <HAL_TIM_Base_Start_IT+0x64>
 8002772:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002776:	d01d      	beq.n	80027b4 <HAL_TIM_Base_Start_IT+0x64>
 8002778:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 800277c:	4293      	cmp	r3, r2
 800277e:	d019      	beq.n	80027b4 <HAL_TIM_Base_Start_IT+0x64>
 8002780:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8002784:	4293      	cmp	r3, r2
 8002786:	d015      	beq.n	80027b4 <HAL_TIM_Base_Start_IT+0x64>
 8002788:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800278c:	4293      	cmp	r3, r2
 800278e:	d011      	beq.n	80027b4 <HAL_TIM_Base_Start_IT+0x64>
 8002790:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 8002794:	4293      	cmp	r3, r2
 8002796:	d00d      	beq.n	80027b4 <HAL_TIM_Base_Start_IT+0x64>
 8002798:	f502 5270 	add.w	r2, r2, #15360	; 0x3c00
 800279c:	4293      	cmp	r3, r2
 800279e:	d009      	beq.n	80027b4 <HAL_TIM_Base_Start_IT+0x64>
 80027a0:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 80027a4:	4293      	cmp	r3, r2
 80027a6:	d005      	beq.n	80027b4 <HAL_TIM_Base_Start_IT+0x64>
      __HAL_TIM_ENABLE(htim);
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80027a8:	681a      	ldr	r2, [r3, #0]
 80027aa:	f042 0201 	orr.w	r2, r2, #1
 80027ae:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80027b0:	2000      	movs	r0, #0
 80027b2:	4770      	bx	lr
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80027b4:	689a      	ldr	r2, [r3, #8]
 80027b6:	f002 0207 	and.w	r2, r2, #7
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80027ba:	2a06      	cmp	r2, #6
 80027bc:	d007      	beq.n	80027ce <HAL_TIM_Base_Start_IT+0x7e>
      __HAL_TIM_ENABLE(htim);
 80027be:	681a      	ldr	r2, [r3, #0]
 80027c0:	f042 0201 	orr.w	r2, r2, #1
 80027c4:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 80027c6:	2000      	movs	r0, #0
 80027c8:	4770      	bx	lr
    return HAL_ERROR;
 80027ca:	2001      	movs	r0, #1
 80027cc:	4770      	bx	lr
  return HAL_OK;
 80027ce:	2000      	movs	r0, #0
}
 80027d0:	4770      	bx	lr
 80027d2:	bf00      	nop
 80027d4:	40010000 	.word	0x40010000

080027d8 <HAL_TIM_OC_DelayElapsedCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80027d8:	4770      	bx	lr

080027da <HAL_TIM_IC_CaptureCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80027da:	4770      	bx	lr

080027dc <HAL_TIM_PWM_PulseFinishedCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80027dc:	4770      	bx	lr

080027de <HAL_TIM_TriggerCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80027de:	4770      	bx	lr

080027e0 <HAL_TIM_IRQHandler>:
{
 80027e0:	b510      	push	{r4, lr}
 80027e2:	4604      	mov	r4, r0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80027e4:	6803      	ldr	r3, [r0, #0]
 80027e6:	691a      	ldr	r2, [r3, #16]
 80027e8:	f012 0f02 	tst.w	r2, #2
 80027ec:	d011      	beq.n	8002812 <HAL_TIM_IRQHandler+0x32>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80027ee:	68da      	ldr	r2, [r3, #12]
 80027f0:	f012 0f02 	tst.w	r2, #2
 80027f4:	d00d      	beq.n	8002812 <HAL_TIM_IRQHandler+0x32>
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80027f6:	f06f 0202 	mvn.w	r2, #2
 80027fa:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80027fc:	2301      	movs	r3, #1
 80027fe:	7703      	strb	r3, [r0, #28]
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002800:	6803      	ldr	r3, [r0, #0]
 8002802:	699b      	ldr	r3, [r3, #24]
 8002804:	f013 0f03 	tst.w	r3, #3
 8002808:	d070      	beq.n	80028ec <HAL_TIM_IRQHandler+0x10c>
          HAL_TIM_IC_CaptureCallback(htim);
 800280a:	f7ff ffe6 	bl	80027da <HAL_TIM_IC_CaptureCallback>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800280e:	2300      	movs	r3, #0
 8002810:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002812:	6823      	ldr	r3, [r4, #0]
 8002814:	691a      	ldr	r2, [r3, #16]
 8002816:	f012 0f04 	tst.w	r2, #4
 800281a:	d012      	beq.n	8002842 <HAL_TIM_IRQHandler+0x62>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800281c:	68da      	ldr	r2, [r3, #12]
 800281e:	f012 0f04 	tst.w	r2, #4
 8002822:	d00e      	beq.n	8002842 <HAL_TIM_IRQHandler+0x62>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002824:	f06f 0204 	mvn.w	r2, #4
 8002828:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800282a:	2302      	movs	r3, #2
 800282c:	7723      	strb	r3, [r4, #28]
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800282e:	6823      	ldr	r3, [r4, #0]
 8002830:	699b      	ldr	r3, [r3, #24]
 8002832:	f413 7f40 	tst.w	r3, #768	; 0x300
 8002836:	d05f      	beq.n	80028f8 <HAL_TIM_IRQHandler+0x118>
        HAL_TIM_IC_CaptureCallback(htim);
 8002838:	4620      	mov	r0, r4
 800283a:	f7ff ffce 	bl	80027da <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800283e:	2300      	movs	r3, #0
 8002840:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002842:	6823      	ldr	r3, [r4, #0]
 8002844:	691a      	ldr	r2, [r3, #16]
 8002846:	f012 0f08 	tst.w	r2, #8
 800284a:	d012      	beq.n	8002872 <HAL_TIM_IRQHandler+0x92>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800284c:	68da      	ldr	r2, [r3, #12]
 800284e:	f012 0f08 	tst.w	r2, #8
 8002852:	d00e      	beq.n	8002872 <HAL_TIM_IRQHandler+0x92>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002854:	f06f 0208 	mvn.w	r2, #8
 8002858:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800285a:	2304      	movs	r3, #4
 800285c:	7723      	strb	r3, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800285e:	6823      	ldr	r3, [r4, #0]
 8002860:	69db      	ldr	r3, [r3, #28]
 8002862:	f013 0f03 	tst.w	r3, #3
 8002866:	d04e      	beq.n	8002906 <HAL_TIM_IRQHandler+0x126>
        HAL_TIM_IC_CaptureCallback(htim);
 8002868:	4620      	mov	r0, r4
 800286a:	f7ff ffb6 	bl	80027da <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800286e:	2300      	movs	r3, #0
 8002870:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002872:	6823      	ldr	r3, [r4, #0]
 8002874:	691a      	ldr	r2, [r3, #16]
 8002876:	f012 0f10 	tst.w	r2, #16
 800287a:	d012      	beq.n	80028a2 <HAL_TIM_IRQHandler+0xc2>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800287c:	68da      	ldr	r2, [r3, #12]
 800287e:	f012 0f10 	tst.w	r2, #16
 8002882:	d00e      	beq.n	80028a2 <HAL_TIM_IRQHandler+0xc2>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002884:	f06f 0210 	mvn.w	r2, #16
 8002888:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800288a:	2308      	movs	r3, #8
 800288c:	7723      	strb	r3, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800288e:	6823      	ldr	r3, [r4, #0]
 8002890:	69db      	ldr	r3, [r3, #28]
 8002892:	f413 7f40 	tst.w	r3, #768	; 0x300
 8002896:	d03d      	beq.n	8002914 <HAL_TIM_IRQHandler+0x134>
        HAL_TIM_IC_CaptureCallback(htim);
 8002898:	4620      	mov	r0, r4
 800289a:	f7ff ff9e 	bl	80027da <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800289e:	2300      	movs	r3, #0
 80028a0:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80028a2:	6823      	ldr	r3, [r4, #0]
 80028a4:	691a      	ldr	r2, [r3, #16]
 80028a6:	f012 0f01 	tst.w	r2, #1
 80028aa:	d003      	beq.n	80028b4 <HAL_TIM_IRQHandler+0xd4>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80028ac:	68da      	ldr	r2, [r3, #12]
 80028ae:	f012 0f01 	tst.w	r2, #1
 80028b2:	d136      	bne.n	8002922 <HAL_TIM_IRQHandler+0x142>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80028b4:	6823      	ldr	r3, [r4, #0]
 80028b6:	691a      	ldr	r2, [r3, #16]
 80028b8:	f012 0f80 	tst.w	r2, #128	; 0x80
 80028bc:	d003      	beq.n	80028c6 <HAL_TIM_IRQHandler+0xe6>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80028be:	68da      	ldr	r2, [r3, #12]
 80028c0:	f012 0f80 	tst.w	r2, #128	; 0x80
 80028c4:	d134      	bne.n	8002930 <HAL_TIM_IRQHandler+0x150>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80028c6:	6823      	ldr	r3, [r4, #0]
 80028c8:	691a      	ldr	r2, [r3, #16]
 80028ca:	f012 0f40 	tst.w	r2, #64	; 0x40
 80028ce:	d003      	beq.n	80028d8 <HAL_TIM_IRQHandler+0xf8>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80028d0:	68da      	ldr	r2, [r3, #12]
 80028d2:	f012 0f40 	tst.w	r2, #64	; 0x40
 80028d6:	d132      	bne.n	800293e <HAL_TIM_IRQHandler+0x15e>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80028d8:	6823      	ldr	r3, [r4, #0]
 80028da:	691a      	ldr	r2, [r3, #16]
 80028dc:	f012 0f20 	tst.w	r2, #32
 80028e0:	d003      	beq.n	80028ea <HAL_TIM_IRQHandler+0x10a>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80028e2:	68da      	ldr	r2, [r3, #12]
 80028e4:	f012 0f20 	tst.w	r2, #32
 80028e8:	d130      	bne.n	800294c <HAL_TIM_IRQHandler+0x16c>
}
 80028ea:	bd10      	pop	{r4, pc}
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80028ec:	f7ff ff74 	bl	80027d8 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80028f0:	4620      	mov	r0, r4
 80028f2:	f7ff ff73 	bl	80027dc <HAL_TIM_PWM_PulseFinishedCallback>
 80028f6:	e78a      	b.n	800280e <HAL_TIM_IRQHandler+0x2e>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80028f8:	4620      	mov	r0, r4
 80028fa:	f7ff ff6d 	bl	80027d8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80028fe:	4620      	mov	r0, r4
 8002900:	f7ff ff6c 	bl	80027dc <HAL_TIM_PWM_PulseFinishedCallback>
 8002904:	e79b      	b.n	800283e <HAL_TIM_IRQHandler+0x5e>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002906:	4620      	mov	r0, r4
 8002908:	f7ff ff66 	bl	80027d8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800290c:	4620      	mov	r0, r4
 800290e:	f7ff ff65 	bl	80027dc <HAL_TIM_PWM_PulseFinishedCallback>
 8002912:	e7ac      	b.n	800286e <HAL_TIM_IRQHandler+0x8e>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002914:	4620      	mov	r0, r4
 8002916:	f7ff ff5f 	bl	80027d8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800291a:	4620      	mov	r0, r4
 800291c:	f7ff ff5e 	bl	80027dc <HAL_TIM_PWM_PulseFinishedCallback>
 8002920:	e7bd      	b.n	800289e <HAL_TIM_IRQHandler+0xbe>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002922:	f06f 0201 	mvn.w	r2, #1
 8002926:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 8002928:	4620      	mov	r0, r4
 800292a:	f7fe f949 	bl	8000bc0 <HAL_TIM_PeriodElapsedCallback>
 800292e:	e7c1      	b.n	80028b4 <HAL_TIM_IRQHandler+0xd4>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002930:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002934:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 8002936:	4620      	mov	r0, r4
 8002938:	f000 f8c1 	bl	8002abe <HAL_TIMEx_BreakCallback>
 800293c:	e7c3      	b.n	80028c6 <HAL_TIM_IRQHandler+0xe6>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800293e:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002942:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 8002944:	4620      	mov	r0, r4
 8002946:	f7ff ff4a 	bl	80027de <HAL_TIM_TriggerCallback>
 800294a:	e7c5      	b.n	80028d8 <HAL_TIM_IRQHandler+0xf8>
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800294c:	f06f 0220 	mvn.w	r2, #32
 8002950:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_CommutCallback(htim);
 8002952:	4620      	mov	r0, r4
 8002954:	f000 f8b2 	bl	8002abc <HAL_TIMEx_CommutCallback>
}
 8002958:	e7c7      	b.n	80028ea <HAL_TIM_IRQHandler+0x10a>
	...

0800295c <TIM_Base_SetConfig>:
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800295c:	6803      	ldr	r3, [r0, #0]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800295e:	4a40      	ldr	r2, [pc, #256]	; (8002a60 <TIM_Base_SetConfig+0x104>)
 8002960:	4290      	cmp	r0, r2
 8002962:	d05d      	beq.n	8002a20 <TIM_Base_SetConfig+0xc4>
 8002964:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8002968:	d031      	beq.n	80029ce <TIM_Base_SetConfig+0x72>
 800296a:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 800296e:	4290      	cmp	r0, r2
 8002970:	d051      	beq.n	8002a16 <TIM_Base_SetConfig+0xba>
 8002972:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8002976:	4290      	cmp	r0, r2
 8002978:	d06d      	beq.n	8002a56 <TIM_Base_SetConfig+0xfa>
 800297a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800297e:	4290      	cmp	r0, r2
 8002980:	d064      	beq.n	8002a4c <TIM_Base_SetConfig+0xf0>
 8002982:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 8002986:	4290      	cmp	r0, r2
 8002988:	d033      	beq.n	80029f2 <TIM_Base_SetConfig+0x96>
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
    tmpcr1 |= Structure->CounterMode;
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800298a:	f502 5270 	add.w	r2, r2, #15360	; 0x3c00
 800298e:	4290      	cmp	r0, r2
 8002990:	d021      	beq.n	80029d6 <TIM_Base_SetConfig+0x7a>
 8002992:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8002996:	4290      	cmp	r0, r2
 8002998:	d01d      	beq.n	80029d6 <TIM_Base_SetConfig+0x7a>
 800299a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800299e:	4290      	cmp	r0, r2
 80029a0:	d019      	beq.n	80029d6 <TIM_Base_SetConfig+0x7a>
 80029a2:	f5a2 3298 	sub.w	r2, r2, #77824	; 0x13000
 80029a6:	4290      	cmp	r0, r2
 80029a8:	d015      	beq.n	80029d6 <TIM_Base_SetConfig+0x7a>
 80029aa:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80029ae:	4290      	cmp	r0, r2
 80029b0:	d011      	beq.n	80029d6 <TIM_Base_SetConfig+0x7a>
 80029b2:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80029b6:	4290      	cmp	r0, r2
 80029b8:	d00d      	beq.n	80029d6 <TIM_Base_SetConfig+0x7a>
    tmpcr1 &= ~TIM_CR1_CKD;
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80029ba:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80029be:	694a      	ldr	r2, [r1, #20]
 80029c0:	4313      	orrs	r3, r2

  TIMx->CR1 = tmpcr1;
 80029c2:	6003      	str	r3, [r0, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80029c4:	688b      	ldr	r3, [r1, #8]
 80029c6:	62c3      	str	r3, [r0, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80029c8:	680b      	ldr	r3, [r1, #0]
 80029ca:	6283      	str	r3, [r0, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80029cc:	e03b      	b.n	8002a46 <TIM_Base_SetConfig+0xea>
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80029ce:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 80029d2:	684a      	ldr	r2, [r1, #4]
 80029d4:	4313      	orrs	r3, r2
    tmpcr1 &= ~TIM_CR1_CKD;
 80029d6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80029da:	68ca      	ldr	r2, [r1, #12]
 80029dc:	4313      	orrs	r3, r2
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80029de:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80029e2:	694a      	ldr	r2, [r1, #20]
 80029e4:	4313      	orrs	r3, r2
  TIMx->CR1 = tmpcr1;
 80029e6:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 80029e8:	688b      	ldr	r3, [r1, #8]
 80029ea:	62c3      	str	r3, [r0, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 80029ec:	680b      	ldr	r3, [r1, #0]
 80029ee:	6283      	str	r3, [r0, #40]	; 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80029f0:	e029      	b.n	8002a46 <TIM_Base_SetConfig+0xea>
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80029f2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 80029f6:	684a      	ldr	r2, [r1, #4]
 80029f8:	4313      	orrs	r3, r2
    tmpcr1 &= ~TIM_CR1_CKD;
 80029fa:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80029fe:	68ca      	ldr	r2, [r1, #12]
 8002a00:	4313      	orrs	r3, r2
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002a02:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002a06:	694a      	ldr	r2, [r1, #20]
 8002a08:	4313      	orrs	r3, r2
  TIMx->CR1 = tmpcr1;
 8002a0a:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002a0c:	688b      	ldr	r3, [r1, #8]
 8002a0e:	62c3      	str	r3, [r0, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 8002a10:	680b      	ldr	r3, [r1, #0]
 8002a12:	6283      	str	r3, [r0, #40]	; 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002a14:	e015      	b.n	8002a42 <TIM_Base_SetConfig+0xe6>
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002a16:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8002a1a:	684a      	ldr	r2, [r1, #4]
 8002a1c:	4313      	orrs	r3, r2
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002a1e:	e7da      	b.n	80029d6 <TIM_Base_SetConfig+0x7a>
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002a20:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8002a24:	684a      	ldr	r2, [r1, #4]
 8002a26:	4313      	orrs	r3, r2
    tmpcr1 &= ~TIM_CR1_CKD;
 8002a28:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002a2c:	68ca      	ldr	r2, [r1, #12]
 8002a2e:	4313      	orrs	r3, r2
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002a30:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002a34:	694a      	ldr	r2, [r1, #20]
 8002a36:	4313      	orrs	r3, r2
  TIMx->CR1 = tmpcr1;
 8002a38:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002a3a:	688b      	ldr	r3, [r1, #8]
 8002a3c:	62c3      	str	r3, [r0, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 8002a3e:	680b      	ldr	r3, [r1, #0]
 8002a40:	6283      	str	r3, [r0, #40]	; 0x28
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002a42:	690b      	ldr	r3, [r1, #16]
 8002a44:	6303      	str	r3, [r0, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002a46:	2301      	movs	r3, #1
 8002a48:	6143      	str	r3, [r0, #20]
}
 8002a4a:	4770      	bx	lr
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002a4c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8002a50:	684a      	ldr	r2, [r1, #4]
 8002a52:	4313      	orrs	r3, r2
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002a54:	e7bf      	b.n	80029d6 <TIM_Base_SetConfig+0x7a>
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002a56:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8002a5a:	684a      	ldr	r2, [r1, #4]
 8002a5c:	4313      	orrs	r3, r2
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002a5e:	e7ba      	b.n	80029d6 <TIM_Base_SetConfig+0x7a>
 8002a60:	40010000 	.word	0x40010000

08002a64 <HAL_TIM_Base_Init>:
  if (htim == NULL)
 8002a64:	b340      	cbz	r0, 8002ab8 <HAL_TIM_Base_Init+0x54>
{
 8002a66:	b510      	push	{r4, lr}
 8002a68:	4604      	mov	r4, r0
  if (htim->State == HAL_TIM_STATE_RESET)
 8002a6a:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8002a6e:	b1f3      	cbz	r3, 8002aae <HAL_TIM_Base_Init+0x4a>
  htim->State = HAL_TIM_STATE_BUSY;
 8002a70:	2302      	movs	r3, #2
 8002a72:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002a76:	4621      	mov	r1, r4
 8002a78:	f851 0b04 	ldr.w	r0, [r1], #4
 8002a7c:	f7ff ff6e 	bl	800295c <TIM_Base_SetConfig>
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002a80:	2301      	movs	r3, #1
 8002a82:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002a86:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
 8002a8a:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
 8002a8e:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 8002a92:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002a96:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8002a9a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8002a9e:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 8002aa2:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
  htim->State = HAL_TIM_STATE_READY;
 8002aa6:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 8002aaa:	2000      	movs	r0, #0
}
 8002aac:	bd10      	pop	{r4, pc}
    htim->Lock = HAL_UNLOCKED;
 8002aae:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
    HAL_TIM_Base_MspInit(htim);
 8002ab2:	f7ff fe4b 	bl	800274c <HAL_TIM_Base_MspInit>
 8002ab6:	e7db      	b.n	8002a70 <HAL_TIM_Base_Init+0xc>
    return HAL_ERROR;
 8002ab8:	2001      	movs	r0, #1
}
 8002aba:	4770      	bx	lr

08002abc <HAL_TIMEx_CommutCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002abc:	4770      	bx	lr

08002abe <HAL_TIMEx_BreakCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002abe:	4770      	bx	lr

08002ac0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002ac0:	b538      	push	{r3, r4, r5, lr}
 8002ac2:	4604      	mov	r4, r0
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002ac4:	6802      	ldr	r2, [r0, #0]
 8002ac6:	6913      	ldr	r3, [r2, #16]
 8002ac8:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002acc:	68c1      	ldr	r1, [r0, #12]
 8002ace:	430b      	orrs	r3, r1
 8002ad0:	6113      	str	r3, [r2, #16]
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
 8002ad2:	6801      	ldr	r1, [r0, #0]
 8002ad4:	68ca      	ldr	r2, [r1, #12]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8002ad6:	6883      	ldr	r3, [r0, #8]
 8002ad8:	6900      	ldr	r0, [r0, #16]
 8002ada:	4303      	orrs	r3, r0
 8002adc:	6960      	ldr	r0, [r4, #20]
 8002ade:	4303      	orrs	r3, r0
 8002ae0:	69e0      	ldr	r0, [r4, #28]
 8002ae2:	4303      	orrs	r3, r0
  MODIFY_REG(huart->Instance->CR1,
 8002ae4:	f422 4216 	bic.w	r2, r2, #38400	; 0x9600
 8002ae8:	f022 020c 	bic.w	r2, r2, #12
 8002aec:	4313      	orrs	r3, r2
 8002aee:	60cb      	str	r3, [r1, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002af0:	6822      	ldr	r2, [r4, #0]
 8002af2:	6953      	ldr	r3, [r2, #20]
 8002af4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002af8:	69a1      	ldr	r1, [r4, #24]
 8002afa:	430b      	orrs	r3, r1
 8002afc:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8002afe:	6823      	ldr	r3, [r4, #0]
 8002b00:	4a2e      	ldr	r2, [pc, #184]	; (8002bbc <UART_SetConfig+0xfc>)
 8002b02:	4293      	cmp	r3, r2
 8002b04:	d006      	beq.n	8002b14 <UART_SetConfig+0x54>
 8002b06:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8002b0a:	4293      	cmp	r3, r2
 8002b0c:	d002      	beq.n	8002b14 <UART_SetConfig+0x54>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8002b0e:	f7ff fddf 	bl	80026d0 <HAL_RCC_GetPCLK1Freq>
 8002b12:	e001      	b.n	8002b18 <UART_SetConfig+0x58>
      pclk = HAL_RCC_GetPCLK2Freq();
 8002b14:	f7ff fdec 	bl	80026f0 <HAL_RCC_GetPCLK2Freq>
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002b18:	69e3      	ldr	r3, [r4, #28]
 8002b1a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002b1e:	d024      	beq.n	8002b6a <UART_SetConfig+0xaa>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002b20:	2100      	movs	r1, #0
 8002b22:	1803      	adds	r3, r0, r0
 8002b24:	4149      	adcs	r1, r1
 8002b26:	181b      	adds	r3, r3, r0
 8002b28:	f141 0100 	adc.w	r1, r1, #0
 8002b2c:	00c9      	lsls	r1, r1, #3
 8002b2e:	ea41 7153 	orr.w	r1, r1, r3, lsr #29
 8002b32:	00db      	lsls	r3, r3, #3
 8002b34:	1818      	adds	r0, r3, r0
 8002b36:	6863      	ldr	r3, [r4, #4]
 8002b38:	ea4f 0283 	mov.w	r2, r3, lsl #2
 8002b3c:	ea4f 7393 	mov.w	r3, r3, lsr #30
 8002b40:	f141 0100 	adc.w	r1, r1, #0
 8002b44:	f7fd fbbc 	bl	80002c0 <__aeabi_uldivmod>
 8002b48:	6821      	ldr	r1, [r4, #0]
 8002b4a:	4a1d      	ldr	r2, [pc, #116]	; (8002bc0 <UART_SetConfig+0x100>)
 8002b4c:	fba2 4300 	umull	r4, r3, r2, r0
 8002b50:	095b      	lsrs	r3, r3, #5
 8002b52:	2464      	movs	r4, #100	; 0x64
 8002b54:	fb04 0013 	mls	r0, r4, r3, r0
 8002b58:	0100      	lsls	r0, r0, #4
 8002b5a:	3032      	adds	r0, #50	; 0x32
 8002b5c:	fba2 2000 	umull	r2, r0, r2, r0
 8002b60:	011b      	lsls	r3, r3, #4
 8002b62:	eb03 1050 	add.w	r0, r3, r0, lsr #5
 8002b66:	6088      	str	r0, [r1, #8]
  }
}
 8002b68:	bd38      	pop	{r3, r4, r5, pc}
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8002b6a:	2300      	movs	r3, #0
 8002b6c:	1802      	adds	r2, r0, r0
 8002b6e:	eb43 0103 	adc.w	r1, r3, r3
 8002b72:	1812      	adds	r2, r2, r0
 8002b74:	f141 0100 	adc.w	r1, r1, #0
 8002b78:	00c9      	lsls	r1, r1, #3
 8002b7a:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8002b7e:	00d2      	lsls	r2, r2, #3
 8002b80:	1810      	adds	r0, r2, r0
 8002b82:	f141 0100 	adc.w	r1, r1, #0
 8002b86:	6862      	ldr	r2, [r4, #4]
 8002b88:	1892      	adds	r2, r2, r2
 8002b8a:	415b      	adcs	r3, r3
 8002b8c:	f7fd fb98 	bl	80002c0 <__aeabi_uldivmod>
 8002b90:	4d0b      	ldr	r5, [pc, #44]	; (8002bc0 <UART_SetConfig+0x100>)
 8002b92:	fba5 3200 	umull	r3, r2, r5, r0
 8002b96:	0951      	lsrs	r1, r2, #5
 8002b98:	2364      	movs	r3, #100	; 0x64
 8002b9a:	fb03 0311 	mls	r3, r3, r1, r0
 8002b9e:	00db      	lsls	r3, r3, #3
 8002ba0:	3332      	adds	r3, #50	; 0x32
 8002ba2:	fba5 2303 	umull	r2, r3, r5, r3
 8002ba6:	6820      	ldr	r0, [r4, #0]
 8002ba8:	f3c3 1242 	ubfx	r2, r3, #5, #3
 8002bac:	eb02 1201 	add.w	r2, r2, r1, lsl #4
 8002bb0:	091b      	lsrs	r3, r3, #4
 8002bb2:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8002bb6:	4413      	add	r3, r2
 8002bb8:	6083      	str	r3, [r0, #8]
 8002bba:	e7d5      	b.n	8002b68 <UART_SetConfig+0xa8>
 8002bbc:	40011000 	.word	0x40011000
 8002bc0:	51eb851f 	.word	0x51eb851f

08002bc4 <UART_WaitOnFlagUntilTimeout>:
{
 8002bc4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8002bc8:	4680      	mov	r8, r0
 8002bca:	460e      	mov	r6, r1
 8002bcc:	4615      	mov	r5, r2
 8002bce:	4699      	mov	r9, r3
 8002bd0:	9f08      	ldr	r7, [sp, #32]
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002bd2:	f8d8 2000 	ldr.w	r2, [r8]
 8002bd6:	6814      	ldr	r4, [r2, #0]
 8002bd8:	ea36 0304 	bics.w	r3, r6, r4
 8002bdc:	bf0c      	ite	eq
 8002bde:	f04f 0c01 	moveq.w	ip, #1
 8002be2:	f04f 0c00 	movne.w	ip, #0
 8002be6:	45ac      	cmp	ip, r5
 8002be8:	d12d      	bne.n	8002c46 <UART_WaitOnFlagUntilTimeout+0x82>
    if (Timeout != HAL_MAX_DELAY)
 8002bea:	f1b7 3fff 	cmp.w	r7, #4294967295
 8002bee:	d0f2      	beq.n	8002bd6 <UART_WaitOnFlagUntilTimeout+0x12>
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8002bf0:	b12f      	cbz	r7, 8002bfe <UART_WaitOnFlagUntilTimeout+0x3a>
 8002bf2:	f7fe fa8d 	bl	8001110 <HAL_GetTick>
 8002bf6:	eba0 0009 	sub.w	r0, r0, r9
 8002bfa:	42b8      	cmp	r0, r7
 8002bfc:	d9e9      	bls.n	8002bd2 <UART_WaitOnFlagUntilTimeout+0xe>
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002bfe:	f8d8 2000 	ldr.w	r2, [r8]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002c02:	f102 030c 	add.w	r3, r2, #12
 8002c06:	e853 3f00 	ldrex	r3, [r3]
 8002c0a:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002c0e:	320c      	adds	r2, #12
 8002c10:	e842 3100 	strex	r1, r3, [r2]
 8002c14:	2900      	cmp	r1, #0
 8002c16:	d1f2      	bne.n	8002bfe <UART_WaitOnFlagUntilTimeout+0x3a>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002c18:	f8d8 2000 	ldr.w	r2, [r8]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002c1c:	f102 0314 	add.w	r3, r2, #20
 8002c20:	e853 3f00 	ldrex	r3, [r3]
 8002c24:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002c28:	3214      	adds	r2, #20
 8002c2a:	e842 3100 	strex	r1, r3, [r2]
 8002c2e:	2900      	cmp	r1, #0
 8002c30:	d1f2      	bne.n	8002c18 <UART_WaitOnFlagUntilTimeout+0x54>
        huart->gState  = HAL_UART_STATE_READY;
 8002c32:	2320      	movs	r3, #32
 8002c34:	f888 303d 	strb.w	r3, [r8, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8002c38:	f888 303e 	strb.w	r3, [r8, #62]	; 0x3e
        __HAL_UNLOCK(huart);
 8002c3c:	2300      	movs	r3, #0
 8002c3e:	f888 303c 	strb.w	r3, [r8, #60]	; 0x3c
        return HAL_TIMEOUT;
 8002c42:	2003      	movs	r0, #3
 8002c44:	e000      	b.n	8002c48 <UART_WaitOnFlagUntilTimeout+0x84>
  return HAL_OK;
 8002c46:	2000      	movs	r0, #0
}
 8002c48:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

08002c4c <HAL_UART_Init>:
  if (huart == NULL)
 8002c4c:	b358      	cbz	r0, 8002ca6 <HAL_UART_Init+0x5a>
{
 8002c4e:	b510      	push	{r4, lr}
 8002c50:	4604      	mov	r4, r0
  if (huart->gState == HAL_UART_STATE_RESET)
 8002c52:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8002c56:	b30b      	cbz	r3, 8002c9c <HAL_UART_Init+0x50>
  huart->gState = HAL_UART_STATE_BUSY;
 8002c58:	2324      	movs	r3, #36	; 0x24
 8002c5a:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_UART_DISABLE(huart);
 8002c5e:	6822      	ldr	r2, [r4, #0]
 8002c60:	68d3      	ldr	r3, [r2, #12]
 8002c62:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8002c66:	60d3      	str	r3, [r2, #12]
  UART_SetConfig(huart);
 8002c68:	4620      	mov	r0, r4
 8002c6a:	f7ff ff29 	bl	8002ac0 <UART_SetConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002c6e:	6822      	ldr	r2, [r4, #0]
 8002c70:	6913      	ldr	r3, [r2, #16]
 8002c72:	f423 4390 	bic.w	r3, r3, #18432	; 0x4800
 8002c76:	6113      	str	r3, [r2, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002c78:	6822      	ldr	r2, [r4, #0]
 8002c7a:	6953      	ldr	r3, [r2, #20]
 8002c7c:	f023 032a 	bic.w	r3, r3, #42	; 0x2a
 8002c80:	6153      	str	r3, [r2, #20]
  __HAL_UART_ENABLE(huart);
 8002c82:	6822      	ldr	r2, [r4, #0]
 8002c84:	68d3      	ldr	r3, [r2, #12]
 8002c86:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8002c8a:	60d3      	str	r3, [r2, #12]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002c8c:	2000      	movs	r0, #0
 8002c8e:	6420      	str	r0, [r4, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8002c90:	2320      	movs	r3, #32
 8002c92:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8002c96:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
}
 8002c9a:	bd10      	pop	{r4, pc}
    huart->Lock = HAL_UNLOCKED;
 8002c9c:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
    HAL_UART_MspInit(huart);
 8002ca0:	f7fd ffb8 	bl	8000c14 <HAL_UART_MspInit>
 8002ca4:	e7d8      	b.n	8002c58 <HAL_UART_Init+0xc>
    return HAL_ERROR;
 8002ca6:	2001      	movs	r0, #1
}
 8002ca8:	4770      	bx	lr

08002caa <HAL_UART_Transmit>:
{
 8002caa:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002cae:	b082      	sub	sp, #8
 8002cb0:	461e      	mov	r6, r3
  if (huart->gState == HAL_UART_STATE_READY)
 8002cb2:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8002cb6:	b2db      	uxtb	r3, r3
 8002cb8:	2b20      	cmp	r3, #32
 8002cba:	d15a      	bne.n	8002d72 <HAL_UART_Transmit+0xc8>
 8002cbc:	4604      	mov	r4, r0
 8002cbe:	460d      	mov	r5, r1
 8002cc0:	4690      	mov	r8, r2
    if ((pData == NULL) || (Size == 0U))
 8002cc2:	2900      	cmp	r1, #0
 8002cc4:	d059      	beq.n	8002d7a <HAL_UART_Transmit+0xd0>
 8002cc6:	2a00      	cmp	r2, #0
 8002cc8:	d059      	beq.n	8002d7e <HAL_UART_Transmit+0xd4>
    __HAL_LOCK(huart);
 8002cca:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8002cce:	2b01      	cmp	r3, #1
 8002cd0:	d057      	beq.n	8002d82 <HAL_UART_Transmit+0xd8>
 8002cd2:	2301      	movs	r3, #1
 8002cd4:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002cd8:	2300      	movs	r3, #0
 8002cda:	6403      	str	r3, [r0, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002cdc:	2321      	movs	r3, #33	; 0x21
 8002cde:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
    tickstart = HAL_GetTick();
 8002ce2:	f7fe fa15 	bl	8001110 <HAL_GetTick>
 8002ce6:	4607      	mov	r7, r0
    huart->TxXferSize = Size;
 8002ce8:	f8a4 8024 	strh.w	r8, [r4, #36]	; 0x24
    huart->TxXferCount = Size;
 8002cec:	f8a4 8026 	strh.w	r8, [r4, #38]	; 0x26
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002cf0:	68a3      	ldr	r3, [r4, #8]
 8002cf2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002cf6:	d00c      	beq.n	8002d12 <HAL_UART_Transmit+0x68>
      pdata16bits = NULL;
 8002cf8:	f04f 0a00 	mov.w	sl, #0
    __HAL_UNLOCK(huart);
 8002cfc:	2300      	movs	r3, #0
 8002cfe:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    while (huart->TxXferCount > 0U)
 8002d02:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
 8002d04:	b29b      	uxth	r3, r3
 8002d06:	b343      	cbz	r3, 8002d5a <HAL_UART_Transmit+0xb0>
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002d08:	f04f 0900 	mov.w	r9, #0
 8002d0c:	f04f 0880 	mov.w	r8, #128	; 0x80
 8002d10:	e014      	b.n	8002d3c <HAL_UART_Transmit+0x92>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002d12:	6923      	ldr	r3, [r4, #16]
 8002d14:	b913      	cbnz	r3, 8002d1c <HAL_UART_Transmit+0x72>
      pdata16bits = (const uint16_t *) pData;
 8002d16:	46aa      	mov	sl, r5
      pdata8bits  = NULL;
 8002d18:	2500      	movs	r5, #0
 8002d1a:	e7ef      	b.n	8002cfc <HAL_UART_Transmit+0x52>
      pdata16bits = NULL;
 8002d1c:	f04f 0a00 	mov.w	sl, #0
 8002d20:	e7ec      	b.n	8002cfc <HAL_UART_Transmit+0x52>
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002d22:	6822      	ldr	r2, [r4, #0]
 8002d24:	f83a 3b02 	ldrh.w	r3, [sl], #2
 8002d28:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002d2c:	6053      	str	r3, [r2, #4]
      huart->TxXferCount--;
 8002d2e:	8ce2      	ldrh	r2, [r4, #38]	; 0x26
 8002d30:	3a01      	subs	r2, #1
 8002d32:	b292      	uxth	r2, r2
 8002d34:	84e2      	strh	r2, [r4, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8002d36:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
 8002d38:	b29b      	uxth	r3, r3
 8002d3a:	b173      	cbz	r3, 8002d5a <HAL_UART_Transmit+0xb0>
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002d3c:	9600      	str	r6, [sp, #0]
 8002d3e:	463b      	mov	r3, r7
 8002d40:	464a      	mov	r2, r9
 8002d42:	4641      	mov	r1, r8
 8002d44:	4620      	mov	r0, r4
 8002d46:	f7ff ff3d 	bl	8002bc4 <UART_WaitOnFlagUntilTimeout>
 8002d4a:	b9e0      	cbnz	r0, 8002d86 <HAL_UART_Transmit+0xdc>
      if (pdata8bits == NULL)
 8002d4c:	2d00      	cmp	r5, #0
 8002d4e:	d0e8      	beq.n	8002d22 <HAL_UART_Transmit+0x78>
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8002d50:	6823      	ldr	r3, [r4, #0]
 8002d52:	f815 2b01 	ldrb.w	r2, [r5], #1
 8002d56:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8002d58:	e7e9      	b.n	8002d2e <HAL_UART_Transmit+0x84>
    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002d5a:	9600      	str	r6, [sp, #0]
 8002d5c:	463b      	mov	r3, r7
 8002d5e:	2200      	movs	r2, #0
 8002d60:	2140      	movs	r1, #64	; 0x40
 8002d62:	4620      	mov	r0, r4
 8002d64:	f7ff ff2e 	bl	8002bc4 <UART_WaitOnFlagUntilTimeout>
 8002d68:	b978      	cbnz	r0, 8002d8a <HAL_UART_Transmit+0xe0>
    huart->gState = HAL_UART_STATE_READY;
 8002d6a:	2320      	movs	r3, #32
 8002d6c:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
    return HAL_OK;
 8002d70:	e000      	b.n	8002d74 <HAL_UART_Transmit+0xca>
    return HAL_BUSY;
 8002d72:	2002      	movs	r0, #2
}
 8002d74:	b002      	add	sp, #8
 8002d76:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      return  HAL_ERROR;
 8002d7a:	2001      	movs	r0, #1
 8002d7c:	e7fa      	b.n	8002d74 <HAL_UART_Transmit+0xca>
 8002d7e:	2001      	movs	r0, #1
 8002d80:	e7f8      	b.n	8002d74 <HAL_UART_Transmit+0xca>
    __HAL_LOCK(huart);
 8002d82:	2002      	movs	r0, #2
 8002d84:	e7f6      	b.n	8002d74 <HAL_UART_Transmit+0xca>
        return HAL_TIMEOUT;
 8002d86:	2003      	movs	r0, #3
 8002d88:	e7f4      	b.n	8002d74 <HAL_UART_Transmit+0xca>
      return HAL_TIMEOUT;
 8002d8a:	2003      	movs	r0, #3
 8002d8c:	e7f2      	b.n	8002d74 <HAL_UART_Transmit+0xca>
	...

08002d90 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8002d90:	b082      	sub	sp, #8
  __IO uint32_t count = 0U;
 8002d92:	2300      	movs	r3, #0
 8002d94:	9301      	str	r3, [sp, #4]
  /* Wait for AHB master IDLE state. */
  do
  {
    count++;

    if (count > 200000U)
 8002d96:	4a11      	ldr	r2, [pc, #68]	; (8002ddc <USB_CoreReset+0x4c>)
    count++;
 8002d98:	9b01      	ldr	r3, [sp, #4]
 8002d9a:	3301      	adds	r3, #1
 8002d9c:	9301      	str	r3, [sp, #4]
    if (count > 200000U)
 8002d9e:	9b01      	ldr	r3, [sp, #4]
 8002da0:	4293      	cmp	r3, r2
 8002da2:	d815      	bhi.n	8002dd0 <USB_CoreReset+0x40>
    {
      return HAL_TIMEOUT;
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8002da4:	6903      	ldr	r3, [r0, #16]
 8002da6:	2b00      	cmp	r3, #0
 8002da8:	daf6      	bge.n	8002d98 <USB_CoreReset+0x8>

  /* Core Soft Reset */
  count = 0U;
 8002daa:	2300      	movs	r3, #0
 8002dac:	9301      	str	r3, [sp, #4]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8002dae:	6903      	ldr	r3, [r0, #16]
 8002db0:	f043 0301 	orr.w	r3, r3, #1
 8002db4:	6103      	str	r3, [r0, #16]

  do
  {
    count++;

    if (count > 200000U)
 8002db6:	4a09      	ldr	r2, [pc, #36]	; (8002ddc <USB_CoreReset+0x4c>)
    count++;
 8002db8:	9b01      	ldr	r3, [sp, #4]
 8002dba:	3301      	adds	r3, #1
 8002dbc:	9301      	str	r3, [sp, #4]
    if (count > 200000U)
 8002dbe:	9b01      	ldr	r3, [sp, #4]
 8002dc0:	4293      	cmp	r3, r2
 8002dc2:	d808      	bhi.n	8002dd6 <USB_CoreReset+0x46>
    {
      return HAL_TIMEOUT;
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8002dc4:	6903      	ldr	r3, [r0, #16]
 8002dc6:	f013 0f01 	tst.w	r3, #1
 8002dca:	d1f5      	bne.n	8002db8 <USB_CoreReset+0x28>

  return HAL_OK;
 8002dcc:	2000      	movs	r0, #0
 8002dce:	e000      	b.n	8002dd2 <USB_CoreReset+0x42>
      return HAL_TIMEOUT;
 8002dd0:	2003      	movs	r0, #3
}
 8002dd2:	b002      	add	sp, #8
 8002dd4:	4770      	bx	lr
      return HAL_TIMEOUT;
 8002dd6:	2003      	movs	r0, #3
 8002dd8:	e7fb      	b.n	8002dd2 <USB_CoreReset+0x42>
 8002dda:	bf00      	nop
 8002ddc:	00030d40 	.word	0x00030d40

08002de0 <USB_CoreInit>:
{
 8002de0:	b084      	sub	sp, #16
 8002de2:	b510      	push	{r4, lr}
 8002de4:	4604      	mov	r4, r0
 8002de6:	a803      	add	r0, sp, #12
 8002de8:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8002dec:	9b08      	ldr	r3, [sp, #32]
 8002dee:	2b01      	cmp	r3, #1
 8002df0:	d11f      	bne.n	8002e32 <USB_CoreInit+0x52>
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8002df2:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8002df4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002df8:	63a3      	str	r3, [r4, #56]	; 0x38
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8002dfa:	68e3      	ldr	r3, [r4, #12]
 8002dfc:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8002e00:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002e04:	60e3      	str	r3, [r4, #12]
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8002e06:	68e3      	ldr	r3, [r4, #12]
 8002e08:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8002e0c:	60e3      	str	r3, [r4, #12]
    if (cfg.use_external_vbus == 1U)
 8002e0e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8002e10:	2b01      	cmp	r3, #1
 8002e12:	d009      	beq.n	8002e28 <USB_CoreInit+0x48>
    ret = USB_CoreReset(USBx);
 8002e14:	4620      	mov	r0, r4
 8002e16:	f7ff ffbb 	bl	8002d90 <USB_CoreReset>
  if (cfg.dma_enable == 1U)
 8002e1a:	9b06      	ldr	r3, [sp, #24]
 8002e1c:	2b01      	cmp	r3, #1
 8002e1e:	d01b      	beq.n	8002e58 <USB_CoreInit+0x78>
}
 8002e20:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002e24:	b004      	add	sp, #16
 8002e26:	4770      	bx	lr
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8002e28:	68e3      	ldr	r3, [r4, #12]
 8002e2a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002e2e:	60e3      	str	r3, [r4, #12]
 8002e30:	e7f0      	b.n	8002e14 <USB_CoreInit+0x34>
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8002e32:	68e3      	ldr	r3, [r4, #12]
 8002e34:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002e38:	60e3      	str	r3, [r4, #12]
    ret = USB_CoreReset(USBx);
 8002e3a:	4620      	mov	r0, r4
 8002e3c:	f7ff ffa8 	bl	8002d90 <USB_CoreReset>
    if (cfg.battery_charging_enable == 0U)
 8002e40:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8002e42:	b923      	cbnz	r3, 8002e4e <USB_CoreInit+0x6e>
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8002e44:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8002e46:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002e4a:	63a3      	str	r3, [r4, #56]	; 0x38
 8002e4c:	e7e5      	b.n	8002e1a <USB_CoreInit+0x3a>
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8002e4e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8002e50:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002e54:	63a3      	str	r3, [r4, #56]	; 0x38
 8002e56:	e7e0      	b.n	8002e1a <USB_CoreInit+0x3a>
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8002e58:	68a3      	ldr	r3, [r4, #8]
 8002e5a:	f043 0306 	orr.w	r3, r3, #6
 8002e5e:	60a3      	str	r3, [r4, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8002e60:	68a3      	ldr	r3, [r4, #8]
 8002e62:	f043 0320 	orr.w	r3, r3, #32
 8002e66:	60a3      	str	r3, [r4, #8]
 8002e68:	e7da      	b.n	8002e20 <USB_CoreInit+0x40>

08002e6a <USB_DisableGlobalInt>:
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8002e6a:	6883      	ldr	r3, [r0, #8]
 8002e6c:	f023 0301 	bic.w	r3, r3, #1
 8002e70:	6083      	str	r3, [r0, #8]
}
 8002e72:	2000      	movs	r0, #0
 8002e74:	4770      	bx	lr

08002e76 <USB_SetCurrentMode>:
{
 8002e76:	b570      	push	{r4, r5, r6, lr}
 8002e78:	4605      	mov	r5, r0
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8002e7a:	68c3      	ldr	r3, [r0, #12]
 8002e7c:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8002e80:	60c3      	str	r3, [r0, #12]
  if (mode == USB_HOST_MODE)
 8002e82:	2901      	cmp	r1, #1
 8002e84:	d015      	beq.n	8002eb2 <USB_SetCurrentMode+0x3c>
  else if (mode == USB_DEVICE_MODE)
 8002e86:	bb29      	cbnz	r1, 8002ed4 <USB_SetCurrentMode+0x5e>
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8002e88:	68c3      	ldr	r3, [r0, #12]
 8002e8a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8002e8e:	60c3      	str	r3, [r0, #12]
  uint32_t ms = 0U;
 8002e90:	2400      	movs	r4, #0
      HAL_Delay(1U);
 8002e92:	2601      	movs	r6, #1
 8002e94:	4630      	mov	r0, r6
 8002e96:	f7fe f941 	bl	800111c <HAL_Delay>
      ms++;
 8002e9a:	3401      	adds	r4, #1
  return ((USBx->GINTSTS) & 0x1U);
 8002e9c:	696b      	ldr	r3, [r5, #20]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8002e9e:	f013 0f01 	tst.w	r3, #1
 8002ea2:	d001      	beq.n	8002ea8 <USB_SetCurrentMode+0x32>
 8002ea4:	2c32      	cmp	r4, #50	; 0x32
 8002ea6:	d1f5      	bne.n	8002e94 <USB_SetCurrentMode+0x1e>
    return HAL_ERROR;
 8002ea8:	2c32      	cmp	r4, #50	; 0x32
 8002eaa:	bf14      	ite	ne
 8002eac:	2000      	movne	r0, #0
 8002eae:	2001      	moveq	r0, #1
}
 8002eb0:	bd70      	pop	{r4, r5, r6, pc}
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8002eb2:	68c3      	ldr	r3, [r0, #12]
 8002eb4:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8002eb8:	60c3      	str	r3, [r0, #12]
  uint32_t ms = 0U;
 8002eba:	2400      	movs	r4, #0
      HAL_Delay(1U);
 8002ebc:	2601      	movs	r6, #1
 8002ebe:	4630      	mov	r0, r6
 8002ec0:	f7fe f92c 	bl	800111c <HAL_Delay>
      ms++;
 8002ec4:	3401      	adds	r4, #1
  return ((USBx->GINTSTS) & 0x1U);
 8002ec6:	696b      	ldr	r3, [r5, #20]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8002ec8:	f013 0f01 	tst.w	r3, #1
 8002ecc:	d1ec      	bne.n	8002ea8 <USB_SetCurrentMode+0x32>
 8002ece:	2c32      	cmp	r4, #50	; 0x32
 8002ed0:	d1f5      	bne.n	8002ebe <USB_SetCurrentMode+0x48>
 8002ed2:	e7e9      	b.n	8002ea8 <USB_SetCurrentMode+0x32>
    return HAL_ERROR;
 8002ed4:	2001      	movs	r0, #1
 8002ed6:	e7eb      	b.n	8002eb0 <USB_SetCurrentMode+0x3a>

08002ed8 <USB_FlushTxFifo>:
{
 8002ed8:	b082      	sub	sp, #8
  __IO uint32_t count = 0U;
 8002eda:	2300      	movs	r3, #0
 8002edc:	9301      	str	r3, [sp, #4]
    if (count > 200000U)
 8002ede:	4a11      	ldr	r2, [pc, #68]	; (8002f24 <USB_FlushTxFifo+0x4c>)
    count++;
 8002ee0:	9b01      	ldr	r3, [sp, #4]
 8002ee2:	3301      	adds	r3, #1
 8002ee4:	9301      	str	r3, [sp, #4]
    if (count > 200000U)
 8002ee6:	9b01      	ldr	r3, [sp, #4]
 8002ee8:	4293      	cmp	r3, r2
 8002eea:	d815      	bhi.n	8002f18 <USB_FlushTxFifo+0x40>
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8002eec:	6903      	ldr	r3, [r0, #16]
 8002eee:	2b00      	cmp	r3, #0
 8002ef0:	daf6      	bge.n	8002ee0 <USB_FlushTxFifo+0x8>
  count = 0U;
 8002ef2:	2300      	movs	r3, #0
 8002ef4:	9301      	str	r3, [sp, #4]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8002ef6:	0189      	lsls	r1, r1, #6
 8002ef8:	f041 0120 	orr.w	r1, r1, #32
 8002efc:	6101      	str	r1, [r0, #16]
    if (count > 200000U)
 8002efe:	4a09      	ldr	r2, [pc, #36]	; (8002f24 <USB_FlushTxFifo+0x4c>)
    count++;
 8002f00:	9b01      	ldr	r3, [sp, #4]
 8002f02:	3301      	adds	r3, #1
 8002f04:	9301      	str	r3, [sp, #4]
    if (count > 200000U)
 8002f06:	9b01      	ldr	r3, [sp, #4]
 8002f08:	4293      	cmp	r3, r2
 8002f0a:	d808      	bhi.n	8002f1e <USB_FlushTxFifo+0x46>
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8002f0c:	6903      	ldr	r3, [r0, #16]
 8002f0e:	f013 0f20 	tst.w	r3, #32
 8002f12:	d1f5      	bne.n	8002f00 <USB_FlushTxFifo+0x28>
  return HAL_OK;
 8002f14:	2000      	movs	r0, #0
 8002f16:	e000      	b.n	8002f1a <USB_FlushTxFifo+0x42>
      return HAL_TIMEOUT;
 8002f18:	2003      	movs	r0, #3
}
 8002f1a:	b002      	add	sp, #8
 8002f1c:	4770      	bx	lr
      return HAL_TIMEOUT;
 8002f1e:	2003      	movs	r0, #3
 8002f20:	e7fb      	b.n	8002f1a <USB_FlushTxFifo+0x42>
 8002f22:	bf00      	nop
 8002f24:	00030d40 	.word	0x00030d40

08002f28 <USB_FlushRxFifo>:
{
 8002f28:	b082      	sub	sp, #8
  __IO uint32_t count = 0U;
 8002f2a:	2300      	movs	r3, #0
 8002f2c:	9301      	str	r3, [sp, #4]
    if (count > 200000U)
 8002f2e:	4a10      	ldr	r2, [pc, #64]	; (8002f70 <USB_FlushRxFifo+0x48>)
    count++;
 8002f30:	9b01      	ldr	r3, [sp, #4]
 8002f32:	3301      	adds	r3, #1
 8002f34:	9301      	str	r3, [sp, #4]
    if (count > 200000U)
 8002f36:	9b01      	ldr	r3, [sp, #4]
 8002f38:	4293      	cmp	r3, r2
 8002f3a:	d813      	bhi.n	8002f64 <USB_FlushRxFifo+0x3c>
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8002f3c:	6903      	ldr	r3, [r0, #16]
 8002f3e:	2b00      	cmp	r3, #0
 8002f40:	daf6      	bge.n	8002f30 <USB_FlushRxFifo+0x8>
  count = 0U;
 8002f42:	2300      	movs	r3, #0
 8002f44:	9301      	str	r3, [sp, #4]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8002f46:	2310      	movs	r3, #16
 8002f48:	6103      	str	r3, [r0, #16]
    if (count > 200000U)
 8002f4a:	4a09      	ldr	r2, [pc, #36]	; (8002f70 <USB_FlushRxFifo+0x48>)
    count++;
 8002f4c:	9b01      	ldr	r3, [sp, #4]
 8002f4e:	3301      	adds	r3, #1
 8002f50:	9301      	str	r3, [sp, #4]
    if (count > 200000U)
 8002f52:	9b01      	ldr	r3, [sp, #4]
 8002f54:	4293      	cmp	r3, r2
 8002f56:	d808      	bhi.n	8002f6a <USB_FlushRxFifo+0x42>
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8002f58:	6903      	ldr	r3, [r0, #16]
 8002f5a:	f013 0f10 	tst.w	r3, #16
 8002f5e:	d1f5      	bne.n	8002f4c <USB_FlushRxFifo+0x24>
  return HAL_OK;
 8002f60:	2000      	movs	r0, #0
 8002f62:	e000      	b.n	8002f66 <USB_FlushRxFifo+0x3e>
      return HAL_TIMEOUT;
 8002f64:	2003      	movs	r0, #3
}
 8002f66:	b002      	add	sp, #8
 8002f68:	4770      	bx	lr
      return HAL_TIMEOUT;
 8002f6a:	2003      	movs	r0, #3
 8002f6c:	e7fb      	b.n	8002f66 <USB_FlushRxFifo+0x3e>
 8002f6e:	bf00      	nop
 8002f70:	00030d40 	.word	0x00030d40

08002f74 <USB_SetDevSpeed>:
  USBx_DEVICE->DCFG |= speed;
 8002f74:	f8d0 3800 	ldr.w	r3, [r0, #2048]	; 0x800
 8002f78:	4319      	orrs	r1, r3
 8002f7a:	f8c0 1800 	str.w	r1, [r0, #2048]	; 0x800
}
 8002f7e:	2000      	movs	r0, #0
 8002f80:	4770      	bx	lr
	...

08002f84 <USB_DevInit>:
{
 8002f84:	b084      	sub	sp, #16
 8002f86:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002f8a:	4604      	mov	r4, r0
 8002f8c:	a809      	add	r0, sp, #36	; 0x24
 8002f8e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
 8002f92:	460d      	mov	r5, r1
 8002f94:	9e13      	ldr	r6, [sp, #76]	; 0x4c
  for (i = 0U; i < 15U; i++)
 8002f96:	2300      	movs	r3, #0
    USBx->DIEPTXF[i] = 0U;
 8002f98:	4619      	mov	r1, r3
 8002f9a:	f103 0240 	add.w	r2, r3, #64	; 0x40
 8002f9e:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 8002fa2:	6051      	str	r1, [r2, #4]
  for (i = 0U; i < 15U; i++)
 8002fa4:	3301      	adds	r3, #1
 8002fa6:	2b0f      	cmp	r3, #15
 8002fa8:	d1f7      	bne.n	8002f9a <USB_DevInit+0x16>
  if (cfg.vbus_sensing_enable == 0U)
 8002faa:	bb26      	cbnz	r6, 8002ff6 <USB_DevInit+0x72>
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8002fac:	f8d4 3804 	ldr.w	r3, [r4, #2052]	; 0x804
 8002fb0:	f043 0302 	orr.w	r3, r3, #2
 8002fb4:	f8c4 3804 	str.w	r3, [r4, #2052]	; 0x804
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8002fb8:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8002fba:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002fbe:	63a3      	str	r3, [r4, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8002fc0:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8002fc2:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
 8002fc6:	63a3      	str	r3, [r4, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8002fc8:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8002fca:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002fce:	63a3      	str	r3, [r4, #56]	; 0x38
  USBx_PCGCCTL = 0U;
 8002fd0:	2300      	movs	r3, #0
 8002fd2:	f8c4 3e00 	str.w	r3, [r4, #3584]	; 0xe00
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8002fd6:	f504 6700 	add.w	r7, r4, #2048	; 0x800
 8002fda:	f8d4 3800 	ldr.w	r3, [r4, #2048]	; 0x800
 8002fde:	f8c4 3800 	str.w	r3, [r4, #2048]	; 0x800
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8002fe2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8002fe4:	2b01      	cmp	r3, #1
 8002fe6:	d114      	bne.n	8003012 <USB_DevInit+0x8e>
    if (cfg.speed == USBD_HS_SPEED)
 8002fe8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8002fea:	b96b      	cbnz	r3, 8003008 <USB_DevInit+0x84>
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8002fec:	2100      	movs	r1, #0
 8002fee:	4620      	mov	r0, r4
 8002ff0:	f7ff ffc0 	bl	8002f74 <USB_SetDevSpeed>
 8002ff4:	e011      	b.n	800301a <USB_DevInit+0x96>
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8002ff6:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8002ff8:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8002ffc:	63a3      	str	r3, [r4, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8002ffe:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8003000:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8003004:	63a3      	str	r3, [r4, #56]	; 0x38
 8003006:	e7e3      	b.n	8002fd0 <USB_DevInit+0x4c>
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8003008:	2101      	movs	r1, #1
 800300a:	4620      	mov	r0, r4
 800300c:	f7ff ffb2 	bl	8002f74 <USB_SetDevSpeed>
 8003010:	e003      	b.n	800301a <USB_DevInit+0x96>
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8003012:	2103      	movs	r1, #3
 8003014:	4620      	mov	r0, r4
 8003016:	f7ff ffad 	bl	8002f74 <USB_SetDevSpeed>
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800301a:	2110      	movs	r1, #16
 800301c:	4620      	mov	r0, r4
 800301e:	f7ff ff5b 	bl	8002ed8 <USB_FlushTxFifo>
 8003022:	4680      	mov	r8, r0
  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8003024:	4620      	mov	r0, r4
 8003026:	f7ff ff7f 	bl	8002f28 <USB_FlushRxFifo>
 800302a:	ea48 0800 	orr.w	r8, r8, r0
 800302e:	f018 0fff 	tst.w	r8, #255	; 0xff
    ret = HAL_ERROR;
 8003032:	bf14      	ite	ne
 8003034:	f04f 0e01 	movne.w	lr, #1
 8003038:	f04f 0e00 	moveq.w	lr, #0
  USBx_DEVICE->DIEPMSK = 0U;
 800303c:	2300      	movs	r3, #0
 800303e:	613b      	str	r3, [r7, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8003040:	617b      	str	r3, [r7, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8003042:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003044:	2d00      	cmp	r5, #0
 8003046:	d03f      	beq.n	80030c8 <USB_DevInit+0x144>
 8003048:	f504 6310 	add.w	r3, r4, #2304	; 0x900
 800304c:	2200      	movs	r2, #0
      USBx_INEP(i)->DIEPCTL = 0U;
 800304e:	4694      	mov	ip, r2
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8003050:	f04f 4990 	mov.w	r9, #1207959552	; 0x48000000
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8003054:	f04f 6a00 	mov.w	sl, #134217728	; 0x8000000
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8003058:	f64f 387f 	movw	r8, #64383	; 0xfb7f
 800305c:	e00a      	b.n	8003074 <USB_DevInit+0xf0>
      if (i == 0U)
 800305e:	b182      	cbz	r2, 8003082 <USB_DevInit+0xfe>
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8003060:	f8c3 9000 	str.w	r9, [r3]
    USBx_INEP(i)->DIEPTSIZ = 0U;
 8003064:	f8c1 c010 	str.w	ip, [r1, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8003068:	f8c1 8008 	str.w	r8, [r1, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800306c:	3201      	adds	r2, #1
 800306e:	3320      	adds	r3, #32
 8003070:	4295      	cmp	r5, r2
 8003072:	d009      	beq.n	8003088 <USB_DevInit+0x104>
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8003074:	4619      	mov	r1, r3
 8003076:	6818      	ldr	r0, [r3, #0]
 8003078:	2800      	cmp	r0, #0
 800307a:	dbf0      	blt.n	800305e <USB_DevInit+0xda>
      USBx_INEP(i)->DIEPCTL = 0U;
 800307c:	f8c3 c000 	str.w	ip, [r3]
 8003080:	e7f0      	b.n	8003064 <USB_DevInit+0xe0>
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8003082:	f8c3 a000 	str.w	sl, [r3]
 8003086:	e7ed      	b.n	8003064 <USB_DevInit+0xe0>
 8003088:	f504 6330 	add.w	r3, r4, #2816	; 0xb00
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800308c:	2200      	movs	r2, #0
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800308e:	4694      	mov	ip, r2
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8003090:	f04f 4990 	mov.w	r9, #1207959552	; 0x48000000
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8003094:	f04f 6a00 	mov.w	sl, #134217728	; 0x8000000
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8003098:	f64f 387f 	movw	r8, #64383	; 0xfb7f
 800309c:	e00a      	b.n	80030b4 <USB_DevInit+0x130>
      if (i == 0U)
 800309e:	b182      	cbz	r2, 80030c2 <USB_DevInit+0x13e>
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 80030a0:	f8c3 9000 	str.w	r9, [r3]
    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 80030a4:	f8c1 c010 	str.w	ip, [r1, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 80030a8:	f8c1 8008 	str.w	r8, [r1, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80030ac:	3201      	adds	r2, #1
 80030ae:	3320      	adds	r3, #32
 80030b0:	4295      	cmp	r5, r2
 80030b2:	d009      	beq.n	80030c8 <USB_DevInit+0x144>
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80030b4:	4619      	mov	r1, r3
 80030b6:	6818      	ldr	r0, [r3, #0]
 80030b8:	2800      	cmp	r0, #0
 80030ba:	dbf0      	blt.n	800309e <USB_DevInit+0x11a>
      USBx_OUTEP(i)->DOEPCTL = 0U;
 80030bc:	f8c3 c000 	str.w	ip, [r3]
 80030c0:	e7f0      	b.n	80030a4 <USB_DevInit+0x120>
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 80030c2:	f8c3 a000 	str.w	sl, [r3]
 80030c6:	e7ed      	b.n	80030a4 <USB_DevInit+0x120>
  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 80030c8:	693b      	ldr	r3, [r7, #16]
 80030ca:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80030ce:	613b      	str	r3, [r7, #16]
  USBx->GINTMSK = 0U;
 80030d0:	2300      	movs	r3, #0
 80030d2:	61a3      	str	r3, [r4, #24]
  USBx->GINTSTS = 0xBFFFFFFFU;
 80030d4:	f06f 4380 	mvn.w	r3, #1073741824	; 0x40000000
 80030d8:	6163      	str	r3, [r4, #20]
  if (cfg.dma_enable == 0U)
 80030da:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80030dc:	b91b      	cbnz	r3, 80030e6 <USB_DevInit+0x162>
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80030de:	69a3      	ldr	r3, [r4, #24]
 80030e0:	f043 0310 	orr.w	r3, r3, #16
 80030e4:	61a3      	str	r3, [r4, #24]
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 80030e6:	69a2      	ldr	r2, [r4, #24]
 80030e8:	4b0b      	ldr	r3, [pc, #44]	; (8003118 <USB_DevInit+0x194>)
 80030ea:	4313      	orrs	r3, r2
 80030ec:	61a3      	str	r3, [r4, #24]
  if (cfg.Sof_enable != 0U)
 80030ee:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80030f0:	b11b      	cbz	r3, 80030fa <USB_DevInit+0x176>
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 80030f2:	69a3      	ldr	r3, [r4, #24]
 80030f4:	f043 0308 	orr.w	r3, r3, #8
 80030f8:	61a3      	str	r3, [r4, #24]
  if (cfg.vbus_sensing_enable == 1U)
 80030fa:	2e01      	cmp	r6, #1
 80030fc:	d004      	beq.n	8003108 <USB_DevInit+0x184>
}
 80030fe:	4670      	mov	r0, lr
 8003100:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003104:	b004      	add	sp, #16
 8003106:	4770      	bx	lr
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8003108:	69a3      	ldr	r3, [r4, #24]
 800310a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800310e:	f043 0304 	orr.w	r3, r3, #4
 8003112:	61a3      	str	r3, [r4, #24]
 8003114:	e7f3      	b.n	80030fe <USB_DevInit+0x17a>
 8003116:	bf00      	nop
 8003118:	803c3800 	.word	0x803c3800

0800311c <USB_DevDisconnect>:
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800311c:	f8d0 3e00 	ldr.w	r3, [r0, #3584]	; 0xe00
 8003120:	f023 0303 	bic.w	r3, r3, #3
 8003124:	f8c0 3e00 	str.w	r3, [r0, #3584]	; 0xe00
  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8003128:	f8d0 3804 	ldr.w	r3, [r0, #2052]	; 0x804
 800312c:	f043 0302 	orr.w	r3, r3, #2
 8003130:	f8c0 3804 	str.w	r3, [r0, #2052]	; 0x804
}
 8003134:	2000      	movs	r0, #0
 8003136:	4770      	bx	lr

08003138 <ethernet_link_status_updated>:
  else /* netif is down */
  {
/* USER CODE BEGIN 6 */
/* USER CODE END 6 */
  }
}
 8003138:	4770      	bx	lr
	...

0800313c <MX_LWIP_Init>:
{
 800313c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800313e:	b085      	sub	sp, #20
  IP_ADDRESS[0] = 169;
 8003140:	4e2d      	ldr	r6, [pc, #180]	; (80031f8 <MX_LWIP_Init+0xbc>)
 8003142:	20a9      	movs	r0, #169	; 0xa9
 8003144:	7030      	strb	r0, [r6, #0]
  IP_ADDRESS[1] = 254;
 8003146:	21fe      	movs	r1, #254	; 0xfe
 8003148:	7071      	strb	r1, [r6, #1]
  IP_ADDRESS[2] = 228;
 800314a:	22e4      	movs	r2, #228	; 0xe4
 800314c:	70b2      	strb	r2, [r6, #2]
  IP_ADDRESS[3] = 35;
 800314e:	2323      	movs	r3, #35	; 0x23
 8003150:	70f3      	strb	r3, [r6, #3]
  NETMASK_ADDRESS[0] = 255;
 8003152:	4d2a      	ldr	r5, [pc, #168]	; (80031fc <MX_LWIP_Init+0xc0>)
 8003154:	23ff      	movs	r3, #255	; 0xff
 8003156:	702b      	strb	r3, [r5, #0]
  NETMASK_ADDRESS[1] = 255;
 8003158:	706b      	strb	r3, [r5, #1]
  NETMASK_ADDRESS[2] = 255;
 800315a:	70ab      	strb	r3, [r5, #2]
  NETMASK_ADDRESS[3] = 0;
 800315c:	2700      	movs	r7, #0
 800315e:	70ef      	strb	r7, [r5, #3]
  GATEWAY_ADDRESS[0] = 169;
 8003160:	4c27      	ldr	r4, [pc, #156]	; (8003200 <MX_LWIP_Init+0xc4>)
 8003162:	7020      	strb	r0, [r4, #0]
  GATEWAY_ADDRESS[1] = 254;
 8003164:	7061      	strb	r1, [r4, #1]
  GATEWAY_ADDRESS[2] = 228;
 8003166:	70a2      	strb	r2, [r4, #2]
  GATEWAY_ADDRESS[3] = 1;
 8003168:	2301      	movs	r3, #1
 800316a:	70e3      	strb	r3, [r4, #3]
  lwip_init();
 800316c:	f001 fa60 	bl	8004630 <lwip_init>
  IP4_ADDR(&ipaddr, IP_ADDRESS[0], IP_ADDRESS[1], IP_ADDRESS[2], IP_ADDRESS[3]);
 8003170:	7833      	ldrb	r3, [r6, #0]
 8003172:	7872      	ldrb	r2, [r6, #1]
 8003174:	f896 c003 	ldrb.w	ip, [r6, #3]
 8003178:	78b0      	ldrb	r0, [r6, #2]
 800317a:	4922      	ldr	r1, [pc, #136]	; (8003204 <MX_LWIP_Init+0xc8>)
 800317c:	ea43 630c 	orr.w	r3, r3, ip, lsl #24
 8003180:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8003184:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8003188:	600b      	str	r3, [r1, #0]
  IP4_ADDR(&netmask, NETMASK_ADDRESS[0], NETMASK_ADDRESS[1] , NETMASK_ADDRESS[2], NETMASK_ADDRESS[3]);
 800318a:	782b      	ldrb	r3, [r5, #0]
 800318c:	7868      	ldrb	r0, [r5, #1]
 800318e:	78ee      	ldrb	r6, [r5, #3]
 8003190:	78ad      	ldrb	r5, [r5, #2]
 8003192:	4a1d      	ldr	r2, [pc, #116]	; (8003208 <MX_LWIP_Init+0xcc>)
 8003194:	ea43 6306 	orr.w	r3, r3, r6, lsl #24
 8003198:	ea43 4305 	orr.w	r3, r3, r5, lsl #16
 800319c:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
 80031a0:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&gw, GATEWAY_ADDRESS[0], GATEWAY_ADDRESS[1], GATEWAY_ADDRESS[2], GATEWAY_ADDRESS[3]);
 80031a2:	7820      	ldrb	r0, [r4, #0]
 80031a4:	7865      	ldrb	r5, [r4, #1]
 80031a6:	78e6      	ldrb	r6, [r4, #3]
 80031a8:	78a4      	ldrb	r4, [r4, #2]
 80031aa:	4b18      	ldr	r3, [pc, #96]	; (800320c <MX_LWIP_Init+0xd0>)
 80031ac:	ea40 6006 	orr.w	r0, r0, r6, lsl #24
 80031b0:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80031b4:	ea40 2005 	orr.w	r0, r0, r5, lsl #8
 80031b8:	6018      	str	r0, [r3, #0]
  netif_add(&gnetif, &ipaddr, &netmask, &gw, NULL, &ethernetif_init, &ethernet_input);
 80031ba:	4c15      	ldr	r4, [pc, #84]	; (8003210 <MX_LWIP_Init+0xd4>)
 80031bc:	4815      	ldr	r0, [pc, #84]	; (8003214 <MX_LWIP_Init+0xd8>)
 80031be:	9002      	str	r0, [sp, #8]
 80031c0:	4815      	ldr	r0, [pc, #84]	; (8003218 <MX_LWIP_Init+0xdc>)
 80031c2:	9001      	str	r0, [sp, #4]
 80031c4:	9700      	str	r7, [sp, #0]
 80031c6:	4620      	mov	r0, r4
 80031c8:	f001 fddc 	bl	8004d84 <netif_add>
  netif_set_default(&gnetif);
 80031cc:	4620      	mov	r0, r4
 80031ce:	f001 fe71 	bl	8004eb4 <netif_set_default>
  if (netif_is_link_up(&gnetif))
 80031d2:	f894 302d 	ldrb.w	r3, [r4, #45]	; 0x2d
 80031d6:	f013 0f04 	tst.w	r3, #4
 80031da:	d008      	beq.n	80031ee <MX_LWIP_Init+0xb2>
    netif_set_up(&gnetif);
 80031dc:	4620      	mov	r0, r4
 80031de:	f001 fe6f 	bl	8004ec0 <netif_set_up>
  netif_set_link_callback(&gnetif, ethernet_link_status_updated);
 80031e2:	490e      	ldr	r1, [pc, #56]	; (800321c <MX_LWIP_Init+0xe0>)
 80031e4:	480a      	ldr	r0, [pc, #40]	; (8003210 <MX_LWIP_Init+0xd4>)
 80031e6:	f001 feeb 	bl	8004fc0 <netif_set_link_callback>
}
 80031ea:	b005      	add	sp, #20
 80031ec:	bdf0      	pop	{r4, r5, r6, r7, pc}
    netif_set_down(&gnetif);
 80031ee:	4808      	ldr	r0, [pc, #32]	; (8003210 <MX_LWIP_Init+0xd4>)
 80031f0:	f001 fe84 	bl	8004efc <netif_set_down>
 80031f4:	e7f5      	b.n	80031e2 <MX_LWIP_Init+0xa6>
 80031f6:	bf00      	nop
 80031f8:	200006b8 	.word	0x200006b8
 80031fc:	200006bc 	.word	0x200006bc
 8003200:	200006b4 	.word	0x200006b4
 8003204:	200006f8 	.word	0x200006f8
 8003208:	200006fc 	.word	0x200006fc
 800320c:	200006f4 	.word	0x200006f4
 8003210:	200006c0 	.word	0x200006c0
 8003214:	0800b251 	.word	0x0800b251
 8003218:	08003539 	.word	0x08003539
 800321c:	08003139 	.word	0x08003139

08003220 <ETH_PHY_IO_DeInit>:
  * @retval 0 if OK, -1 if ERROR
  */
int32_t ETH_PHY_IO_DeInit (void)
{
  return 0;
}
 8003220:	2000      	movs	r0, #0
 8003222:	4770      	bx	lr

08003224 <low_level_output>:
{
 8003224:	b570      	push	{r4, r5, r6, lr}
 8003226:	b08c      	sub	sp, #48	; 0x30
 8003228:	460d      	mov	r5, r1
  ETH_BufferTypeDef Txbuffer[ETH_TX_DESC_CNT] = {0};
 800322a:	2230      	movs	r2, #48	; 0x30
 800322c:	2100      	movs	r1, #0
 800322e:	4668      	mov	r0, sp
 8003230:	f008 f8fa 	bl	800b428 <memset>
  for(q = p; q != NULL; q = q->next)
 8003234:	b32d      	cbz	r5, 8003282 <low_level_output+0x5e>
    Txbuffer[i].buffer = q->payload;
 8003236:	686b      	ldr	r3, [r5, #4]
 8003238:	9300      	str	r3, [sp, #0]
    Txbuffer[i].len = q->len;
 800323a:	896b      	ldrh	r3, [r5, #10]
 800323c:	9301      	str	r3, [sp, #4]
    if(i>0)
 800323e:	ac03      	add	r4, sp, #12
  for(q = p; q != NULL; q = q->next)
 8003240:	4629      	mov	r1, r5
    Txbuffer[i].len = q->len;
 8003242:	2301      	movs	r3, #1
      Txbuffer[i].next = NULL;
 8003244:	2600      	movs	r6, #0
 8003246:	e002      	b.n	800324e <low_level_output+0x2a>
 8003248:	340c      	adds	r4, #12
 800324a:	3301      	adds	r3, #1
{
 800324c:	4611      	mov	r1, r2
    if(q->next == NULL)
 800324e:	680a      	ldr	r2, [r1, #0]
 8003250:	b192      	cbz	r2, 8003278 <low_level_output+0x54>
    if(i >= ETH_TX_DESC_CNT)
 8003252:	2b04      	cmp	r3, #4
 8003254:	d021      	beq.n	800329a <low_level_output+0x76>
    Txbuffer[i].buffer = q->payload;
 8003256:	6851      	ldr	r1, [r2, #4]
 8003258:	eb03 0043 	add.w	r0, r3, r3, lsl #1
 800325c:	f10d 0c30 	add.w	ip, sp, #48	; 0x30
 8003260:	eb0c 0080 	add.w	r0, ip, r0, lsl #2
 8003264:	f840 1c30 	str.w	r1, [r0, #-48]
    Txbuffer[i].len = q->len;
 8003268:	8951      	ldrh	r1, [r2, #10]
 800326a:	f840 1c2c 	str.w	r1, [r0, #-44]
    if(i>0)
 800326e:	2b00      	cmp	r3, #0
 8003270:	d0ea      	beq.n	8003248 <low_level_output+0x24>
      Txbuffer[i-1].next = &Txbuffer[i];
 8003272:	f844 4c04 	str.w	r4, [r4, #-4]
 8003276:	e7e7      	b.n	8003248 <low_level_output+0x24>
      Txbuffer[i].next = NULL;
 8003278:	f844 6c04 	str.w	r6, [r4, #-4]
  for(q = p; q != NULL; q = q->next)
 800327c:	680a      	ldr	r2, [r1, #0]
 800327e:	2a00      	cmp	r2, #0
 8003280:	d1e7      	bne.n	8003252 <low_level_output+0x2e>
  TxConfig.Length = p->tot_len;
 8003282:	4908      	ldr	r1, [pc, #32]	; (80032a4 <low_level_output+0x80>)
 8003284:	892b      	ldrh	r3, [r5, #8]
 8003286:	604b      	str	r3, [r1, #4]
  TxConfig.TxBuffer = Txbuffer;
 8003288:	f8c1 d008 	str.w	sp, [r1, #8]
  TxConfig.pData = p;
 800328c:	634d      	str	r5, [r1, #52]	; 0x34
  HAL_ETH_Transmit(&heth, &TxConfig, ETH_DMA_TRANSMIT_TIMEOUT);
 800328e:	2214      	movs	r2, #20
 8003290:	4805      	ldr	r0, [pc, #20]	; (80032a8 <low_level_output+0x84>)
 8003292:	f7fe fb3b 	bl	800190c <HAL_ETH_Transmit>
  return errval;
 8003296:	2000      	movs	r0, #0
 8003298:	e001      	b.n	800329e <low_level_output+0x7a>
      return ERR_IF;
 800329a:	f06f 000b 	mvn.w	r0, #11
}
 800329e:	b00c      	add	sp, #48	; 0x30
 80032a0:	bd70      	pop	{r4, r5, r6, pc}
 80032a2:	bf00      	nop
 80032a4:	20000864 	.word	0x20000864
 80032a8:	2000089c 	.word	0x2000089c

080032ac <pbuf_free_custom>:
{
 80032ac:	b508      	push	{r3, lr}
 80032ae:	4601      	mov	r1, r0
  LWIP_MEMPOOL_FREE(RX_POOL, custom_pbuf);
 80032b0:	4805      	ldr	r0, [pc, #20]	; (80032c8 <pbuf_free_custom+0x1c>)
 80032b2:	f001 fca5 	bl	8004c00 <memp_free_pool>
  if (RxAllocStatus == RX_ALLOC_ERROR)
 80032b6:	4b05      	ldr	r3, [pc, #20]	; (80032cc <pbuf_free_custom+0x20>)
 80032b8:	781b      	ldrb	r3, [r3, #0]
 80032ba:	2b01      	cmp	r3, #1
 80032bc:	d000      	beq.n	80032c0 <pbuf_free_custom+0x14>
}
 80032be:	bd08      	pop	{r3, pc}
    RxAllocStatus = RX_ALLOC_OK;
 80032c0:	4b02      	ldr	r3, [pc, #8]	; (80032cc <pbuf_free_custom+0x20>)
 80032c2:	2200      	movs	r2, #0
 80032c4:	701a      	strb	r2, [r3, #0]
}
 80032c6:	e7fa      	b.n	80032be <pbuf_free_custom+0x12>
 80032c8:	0800cb4c 	.word	0x0800cb4c
 80032cc:	20000860 	.word	0x20000860

080032d0 <ETH_PHY_IO_GetTick>:
/**
  * @brief  Get the time in millisecons used for internal PHY driver process.
  * @retval Time value
  */
int32_t ETH_PHY_IO_GetTick(void)
{
 80032d0:	b508      	push	{r3, lr}
  return HAL_GetTick();
 80032d2:	f7fd ff1d 	bl	8001110 <HAL_GetTick>
}
 80032d6:	bd08      	pop	{r3, pc}

080032d8 <ETH_PHY_IO_Init>:
{
 80032d8:	b508      	push	{r3, lr}
  HAL_ETH_SetMDIOClockRange(&heth);
 80032da:	4802      	ldr	r0, [pc, #8]	; (80032e4 <ETH_PHY_IO_Init+0xc>)
 80032dc:	f7fe fce6 	bl	8001cac <HAL_ETH_SetMDIOClockRange>
}
 80032e0:	2000      	movs	r0, #0
 80032e2:	bd08      	pop	{r3, pc}
 80032e4:	2000089c 	.word	0x2000089c

080032e8 <ETH_PHY_IO_ReadReg>:
{
 80032e8:	b508      	push	{r3, lr}
 80032ea:	4613      	mov	r3, r2
  if(HAL_ETH_ReadPHYRegister(&heth, DevAddr, RegAddr, pRegVal) != HAL_OK)
 80032ec:	460a      	mov	r2, r1
 80032ee:	4601      	mov	r1, r0
 80032f0:	4803      	ldr	r0, [pc, #12]	; (8003300 <ETH_PHY_IO_ReadReg+0x18>)
 80032f2:	f7fe fc0d 	bl	8001b10 <HAL_ETH_ReadPHYRegister>
 80032f6:	3800      	subs	r0, #0
 80032f8:	bf18      	it	ne
 80032fa:	2001      	movne	r0, #1
}
 80032fc:	4240      	negs	r0, r0
 80032fe:	bd08      	pop	{r3, pc}
 8003300:	2000089c 	.word	0x2000089c

08003304 <ETH_PHY_IO_WriteReg>:
{
 8003304:	b508      	push	{r3, lr}
 8003306:	4613      	mov	r3, r2
  if(HAL_ETH_WritePHYRegister(&heth, DevAddr, RegAddr, RegVal) != HAL_OK)
 8003308:	460a      	mov	r2, r1
 800330a:	4601      	mov	r1, r0
 800330c:	4803      	ldr	r0, [pc, #12]	; (800331c <ETH_PHY_IO_WriteReg+0x18>)
 800330e:	f7fe fc25 	bl	8001b5c <HAL_ETH_WritePHYRegister>
 8003312:	3800      	subs	r0, #0
 8003314:	bf18      	it	ne
 8003316:	2001      	movne	r0, #1
}
 8003318:	4240      	negs	r0, r0
 800331a:	bd08      	pop	{r3, pc}
 800331c:	2000089c 	.word	0x2000089c

08003320 <ethernetif_input>:
{
 8003320:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003324:	b082      	sub	sp, #8
 8003326:	4605      	mov	r5, r0
  struct pbuf *p = NULL;
 8003328:	2700      	movs	r7, #0
  if(RxAllocStatus == RX_ALLOC_OK)
 800332a:	4e0d      	ldr	r6, [pc, #52]	; (8003360 <ethernetif_input+0x40>)
    HAL_ETH_ReadData(&heth, (void **)&p);
 800332c:	f8df 8034 	ldr.w	r8, [pc, #52]	; 8003364 <ethernetif_input+0x44>
 8003330:	e00a      	b.n	8003348 <ethernetif_input+0x28>
 8003332:	a901      	add	r1, sp, #4
 8003334:	4640      	mov	r0, r8
 8003336:	f7fe fb4e 	bl	80019d6 <HAL_ETH_ReadData>
  return p;
 800333a:	9c01      	ldr	r4, [sp, #4]
    if (p != NULL)
 800333c:	b144      	cbz	r4, 8003350 <ethernetif_input+0x30>
      if (netif->input( p, netif) != ERR_OK )
 800333e:	692b      	ldr	r3, [r5, #16]
 8003340:	4629      	mov	r1, r5
 8003342:	4620      	mov	r0, r4
 8003344:	4798      	blx	r3
 8003346:	b930      	cbnz	r0, 8003356 <ethernetif_input+0x36>
  struct pbuf *p = NULL;
 8003348:	9701      	str	r7, [sp, #4]
  if(RxAllocStatus == RX_ALLOC_OK)
 800334a:	7833      	ldrb	r3, [r6, #0]
 800334c:	2b00      	cmp	r3, #0
 800334e:	d0f0      	beq.n	8003332 <ethernetif_input+0x12>
}
 8003350:	b002      	add	sp, #8
 8003352:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        pbuf_free(p);
 8003356:	4620      	mov	r0, r4
 8003358:	f001 ff26 	bl	80051a8 <pbuf_free>
  } while(p!=NULL);
 800335c:	e7f4      	b.n	8003348 <ethernetif_input+0x28>
 800335e:	bf00      	nop
 8003360:	20000860 	.word	0x20000860
 8003364:	2000089c 	.word	0x2000089c

08003368 <sys_now>:
{
 8003368:	b508      	push	{r3, lr}
  return HAL_GetTick();
 800336a:	f7fd fed1 	bl	8001110 <HAL_GetTick>
}
 800336e:	bd08      	pop	{r3, pc}

08003370 <HAL_ETH_MspInit>:
{
 8003370:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003372:	b08d      	sub	sp, #52	; 0x34
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003374:	2300      	movs	r3, #0
 8003376:	9307      	str	r3, [sp, #28]
 8003378:	9308      	str	r3, [sp, #32]
 800337a:	9309      	str	r3, [sp, #36]	; 0x24
 800337c:	930a      	str	r3, [sp, #40]	; 0x28
 800337e:	930b      	str	r3, [sp, #44]	; 0x2c
  if(ethHandle->Instance==ETH)
 8003380:	6802      	ldr	r2, [r0, #0]
 8003382:	4b3d      	ldr	r3, [pc, #244]	; (8003478 <HAL_ETH_MspInit+0x108>)
 8003384:	429a      	cmp	r2, r3
 8003386:	d001      	beq.n	800338c <HAL_ETH_MspInit+0x1c>
}
 8003388:	b00d      	add	sp, #52	; 0x34
 800338a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    __HAL_RCC_ETH_CLK_ENABLE();
 800338c:	2400      	movs	r4, #0
 800338e:	9400      	str	r4, [sp, #0]
 8003390:	f5a3 4390 	sub.w	r3, r3, #18432	; 0x4800
 8003394:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003396:	f042 7200 	orr.w	r2, r2, #33554432	; 0x2000000
 800339a:	631a      	str	r2, [r3, #48]	; 0x30
 800339c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800339e:	f002 7200 	and.w	r2, r2, #33554432	; 0x2000000
 80033a2:	9200      	str	r2, [sp, #0]
 80033a4:	9a00      	ldr	r2, [sp, #0]
 80033a6:	9401      	str	r4, [sp, #4]
 80033a8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80033aa:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 80033ae:	631a      	str	r2, [r3, #48]	; 0x30
 80033b0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80033b2:	f002 6280 	and.w	r2, r2, #67108864	; 0x4000000
 80033b6:	9201      	str	r2, [sp, #4]
 80033b8:	9a01      	ldr	r2, [sp, #4]
 80033ba:	9402      	str	r4, [sp, #8]
 80033bc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80033be:	f042 6200 	orr.w	r2, r2, #134217728	; 0x8000000
 80033c2:	631a      	str	r2, [r3, #48]	; 0x30
 80033c4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80033c6:	f002 6200 	and.w	r2, r2, #134217728	; 0x8000000
 80033ca:	9202      	str	r2, [sp, #8]
 80033cc:	9a02      	ldr	r2, [sp, #8]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80033ce:	9403      	str	r4, [sp, #12]
 80033d0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80033d2:	f042 0204 	orr.w	r2, r2, #4
 80033d6:	631a      	str	r2, [r3, #48]	; 0x30
 80033d8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80033da:	f002 0204 	and.w	r2, r2, #4
 80033de:	9203      	str	r2, [sp, #12]
 80033e0:	9a03      	ldr	r2, [sp, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80033e2:	9404      	str	r4, [sp, #16]
 80033e4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80033e6:	f042 0201 	orr.w	r2, r2, #1
 80033ea:	631a      	str	r2, [r3, #48]	; 0x30
 80033ec:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80033ee:	f002 0201 	and.w	r2, r2, #1
 80033f2:	9204      	str	r2, [sp, #16]
 80033f4:	9a04      	ldr	r2, [sp, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80033f6:	9405      	str	r4, [sp, #20]
 80033f8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80033fa:	f042 0202 	orr.w	r2, r2, #2
 80033fe:	631a      	str	r2, [r3, #48]	; 0x30
 8003400:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003402:	f002 0202 	and.w	r2, r2, #2
 8003406:	9205      	str	r2, [sp, #20]
 8003408:	9a05      	ldr	r2, [sp, #20]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 800340a:	9406      	str	r4, [sp, #24]
 800340c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800340e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003412:	631a      	str	r2, [r3, #48]	; 0x30
 8003414:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003416:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800341a:	9306      	str	r3, [sp, #24]
 800341c:	9b06      	ldr	r3, [sp, #24]
    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 800341e:	2332      	movs	r3, #50	; 0x32
 8003420:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003422:	2702      	movs	r7, #2
 8003424:	9708      	str	r7, [sp, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003426:	2603      	movs	r6, #3
 8003428:	960a      	str	r6, [sp, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800342a:	250b      	movs	r5, #11
 800342c:	950b      	str	r5, [sp, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800342e:	a907      	add	r1, sp, #28
 8003430:	4812      	ldr	r0, [pc, #72]	; (800347c <HAL_ETH_MspInit+0x10c>)
 8003432:	f7fe fc75 	bl	8001d20 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8003436:	2386      	movs	r3, #134	; 0x86
 8003438:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800343a:	9708      	str	r7, [sp, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800343c:	9409      	str	r4, [sp, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800343e:	960a      	str	r6, [sp, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8003440:	950b      	str	r5, [sp, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003442:	a907      	add	r1, sp, #28
 8003444:	480e      	ldr	r0, [pc, #56]	; (8003480 <HAL_ETH_MspInit+0x110>)
 8003446:	f7fe fc6b 	bl	8001d20 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 800344a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800344e:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003450:	9708      	str	r7, [sp, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003452:	9409      	str	r4, [sp, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003454:	960a      	str	r6, [sp, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8003456:	950b      	str	r5, [sp, #44]	; 0x2c
    HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 8003458:	a907      	add	r1, sp, #28
 800345a:	480a      	ldr	r0, [pc, #40]	; (8003484 <HAL_ETH_MspInit+0x114>)
 800345c:	f7fe fc60 	bl	8001d20 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 8003460:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8003464:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003466:	9708      	str	r7, [sp, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003468:	9409      	str	r4, [sp, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800346a:	960a      	str	r6, [sp, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800346c:	950b      	str	r5, [sp, #44]	; 0x2c
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800346e:	a907      	add	r1, sp, #28
 8003470:	4805      	ldr	r0, [pc, #20]	; (8003488 <HAL_ETH_MspInit+0x118>)
 8003472:	f7fe fc55 	bl	8001d20 <HAL_GPIO_Init>
}
 8003476:	e787      	b.n	8003388 <HAL_ETH_MspInit+0x18>
 8003478:	40028000 	.word	0x40028000
 800347c:	40020800 	.word	0x40020800
 8003480:	40020000 	.word	0x40020000
 8003484:	40020400 	.word	0x40020400
 8003488:	40021800 	.word	0x40021800

0800348c <ethernet_link_check_state>:
/**
  * @brief  Check the ETH link state then update ETH driver and netif link accordingly.
  * @retval None
  */
void ethernet_link_check_state(struct netif *netif)
{
 800348c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800348e:	b09b      	sub	sp, #108	; 0x6c
 8003490:	4604      	mov	r4, r0
  ETH_MACConfigTypeDef MACConf = {0};
 8003492:	2264      	movs	r2, #100	; 0x64
 8003494:	2100      	movs	r1, #0
 8003496:	a801      	add	r0, sp, #4
 8003498:	f007 ffc6 	bl	800b428 <memset>
  int32_t PHYLinkState = 0;
  uint32_t linkchanged = 0U, speed = 0U, duplex = 0U;

  PHYLinkState = LAN8742_GetLinkState(&LAN8742);
 800349c:	4824      	ldr	r0, [pc, #144]	; (8003530 <ethernet_link_check_state+0xa4>)
 800349e:	f7fd fdb1 	bl	8001004 <LAN8742_GetLinkState>

  if(netif_is_link_up(netif) && (PHYLinkState <= LAN8742_STATUS_LINK_DOWN))
 80034a2:	f894 302d 	ldrb.w	r3, [r4, #45]	; 0x2d
 80034a6:	f013 0f04 	tst.w	r3, #4
 80034aa:	d010      	beq.n	80034ce <ethernet_link_check_state+0x42>
 80034ac:	2801      	cmp	r0, #1
 80034ae:	dd04      	ble.n	80034ba <ethernet_link_check_state+0x2e>
  {
    HAL_ETH_Stop(&heth);
    netif_set_down(netif);
    netif_set_link_down(netif);
  }
  else if(!netif_is_link_up(netif) && (PHYLinkState > LAN8742_STATUS_LINK_DOWN))
 80034b0:	f013 0f04 	tst.w	r3, #4
 80034b4:	d010      	beq.n	80034d8 <ethernet_link_check_state+0x4c>
      netif_set_up(netif);
      netif_set_link_up(netif);
    }
  }

}
 80034b6:	b01b      	add	sp, #108	; 0x6c
 80034b8:	bdf0      	pop	{r4, r5, r6, r7, pc}
    HAL_ETH_Stop(&heth);
 80034ba:	481e      	ldr	r0, [pc, #120]	; (8003534 <ethernet_link_check_state+0xa8>)
 80034bc:	f7fe f9ee 	bl	800189c <HAL_ETH_Stop>
    netif_set_down(netif);
 80034c0:	4620      	mov	r0, r4
 80034c2:	f001 fd1b 	bl	8004efc <netif_set_down>
    netif_set_link_down(netif);
 80034c6:	4620      	mov	r0, r4
 80034c8:	f001 fd5c 	bl	8004f84 <netif_set_link_down>
 80034cc:	e7f3      	b.n	80034b6 <ethernet_link_check_state+0x2a>
  else if(!netif_is_link_up(netif) && (PHYLinkState > LAN8742_STATUS_LINK_DOWN))
 80034ce:	f013 0f04 	tst.w	r3, #4
 80034d2:	d1f0      	bne.n	80034b6 <ethernet_link_check_state+0x2a>
 80034d4:	2801      	cmp	r0, #1
 80034d6:	ddee      	ble.n	80034b6 <ethernet_link_check_state+0x2a>
    switch (PHYLinkState)
 80034d8:	1e83      	subs	r3, r0, #2
 80034da:	2b03      	cmp	r3, #3
 80034dc:	d8eb      	bhi.n	80034b6 <ethernet_link_check_state+0x2a>
 80034de:	e8df f003 	tbb	[pc, r3]
 80034e2:	021d      	.short	0x021d
 80034e4:	1a22      	.short	0x1a22
 80034e6:	2500      	movs	r5, #0
 80034e8:	f44f 4780 	mov.w	r7, #16384	; 0x4000
      HAL_ETH_GetMACConfig(&heth, &MACConf);
 80034ec:	4e11      	ldr	r6, [pc, #68]	; (8003534 <ethernet_link_check_state+0xa8>)
 80034ee:	a901      	add	r1, sp, #4
 80034f0:	4630      	mov	r0, r6
 80034f2:	f7fe fb58 	bl	8001ba6 <HAL_ETH_GetMACConfig>
      MACConf.DuplexMode = duplex;
 80034f6:	9507      	str	r5, [sp, #28]
      MACConf.Speed = speed;
 80034f8:	9706      	str	r7, [sp, #24]
      HAL_ETH_SetMACConfig(&heth, &MACConf);
 80034fa:	a901      	add	r1, sp, #4
 80034fc:	4630      	mov	r0, r6
 80034fe:	f7fe fbc6 	bl	8001c8e <HAL_ETH_SetMACConfig>
      HAL_ETH_Start(&heth);
 8003502:	4630      	mov	r0, r6
 8003504:	f7fe f98e 	bl	8001824 <HAL_ETH_Start>
      netif_set_up(netif);
 8003508:	4620      	mov	r0, r4
 800350a:	f001 fcd9 	bl	8004ec0 <netif_set_up>
      netif_set_link_up(netif);
 800350e:	4620      	mov	r0, r4
 8003510:	f001 fd14 	bl	8004f3c <netif_set_link_up>
 8003514:	e7cf      	b.n	80034b6 <ethernet_link_check_state+0x2a>
      duplex = ETH_HALFDUPLEX_MODE;
 8003516:	2500      	movs	r5, #0
      speed = ETH_SPEED_10M;
 8003518:	462f      	mov	r7, r5
      break;
 800351a:	e7e7      	b.n	80034ec <ethernet_link_check_state+0x60>
      duplex = ETH_FULLDUPLEX_MODE;
 800351c:	f44f 6500 	mov.w	r5, #2048	; 0x800
      speed = ETH_SPEED_100M;
 8003520:	f44f 4780 	mov.w	r7, #16384	; 0x4000
 8003524:	e7e2      	b.n	80034ec <ethernet_link_check_state+0x60>
      duplex = ETH_FULLDUPLEX_MODE;
 8003526:	f44f 6500 	mov.w	r5, #2048	; 0x800
      speed = ETH_SPEED_10M;
 800352a:	2700      	movs	r7, #0
 800352c:	e7de      	b.n	80034ec <ethernet_link_check_state+0x60>
 800352e:	bf00      	nop
 8003530:	20000840 	.word	0x20000840
 8003534:	2000089c 	.word	0x2000089c

08003538 <ethernetif_init>:
{
 8003538:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800353c:	b082      	sub	sp, #8
  LWIP_ASSERT("netif != NULL", (netif != NULL));
 800353e:	4604      	mov	r4, r0
 8003540:	2800      	cmp	r0, #0
 8003542:	d06c      	beq.n	800361e <ethernetif_init+0xe6>
  netif->name[0] = IFNAME0;
 8003544:	2373      	movs	r3, #115	; 0x73
 8003546:	f884 302e 	strb.w	r3, [r4, #46]	; 0x2e
  netif->name[1] = IFNAME1;
 800354a:	2374      	movs	r3, #116	; 0x74
 800354c:	f884 302f 	strb.w	r3, [r4, #47]	; 0x2f
  netif->output = etharp_output;
 8003550:	4b38      	ldr	r3, [pc, #224]	; (8003634 <ethernetif_init+0xfc>)
 8003552:	6163      	str	r3, [r4, #20]
  netif->linkoutput = low_level_output;
 8003554:	4b38      	ldr	r3, [pc, #224]	; (8003638 <ethernetif_init+0x100>)
 8003556:	61a3      	str	r3, [r4, #24]
  heth.Instance = ETH;
 8003558:	4d38      	ldr	r5, [pc, #224]	; (800363c <ethernetif_init+0x104>)
 800355a:	4b39      	ldr	r3, [pc, #228]	; (8003640 <ethernetif_init+0x108>)
 800355c:	602b      	str	r3, [r5, #0]
  MACAddr[0] = 0x00;
 800355e:	2600      	movs	r6, #0
 8003560:	f88d 6000 	strb.w	r6, [sp]
  MACAddr[1] = 0x80;
 8003564:	2380      	movs	r3, #128	; 0x80
 8003566:	f88d 3001 	strb.w	r3, [sp, #1]
  MACAddr[2] = 0xE1;
 800356a:	23e1      	movs	r3, #225	; 0xe1
 800356c:	f88d 3002 	strb.w	r3, [sp, #2]
  MACAddr[3] = 0x00;
 8003570:	f88d 6003 	strb.w	r6, [sp, #3]
  MACAddr[4] = 0x00;
 8003574:	f88d 6004 	strb.w	r6, [sp, #4]
  MACAddr[5] = 0x00;
 8003578:	f88d 6005 	strb.w	r6, [sp, #5]
  heth.Init.MACAddr = &MACAddr[0];
 800357c:	f8c5 d004 	str.w	sp, [r5, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 8003580:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 8003584:	60ab      	str	r3, [r5, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 8003586:	4b2f      	ldr	r3, [pc, #188]	; (8003644 <ethernetif_init+0x10c>)
 8003588:	60eb      	str	r3, [r5, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 800358a:	4b2f      	ldr	r3, [pc, #188]	; (8003648 <ethernetif_init+0x110>)
 800358c:	612b      	str	r3, [r5, #16]
  heth.Init.RxBuffLen = 1536;
 800358e:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8003592:	616b      	str	r3, [r5, #20]
  hal_eth_init_status = HAL_ETH_Init(&heth);
 8003594:	4628      	mov	r0, r5
 8003596:	f7fe f831 	bl	80015fc <HAL_ETH_Init>
 800359a:	4607      	mov	r7, r0
  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 800359c:	f8df 80c4 	ldr.w	r8, [pc, #196]	; 8003664 <ethernetif_init+0x12c>
 80035a0:	2234      	movs	r2, #52	; 0x34
 80035a2:	4631      	mov	r1, r6
 80035a4:	f108 0004 	add.w	r0, r8, #4
 80035a8:	f007 ff3e 	bl	800b428 <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 80035ac:	2321      	movs	r3, #33	; 0x21
 80035ae:	f8c8 3000 	str.w	r3, [r8]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 80035b2:	f44f 0340 	mov.w	r3, #12582912	; 0xc00000
 80035b6:	f8c8 3014 	str.w	r3, [r8, #20]
  LWIP_MEMPOOL_INIT(RX_POOL);
 80035ba:	4824      	ldr	r0, [pc, #144]	; (800364c <ethernetif_init+0x114>)
 80035bc:	f001 facc 	bl	8004b58 <memp_init_pool>
  netif->hwaddr_len = ETH_HWADDR_LEN;
 80035c0:	2306      	movs	r3, #6
 80035c2:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
  netif->hwaddr[0] =  heth.Init.MACAddr[0];
 80035c6:	686b      	ldr	r3, [r5, #4]
 80035c8:	781a      	ldrb	r2, [r3, #0]
 80035ca:	f884 2026 	strb.w	r2, [r4, #38]	; 0x26
  netif->hwaddr[1] =  heth.Init.MACAddr[1];
 80035ce:	785a      	ldrb	r2, [r3, #1]
 80035d0:	f884 2027 	strb.w	r2, [r4, #39]	; 0x27
  netif->hwaddr[2] =  heth.Init.MACAddr[2];
 80035d4:	789a      	ldrb	r2, [r3, #2]
 80035d6:	f884 2028 	strb.w	r2, [r4, #40]	; 0x28
  netif->hwaddr[3] =  heth.Init.MACAddr[3];
 80035da:	78da      	ldrb	r2, [r3, #3]
 80035dc:	f884 2029 	strb.w	r2, [r4, #41]	; 0x29
  netif->hwaddr[4] =  heth.Init.MACAddr[4];
 80035e0:	791a      	ldrb	r2, [r3, #4]
 80035e2:	f884 202a 	strb.w	r2, [r4, #42]	; 0x2a
  netif->hwaddr[5] =  heth.Init.MACAddr[5];
 80035e6:	795b      	ldrb	r3, [r3, #5]
 80035e8:	f884 302b 	strb.w	r3, [r4, #43]	; 0x2b
  netif->mtu = ETH_MAX_PAYLOAD;
 80035ec:	f240 53dc 	movw	r3, #1500	; 0x5dc
 80035f0:	84a3      	strh	r3, [r4, #36]	; 0x24
    netif->flags |= NETIF_FLAG_BROADCAST | NETIF_FLAG_ETHARP;
 80035f2:	f894 302d 	ldrb.w	r3, [r4, #45]	; 0x2d
 80035f6:	f043 030a 	orr.w	r3, r3, #10
 80035fa:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
  LAN8742_RegisterBusIO(&LAN8742, &LAN8742_IOCtx);
 80035fe:	4d14      	ldr	r5, [pc, #80]	; (8003650 <ethernetif_init+0x118>)
 8003600:	4914      	ldr	r1, [pc, #80]	; (8003654 <ethernetif_init+0x11c>)
 8003602:	4628      	mov	r0, r5
 8003604:	f7fd fc73 	bl	8000eee <LAN8742_RegisterBusIO>
  LAN8742_Init(&LAN8742);
 8003608:	4628      	mov	r0, r5
 800360a:	f7fd fc8f 	bl	8000f2c <LAN8742_Init>
  if (hal_eth_init_status == HAL_OK)
 800360e:	b977      	cbnz	r7, 800362e <ethernetif_init+0xf6>
  ethernet_link_check_state(netif);
 8003610:	4620      	mov	r0, r4
 8003612:	f7ff ff3b 	bl	800348c <ethernet_link_check_state>
}
 8003616:	2000      	movs	r0, #0
 8003618:	b002      	add	sp, #8
 800361a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  LWIP_ASSERT("netif != NULL", (netif != NULL));
 800361e:	4b0e      	ldr	r3, [pc, #56]	; (8003658 <ethernetif_init+0x120>)
 8003620:	f240 126b 	movw	r2, #363	; 0x16b
 8003624:	490d      	ldr	r1, [pc, #52]	; (800365c <ethernetif_init+0x124>)
 8003626:	480e      	ldr	r0, [pc, #56]	; (8003660 <ethernetif_init+0x128>)
 8003628:	f007 ff06 	bl	800b438 <iprintf>
 800362c:	e78a      	b.n	8003544 <ethernetif_init+0xc>
    Error_Handler();
 800362e:	f7fd fad3 	bl	8000bd8 <Error_Handler>
 8003632:	e7f0      	b.n	8003616 <ethernetif_init+0xde>
 8003634:	0800a26d 	.word	0x0800a26d
 8003638:	08003225 	.word	0x08003225
 800363c:	2000089c 	.word	0x2000089c
 8003640:	40028000 	.word	0x40028000
 8003644:	200007a0 	.word	0x200007a0
 8003648:	20000700 	.word	0x20000700
 800364c:	0800cb4c 	.word	0x0800cb4c
 8003650:	20000840 	.word	0x20000840
 8003654:	2000001c 	.word	0x2000001c
 8003658:	0800caf8 	.word	0x0800caf8
 800365c:	0800cb14 	.word	0x0800cb14
 8003660:	0800cb24 	.word	0x0800cb24
 8003664:	20000864 	.word	0x20000864

08003668 <HAL_ETH_RxAllocateCallback>:

void HAL_ETH_RxAllocateCallback(uint8_t **buff)
{
 8003668:	b510      	push	{r4, lr}
 800366a:	b082      	sub	sp, #8
 800366c:	4604      	mov	r4, r0
/* USER CODE BEGIN HAL ETH RxAllocateCallback */
  struct pbuf_custom *p = LWIP_MEMPOOL_ALLOC(RX_POOL);
 800366e:	480e      	ldr	r0, [pc, #56]	; (80036a8 <HAL_ETH_RxAllocateCallback+0x40>)
 8003670:	f001 fa96 	bl	8004ba0 <memp_malloc_pool>
  if (p)
 8003674:	b188      	cbz	r0, 800369a <HAL_ETH_RxAllocateCallback+0x32>
 8003676:	4603      	mov	r3, r0
  {
    /* Get the buff from the struct pbuf address. */
    *buff = (uint8_t *)p + offsetof(RxBuff_t, buff);
 8003678:	f100 0220 	add.w	r2, r0, #32
 800367c:	6022      	str	r2, [r4, #0]
    p->custom_free_function = pbuf_free_custom;
 800367e:	4a0b      	ldr	r2, [pc, #44]	; (80036ac <HAL_ETH_RxAllocateCallback+0x44>)
 8003680:	6102      	str	r2, [r0, #16]
    /* Initialize the struct pbuf.
    * This must be performed whenever a buffer's allocated because it may be
    * changed by lwIP or the app, e.g., pbuf_free decrements ref. */
    pbuf_alloced_custom(PBUF_RAW, 0, PBUF_REF, p, *buff, ETH_RX_BUFFER_SIZE);
 8003682:	f44f 62c0 	mov.w	r2, #1536	; 0x600
 8003686:	9201      	str	r2, [sp, #4]
 8003688:	6822      	ldr	r2, [r4, #0]
 800368a:	9200      	str	r2, [sp, #0]
 800368c:	2241      	movs	r2, #65	; 0x41
 800368e:	2100      	movs	r1, #0
 8003690:	4608      	mov	r0, r1
 8003692:	f001 fd27 	bl	80050e4 <pbuf_alloced_custom>
  {
    RxAllocStatus = RX_ALLOC_ERROR;
    *buff = NULL;
  }
/* USER CODE END HAL ETH RxAllocateCallback */
}
 8003696:	b002      	add	sp, #8
 8003698:	bd10      	pop	{r4, pc}
    RxAllocStatus = RX_ALLOC_ERROR;
 800369a:	4b05      	ldr	r3, [pc, #20]	; (80036b0 <HAL_ETH_RxAllocateCallback+0x48>)
 800369c:	2201      	movs	r2, #1
 800369e:	701a      	strb	r2, [r3, #0]
    *buff = NULL;
 80036a0:	2300      	movs	r3, #0
 80036a2:	6023      	str	r3, [r4, #0]
}
 80036a4:	e7f7      	b.n	8003696 <HAL_ETH_RxAllocateCallback+0x2e>
 80036a6:	bf00      	nop
 80036a8:	0800cb4c 	.word	0x0800cb4c
 80036ac:	080032ad 	.word	0x080032ad
 80036b0:	20000860 	.word	0x20000860

080036b4 <HAL_ETH_RxLinkCallback>:

void HAL_ETH_RxLinkCallback(void **pStart, void **pEnd, uint8_t *buff, uint16_t Length)
{
 80036b4:	b430      	push	{r4, r5}
  struct pbuf **ppStart = (struct pbuf **)pStart;
  struct pbuf **ppEnd = (struct pbuf **)pEnd;
  struct pbuf *p = NULL;

  /* Get the struct pbuf from the buff address. */
  p = (struct pbuf *)(buff - offsetof(RxBuff_t, buff));
 80036b6:	f1a2 0420 	sub.w	r4, r2, #32
  p->next = NULL;
 80036ba:	2500      	movs	r5, #0
 80036bc:	f842 5c20 	str.w	r5, [r2, #-32]
  p->tot_len = 0;
 80036c0:	f822 5c18 	strh.w	r5, [r2, #-24]
  p->len = Length;
 80036c4:	f822 3c16 	strh.w	r3, [r2, #-22]

  /* Chain the buffer. */
  if (!*ppStart)
 80036c8:	6802      	ldr	r2, [r0, #0]
 80036ca:	b162      	cbz	r2, 80036e6 <HAL_ETH_RxLinkCallback+0x32>
    *ppStart = p;
  }
  else
  {
    /* Chain the buffer to the end of the packet. */
    (*ppEnd)->next = p;
 80036cc:	680a      	ldr	r2, [r1, #0]
 80036ce:	6014      	str	r4, [r2, #0]
  }
  *ppEnd  = p;
 80036d0:	600c      	str	r4, [r1, #0]

  /* Update the total length of all the buffers of the chain. Each pbuf in the chain should have its tot_len
   * set to its own length, plus the length of all the following pbufs in the chain. */
  for (p = *ppStart; p != NULL; p = p->next)
 80036d2:	6802      	ldr	r2, [r0, #0]
 80036d4:	b12a      	cbz	r2, 80036e2 <HAL_ETH_RxLinkCallback+0x2e>
  {
    p->tot_len += Length;
 80036d6:	8911      	ldrh	r1, [r2, #8]
 80036d8:	4419      	add	r1, r3
 80036da:	8111      	strh	r1, [r2, #8]
  for (p = *ppStart; p != NULL; p = p->next)
 80036dc:	6812      	ldr	r2, [r2, #0]
 80036de:	2a00      	cmp	r2, #0
 80036e0:	d1f9      	bne.n	80036d6 <HAL_ETH_RxLinkCallback+0x22>
  }

/* USER CODE END HAL ETH RxLinkCallback */
}
 80036e2:	bc30      	pop	{r4, r5}
 80036e4:	4770      	bx	lr
    *ppStart = p;
 80036e6:	6004      	str	r4, [r0, #0]
 80036e8:	e7f2      	b.n	80036d0 <HAL_ETH_RxLinkCallback+0x1c>
	...

080036ec <fs_open>:
err_t
fs_open(struct fs_file *file, const char *name)
{
  const struct fsdata_file *f;

  if ((file == NULL) || (name == NULL)) {
 80036ec:	b1c0      	cbz	r0, 8003720 <fs_open+0x34>
{
 80036ee:	b570      	push	{r4, r5, r6, lr}
 80036f0:	460d      	mov	r5, r1
 80036f2:	4606      	mov	r6, r0
  if ((file == NULL) || (name == NULL)) {
 80036f4:	b1b9      	cbz	r1, 8003726 <fs_open+0x3a>
    return ERR_OK;
  }
  file->is_custom_file = 0;
#endif /* LWIP_HTTPD_CUSTOM_FILES */

  for (f = FS_ROOT; f != NULL; f = f->next) {
 80036f6:	4c0d      	ldr	r4, [pc, #52]	; (800372c <fs_open+0x40>)
    if (!strcmp(name, (const char *)f->name)) {
 80036f8:	6861      	ldr	r1, [r4, #4]
 80036fa:	4628      	mov	r0, r5
 80036fc:	f7fc fd78 	bl	80001f0 <strcmp>
 8003700:	b128      	cbz	r0, 800370e <fs_open+0x22>
  for (f = FS_ROOT; f != NULL; f = f->next) {
 8003702:	6824      	ldr	r4, [r4, #0]
 8003704:	2c00      	cmp	r4, #0
 8003706:	d1f7      	bne.n	80036f8 <fs_open+0xc>
#endif /* #if LWIP_HTTPD_FILE_STATE */
      return ERR_OK;
    }
  }
  /* file not found */
  return ERR_VAL;
 8003708:	f06f 0005 	mvn.w	r0, #5
 800370c:	e007      	b.n	800371e <fs_open+0x32>
      file->data = (const char *)f->data;
 800370e:	68a3      	ldr	r3, [r4, #8]
 8003710:	6033      	str	r3, [r6, #0]
      file->len = f->len;
 8003712:	68e3      	ldr	r3, [r4, #12]
 8003714:	6073      	str	r3, [r6, #4]
      file->index = f->len;
 8003716:	60b3      	str	r3, [r6, #8]
      file->pextension = NULL;
 8003718:	60f0      	str	r0, [r6, #12]
      file->flags = f->flags;
 800371a:	7c23      	ldrb	r3, [r4, #16]
 800371c:	7433      	strb	r3, [r6, #16]
}
 800371e:	bd70      	pop	{r4, r5, r6, pc}
    return ERR_ARG;
 8003720:	f06f 000f 	mvn.w	r0, #15
}
 8003724:	4770      	bx	lr
    return ERR_ARG;
 8003726:	f06f 000f 	mvn.w	r0, #15
 800372a:	e7f8      	b.n	800371e <fs_open+0x32>
 800372c:	08010374 	.word	0x08010374

08003730 <fs_close>:
#endif /* LWIP_HTTPD_CUSTOM_FILES */
#if LWIP_HTTPD_FILE_STATE
  fs_state_free(file, file->state);
#endif /* #if LWIP_HTTPD_FILE_STATE */
  LWIP_UNUSED_ARG(file);
}
 8003730:	4770      	bx	lr

08003732 <fs_bytes_left>:
#endif /* LWIP_HTTPD_FS_ASYNC_READ */
/*-----------------------------------------------------------------------------------*/
int
fs_bytes_left(struct fs_file *file)
{
  return file->len - file->index;
 8003732:	6842      	ldr	r2, [r0, #4]
 8003734:	6880      	ldr	r0, [r0, #8]
}
 8003736:	1a10      	subs	r0, r2, r0
 8003738:	4770      	bx	lr
	...

0800373c <http_write>:
 * @param apiflags directly passed to tcp_write
 * @return the return value of tcp_write
 */
static err_t
http_write(struct altcp_pcb *pcb, const void *ptr, u16_t *length, u8_t apiflags)
{
 800373c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003740:	4605      	mov	r5, r0
 8003742:	460e      	mov	r6, r1
 8003744:	461f      	mov	r7, r3
  u16_t len, max_len;
  err_t err;
  LWIP_ASSERT("length != NULL", length != NULL);
 8003746:	4690      	mov	r8, r2
 8003748:	b182      	cbz	r2, 800376c <http_write+0x30>
  len = *length;
 800374a:	f8b8 3000 	ldrh.w	r3, [r8]
  if (len == 0) {
 800374e:	b3a3      	cbz	r3, 80037ba <http_write+0x7e>
  if (max_len < len) {
    len = max_len;
  }
#ifdef HTTPD_MAX_WRITE_LEN
  /* Additional limitation: e.g. don't enqueue more than 2*mss at once */
  max_len = HTTPD_MAX_WRITE_LEN(pcb);
 8003750:	8e6c      	ldrh	r4, [r5, #50]	; 0x32
 8003752:	0064      	lsls	r4, r4, #1
 8003754:	b2a4      	uxth	r4, r4
 8003756:	f8b5 2064 	ldrh.w	r2, [r5, #100]	; 0x64
 800375a:	4294      	cmp	r4, r2
 800375c:	bf28      	it	cs
 800375e:	4614      	movcs	r4, r2
 8003760:	429c      	cmp	r4, r3
 8003762:	bf28      	it	cs
 8003764:	461c      	movcs	r4, r3
 8003766:	f04f 0901 	mov.w	r9, #1
 800376a:	e011      	b.n	8003790 <http_write+0x54>
  LWIP_ASSERT("length != NULL", length != NULL);
 800376c:	4b14      	ldr	r3, [pc, #80]	; (80037c0 <http_write+0x84>)
 800376e:	f240 2219 	movw	r2, #537	; 0x219
 8003772:	4914      	ldr	r1, [pc, #80]	; (80037c4 <http_write+0x88>)
 8003774:	4814      	ldr	r0, [pc, #80]	; (80037c8 <http_write+0x8c>)
 8003776:	f007 fe5f 	bl	800b438 <iprintf>
 800377a:	e7e6      	b.n	800374a <http_write+0xe>
#endif /* HTTPD_MAX_WRITE_LEN */
  do {
    LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("Trying to send %d bytes\n", len));
    err = altcp_write(pcb, ptr, len, apiflags);
    if (err == ERR_MEM) {
      if ((altcp_sndbuf(pcb) == 0) ||
 800377c:	f8b5 3064 	ldrh.w	r3, [r5, #100]	; 0x64
 8003780:	b19b      	cbz	r3, 80037aa <http_write+0x6e>
 8003782:	f8b5 3066 	ldrh.w	r3, [r5, #102]	; 0x66
 8003786:	2b08      	cmp	r3, #8
 8003788:	d811      	bhi.n	80037ae <http_write+0x72>
          (altcp_sndqueuelen(pcb) >= TCP_SND_QUEUELEN)) {
        /* no need to try smaller sizes */
        len = 1;
      } else {
        len /= 2;
 800378a:	0864      	lsrs	r4, r4, #1
      }
      LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE,
                  ("Send failed, trying less (%d bytes)\n", len));
    }
  } while ((err == ERR_MEM) && (len > 1));
 800378c:	2c01      	cmp	r4, #1
 800378e:	d910      	bls.n	80037b2 <http_write+0x76>
    err = altcp_write(pcb, ptr, len, apiflags);
 8003790:	463b      	mov	r3, r7
 8003792:	4622      	mov	r2, r4
 8003794:	4631      	mov	r1, r6
 8003796:	4628      	mov	r0, r5
 8003798:	f004 ff1c 	bl	80085d4 <tcp_write>
    if (err == ERR_MEM) {
 800379c:	f1b0 3fff 	cmp.w	r0, #4294967295
 80037a0:	d0ec      	beq.n	800377c <http_write+0x40>

  if (err == ERR_OK) {
 80037a2:	b930      	cbnz	r0, 80037b2 <http_write+0x76>
    LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("Sent %d bytes\n", len));
    *length = len;
 80037a4:	f8a8 4000 	strh.w	r4, [r8]
 80037a8:	e008      	b.n	80037bc <http_write+0x80>
 80037aa:	464c      	mov	r4, r9
 80037ac:	e7ee      	b.n	800378c <http_write+0x50>
 80037ae:	464c      	mov	r4, r9
 80037b0:	e7ec      	b.n	800378c <http_write+0x50>
  } else {
    LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("Send failed with err %d (\"%s\")\n", err, lwip_strerr(err)));
    *length = 0;
 80037b2:	2300      	movs	r3, #0
 80037b4:	f8a8 3000 	strh.w	r3, [r8]
 80037b8:	e000      	b.n	80037bc <http_write+0x80>
    return ERR_OK;
 80037ba:	2000      	movs	r0, #0
     request */
  altcp_nagle_enable(pcb);
#endif

  return err;
}
 80037bc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80037c0:	08010388 	.word	0x08010388
 80037c4:	080103c0 	.word	0x080103c0
 80037c8:	0800cb24 	.word	0x0800cb24

080037cc <http_state_eof>:
{
 80037cc:	b510      	push	{r4, lr}
 80037ce:	4604      	mov	r4, r0
  if (hs->handle) {
 80037d0:	6940      	ldr	r0, [r0, #20]
 80037d2:	b118      	cbz	r0, 80037dc <http_state_eof+0x10>
    fs_close(hs->handle);
 80037d4:	f7ff ffac 	bl	8003730 <fs_close>
    hs->handle = NULL;
 80037d8:	2300      	movs	r3, #0
 80037da:	6163      	str	r3, [r4, #20]
  if (hs->ssi) {
 80037dc:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 80037de:	b118      	cbz	r0, 80037e8 <http_state_eof+0x1c>
    HTTP_FREE_SSI_STATE(ssi);
 80037e0:	f000 ff56 	bl	8004690 <mem_free>
    hs->ssi = NULL;
 80037e4:	2300      	movs	r3, #0
 80037e6:	62e3      	str	r3, [r4, #44]	; 0x2c
  if (hs->req) {
 80037e8:	6a20      	ldr	r0, [r4, #32]
 80037ea:	b118      	cbz	r0, 80037f4 <http_state_eof+0x28>
    pbuf_free(hs->req);
 80037ec:	f001 fcdc 	bl	80051a8 <pbuf_free>
    hs->req = NULL;
 80037f0:	2300      	movs	r3, #0
 80037f2:	6223      	str	r3, [r4, #32]
}
 80037f4:	bd10      	pop	{r4, pc}
	...

080037f8 <http_get_404_file>:
 * @param uri pointer that receives the actual file name URI
 * @return file struct for the error page or NULL no matching file was found
 */
static struct fs_file *
http_get_404_file(struct http_state *hs, const char **uri)
{
 80037f8:	b570      	push	{r4, r5, r6, lr}
 80037fa:	4606      	mov	r6, r0
 80037fc:	460c      	mov	r4, r1
  err_t err;

  *uri = "/404.html";
 80037fe:	490c      	ldr	r1, [pc, #48]	; (8003830 <http_get_404_file+0x38>)
 8003800:	6021      	str	r1, [r4, #0]
  err = fs_open(&hs->file_handle, *uri);
 8003802:	4605      	mov	r5, r0
 8003804:	f7ff ff72 	bl	80036ec <fs_open>
  if (err != ERR_OK) {
 8003808:	b908      	cbnz	r0, 800380e <http_get_404_file+0x16>
      }
    }
  }

  return &hs->file_handle;
}
 800380a:	4628      	mov	r0, r5
 800380c:	bd70      	pop	{r4, r5, r6, pc}
    *uri = "/404.htm";
 800380e:	4909      	ldr	r1, [pc, #36]	; (8003834 <http_get_404_file+0x3c>)
 8003810:	6021      	str	r1, [r4, #0]
    err = fs_open(&hs->file_handle, *uri);
 8003812:	4630      	mov	r0, r6
 8003814:	f7ff ff6a 	bl	80036ec <fs_open>
    if (err != ERR_OK) {
 8003818:	2800      	cmp	r0, #0
 800381a:	d0f6      	beq.n	800380a <http_get_404_file+0x12>
      *uri = "/404.shtml";
 800381c:	4906      	ldr	r1, [pc, #24]	; (8003838 <http_get_404_file+0x40>)
 800381e:	6021      	str	r1, [r4, #0]
      err = fs_open(&hs->file_handle, *uri);
 8003820:	4630      	mov	r0, r6
 8003822:	f7ff ff63 	bl	80036ec <fs_open>
      if (err != ERR_OK) {
 8003826:	2800      	cmp	r0, #0
 8003828:	d0ef      	beq.n	800380a <http_get_404_file+0x12>
        *uri = NULL;
 800382a:	2500      	movs	r5, #0
 800382c:	6025      	str	r5, [r4, #0]
        return NULL;
 800382e:	e7ec      	b.n	800380a <http_get_404_file+0x12>
 8003830:	080103d0 	.word	0x080103d0
 8003834:	080103dc 	.word	0x080103dc
 8003838:	080103e8 	.word	0x080103e8

0800383c <http_accept>:
  struct http_state *hs;
  LWIP_UNUSED_ARG(err);
  LWIP_UNUSED_ARG(arg);
  LWIP_DEBUGF(HTTPD_DEBUG, ("http_accept %p / %p\n", (void *)pcb, arg));

  if ((err != ERR_OK) || (pcb == NULL)) {
 800383c:	bb42      	cbnz	r2, 8003890 <http_accept+0x54>
{
 800383e:	b570      	push	{r4, r5, r6, lr}
 8003840:	460c      	mov	r4, r1
 8003842:	4615      	mov	r5, r2
  if ((err != ERR_OK) || (pcb == NULL)) {
 8003844:	b339      	cbz	r1, 8003896 <http_accept+0x5a>
    return ERR_VAL;
  }

  /* Set priority */
  altcp_setprio(pcb, HTTPD_TCP_PRIO);
 8003846:	2101      	movs	r1, #1
 8003848:	4620      	mov	r0, r4
 800384a:	f002 f963 	bl	8005b14 <tcp_setprio>
  struct http_state *ret = HTTP_ALLOC_HTTP_STATE();
 800384e:	20b0      	movs	r0, #176	; 0xb0
 8003850:	f001 f89a 	bl	8004988 <mem_malloc>
  if (ret != NULL) {
 8003854:	4606      	mov	r6, r0
 8003856:	b308      	cbz	r0, 800389c <http_accept+0x60>
  memset(hs, 0, sizeof(struct http_state));
 8003858:	22b0      	movs	r2, #176	; 0xb0
 800385a:	2100      	movs	r1, #0
 800385c:	f007 fde4 	bl	800b428 <memset>
  hs = http_state_alloc();
  if (hs == NULL) {
    LWIP_DEBUGF(HTTPD_DEBUG, ("http_accept: Out of memory, RST\n"));
    return ERR_MEM;
  }
  hs->pcb = pcb;
 8003860:	61f4      	str	r4, [r6, #28]

  /* Tell TCP that this is the structure we wish to be passed for our
     callbacks. */
  altcp_arg(pcb, hs);
 8003862:	4631      	mov	r1, r6
 8003864:	4620      	mov	r0, r4
 8003866:	f002 f98b 	bl	8005b80 <tcp_arg>

  /* Set up the various callback functions */
  altcp_recv(pcb, http_recv);
 800386a:	490e      	ldr	r1, [pc, #56]	; (80038a4 <http_accept+0x68>)
 800386c:	4620      	mov	r0, r4
 800386e:	f002 f98b 	bl	8005b88 <tcp_recv>
  altcp_err(pcb, http_err);
 8003872:	490d      	ldr	r1, [pc, #52]	; (80038a8 <http_accept+0x6c>)
 8003874:	4620      	mov	r0, r4
 8003876:	f002 f9bb 	bl	8005bf0 <tcp_err>
  altcp_poll(pcb, http_poll, HTTPD_POLL_INTERVAL);
 800387a:	2204      	movs	r2, #4
 800387c:	490b      	ldr	r1, [pc, #44]	; (80038ac <http_accept+0x70>)
 800387e:	4620      	mov	r0, r4
 8003880:	f002 f9d6 	bl	8005c30 <tcp_poll>
  altcp_sent(pcb, http_sent);
 8003884:	490a      	ldr	r1, [pc, #40]	; (80038b0 <http_accept+0x74>)
 8003886:	4620      	mov	r0, r4
 8003888:	f002 f998 	bl	8005bbc <tcp_sent>

  return ERR_OK;
 800388c:	4628      	mov	r0, r5
}
 800388e:	bd70      	pop	{r4, r5, r6, pc}
    return ERR_VAL;
 8003890:	f06f 0005 	mvn.w	r0, #5
}
 8003894:	4770      	bx	lr
    return ERR_VAL;
 8003896:	f06f 0005 	mvn.w	r0, #5
 800389a:	e7f8      	b.n	800388e <http_accept+0x52>
    return ERR_MEM;
 800389c:	f04f 30ff 	mov.w	r0, #4294967295
 80038a0:	e7f5      	b.n	800388e <http_accept+0x52>
 80038a2:	bf00      	nop
 80038a4:	08003ecd 	.word	0x08003ecd
 80038a8:	0800440d 	.word	0x0800440d
 80038ac:	08003e89 	.word	0x08003e89
 80038b0:	08003e6d 	.word	0x08003e6d

080038b4 <http_close_conn>:
{
 80038b4:	b538      	push	{r3, r4, r5, lr}
 80038b6:	4604      	mov	r4, r0
 80038b8:	460d      	mov	r5, r1
  altcp_arg(pcb, NULL);
 80038ba:	2100      	movs	r1, #0
 80038bc:	f002 f960 	bl	8005b80 <tcp_arg>
  altcp_recv(pcb, NULL);
 80038c0:	2100      	movs	r1, #0
 80038c2:	4620      	mov	r0, r4
 80038c4:	f002 f960 	bl	8005b88 <tcp_recv>
  altcp_err(pcb, NULL);
 80038c8:	2100      	movs	r1, #0
 80038ca:	4620      	mov	r0, r4
 80038cc:	f002 f990 	bl	8005bf0 <tcp_err>
  altcp_poll(pcb, NULL, 0);
 80038d0:	2200      	movs	r2, #0
 80038d2:	4611      	mov	r1, r2
 80038d4:	4620      	mov	r0, r4
 80038d6:	f002 f9ab 	bl	8005c30 <tcp_poll>
  altcp_sent(pcb, NULL);
 80038da:	2100      	movs	r1, #0
 80038dc:	4620      	mov	r0, r4
 80038de:	f002 f96d 	bl	8005bbc <tcp_sent>
  if (hs != NULL) {
 80038e2:	b12d      	cbz	r5, 80038f0 <http_close_conn+0x3c>
    http_state_eof(hs);
 80038e4:	4628      	mov	r0, r5
 80038e6:	f7ff ff71 	bl	80037cc <http_state_eof>
    HTTP_FREE_HTTP_STATE(hs);
 80038ea:	4628      	mov	r0, r5
 80038ec:	f000 fed0 	bl	8004690 <mem_free>
  err = altcp_close(pcb);
 80038f0:	4620      	mov	r0, r4
 80038f2:	f002 fd33 	bl	800635c <tcp_close>
  if (err != ERR_OK) {
 80038f6:	4605      	mov	r5, r0
 80038f8:	b908      	cbnz	r0, 80038fe <http_close_conn+0x4a>
}
 80038fa:	4628      	mov	r0, r5
 80038fc:	bd38      	pop	{r3, r4, r5, pc}
    altcp_poll(pcb, http_poll, HTTPD_POLL_INTERVAL);
 80038fe:	2204      	movs	r2, #4
 8003900:	4902      	ldr	r1, [pc, #8]	; (800390c <http_close_conn+0x58>)
 8003902:	4620      	mov	r0, r4
 8003904:	f002 f994 	bl	8005c30 <tcp_poll>
 8003908:	e7f7      	b.n	80038fa <http_close_conn+0x46>
 800390a:	bf00      	nop
 800390c:	08003e89 	.word	0x08003e89

08003910 <http_send>:
{
 8003910:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003914:	b087      	sub	sp, #28
  if (hs == NULL) {
 8003916:	2900      	cmp	r1, #0
 8003918:	f000 8255 	beq.w	8003dc6 <http_send+0x4b6>
 800391c:	4682      	mov	sl, r0
 800391e:	460d      	mov	r5, r1
  if (hs->left == 0) {
 8003920:	6a4b      	ldr	r3, [r1, #36]	; 0x24
 8003922:	b333      	cbz	r3, 8003972 <http_send+0x62>
  if (hs->ssi) {
 8003924:	6aec      	ldr	r4, [r5, #44]	; 0x2c
 8003926:	2c00      	cmp	r4, #0
 8003928:	f000 821c 	beq.w	8003d64 <http_send+0x454>
  len = altcp_sndbuf(pcb);
 800392c:	f8ba 3064 	ldrh.w	r3, [sl, #100]	; 0x64
 8003930:	f8ad 3016 	strh.w	r3, [sp, #22]
  if (ssi->parsed > hs->file) {
 8003934:	6823      	ldr	r3, [r4, #0]
 8003936:	69a9      	ldr	r1, [r5, #24]
 8003938:	428b      	cmp	r3, r1
 800393a:	d939      	bls.n	80039b0 <http_send+0xa0>
    len = (u16_t)LWIP_MIN(ssi->parsed - hs->file, 0xffff);
 800393c:	1a5b      	subs	r3, r3, r1
 800393e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003942:	4293      	cmp	r3, r2
 8003944:	bfa8      	it	ge
 8003946:	4613      	movge	r3, r2
 8003948:	f8ad 3016 	strh.w	r3, [sp, #22]
    err = http_write(pcb, hs->file, &len, HTTP_IS_DATA_VOLATILE(hs));
 800394c:	2300      	movs	r3, #0
 800394e:	f10d 0216 	add.w	r2, sp, #22
 8003952:	4650      	mov	r0, sl
 8003954:	f7ff fef2 	bl	800373c <http_write>
    if (err == ERR_OK) {
 8003958:	4606      	mov	r6, r0
 800395a:	bb18      	cbnz	r0, 80039a4 <http_send+0x94>
      hs->file += len;
 800395c:	f8bd 2016 	ldrh.w	r2, [sp, #22]
 8003960:	69ab      	ldr	r3, [r5, #24]
 8003962:	4413      	add	r3, r2
 8003964:	61ab      	str	r3, [r5, #24]
      hs->left -= len;
 8003966:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8003968:	1a9b      	subs	r3, r3, r2
 800396a:	626b      	str	r3, [r5, #36]	; 0x24
      data_to_send = 1;
 800396c:	f04f 0b01 	mov.w	fp, #1
 8003970:	e01a      	b.n	80039a8 <http_send+0x98>
  if (hs->handle == NULL) {
 8003972:	6948      	ldr	r0, [r1, #20]
 8003974:	b158      	cbz	r0, 800398e <http_send+0x7e>
  bytes_left = fs_bytes_left(hs->handle);
 8003976:	f7ff fedc 	bl	8003732 <fs_bytes_left>
  if (bytes_left <= 0) {
 800397a:	2800      	cmp	r0, #0
 800397c:	dd0b      	ble.n	8003996 <http_send+0x86>
  LWIP_ASSERT("SSI and DYNAMIC_HEADERS turned off but eof not reached", 0);
 800397e:	4b6a      	ldr	r3, [pc, #424]	; (8003b28 <http_send+0x218>)
 8003980:	f240 429d 	movw	r2, #1181	; 0x49d
 8003984:	4969      	ldr	r1, [pc, #420]	; (8003b2c <http_send+0x21c>)
 8003986:	486a      	ldr	r0, [pc, #424]	; (8003b30 <http_send+0x220>)
 8003988:	f007 fd56 	bl	800b438 <iprintf>
  return 1;
 800398c:	e7ca      	b.n	8003924 <http_send+0x14>
    http_close_conn(pcb, hs);
 800398e:	4650      	mov	r0, sl
 8003990:	f7ff ff90 	bl	80038b4 <http_close_conn>
}
 8003994:	e003      	b.n	800399e <http_send+0x8e>
    http_close_conn(pcb, hs);
 8003996:	4629      	mov	r1, r5
 8003998:	4650      	mov	r0, sl
 800399a:	f7ff ff8b 	bl	80038b4 <http_close_conn>
      return 0;
 800399e:	f04f 0b00 	mov.w	fp, #0
 80039a2:	e200      	b.n	8003da6 <http_send+0x496>
  u8_t data_to_send = 0;
 80039a4:	f04f 0b00 	mov.w	fp, #0
    if (altcp_sndbuf(pcb) == 0) {
 80039a8:	f8ba 3064 	ldrh.w	r3, [sl, #100]	; 0x64
 80039ac:	b91b      	cbnz	r3, 80039b6 <http_send+0xa6>
 80039ae:	e1f8      	b.n	8003da2 <http_send+0x492>
  u8_t data_to_send = 0;
 80039b0:	f04f 0b00 	mov.w	fp, #0
  err_t err = ERR_OK;
 80039b4:	465e      	mov	r6, fp
        if (*ssi->parsed == http_ssi_tag_desc[ssi->tag_type].lead_out[ssi->tag_index]) {
 80039b6:	f8df 9184 	ldr.w	r9, [pc, #388]	; 8003b3c <http_send+0x22c>
 80039ba:	e00a      	b.n	80039d2 <http_send+0xc2>
          if (*ssi->parsed == http_ssi_tag_desc[tag_type].lead_in[0]) {
 80039bc:	6822      	ldr	r2, [r4, #0]
 80039be:	7811      	ldrb	r1, [r2, #0]
 80039c0:	293c      	cmp	r1, #60	; 0x3c
 80039c2:	d026      	beq.n	8003a12 <http_send+0x102>
 80039c4:	292f      	cmp	r1, #47	; 0x2f
 80039c6:	d023      	beq.n	8003a10 <http_send+0x100>
        ssi->parse_left--;
 80039c8:	68a3      	ldr	r3, [r4, #8]
 80039ca:	3b01      	subs	r3, #1
 80039cc:	60a3      	str	r3, [r4, #8]
        ssi->parsed++;
 80039ce:	3201      	adds	r2, #1
 80039d0:	6022      	str	r2, [r4, #0]
  while (((ssi->tag_state == TAG_SENDING) || ssi->parse_left) && (err == ERR_OK)) {
 80039d2:	f894 30dc 	ldrb.w	r3, [r4, #220]	; 0xdc
    if (len == 0) {
 80039d6:	f8bd 2016 	ldrh.w	r2, [sp, #22]
  while (((ssi->tag_state == TAG_SENDING) || ssi->parse_left) && (err == ERR_OK)) {
 80039da:	2b04      	cmp	r3, #4
 80039dc:	d003      	beq.n	80039e6 <http_send+0xd6>
 80039de:	68a1      	ldr	r1, [r4, #8]
 80039e0:	2900      	cmp	r1, #0
 80039e2:	f000 81a1 	beq.w	8003d28 <http_send+0x418>
 80039e6:	2e00      	cmp	r6, #0
 80039e8:	f040 819c 	bne.w	8003d24 <http_send+0x414>
    if (len == 0) {
 80039ec:	2a00      	cmp	r2, #0
 80039ee:	f000 81d8 	beq.w	8003da2 <http_send+0x492>
    switch (ssi->tag_state) {
 80039f2:	2b04      	cmp	r3, #4
 80039f4:	d8f1      	bhi.n	80039da <http_send+0xca>
 80039f6:	a101      	add	r1, pc, #4	; (adr r1, 80039fc <http_send+0xec>)
 80039f8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80039fc:	080039bd 	.word	0x080039bd
 8003a00:	08003a1f 	.word	0x08003a1f
 8003a04:	08003a55 	.word	0x08003a55
 8003a08:	08003add 	.word	0x08003add
 8003a0c:	08003caf 	.word	0x08003caf
        for (tag_type = 0; tag_type < LWIP_ARRAYSIZE(http_ssi_tag_desc); tag_type++) {
 8003a10:	2301      	movs	r3, #1
            ssi->tag_type = tag_type;
 8003a12:	7423      	strb	r3, [r4, #16]
            ssi->tag_state = TAG_LEADIN;
 8003a14:	2301      	movs	r3, #1
 8003a16:	f884 30dc 	strb.w	r3, [r4, #220]	; 0xdc
            ssi->tag_index = 1;
 8003a1a:	81a3      	strh	r3, [r4, #12]
            break;
 8003a1c:	e7d4      	b.n	80039c8 <http_send+0xb8>
        if (http_ssi_tag_desc[ssi->tag_type].lead_in[ssi->tag_index] == 0) {
 8003a1e:	89a1      	ldrh	r1, [r4, #12]
 8003a20:	7c23      	ldrb	r3, [r4, #16]
 8003a22:	f859 3033 	ldr.w	r3, [r9, r3, lsl #3]
 8003a26:	5c5a      	ldrb	r2, [r3, r1]
 8003a28:	b92a      	cbnz	r2, 8003a36 <http_send+0x126>
          ssi->tag_index = 0;
 8003a2a:	2300      	movs	r3, #0
 8003a2c:	81a3      	strh	r3, [r4, #12]
          ssi->tag_state = TAG_FOUND;
 8003a2e:	2302      	movs	r3, #2
 8003a30:	f884 30dc 	strb.w	r3, [r4, #220]	; 0xdc
 8003a34:	e7cd      	b.n	80039d2 <http_send+0xc2>
          if (*ssi->parsed == http_ssi_tag_desc[ssi->tag_type].lead_in[ssi->tag_index]) {
 8003a36:	6823      	ldr	r3, [r4, #0]
 8003a38:	7818      	ldrb	r0, [r3, #0]
 8003a3a:	4290      	cmp	r0, r2
            ssi->tag_index++;
 8003a3c:	bf07      	ittee	eq
 8003a3e:	3101      	addeq	r1, #1
 8003a40:	81a1      	strheq	r1, [r4, #12]
            ssi->tag_state = TAG_NONE;
 8003a42:	2200      	movne	r2, #0
 8003a44:	f884 20dc 	strbne.w	r2, [r4, #220]	; 0xdc
          ssi->parse_left--;
 8003a48:	68a2      	ldr	r2, [r4, #8]
 8003a4a:	3a01      	subs	r2, #1
 8003a4c:	60a2      	str	r2, [r4, #8]
          ssi->parsed++;
 8003a4e:	3301      	adds	r3, #1
 8003a50:	6023      	str	r3, [r4, #0]
 8003a52:	e7be      	b.n	80039d2 <http_send+0xc2>
        if ((ssi->tag_index == 0) && ((*ssi->parsed == ' ') ||
 8003a54:	89a0      	ldrh	r0, [r4, #12]
 8003a56:	2800      	cmp	r0, #0
 8003a58:	f040 81c0 	bne.w	8003ddc <http_send+0x4cc>
 8003a5c:	6821      	ldr	r1, [r4, #0]
 8003a5e:	780b      	ldrb	r3, [r1, #0]
 8003a60:	f1a3 0209 	sub.w	r2, r3, #9
 8003a64:	b2d2      	uxtb	r2, r2
 8003a66:	2a17      	cmp	r2, #23
 8003a68:	f200 81b0 	bhi.w	8003dcc <http_send+0x4bc>
 8003a6c:	4f31      	ldr	r7, [pc, #196]	; (8003b34 <http_send+0x224>)
 8003a6e:	fa27 f202 	lsr.w	r2, r7, r2
 8003a72:	f012 0f01 	tst.w	r2, #1
 8003a76:	f000 81a9 	beq.w	8003dcc <http_send+0x4bc>
          ssi->parse_left--;
 8003a7a:	68a3      	ldr	r3, [r4, #8]
 8003a7c:	3b01      	subs	r3, #1
 8003a7e:	60a3      	str	r3, [r4, #8]
          ssi->parsed++;
 8003a80:	3101      	adds	r1, #1
 8003a82:	6021      	str	r1, [r4, #0]
          break;
 8003a84:	e7a5      	b.n	80039d2 <http_send+0xc2>
            ssi->tag_state = TAG_LEADOUT;
 8003a86:	2303      	movs	r3, #3
 8003a88:	f884 30dc 	strb.w	r3, [r4, #220]	; 0xdc
            LWIP_ASSERT("ssi->tag_index <= 0xff", ssi->tag_index <= 0xff);
 8003a8c:	28ff      	cmp	r0, #255	; 0xff
 8003a8e:	d811      	bhi.n	8003ab4 <http_send+0x1a4>
            ssi->tag_name_len = (u8_t)ssi->tag_index;
 8003a90:	89a3      	ldrh	r3, [r4, #12]
 8003a92:	7463      	strb	r3, [r4, #17]
            ssi->tag_name[ssi->tag_index] = '\0';
 8003a94:	4423      	add	r3, r4
 8003a96:	2200      	movs	r2, #0
 8003a98:	749a      	strb	r2, [r3, #18]
            if (*ssi->parsed == http_ssi_tag_desc[ssi->tag_type].lead_out[0]) {
 8003a9a:	6822      	ldr	r2, [r4, #0]
 8003a9c:	7c23      	ldrb	r3, [r4, #16]
 8003a9e:	eb09 03c3 	add.w	r3, r9, r3, lsl #3
 8003aa2:	685b      	ldr	r3, [r3, #4]
 8003aa4:	7812      	ldrb	r2, [r2, #0]
 8003aa6:	781b      	ldrb	r3, [r3, #0]
 8003aa8:	429a      	cmp	r2, r3
              ssi->tag_index = 1;
 8003aaa:	bf0c      	ite	eq
 8003aac:	2301      	moveq	r3, #1
              ssi->tag_index = 0;
 8003aae:	2300      	movne	r3, #0
 8003ab0:	81a3      	strh	r3, [r4, #12]
 8003ab2:	e1af      	b.n	8003e14 <http_send+0x504>
            LWIP_ASSERT("ssi->tag_index <= 0xff", ssi->tag_index <= 0xff);
 8003ab4:	4b1c      	ldr	r3, [pc, #112]	; (8003b28 <http_send+0x218>)
 8003ab6:	f240 523a 	movw	r2, #1338	; 0x53a
 8003aba:	491f      	ldr	r1, [pc, #124]	; (8003b38 <http_send+0x228>)
 8003abc:	481c      	ldr	r0, [pc, #112]	; (8003b30 <http_send+0x220>)
 8003abe:	f007 fcbb 	bl	800b438 <iprintf>
 8003ac2:	e7e5      	b.n	8003a90 <http_send+0x180>
          if (ssi->tag_index < LWIP_HTTPD_MAX_TAG_NAME_LEN) {
 8003ac4:	2807      	cmp	r0, #7
 8003ac6:	d805      	bhi.n	8003ad4 <http_send+0x1c4>
            ssi->tag_name[ssi->tag_index++] = *ssi->parsed;
 8003ac8:	1c43      	adds	r3, r0, #1
 8003aca:	81a3      	strh	r3, [r4, #12]
 8003acc:	780b      	ldrb	r3, [r1, #0]
 8003ace:	4420      	add	r0, r4
 8003ad0:	7483      	strb	r3, [r0, #18]
 8003ad2:	e19f      	b.n	8003e14 <http_send+0x504>
            ssi->tag_state = TAG_NONE;
 8003ad4:	2300      	movs	r3, #0
 8003ad6:	f884 30dc 	strb.w	r3, [r4, #220]	; 0xdc
 8003ada:	e19b      	b.n	8003e14 <http_send+0x504>
        if ((ssi->tag_index == 0) && ((*ssi->parsed == ' ') ||
 8003adc:	89a0      	ldrh	r0, [r4, #12]
 8003ade:	b988      	cbnz	r0, 8003b04 <http_send+0x1f4>
 8003ae0:	6821      	ldr	r1, [r4, #0]
 8003ae2:	780a      	ldrb	r2, [r1, #0]
 8003ae4:	3a09      	subs	r2, #9
 8003ae6:	b2d2      	uxtb	r2, r2
 8003ae8:	2a17      	cmp	r2, #23
 8003aea:	d80b      	bhi.n	8003b04 <http_send+0x1f4>
 8003aec:	4b11      	ldr	r3, [pc, #68]	; (8003b34 <http_send+0x224>)
 8003aee:	fa23 f202 	lsr.w	r2, r3, r2
 8003af2:	f012 0f01 	tst.w	r2, #1
 8003af6:	d005      	beq.n	8003b04 <http_send+0x1f4>
          ssi->parse_left--;
 8003af8:	68a3      	ldr	r3, [r4, #8]
 8003afa:	3b01      	subs	r3, #1
 8003afc:	60a3      	str	r3, [r4, #8]
          ssi->parsed++;
 8003afe:	3101      	adds	r1, #1
 8003b00:	6021      	str	r1, [r4, #0]
          break;
 8003b02:	e766      	b.n	80039d2 <http_send+0xc2>
        if (*ssi->parsed == http_ssi_tag_desc[ssi->tag_type].lead_out[ssi->tag_index]) {
 8003b04:	6823      	ldr	r3, [r4, #0]
 8003b06:	7c22      	ldrb	r2, [r4, #16]
 8003b08:	eb09 02c2 	add.w	r2, r9, r2, lsl #3
 8003b0c:	6852      	ldr	r2, [r2, #4]
 8003b0e:	781f      	ldrb	r7, [r3, #0]
 8003b10:	5c11      	ldrb	r1, [r2, r0]
 8003b12:	428f      	cmp	r7, r1
 8003b14:	d014      	beq.n	8003b40 <http_send+0x230>
          ssi->parse_left--;
 8003b16:	68a2      	ldr	r2, [r4, #8]
 8003b18:	3a01      	subs	r2, #1
 8003b1a:	60a2      	str	r2, [r4, #8]
          ssi->parsed++;
 8003b1c:	3301      	adds	r3, #1
 8003b1e:	6023      	str	r3, [r4, #0]
          ssi->tag_state = TAG_NONE;
 8003b20:	2300      	movs	r3, #0
 8003b22:	f884 30dc 	strb.w	r3, [r4, #220]	; 0xdc
 8003b26:	e754      	b.n	80039d2 <http_send+0xc2>
 8003b28:	08010388 	.word	0x08010388
 8003b2c:	080103f4 	.word	0x080103f4
 8003b30:	0800cb24 	.word	0x0800cb24
 8003b34:	00800013 	.word	0x00800013
 8003b38:	0801042c 	.word	0x0801042c
 8003b3c:	0801063c 	.word	0x0801063c
          ssi->parse_left--;
 8003b40:	68a1      	ldr	r1, [r4, #8]
 8003b42:	3901      	subs	r1, #1
 8003b44:	60a1      	str	r1, [r4, #8]
          ssi->parsed++;
 8003b46:	3301      	adds	r3, #1
 8003b48:	6023      	str	r3, [r4, #0]
          ssi->tag_index++;
 8003b4a:	1c43      	adds	r3, r0, #1
 8003b4c:	b29b      	uxth	r3, r3
 8003b4e:	81a3      	strh	r3, [r4, #12]
          if (http_ssi_tag_desc[ssi->tag_type].lead_out[ssi->tag_index] == 0) {
 8003b50:	5cd3      	ldrb	r3, [r2, r3]
 8003b52:	2b00      	cmp	r3, #0
 8003b54:	f47f af3d 	bne.w	80039d2 <http_send+0xc2>
  ssi = hs->ssi;
 8003b58:	f8d5 802c 	ldr.w	r8, [r5, #44]	; 0x2c
  LWIP_ASSERT("ssi != NULL", ssi != NULL);
 8003b5c:	f1b8 0f00 	cmp.w	r8, #0
 8003b60:	f000 8087 	beq.w	8003c72 <http_send+0x362>
  if (httpd_ssi_handler
 8003b64:	4baf      	ldr	r3, [pc, #700]	; (8003e24 <http_send+0x514>)
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	9300      	str	r3, [sp, #0]
 8003b6a:	b1eb      	cbz	r3, 8003ba8 <http_send+0x298>
      && httpd_tags && httpd_num_tags
 8003b6c:	4bae      	ldr	r3, [pc, #696]	; (8003e28 <http_send+0x518>)
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	b1d3      	cbz	r3, 8003ba8 <http_send+0x298>
 8003b72:	4aae      	ldr	r2, [pc, #696]	; (8003e2c <http_send+0x51c>)
 8003b74:	6812      	ldr	r2, [r2, #0]
    for (tag = 0; tag < httpd_num_tags; tag++) {
 8003b76:	2a00      	cmp	r2, #0
 8003b78:	dd16      	ble.n	8003ba8 <http_send+0x298>
 8003b7a:	3b04      	subs	r3, #4
 8003b7c:	2700      	movs	r7, #0
      if (strcmp(ssi->tag_name, httpd_tags[tag]) == 0)
 8003b7e:	f108 0112 	add.w	r1, r8, #18
 8003b82:	9401      	str	r4, [sp, #4]
 8003b84:	461c      	mov	r4, r3
 8003b86:	9602      	str	r6, [sp, #8]
 8003b88:	4616      	mov	r6, r2
 8003b8a:	9503      	str	r5, [sp, #12]
 8003b8c:	460d      	mov	r5, r1
 8003b8e:	f854 1f04 	ldr.w	r1, [r4, #4]!
 8003b92:	4628      	mov	r0, r5
 8003b94:	f7fc fb2c 	bl	80001f0 <strcmp>
 8003b98:	2800      	cmp	r0, #0
 8003b9a:	d072      	beq.n	8003c82 <http_send+0x372>
    for (tag = 0; tag < httpd_num_tags; tag++) {
 8003b9c:	3701      	adds	r7, #1
 8003b9e:	42be      	cmp	r6, r7
 8003ba0:	d1f5      	bne.n	8003b8e <http_send+0x27e>
 8003ba2:	9c01      	ldr	r4, [sp, #4]
 8003ba4:	9e02      	ldr	r6, [sp, #8]
 8003ba6:	9d03      	ldr	r5, [sp, #12]
  len = LWIP_MIN(sizeof(ssi->tag_name), LWIP_MIN(strlen(ssi->tag_name),
 8003ba8:	f108 0312 	add.w	r3, r8, #18
 8003bac:	9300      	str	r3, [sp, #0]
 8003bae:	4618      	mov	r0, r3
 8003bb0:	f7fc fb28 	bl	8000204 <strlen>
 8003bb4:	28a6      	cmp	r0, #166	; 0xa6
 8003bb6:	d870      	bhi.n	8003c9a <http_send+0x38a>
 8003bb8:	2809      	cmp	r0, #9
 8003bba:	bf28      	it	cs
 8003bbc:	2009      	movcs	r0, #9
 8003bbe:	4607      	mov	r7, r0
  MEMCPY(ssi->tag_insert, UNKNOWN_TAG1_TEXT, UNKNOWN_TAG1_LEN);
 8003bc0:	f8df c284 	ldr.w	ip, [pc, #644]	; 8003e48 <http_send+0x538>
 8003bc4:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8003bc8:	f8c8 001b 	str.w	r0, [r8, #27]
 8003bcc:	f8c8 101f 	str.w	r1, [r8, #31]
 8003bd0:	f8c8 2023 	str.w	r2, [r8, #35]	; 0x23
 8003bd4:	f8c8 3027 	str.w	r3, [r8, #39]	; 0x27
 8003bd8:	f8bc 3000 	ldrh.w	r3, [ip]
 8003bdc:	f8a8 302b 	strh.w	r3, [r8, #43]	; 0x2b
  MEMCPY(&ssi->tag_insert[UNKNOWN_TAG1_LEN], ssi->tag_name, len);
 8003be0:	463a      	mov	r2, r7
 8003be2:	9900      	ldr	r1, [sp, #0]
 8003be4:	f108 002d 	add.w	r0, r8, #45	; 0x2d
 8003be8:	f007 fbf6 	bl	800b3d8 <memcpy>
  MEMCPY(&ssi->tag_insert[UNKNOWN_TAG1_LEN + len], UNKNOWN_TAG2_TEXT, UNKNOWN_TAG2_LEN);
 8003bec:	f107 012d 	add.w	r1, r7, #45	; 0x2d
 8003bf0:	eb08 0201 	add.w	r2, r8, r1
 8003bf4:	4b8e      	ldr	r3, [pc, #568]	; (8003e30 <http_send+0x520>)
 8003bf6:	6818      	ldr	r0, [r3, #0]
 8003bf8:	f848 0001 	str.w	r0, [r8, r1]
 8003bfc:	8899      	ldrh	r1, [r3, #4]
 8003bfe:	799b      	ldrb	r3, [r3, #6]
 8003c00:	8091      	strh	r1, [r2, #4]
 8003c02:	7193      	strb	r3, [r2, #6]
  ssi->tag_insert[UNKNOWN_TAG1_LEN + len + UNKNOWN_TAG2_LEN] = 0;
 8003c04:	eb08 0207 	add.w	r2, r8, r7
 8003c08:	2300      	movs	r3, #0
 8003c0a:	f882 3034 	strb.w	r3, [r2, #52]	; 0x34
  len = strlen(ssi->tag_insert);
 8003c0e:	f108 001b 	add.w	r0, r8, #27
 8003c12:	f7fc faf7 	bl	8000204 <strlen>
 8003c16:	4607      	mov	r7, r0
  LWIP_ASSERT("len <= 0xffff", len <= 0xffff);
 8003c18:	f5b0 3f80 	cmp.w	r0, #65536	; 0x10000
 8003c1c:	d23f      	bcs.n	8003c9e <http_send+0x38e>
  ssi->tag_insert_len = (u16_t)len;
 8003c1e:	f8a8 700e 	strh.w	r7, [r8, #14]
            ssi->tag_index = 0;
 8003c22:	2300      	movs	r3, #0
 8003c24:	81a3      	strh	r3, [r4, #12]
            ssi->tag_state = TAG_SENDING;
 8003c26:	2304      	movs	r3, #4
 8003c28:	f884 30dc 	strb.w	r3, [r4, #220]	; 0xdc
            ssi->tag_end = ssi->parsed;
 8003c2c:	6823      	ldr	r3, [r4, #0]
 8003c2e:	6063      	str	r3, [r4, #4]
            if (ssi->tag_end > hs->file) {
 8003c30:	69a9      	ldr	r1, [r5, #24]
 8003c32:	428b      	cmp	r3, r1
 8003c34:	f67f aecd 	bls.w	80039d2 <http_send+0xc2>
              len = (u16_t)LWIP_MIN(ssi->tag_end - hs->file, 0xffff);
 8003c38:	1a5b      	subs	r3, r3, r1
 8003c3a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003c3e:	4293      	cmp	r3, r2
 8003c40:	bfa8      	it	ge
 8003c42:	4613      	movge	r3, r2
 8003c44:	f8ad 3016 	strh.w	r3, [sp, #22]
              err = http_write(pcb, hs->file, &len, HTTP_IS_DATA_VOLATILE(hs));
 8003c48:	2300      	movs	r3, #0
 8003c4a:	f10d 0216 	add.w	r2, sp, #22
 8003c4e:	4650      	mov	r0, sl
 8003c50:	f7ff fd74 	bl	800373c <http_write>
              if (err == ERR_OK) {
 8003c54:	4606      	mov	r6, r0
 8003c56:	2800      	cmp	r0, #0
 8003c58:	f47f aebb 	bne.w	80039d2 <http_send+0xc2>
                hs->file += len;
 8003c5c:	f8bd 2016 	ldrh.w	r2, [sp, #22]
 8003c60:	69ab      	ldr	r3, [r5, #24]
 8003c62:	4413      	add	r3, r2
 8003c64:	61ab      	str	r3, [r5, #24]
                hs->left -= len;
 8003c66:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8003c68:	1a9b      	subs	r3, r3, r2
 8003c6a:	626b      	str	r3, [r5, #36]	; 0x24
                data_to_send = 1;
 8003c6c:	f04f 0b01 	mov.w	fp, #1
 8003c70:	e6af      	b.n	80039d2 <http_send+0xc2>
  LWIP_ASSERT("ssi != NULL", ssi != NULL);
 8003c72:	4b70      	ldr	r3, [pc, #448]	; (8003e34 <http_send+0x524>)
 8003c74:	f240 3206 	movw	r2, #774	; 0x306
 8003c78:	496f      	ldr	r1, [pc, #444]	; (8003e38 <http_send+0x528>)
 8003c7a:	4870      	ldr	r0, [pc, #448]	; (8003e3c <http_send+0x52c>)
 8003c7c:	f007 fbdc 	bl	800b438 <iprintf>
 8003c80:	e770      	b.n	8003b64 <http_send+0x254>
        ssi->tag_insert_len = httpd_ssi_handler(tag, ssi->tag_insert,
 8003c82:	9c01      	ldr	r4, [sp, #4]
 8003c84:	9e02      	ldr	r6, [sp, #8]
 8003c86:	9d03      	ldr	r5, [sp, #12]
 8003c88:	22c0      	movs	r2, #192	; 0xc0
 8003c8a:	f108 011b 	add.w	r1, r8, #27
 8003c8e:	4638      	mov	r0, r7
 8003c90:	9b00      	ldr	r3, [sp, #0]
 8003c92:	4798      	blx	r3
 8003c94:	f8a8 000e 	strh.w	r0, [r8, #14]
          return;
 8003c98:	e7c3      	b.n	8003c22 <http_send+0x312>
  len = LWIP_MIN(sizeof(ssi->tag_name), LWIP_MIN(strlen(ssi->tag_name),
 8003c9a:	2709      	movs	r7, #9
 8003c9c:	e790      	b.n	8003bc0 <http_send+0x2b0>
  LWIP_ASSERT("len <= 0xffff", len <= 0xffff);
 8003c9e:	4b65      	ldr	r3, [pc, #404]	; (8003e34 <http_send+0x524>)
 8003ca0:	f240 323f 	movw	r2, #831	; 0x33f
 8003ca4:	4966      	ldr	r1, [pc, #408]	; (8003e40 <http_send+0x530>)
 8003ca6:	4865      	ldr	r0, [pc, #404]	; (8003e3c <http_send+0x52c>)
 8003ca8:	f007 fbc6 	bl	800b438 <iprintf>
 8003cac:	e7b7      	b.n	8003c1e <http_send+0x30e>
        if (ssi->tag_end > hs->file) {
 8003cae:	6863      	ldr	r3, [r4, #4]
 8003cb0:	69a9      	ldr	r1, [r5, #24]
 8003cb2:	428b      	cmp	r3, r1
 8003cb4:	d916      	bls.n	8003ce4 <http_send+0x3d4>
          len = (u16_t)LWIP_MIN(ssi->tag_end - hs->file, 0xffff);
 8003cb6:	1a5b      	subs	r3, r3, r1
 8003cb8:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8003cbc:	4293      	cmp	r3, r2
 8003cbe:	f300 80c5 	bgt.w	8003e4c <http_send+0x53c>
 8003cc2:	b29b      	uxth	r3, r3
 8003cc4:	f8ad 3016 	strh.w	r3, [sp, #22]
          if (len != 0) {
 8003cc8:	2b00      	cmp	r3, #0
 8003cca:	f040 80c3 	bne.w	8003e54 <http_send+0x544>
            hs->file += len;
 8003cce:	f8bd 1016 	ldrh.w	r1, [sp, #22]
 8003cd2:	69aa      	ldr	r2, [r5, #24]
 8003cd4:	440a      	add	r2, r1
 8003cd6:	61aa      	str	r2, [r5, #24]
            hs->left -= len;
 8003cd8:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8003cda:	1a5b      	subs	r3, r3, r1
 8003cdc:	626b      	str	r3, [r5, #36]	; 0x24
            data_to_send = 1;
 8003cde:	f04f 0b01 	mov.w	fp, #1
 8003ce2:	e676      	b.n	80039d2 <http_send+0xc2>
          if (ssi->tag_index < ssi->tag_insert_len) {
 8003ce4:	89a1      	ldrh	r1, [r4, #12]
 8003ce6:	89e3      	ldrh	r3, [r4, #14]
 8003ce8:	4299      	cmp	r1, r3
 8003cea:	d304      	bcc.n	8003cf6 <http_send+0x3e6>
              ssi->tag_index = 0;
 8003cec:	2300      	movs	r3, #0
 8003cee:	81a3      	strh	r3, [r4, #12]
              ssi->tag_state = TAG_NONE;
 8003cf0:	f884 30dc 	strb.w	r3, [r4, #220]	; 0xdc
 8003cf4:	e66d      	b.n	80039d2 <http_send+0xc2>
            len = (ssi->tag_insert_len - ssi->tag_index);
 8003cf6:	1a5b      	subs	r3, r3, r1
 8003cf8:	f8ad 3016 	strh.w	r3, [sp, #22]
            err = http_write(pcb, &(ssi->tag_insert[ssi->tag_index]), &len,
 8003cfc:	311b      	adds	r1, #27
 8003cfe:	2301      	movs	r3, #1
 8003d00:	f10d 0216 	add.w	r2, sp, #22
 8003d04:	4421      	add	r1, r4
 8003d06:	4650      	mov	r0, sl
 8003d08:	f7ff fd18 	bl	800373c <http_write>
            if (err == ERR_OK) {
 8003d0c:	4606      	mov	r6, r0
 8003d0e:	2800      	cmp	r0, #0
 8003d10:	f47f ae5f 	bne.w	80039d2 <http_send+0xc2>
              ssi->tag_index += len;
 8003d14:	89a3      	ldrh	r3, [r4, #12]
 8003d16:	f8bd 2016 	ldrh.w	r2, [sp, #22]
 8003d1a:	4413      	add	r3, r2
 8003d1c:	81a3      	strh	r3, [r4, #12]
              data_to_send = 1;
 8003d1e:	f04f 0b01 	mov.w	fp, #1
 8003d22:	e656      	b.n	80039d2 <http_send+0xc2>
  if ((ssi->tag_state != TAG_SENDING) && (ssi->parsed > hs->file)) {
 8003d24:	2b04      	cmp	r3, #4
 8003d26:	d03c      	beq.n	8003da2 <http_send+0x492>
 8003d28:	6823      	ldr	r3, [r4, #0]
 8003d2a:	69a9      	ldr	r1, [r5, #24]
 8003d2c:	428b      	cmp	r3, r1
 8003d2e:	d938      	bls.n	8003da2 <http_send+0x492>
      len = (u16_t)LWIP_MIN(ssi->parsed - hs->file, 0xffff);
 8003d30:	1a5b      	subs	r3, r3, r1
 8003d32:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003d36:	4293      	cmp	r3, r2
 8003d38:	bfa8      	it	ge
 8003d3a:	4613      	movge	r3, r2
 8003d3c:	f8ad 3016 	strh.w	r3, [sp, #22]
    err = http_write(pcb, hs->file, &len, HTTP_IS_DATA_VOLATILE(hs));
 8003d40:	2300      	movs	r3, #0
 8003d42:	f10d 0216 	add.w	r2, sp, #22
 8003d46:	4650      	mov	r0, sl
 8003d48:	f7ff fcf8 	bl	800373c <http_write>
    if (err == ERR_OK) {
 8003d4c:	bb48      	cbnz	r0, 8003da2 <http_send+0x492>
      hs->file += len;
 8003d4e:	f8bd 2016 	ldrh.w	r2, [sp, #22]
 8003d52:	69ab      	ldr	r3, [r5, #24]
 8003d54:	4413      	add	r3, r2
 8003d56:	61ab      	str	r3, [r5, #24]
      hs->left -= len;
 8003d58:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8003d5a:	1a9b      	subs	r3, r3, r2
 8003d5c:	626b      	str	r3, [r5, #36]	; 0x24
      data_to_send = 1;
 8003d5e:	f04f 0b01 	mov.w	fp, #1
 8003d62:	e01e      	b.n	8003da2 <http_send+0x492>
  len = (u16_t)LWIP_MIN(hs->left, 0xffff);
 8003d64:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8003d66:	f64f 71fe 	movw	r1, #65534	; 0xfffe
 8003d6a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003d6e:	428b      	cmp	r3, r1
 8003d70:	bf88      	it	hi
 8003d72:	4613      	movhi	r3, r2
 8003d74:	f8ad 3016 	strh.w	r3, [sp, #22]
  err = http_write(pcb, hs->file, &len, HTTP_IS_DATA_VOLATILE(hs));
 8003d78:	2300      	movs	r3, #0
 8003d7a:	f10d 0216 	add.w	r2, sp, #22
 8003d7e:	69a9      	ldr	r1, [r5, #24]
 8003d80:	4650      	mov	r0, sl
 8003d82:	f7ff fcdb 	bl	800373c <http_write>
  if (err == ERR_OK) {
 8003d86:	b950      	cbnz	r0, 8003d9e <http_send+0x48e>
    hs->file += len;
 8003d88:	f8bd 2016 	ldrh.w	r2, [sp, #22]
 8003d8c:	69ab      	ldr	r3, [r5, #24]
 8003d8e:	4413      	add	r3, r2
 8003d90:	61ab      	str	r3, [r5, #24]
    hs->left -= len;
 8003d92:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8003d94:	1a9b      	subs	r3, r3, r2
 8003d96:	626b      	str	r3, [r5, #36]	; 0x24
    data_to_send = 1;
 8003d98:	f04f 0b01 	mov.w	fp, #1
 8003d9c:	e001      	b.n	8003da2 <http_send+0x492>
  u8_t data_to_send = 0;
 8003d9e:	f04f 0b00 	mov.w	fp, #0
  if ((hs->left == 0) && (fs_bytes_left(hs->handle) <= 0)) {
 8003da2:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8003da4:	b11b      	cbz	r3, 8003dae <http_send+0x49e>
}
 8003da6:	4658      	mov	r0, fp
 8003da8:	b007      	add	sp, #28
 8003daa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  if ((hs->left == 0) && (fs_bytes_left(hs->handle) <= 0)) {
 8003dae:	6968      	ldr	r0, [r5, #20]
 8003db0:	f7ff fcbf 	bl	8003732 <fs_bytes_left>
 8003db4:	2800      	cmp	r0, #0
 8003db6:	dcf6      	bgt.n	8003da6 <http_send+0x496>
    http_close_conn(pcb, hs);
 8003db8:	4629      	mov	r1, r5
 8003dba:	4650      	mov	r0, sl
 8003dbc:	f7ff fd7a 	bl	80038b4 <http_close_conn>
    return 0;
 8003dc0:	f04f 0b00 	mov.w	fp, #0
}
 8003dc4:	e7ef      	b.n	8003da6 <http_send+0x496>
    return 0;
 8003dc6:	f04f 0b00 	mov.w	fp, #0
 8003dca:	e7ec      	b.n	8003da6 <http_send+0x496>
        if ((*ssi->parsed == http_ssi_tag_desc[ssi->tag_type].lead_out[0]) ||
 8003dcc:	7c22      	ldrb	r2, [r4, #16]
 8003dce:	eb09 02c2 	add.w	r2, r9, r2, lsl #3
 8003dd2:	6852      	ldr	r2, [r2, #4]
 8003dd4:	7812      	ldrb	r2, [r2, #0]
 8003dd6:	429a      	cmp	r2, r3
 8003dd8:	d10a      	bne.n	8003df0 <http_send+0x4e0>
 8003dda:	e018      	b.n	8003e0e <http_send+0x4fe>
 8003ddc:	6821      	ldr	r1, [r4, #0]
 8003dde:	780b      	ldrb	r3, [r1, #0]
 8003de0:	7c22      	ldrb	r2, [r4, #16]
 8003de2:	eb09 02c2 	add.w	r2, r9, r2, lsl #3
 8003de6:	6852      	ldr	r2, [r2, #4]
 8003de8:	7812      	ldrb	r2, [r2, #0]
 8003dea:	429a      	cmp	r2, r3
 8003dec:	f43f ae4b 	beq.w	8003a86 <http_send+0x176>
            (*ssi->parsed == ' ')  || (*ssi->parsed == '\t') ||
 8003df0:	3b09      	subs	r3, #9
 8003df2:	b2db      	uxtb	r3, r3
 8003df4:	2b17      	cmp	r3, #23
 8003df6:	f63f ae65 	bhi.w	8003ac4 <http_send+0x1b4>
 8003dfa:	4a12      	ldr	r2, [pc, #72]	; (8003e44 <http_send+0x534>)
 8003dfc:	fa22 f303 	lsr.w	r3, r2, r3
 8003e00:	f013 0f01 	tst.w	r3, #1
 8003e04:	f43f ae5e 	beq.w	8003ac4 <http_send+0x1b4>
          if (ssi->tag_index == 0) {
 8003e08:	2800      	cmp	r0, #0
 8003e0a:	f47f ae3c 	bne.w	8003a86 <http_send+0x176>
            ssi->tag_state = TAG_NONE;
 8003e0e:	2300      	movs	r3, #0
 8003e10:	f884 30dc 	strb.w	r3, [r4, #220]	; 0xdc
        ssi->parse_left--;
 8003e14:	68a3      	ldr	r3, [r4, #8]
 8003e16:	3b01      	subs	r3, #1
 8003e18:	60a3      	str	r3, [r4, #8]
        ssi->parsed++;
 8003e1a:	6823      	ldr	r3, [r4, #0]
 8003e1c:	3301      	adds	r3, #1
 8003e1e:	6023      	str	r3, [r4, #0]
        break;
 8003e20:	e5d7      	b.n	80039d2 <http_send+0xc2>
 8003e22:	bf00      	nop
 8003e24:	20005720 	.word	0x20005720
 8003e28:	20005724 	.word	0x20005724
 8003e2c:	2000531c 	.word	0x2000531c
 8003e30:	08010464 	.word	0x08010464
 8003e34:	08010388 	.word	0x08010388
 8003e38:	08010444 	.word	0x08010444
 8003e3c:	0800cb24 	.word	0x0800cb24
 8003e40:	0801046c 	.word	0x0801046c
 8003e44:	00800013 	.word	0x00800013
 8003e48:	08010450 	.word	0x08010450
          len = (u16_t)LWIP_MIN(ssi->tag_end - hs->file, 0xffff);
 8003e4c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003e50:	f8ad 3016 	strh.w	r3, [sp, #22]
            err = http_write(pcb, hs->file, &len, HTTP_IS_DATA_VOLATILE(hs));
 8003e54:	2300      	movs	r3, #0
 8003e56:	f10d 0216 	add.w	r2, sp, #22
 8003e5a:	4650      	mov	r0, sl
 8003e5c:	f7ff fc6e 	bl	800373c <http_write>
          if (err == ERR_OK) {
 8003e60:	2800      	cmp	r0, #0
 8003e62:	f43f af34 	beq.w	8003cce <http_send+0x3be>
            err = http_write(pcb, hs->file, &len, HTTP_IS_DATA_VOLATILE(hs));
 8003e66:	4606      	mov	r6, r0
 8003e68:	e5b3      	b.n	80039d2 <http_send+0xc2>
 8003e6a:	bf00      	nop

08003e6c <http_sent>:
  if (hs == NULL) {
 8003e6c:	b150      	cbz	r0, 8003e84 <http_sent+0x18>
{
 8003e6e:	b508      	push	{r3, lr}
 8003e70:	460b      	mov	r3, r1
 8003e72:	4601      	mov	r1, r0
  hs->retries = 0;
 8003e74:	2200      	movs	r2, #0
 8003e76:	f880 2028 	strb.w	r2, [r0, #40]	; 0x28
  http_send(pcb, hs);
 8003e7a:	4618      	mov	r0, r3
 8003e7c:	f7ff fd48 	bl	8003910 <http_send>
}
 8003e80:	2000      	movs	r0, #0
 8003e82:	bd08      	pop	{r3, pc}
 8003e84:	2000      	movs	r0, #0
 8003e86:	4770      	bx	lr

08003e88 <http_poll>:
{
 8003e88:	b510      	push	{r4, lr}
 8003e8a:	460c      	mov	r4, r1
  if (hs == NULL) {
 8003e8c:	b180      	cbz	r0, 8003eb0 <http_poll+0x28>
 8003e8e:	4601      	mov	r1, r0
    hs->retries++;
 8003e90:	f890 3028 	ldrb.w	r3, [r0, #40]	; 0x28
 8003e94:	3301      	adds	r3, #1
 8003e96:	b2db      	uxtb	r3, r3
 8003e98:	f880 3028 	strb.w	r3, [r0, #40]	; 0x28
    if (hs->retries == HTTPD_MAX_RETRIES) {
 8003e9c:	2b04      	cmp	r3, #4
 8003e9e:	d00c      	beq.n	8003eba <http_poll+0x32>
    if (hs->handle) {
 8003ea0:	6943      	ldr	r3, [r0, #20]
 8003ea2:	b11b      	cbz	r3, 8003eac <http_poll+0x24>
      if (http_send(pcb, hs)) {
 8003ea4:	4620      	mov	r0, r4
 8003ea6:	f7ff fd33 	bl	8003910 <http_send>
 8003eaa:	b950      	cbnz	r0, 8003ec2 <http_poll+0x3a>
}
 8003eac:	2000      	movs	r0, #0
 8003eae:	bd10      	pop	{r4, pc}
    closed = http_close_conn(pcb, NULL);
 8003eb0:	2100      	movs	r1, #0
 8003eb2:	4620      	mov	r0, r4
 8003eb4:	f7ff fcfe 	bl	80038b4 <http_close_conn>
    return ERR_OK;
 8003eb8:	e7f8      	b.n	8003eac <http_poll+0x24>
      http_close_conn(pcb, hs);
 8003eba:	4620      	mov	r0, r4
 8003ebc:	f7ff fcfa 	bl	80038b4 <http_close_conn>
      return ERR_OK;
 8003ec0:	e7f4      	b.n	8003eac <http_poll+0x24>
        altcp_output(pcb);
 8003ec2:	4620      	mov	r0, r4
 8003ec4:	f005 f9bc 	bl	8009240 <tcp_output>
 8003ec8:	e7f0      	b.n	8003eac <http_poll+0x24>
	...

08003ecc <http_recv>:
{
 8003ecc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003ed0:	b089      	sub	sp, #36	; 0x24
 8003ed2:	4605      	mov	r5, r0
 8003ed4:	460e      	mov	r6, r1
 8003ed6:	4614      	mov	r4, r2
  if ((err != ERR_OK) || (p == NULL) || (hs == NULL)) {
 8003ed8:	b963      	cbnz	r3, 8003ef4 <http_recv+0x28>
 8003eda:	461f      	mov	r7, r3
 8003edc:	b192      	cbz	r2, 8003f04 <http_recv+0x38>
 8003ede:	b150      	cbz	r0, 8003ef6 <http_recv+0x2a>
    altcp_recved(pcb, p->tot_len);
 8003ee0:	8911      	ldrh	r1, [r2, #8]
 8003ee2:	4630      	mov	r0, r6
 8003ee4:	f001 fdc2 	bl	8005a6c <tcp_recved>
    if (hs->handle == NULL) {
 8003ee8:	696b      	ldr	r3, [r5, #20]
 8003eea:	b19b      	cbz	r3, 8003f14 <http_recv+0x48>
      pbuf_free(p);
 8003eec:	4620      	mov	r0, r4
 8003eee:	f001 f95b 	bl	80051a8 <pbuf_free>
 8003ef2:	e00b      	b.n	8003f0c <http_recv+0x40>
    if (p != NULL) {
 8003ef4:	b132      	cbz	r2, 8003f04 <http_recv+0x38>
      altcp_recved(pcb, p->tot_len);
 8003ef6:	8921      	ldrh	r1, [r4, #8]
 8003ef8:	4630      	mov	r0, r6
 8003efa:	f001 fdb7 	bl	8005a6c <tcp_recved>
      pbuf_free(p);
 8003efe:	4620      	mov	r0, r4
 8003f00:	f001 f952 	bl	80051a8 <pbuf_free>
    http_close_conn(pcb, hs);
 8003f04:	4629      	mov	r1, r5
 8003f06:	4630      	mov	r0, r6
 8003f08:	f7ff fcd4 	bl	80038b4 <http_close_conn>
}
 8003f0c:	2000      	movs	r0, #0
 8003f0e:	b009      	add	sp, #36	; 0x24
 8003f10:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  if ((hs->handle != NULL) || (hs->file != NULL)) {
 8003f14:	69ab      	ldr	r3, [r5, #24]
 8003f16:	2b00      	cmp	r3, #0
 8003f18:	f040 8254 	bne.w	80043c4 <http_recv+0x4f8>
  if (hs->req == NULL) {
 8003f1c:	6a28      	ldr	r0, [r5, #32]
 8003f1e:	2800      	cmp	r0, #0
 8003f20:	d05f      	beq.n	8003fe2 <http_recv+0x116>
    pbuf_cat(hs->req, p);
 8003f22:	4621      	mov	r1, r4
 8003f24:	f001 fabe 	bl	80054a4 <pbuf_cat>
  pbuf_ref(p);
 8003f28:	4620      	mov	r0, r4
 8003f2a:	f001 faa3 	bl	8005474 <pbuf_ref>
  if (hs->req->next != NULL) {
 8003f2e:	6a28      	ldr	r0, [r5, #32]
 8003f30:	6803      	ldr	r3, [r0, #0]
 8003f32:	2b00      	cmp	r3, #0
 8003f34:	d057      	beq.n	8003fe6 <http_recv+0x11a>
    data_len = LWIP_MIN(hs->req->tot_len, LWIP_HTTPD_MAX_REQ_LENGTH);
 8003f36:	f8b0 8008 	ldrh.w	r8, [r0, #8]
 8003f3a:	f240 33ff 	movw	r3, #1023	; 0x3ff
 8003f3e:	4598      	cmp	r8, r3
 8003f40:	bf28      	it	cs
 8003f42:	4698      	movcs	r8, r3
    pbuf_copy_partial(hs->req, httpd_req_buf, data_len, 0);
 8003f44:	f8df 92c0 	ldr.w	r9, [pc, #704]	; 8004208 <http_recv+0x33c>
 8003f48:	2300      	movs	r3, #0
 8003f4a:	4642      	mov	r2, r8
 8003f4c:	4649      	mov	r1, r9
 8003f4e:	f001 fb89 	bl	8005664 <pbuf_copy_partial>
  if (data_len >= MIN_REQ_LEN) {
 8003f52:	f1b8 0f06 	cmp.w	r8, #6
 8003f56:	d924      	bls.n	8003fa2 <http_recv+0xd6>
    crlf = lwip_strnstr(data, CRLF, data_len);
 8003f58:	f8cd 8004 	str.w	r8, [sp, #4]
 8003f5c:	4642      	mov	r2, r8
 8003f5e:	49a2      	ldr	r1, [pc, #648]	; (80041e8 <http_recv+0x31c>)
 8003f60:	4648      	mov	r0, r9
 8003f62:	f000 fb0e 	bl	8004582 <lwip_strnstr>
    if (crlf != NULL) {
 8003f66:	b1e0      	cbz	r0, 8003fa2 <http_recv+0xd6>
      if (!strncmp(data, "GET ", 4)) {
 8003f68:	2204      	movs	r2, #4
 8003f6a:	49a0      	ldr	r1, [pc, #640]	; (80041ec <http_recv+0x320>)
 8003f6c:	4648      	mov	r0, r9
 8003f6e:	f007 fafd 	bl	800b56c <strncmp>
 8003f72:	4683      	mov	fp, r0
 8003f74:	2800      	cmp	r0, #0
 8003f76:	d13b      	bne.n	8003ff0 <http_recv+0x124>
      left_len = (u16_t)(data_len - ((sp1 + 1) - data));
 8003f78:	f109 0a04 	add.w	sl, r9, #4
 8003f7c:	f1a8 0804 	sub.w	r8, r8, #4
      sp2 = lwip_strnstr(sp1 + 1, " ", left_len);
 8003f80:	fa1f f888 	uxth.w	r8, r8
 8003f84:	4642      	mov	r2, r8
 8003f86:	499a      	ldr	r1, [pc, #616]	; (80041f0 <http_recv+0x324>)
 8003f88:	4650      	mov	r0, sl
 8003f8a:	f000 fafa 	bl	8004582 <lwip_strnstr>
      if (sp2 == NULL) {
 8003f8e:	4603      	mov	r3, r0
 8003f90:	b390      	cbz	r0, 8003ff8 <http_recv+0x12c>
      uri_len = (u16_t)(sp2 - (sp1 + 1));
 8003f92:	eba0 080a 	sub.w	r8, r0, sl
      int is_09 = 0;
 8003f96:	f8cd b008 	str.w	fp, [sp, #8]
        sp1 = data + 3;
 8003f9a:	f109 0203 	add.w	r2, r9, #3
      if ((sp2 != 0) && (sp2 > sp1)) {
 8003f9e:	4293      	cmp	r3, r2
 8003fa0:	d837      	bhi.n	8004012 <http_recv+0x146>
  clen = pbuf_clen(hs->req);
 8003fa2:	6a28      	ldr	r0, [r5, #32]
 8003fa4:	f001 fa5a 	bl	800545c <pbuf_clen>
  if ((hs->req->tot_len <= LWIP_HTTPD_REQ_BUFSIZE) &&
 8003fa8:	6a2b      	ldr	r3, [r5, #32]
 8003faa:	891b      	ldrh	r3, [r3, #8]
 8003fac:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003fb0:	d202      	bcs.n	8003fb8 <http_recv+0xec>
 8003fb2:	2805      	cmp	r0, #5
 8003fb4:	f240 81fa 	bls.w	80043ac <http_recv+0x4e0>
        if (hs->req != NULL) {
 8003fb8:	6a28      	ldr	r0, [r5, #32]
 8003fba:	2800      	cmp	r0, #0
 8003fbc:	f000 81fa 	beq.w	80043b4 <http_recv+0x4e8>
 8003fc0:	f06f 070f 	mvn.w	r7, #15
          pbuf_free(hs->req);
 8003fc4:	f001 f8f0 	bl	80051a8 <pbuf_free>
          hs->req = NULL;
 8003fc8:	2300      	movs	r3, #0
 8003fca:	622b      	str	r3, [r5, #32]
      pbuf_free(p);
 8003fcc:	4620      	mov	r0, r4
 8003fce:	f001 f8eb 	bl	80051a8 <pbuf_free>
      if (parsed == ERR_OK) {
 8003fd2:	2f00      	cmp	r7, #0
 8003fd4:	f040 81e1 	bne.w	800439a <http_recv+0x4ce>
          http_send(pcb, hs);
 8003fd8:	4629      	mov	r1, r5
 8003fda:	4630      	mov	r0, r6
 8003fdc:	f7ff fc98 	bl	8003910 <http_send>
 8003fe0:	e794      	b.n	8003f0c <http_recv+0x40>
    hs->req = p;
 8003fe2:	622c      	str	r4, [r5, #32]
 8003fe4:	e7a0      	b.n	8003f28 <http_recv+0x5c>
    data = (char *)p->payload;
 8003fe6:	f8d4 9004 	ldr.w	r9, [r4, #4]
    data_len = p->len;
 8003fea:	f8b4 800a 	ldrh.w	r8, [r4, #10]
    if (p->len != p->tot_len) {
 8003fee:	e7b0      	b.n	8003f52 <http_recv+0x86>
        data[4] = 0;
 8003ff0:	2300      	movs	r3, #0
 8003ff2:	f889 3004 	strb.w	r3, [r9, #4]
        return http_find_error_file(hs, 501);
 8003ff6:	e7df      	b.n	8003fb8 <http_recv+0xec>
        sp2 = lwip_strnstr(sp1 + 1, CRLF, left_len);
 8003ff8:	4642      	mov	r2, r8
 8003ffa:	497b      	ldr	r1, [pc, #492]	; (80041e8 <http_recv+0x31c>)
 8003ffc:	4650      	mov	r0, sl
 8003ffe:	f000 fac0 	bl	8004582 <lwip_strnstr>
      if ((sp2 != 0) && (sp2 > sp1)) {
 8004002:	4603      	mov	r3, r0
 8004004:	2800      	cmp	r0, #0
 8004006:	d0cc      	beq.n	8003fa2 <http_recv+0xd6>
      uri_len = (u16_t)(sp2 - (sp1 + 1));
 8004008:	eba0 080a 	sub.w	r8, r0, sl
        is_09 = 1;
 800400c:	2201      	movs	r2, #1
 800400e:	9202      	str	r2, [sp, #8]
 8004010:	e7c3      	b.n	8003f9a <http_recv+0xce>
        if (lwip_strnstr(data, CRLF CRLF, data_len) != NULL) {
 8004012:	9a01      	ldr	r2, [sp, #4]
 8004014:	4977      	ldr	r1, [pc, #476]	; (80041f4 <http_recv+0x328>)
 8004016:	4648      	mov	r0, r9
 8004018:	f000 fab3 	bl	8004582 <lwip_strnstr>
 800401c:	2800      	cmp	r0, #0
 800401e:	d0c0      	beq.n	8003fa2 <http_recv+0xd6>
          *sp1 = 0;
 8004020:	2300      	movs	r3, #0
 8004022:	f889 3003 	strb.w	r3, [r9, #3]
          uri[uri_len] = 0;
 8004026:	fa1f f888 	uxth.w	r8, r8
 800402a:	f80a 3008 	strb.w	r3, [sl, r8]
            return http_find_file(hs, uri, is_09);
 800402e:	f8cd a01c 	str.w	sl, [sp, #28]
  size_t uri_len = strlen(uri);
 8004032:	4650      	mov	r0, sl
 8004034:	f7fc f8e6 	bl	8000204 <strlen>
  if ((uri_len > 0) && (uri[uri_len - 1] == '/') &&
 8004038:	9001      	str	r0, [sp, #4]
 800403a:	b120      	cbz	r0, 8004046 <http_recv+0x17a>
 800403c:	1e42      	subs	r2, r0, #1
 800403e:	f81a 3002 	ldrb.w	r3, [sl, r2]
 8004042:	2b2f      	cmp	r3, #47	; 0x2f
 8004044:	d02f      	beq.n	80040a6 <http_recv+0x1da>
    params = (char *)strchr(uri, '?');
 8004046:	213f      	movs	r1, #63	; 0x3f
 8004048:	9807      	ldr	r0, [sp, #28]
 800404a:	f007 fa7a 	bl	800b542 <strchr>
    if (params != NULL) {
 800404e:	4682      	mov	sl, r0
 8004050:	b110      	cbz	r0, 8004058 <http_recv+0x18c>
      *params = '\0';
 8004052:	2300      	movs	r3, #0
 8004054:	f80a 3b01 	strb.w	r3, [sl], #1
    if (httpd_num_cgis && httpd_cgis) {
 8004058:	4b67      	ldr	r3, [pc, #412]	; (80041f8 <http_recv+0x32c>)
 800405a:	f8d3 9000 	ldr.w	r9, [r3]
 800405e:	f1b9 0f00 	cmp.w	r9, #0
 8004062:	f000 80e1 	beq.w	8004228 <http_recv+0x35c>
 8004066:	4b65      	ldr	r3, [pc, #404]	; (80041fc <http_recv+0x330>)
 8004068:	f8d3 8000 	ldr.w	r8, [r3]
 800406c:	f1b8 0f00 	cmp.w	r8, #0
 8004070:	f000 80da 	beq.w	8004228 <http_recv+0x35c>
      for (i = 0; i < httpd_num_cgis; i++) {
 8004074:	f1b9 0f00 	cmp.w	r9, #0
 8004078:	f340 80d6 	ble.w	8004228 <http_recv+0x35c>
        if (strcmp(uri, httpd_cgis[i].pcCGIName) == 0) {
 800407c:	9b07      	ldr	r3, [sp, #28]
 800407e:	f8cd a00c 	str.w	sl, [sp, #12]
 8004082:	9401      	str	r4, [sp, #4]
 8004084:	461c      	mov	r4, r3
 8004086:	eb08 0acb 	add.w	sl, r8, fp, lsl #3
 800408a:	f858 103b 	ldr.w	r1, [r8, fp, lsl #3]
 800408e:	4620      	mov	r0, r4
 8004090:	f7fc f8ae 	bl	80001f0 <strcmp>
 8004094:	4601      	mov	r1, r0
 8004096:	2800      	cmp	r0, #0
 8004098:	d05d      	beq.n	8004156 <http_recv+0x28a>
      for (i = 0; i < httpd_num_cgis; i++) {
 800409a:	f10b 0b01 	add.w	fp, fp, #1
 800409e:	45d9      	cmp	r9, fp
 80040a0:	d1f1      	bne.n	8004086 <http_recv+0x1ba>
 80040a2:	9c01      	ldr	r4, [sp, #4]
 80040a4:	e0c0      	b.n	8004228 <http_recv+0x35c>
  if ((uri_len > 0) && (uri[uri_len - 1] == '/') &&
 80040a6:	4b56      	ldr	r3, [pc, #344]	; (8004200 <http_recv+0x334>)
 80040a8:	459a      	cmp	sl, r3
 80040aa:	d019      	beq.n	80040e0 <http_recv+0x214>
    size_t copy_len = LWIP_MIN(sizeof(http_uri_buf) - 1, uri_len - 1);
 80040ac:	4613      	mov	r3, r2
 80040ae:	2a3f      	cmp	r2, #63	; 0x3f
 80040b0:	bf28      	it	cs
 80040b2:	233f      	movcs	r3, #63	; 0x3f
 80040b4:	9303      	str	r3, [sp, #12]
    if (copy_len > 0) {
 80040b6:	9a01      	ldr	r2, [sp, #4]
 80040b8:	2a01      	cmp	r2, #1
 80040ba:	d00a      	beq.n	80040d2 <http_recv+0x206>
      MEMCPY(http_uri_buf, uri, copy_len);
 80040bc:	f8df 8140 	ldr.w	r8, [pc, #320]	; 8004200 <http_recv+0x334>
 80040c0:	4699      	mov	r9, r3
 80040c2:	461a      	mov	r2, r3
 80040c4:	4651      	mov	r1, sl
 80040c6:	4640      	mov	r0, r8
 80040c8:	f007 f986 	bl	800b3d8 <memcpy>
      http_uri_buf[copy_len] = 0;
 80040cc:	2300      	movs	r3, #0
 80040ce:	f808 3009 	strb.w	r3, [r8, r9]
    size_t copy_len = LWIP_MIN(sizeof(http_uri_buf) - 1, uri_len - 1);
 80040d2:	f04f 0900 	mov.w	r9, #0
          MEMCPY(&http_uri_buf[copy_len], httpd_default_filenames[loop].name, name_copy_len);
 80040d6:	4b4a      	ldr	r3, [pc, #296]	; (8004200 <http_recv+0x334>)
 80040d8:	9a03      	ldr	r2, [sp, #12]
 80040da:	4413      	add	r3, r2
 80040dc:	9304      	str	r3, [sp, #16]
 80040de:	e028      	b.n	8004132 <http_recv+0x266>
      ((uri != http_uri_buf) || (uri_len == 1))) {
 80040e0:	2801      	cmp	r0, #1
 80040e2:	d1b0      	bne.n	8004046 <http_recv+0x17a>
    size_t copy_len = LWIP_MIN(sizeof(http_uri_buf) - 1, uri_len - 1);
 80040e4:	2300      	movs	r3, #0
 80040e6:	9303      	str	r3, [sp, #12]
 80040e8:	e7f3      	b.n	80040d2 <http_recv+0x206>
          size_t name_len = strlen(httpd_default_filenames[loop].name);
 80040ea:	4b46      	ldr	r3, [pc, #280]	; (8004204 <http_recv+0x338>)
 80040ec:	f853 a039 	ldr.w	sl, [r3, r9, lsl #3]
 80040f0:	4650      	mov	r0, sl
 80040f2:	f7fc f887 	bl	8000204 <strlen>
          size_t name_copy_len = LWIP_MIN(len_left, name_len);
 80040f6:	4580      	cmp	r8, r0
 80040f8:	bf28      	it	cs
 80040fa:	4680      	movcs	r8, r0
          MEMCPY(&http_uri_buf[copy_len], httpd_default_filenames[loop].name, name_copy_len);
 80040fc:	4642      	mov	r2, r8
 80040fe:	4651      	mov	r1, sl
 8004100:	f8dd a010 	ldr.w	sl, [sp, #16]
 8004104:	4650      	mov	r0, sl
 8004106:	f007 f967 	bl	800b3d8 <memcpy>
          http_uri_buf[copy_len + name_copy_len] = 0;
 800410a:	2300      	movs	r3, #0
 800410c:	f80a 3008 	strb.w	r3, [sl, r8]
        file_name = http_uri_buf;
 8004110:	f8df a0ec 	ldr.w	sl, [pc, #236]	; 8004200 <http_recv+0x334>
 8004114:	e002      	b.n	800411c <http_recv+0x250>
        file_name = httpd_default_filenames[loop].name;
 8004116:	4b3b      	ldr	r3, [pc, #236]	; (8004204 <http_recv+0x338>)
 8004118:	f853 a039 	ldr.w	sl, [r3, r9, lsl #3]
      err = fs_open(&hs->file_handle, file_name);
 800411c:	46a8      	mov	r8, r5
 800411e:	4651      	mov	r1, sl
 8004120:	4628      	mov	r0, r5
 8004122:	f7ff fae3 	bl	80036ec <fs_open>
      if (err == ERR_OK) {
 8004126:	b170      	cbz	r0, 8004146 <http_recv+0x27a>
    for (loop = 0; loop < NUM_DEFAULT_FILENAMES; loop++) {
 8004128:	f109 0901 	add.w	r9, r9, #1
 800412c:	f1b9 0f05 	cmp.w	r9, #5
 8004130:	d089      	beq.n	8004046 <http_recv+0x17a>
      if (copy_len > 0) {
 8004132:	9b01      	ldr	r3, [sp, #4]
 8004134:	2b01      	cmp	r3, #1
 8004136:	d0ee      	beq.n	8004116 <http_recv+0x24a>
        if (len_left > 0) {
 8004138:	9b03      	ldr	r3, [sp, #12]
 800413a:	f1d3 083f 	rsbs	r8, r3, #63	; 0x3f
 800413e:	d1d4      	bne.n	80040ea <http_recv+0x21e>
        file_name = http_uri_buf;
 8004140:	f8df a0bc 	ldr.w	sl, [pc, #188]	; 8004200 <http_recv+0x334>
 8004144:	e7ea      	b.n	800411c <http_recv+0x250>
        uri = file_name;
 8004146:	f8cd a01c 	str.w	sl, [sp, #28]
        tag_check = httpd_default_filenames[loop].shtml;
 800414a:	4b2e      	ldr	r3, [pc, #184]	; (8004204 <http_recv+0x338>)
 800414c:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
 8004150:	f899 9004 	ldrb.w	r9, [r9, #4]
  if (file == NULL) {
 8004154:	e075      	b.n	8004242 <http_recv+0x376>
  if (!params || (params[0] == '\0')) {
 8004156:	f8cd a014 	str.w	sl, [sp, #20]
 800415a:	f8dd a00c 	ldr.w	sl, [sp, #12]
 800415e:	9c01      	ldr	r4, [sp, #4]
 8004160:	f1ba 0f00 	cmp.w	sl, #0
 8004164:	d056      	beq.n	8004214 <http_recv+0x348>
 8004166:	f89a 3000 	ldrb.w	r3, [sl]
 800416a:	2b00      	cmp	r3, #0
 800416c:	d052      	beq.n	8004214 <http_recv+0x348>
 800416e:	f105 092c 	add.w	r9, r5, #44	; 0x2c
 8004172:	9503      	str	r5, [sp, #12]
 8004174:	4605      	mov	r5, r0
 8004176:	9604      	str	r6, [sp, #16]
 8004178:	46a0      	mov	r8, r4
 800417a:	e011      	b.n	80041a0 <http_recv+0x2d4>
      pair = strchr(equals, ' ');
 800417c:	2120      	movs	r1, #32
 800417e:	4650      	mov	r0, sl
 8004180:	f007 f9df 	bl	800b542 <strchr>
      if (pair) {
 8004184:	4604      	mov	r4, r0
 8004186:	b1e0      	cbz	r0, 80041c2 <http_recv+0x2f6>
        *pair = '\0';
 8004188:	f04f 0300 	mov.w	r3, #0
 800418c:	7003      	strb	r3, [r0, #0]
      pair = NULL;
 800418e:	9c01      	ldr	r4, [sp, #4]
 8004190:	e017      	b.n	80041c2 <http_recv+0x2f6>
      http_cgi_param_vals[loop] = NULL;
 8004192:	2300      	movs	r3, #0
 8004194:	6433      	str	r3, [r6, #64]	; 0x40
  for (loop = 0; (loop < LWIP_HTTPD_MAX_CGI_PARAMETERS) && pair; loop++) {
 8004196:	3501      	adds	r5, #1
 8004198:	2d10      	cmp	r5, #16
 800419a:	d037      	beq.n	800420c <http_recv+0x340>
 800419c:	b1f4      	cbz	r4, 80041dc <http_recv+0x310>
 800419e:	46a2      	mov	sl, r4
    http_cgi_params[loop] = pair;
 80041a0:	f109 0904 	add.w	r9, r9, #4
 80041a4:	464e      	mov	r6, r9
 80041a6:	f8c9 a000 	str.w	sl, [r9]
    pair = strchr(pair, '&');
 80041aa:	2126      	movs	r1, #38	; 0x26
 80041ac:	4650      	mov	r0, sl
 80041ae:	f007 f9c8 	bl	800b542 <strchr>
    if (pair) {
 80041b2:	4604      	mov	r4, r0
 80041b4:	9001      	str	r0, [sp, #4]
 80041b6:	2800      	cmp	r0, #0
 80041b8:	d0e0      	beq.n	800417c <http_recv+0x2b0>
      *pair = '\0';
 80041ba:	f04f 0300 	mov.w	r3, #0
 80041be:	f804 3b01 	strb.w	r3, [r4], #1
    equals = strchr(equals, '=');
 80041c2:	213d      	movs	r1, #61	; 0x3d
 80041c4:	4650      	mov	r0, sl
 80041c6:	f007 f9bc 	bl	800b542 <strchr>
    if (equals) {
 80041ca:	4603      	mov	r3, r0
 80041cc:	2800      	cmp	r0, #0
 80041ce:	d0e0      	beq.n	8004192 <http_recv+0x2c6>
      *equals = '\0';
 80041d0:	f04f 0200 	mov.w	r2, #0
 80041d4:	f803 2b01 	strb.w	r2, [r3], #1
      http_cgi_param_vals[loop] = equals + 1;
 80041d8:	6433      	str	r3, [r6, #64]	; 0x40
 80041da:	e7dc      	b.n	8004196 <http_recv+0x2ca>
 80041dc:	4629      	mov	r1, r5
 80041de:	9d03      	ldr	r5, [sp, #12]
 80041e0:	9e04      	ldr	r6, [sp, #16]
 80041e2:	4644      	mov	r4, r8
 80041e4:	e016      	b.n	8004214 <http_recv+0x348>
 80041e6:	bf00      	nop
 80041e8:	0801047c 	.word	0x0801047c
 80041ec:	08010480 	.word	0x08010480
 80041f0:	0800ca00 	.word	0x0800ca00
 80041f4:	08010488 	.word	0x08010488
 80041f8:	20005318 	.word	0x20005318
 80041fc:	20005314 	.word	0x20005314
 8004200:	200052d4 	.word	0x200052d4
 8004204:	0801064c 	.word	0x0801064c
 8004208:	20005320 	.word	0x20005320
 800420c:	4629      	mov	r1, r5
 800420e:	9d03      	ldr	r5, [sp, #12]
 8004210:	9e04      	ldr	r6, [sp, #16]
 8004212:	4644      	mov	r4, r8
          uri = httpd_cgis[i].pfnCGIHandler(i, http_cgi_paramcount, hs->params,
 8004214:	9b05      	ldr	r3, [sp, #20]
 8004216:	f8d3 8004 	ldr.w	r8, [r3, #4]
 800421a:	f105 0370 	add.w	r3, r5, #112	; 0x70
 800421e:	f105 0230 	add.w	r2, r5, #48	; 0x30
 8004222:	4658      	mov	r0, fp
 8004224:	47c0      	blx	r8
 8004226:	9007      	str	r0, [sp, #28]
    err = fs_open(&hs->file_handle, uri);
 8004228:	46a8      	mov	r8, r5
 800422a:	9907      	ldr	r1, [sp, #28]
 800422c:	4628      	mov	r0, r5
 800422e:	f7ff fa5d 	bl	80036ec <fs_open>
    if (err == ERR_OK) {
 8004232:	bb68      	cbnz	r0, 8004290 <http_recv+0x3c4>
      if (file->flags & FS_FILE_FLAGS_SSI) {
 8004234:	f898 9010 	ldrb.w	r9, [r8, #16]
 8004238:	f019 0908 	ands.w	r9, r9, #8
 800423c:	d03e      	beq.n	80042bc <http_recv+0x3f0>
        tag_check = 1;
 800423e:	f04f 0901 	mov.w	r9, #1
    LWIP_ASSERT("file->data != NULL", file->data != NULL);
 8004242:	f8d8 3000 	ldr.w	r3, [r8]
 8004246:	2b00      	cmp	r3, #0
 8004248:	f000 80c8 	beq.w	80043dc <http_recv+0x510>
    if (tag_check) {
 800424c:	f1b9 0f00 	cmp.w	r9, #0
 8004250:	d162      	bne.n	8004318 <http_recv+0x44c>
    hs->handle = file;
 8004252:	f8c5 8014 	str.w	r8, [r5, #20]
    hs->file = file->data;
 8004256:	f8d8 3000 	ldr.w	r3, [r8]
 800425a:	61ab      	str	r3, [r5, #24]
    LWIP_ASSERT("File length must be positive!", (file->len >= 0));
 800425c:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8004260:	2b00      	cmp	r3, #0
 8004262:	db72      	blt.n	800434a <http_recv+0x47e>
      hs->left = (u32_t)file->len;
 8004264:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8004268:	626b      	str	r3, [r5, #36]	; 0x24
    hs->retries = 0;
 800426a:	2300      	movs	r3, #0
 800426c:	f885 3028 	strb.w	r3, [r5, #40]	; 0x28
    LWIP_ASSERT("HTTP headers not included in file system",
 8004270:	696b      	ldr	r3, [r5, #20]
 8004272:	7c1b      	ldrb	r3, [r3, #16]
 8004274:	f013 0f01 	tst.w	r3, #1
 8004278:	d06f      	beq.n	800435a <http_recv+0x48e>
    if (is_09 && ((hs->handle->flags & FS_FILE_FLAGS_HEADER_INCLUDED) != 0)) {
 800427a:	9b02      	ldr	r3, [sp, #8]
 800427c:	2b00      	cmp	r3, #0
 800427e:	d17b      	bne.n	8004378 <http_recv+0x4ac>
        if (hs->req != NULL) {
 8004280:	6a28      	ldr	r0, [r5, #32]
 8004282:	2800      	cmp	r0, #0
 8004284:	f47f ae9e 	bne.w	8003fc4 <http_recv+0xf8>
      pbuf_free(p);
 8004288:	4620      	mov	r0, r4
 800428a:	f000 ff8d 	bl	80051a8 <pbuf_free>
      if (parsed == ERR_OK) {
 800428e:	e6a3      	b.n	8003fd8 <http_recv+0x10c>
      file = http_get_404_file(hs, &uri);
 8004290:	a907      	add	r1, sp, #28
 8004292:	4628      	mov	r0, r5
 8004294:	f7ff fab0 	bl	80037f8 <http_get_404_file>
    if (file != NULL) {
 8004298:	4680      	mov	r8, r0
 800429a:	2800      	cmp	r0, #0
 800429c:	d1ca      	bne.n	8004234 <http_recv+0x368>
    file = http_get_404_file(hs, &uri);
 800429e:	a907      	add	r1, sp, #28
 80042a0:	4628      	mov	r0, r5
 80042a2:	f7ff faa9 	bl	80037f8 <http_get_404_file>
  if (file != NULL) {
 80042a6:	4680      	mov	r8, r0
 80042a8:	2800      	cmp	r0, #0
 80042aa:	f040 8091 	bne.w	80043d0 <http_recv+0x504>
    hs->handle = NULL;
 80042ae:	2300      	movs	r3, #0
 80042b0:	616b      	str	r3, [r5, #20]
    hs->file = NULL;
 80042b2:	61ab      	str	r3, [r5, #24]
    hs->left = 0;
 80042b4:	626b      	str	r3, [r5, #36]	; 0x24
    hs->retries = 0;
 80042b6:	f885 3028 	strb.w	r3, [r5, #40]	; 0x28
 80042ba:	e7e1      	b.n	8004280 <http_recv+0x3b4>
        tag_check = http_uri_is_ssi(file, uri);
 80042bc:	f8dd b01c 	ldr.w	fp, [sp, #28]
    char *param = (char *)strstr(uri, "?");
 80042c0:	213f      	movs	r1, #63	; 0x3f
 80042c2:	4658      	mov	r0, fp
 80042c4:	f007 f93d 	bl	800b542 <strchr>
    if (param != NULL) {
 80042c8:	9001      	str	r0, [sp, #4]
 80042ca:	b108      	cbz	r0, 80042d0 <http_recv+0x404>
      *param = 0;
 80042cc:	2300      	movs	r3, #0
 80042ce:	7003      	strb	r3, [r0, #0]
    for (sub = strstr(sub, "."); sub != NULL; sub = strstr(sub, ".")) {
 80042d0:	212e      	movs	r1, #46	; 0x2e
 80042d2:	4658      	mov	r0, fp
 80042d4:	f007 f935 	bl	800b542 <strchr>
 80042d8:	4603      	mov	r3, r0
 80042da:	b148      	cbz	r0, 80042f0 <http_recv+0x424>
 80042dc:	f04f 0a2e 	mov.w	sl, #46	; 0x2e
 80042e0:	469b      	mov	fp, r3
 80042e2:	4651      	mov	r1, sl
 80042e4:	1c58      	adds	r0, r3, #1
 80042e6:	f007 f92c 	bl	800b542 <strchr>
 80042ea:	4603      	mov	r3, r0
 80042ec:	2800      	cmp	r0, #0
 80042ee:	d1f7      	bne.n	80042e0 <http_recv+0x414>
    for (loop = 0; loop < NUM_SHTML_EXTENSIONS; loop++) {
 80042f0:	f8df a114 	ldr.w	sl, [pc, #276]	; 8004408 <http_recv+0x53c>
      if (!lwip_stricmp(ext, g_pcSSIExtensions[loop])) {
 80042f4:	f85a 1b04 	ldr.w	r1, [sl], #4
 80042f8:	4658      	mov	r0, fp
 80042fa:	f000 f971 	bl	80045e0 <lwip_stricmp>
 80042fe:	b140      	cbz	r0, 8004312 <http_recv+0x446>
    for (loop = 0; loop < NUM_SHTML_EXTENSIONS; loop++) {
 8004300:	4b3a      	ldr	r3, [pc, #232]	; (80043ec <http_recv+0x520>)
 8004302:	4553      	cmp	r3, sl
 8004304:	d1f6      	bne.n	80042f4 <http_recv+0x428>
    if (param != NULL) {
 8004306:	9a01      	ldr	r2, [sp, #4]
 8004308:	2a00      	cmp	r2, #0
 800430a:	d09a      	beq.n	8004242 <http_recv+0x376>
      *param = '?';
 800430c:	233f      	movs	r3, #63	; 0x3f
 800430e:	7013      	strb	r3, [r2, #0]
 8004310:	e797      	b.n	8004242 <http_recv+0x376>
        tag_check = 1;
 8004312:	f04f 0901 	mov.w	r9, #1
 8004316:	e7f6      	b.n	8004306 <http_recv+0x43a>
  struct http_ssi_state *ret = HTTP_ALLOC_SSI_STATE();
 8004318:	20e0      	movs	r0, #224	; 0xe0
 800431a:	f000 fb35 	bl	8004988 <mem_malloc>
  if (ret != NULL) {
 800431e:	4681      	mov	r9, r0
 8004320:	2800      	cmp	r0, #0
 8004322:	d096      	beq.n	8004252 <http_recv+0x386>
    memset(ret, 0, sizeof(struct http_ssi_state));
 8004324:	22e0      	movs	r2, #224	; 0xe0
 8004326:	2100      	movs	r1, #0
 8004328:	f007 f87e 	bl	800b428 <memset>
        ssi->parsed = file->data;
 800432c:	f8d8 3000 	ldr.w	r3, [r8]
 8004330:	f8c9 3000 	str.w	r3, [r9]
        ssi->parse_left = file->len;
 8004334:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8004338:	f8c9 3008 	str.w	r3, [r9, #8]
        ssi->tag_end = file->data;
 800433c:	f8d8 3000 	ldr.w	r3, [r8]
 8004340:	f8c9 3004 	str.w	r3, [r9, #4]
        hs->ssi = ssi;
 8004344:	f8c5 902c 	str.w	r9, [r5, #44]	; 0x2c
 8004348:	e783      	b.n	8004252 <http_recv+0x386>
    LWIP_ASSERT("File length must be positive!", (file->len >= 0));
 800434a:	4b29      	ldr	r3, [pc, #164]	; (80043f0 <http_recv+0x524>)
 800434c:	f640 1234 	movw	r2, #2356	; 0x934
 8004350:	4928      	ldr	r1, [pc, #160]	; (80043f4 <http_recv+0x528>)
 8004352:	4829      	ldr	r0, [pc, #164]	; (80043f8 <http_recv+0x52c>)
 8004354:	f007 f870 	bl	800b438 <iprintf>
 8004358:	e784      	b.n	8004264 <http_recv+0x398>
    LWIP_ASSERT("HTTP headers not included in file system",
 800435a:	4b25      	ldr	r3, [pc, #148]	; (80043f0 <http_recv+0x524>)
 800435c:	f640 1243 	movw	r2, #2371	; 0x943
 8004360:	4926      	ldr	r1, [pc, #152]	; (80043fc <http_recv+0x530>)
 8004362:	4825      	ldr	r0, [pc, #148]	; (80043f8 <http_recv+0x52c>)
 8004364:	f007 f868 	bl	800b438 <iprintf>
    if (is_09 && ((hs->handle->flags & FS_FILE_FLAGS_HEADER_INCLUDED) != 0)) {
 8004368:	9b02      	ldr	r3, [sp, #8]
 800436a:	2b00      	cmp	r3, #0
 800436c:	d088      	beq.n	8004280 <http_recv+0x3b4>
 800436e:	696b      	ldr	r3, [r5, #20]
 8004370:	7c1b      	ldrb	r3, [r3, #16]
 8004372:	f013 0f01 	tst.w	r3, #1
 8004376:	d083      	beq.n	8004280 <http_recv+0x3b4>
      char *file_start = lwip_strnstr(hs->file, CRLF CRLF, hs->left);
 8004378:	6a6a      	ldr	r2, [r5, #36]	; 0x24
 800437a:	4921      	ldr	r1, [pc, #132]	; (8004400 <http_recv+0x534>)
 800437c:	69a8      	ldr	r0, [r5, #24]
 800437e:	f000 f900 	bl	8004582 <lwip_strnstr>
      if (file_start != NULL) {
 8004382:	4603      	mov	r3, r0
 8004384:	2800      	cmp	r0, #0
 8004386:	f43f af7b 	beq.w	8004280 <http_recv+0x3b4>
        int diff = file_start + 4 - hs->file;
 800438a:	3304      	adds	r3, #4
 800438c:	69aa      	ldr	r2, [r5, #24]
 800438e:	1a9a      	subs	r2, r3, r2
        hs->file += diff;
 8004390:	61ab      	str	r3, [r5, #24]
        hs->left -= (u32_t)diff;
 8004392:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8004394:	1a9b      	subs	r3, r3, r2
 8004396:	626b      	str	r3, [r5, #36]	; 0x24
 8004398:	e772      	b.n	8004280 <http_recv+0x3b4>
      } else if (parsed == ERR_ARG) {
 800439a:	f117 0f10 	cmn.w	r7, #16
 800439e:	f47f adb5 	bne.w	8003f0c <http_recv+0x40>
        http_close_conn(pcb, hs);
 80043a2:	4629      	mov	r1, r5
 80043a4:	4630      	mov	r0, r6
 80043a6:	f7ff fa85 	bl	80038b4 <http_close_conn>
 80043aa:	e5af      	b.n	8003f0c <http_recv+0x40>
      pbuf_free(p);
 80043ac:	4620      	mov	r0, r4
 80043ae:	f000 fefb 	bl	80051a8 <pbuf_free>
      if (parsed == ERR_OK) {
 80043b2:	e5ab      	b.n	8003f0c <http_recv+0x40>
      pbuf_free(p);
 80043b4:	4620      	mov	r0, r4
 80043b6:	f000 fef7 	bl	80051a8 <pbuf_free>
      } else if (parsed == ERR_ARG) {
 80043ba:	e7f2      	b.n	80043a2 <http_recv+0x4d6>
      pbuf_free(p);
 80043bc:	4620      	mov	r0, r4
 80043be:	f000 fef3 	bl	80051a8 <pbuf_free>
      } else if (parsed == ERR_ARG) {
 80043c2:	e5a3      	b.n	8003f0c <http_recv+0x40>
        if (hs->req != NULL) {
 80043c4:	6a28      	ldr	r0, [r5, #32]
 80043c6:	2800      	cmp	r0, #0
 80043c8:	d0f8      	beq.n	80043bc <http_recv+0x4f0>
    return ERR_USE;
 80043ca:	f06f 0707 	mvn.w	r7, #7
 80043ce:	e5f9      	b.n	8003fc4 <http_recv+0xf8>
    LWIP_ASSERT("file->data != NULL", file->data != NULL);
 80043d0:	6803      	ldr	r3, [r0, #0]
 80043d2:	2b00      	cmp	r3, #0
 80043d4:	f47f af3d 	bne.w	8004252 <http_recv+0x386>
 80043d8:	f04f 0900 	mov.w	r9, #0
 80043dc:	4b04      	ldr	r3, [pc, #16]	; (80043f0 <http_recv+0x524>)
 80043de:	f640 120b 	movw	r2, #2315	; 0x90b
 80043e2:	4908      	ldr	r1, [pc, #32]	; (8004404 <http_recv+0x538>)
 80043e4:	4804      	ldr	r0, [pc, #16]	; (80043f8 <http_recv+0x52c>)
 80043e6:	f007 f827 	bl	800b438 <iprintf>
 80043ea:	e72f      	b.n	800424c <http_recv+0x380>
 80043ec:	0801063c 	.word	0x0801063c
 80043f0:	08010388 	.word	0x08010388
 80043f4:	080104a4 	.word	0x080104a4
 80043f8:	0800cb24 	.word	0x0800cb24
 80043fc:	080104c4 	.word	0x080104c4
 8004400:	08010488 	.word	0x08010488
 8004404:	08010490 	.word	0x08010490
 8004408:	08010628 	.word	0x08010628

0800440c <http_err>:
  if (hs != NULL) {
 800440c:	b138      	cbz	r0, 800441e <http_err+0x12>
{
 800440e:	b510      	push	{r4, lr}
 8004410:	4604      	mov	r4, r0
    http_state_eof(hs);
 8004412:	f7ff f9db 	bl	80037cc <http_state_eof>
    HTTP_FREE_HTTP_STATE(hs);
 8004416:	4620      	mov	r0, r4
 8004418:	f000 f93a 	bl	8004690 <mem_free>
}
 800441c:	bd10      	pop	{r4, pc}
 800441e:	4770      	bx	lr

08004420 <httpd_init>:
 * @ingroup httpd
 * Initialize the httpd: set up a listening PCB and bind it to the defined port
 */
void
httpd_init(void)
{
 8004420:	b510      	push	{r4, lr}
#endif
  LWIP_DEBUGF(HTTPD_DEBUG, ("httpd_init\n"));

  /* LWIP_ASSERT_CORE_LOCKED(); is checked by tcp_new() */

  pcb = altcp_tcp_new_ip_type(IPADDR_TYPE_ANY);
 8004422:	202e      	movs	r0, #46	; 0x2e
 8004424:	f001 fed0 	bl	80061c8 <tcp_new_ip_type>
  LWIP_ASSERT("httpd_init: tcp_new failed", pcb != NULL);
 8004428:	b1a0      	cbz	r0, 8004454 <httpd_init+0x34>
 800442a:	4604      	mov	r4, r0
    altcp_setprio(pcb, HTTPD_TCP_PRIO);
 800442c:	2101      	movs	r1, #1
 800442e:	f001 fb71 	bl	8005b14 <tcp_setprio>
    err = altcp_bind(pcb, IP_ANY_TYPE, port);
 8004432:	2250      	movs	r2, #80	; 0x50
 8004434:	4913      	ldr	r1, [pc, #76]	; (8004484 <httpd_init+0x64>)
 8004436:	4620      	mov	r0, r4
 8004438:	f001 fa0a 	bl	8005850 <tcp_bind>
    LWIP_ASSERT("httpd_init: tcp_bind failed", err == ERR_OK);
 800443c:	b990      	cbnz	r0, 8004464 <httpd_init+0x44>
    pcb = altcp_listen(pcb);
 800443e:	21ff      	movs	r1, #255	; 0xff
 8004440:	4620      	mov	r0, r4
 8004442:	f001 fad3 	bl	80059ec <tcp_listen_with_backlog>
    LWIP_ASSERT("httpd_init: tcp_listen failed", pcb != NULL);
 8004446:	4604      	mov	r4, r0
 8004448:	b1a0      	cbz	r0, 8004474 <httpd_init+0x54>
    altcp_accept(pcb, http_accept);
 800444a:	490f      	ldr	r1, [pc, #60]	; (8004488 <httpd_init+0x68>)
 800444c:	4620      	mov	r0, r4
 800444e:	f001 fbe9 	bl	8005c24 <tcp_accept>
  httpd_init_pcb(pcb, HTTPD_SERVER_PORT);
}
 8004452:	bd10      	pop	{r4, pc}
  LWIP_ASSERT("httpd_init: tcp_new failed", pcb != NULL);
 8004454:	4b0d      	ldr	r3, [pc, #52]	; (800448c <httpd_init+0x6c>)
 8004456:	f640 2272 	movw	r2, #2674	; 0xa72
 800445a:	490d      	ldr	r1, [pc, #52]	; (8004490 <httpd_init+0x70>)
 800445c:	480d      	ldr	r0, [pc, #52]	; (8004494 <httpd_init+0x74>)
 800445e:	f006 ffeb 	bl	800b438 <iprintf>
  if (pcb) {
 8004462:	e7f6      	b.n	8004452 <httpd_init+0x32>
    LWIP_ASSERT("httpd_init: tcp_bind failed", err == ERR_OK);
 8004464:	4b09      	ldr	r3, [pc, #36]	; (800448c <httpd_init+0x6c>)
 8004466:	f640 2257 	movw	r2, #2647	; 0xa57
 800446a:	490b      	ldr	r1, [pc, #44]	; (8004498 <httpd_init+0x78>)
 800446c:	4809      	ldr	r0, [pc, #36]	; (8004494 <httpd_init+0x74>)
 800446e:	f006 ffe3 	bl	800b438 <iprintf>
 8004472:	e7e4      	b.n	800443e <httpd_init+0x1e>
    LWIP_ASSERT("httpd_init: tcp_listen failed", pcb != NULL);
 8004474:	4b05      	ldr	r3, [pc, #20]	; (800448c <httpd_init+0x6c>)
 8004476:	f640 2259 	movw	r2, #2649	; 0xa59
 800447a:	4908      	ldr	r1, [pc, #32]	; (800449c <httpd_init+0x7c>)
 800447c:	4805      	ldr	r0, [pc, #20]	; (8004494 <httpd_init+0x74>)
 800447e:	f006 ffdb 	bl	800b438 <iprintf>
 8004482:	e7e2      	b.n	800444a <httpd_init+0x2a>
 8004484:	08012434 	.word	0x08012434
 8004488:	0800383d 	.word	0x0800383d
 800448c:	08010388 	.word	0x08010388
 8004490:	080104f0 	.word	0x080104f0
 8004494:	0800cb24 	.word	0x0800cb24
 8004498:	0801050c 	.word	0x0801050c
 800449c:	08010528 	.word	0x08010528

080044a0 <http_set_ssi_handler>:
 * @param tags an array of SSI tag strings to search for in SSI-enabled files
 * @param num_tags number of tags in the 'tags' array
 */
void
http_set_ssi_handler(tSSIHandler ssi_handler, const char **tags, int num_tags)
{
 80044a0:	b570      	push	{r4, r5, r6, lr}
 80044a2:	460d      	mov	r5, r1
 80044a4:	4614      	mov	r4, r2
  LWIP_DEBUGF(HTTPD_DEBUG, ("http_set_ssi_handler\n"));

  LWIP_ASSERT("no ssi_handler given", ssi_handler != NULL);
 80044a6:	4606      	mov	r6, r0
 80044a8:	b148      	cbz	r0, 80044be <http_set_ssi_handler+0x1e>
  httpd_ssi_handler = ssi_handler;
 80044aa:	4b11      	ldr	r3, [pc, #68]	; (80044f0 <http_set_ssi_handler+0x50>)
 80044ac:	601e      	str	r6, [r3, #0]

#if LWIP_HTTPD_SSI_RAW
  LWIP_UNUSED_ARG(tags);
  LWIP_UNUSED_ARG(num_tags);
#else /* LWIP_HTTPD_SSI_RAW */
  LWIP_ASSERT("no tags given", tags != NULL);
 80044ae:	b175      	cbz	r5, 80044ce <http_set_ssi_handler+0x2e>
  LWIP_ASSERT("invalid number of tags", num_tags > 0);
 80044b0:	2c00      	cmp	r4, #0
 80044b2:	dd14      	ble.n	80044de <http_set_ssi_handler+0x3e>

  httpd_tags = tags;
 80044b4:	4b0f      	ldr	r3, [pc, #60]	; (80044f4 <http_set_ssi_handler+0x54>)
 80044b6:	601d      	str	r5, [r3, #0]
  httpd_num_tags = num_tags;
 80044b8:	4b0f      	ldr	r3, [pc, #60]	; (80044f8 <http_set_ssi_handler+0x58>)
 80044ba:	601c      	str	r4, [r3, #0]
#endif /* !LWIP_HTTPD_SSI_RAW */
}
 80044bc:	bd70      	pop	{r4, r5, r6, pc}
  LWIP_ASSERT("no ssi_handler given", ssi_handler != NULL);
 80044be:	4b0f      	ldr	r3, [pc, #60]	; (80044fc <http_set_ssi_handler+0x5c>)
 80044c0:	f640 2297 	movw	r2, #2711	; 0xa97
 80044c4:	490e      	ldr	r1, [pc, #56]	; (8004500 <http_set_ssi_handler+0x60>)
 80044c6:	480f      	ldr	r0, [pc, #60]	; (8004504 <http_set_ssi_handler+0x64>)
 80044c8:	f006 ffb6 	bl	800b438 <iprintf>
 80044cc:	e7ed      	b.n	80044aa <http_set_ssi_handler+0xa>
  LWIP_ASSERT("no tags given", tags != NULL);
 80044ce:	4b0b      	ldr	r3, [pc, #44]	; (80044fc <http_set_ssi_handler+0x5c>)
 80044d0:	f640 229e 	movw	r2, #2718	; 0xa9e
 80044d4:	490c      	ldr	r1, [pc, #48]	; (8004508 <http_set_ssi_handler+0x68>)
 80044d6:	480b      	ldr	r0, [pc, #44]	; (8004504 <http_set_ssi_handler+0x64>)
 80044d8:	f006 ffae 	bl	800b438 <iprintf>
 80044dc:	e7e8      	b.n	80044b0 <http_set_ssi_handler+0x10>
  LWIP_ASSERT("invalid number of tags", num_tags > 0);
 80044de:	4b07      	ldr	r3, [pc, #28]	; (80044fc <http_set_ssi_handler+0x5c>)
 80044e0:	f640 229f 	movw	r2, #2719	; 0xa9f
 80044e4:	4909      	ldr	r1, [pc, #36]	; (800450c <http_set_ssi_handler+0x6c>)
 80044e6:	4807      	ldr	r0, [pc, #28]	; (8004504 <http_set_ssi_handler+0x64>)
 80044e8:	f006 ffa6 	bl	800b438 <iprintf>
 80044ec:	e7e2      	b.n	80044b4 <http_set_ssi_handler+0x14>
 80044ee:	bf00      	nop
 80044f0:	20005720 	.word	0x20005720
 80044f4:	20005724 	.word	0x20005724
 80044f8:	2000531c 	.word	0x2000531c
 80044fc:	08010388 	.word	0x08010388
 8004500:	08010548 	.word	0x08010548
 8004504:	0800cb24 	.word	0x0800cb24
 8004508:	08010560 	.word	0x08010560
 800450c:	08010570 	.word	0x08010570

08004510 <http_set_cgi_handlers>:
 * @param cgis an array of CGI filenames/handler functions
 * @param num_handlers number of elements in the 'cgis' array
 */
void
http_set_cgi_handlers(const tCGI *cgis, int num_handlers)
{
 8004510:	b538      	push	{r3, r4, r5, lr}
 8004512:	460c      	mov	r4, r1
  LWIP_ASSERT("no cgis given", cgis != NULL);
 8004514:	4605      	mov	r5, r0
 8004516:	b130      	cbz	r0, 8004526 <http_set_cgi_handlers+0x16>
  LWIP_ASSERT("invalid number of handlers", num_handlers > 0);
 8004518:	2c00      	cmp	r4, #0
 800451a:	dd0c      	ble.n	8004536 <http_set_cgi_handlers+0x26>

  httpd_cgis = cgis;
 800451c:	4b0a      	ldr	r3, [pc, #40]	; (8004548 <http_set_cgi_handlers+0x38>)
 800451e:	601d      	str	r5, [r3, #0]
  httpd_num_cgis = num_handlers;
 8004520:	4b0a      	ldr	r3, [pc, #40]	; (800454c <http_set_cgi_handlers+0x3c>)
 8004522:	601c      	str	r4, [r3, #0]
}
 8004524:	bd38      	pop	{r3, r4, r5, pc}
  LWIP_ASSERT("no cgis given", cgis != NULL);
 8004526:	4b0a      	ldr	r3, [pc, #40]	; (8004550 <http_set_cgi_handlers+0x40>)
 8004528:	f640 22b2 	movw	r2, #2738	; 0xab2
 800452c:	4909      	ldr	r1, [pc, #36]	; (8004554 <http_set_cgi_handlers+0x44>)
 800452e:	480a      	ldr	r0, [pc, #40]	; (8004558 <http_set_cgi_handlers+0x48>)
 8004530:	f006 ff82 	bl	800b438 <iprintf>
 8004534:	e7f0      	b.n	8004518 <http_set_cgi_handlers+0x8>
  LWIP_ASSERT("invalid number of handlers", num_handlers > 0);
 8004536:	4b06      	ldr	r3, [pc, #24]	; (8004550 <http_set_cgi_handlers+0x40>)
 8004538:	f640 22b3 	movw	r2, #2739	; 0xab3
 800453c:	4907      	ldr	r1, [pc, #28]	; (800455c <http_set_cgi_handlers+0x4c>)
 800453e:	4806      	ldr	r0, [pc, #24]	; (8004558 <http_set_cgi_handlers+0x48>)
 8004540:	f006 ff7a 	bl	800b438 <iprintf>
 8004544:	e7ea      	b.n	800451c <http_set_cgi_handlers+0xc>
 8004546:	bf00      	nop
 8004548:	20005314 	.word	0x20005314
 800454c:	20005318 	.word	0x20005318
 8004550:	08010388 	.word	0x08010388
 8004554:	08010588 	.word	0x08010588
 8004558:	0800cb24 	.word	0x0800cb24
 800455c:	08010598 	.word	0x08010598

08004560 <lwip_htons>:
 * @return n in network byte order
 */
u16_t
lwip_htons(u16_t n)
{
  return PP_HTONS(n);
 8004560:	0a03      	lsrs	r3, r0, #8
 8004562:	ea43 2000 	orr.w	r0, r3, r0, lsl #8
}
 8004566:	b280      	uxth	r0, r0
 8004568:	4770      	bx	lr

0800456a <lwip_htonl>:
 * @return n in network byte order
 */
u32_t
lwip_htonl(u32_t n)
{
  return PP_HTONL(n);
 800456a:	0e03      	lsrs	r3, r0, #24
 800456c:	ea43 6300 	orr.w	r3, r3, r0, lsl #24
 8004570:	0202      	lsls	r2, r0, #8
 8004572:	f402 027f 	and.w	r2, r2, #16711680	; 0xff0000
 8004576:	4313      	orrs	r3, r2
 8004578:	0a00      	lsrs	r0, r0, #8
 800457a:	f400 407f 	and.w	r0, r0, #65280	; 0xff00
}
 800457e:	4318      	orrs	r0, r3
 8004580:	4770      	bx	lr

08004582 <lwip_strnstr>:
 * lwIP default implementation for strnstr() non-standard function.
 * This can be \#defined to strnstr() depending on your platform port.
 */
char *
lwip_strnstr(const char *buffer, const char *token, size_t n)
{
 8004582:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004586:	4604      	mov	r4, r0
 8004588:	460f      	mov	r7, r1
 800458a:	4615      	mov	r5, r2
  const char *p;
  size_t tokenlen = strlen(token);
 800458c:	4608      	mov	r0, r1
 800458e:	f7fb fe39 	bl	8000204 <strlen>
  if (tokenlen == 0) {
 8004592:	b1e0      	cbz	r0, 80045ce <lwip_strnstr+0x4c>
 8004594:	4680      	mov	r8, r0
    return LWIP_CONST_CAST(char *, buffer);
  }
  for (p = buffer; *p && (p + tokenlen <= buffer + n); p++) {
 8004596:	7823      	ldrb	r3, [r4, #0]
 8004598:	b1e3      	cbz	r3, 80045d4 <lwip_strnstr+0x52>
 800459a:	4425      	add	r5, r4
 800459c:	1822      	adds	r2, r4, r0
 800459e:	4295      	cmp	r5, r2
 80045a0:	d31a      	bcc.n	80045d8 <lwip_strnstr+0x56>
    if ((*p == *token) && (strncmp(p, token, tokenlen) == 0)) {
 80045a2:	783e      	ldrb	r6, [r7, #0]
 80045a4:	e006      	b.n	80045b4 <lwip_strnstr+0x32>
  for (p = buffer; *p && (p + tokenlen <= buffer + n); p++) {
 80045a6:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 80045aa:	b1bb      	cbz	r3, 80045dc <lwip_strnstr+0x5a>
 80045ac:	eb04 0208 	add.w	r2, r4, r8
 80045b0:	4295      	cmp	r5, r2
 80045b2:	d30a      	bcc.n	80045ca <lwip_strnstr+0x48>
    if ((*p == *token) && (strncmp(p, token, tokenlen) == 0)) {
 80045b4:	429e      	cmp	r6, r3
 80045b6:	d1f6      	bne.n	80045a6 <lwip_strnstr+0x24>
 80045b8:	4642      	mov	r2, r8
 80045ba:	4639      	mov	r1, r7
 80045bc:	4620      	mov	r0, r4
 80045be:	f006 ffd5 	bl	800b56c <strncmp>
 80045c2:	2800      	cmp	r0, #0
 80045c4:	d1ef      	bne.n	80045a6 <lwip_strnstr+0x24>
 80045c6:	4620      	mov	r0, r4
 80045c8:	e002      	b.n	80045d0 <lwip_strnstr+0x4e>
      return LWIP_CONST_CAST(char *, p);
    }
  }
  return NULL;
 80045ca:	2000      	movs	r0, #0
 80045cc:	e000      	b.n	80045d0 <lwip_strnstr+0x4e>
    return LWIP_CONST_CAST(char *, buffer);
 80045ce:	4620      	mov	r0, r4
}
 80045d0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  return NULL;
 80045d4:	2000      	movs	r0, #0
 80045d6:	e7fb      	b.n	80045d0 <lwip_strnstr+0x4e>
 80045d8:	2000      	movs	r0, #0
 80045da:	e7f9      	b.n	80045d0 <lwip_strnstr+0x4e>
 80045dc:	2000      	movs	r0, #0
 80045de:	e7f7      	b.n	80045d0 <lwip_strnstr+0x4e>

080045e0 <lwip_stricmp>:
 * lwIP default implementation for stricmp() non-standard function.
 * This can be \#defined to stricmp() depending on your platform port.
 */
int
lwip_stricmp(const char *str1, const char *str2)
{
 80045e0:	e007      	b.n	80045f2 <lwip_stricmp+0x12>
        /* characters are not equal but none is in the alphabet range */
        return 1;
      }
    }
  } while (c1 != 0);
  return 0;
 80045e2:	2000      	movs	r0, #0
 80045e4:	e000      	b.n	80045e8 <lwip_stricmp+0x8>
        return 1;
 80045e6:	2001      	movs	r0, #1
}
 80045e8:	f85d fb04 	ldr.w	pc, [sp], #4
          return 1;
 80045ec:	2001      	movs	r0, #1
 80045ee:	e7fb      	b.n	80045e8 <lwip_stricmp+0x8>
  } while (c1 != 0);
 80045f0:	b1e2      	cbz	r2, 800462c <lwip_stricmp+0x4c>
    c1 = *str1++;
 80045f2:	f810 2b01 	ldrb.w	r2, [r0], #1
    c2 = *str2++;
 80045f6:	f811 3b01 	ldrb.w	r3, [r1], #1
    if (c1 != c2) {
 80045fa:	429a      	cmp	r2, r3
 80045fc:	d0f8      	beq.n	80045f0 <lwip_stricmp+0x10>
{
 80045fe:	b500      	push	{lr}
      char c1_upc = c1 | 0x20;
 8004600:	f042 0e20 	orr.w	lr, r2, #32
      if ((c1_upc >= 'a') && (c1_upc <= 'z')) {
 8004604:	f1ae 0c61 	sub.w	ip, lr, #97	; 0x61
 8004608:	fa5f fc8c 	uxtb.w	ip, ip
 800460c:	f1bc 0f19 	cmp.w	ip, #25
 8004610:	d8e9      	bhi.n	80045e6 <lwip_stricmp+0x6>
        if (c1_upc != c2_upc) {
 8004612:	f043 0320 	orr.w	r3, r3, #32
 8004616:	459e      	cmp	lr, r3
 8004618:	d1e8      	bne.n	80045ec <lwip_stricmp+0xc>
  } while (c1 != 0);
 800461a:	2a00      	cmp	r2, #0
 800461c:	d0e1      	beq.n	80045e2 <lwip_stricmp+0x2>
    c1 = *str1++;
 800461e:	f810 2b01 	ldrb.w	r2, [r0], #1
    c2 = *str2++;
 8004622:	f811 3b01 	ldrb.w	r3, [r1], #1
    if (c1 != c2) {
 8004626:	429a      	cmp	r2, r3
 8004628:	d1ea      	bne.n	8004600 <lwip_stricmp+0x20>
 800462a:	e7f6      	b.n	800461a <lwip_stricmp+0x3a>
  return 0;
 800462c:	2000      	movs	r0, #0
}
 800462e:	4770      	bx	lr

08004630 <lwip_init>:
 * Initialize all modules.
 * Use this in NO_SYS mode. Use tcpip_init() otherwise.
 */
void
lwip_init(void)
{
 8004630:	b508      	push	{r3, lr}
  /* Modules initialization */
  stats_init();
#if !NO_SYS
  sys_init();
#endif /* !NO_SYS */
  mem_init();
 8004632:	f000 f80b 	bl	800464c <mem_init>
  memp_init();
 8004636:	f000 faa5 	bl	8004b84 <memp_init>
  pbuf_init();
  netif_init();
 800463a:	f000 fb71 	bl	8004d20 <netif_init>
#endif /* LWIP_IPV4 */
#if LWIP_RAW
  raw_init();
#endif /* LWIP_RAW */
#if LWIP_UDP
  udp_init();
 800463e:	f005 f98d 	bl	800995c <udp_init>
#endif /* LWIP_UDP */
#if LWIP_TCP
  tcp_init();
 8004642:	f001 f8e1 	bl	8005808 <tcp_init>
#if PPP_SUPPORT
  ppp_init();
#endif

#if LWIP_TIMERS
  sys_timeouts_init();
 8004646:	f005 f945 	bl	80098d4 <sys_timeouts_init>
#endif /* LWIP_TIMERS */
}
 800464a:	bd08      	pop	{r3, pc}

0800464c <mem_init>:

  LWIP_ASSERT("Sanity check alignment",
              (SIZEOF_STRUCT_MEM & (MEM_ALIGNMENT - 1)) == 0);

  /* align the heap */
  ram = (u8_t *)LWIP_MEM_ALIGN(LWIP_RAM_HEAP_POINTER);
 800464c:	4b0c      	ldr	r3, [pc, #48]	; (8004680 <mem_init+0x34>)
 800464e:	f023 0303 	bic.w	r3, r3, #3
 8004652:	4a0c      	ldr	r2, [pc, #48]	; (8004684 <mem_init+0x38>)
 8004654:	6013      	str	r3, [r2, #0]
  /* initialize the start of the heap */
  mem = (struct mem *)(void *)ram;
  mem->next = MEM_SIZE_ALIGNED;
 8004656:	f44f 5120 	mov.w	r1, #10240	; 0x2800
 800465a:	8019      	strh	r1, [r3, #0]
  mem->prev = 0;
 800465c:	2200      	movs	r2, #0
 800465e:	805a      	strh	r2, [r3, #2]
  mem->used = 0;
 8004660:	711a      	strb	r2, [r3, #4]
  return (struct mem *)(void *)&ram[ptr];
 8004662:	1858      	adds	r0, r3, r1
  /* initialize the end of the heap */
  ram_end = ptr_to_mem(MEM_SIZE_ALIGNED);
 8004664:	4a08      	ldr	r2, [pc, #32]	; (8004688 <mem_init+0x3c>)
 8004666:	6010      	str	r0, [r2, #0]
  ram_end->used = 1;
 8004668:	f503 5200 	add.w	r2, r3, #8192	; 0x2000
 800466c:	2001      	movs	r0, #1
 800466e:	f882 0804 	strb.w	r0, [r2, #2052]	; 0x804
  ram_end->next = MEM_SIZE_ALIGNED;
 8004672:	f8a2 1800 	strh.w	r1, [r2, #2048]	; 0x800
  ram_end->prev = MEM_SIZE_ALIGNED;
 8004676:	f8a2 1802 	strh.w	r1, [r2, #2050]	; 0x802
  MEM_SANITY();

  /* initialize the lowest-free pointer to the start of the heap */
  lfree = (struct mem *)(void *)ram;
 800467a:	4a04      	ldr	r2, [pc, #16]	; (800468c <mem_init+0x40>)
 800467c:	6013      	str	r3, [r2, #0]
  MEM_STATS_AVAIL(avail, MEM_SIZE_ALIGNED);

  if (sys_mutex_new(&mem_mutex) != ERR_OK) {
    LWIP_ASSERT("failed to create mem_mutex", 0);
  }
}
 800467e:	4770      	bx	lr
 8004680:	2000574f 	.word	0x2000574f
 8004684:	20005744 	.word	0x20005744
 8004688:	20005748 	.word	0x20005748
 800468c:	20005740 	.word	0x20005740

08004690 <mem_free>:
mem_free(void *rmem)
{
  struct mem *mem;
  LWIP_MEM_FREE_DECL_PROTECT();

  if (rmem == NULL) {
 8004690:	2800      	cmp	r0, #0
 8004692:	f000 80ad 	beq.w	80047f0 <mem_free+0x160>
{
 8004696:	b538      	push	{r3, r4, r5, lr}
 8004698:	4604      	mov	r4, r0
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("mem_free(p == NULL) was called.\n"));
    return;
  }
  if ((((mem_ptr_t)rmem) & (MEM_ALIGNMENT - 1)) != 0) {
 800469a:	f010 0f03 	tst.w	r0, #3
 800469e:	d169      	bne.n	8004774 <mem_free+0xe4>
    return;
  }

  /* Get the corresponding struct mem: */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 80046a0:	f1a0 0508 	sub.w	r5, r0, #8

  if ((u8_t *)mem < ram || (u8_t *)rmem + MIN_SIZE_ALIGNED > (u8_t *)ram_end) {
 80046a4:	4b53      	ldr	r3, [pc, #332]	; (80047f4 <mem_free+0x164>)
 80046a6:	681b      	ldr	r3, [r3, #0]
 80046a8:	42ab      	cmp	r3, r5
 80046aa:	d86b      	bhi.n	8004784 <mem_free+0xf4>
 80046ac:	4a52      	ldr	r2, [pc, #328]	; (80047f8 <mem_free+0x168>)
 80046ae:	6812      	ldr	r2, [r2, #0]
 80046b0:	f100 010c 	add.w	r1, r0, #12
 80046b4:	428a      	cmp	r2, r1
 80046b6:	d365      	bcc.n	8004784 <mem_free+0xf4>
  mem_overflow_check_element(mem);
#endif
  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
  /* mem has to be in a used state */
  if (!mem->used) {
 80046b8:	f810 1c04 	ldrb.w	r1, [r0, #-4]
 80046bc:	2900      	cmp	r1, #0
 80046be:	d069      	beq.n	8004794 <mem_free+0x104>
  nmem = ptr_to_mem(mem->next);
 80046c0:	f830 1c08 	ldrh.w	r1, [r0, #-8]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 80046c4:	f5b1 5f20 	cmp.w	r1, #10240	; 0x2800
 80046c8:	f200 808a 	bhi.w	80047e0 <mem_free+0x150>
  pmem = ptr_to_mem(mem->prev);
 80046cc:	f830 cc06 	ldrh.w	ip, [r0, #-6]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 80046d0:	f5bc 5f20 	cmp.w	ip, #10240	; 0x2800
 80046d4:	f200 8084 	bhi.w	80047e0 <mem_free+0x150>
  return (mem_size_t)((u8_t *)mem - ram);
 80046d8:	1ae8      	subs	r0, r5, r3
 80046da:	b280      	uxth	r0, r0
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 80046dc:	4584      	cmp	ip, r0
 80046de:	d003      	beq.n	80046e8 <mem_free+0x58>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 80046e0:	f833 c00c 	ldrh.w	ip, [r3, ip]
 80046e4:	4584      	cmp	ip, r0
 80046e6:	d17b      	bne.n	80047e0 <mem_free+0x150>
  return (struct mem *)(void *)&ram[ptr];
 80046e8:	440b      	add	r3, r1
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 80046ea:	429a      	cmp	r2, r3
 80046ec:	d002      	beq.n	80046f4 <mem_free+0x64>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 80046ee:	885b      	ldrh	r3, [r3, #2]
 80046f0:	4283      	cmp	r3, r0
 80046f2:	d175      	bne.n	80047e0 <mem_free+0x150>
    MEM_STATS_INC_LOCKED(illegal);
    return;
  }

  /* mem is now unused. */
  mem->used = 0;
 80046f4:	2300      	movs	r3, #0
 80046f6:	f804 3c04 	strb.w	r3, [r4, #-4]

  if (mem < lfree) {
 80046fa:	4b40      	ldr	r3, [pc, #256]	; (80047fc <mem_free+0x16c>)
 80046fc:	681b      	ldr	r3, [r3, #0]
 80046fe:	42ab      	cmp	r3, r5
 8004700:	d901      	bls.n	8004706 <mem_free+0x76>
    /* the newly freed struct is now the lowest */
    lfree = mem;
 8004702:	4b3e      	ldr	r3, [pc, #248]	; (80047fc <mem_free+0x16c>)
 8004704:	601d      	str	r5, [r3, #0]
  LWIP_ASSERT("plug_holes: mem < ram_end", (u8_t *)mem < (u8_t *)ram_end);
 8004706:	42aa      	cmp	r2, r5
 8004708:	d94c      	bls.n	80047a4 <mem_free+0x114>
  return (struct mem *)(void *)&ram[ptr];
 800470a:	4b3a      	ldr	r3, [pc, #232]	; (80047f4 <mem_free+0x164>)
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	f834 1c08 	ldrh.w	r1, [r4, #-8]
 8004712:	185a      	adds	r2, r3, r1
  if (mem != nmem && nmem->used == 0 && (u8_t *)nmem != (u8_t *)ram_end) {
 8004714:	4295      	cmp	r5, r2
 8004716:	d015      	beq.n	8004744 <mem_free+0xb4>
 8004718:	7910      	ldrb	r0, [r2, #4]
 800471a:	b998      	cbnz	r0, 8004744 <mem_free+0xb4>
 800471c:	4836      	ldr	r0, [pc, #216]	; (80047f8 <mem_free+0x168>)
 800471e:	6800      	ldr	r0, [r0, #0]
 8004720:	4290      	cmp	r0, r2
 8004722:	d00f      	beq.n	8004744 <mem_free+0xb4>
    if (lfree == nmem) {
 8004724:	4835      	ldr	r0, [pc, #212]	; (80047fc <mem_free+0x16c>)
 8004726:	6800      	ldr	r0, [r0, #0]
 8004728:	4290      	cmp	r0, r2
      lfree = mem;
 800472a:	bf04      	itt	eq
 800472c:	4a33      	ldreq	r2, [pc, #204]	; (80047fc <mem_free+0x16c>)
 800472e:	6015      	streq	r5, [r2, #0]
    mem->next = nmem->next;
 8004730:	5a5a      	ldrh	r2, [r3, r1]
 8004732:	f824 2c08 	strh.w	r2, [r4, #-8]
    if (nmem->next != MEM_SIZE_ALIGNED) {
 8004736:	5a5a      	ldrh	r2, [r3, r1]
 8004738:	f5b2 5f20 	cmp.w	r2, #10240	; 0x2800
 800473c:	d002      	beq.n	8004744 <mem_free+0xb4>
      ptr_to_mem(nmem->next)->prev = mem_to_ptr(mem);
 800473e:	441a      	add	r2, r3
  return (mem_size_t)((u8_t *)mem - ram);
 8004740:	1ae9      	subs	r1, r5, r3
 8004742:	8051      	strh	r1, [r2, #2]
  pmem = ptr_to_mem(mem->prev);
 8004744:	f834 1c06 	ldrh.w	r1, [r4, #-6]
  return (struct mem *)(void *)&ram[ptr];
 8004748:	185a      	adds	r2, r3, r1
  if (pmem != mem && pmem->used == 0) {
 800474a:	4295      	cmp	r5, r2
 800474c:	d021      	beq.n	8004792 <mem_free+0x102>
 800474e:	7910      	ldrb	r0, [r2, #4]
 8004750:	b9f8      	cbnz	r0, 8004792 <mem_free+0x102>
    if (lfree == mem) {
 8004752:	482a      	ldr	r0, [pc, #168]	; (80047fc <mem_free+0x16c>)
 8004754:	6800      	ldr	r0, [r0, #0]
 8004756:	4285      	cmp	r5, r0
      lfree = pmem;
 8004758:	bf04      	itt	eq
 800475a:	4828      	ldreq	r0, [pc, #160]	; (80047fc <mem_free+0x16c>)
 800475c:	6002      	streq	r2, [r0, #0]
    pmem->next = mem->next;
 800475e:	f834 2c08 	ldrh.w	r2, [r4, #-8]
 8004762:	525a      	strh	r2, [r3, r1]
    if (mem->next != MEM_SIZE_ALIGNED) {
 8004764:	f834 2c08 	ldrh.w	r2, [r4, #-8]
 8004768:	f5b2 5f20 	cmp.w	r2, #10240	; 0x2800
 800476c:	d011      	beq.n	8004792 <mem_free+0x102>
      ptr_to_mem(mem->next)->prev = mem_to_ptr(pmem);
 800476e:	4413      	add	r3, r2
 8004770:	8059      	strh	r1, [r3, #2]
  plug_holes(mem);
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
 8004772:	e00e      	b.n	8004792 <mem_free+0x102>
    LWIP_MEM_ILLEGAL_FREE("mem_free: sanity check alignment");
 8004774:	4b22      	ldr	r3, [pc, #136]	; (8004800 <mem_free+0x170>)
 8004776:	f240 2273 	movw	r2, #627	; 0x273
 800477a:	4922      	ldr	r1, [pc, #136]	; (8004804 <mem_free+0x174>)
 800477c:	4822      	ldr	r0, [pc, #136]	; (8004808 <mem_free+0x178>)
 800477e:	f006 fe5b 	bl	800b438 <iprintf>
    return;
 8004782:	e006      	b.n	8004792 <mem_free+0x102>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory");
 8004784:	4b1e      	ldr	r3, [pc, #120]	; (8004800 <mem_free+0x170>)
 8004786:	f240 227f 	movw	r2, #639	; 0x27f
 800478a:	4920      	ldr	r1, [pc, #128]	; (800480c <mem_free+0x17c>)
 800478c:	481e      	ldr	r0, [pc, #120]	; (8004808 <mem_free+0x178>)
 800478e:	f006 fe53 	bl	800b438 <iprintf>
}
 8004792:	bd38      	pop	{r3, r4, r5, pc}
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: double free");
 8004794:	4b1a      	ldr	r3, [pc, #104]	; (8004800 <mem_free+0x170>)
 8004796:	f44f 7223 	mov.w	r2, #652	; 0x28c
 800479a:	491d      	ldr	r1, [pc, #116]	; (8004810 <mem_free+0x180>)
 800479c:	481a      	ldr	r0, [pc, #104]	; (8004808 <mem_free+0x178>)
 800479e:	f006 fe4b 	bl	800b438 <iprintf>
    return;
 80047a2:	e7f6      	b.n	8004792 <mem_free+0x102>
  LWIP_ASSERT("plug_holes: mem < ram_end", (u8_t *)mem < (u8_t *)ram_end);
 80047a4:	4b16      	ldr	r3, [pc, #88]	; (8004800 <mem_free+0x170>)
 80047a6:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 80047aa:	491a      	ldr	r1, [pc, #104]	; (8004814 <mem_free+0x184>)
 80047ac:	4816      	ldr	r0, [pc, #88]	; (8004808 <mem_free+0x178>)
 80047ae:	f006 fe43 	bl	800b438 <iprintf>
  LWIP_ASSERT("plug_holes: mem->used == 0", mem->used == 0);
 80047b2:	f814 3c04 	ldrb.w	r3, [r4, #-4]
 80047b6:	b133      	cbz	r3, 80047c6 <mem_free+0x136>
 80047b8:	4b11      	ldr	r3, [pc, #68]	; (8004800 <mem_free+0x170>)
 80047ba:	f240 12e1 	movw	r2, #481	; 0x1e1
 80047be:	4916      	ldr	r1, [pc, #88]	; (8004818 <mem_free+0x188>)
 80047c0:	4811      	ldr	r0, [pc, #68]	; (8004808 <mem_free+0x178>)
 80047c2:	f006 fe39 	bl	800b438 <iprintf>
  LWIP_ASSERT("plug_holes: mem->next <= MEM_SIZE_ALIGNED", mem->next <= MEM_SIZE_ALIGNED);
 80047c6:	f834 3c08 	ldrh.w	r3, [r4, #-8]
 80047ca:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 80047ce:	d99c      	bls.n	800470a <mem_free+0x7a>
 80047d0:	4b0b      	ldr	r3, [pc, #44]	; (8004800 <mem_free+0x170>)
 80047d2:	f44f 72f2 	mov.w	r2, #484	; 0x1e4
 80047d6:	4911      	ldr	r1, [pc, #68]	; (800481c <mem_free+0x18c>)
 80047d8:	480b      	ldr	r0, [pc, #44]	; (8004808 <mem_free+0x178>)
 80047da:	f006 fe2d 	bl	800b438 <iprintf>
 80047de:	e794      	b.n	800470a <mem_free+0x7a>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: non-linked: double free");
 80047e0:	4b07      	ldr	r3, [pc, #28]	; (8004800 <mem_free+0x170>)
 80047e2:	f240 2295 	movw	r2, #661	; 0x295
 80047e6:	490e      	ldr	r1, [pc, #56]	; (8004820 <mem_free+0x190>)
 80047e8:	4807      	ldr	r0, [pc, #28]	; (8004808 <mem_free+0x178>)
 80047ea:	f006 fe25 	bl	800b438 <iprintf>
    return;
 80047ee:	e7d0      	b.n	8004792 <mem_free+0x102>
 80047f0:	4770      	bx	lr
 80047f2:	bf00      	nop
 80047f4:	20005744 	.word	0x20005744
 80047f8:	20005748 	.word	0x20005748
 80047fc:	20005740 	.word	0x20005740
 8004800:	08010674 	.word	0x08010674
 8004804:	080106a4 	.word	0x080106a4
 8004808:	0800cb24 	.word	0x0800cb24
 800480c:	080106c8 	.word	0x080106c8
 8004810:	080106e4 	.word	0x080106e4
 8004814:	0801070c 	.word	0x0801070c
 8004818:	08010728 	.word	0x08010728
 800481c:	08010744 	.word	0x08010744
 8004820:	08010770 	.word	0x08010770

08004824 <mem_trim>:
 *         or NULL if newsize is > old size, in which case rmem is NOT touched
 *         or freed!
 */
void *
mem_trim(void *rmem, mem_size_t new_size)
{
 8004824:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004828:	4605      	mov	r5, r0
  /* use the FREE_PROTECT here: it protects with sem OR SYS_ARCH_PROTECT */
  LWIP_MEM_FREE_DECL_PROTECT();

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  newsize = (mem_size_t)LWIP_MEM_ALIGN_SIZE(new_size);
 800482a:	1ccc      	adds	r4, r1, #3
 800482c:	f024 0403 	bic.w	r4, r4, #3
 8004830:	b2a4      	uxth	r4, r4
  if (newsize < MIN_SIZE_ALIGNED) {
 8004832:	2c0b      	cmp	r4, #11
 8004834:	d904      	bls.n	8004840 <mem_trim+0x1c>
    newsize = MIN_SIZE_ALIGNED;
  }
#if MEM_OVERFLOW_CHECK
  newsize += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((newsize > MEM_SIZE_ALIGNED) || (newsize < new_size)) {
 8004836:	f5b4 5f20 	cmp.w	r4, #10240	; 0x2800
 800483a:	d902      	bls.n	8004842 <mem_trim+0x1e>
    return NULL;
 800483c:	2500      	movs	r5, #0
 800483e:	e016      	b.n	800486e <mem_trim+0x4a>
    newsize = MIN_SIZE_ALIGNED;
 8004840:	240c      	movs	r4, #12
  if ((newsize > MEM_SIZE_ALIGNED) || (newsize < new_size)) {
 8004842:	42a1      	cmp	r1, r4
 8004844:	f200 808e 	bhi.w	8004964 <mem_trim+0x140>
  }

  LWIP_ASSERT("mem_trim: legal memory", (u8_t *)rmem >= (u8_t *)ram &&
 8004848:	4b47      	ldr	r3, [pc, #284]	; (8004968 <mem_trim+0x144>)
 800484a:	681b      	ldr	r3, [r3, #0]
 800484c:	42ab      	cmp	r3, r5
 800484e:	d803      	bhi.n	8004858 <mem_trim+0x34>
 8004850:	4a46      	ldr	r2, [pc, #280]	; (800496c <mem_trim+0x148>)
 8004852:	6812      	ldr	r2, [r2, #0]
 8004854:	42aa      	cmp	r2, r5
 8004856:	d811      	bhi.n	800487c <mem_trim+0x58>
 8004858:	4b45      	ldr	r3, [pc, #276]	; (8004970 <mem_trim+0x14c>)
 800485a:	f240 22d1 	movw	r2, #721	; 0x2d1
 800485e:	4945      	ldr	r1, [pc, #276]	; (8004974 <mem_trim+0x150>)
 8004860:	4845      	ldr	r0, [pc, #276]	; (8004978 <mem_trim+0x154>)
 8004862:	f006 fde9 	bl	800b438 <iprintf>
              (u8_t *)rmem < (u8_t *)ram_end);

  if ((u8_t *)rmem < (u8_t *)ram || (u8_t *)rmem >= (u8_t *)ram_end) {
 8004866:	4b40      	ldr	r3, [pc, #256]	; (8004968 <mem_trim+0x144>)
 8004868:	681b      	ldr	r3, [r3, #0]
 800486a:	42ab      	cmp	r3, r5
 800486c:	d902      	bls.n	8004874 <mem_trim+0x50>
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
  return rmem;
}
 800486e:	4628      	mov	r0, r5
 8004870:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  if ((u8_t *)rmem < (u8_t *)ram || (u8_t *)rmem >= (u8_t *)ram_end) {
 8004874:	4a3d      	ldr	r2, [pc, #244]	; (800496c <mem_trim+0x148>)
 8004876:	6812      	ldr	r2, [r2, #0]
 8004878:	42aa      	cmp	r2, r5
 800487a:	d9f8      	bls.n	800486e <mem_trim+0x4a>
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 800487c:	f1a5 0608 	sub.w	r6, r5, #8
  return (mem_size_t)((u8_t *)mem - ram);
 8004880:	1af3      	subs	r3, r6, r3
 8004882:	b29e      	uxth	r6, r3
  size = (mem_size_t)((mem_size_t)(mem->next - ptr) - (SIZEOF_STRUCT_MEM + MEM_SANITY_OVERHEAD));
 8004884:	f835 7c08 	ldrh.w	r7, [r5, #-8]
 8004888:	f1a7 0308 	sub.w	r3, r7, #8
 800488c:	1b9b      	subs	r3, r3, r6
 800488e:	b29b      	uxth	r3, r3
  LWIP_ASSERT("mem_trim can only shrink memory", newsize <= size);
 8004890:	42a3      	cmp	r3, r4
 8004892:	d326      	bcc.n	80048e2 <mem_trim+0xbe>
  if (newsize == size) {
 8004894:	42a3      	cmp	r3, r4
 8004896:	d0ea      	beq.n	800486e <mem_trim+0x4a>
  return (struct mem *)(void *)&ram[ptr];
 8004898:	4a33      	ldr	r2, [pc, #204]	; (8004968 <mem_trim+0x144>)
 800489a:	f8d2 9000 	ldr.w	r9, [r2]
 800489e:	eb09 0807 	add.w	r8, r9, r7
  if (mem2->used == 0) {
 80048a2:	f898 2004 	ldrb.w	r2, [r8, #4]
 80048a6:	2a00      	cmp	r2, #0
 80048a8:	d132      	bne.n	8004910 <mem_trim+0xec>
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 80048aa:	f5b7 5f20 	cmp.w	r7, #10240	; 0x2800
 80048ae:	d021      	beq.n	80048f4 <mem_trim+0xd0>
    next = mem2->next;
 80048b0:	f839 0007 	ldrh.w	r0, [r9, r7]
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 80048b4:	3408      	adds	r4, #8
 80048b6:	4434      	add	r4, r6
 80048b8:	b2a4      	uxth	r4, r4
    if (lfree == mem2) {
 80048ba:	4b30      	ldr	r3, [pc, #192]	; (800497c <mem_trim+0x158>)
 80048bc:	681b      	ldr	r3, [r3, #0]
 80048be:	4543      	cmp	r3, r8
 80048c0:	d020      	beq.n	8004904 <mem_trim+0xe0>
  return (struct mem *)(void *)&ram[ptr];
 80048c2:	4b29      	ldr	r3, [pc, #164]	; (8004968 <mem_trim+0x144>)
 80048c4:	681b      	ldr	r3, [r3, #0]
 80048c6:	191a      	adds	r2, r3, r4
    mem2->used = 0;
 80048c8:	2100      	movs	r1, #0
 80048ca:	7111      	strb	r1, [r2, #4]
    mem2->next = next;
 80048cc:	5318      	strh	r0, [r3, r4]
    mem2->prev = ptr;
 80048ce:	8056      	strh	r6, [r2, #2]
    mem->next = ptr2;
 80048d0:	f825 4c08 	strh.w	r4, [r5, #-8]
    if (mem2->next != MEM_SIZE_ALIGNED) {
 80048d4:	5b1a      	ldrh	r2, [r3, r4]
 80048d6:	f5b2 5f20 	cmp.w	r2, #10240	; 0x2800
 80048da:	d0c8      	beq.n	800486e <mem_trim+0x4a>
      ptr_to_mem(mem2->next)->prev = ptr2;
 80048dc:	4413      	add	r3, r2
 80048de:	805c      	strh	r4, [r3, #2]
 80048e0:	e7c5      	b.n	800486e <mem_trim+0x4a>
  LWIP_ASSERT("mem_trim can only shrink memory", newsize <= size);
 80048e2:	4b23      	ldr	r3, [pc, #140]	; (8004970 <mem_trim+0x14c>)
 80048e4:	f44f 7239 	mov.w	r2, #740	; 0x2e4
 80048e8:	4925      	ldr	r1, [pc, #148]	; (8004980 <mem_trim+0x15c>)
 80048ea:	4823      	ldr	r0, [pc, #140]	; (8004978 <mem_trim+0x154>)
 80048ec:	f006 fda4 	bl	800b438 <iprintf>
    return NULL;
 80048f0:	2500      	movs	r5, #0
 80048f2:	e7bc      	b.n	800486e <mem_trim+0x4a>
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 80048f4:	4b1e      	ldr	r3, [pc, #120]	; (8004970 <mem_trim+0x14c>)
 80048f6:	f240 22f5 	movw	r2, #757	; 0x2f5
 80048fa:	4922      	ldr	r1, [pc, #136]	; (8004984 <mem_trim+0x160>)
 80048fc:	481e      	ldr	r0, [pc, #120]	; (8004978 <mem_trim+0x154>)
 80048fe:	f006 fd9b 	bl	800b438 <iprintf>
 8004902:	e7d5      	b.n	80048b0 <mem_trim+0x8c>
  return (struct mem *)(void *)&ram[ptr];
 8004904:	4b18      	ldr	r3, [pc, #96]	; (8004968 <mem_trim+0x144>)
 8004906:	681b      	ldr	r3, [r3, #0]
 8004908:	4423      	add	r3, r4
      lfree = ptr_to_mem(ptr2);
 800490a:	4a1c      	ldr	r2, [pc, #112]	; (800497c <mem_trim+0x158>)
 800490c:	6013      	str	r3, [r2, #0]
 800490e:	e7d8      	b.n	80048c2 <mem_trim+0x9e>
  } else if (newsize + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED <= size) {
 8004910:	f104 0214 	add.w	r2, r4, #20
 8004914:	429a      	cmp	r2, r3
 8004916:	d8aa      	bhi.n	800486e <mem_trim+0x4a>
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 8004918:	3408      	adds	r4, #8
 800491a:	4434      	add	r4, r6
 800491c:	b2a4      	uxth	r4, r4
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 800491e:	f5b7 5f20 	cmp.w	r7, #10240	; 0x2800
 8004922:	d017      	beq.n	8004954 <mem_trim+0x130>
  return (struct mem *)(void *)&ram[ptr];
 8004924:	4b10      	ldr	r3, [pc, #64]	; (8004968 <mem_trim+0x144>)
 8004926:	681b      	ldr	r3, [r3, #0]
 8004928:	191a      	adds	r2, r3, r4
    if (mem2 < lfree) {
 800492a:	4914      	ldr	r1, [pc, #80]	; (800497c <mem_trim+0x158>)
 800492c:	6809      	ldr	r1, [r1, #0]
 800492e:	4291      	cmp	r1, r2
      lfree = mem2;
 8004930:	bf84      	itt	hi
 8004932:	4912      	ldrhi	r1, [pc, #72]	; (800497c <mem_trim+0x158>)
 8004934:	600a      	strhi	r2, [r1, #0]
    mem2->used = 0;
 8004936:	2100      	movs	r1, #0
 8004938:	7111      	strb	r1, [r2, #4]
    mem2->next = mem->next;
 800493a:	f835 1c08 	ldrh.w	r1, [r5, #-8]
 800493e:	5319      	strh	r1, [r3, r4]
    mem2->prev = ptr;
 8004940:	8056      	strh	r6, [r2, #2]
    mem->next = ptr2;
 8004942:	f825 4c08 	strh.w	r4, [r5, #-8]
    if (mem2->next != MEM_SIZE_ALIGNED) {
 8004946:	5b1a      	ldrh	r2, [r3, r4]
 8004948:	f5b2 5f20 	cmp.w	r2, #10240	; 0x2800
 800494c:	d08f      	beq.n	800486e <mem_trim+0x4a>
      ptr_to_mem(mem2->next)->prev = ptr2;
 800494e:	4413      	add	r3, r2
 8004950:	805c      	strh	r4, [r3, #2]
 8004952:	e78c      	b.n	800486e <mem_trim+0x4a>
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 8004954:	4b06      	ldr	r3, [pc, #24]	; (8004970 <mem_trim+0x14c>)
 8004956:	f240 3216 	movw	r2, #790	; 0x316
 800495a:	490a      	ldr	r1, [pc, #40]	; (8004984 <mem_trim+0x160>)
 800495c:	4806      	ldr	r0, [pc, #24]	; (8004978 <mem_trim+0x154>)
 800495e:	f006 fd6b 	bl	800b438 <iprintf>
 8004962:	e7df      	b.n	8004924 <mem_trim+0x100>
    return NULL;
 8004964:	2500      	movs	r5, #0
 8004966:	e782      	b.n	800486e <mem_trim+0x4a>
 8004968:	20005744 	.word	0x20005744
 800496c:	20005748 	.word	0x20005748
 8004970:	08010674 	.word	0x08010674
 8004974:	080107a4 	.word	0x080107a4
 8004978:	0800cb24 	.word	0x0800cb24
 800497c:	20005740 	.word	0x20005740
 8004980:	080107bc 	.word	0x080107bc
 8004984:	080107dc 	.word	0x080107dc

08004988 <mem_malloc>:
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  u8_t local_mem_free_count = 0;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_ALLOC_DECL_PROTECT();

  if (size_in == 0) {
 8004988:	2800      	cmp	r0, #0
 800498a:	f000 8093 	beq.w	8004ab4 <mem_malloc+0x12c>
{
 800498e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004990:	4603      	mov	r3, r0
    return NULL;
  }

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  size = (mem_size_t)LWIP_MEM_ALIGN_SIZE(size_in);
 8004992:	3003      	adds	r0, #3
 8004994:	f020 0003 	bic.w	r0, r0, #3
 8004998:	b280      	uxth	r0, r0
  if (size < MIN_SIZE_ALIGNED) {
 800499a:	280b      	cmp	r0, #11
 800499c:	d904      	bls.n	80049a8 <mem_malloc+0x20>
    size = MIN_SIZE_ALIGNED;
  }
#if MEM_OVERFLOW_CHECK
  size += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((size > MEM_SIZE_ALIGNED) || (size < size_in)) {
 800499e:	f5b0 5f20 	cmp.w	r0, #10240	; 0x2800
 80049a2:	d902      	bls.n	80049aa <mem_malloc+0x22>
    return NULL;
 80049a4:	2000      	movs	r0, #0
 80049a6:	e084      	b.n	8004ab2 <mem_malloc+0x12a>
    size = MIN_SIZE_ALIGNED;
 80049a8:	200c      	movs	r0, #12
  if ((size > MEM_SIZE_ALIGNED) || (size < size_in)) {
 80049aa:	4283      	cmp	r3, r0
 80049ac:	f200 8084 	bhi.w	8004ab8 <mem_malloc+0x130>
  return (mem_size_t)((u8_t *)mem - ram);
 80049b0:	4b46      	ldr	r3, [pc, #280]	; (8004acc <mem_malloc+0x144>)
 80049b2:	6819      	ldr	r1, [r3, #0]
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

    /* Scan through the heap searching for a free block that is big enough,
     * beginning with the lowest free block.
     */
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 80049b4:	4b46      	ldr	r3, [pc, #280]	; (8004ad0 <mem_malloc+0x148>)
  return (mem_size_t)((u8_t *)mem - ram);
 80049b6:	681c      	ldr	r4, [r3, #0]
 80049b8:	1a64      	subs	r4, r4, r1
 80049ba:	b2a4      	uxth	r4, r4
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 80049bc:	4623      	mov	r3, r4
 80049be:	4606      	mov	r6, r0
 80049c0:	f5c0 5c20 	rsb	ip, r0, #10240	; 0x2800
 80049c4:	4564      	cmp	r4, ip
 80049c6:	d279      	bcs.n	8004abc <mem_malloc+0x134>
        break;
      }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

      if ((!mem->used) &&
          (mem->next - (ptr + SIZEOF_STRUCT_MEM)) >= size) {
 80049c8:	f06f 0707 	mvn.w	r7, #7
 80049cc:	e036      	b.n	8004a3c <mem_malloc+0xb4>
           * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
           *       region that couldn't hold data, but when mem->next gets freed,
           *       the 2 regions would be combined, resulting in more free memory
           */
          ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + size);
          LWIP_ASSERT("invalid next ptr",ptr2 != MEM_SIZE_ALIGNED);
 80049ce:	4b41      	ldr	r3, [pc, #260]	; (8004ad4 <mem_malloc+0x14c>)
 80049d0:	f240 3287 	movw	r2, #903	; 0x387
 80049d4:	4940      	ldr	r1, [pc, #256]	; (8004ad8 <mem_malloc+0x150>)
 80049d6:	4841      	ldr	r0, [pc, #260]	; (8004adc <mem_malloc+0x154>)
 80049d8:	f006 fd2e 	bl	800b438 <iprintf>
 80049dc:	e042      	b.n	8004a64 <mem_malloc+0xdc>
           * take care of this).
           * -> near fit or exact fit: do not split, no mem2 creation
           * also can't move mem->next directly behind mem, since mem->next
           * will always be used at this point!
           */
          mem->used = 1;
 80049de:	2301      	movs	r3, #1
 80049e0:	712b      	strb	r3, [r5, #4]
          MEM_STATS_INC_USED(used, mem->next - mem_to_ptr(mem));
        }
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
mem_malloc_adjust_lfree:
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
        if (mem == lfree) {
 80049e2:	4b3b      	ldr	r3, [pc, #236]	; (8004ad0 <mem_malloc+0x148>)
 80049e4:	681b      	ldr	r3, [r3, #0]
 80049e6:	42ab      	cmp	r3, r5
 80049e8:	d053      	beq.n	8004a92 <mem_malloc+0x10a>
          lfree = cur;
          LWIP_ASSERT("mem_malloc: !lfree->used", ((lfree == ram_end) || (!lfree->used)));
        }
        LWIP_MEM_ALLOC_UNPROTECT();
        sys_mutex_unlock(&mem_mutex);
        LWIP_ASSERT("mem_malloc: allocated memory not above ram_end.",
 80049ea:	3608      	adds	r6, #8
 80049ec:	442e      	add	r6, r5
 80049ee:	4b3c      	ldr	r3, [pc, #240]	; (8004ae0 <mem_malloc+0x158>)
 80049f0:	681b      	ldr	r3, [r3, #0]
 80049f2:	42b3      	cmp	r3, r6
 80049f4:	d305      	bcc.n	8004a02 <mem_malloc+0x7a>
                    (mem_ptr_t)mem + SIZEOF_STRUCT_MEM + size <= (mem_ptr_t)ram_end);
        LWIP_ASSERT("mem_malloc: allocated memory properly aligned.",
 80049f6:	f015 0f03 	tst.w	r5, #3
 80049fa:	d10a      	bne.n	8004a12 <mem_malloc+0x8a>

#if MEM_OVERFLOW_CHECK
        mem_overflow_init_element(mem, size_in);
#endif
        MEM_SANITY();
        return (u8_t *)mem + SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET;
 80049fc:	f105 0008 	add.w	r0, r5, #8
 8004a00:	e057      	b.n	8004ab2 <mem_malloc+0x12a>
        LWIP_ASSERT("mem_malloc: allocated memory not above ram_end.",
 8004a02:	4b34      	ldr	r3, [pc, #208]	; (8004ad4 <mem_malloc+0x14c>)
 8004a04:	f240 32b9 	movw	r2, #953	; 0x3b9
 8004a08:	4936      	ldr	r1, [pc, #216]	; (8004ae4 <mem_malloc+0x15c>)
 8004a0a:	4834      	ldr	r0, [pc, #208]	; (8004adc <mem_malloc+0x154>)
 8004a0c:	f006 fd14 	bl	800b438 <iprintf>
 8004a10:	e7f1      	b.n	80049f6 <mem_malloc+0x6e>
        LWIP_ASSERT("mem_malloc: allocated memory properly aligned.",
 8004a12:	4e30      	ldr	r6, [pc, #192]	; (8004ad4 <mem_malloc+0x14c>)
 8004a14:	4c31      	ldr	r4, [pc, #196]	; (8004adc <mem_malloc+0x154>)
 8004a16:	4633      	mov	r3, r6
 8004a18:	f240 32bb 	movw	r2, #955	; 0x3bb
 8004a1c:	4932      	ldr	r1, [pc, #200]	; (8004ae8 <mem_malloc+0x160>)
 8004a1e:	4620      	mov	r0, r4
 8004a20:	f006 fd0a 	bl	800b438 <iprintf>
        LWIP_ASSERT("mem_malloc: sanity check alignment",
 8004a24:	4633      	mov	r3, r6
 8004a26:	f240 32bd 	movw	r2, #957	; 0x3bd
 8004a2a:	4930      	ldr	r1, [pc, #192]	; (8004aec <mem_malloc+0x164>)
 8004a2c:	4620      	mov	r0, r4
 8004a2e:	f006 fd03 	bl	800b438 <iprintf>
 8004a32:	e7e3      	b.n	80049fc <mem_malloc+0x74>
         ptr = ptr_to_mem(ptr)->next) {
 8004a34:	882c      	ldrh	r4, [r5, #0]
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 8004a36:	4623      	mov	r3, r4
 8004a38:	4564      	cmp	r4, ip
 8004a3a:	d239      	bcs.n	8004ab0 <mem_malloc+0x128>
  return (struct mem *)(void *)&ram[ptr];
 8004a3c:	18cd      	adds	r5, r1, r3
      if ((!mem->used) &&
 8004a3e:	792a      	ldrb	r2, [r5, #4]
 8004a40:	2a00      	cmp	r2, #0
 8004a42:	d1f7      	bne.n	8004a34 <mem_malloc+0xac>
          (mem->next - (ptr + SIZEOF_STRUCT_MEM)) >= size) {
 8004a44:	5aca      	ldrh	r2, [r1, r3]
 8004a46:	1afb      	subs	r3, r7, r3
 8004a48:	4413      	add	r3, r2
      if ((!mem->used) &&
 8004a4a:	42b3      	cmp	r3, r6
 8004a4c:	d3f2      	bcc.n	8004a34 <mem_malloc+0xac>
        if (mem->next - (ptr + SIZEOF_STRUCT_MEM) >= (size + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED)) {
 8004a4e:	f106 0214 	add.w	r2, r6, #20
 8004a52:	4293      	cmp	r3, r2
 8004a54:	d3c3      	bcc.n	80049de <mem_malloc+0x56>
          ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + size);
 8004a56:	f100 0708 	add.w	r7, r0, #8
 8004a5a:	4427      	add	r7, r4
 8004a5c:	b2bf      	uxth	r7, r7
          LWIP_ASSERT("invalid next ptr",ptr2 != MEM_SIZE_ALIGNED);
 8004a5e:	f5b7 5f20 	cmp.w	r7, #10240	; 0x2800
 8004a62:	d0b4      	beq.n	80049ce <mem_malloc+0x46>
  return (struct mem *)(void *)&ram[ptr];
 8004a64:	4b19      	ldr	r3, [pc, #100]	; (8004acc <mem_malloc+0x144>)
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	19da      	adds	r2, r3, r7
          mem2->used = 0;
 8004a6a:	2100      	movs	r1, #0
 8004a6c:	7111      	strb	r1, [r2, #4]
          mem2->next = mem->next;
 8004a6e:	8829      	ldrh	r1, [r5, #0]
 8004a70:	53d9      	strh	r1, [r3, r7]
          mem2->prev = ptr;
 8004a72:	8054      	strh	r4, [r2, #2]
          mem->next = ptr2;
 8004a74:	802f      	strh	r7, [r5, #0]
          mem->used = 1;
 8004a76:	2201      	movs	r2, #1
 8004a78:	712a      	strb	r2, [r5, #4]
          if (mem2->next != MEM_SIZE_ALIGNED) {
 8004a7a:	5bda      	ldrh	r2, [r3, r7]
 8004a7c:	f5b2 5f20 	cmp.w	r2, #10240	; 0x2800
 8004a80:	d0af      	beq.n	80049e2 <mem_malloc+0x5a>
            ptr_to_mem(mem2->next)->prev = ptr2;
 8004a82:	4413      	add	r3, r2
 8004a84:	805f      	strh	r7, [r3, #2]
        if (mem == lfree) {
 8004a86:	4b12      	ldr	r3, [pc, #72]	; (8004ad0 <mem_malloc+0x148>)
 8004a88:	681b      	ldr	r3, [r3, #0]
 8004a8a:	42ab      	cmp	r3, r5
 8004a8c:	d1ad      	bne.n	80049ea <mem_malloc+0x62>
          while (cur->used && cur != ram_end) {
 8004a8e:	792b      	ldrb	r3, [r5, #4]
 8004a90:	b1cb      	cbz	r3, 8004ac6 <mem_malloc+0x13e>
 8004a92:	4b13      	ldr	r3, [pc, #76]	; (8004ae0 <mem_malloc+0x158>)
 8004a94:	6819      	ldr	r1, [r3, #0]
  return (struct mem *)(void *)&ram[ptr];
 8004a96:	4b0d      	ldr	r3, [pc, #52]	; (8004acc <mem_malloc+0x144>)
 8004a98:	6818      	ldr	r0, [r3, #0]
 8004a9a:	462b      	mov	r3, r5
          while (cur->used && cur != ram_end) {
 8004a9c:	4299      	cmp	r1, r3
 8004a9e:	d00f      	beq.n	8004ac0 <mem_malloc+0x138>
  return (struct mem *)(void *)&ram[ptr];
 8004aa0:	881b      	ldrh	r3, [r3, #0]
 8004aa2:	4403      	add	r3, r0
          while (cur->used && cur != ram_end) {
 8004aa4:	791a      	ldrb	r2, [r3, #4]
 8004aa6:	2a00      	cmp	r2, #0
 8004aa8:	d1f8      	bne.n	8004a9c <mem_malloc+0x114>
          lfree = cur;
 8004aaa:	4a09      	ldr	r2, [pc, #36]	; (8004ad0 <mem_malloc+0x148>)
 8004aac:	6013      	str	r3, [r2, #0]
          LWIP_ASSERT("mem_malloc: !lfree->used", ((lfree == ram_end) || (!lfree->used)));
 8004aae:	e79c      	b.n	80049ea <mem_malloc+0x62>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  MEM_STATS_INC(err);
  LWIP_MEM_ALLOC_UNPROTECT();
  sys_mutex_unlock(&mem_mutex);
  LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("mem_malloc: could not allocate %"S16_F" bytes\n", (s16_t)size));
  return NULL;
 8004ab0:	2000      	movs	r0, #0
}
 8004ab2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    return NULL;
 8004ab4:	2000      	movs	r0, #0
}
 8004ab6:	4770      	bx	lr
    return NULL;
 8004ab8:	2000      	movs	r0, #0
 8004aba:	e7fa      	b.n	8004ab2 <mem_malloc+0x12a>
  return NULL;
 8004abc:	2000      	movs	r0, #0
 8004abe:	e7f8      	b.n	8004ab2 <mem_malloc+0x12a>
          lfree = cur;
 8004ac0:	4a03      	ldr	r2, [pc, #12]	; (8004ad0 <mem_malloc+0x148>)
 8004ac2:	6013      	str	r3, [r2, #0]
          LWIP_ASSERT("mem_malloc: !lfree->used", ((lfree == ram_end) || (!lfree->used)));
 8004ac4:	e791      	b.n	80049ea <mem_malloc+0x62>
  return (struct mem *)(void *)&ram[ptr];
 8004ac6:	462b      	mov	r3, r5
 8004ac8:	e7ef      	b.n	8004aaa <mem_malloc+0x122>
 8004aca:	bf00      	nop
 8004acc:	20005744 	.word	0x20005744
 8004ad0:	20005740 	.word	0x20005740
 8004ad4:	08010674 	.word	0x08010674
 8004ad8:	080107dc 	.word	0x080107dc
 8004adc:	0800cb24 	.word	0x0800cb24
 8004ae0:	20005748 	.word	0x20005748
 8004ae4:	080107f0 	.word	0x080107f0
 8004ae8:	08010820 	.word	0x08010820
 8004aec:	08010850 	.word	0x08010850

08004af0 <do_memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
do_memp_malloc_pool(const struct memp_desc *desc)
#else
do_memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 8004af0:	b510      	push	{r4, lr}
  memp = (struct memp *)mem_malloc(MEMP_SIZE + MEMP_ALIGN_SIZE(desc->size));
  SYS_ARCH_PROTECT(old_level);
#else /* MEMP_MEM_MALLOC */
  SYS_ARCH_PROTECT(old_level);

  memp = *desc->tab;
 8004af2:	6883      	ldr	r3, [r0, #8]
 8004af4:	681c      	ldr	r4, [r3, #0]
#endif /* MEMP_MEM_MALLOC */

  if (memp != NULL) {
 8004af6:	b124      	cbz	r4, 8004b02 <do_memp_malloc_pool+0x12>
#if !MEMP_MEM_MALLOC
#if MEMP_OVERFLOW_CHECK == 1
    memp_overflow_check_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */

    *desc->tab = memp->next;
 8004af8:	6822      	ldr	r2, [r4, #0]
 8004afa:	601a      	str	r2, [r3, #0]
    memp->line = line;
#if MEMP_MEM_MALLOC
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_MEM_MALLOC */
#endif /* MEMP_OVERFLOW_CHECK */
    LWIP_ASSERT("memp_malloc: memp properly aligned",
 8004afc:	f014 0f03 	tst.w	r4, #3
 8004b00:	d101      	bne.n	8004b06 <do_memp_malloc_pool+0x16>
    SYS_ARCH_UNPROTECT(old_level);
    LWIP_DEBUGF(MEMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("memp_malloc: out of memory in pool %s\n", desc->desc));
  }

  return NULL;
}
 8004b02:	4620      	mov	r0, r4
 8004b04:	bd10      	pop	{r4, pc}
    LWIP_ASSERT("memp_malloc: memp properly aligned",
 8004b06:	4b04      	ldr	r3, [pc, #16]	; (8004b18 <do_memp_malloc_pool+0x28>)
 8004b08:	f44f 728c 	mov.w	r2, #280	; 0x118
 8004b0c:	4903      	ldr	r1, [pc, #12]	; (8004b1c <do_memp_malloc_pool+0x2c>)
 8004b0e:	4804      	ldr	r0, [pc, #16]	; (8004b20 <do_memp_malloc_pool+0x30>)
 8004b10:	f006 fc92 	bl	800b438 <iprintf>
 8004b14:	e7f5      	b.n	8004b02 <do_memp_malloc_pool+0x12>
 8004b16:	bf00      	nop
 8004b18:	08010874 	.word	0x08010874
 8004b1c:	080108a4 	.word	0x080108a4
 8004b20:	0800cb24 	.word	0x0800cb24

08004b24 <do_memp_free_pool>:
  return memp;
}

static void
do_memp_free_pool(const struct memp_desc *desc, void *mem)
{
 8004b24:	b538      	push	{r3, r4, r5, lr}
 8004b26:	4605      	mov	r5, r0
 8004b28:	460c      	mov	r4, r1
  struct memp *memp;
  SYS_ARCH_DECL_PROTECT(old_level);

  LWIP_ASSERT("memp_free: mem properly aligned",
 8004b2a:	f011 0f03 	tst.w	r1, #3
 8004b2e:	d105      	bne.n	8004b3c <do_memp_free_pool+0x18>
#if MEMP_MEM_MALLOC
  LWIP_UNUSED_ARG(desc);
  SYS_ARCH_UNPROTECT(old_level);
  mem_free(memp);
#else /* MEMP_MEM_MALLOC */
  memp->next = *desc->tab;
 8004b30:	68ab      	ldr	r3, [r5, #8]
 8004b32:	681b      	ldr	r3, [r3, #0]
 8004b34:	6023      	str	r3, [r4, #0]
  *desc->tab = memp;
 8004b36:	68ab      	ldr	r3, [r5, #8]
 8004b38:	601c      	str	r4, [r3, #0]
  LWIP_ASSERT("memp sanity", memp_sanity(desc));
#endif /* MEMP_SANITY_CHECK */

  SYS_ARCH_UNPROTECT(old_level);
#endif /* !MEMP_MEM_MALLOC */
}
 8004b3a:	bd38      	pop	{r3, r4, r5, pc}
  LWIP_ASSERT("memp_free: mem properly aligned",
 8004b3c:	4b03      	ldr	r3, [pc, #12]	; (8004b4c <do_memp_free_pool+0x28>)
 8004b3e:	f44f 72b6 	mov.w	r2, #364	; 0x16c
 8004b42:	4903      	ldr	r1, [pc, #12]	; (8004b50 <do_memp_free_pool+0x2c>)
 8004b44:	4803      	ldr	r0, [pc, #12]	; (8004b54 <do_memp_free_pool+0x30>)
 8004b46:	f006 fc77 	bl	800b438 <iprintf>
 8004b4a:	e7f1      	b.n	8004b30 <do_memp_free_pool+0xc>
 8004b4c:	08010874 	.word	0x08010874
 8004b50:	080108c8 	.word	0x080108c8
 8004b54:	0800cb24 	.word	0x0800cb24

08004b58 <memp_init_pool>:
  *desc->tab = NULL;
 8004b58:	6883      	ldr	r3, [r0, #8]
 8004b5a:	2200      	movs	r2, #0
 8004b5c:	601a      	str	r2, [r3, #0]
  memp = (struct memp *)LWIP_MEM_ALIGN(desc->base);
 8004b5e:	6843      	ldr	r3, [r0, #4]
 8004b60:	3303      	adds	r3, #3
 8004b62:	f023 0303 	bic.w	r3, r3, #3
  for (i = 0; i < desc->num; ++i) {
 8004b66:	8842      	ldrh	r2, [r0, #2]
 8004b68:	b15a      	cbz	r2, 8004b82 <memp_init_pool+0x2a>
 8004b6a:	2200      	movs	r2, #0
    memp->next = *desc->tab;
 8004b6c:	6881      	ldr	r1, [r0, #8]
 8004b6e:	6809      	ldr	r1, [r1, #0]
 8004b70:	6019      	str	r1, [r3, #0]
    *desc->tab = memp;
 8004b72:	6881      	ldr	r1, [r0, #8]
 8004b74:	600b      	str	r3, [r1, #0]
    memp = (struct memp *)(void *)((u8_t *)memp + MEMP_SIZE + desc->size
 8004b76:	8801      	ldrh	r1, [r0, #0]
 8004b78:	440b      	add	r3, r1
  for (i = 0; i < desc->num; ++i) {
 8004b7a:	3201      	adds	r2, #1
 8004b7c:	8841      	ldrh	r1, [r0, #2]
 8004b7e:	4291      	cmp	r1, r2
 8004b80:	dcf4      	bgt.n	8004b6c <memp_init_pool+0x14>
}
 8004b82:	4770      	bx	lr

08004b84 <memp_init>:
{
 8004b84:	b538      	push	{r3, r4, r5, lr}
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 8004b86:	4d05      	ldr	r5, [pc, #20]	; (8004b9c <memp_init+0x18>)
 8004b88:	1f2c      	subs	r4, r5, #4
 8004b8a:	3520      	adds	r5, #32
    memp_init_pool(memp_pools[i]);
 8004b8c:	f854 0f04 	ldr.w	r0, [r4, #4]!
 8004b90:	f7ff ffe2 	bl	8004b58 <memp_init_pool>
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 8004b94:	42ac      	cmp	r4, r5
 8004b96:	d1f9      	bne.n	8004b8c <memp_init+0x8>
}
 8004b98:	bd38      	pop	{r3, r4, r5, pc}
 8004b9a:	bf00      	nop
 8004b9c:	080109a4 	.word	0x080109a4

08004ba0 <memp_malloc_pool>:
{
 8004ba0:	b510      	push	{r4, lr}
  LWIP_ASSERT("invalid pool desc", desc != NULL);
 8004ba2:	4604      	mov	r4, r0
 8004ba4:	b110      	cbz	r0, 8004bac <memp_malloc_pool+0xc>
  return do_memp_malloc_pool(desc);
 8004ba6:	f7ff ffa3 	bl	8004af0 <do_memp_malloc_pool>
}
 8004baa:	bd10      	pop	{r4, pc}
  LWIP_ASSERT("invalid pool desc", desc != NULL);
 8004bac:	4b04      	ldr	r3, [pc, #16]	; (8004bc0 <memp_malloc_pool+0x20>)
 8004bae:	f44f 729e 	mov.w	r2, #316	; 0x13c
 8004bb2:	4904      	ldr	r1, [pc, #16]	; (8004bc4 <memp_malloc_pool+0x24>)
 8004bb4:	4804      	ldr	r0, [pc, #16]	; (8004bc8 <memp_malloc_pool+0x28>)
 8004bb6:	f006 fc3f 	bl	800b438 <iprintf>
    return NULL;
 8004bba:	4620      	mov	r0, r4
 8004bbc:	e7f5      	b.n	8004baa <memp_malloc_pool+0xa>
 8004bbe:	bf00      	nop
 8004bc0:	08010874 	.word	0x08010874
 8004bc4:	080108e8 	.word	0x080108e8
 8004bc8:	0800cb24 	.word	0x0800cb24

08004bcc <memp_malloc>:
{
 8004bcc:	b508      	push	{r3, lr}
  LWIP_ERROR("memp_malloc: type < MEMP_MAX", (type < MEMP_MAX), return NULL;);
 8004bce:	2808      	cmp	r0, #8
 8004bd0:	d805      	bhi.n	8004bde <memp_malloc+0x12>
  memp = do_memp_malloc_pool(memp_pools[type]);
 8004bd2:	4b07      	ldr	r3, [pc, #28]	; (8004bf0 <memp_malloc+0x24>)
 8004bd4:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
 8004bd8:	f7ff ff8a 	bl	8004af0 <do_memp_malloc_pool>
}
 8004bdc:	bd08      	pop	{r3, pc}
  LWIP_ERROR("memp_malloc: type < MEMP_MAX", (type < MEMP_MAX), return NULL;);
 8004bde:	4b05      	ldr	r3, [pc, #20]	; (8004bf4 <memp_malloc+0x28>)
 8004be0:	f240 1257 	movw	r2, #343	; 0x157
 8004be4:	4904      	ldr	r1, [pc, #16]	; (8004bf8 <memp_malloc+0x2c>)
 8004be6:	4805      	ldr	r0, [pc, #20]	; (8004bfc <memp_malloc+0x30>)
 8004be8:	f006 fc26 	bl	800b438 <iprintf>
 8004bec:	2000      	movs	r0, #0
 8004bee:	e7f5      	b.n	8004bdc <memp_malloc+0x10>
 8004bf0:	080109a4 	.word	0x080109a4
 8004bf4:	08010874 	.word	0x08010874
 8004bf8:	080108fc 	.word	0x080108fc
 8004bfc:	0800cb24 	.word	0x0800cb24

08004c00 <memp_free_pool>:
 * @param desc the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free_pool(const struct memp_desc *desc, void *mem)
{
 8004c00:	b508      	push	{r3, lr}
  LWIP_ASSERT("invalid pool desc", desc != NULL);
 8004c02:	b128      	cbz	r0, 8004c10 <memp_free_pool+0x10>
 8004c04:	4603      	mov	r3, r0
  if ((desc == NULL) || (mem == NULL)) {
 8004c06:	b111      	cbz	r1, 8004c0e <memp_free_pool+0xe>
    return;
  }

  do_memp_free_pool(desc, mem);
 8004c08:	4618      	mov	r0, r3
 8004c0a:	f7ff ff8b 	bl	8004b24 <do_memp_free_pool>
}
 8004c0e:	bd08      	pop	{r3, pc}
  LWIP_ASSERT("invalid pool desc", desc != NULL);
 8004c10:	4b03      	ldr	r3, [pc, #12]	; (8004c20 <memp_free_pool+0x20>)
 8004c12:	f240 1295 	movw	r2, #405	; 0x195
 8004c16:	4903      	ldr	r1, [pc, #12]	; (8004c24 <memp_free_pool+0x24>)
 8004c18:	4803      	ldr	r0, [pc, #12]	; (8004c28 <memp_free_pool+0x28>)
 8004c1a:	f006 fc0d 	bl	800b438 <iprintf>
  if ((desc == NULL) || (mem == NULL)) {
 8004c1e:	e7f6      	b.n	8004c0e <memp_free_pool+0xe>
 8004c20:	08010874 	.word	0x08010874
 8004c24:	080108e8 	.word	0x080108e8
 8004c28:	0800cb24 	.word	0x0800cb24

08004c2c <memp_free>:
 * @param type the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free(memp_t type, void *mem)
{
 8004c2c:	b508      	push	{r3, lr}
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  struct memp *old_first;
#endif

  LWIP_ERROR("memp_free: type < MEMP_MAX", (type < MEMP_MAX), return;);
 8004c2e:	2808      	cmp	r0, #8
 8004c30:	d806      	bhi.n	8004c40 <memp_free+0x14>

  if (mem == NULL) {
 8004c32:	b121      	cbz	r1, 8004c3e <memp_free+0x12>

#ifdef LWIP_HOOK_MEMP_AVAILABLE
  old_first = *memp_pools[type]->tab;
#endif

  do_memp_free_pool(memp_pools[type], mem);
 8004c34:	4b06      	ldr	r3, [pc, #24]	; (8004c50 <memp_free+0x24>)
 8004c36:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
 8004c3a:	f7ff ff73 	bl	8004b24 <do_memp_free_pool>
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  if (old_first == NULL) {
    LWIP_HOOK_MEMP_AVAILABLE(type);
  }
#endif
}
 8004c3e:	bd08      	pop	{r3, pc}
  LWIP_ERROR("memp_free: type < MEMP_MAX", (type < MEMP_MAX), return;);
 8004c40:	4b04      	ldr	r3, [pc, #16]	; (8004c54 <memp_free+0x28>)
 8004c42:	f44f 72d5 	mov.w	r2, #426	; 0x1aa
 8004c46:	4904      	ldr	r1, [pc, #16]	; (8004c58 <memp_free+0x2c>)
 8004c48:	4804      	ldr	r0, [pc, #16]	; (8004c5c <memp_free+0x30>)
 8004c4a:	f006 fbf5 	bl	800b438 <iprintf>
 8004c4e:	e7f6      	b.n	8004c3e <memp_free+0x12>
 8004c50:	080109a4 	.word	0x080109a4
 8004c54:	08010874 	.word	0x08010874
 8004c58:	0801091c 	.word	0x0801091c
 8004c5c:	0800cb24 	.word	0x0800cb24

08004c60 <netif_null_output_ip4>:
  LWIP_UNUSED_ARG(netif);
  LWIP_UNUSED_ARG(p);
  LWIP_UNUSED_ARG(ipaddr);

  return ERR_IF;
}
 8004c60:	f06f 000b 	mvn.w	r0, #11
 8004c64:	4770      	bx	lr
	...

08004c68 <netif_issue_reports>:
{
 8004c68:	b538      	push	{r3, r4, r5, lr}
 8004c6a:	460c      	mov	r4, r1
  LWIP_ASSERT("netif_issue_reports: invalid netif", netif != NULL);
 8004c6c:	4605      	mov	r5, r0
 8004c6e:	b170      	cbz	r0, 8004c8e <netif_issue_reports+0x26>
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 8004c70:	f895 302d 	ldrb.w	r3, [r5, #45]	; 0x2d
 8004c74:	f003 0205 	and.w	r2, r3, #5
 8004c78:	2a05      	cmp	r2, #5
 8004c7a:	d107      	bne.n	8004c8c <netif_issue_reports+0x24>
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 8004c7c:	f014 0f01 	tst.w	r4, #1
 8004c80:	d004      	beq.n	8004c8c <netif_issue_reports+0x24>
 8004c82:	686a      	ldr	r2, [r5, #4]
 8004c84:	b112      	cbz	r2, 8004c8c <netif_issue_reports+0x24>
    if (netif->flags & (NETIF_FLAG_ETHARP)) {
 8004c86:	f013 0f08 	tst.w	r3, #8
 8004c8a:	d108      	bne.n	8004c9e <netif_issue_reports+0x36>
}
 8004c8c:	bd38      	pop	{r3, r4, r5, pc}
  LWIP_ASSERT("netif_issue_reports: invalid netif", netif != NULL);
 8004c8e:	4b06      	ldr	r3, [pc, #24]	; (8004ca8 <netif_issue_reports+0x40>)
 8004c90:	f240 326d 	movw	r2, #877	; 0x36d
 8004c94:	4905      	ldr	r1, [pc, #20]	; (8004cac <netif_issue_reports+0x44>)
 8004c96:	4806      	ldr	r0, [pc, #24]	; (8004cb0 <netif_issue_reports+0x48>)
 8004c98:	f006 fbce 	bl	800b438 <iprintf>
 8004c9c:	e7e8      	b.n	8004c70 <netif_issue_reports+0x8>
      etharp_gratuitous(netif);
 8004c9e:	1d29      	adds	r1, r5, #4
 8004ca0:	4628      	mov	r0, r5
 8004ca2:	f005 f971 	bl	8009f88 <etharp_request>
 8004ca6:	e7f1      	b.n	8004c8c <netif_issue_reports+0x24>
 8004ca8:	080109c8 	.word	0x080109c8
 8004cac:	080109fc 	.word	0x080109fc
 8004cb0:	0800cb24 	.word	0x0800cb24

08004cb4 <netif_do_set_ipaddr>:
{
 8004cb4:	b570      	push	{r4, r5, r6, lr}
 8004cb6:	b082      	sub	sp, #8
 8004cb8:	4605      	mov	r5, r0
 8004cba:	4614      	mov	r4, r2
  LWIP_ASSERT("invalid pointer", ipaddr != NULL);
 8004cbc:	460e      	mov	r6, r1
 8004cbe:	b139      	cbz	r1, 8004cd0 <netif_do_set_ipaddr+0x1c>
  LWIP_ASSERT("invalid pointer", old_addr != NULL);
 8004cc0:	b174      	cbz	r4, 8004ce0 <netif_do_set_ipaddr+0x2c>
  if (ip4_addr_cmp(ipaddr, netif_ip4_addr(netif)) == 0) {
 8004cc2:	686b      	ldr	r3, [r5, #4]
 8004cc4:	6832      	ldr	r2, [r6, #0]
 8004cc6:	429a      	cmp	r2, r3
 8004cc8:	d112      	bne.n	8004cf0 <netif_do_set_ipaddr+0x3c>
  return 0; /* address unchanged */
 8004cca:	2000      	movs	r0, #0
}
 8004ccc:	b002      	add	sp, #8
 8004cce:	bd70      	pop	{r4, r5, r6, pc}
  LWIP_ASSERT("invalid pointer", ipaddr != NULL);
 8004cd0:	4b10      	ldr	r3, [pc, #64]	; (8004d14 <netif_do_set_ipaddr+0x60>)
 8004cd2:	f240 12cb 	movw	r2, #459	; 0x1cb
 8004cd6:	4910      	ldr	r1, [pc, #64]	; (8004d18 <netif_do_set_ipaddr+0x64>)
 8004cd8:	4810      	ldr	r0, [pc, #64]	; (8004d1c <netif_do_set_ipaddr+0x68>)
 8004cda:	f006 fbad 	bl	800b438 <iprintf>
 8004cde:	e7ef      	b.n	8004cc0 <netif_do_set_ipaddr+0xc>
  LWIP_ASSERT("invalid pointer", old_addr != NULL);
 8004ce0:	4b0c      	ldr	r3, [pc, #48]	; (8004d14 <netif_do_set_ipaddr+0x60>)
 8004ce2:	f44f 72e6 	mov.w	r2, #460	; 0x1cc
 8004ce6:	490c      	ldr	r1, [pc, #48]	; (8004d18 <netif_do_set_ipaddr+0x64>)
 8004ce8:	480c      	ldr	r0, [pc, #48]	; (8004d1c <netif_do_set_ipaddr+0x68>)
 8004cea:	f006 fba5 	bl	800b438 <iprintf>
 8004cee:	e7e8      	b.n	8004cc2 <netif_do_set_ipaddr+0xe>
    *ip_2_ip4(&new_addr) = *ipaddr;
 8004cf0:	9201      	str	r2, [sp, #4]
    ip_addr_copy(*old_addr, *netif_ip_addr4(netif));
 8004cf2:	6023      	str	r3, [r4, #0]
  tcp_netif_ip_addr_changed(old_addr, new_addr);
 8004cf4:	a901      	add	r1, sp, #4
 8004cf6:	4620      	mov	r0, r4
 8004cf8:	f001 f962 	bl	8005fc0 <tcp_netif_ip_addr_changed>
  udp_netif_ip_addr_changed(old_addr, new_addr);
 8004cfc:	a901      	add	r1, sp, #4
 8004cfe:	4620      	mov	r0, r4
 8004d00:	f004 ff28 	bl	8009b54 <udp_netif_ip_addr_changed>
    ip4_addr_set(ip_2_ip4(&netif->ip_addr), ipaddr);
 8004d04:	6833      	ldr	r3, [r6, #0]
 8004d06:	606b      	str	r3, [r5, #4]
    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4);
 8004d08:	2101      	movs	r1, #1
 8004d0a:	4628      	mov	r0, r5
 8004d0c:	f7ff ffac 	bl	8004c68 <netif_issue_reports>
    return 1; /* address changed */
 8004d10:	2001      	movs	r0, #1
 8004d12:	e7db      	b.n	8004ccc <netif_do_set_ipaddr+0x18>
 8004d14:	080109c8 	.word	0x080109c8
 8004d18:	08010a20 	.word	0x08010a20
 8004d1c:	0800cb24 	.word	0x0800cb24

08004d20 <netif_init>:
}
 8004d20:	4770      	bx	lr
	...

08004d24 <netif_set_addr>:
{
 8004d24:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004d26:	b083      	sub	sp, #12
 8004d28:	4604      	mov	r4, r0
    ipaddr = IP4_ADDR_ANY4;
 8004d2a:	4d15      	ldr	r5, [pc, #84]	; (8004d80 <netif_set_addr+0x5c>)
 8004d2c:	2900      	cmp	r1, #0
 8004d2e:	bf18      	it	ne
 8004d30:	460d      	movne	r5, r1
    netmask = IP4_ADDR_ANY4;
 8004d32:	4f13      	ldr	r7, [pc, #76]	; (8004d80 <netif_set_addr+0x5c>)
 8004d34:	2a00      	cmp	r2, #0
 8004d36:	bf18      	it	ne
 8004d38:	4617      	movne	r7, r2
    gw = IP4_ADDR_ANY4;
 8004d3a:	4e11      	ldr	r6, [pc, #68]	; (8004d80 <netif_set_addr+0x5c>)
 8004d3c:	2b00      	cmp	r3, #0
 8004d3e:	bf18      	it	ne
 8004d40:	461e      	movne	r6, r3
  remove = ip4_addr_isany(ipaddr);
 8004d42:	b10d      	cbz	r5, 8004d48 <netif_set_addr+0x24>
 8004d44:	682b      	ldr	r3, [r5, #0]
 8004d46:	b993      	cbnz	r3, 8004d6e <netif_set_addr+0x4a>
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 8004d48:	aa01      	add	r2, sp, #4
 8004d4a:	4629      	mov	r1, r5
 8004d4c:	4620      	mov	r0, r4
 8004d4e:	f7ff ffb1 	bl	8004cb4 <netif_do_set_ipaddr>
 8004d52:	2101      	movs	r1, #1
  if (ip4_addr_cmp(netmask, netif_ip4_netmask(netif)) == 0) {
 8004d54:	683b      	ldr	r3, [r7, #0]
 8004d56:	68a2      	ldr	r2, [r4, #8]
 8004d58:	4293      	cmp	r3, r2
    ip4_addr_set(ip_2_ip4(&netif->netmask), netmask);
 8004d5a:	bf18      	it	ne
 8004d5c:	60a3      	strne	r3, [r4, #8]
  if (ip4_addr_cmp(gw, netif_ip4_gw(netif)) == 0) {
 8004d5e:	6833      	ldr	r3, [r6, #0]
 8004d60:	68e2      	ldr	r2, [r4, #12]
 8004d62:	4293      	cmp	r3, r2
    ip4_addr_set(ip_2_ip4(&netif->gw), gw);
 8004d64:	bf18      	it	ne
 8004d66:	60e3      	strne	r3, [r4, #12]
  if (!remove) {
 8004d68:	b119      	cbz	r1, 8004d72 <netif_set_addr+0x4e>
}
 8004d6a:	b003      	add	sp, #12
 8004d6c:	bdf0      	pop	{r4, r5, r6, r7, pc}
  remove = ip4_addr_isany(ipaddr);
 8004d6e:	2100      	movs	r1, #0
 8004d70:	e7f0      	b.n	8004d54 <netif_set_addr+0x30>
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 8004d72:	aa01      	add	r2, sp, #4
 8004d74:	4629      	mov	r1, r5
 8004d76:	4620      	mov	r0, r4
 8004d78:	f7ff ff9c 	bl	8004cb4 <netif_do_set_ipaddr>
}
 8004d7c:	e7f5      	b.n	8004d6a <netif_set_addr+0x46>
 8004d7e:	bf00      	nop
 8004d80:	08012434 	.word	0x08012434

08004d84 <netif_add>:
{
 8004d84:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004d88:	9c09      	ldr	r4, [sp, #36]	; 0x24
  LWIP_ERROR("netif_add: invalid netif", netif != NULL, return NULL);
 8004d8a:	4606      	mov	r6, r0
 8004d8c:	2800      	cmp	r0, #0
 8004d8e:	d02c      	beq.n	8004dea <netif_add+0x66>
  LWIP_ERROR("netif_add: No init function given", init != NULL, return NULL);
 8004d90:	2c00      	cmp	r4, #0
 8004d92:	d033      	beq.n	8004dfc <netif_add+0x78>
  ip_addr_set_zero_ip4(&netif->ip_addr);
 8004d94:	2000      	movs	r0, #0
 8004d96:	6070      	str	r0, [r6, #4]
  ip_addr_set_zero_ip4(&netif->netmask);
 8004d98:	60b0      	str	r0, [r6, #8]
  ip_addr_set_zero_ip4(&netif->gw);
 8004d9a:	60f0      	str	r0, [r6, #12]
  netif->output = netif_null_output_ip4;
 8004d9c:	4d3b      	ldr	r5, [pc, #236]	; (8004e8c <netif_add+0x108>)
 8004d9e:	6175      	str	r5, [r6, #20]
  netif->mtu = 0;
 8004da0:	84b0      	strh	r0, [r6, #36]	; 0x24
  netif->flags = 0;
 8004da2:	f886 002d 	strb.w	r0, [r6, #45]	; 0x2d
  netif->link_callback = NULL;
 8004da6:	61f0      	str	r0, [r6, #28]
  netif->state = state;
 8004da8:	9808      	ldr	r0, [sp, #32]
 8004daa:	6230      	str	r0, [r6, #32]
  netif->num = netif_num;
 8004dac:	4838      	ldr	r0, [pc, #224]	; (8004e90 <netif_add+0x10c>)
 8004dae:	7800      	ldrb	r0, [r0, #0]
 8004db0:	f886 0030 	strb.w	r0, [r6, #48]	; 0x30
  netif->input = input;
 8004db4:	980a      	ldr	r0, [sp, #40]	; 0x28
 8004db6:	6130      	str	r0, [r6, #16]
  netif_set_addr(netif, ipaddr, netmask, gw);
 8004db8:	4836      	ldr	r0, [pc, #216]	; (8004e94 <netif_add+0x110>)
 8004dba:	2b00      	cmp	r3, #0
 8004dbc:	bf08      	it	eq
 8004dbe:	4603      	moveq	r3, r0
 8004dc0:	2a00      	cmp	r2, #0
 8004dc2:	bf08      	it	eq
 8004dc4:	4602      	moveq	r2, r0
 8004dc6:	2900      	cmp	r1, #0
 8004dc8:	bf08      	it	eq
 8004dca:	4601      	moveq	r1, r0
 8004dcc:	4630      	mov	r0, r6
 8004dce:	f7ff ffa9 	bl	8004d24 <netif_set_addr>
  if (init(netif) != ERR_OK) {
 8004dd2:	4630      	mov	r0, r6
 8004dd4:	47a0      	blx	r4
 8004dd6:	2800      	cmp	r0, #0
 8004dd8:	d147      	bne.n	8004e6a <netif_add+0xe6>
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 8004dda:	f8df a0d0 	ldr.w	sl, [pc, #208]	; 8004eac <netif_add+0x128>
        LWIP_ASSERT("netif already added", netif2 != netif);
 8004dde:	f8df 80bc 	ldr.w	r8, [pc, #188]	; 8004e9c <netif_add+0x118>
 8004de2:	f8df 90cc 	ldr.w	r9, [pc, #204]	; 8004eb0 <netif_add+0x12c>
 8004de6:	4f2c      	ldr	r7, [pc, #176]	; (8004e98 <netif_add+0x114>)
 8004de8:	e031      	b.n	8004e4e <netif_add+0xca>
  LWIP_ERROR("netif_add: invalid netif", netif != NULL, return NULL);
 8004dea:	4b2c      	ldr	r3, [pc, #176]	; (8004e9c <netif_add+0x118>)
 8004dec:	f240 1227 	movw	r2, #295	; 0x127
 8004df0:	492b      	ldr	r1, [pc, #172]	; (8004ea0 <netif_add+0x11c>)
 8004df2:	4829      	ldr	r0, [pc, #164]	; (8004e98 <netif_add+0x114>)
 8004df4:	f006 fb20 	bl	800b438 <iprintf>
 8004df8:	4630      	mov	r0, r6
 8004dfa:	e045      	b.n	8004e88 <netif_add+0x104>
  LWIP_ERROR("netif_add: No init function given", init != NULL, return NULL);
 8004dfc:	4b27      	ldr	r3, [pc, #156]	; (8004e9c <netif_add+0x118>)
 8004dfe:	f44f 7294 	mov.w	r2, #296	; 0x128
 8004e02:	4928      	ldr	r1, [pc, #160]	; (8004ea4 <netif_add+0x120>)
 8004e04:	4824      	ldr	r0, [pc, #144]	; (8004e98 <netif_add+0x114>)
 8004e06:	f006 fb17 	bl	800b438 <iprintf>
 8004e0a:	2000      	movs	r0, #0
 8004e0c:	e03c      	b.n	8004e88 <netif_add+0x104>
        LWIP_ASSERT("netif already added", netif2 != netif);
 8004e0e:	4643      	mov	r3, r8
 8004e10:	f240 128b 	movw	r2, #395	; 0x18b
 8004e14:	4649      	mov	r1, r9
 8004e16:	4638      	mov	r0, r7
 8004e18:	f006 fb0e 	bl	800b438 <iprintf>
 8004e1c:	e009      	b.n	8004e32 <netif_add+0xae>
        if (netif2->num == netif->num) {
 8004e1e:	f896 3030 	ldrb.w	r3, [r6, #48]	; 0x30
 8004e22:	f894 2030 	ldrb.w	r2, [r4, #48]	; 0x30
 8004e26:	429a      	cmp	r2, r3
 8004e28:	d00e      	beq.n	8004e48 <netif_add+0xc4>
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 8004e2a:	6824      	ldr	r4, [r4, #0]
 8004e2c:	b1fc      	cbz	r4, 8004e6e <netif_add+0xea>
        LWIP_ASSERT("netif already added", netif2 != netif);
 8004e2e:	42a6      	cmp	r6, r4
 8004e30:	d0ed      	beq.n	8004e0e <netif_add+0x8a>
        num_netifs++;
 8004e32:	3501      	adds	r5, #1
        LWIP_ASSERT("too many netifs, max. supported number is 255", num_netifs <= 255);
 8004e34:	2dff      	cmp	r5, #255	; 0xff
 8004e36:	ddf2      	ble.n	8004e1e <netif_add+0x9a>
 8004e38:	4643      	mov	r3, r8
 8004e3a:	f240 128d 	movw	r2, #397	; 0x18d
 8004e3e:	491a      	ldr	r1, [pc, #104]	; (8004ea8 <netif_add+0x124>)
 8004e40:	4638      	mov	r0, r7
 8004e42:	f006 faf9 	bl	800b438 <iprintf>
 8004e46:	e7ea      	b.n	8004e1e <netif_add+0x9a>
          netif->num++;
 8004e48:	3301      	adds	r3, #1
 8004e4a:	f886 3030 	strb.w	r3, [r6, #48]	; 0x30
      if (netif->num == 255) {
 8004e4e:	f896 3030 	ldrb.w	r3, [r6, #48]	; 0x30
 8004e52:	2bff      	cmp	r3, #255	; 0xff
        netif->num = 0;
 8004e54:	bf04      	itt	eq
 8004e56:	2300      	moveq	r3, #0
 8004e58:	f886 3030 	strbeq.w	r3, [r6, #48]	; 0x30
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 8004e5c:	f8da 4000 	ldr.w	r4, [sl]
 8004e60:	b12c      	cbz	r4, 8004e6e <netif_add+0xea>
      num_netifs = 0;
 8004e62:	2500      	movs	r5, #0
 8004e64:	e7e3      	b.n	8004e2e <netif_add+0xaa>
    netif_num = 0;
 8004e66:	2300      	movs	r3, #0
 8004e68:	e007      	b.n	8004e7a <netif_add+0xf6>
    return NULL;
 8004e6a:	2000      	movs	r0, #0
 8004e6c:	e00c      	b.n	8004e88 <netif_add+0x104>
  if (netif->num == 254) {
 8004e6e:	f896 3030 	ldrb.w	r3, [r6, #48]	; 0x30
 8004e72:	2bfe      	cmp	r3, #254	; 0xfe
 8004e74:	d0f7      	beq.n	8004e66 <netif_add+0xe2>
    netif_num = (u8_t)(netif->num + 1);
 8004e76:	3301      	adds	r3, #1
 8004e78:	b2db      	uxtb	r3, r3
 8004e7a:	4a05      	ldr	r2, [pc, #20]	; (8004e90 <netif_add+0x10c>)
 8004e7c:	7013      	strb	r3, [r2, #0]
  netif->next = netif_list;
 8004e7e:	4b0b      	ldr	r3, [pc, #44]	; (8004eac <netif_add+0x128>)
 8004e80:	681a      	ldr	r2, [r3, #0]
 8004e82:	6032      	str	r2, [r6, #0]
  netif_list = netif;
 8004e84:	601e      	str	r6, [r3, #0]
  return netif;
 8004e86:	4630      	mov	r0, r6
}
 8004e88:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004e8c:	08004c61 	.word	0x08004c61
 8004e90:	2000ae54 	.word	0x2000ae54
 8004e94:	08012434 	.word	0x08012434
 8004e98:	0800cb24 	.word	0x0800cb24
 8004e9c:	080109c8 	.word	0x080109c8
 8004ea0:	08010a30 	.word	0x08010a30
 8004ea4:	08010a4c 	.word	0x08010a4c
 8004ea8:	08010a84 	.word	0x08010a84
 8004eac:	2000ae50 	.word	0x2000ae50
 8004eb0:	08010a70 	.word	0x08010a70

08004eb4 <netif_set_default>:
  netif_default = netif;
 8004eb4:	4b01      	ldr	r3, [pc, #4]	; (8004ebc <netif_set_default+0x8>)
 8004eb6:	6018      	str	r0, [r3, #0]
}
 8004eb8:	4770      	bx	lr
 8004eba:	bf00      	nop
 8004ebc:	2000ae4c 	.word	0x2000ae4c

08004ec0 <netif_set_up>:
{
 8004ec0:	b508      	push	{r3, lr}
  LWIP_ERROR("netif_set_up: invalid netif", netif != NULL, return);
 8004ec2:	b128      	cbz	r0, 8004ed0 <netif_set_up+0x10>
  if (!(netif->flags & NETIF_FLAG_UP)) {
 8004ec4:	f890 302d 	ldrb.w	r3, [r0, #45]	; 0x2d
 8004ec8:	f013 0f01 	tst.w	r3, #1
 8004ecc:	d008      	beq.n	8004ee0 <netif_set_up+0x20>
}
 8004ece:	bd08      	pop	{r3, pc}
  LWIP_ERROR("netif_set_up: invalid netif", netif != NULL, return);
 8004ed0:	4b07      	ldr	r3, [pc, #28]	; (8004ef0 <netif_set_up+0x30>)
 8004ed2:	f44f 7254 	mov.w	r2, #848	; 0x350
 8004ed6:	4907      	ldr	r1, [pc, #28]	; (8004ef4 <netif_set_up+0x34>)
 8004ed8:	4807      	ldr	r0, [pc, #28]	; (8004ef8 <netif_set_up+0x38>)
 8004eda:	f006 faad 	bl	800b438 <iprintf>
 8004ede:	e7f6      	b.n	8004ece <netif_set_up+0xe>
    netif_set_flags(netif, NETIF_FLAG_UP);
 8004ee0:	f043 0301 	orr.w	r3, r3, #1
 8004ee4:	f880 302d 	strb.w	r3, [r0, #45]	; 0x2d
    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 8004ee8:	2103      	movs	r1, #3
 8004eea:	f7ff febd 	bl	8004c68 <netif_issue_reports>
 8004eee:	e7ee      	b.n	8004ece <netif_set_up+0xe>
 8004ef0:	080109c8 	.word	0x080109c8
 8004ef4:	08010ab4 	.word	0x08010ab4
 8004ef8:	0800cb24 	.word	0x0800cb24

08004efc <netif_set_down>:
{
 8004efc:	b508      	push	{r3, lr}
  LWIP_ERROR("netif_set_down: invalid netif", netif != NULL, return);
 8004efe:	b160      	cbz	r0, 8004f1a <netif_set_down+0x1e>
  if (netif->flags & NETIF_FLAG_UP) {
 8004f00:	f890 302d 	ldrb.w	r3, [r0, #45]	; 0x2d
 8004f04:	f013 0f01 	tst.w	r3, #1
 8004f08:	d006      	beq.n	8004f18 <netif_set_down+0x1c>
    netif_clear_flags(netif, NETIF_FLAG_UP);
 8004f0a:	f023 0101 	bic.w	r1, r3, #1
 8004f0e:	f880 102d 	strb.w	r1, [r0, #45]	; 0x2d
    if (netif->flags & NETIF_FLAG_ETHARP) {
 8004f12:	f013 0f08 	tst.w	r3, #8
 8004f16:	d108      	bne.n	8004f2a <netif_set_down+0x2e>
}
 8004f18:	bd08      	pop	{r3, pc}
  LWIP_ERROR("netif_set_down: invalid netif", netif != NULL, return);
 8004f1a:	4b05      	ldr	r3, [pc, #20]	; (8004f30 <netif_set_down+0x34>)
 8004f1c:	f240 329b 	movw	r2, #923	; 0x39b
 8004f20:	4904      	ldr	r1, [pc, #16]	; (8004f34 <netif_set_down+0x38>)
 8004f22:	4805      	ldr	r0, [pc, #20]	; (8004f38 <netif_set_down+0x3c>)
 8004f24:	f006 fa88 	bl	800b438 <iprintf>
 8004f28:	e7f6      	b.n	8004f18 <netif_set_down+0x1c>
      etharp_cleanup_netif(netif);
 8004f2a:	f004 ff69 	bl	8009e00 <etharp_cleanup_netif>
    NETIF_STATUS_CALLBACK(netif);
 8004f2e:	e7f3      	b.n	8004f18 <netif_set_down+0x1c>
 8004f30:	080109c8 	.word	0x080109c8
 8004f34:	08010ad0 	.word	0x08010ad0
 8004f38:	0800cb24 	.word	0x0800cb24

08004f3c <netif_set_link_up>:
{
 8004f3c:	b510      	push	{r4, lr}
  LWIP_ERROR("netif_set_link_up: invalid netif", netif != NULL, return);
 8004f3e:	b130      	cbz	r0, 8004f4e <netif_set_link_up+0x12>
 8004f40:	4604      	mov	r4, r0
  if (!(netif->flags & NETIF_FLAG_LINK_UP)) {
 8004f42:	f890 302d 	ldrb.w	r3, [r0, #45]	; 0x2d
 8004f46:	f013 0f04 	tst.w	r3, #4
 8004f4a:	d008      	beq.n	8004f5e <netif_set_link_up+0x22>
}
 8004f4c:	bd10      	pop	{r4, pc}
  LWIP_ERROR("netif_set_link_up: invalid netif", netif != NULL, return);
 8004f4e:	4b0a      	ldr	r3, [pc, #40]	; (8004f78 <netif_set_link_up+0x3c>)
 8004f50:	f44f 7278 	mov.w	r2, #992	; 0x3e0
 8004f54:	4909      	ldr	r1, [pc, #36]	; (8004f7c <netif_set_link_up+0x40>)
 8004f56:	480a      	ldr	r0, [pc, #40]	; (8004f80 <netif_set_link_up+0x44>)
 8004f58:	f006 fa6e 	bl	800b438 <iprintf>
 8004f5c:	e7f6      	b.n	8004f4c <netif_set_link_up+0x10>
    netif_set_flags(netif, NETIF_FLAG_LINK_UP);
 8004f5e:	f043 0304 	orr.w	r3, r3, #4
 8004f62:	f880 302d 	strb.w	r3, [r0, #45]	; 0x2d
    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 8004f66:	2103      	movs	r1, #3
 8004f68:	f7ff fe7e 	bl	8004c68 <netif_issue_reports>
    NETIF_LINK_CALLBACK(netif);
 8004f6c:	69e3      	ldr	r3, [r4, #28]
 8004f6e:	2b00      	cmp	r3, #0
 8004f70:	d0ec      	beq.n	8004f4c <netif_set_link_up+0x10>
 8004f72:	4620      	mov	r0, r4
 8004f74:	4798      	blx	r3
 8004f76:	e7e9      	b.n	8004f4c <netif_set_link_up+0x10>
 8004f78:	080109c8 	.word	0x080109c8
 8004f7c:	08010af0 	.word	0x08010af0
 8004f80:	0800cb24 	.word	0x0800cb24

08004f84 <netif_set_link_down>:
{
 8004f84:	b508      	push	{r3, lr}
  LWIP_ERROR("netif_set_link_down: invalid netif", netif != NULL, return);
 8004f86:	b160      	cbz	r0, 8004fa2 <netif_set_link_down+0x1e>
  if (netif->flags & NETIF_FLAG_LINK_UP) {
 8004f88:	f890 302d 	ldrb.w	r3, [r0, #45]	; 0x2d
 8004f8c:	f013 0f04 	tst.w	r3, #4
 8004f90:	d006      	beq.n	8004fa0 <netif_set_link_down+0x1c>
    netif_clear_flags(netif, NETIF_FLAG_LINK_UP);
 8004f92:	f023 0304 	bic.w	r3, r3, #4
 8004f96:	f880 302d 	strb.w	r3, [r0, #45]	; 0x2d
    NETIF_LINK_CALLBACK(netif);
 8004f9a:	69c3      	ldr	r3, [r0, #28]
 8004f9c:	b103      	cbz	r3, 8004fa0 <netif_set_link_down+0x1c>
 8004f9e:	4798      	blx	r3
}
 8004fa0:	bd08      	pop	{r3, pc}
  LWIP_ERROR("netif_set_link_down: invalid netif", netif != NULL, return);
 8004fa2:	4b04      	ldr	r3, [pc, #16]	; (8004fb4 <netif_set_link_down+0x30>)
 8004fa4:	f240 4206 	movw	r2, #1030	; 0x406
 8004fa8:	4903      	ldr	r1, [pc, #12]	; (8004fb8 <netif_set_link_down+0x34>)
 8004faa:	4804      	ldr	r0, [pc, #16]	; (8004fbc <netif_set_link_down+0x38>)
 8004fac:	f006 fa44 	bl	800b438 <iprintf>
 8004fb0:	e7f6      	b.n	8004fa0 <netif_set_link_down+0x1c>
 8004fb2:	bf00      	nop
 8004fb4:	080109c8 	.word	0x080109c8
 8004fb8:	08010b14 	.word	0x08010b14
 8004fbc:	0800cb24 	.word	0x0800cb24

08004fc0 <netif_set_link_callback>:
  if (netif) {
 8004fc0:	b100      	cbz	r0, 8004fc4 <netif_set_link_callback+0x4>
    netif->link_callback = link_callback;
 8004fc2:	61c1      	str	r1, [r0, #28]
}
 8004fc4:	4770      	bx	lr
	...

08004fc8 <netif_get_by_index>:
{
  struct netif *netif;

  LWIP_ASSERT_CORE_LOCKED();

  if (idx != NETIF_NO_INDEX) {
 8004fc8:	4602      	mov	r2, r0
 8004fca:	b160      	cbz	r0, 8004fe6 <netif_get_by_index+0x1e>
    NETIF_FOREACH(netif) {
 8004fcc:	4b07      	ldr	r3, [pc, #28]	; (8004fec <netif_get_by_index+0x24>)
 8004fce:	6818      	ldr	r0, [r3, #0]
 8004fd0:	b150      	cbz	r0, 8004fe8 <netif_get_by_index+0x20>
      if (idx == netif_get_index(netif)) {
 8004fd2:	f890 3030 	ldrb.w	r3, [r0, #48]	; 0x30
 8004fd6:	3301      	adds	r3, #1
 8004fd8:	b2db      	uxtb	r3, r3
 8004fda:	4293      	cmp	r3, r2
 8004fdc:	d004      	beq.n	8004fe8 <netif_get_by_index+0x20>
    NETIF_FOREACH(netif) {
 8004fde:	6800      	ldr	r0, [r0, #0]
 8004fe0:	2800      	cmp	r0, #0
 8004fe2:	d1f6      	bne.n	8004fd2 <netif_get_by_index+0xa>
 8004fe4:	4770      	bx	lr
        return netif; /* found! */
      }
    }
  }

  return NULL;
 8004fe6:	2000      	movs	r0, #0
}
 8004fe8:	4770      	bx	lr
 8004fea:	bf00      	nop
 8004fec:	2000ae50 	.word	0x2000ae50

08004ff0 <pbuf_add_header_impl>:
 * @return non-zero on failure, zero on success.
 *
 */
static u8_t
pbuf_add_header_impl(struct pbuf *p, size_t header_size_increment, u8_t force)
{
 8004ff0:	b508      	push	{r3, lr}
  u16_t type_internal;
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 8004ff2:	b1d8      	cbz	r0, 800502c <pbuf_add_header_impl+0x3c>
 8004ff4:	4603      	mov	r3, r0
  if ((p == NULL) || (header_size_increment > 0xFFFF)) {
 8004ff6:	f5b1 3f80 	cmp.w	r1, #65536	; 0x10000
 8004ffa:	d22e      	bcs.n	800505a <pbuf_add_header_impl+0x6a>
    return 1;
  }
  if (header_size_increment == 0) {
 8004ffc:	b339      	cbz	r1, 800504e <pbuf_add_header_impl+0x5e>
    return 0;
  }

  increment_magnitude = (u16_t)header_size_increment;
 8004ffe:	fa1f fc81 	uxth.w	ip, r1
  /* Do not allow tot_len to wrap as a result. */
  if ((u16_t)(increment_magnitude + p->tot_len) < increment_magnitude) {
 8005002:	8918      	ldrh	r0, [r3, #8]
 8005004:	4460      	add	r0, ip
 8005006:	b280      	uxth	r0, r0
 8005008:	4560      	cmp	r0, ip
 800500a:	d322      	bcc.n	8005052 <pbuf_add_header_impl+0x62>
  }

  type_internal = p->type_internal;

  /* pbuf types containing payloads? */
  if (type_internal & PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS) {
 800500c:	f993 e00c 	ldrsb.w	lr, [r3, #12]
 8005010:	f1be 0f00 	cmp.w	lr, #0
 8005014:	db13      	blt.n	800503e <pbuf_add_header_impl+0x4e>
      return 1;
    }
    /* pbuf types referring to external payloads? */
  } else {
    /* hide a header in the payload? */
    if (force) {
 8005016:	b1f2      	cbz	r2, 8005056 <pbuf_add_header_impl+0x66>
      payload = (u8_t *)p->payload - header_size_increment;
 8005018:	685a      	ldr	r2, [r3, #4]
 800501a:	1a51      	subs	r1, r2, r1
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_add_header: old %p new %p (%"U16_F")\n",
              (void *)p->payload, (void *)payload, increment_magnitude));

  /* modify pbuf fields */
  p->payload = payload;
 800501c:	6059      	str	r1, [r3, #4]
  p->len = (u16_t)(p->len + increment_magnitude);
 800501e:	895a      	ldrh	r2, [r3, #10]
 8005020:	4494      	add	ip, r2
 8005022:	f8a3 c00a 	strh.w	ip, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len + increment_magnitude);
 8005026:	8118      	strh	r0, [r3, #8]


  return 0;
 8005028:	2000      	movs	r0, #0
 800502a:	e017      	b.n	800505c <pbuf_add_header_impl+0x6c>
  LWIP_ASSERT("p != NULL", p != NULL);
 800502c:	4b0c      	ldr	r3, [pc, #48]	; (8005060 <pbuf_add_header_impl+0x70>)
 800502e:	f240 12df 	movw	r2, #479	; 0x1df
 8005032:	490c      	ldr	r1, [pc, #48]	; (8005064 <pbuf_add_header_impl+0x74>)
 8005034:	480c      	ldr	r0, [pc, #48]	; (8005068 <pbuf_add_header_impl+0x78>)
 8005036:	f006 f9ff 	bl	800b438 <iprintf>
    return 1;
 800503a:	2001      	movs	r0, #1
 800503c:	e00e      	b.n	800505c <pbuf_add_header_impl+0x6c>
    payload = (u8_t *)p->payload - header_size_increment;
 800503e:	685a      	ldr	r2, [r3, #4]
 8005040:	1a51      	subs	r1, r2, r1
    if ((u8_t *)payload < (u8_t *)p + SIZEOF_STRUCT_PBUF) {
 8005042:	f103 0210 	add.w	r2, r3, #16
 8005046:	4291      	cmp	r1, r2
 8005048:	d2e8      	bcs.n	800501c <pbuf_add_header_impl+0x2c>
      return 1;
 800504a:	2001      	movs	r0, #1
 800504c:	e006      	b.n	800505c <pbuf_add_header_impl+0x6c>
    return 0;
 800504e:	2000      	movs	r0, #0
 8005050:	e004      	b.n	800505c <pbuf_add_header_impl+0x6c>
    return 1;
 8005052:	2001      	movs	r0, #1
 8005054:	e002      	b.n	800505c <pbuf_add_header_impl+0x6c>
      return 1;
 8005056:	2001      	movs	r0, #1
 8005058:	e000      	b.n	800505c <pbuf_add_header_impl+0x6c>
    return 1;
 800505a:	2001      	movs	r0, #1
}
 800505c:	bd08      	pop	{r3, pc}
 800505e:	bf00      	nop
 8005060:	08010b38 	.word	0x08010b38
 8005064:	08010b68 	.word	0x08010b68
 8005068:	0800cb24 	.word	0x0800cb24

0800506c <pbuf_free_ooseq>:
{
 800506c:	b508      	push	{r3, lr}
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 0);
 800506e:	4b07      	ldr	r3, [pc, #28]	; (800508c <pbuf_free_ooseq+0x20>)
 8005070:	2200      	movs	r2, #0
 8005072:	701a      	strb	r2, [r3, #0]
  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 8005074:	4b06      	ldr	r3, [pc, #24]	; (8005090 <pbuf_free_ooseq+0x24>)
 8005076:	6818      	ldr	r0, [r3, #0]
 8005078:	b138      	cbz	r0, 800508a <pbuf_free_ooseq+0x1e>
    if (pcb->ooseq != NULL) {
 800507a:	6f43      	ldr	r3, [r0, #116]	; 0x74
 800507c:	b91b      	cbnz	r3, 8005086 <pbuf_free_ooseq+0x1a>
  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 800507e:	68c0      	ldr	r0, [r0, #12]
 8005080:	2800      	cmp	r0, #0
 8005082:	d1fa      	bne.n	800507a <pbuf_free_ooseq+0xe>
 8005084:	e001      	b.n	800508a <pbuf_free_ooseq+0x1e>
      tcp_free_ooseq(pcb);
 8005086:	f000 fe33 	bl	8005cf0 <tcp_free_ooseq>
}
 800508a:	bd08      	pop	{r3, pc}
 800508c:	2000ae55 	.word	0x2000ae55
 8005090:	2000ae58 	.word	0x2000ae58

08005094 <pbuf_alloc_reference>:
{
 8005094:	b570      	push	{r4, r5, r6, lr}
 8005096:	4606      	mov	r6, r0
 8005098:	460d      	mov	r5, r1
 800509a:	4614      	mov	r4, r2
  LWIP_ASSERT("invalid pbuf_type", (type == PBUF_REF) || (type == PBUF_ROM));
 800509c:	f022 0340 	bic.w	r3, r2, #64	; 0x40
 80050a0:	b29b      	uxth	r3, r3
 80050a2:	2b01      	cmp	r3, #1
 80050a4:	d110      	bne.n	80050c8 <pbuf_alloc_reference+0x34>
  p = (struct pbuf *)memp_malloc(MEMP_PBUF);
 80050a6:	2007      	movs	r0, #7
 80050a8:	f7ff fd90 	bl	8004bcc <memp_malloc>
  if (p == NULL) {
 80050ac:	4603      	mov	r3, r0
 80050ae:	b148      	cbz	r0, 80050c4 <pbuf_alloc_reference+0x30>
  p->next = NULL;
 80050b0:	2200      	movs	r2, #0
 80050b2:	6002      	str	r2, [r0, #0]
  p->payload = payload;
 80050b4:	6046      	str	r6, [r0, #4]
  p->tot_len = tot_len;
 80050b6:	8105      	strh	r5, [r0, #8]
  p->len = len;
 80050b8:	8145      	strh	r5, [r0, #10]
  p->type_internal = (u8_t)type;
 80050ba:	7304      	strb	r4, [r0, #12]
  p->flags = flags;
 80050bc:	7342      	strb	r2, [r0, #13]
  p->ref = 1;
 80050be:	2101      	movs	r1, #1
 80050c0:	7381      	strb	r1, [r0, #14]
  p->if_idx = NETIF_NO_INDEX;
 80050c2:	73c2      	strb	r2, [r0, #15]
}
 80050c4:	4618      	mov	r0, r3
 80050c6:	bd70      	pop	{r4, r5, r6, pc}
  LWIP_ASSERT("invalid pbuf_type", (type == PBUF_REF) || (type == PBUF_ROM));
 80050c8:	4b03      	ldr	r3, [pc, #12]	; (80050d8 <pbuf_alloc_reference+0x44>)
 80050ca:	f44f 72a5 	mov.w	r2, #330	; 0x14a
 80050ce:	4903      	ldr	r1, [pc, #12]	; (80050dc <pbuf_alloc_reference+0x48>)
 80050d0:	4803      	ldr	r0, [pc, #12]	; (80050e0 <pbuf_alloc_reference+0x4c>)
 80050d2:	f006 f9b1 	bl	800b438 <iprintf>
 80050d6:	e7e6      	b.n	80050a6 <pbuf_alloc_reference+0x12>
 80050d8:	08010b38 	.word	0x08010b38
 80050dc:	08010b74 	.word	0x08010b74
 80050e0:	0800cb24 	.word	0x0800cb24

080050e4 <pbuf_alloced_custom>:
{
 80050e4:	b430      	push	{r4, r5}
 80050e6:	9c02      	ldr	r4, [sp, #8]
  if (LWIP_MEM_ALIGN_SIZE(offset) + length > payload_mem_len) {
 80050e8:	3003      	adds	r0, #3
 80050ea:	f020 0003 	bic.w	r0, r0, #3
 80050ee:	eb01 0c00 	add.w	ip, r1, r0
 80050f2:	f8bd 500c 	ldrh.w	r5, [sp, #12]
 80050f6:	45ac      	cmp	ip, r5
 80050f8:	d80f      	bhi.n	800511a <pbuf_alloced_custom+0x36>
  if (payload_mem != NULL) {
 80050fa:	b104      	cbz	r4, 80050fe <pbuf_alloced_custom+0x1a>
    payload = (u8_t *)payload_mem + LWIP_MEM_ALIGN_SIZE(offset);
 80050fc:	4404      	add	r4, r0
  pbuf_init_alloced_pbuf(&p->pbuf, payload, length, length, type, PBUF_FLAG_IS_CUSTOM);
 80050fe:	4618      	mov	r0, r3
  p->next = NULL;
 8005100:	2500      	movs	r5, #0
 8005102:	601d      	str	r5, [r3, #0]
  p->payload = payload;
 8005104:	605c      	str	r4, [r3, #4]
  p->tot_len = tot_len;
 8005106:	8119      	strh	r1, [r3, #8]
  p->len = len;
 8005108:	8159      	strh	r1, [r3, #10]
  p->type_internal = (u8_t)type;
 800510a:	731a      	strb	r2, [r3, #12]
  p->flags = flags;
 800510c:	2202      	movs	r2, #2
 800510e:	735a      	strb	r2, [r3, #13]
  p->ref = 1;
 8005110:	2201      	movs	r2, #1
 8005112:	739a      	strb	r2, [r3, #14]
  p->if_idx = NETIF_NO_INDEX;
 8005114:	73dd      	strb	r5, [r3, #15]
}
 8005116:	bc30      	pop	{r4, r5}
 8005118:	4770      	bx	lr
    return NULL;
 800511a:	2000      	movs	r0, #0
 800511c:	e7fb      	b.n	8005116 <pbuf_alloced_custom+0x32>

0800511e <pbuf_add_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_add_header(struct pbuf *p, size_t header_size_increment)
{
 800511e:	b508      	push	{r3, lr}
  return pbuf_add_header_impl(p, header_size_increment, 0);
 8005120:	2200      	movs	r2, #0
 8005122:	f7ff ff65 	bl	8004ff0 <pbuf_add_header_impl>
}
 8005126:	bd08      	pop	{r3, pc}

08005128 <pbuf_remove_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_remove_header(struct pbuf *p, size_t header_size_decrement)
{
 8005128:	b510      	push	{r4, lr}
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 800512a:	b190      	cbz	r0, 8005152 <pbuf_remove_header+0x2a>
 800512c:	4603      	mov	r3, r0
  if ((p == NULL) || (header_size_decrement > 0xFFFF)) {
 800512e:	f5b1 3f80 	cmp.w	r1, #65536	; 0x10000
 8005132:	d222      	bcs.n	800517a <pbuf_remove_header+0x52>
    return 1;
  }
  if (header_size_decrement == 0) {
 8005134:	b1f9      	cbz	r1, 8005176 <pbuf_remove_header+0x4e>
    return 0;
  }

  increment_magnitude = (u16_t)header_size_decrement;
 8005136:	b288      	uxth	r0, r1
  /* Check that we aren't going to move off the end of the pbuf */
  LWIP_ERROR("increment_magnitude <= p->len", (increment_magnitude <= p->len), return 1;);
 8005138:	895a      	ldrh	r2, [r3, #10]
 800513a:	4282      	cmp	r2, r0
 800513c:	d312      	bcc.n	8005164 <pbuf_remove_header+0x3c>
  /* remember current payload pointer */
  payload = p->payload;
  LWIP_UNUSED_ARG(payload); /* only used in LWIP_DEBUGF below */

  /* increase payload pointer (guarded by length check above) */
  p->payload = (u8_t *)p->payload + header_size_decrement;
 800513e:	685c      	ldr	r4, [r3, #4]
 8005140:	4421      	add	r1, r4
 8005142:	6059      	str	r1, [r3, #4]
  /* modify pbuf length fields */
  p->len = (u16_t)(p->len - increment_magnitude);
 8005144:	1a12      	subs	r2, r2, r0
 8005146:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len - increment_magnitude);
 8005148:	891a      	ldrh	r2, [r3, #8]
 800514a:	1a10      	subs	r0, r2, r0
 800514c:	8118      	strh	r0, [r3, #8]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_remove_header: old %p new %p (%"U16_F")\n",
              (void *)payload, (void *)p->payload, increment_magnitude));

  return 0;
 800514e:	2000      	movs	r0, #0
}
 8005150:	bd10      	pop	{r4, pc}
  LWIP_ASSERT("p != NULL", p != NULL);
 8005152:	4b0b      	ldr	r3, [pc, #44]	; (8005180 <pbuf_remove_header+0x58>)
 8005154:	f240 224b 	movw	r2, #587	; 0x24b
 8005158:	490a      	ldr	r1, [pc, #40]	; (8005184 <pbuf_remove_header+0x5c>)
 800515a:	480b      	ldr	r0, [pc, #44]	; (8005188 <pbuf_remove_header+0x60>)
 800515c:	f006 f96c 	bl	800b438 <iprintf>
    return 1;
 8005160:	2001      	movs	r0, #1
 8005162:	e7f5      	b.n	8005150 <pbuf_remove_header+0x28>
  LWIP_ERROR("increment_magnitude <= p->len", (increment_magnitude <= p->len), return 1;);
 8005164:	4b06      	ldr	r3, [pc, #24]	; (8005180 <pbuf_remove_header+0x58>)
 8005166:	f240 2255 	movw	r2, #597	; 0x255
 800516a:	4908      	ldr	r1, [pc, #32]	; (800518c <pbuf_remove_header+0x64>)
 800516c:	4806      	ldr	r0, [pc, #24]	; (8005188 <pbuf_remove_header+0x60>)
 800516e:	f006 f963 	bl	800b438 <iprintf>
 8005172:	2001      	movs	r0, #1
 8005174:	e7ec      	b.n	8005150 <pbuf_remove_header+0x28>
    return 0;
 8005176:	2000      	movs	r0, #0
 8005178:	e7ea      	b.n	8005150 <pbuf_remove_header+0x28>
    return 1;
 800517a:	2001      	movs	r0, #1
 800517c:	e7e8      	b.n	8005150 <pbuf_remove_header+0x28>
 800517e:	bf00      	nop
 8005180:	08010b38 	.word	0x08010b38
 8005184:	08010b68 	.word	0x08010b68
 8005188:	0800cb24 	.word	0x0800cb24
 800518c:	08010b88 	.word	0x08010b88

08005190 <pbuf_header_force>:
 * Same as pbuf_header but does not check if 'header_size > 0' is allowed.
 * This is used internally only, to allow PBUF_REF for RX.
 */
u8_t
pbuf_header_force(struct pbuf *p, s16_t header_size_increment)
{
 8005190:	b508      	push	{r3, lr}
  if (header_size_increment < 0) {
 8005192:	2900      	cmp	r1, #0
 8005194:	db03      	blt.n	800519e <pbuf_header_force+0xe>
    return pbuf_add_header_impl(p, (size_t)header_size_increment, force);
 8005196:	2201      	movs	r2, #1
 8005198:	f7ff ff2a 	bl	8004ff0 <pbuf_add_header_impl>
  return pbuf_header_impl(p, header_size_increment, 1);
}
 800519c:	bd08      	pop	{r3, pc}
    return pbuf_remove_header(p, (size_t) - header_size_increment);
 800519e:	4249      	negs	r1, r1
 80051a0:	f7ff ffc2 	bl	8005128 <pbuf_remove_header>
 80051a4:	e7fa      	b.n	800519c <pbuf_header_force+0xc>
	...

080051a8 <pbuf_free>:
 * 1->1->1 becomes .......
 *
 */
u8_t
pbuf_free(struct pbuf *p)
{
 80051a8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  u8_t alloc_src;
  struct pbuf *q;
  u8_t count;

  if (p == NULL) {
 80051ac:	b130      	cbz	r0, 80051bc <pbuf_free+0x14>
 80051ae:	4604      	mov	r4, r0
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free(%p)\n", (void *)p));

  PERF_START;

  count = 0;
 80051b0:	2500      	movs	r5, #0
    /* Since decrementing ref cannot be guaranteed to be a single machine operation
     * we must protect it. We put the new ref into a local variable to prevent
     * further protection. */
    SYS_ARCH_PROTECT(old_level);
    /* all pbufs in a chain are referenced at least once */
    LWIP_ASSERT("pbuf_free: p->ref > 0", p->ref > 0);
 80051b2:	4f2c      	ldr	r7, [pc, #176]	; (8005264 <pbuf_free+0xbc>)
 80051b4:	f8df 80c0 	ldr.w	r8, [pc, #192]	; 8005278 <pbuf_free+0xd0>
 80051b8:	4e2b      	ldr	r6, [pc, #172]	; (8005268 <pbuf_free+0xc0>)
 80051ba:	e01b      	b.n	80051f4 <pbuf_free+0x4c>
    LWIP_ASSERT("p != NULL", p != NULL);
 80051bc:	4b29      	ldr	r3, [pc, #164]	; (8005264 <pbuf_free+0xbc>)
 80051be:	f44f 7237 	mov.w	r2, #732	; 0x2dc
 80051c2:	492a      	ldr	r1, [pc, #168]	; (800526c <pbuf_free+0xc4>)
 80051c4:	4828      	ldr	r0, [pc, #160]	; (8005268 <pbuf_free+0xc0>)
 80051c6:	f006 f937 	bl	800b438 <iprintf>
    return 0;
 80051ca:	2500      	movs	r5, #0
    }
  }
  PERF_STOP("pbuf_free");
  /* return number of de-allocated pbufs */
  return count;
}
 80051cc:	4628      	mov	r0, r5
 80051ce:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    LWIP_ASSERT("pbuf_free: p->ref > 0", p->ref > 0);
 80051d2:	463b      	mov	r3, r7
 80051d4:	f240 22f1 	movw	r2, #753	; 0x2f1
 80051d8:	4641      	mov	r1, r8
 80051da:	4630      	mov	r0, r6
 80051dc:	f006 f92c 	bl	800b438 <iprintf>
 80051e0:	e00b      	b.n	80051fa <pbuf_free+0x52>
        pc->custom_free_function(p);
 80051e2:	6923      	ldr	r3, [r4, #16]
 80051e4:	4620      	mov	r0, r4
 80051e6:	4798      	blx	r3
      count++;
 80051e8:	3501      	adds	r5, #1
 80051ea:	b2ed      	uxtb	r5, r5
  while (p != NULL) {
 80051ec:	f1b9 0f00 	cmp.w	r9, #0
 80051f0:	d0ec      	beq.n	80051cc <pbuf_free+0x24>
      p = q;
 80051f2:	464c      	mov	r4, r9
    LWIP_ASSERT("pbuf_free: p->ref > 0", p->ref > 0);
 80051f4:	7ba3      	ldrb	r3, [r4, #14]
 80051f6:	2b00      	cmp	r3, #0
 80051f8:	d0eb      	beq.n	80051d2 <pbuf_free+0x2a>
    ref = --(p->ref);
 80051fa:	7ba3      	ldrb	r3, [r4, #14]
 80051fc:	3b01      	subs	r3, #1
 80051fe:	b2db      	uxtb	r3, r3
 8005200:	73a3      	strb	r3, [r4, #14]
    if (ref == 0) {
 8005202:	2b00      	cmp	r3, #0
 8005204:	d1e2      	bne.n	80051cc <pbuf_free+0x24>
      q = p->next;
 8005206:	f8d4 9000 	ldr.w	r9, [r4]
      if ((p->flags & PBUF_FLAG_IS_CUSTOM) != 0) {
 800520a:	7b63      	ldrb	r3, [r4, #13]
 800520c:	f013 0f02 	tst.w	r3, #2
 8005210:	d00a      	beq.n	8005228 <pbuf_free+0x80>
        LWIP_ASSERT("pc->custom_free_function != NULL", pc->custom_free_function != NULL);
 8005212:	6923      	ldr	r3, [r4, #16]
 8005214:	2b00      	cmp	r3, #0
 8005216:	d1e4      	bne.n	80051e2 <pbuf_free+0x3a>
 8005218:	463b      	mov	r3, r7
 800521a:	f240 22ff 	movw	r2, #767	; 0x2ff
 800521e:	4914      	ldr	r1, [pc, #80]	; (8005270 <pbuf_free+0xc8>)
 8005220:	4630      	mov	r0, r6
 8005222:	f006 f909 	bl	800b438 <iprintf>
 8005226:	e7dc      	b.n	80051e2 <pbuf_free+0x3a>
      alloc_src = pbuf_get_allocsrc(p);
 8005228:	7b23      	ldrb	r3, [r4, #12]
 800522a:	f003 030f 	and.w	r3, r3, #15
        if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF_POOL) {
 800522e:	2b02      	cmp	r3, #2
 8005230:	d006      	beq.n	8005240 <pbuf_free+0x98>
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF) {
 8005232:	2b01      	cmp	r3, #1
 8005234:	d009      	beq.n	800524a <pbuf_free+0xa2>
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) {
 8005236:	b96b      	cbnz	r3, 8005254 <pbuf_free+0xac>
          mem_free(p);
 8005238:	4620      	mov	r0, r4
 800523a:	f7ff fa29 	bl	8004690 <mem_free>
 800523e:	e7d3      	b.n	80051e8 <pbuf_free+0x40>
          memp_free(MEMP_PBUF_POOL, p);
 8005240:	4621      	mov	r1, r4
 8005242:	2008      	movs	r0, #8
 8005244:	f7ff fcf2 	bl	8004c2c <memp_free>
 8005248:	e7ce      	b.n	80051e8 <pbuf_free+0x40>
          memp_free(MEMP_PBUF, p);
 800524a:	4621      	mov	r1, r4
 800524c:	2007      	movs	r0, #7
 800524e:	f7ff fced 	bl	8004c2c <memp_free>
 8005252:	e7c9      	b.n	80051e8 <pbuf_free+0x40>
          LWIP_ASSERT("invalid pbuf type", 0);
 8005254:	463b      	mov	r3, r7
 8005256:	f240 320f 	movw	r2, #783	; 0x30f
 800525a:	4906      	ldr	r1, [pc, #24]	; (8005274 <pbuf_free+0xcc>)
 800525c:	4630      	mov	r0, r6
 800525e:	f006 f8eb 	bl	800b438 <iprintf>
 8005262:	e7c1      	b.n	80051e8 <pbuf_free+0x40>
 8005264:	08010b38 	.word	0x08010b38
 8005268:	0800cb24 	.word	0x0800cb24
 800526c:	08010b68 	.word	0x08010b68
 8005270:	08010bc0 	.word	0x08010bc0
 8005274:	08010be4 	.word	0x08010be4
 8005278:	08010ba8 	.word	0x08010ba8

0800527c <pbuf_alloc>:
{
 800527c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005280:	460e      	mov	r6, r1
  u16_t offset = (u16_t)layer;
 8005282:	b285      	uxth	r5, r0
  switch (type) {
 8005284:	f5b2 7fc1 	cmp.w	r2, #386	; 0x182
 8005288:	d03d      	beq.n	8005306 <pbuf_alloc+0x8a>
 800528a:	4604      	mov	r4, r0
 800528c:	d80e      	bhi.n	80052ac <pbuf_alloc+0x30>
 800528e:	f022 0340 	bic.w	r3, r2, #64	; 0x40
 8005292:	b29b      	uxth	r3, r3
 8005294:	2b01      	cmp	r3, #1
 8005296:	d02f      	beq.n	80052f8 <pbuf_alloc+0x7c>
      LWIP_ASSERT("pbuf_alloc: erroneous type", 0);
 8005298:	4b3c      	ldr	r3, [pc, #240]	; (800538c <pbuf_alloc+0x110>)
 800529a:	f240 1227 	movw	r2, #295	; 0x127
 800529e:	493c      	ldr	r1, [pc, #240]	; (8005390 <pbuf_alloc+0x114>)
 80052a0:	483c      	ldr	r0, [pc, #240]	; (8005394 <pbuf_alloc+0x118>)
 80052a2:	f006 f8c9 	bl	800b438 <iprintf>
      return NULL;
 80052a6:	f04f 0800 	mov.w	r8, #0
 80052aa:	e029      	b.n	8005300 <pbuf_alloc+0x84>
  switch (type) {
 80052ac:	f5b2 7f20 	cmp.w	r2, #640	; 0x280
 80052b0:	d1f2      	bne.n	8005298 <pbuf_alloc+0x1c>
      u16_t payload_len = (u16_t)(LWIP_MEM_ALIGN_SIZE(offset) + LWIP_MEM_ALIGN_SIZE(length));
 80052b2:	1ceb      	adds	r3, r5, #3
 80052b4:	f023 0303 	bic.w	r3, r3, #3
 80052b8:	1cca      	adds	r2, r1, #3
 80052ba:	f022 0503 	bic.w	r5, r2, #3
 80052be:	442b      	add	r3, r5
 80052c0:	b29b      	uxth	r3, r3
      mem_size_t alloc_len = (mem_size_t)(LWIP_MEM_ALIGN_SIZE(SIZEOF_STRUCT_PBUF) + payload_len);
 80052c2:	f103 0010 	add.w	r0, r3, #16
 80052c6:	b280      	uxth	r0, r0
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 80052c8:	42ab      	cmp	r3, r5
 80052ca:	d359      	bcc.n	8005380 <pbuf_alloc+0x104>
 80052cc:	4285      	cmp	r5, r0
 80052ce:	d85a      	bhi.n	8005386 <pbuf_alloc+0x10a>
      p = (struct pbuf *)mem_malloc(alloc_len);
 80052d0:	f7ff fb5a 	bl	8004988 <mem_malloc>
      if (p == NULL) {
 80052d4:	4680      	mov	r8, r0
 80052d6:	b198      	cbz	r0, 8005300 <pbuf_alloc+0x84>
  p->next = NULL;
 80052d8:	2200      	movs	r2, #0
 80052da:	6002      	str	r2, [r0, #0]
      pbuf_init_alloced_pbuf(p, LWIP_MEM_ALIGN((void *)((u8_t *)p + SIZEOF_STRUCT_PBUF + offset)),
 80052dc:	1903      	adds	r3, r0, r4
 80052de:	3313      	adds	r3, #19
 80052e0:	f023 0303 	bic.w	r3, r3, #3
  p->payload = payload;
 80052e4:	6043      	str	r3, [r0, #4]
  p->tot_len = tot_len;
 80052e6:	8106      	strh	r6, [r0, #8]
  p->len = len;
 80052e8:	8146      	strh	r6, [r0, #10]
  p->type_internal = (u8_t)type;
 80052ea:	2380      	movs	r3, #128	; 0x80
 80052ec:	7303      	strb	r3, [r0, #12]
  p->flags = flags;
 80052ee:	7342      	strb	r2, [r0, #13]
  p->ref = 1;
 80052f0:	2301      	movs	r3, #1
 80052f2:	7383      	strb	r3, [r0, #14]
  p->if_idx = NETIF_NO_INDEX;
 80052f4:	73c2      	strb	r2, [r0, #15]
      LWIP_ASSERT("pbuf_alloc: pbuf->payload properly aligned",
 80052f6:	e003      	b.n	8005300 <pbuf_alloc+0x84>
      p = pbuf_alloc_reference(NULL, length, type);
 80052f8:	2000      	movs	r0, #0
 80052fa:	f7ff fecb 	bl	8005094 <pbuf_alloc_reference>
 80052fe:	4680      	mov	r8, r0
}
 8005300:	4640      	mov	r0, r8
 8005302:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  switch (type) {
 8005306:	2400      	movs	r4, #0
 8005308:	46a0      	mov	r8, r4
        q = (struct pbuf *)memp_malloc(MEMP_PBUF_POOL);
 800530a:	f04f 0a08 	mov.w	sl, #8
  p->next = NULL;
 800530e:	4627      	mov	r7, r4
  p->type_internal = (u8_t)type;
 8005310:	f04f 0b82 	mov.w	fp, #130	; 0x82
 8005314:	e011      	b.n	800533a <pbuf_alloc+0xbe>
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 1);
 8005316:	4b20      	ldr	r3, [pc, #128]	; (8005398 <pbuf_alloc+0x11c>)
 8005318:	2201      	movs	r2, #1
 800531a:	701a      	strb	r2, [r3, #0]
          if (p) {
 800531c:	f1b8 0f00 	cmp.w	r8, #0
 8005320:	d0ee      	beq.n	8005300 <pbuf_alloc+0x84>
            pbuf_free(p);
 8005322:	4640      	mov	r0, r8
 8005324:	f7ff ff40 	bl	80051a8 <pbuf_free>
          return NULL;
 8005328:	46a0      	mov	r8, r4
 800532a:	e7e9      	b.n	8005300 <pbuf_alloc+0x84>
          last->next = q;
 800532c:	f8c9 0000 	str.w	r0, [r9]
        rem_len = (u16_t)(rem_len - qlen);
 8005330:	1a76      	subs	r6, r6, r1
 8005332:	b2b6      	uxth	r6, r6
        offset = 0;
 8005334:	463d      	mov	r5, r7
      } while (rem_len > 0);
 8005336:	2e00      	cmp	r6, #0
 8005338:	d0e2      	beq.n	8005300 <pbuf_alloc+0x84>
        q = (struct pbuf *)memp_malloc(MEMP_PBUF_POOL);
 800533a:	46a1      	mov	r9, r4
 800533c:	4650      	mov	r0, sl
 800533e:	f7ff fc45 	bl	8004bcc <memp_malloc>
        if (q == NULL) {
 8005342:	4604      	mov	r4, r0
 8005344:	2800      	cmp	r0, #0
 8005346:	d0e6      	beq.n	8005316 <pbuf_alloc+0x9a>
        qlen = LWIP_MIN(rem_len, (u16_t)(PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)));
 8005348:	1ce9      	adds	r1, r5, #3
 800534a:	f021 0103 	bic.w	r1, r1, #3
 800534e:	f5c1 7114 	rsb	r1, r1, #592	; 0x250
 8005352:	b289      	uxth	r1, r1
 8005354:	42b1      	cmp	r1, r6
 8005356:	bf28      	it	cs
 8005358:	4631      	movcs	r1, r6
  p->next = NULL;
 800535a:	6007      	str	r7, [r0, #0]
        pbuf_init_alloced_pbuf(q, LWIP_MEM_ALIGN((void *)((u8_t *)q + SIZEOF_STRUCT_PBUF + offset)),
 800535c:	4405      	add	r5, r0
 800535e:	3513      	adds	r5, #19
 8005360:	f025 0503 	bic.w	r5, r5, #3
  p->payload = payload;
 8005364:	6045      	str	r5, [r0, #4]
  p->tot_len = tot_len;
 8005366:	8106      	strh	r6, [r0, #8]
  p->len = len;
 8005368:	8141      	strh	r1, [r0, #10]
  p->type_internal = (u8_t)type;
 800536a:	f880 b00c 	strb.w	fp, [r0, #12]
  p->flags = flags;
 800536e:	7347      	strb	r7, [r0, #13]
  p->ref = 1;
 8005370:	2301      	movs	r3, #1
 8005372:	7383      	strb	r3, [r0, #14]
  p->if_idx = NETIF_NO_INDEX;
 8005374:	73c7      	strb	r7, [r0, #15]
        if (p == NULL) {
 8005376:	f1b8 0f00 	cmp.w	r8, #0
 800537a:	d1d7      	bne.n	800532c <pbuf_alloc+0xb0>
          p = q;
 800537c:	4680      	mov	r8, r0
 800537e:	e7d7      	b.n	8005330 <pbuf_alloc+0xb4>
        return NULL;
 8005380:	f04f 0800 	mov.w	r8, #0
 8005384:	e7bc      	b.n	8005300 <pbuf_alloc+0x84>
 8005386:	f04f 0800 	mov.w	r8, #0
 800538a:	e7b9      	b.n	8005300 <pbuf_alloc+0x84>
 800538c:	08010b38 	.word	0x08010b38
 8005390:	08010bf8 	.word	0x08010bf8
 8005394:	0800cb24 	.word	0x0800cb24
 8005398:	2000ae55 	.word	0x2000ae55

0800539c <pbuf_realloc>:
{
 800539c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80053a0:	460e      	mov	r6, r1
  LWIP_ASSERT("pbuf_realloc: p != NULL", p != NULL);
 80053a2:	4604      	mov	r4, r0
 80053a4:	b168      	cbz	r0, 80053c2 <pbuf_realloc+0x26>
  if (new_len >= p->tot_len) {
 80053a6:	8927      	ldrh	r7, [r4, #8]
 80053a8:	42b7      	cmp	r7, r6
 80053aa:	d939      	bls.n	8005420 <pbuf_realloc+0x84>
  while (rem_len > q->len) {
 80053ac:	8963      	ldrh	r3, [r4, #10]
 80053ae:	429e      	cmp	r6, r3
 80053b0:	d923      	bls.n	80053fa <pbuf_realloc+0x5e>
  rem_len = new_len;
 80053b2:	4635      	mov	r5, r6
    LWIP_ASSERT("pbuf_realloc: q != NULL", q != NULL);
 80053b4:	f8df a090 	ldr.w	sl, [pc, #144]	; 8005448 <pbuf_realloc+0xac>
 80053b8:	f8df 909c 	ldr.w	r9, [pc, #156]	; 8005458 <pbuf_realloc+0xbc>
 80053bc:	f8df 8090 	ldr.w	r8, [pc, #144]	; 8005450 <pbuf_realloc+0xb4>
 80053c0:	e00a      	b.n	80053d8 <pbuf_realloc+0x3c>
  LWIP_ASSERT("pbuf_realloc: p != NULL", p != NULL);
 80053c2:	4b21      	ldr	r3, [pc, #132]	; (8005448 <pbuf_realloc+0xac>)
 80053c4:	f44f 72cc 	mov.w	r2, #408	; 0x198
 80053c8:	4920      	ldr	r1, [pc, #128]	; (800544c <pbuf_realloc+0xb0>)
 80053ca:	4821      	ldr	r0, [pc, #132]	; (8005450 <pbuf_realloc+0xb4>)
 80053cc:	f006 f834 	bl	800b438 <iprintf>
 80053d0:	e7e9      	b.n	80053a6 <pbuf_realloc+0xa>
  while (rem_len > q->len) {
 80053d2:	8963      	ldrh	r3, [r4, #10]
 80053d4:	42ab      	cmp	r3, r5
 80053d6:	d211      	bcs.n	80053fc <pbuf_realloc+0x60>
    rem_len = (u16_t)(rem_len - q->len);
 80053d8:	1aed      	subs	r5, r5, r3
 80053da:	b2ad      	uxth	r5, r5
    q->tot_len = (u16_t)(q->tot_len - shrink);
 80053dc:	1bf3      	subs	r3, r6, r7
 80053de:	8922      	ldrh	r2, [r4, #8]
 80053e0:	4413      	add	r3, r2
 80053e2:	8123      	strh	r3, [r4, #8]
    q = q->next;
 80053e4:	6824      	ldr	r4, [r4, #0]
    LWIP_ASSERT("pbuf_realloc: q != NULL", q != NULL);
 80053e6:	2c00      	cmp	r4, #0
 80053e8:	d1f3      	bne.n	80053d2 <pbuf_realloc+0x36>
 80053ea:	4653      	mov	r3, sl
 80053ec:	f240 12af 	movw	r2, #431	; 0x1af
 80053f0:	4649      	mov	r1, r9
 80053f2:	4640      	mov	r0, r8
 80053f4:	f006 f820 	bl	800b438 <iprintf>
 80053f8:	e7eb      	b.n	80053d2 <pbuf_realloc+0x36>
  rem_len = new_len;
 80053fa:	4635      	mov	r5, r6
  if (pbuf_match_allocsrc(q, PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) && (rem_len != q->len)
 80053fc:	7b22      	ldrb	r2, [r4, #12]
 80053fe:	f012 0f0f 	tst.w	r2, #15
 8005402:	d105      	bne.n	8005410 <pbuf_realloc+0x74>
 8005404:	42ab      	cmp	r3, r5
 8005406:	d003      	beq.n	8005410 <pbuf_realloc+0x74>
      && ((q->flags & PBUF_FLAG_IS_CUSTOM) == 0)
 8005408:	7b63      	ldrb	r3, [r4, #13]
 800540a:	f013 0f02 	tst.w	r3, #2
 800540e:	d009      	beq.n	8005424 <pbuf_realloc+0x88>
  q->len = rem_len;
 8005410:	8165      	strh	r5, [r4, #10]
  q->tot_len = q->len;
 8005412:	8125      	strh	r5, [r4, #8]
  if (q->next != NULL) {
 8005414:	6820      	ldr	r0, [r4, #0]
 8005416:	b108      	cbz	r0, 800541c <pbuf_realloc+0x80>
    pbuf_free(q->next);
 8005418:	f7ff fec6 	bl	80051a8 <pbuf_free>
  q->next = NULL;
 800541c:	2300      	movs	r3, #0
 800541e:	6023      	str	r3, [r4, #0]
}
 8005420:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    q = (struct pbuf *)mem_trim(q, (mem_size_t)(((u8_t *)q->payload - (u8_t *)q) + rem_len));
 8005424:	6863      	ldr	r3, [r4, #4]
 8005426:	1b1b      	subs	r3, r3, r4
 8005428:	18e9      	adds	r1, r5, r3
 800542a:	b289      	uxth	r1, r1
 800542c:	4620      	mov	r0, r4
 800542e:	f7ff f9f9 	bl	8004824 <mem_trim>
    LWIP_ASSERT("mem_trim returned q == NULL", q != NULL);
 8005432:	4604      	mov	r4, r0
 8005434:	2800      	cmp	r0, #0
 8005436:	d1eb      	bne.n	8005410 <pbuf_realloc+0x74>
 8005438:	4b03      	ldr	r3, [pc, #12]	; (8005448 <pbuf_realloc+0xac>)
 800543a:	f240 12bd 	movw	r2, #445	; 0x1bd
 800543e:	4905      	ldr	r1, [pc, #20]	; (8005454 <pbuf_realloc+0xb8>)
 8005440:	4803      	ldr	r0, [pc, #12]	; (8005450 <pbuf_realloc+0xb4>)
 8005442:	f005 fff9 	bl	800b438 <iprintf>
 8005446:	e7e3      	b.n	8005410 <pbuf_realloc+0x74>
 8005448:	08010b38 	.word	0x08010b38
 800544c:	08010c14 	.word	0x08010c14
 8005450:	0800cb24 	.word	0x0800cb24
 8005454:	08010c44 	.word	0x08010c44
 8005458:	08010c2c 	.word	0x08010c2c

0800545c <pbuf_clen>:
pbuf_clen(const struct pbuf *p)
{
  u16_t len;

  len = 0;
  while (p != NULL) {
 800545c:	4603      	mov	r3, r0
 800545e:	b130      	cbz	r0, 800546e <pbuf_clen+0x12>
  len = 0;
 8005460:	2000      	movs	r0, #0
    ++len;
 8005462:	3001      	adds	r0, #1
 8005464:	b280      	uxth	r0, r0
    p = p->next;
 8005466:	681b      	ldr	r3, [r3, #0]
  while (p != NULL) {
 8005468:	2b00      	cmp	r3, #0
 800546a:	d1fa      	bne.n	8005462 <pbuf_clen+0x6>
 800546c:	4770      	bx	lr
  len = 0;
 800546e:	2000      	movs	r0, #0
  }
  return len;
}
 8005470:	4770      	bx	lr
	...

08005474 <pbuf_ref>:
 */
void
pbuf_ref(struct pbuf *p)
{
  /* pbuf given? */
  if (p != NULL) {
 8005474:	b170      	cbz	r0, 8005494 <pbuf_ref+0x20>
{
 8005476:	b508      	push	{r3, lr}
    SYS_ARCH_SET(p->ref, (LWIP_PBUF_REF_T)(p->ref + 1));
 8005478:	7b83      	ldrb	r3, [r0, #14]
 800547a:	3301      	adds	r3, #1
 800547c:	b2db      	uxtb	r3, r3
 800547e:	7383      	strb	r3, [r0, #14]
    LWIP_ASSERT("pbuf ref overflow", p->ref > 0);
 8005480:	b103      	cbz	r3, 8005484 <pbuf_ref+0x10>
  }
}
 8005482:	bd08      	pop	{r3, pc}
    LWIP_ASSERT("pbuf ref overflow", p->ref > 0);
 8005484:	4b04      	ldr	r3, [pc, #16]	; (8005498 <pbuf_ref+0x24>)
 8005486:	f240 3242 	movw	r2, #834	; 0x342
 800548a:	4904      	ldr	r1, [pc, #16]	; (800549c <pbuf_ref+0x28>)
 800548c:	4804      	ldr	r0, [pc, #16]	; (80054a0 <pbuf_ref+0x2c>)
 800548e:	f005 ffd3 	bl	800b438 <iprintf>
}
 8005492:	e7f6      	b.n	8005482 <pbuf_ref+0xe>
 8005494:	4770      	bx	lr
 8005496:	bf00      	nop
 8005498:	08010b38 	.word	0x08010b38
 800549c:	08010c60 	.word	0x08010c60
 80054a0:	0800cb24 	.word	0x0800cb24

080054a4 <pbuf_cat>:
 *
 * @see pbuf_chain()
 */
void
pbuf_cat(struct pbuf *h, struct pbuf *t)
{
 80054a4:	b538      	push	{r3, r4, r5, lr}
  struct pbuf *p;

  LWIP_ERROR("(h != NULL) && (t != NULL) (programmer violates API)",
 80054a6:	b130      	cbz	r0, 80054b6 <pbuf_cat+0x12>
 80054a8:	460d      	mov	r5, r1
 80054aa:	4602      	mov	r2, r0
 80054ac:	b119      	cbz	r1, 80054b6 <pbuf_cat+0x12>
             ((h != NULL) && (t != NULL)), return;);

  /* proceed to last pbuf of chain */
  for (p = h; p->next != NULL; p = p->next) {
 80054ae:	6804      	ldr	r4, [r0, #0]
 80054b0:	b954      	cbnz	r4, 80054c8 <pbuf_cat+0x24>
 80054b2:	4604      	mov	r4, r0
 80054b4:	e010      	b.n	80054d8 <pbuf_cat+0x34>
  LWIP_ERROR("(h != NULL) && (t != NULL) (programmer violates API)",
 80054b6:	4b15      	ldr	r3, [pc, #84]	; (800550c <pbuf_cat+0x68>)
 80054b8:	f240 3259 	movw	r2, #857	; 0x359
 80054bc:	4914      	ldr	r1, [pc, #80]	; (8005510 <pbuf_cat+0x6c>)
 80054be:	4815      	ldr	r0, [pc, #84]	; (8005514 <pbuf_cat+0x70>)
 80054c0:	f005 ffba 	bl	800b438 <iprintf>
 80054c4:	e021      	b.n	800550a <pbuf_cat+0x66>
  for (p = h; p->next != NULL; p = p->next) {
 80054c6:	461c      	mov	r4, r3
    /* add total length of second chain to all totals of first chain */
    p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 80054c8:	8913      	ldrh	r3, [r2, #8]
 80054ca:	8928      	ldrh	r0, [r5, #8]
 80054cc:	4403      	add	r3, r0
 80054ce:	8113      	strh	r3, [r2, #8]
  for (p = h; p->next != NULL; p = p->next) {
 80054d0:	6823      	ldr	r3, [r4, #0]
 80054d2:	4622      	mov	r2, r4
 80054d4:	2b00      	cmp	r3, #0
 80054d6:	d1f6      	bne.n	80054c6 <pbuf_cat+0x22>
  }
  /* { p is last pbuf of first h chain, p->next == NULL } */
  LWIP_ASSERT("p->tot_len == p->len (of last pbuf in chain)", p->tot_len == p->len);
 80054d8:	8922      	ldrh	r2, [r4, #8]
 80054da:	8963      	ldrh	r3, [r4, #10]
 80054dc:	429a      	cmp	r2, r3
 80054de:	d00f      	beq.n	8005500 <pbuf_cat+0x5c>
 80054e0:	4b0a      	ldr	r3, [pc, #40]	; (800550c <pbuf_cat+0x68>)
 80054e2:	f240 3262 	movw	r2, #866	; 0x362
 80054e6:	490c      	ldr	r1, [pc, #48]	; (8005518 <pbuf_cat+0x74>)
 80054e8:	480a      	ldr	r0, [pc, #40]	; (8005514 <pbuf_cat+0x70>)
 80054ea:	f005 ffa5 	bl	800b438 <iprintf>
  LWIP_ASSERT("p->next == NULL", p->next == NULL);
 80054ee:	6823      	ldr	r3, [r4, #0]
 80054f0:	b133      	cbz	r3, 8005500 <pbuf_cat+0x5c>
 80054f2:	4b06      	ldr	r3, [pc, #24]	; (800550c <pbuf_cat+0x68>)
 80054f4:	f240 3263 	movw	r2, #867	; 0x363
 80054f8:	4908      	ldr	r1, [pc, #32]	; (800551c <pbuf_cat+0x78>)
 80054fa:	4806      	ldr	r0, [pc, #24]	; (8005514 <pbuf_cat+0x70>)
 80054fc:	f005 ff9c 	bl	800b438 <iprintf>
  /* add total length of second chain to last pbuf total of first chain */
  p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 8005500:	8923      	ldrh	r3, [r4, #8]
 8005502:	892a      	ldrh	r2, [r5, #8]
 8005504:	4413      	add	r3, r2
 8005506:	8123      	strh	r3, [r4, #8]
  /* chain last pbuf of head (p) with first of tail (t) */
  p->next = t;
 8005508:	6025      	str	r5, [r4, #0]
  /* p->next now references t, but the caller will drop its reference to t,
   * so netto there is no change to the reference count of t.
   */
}
 800550a:	bd38      	pop	{r3, r4, r5, pc}
 800550c:	08010b38 	.word	0x08010b38
 8005510:	08010c74 	.word	0x08010c74
 8005514:	0800cb24 	.word	0x0800cb24
 8005518:	08010cac 	.word	0x08010cac
 800551c:	08010cdc 	.word	0x08010cdc

08005520 <pbuf_copy>:
 *         ERR_ARG if one of the pbufs is NULL or p_to is not big
 *                 enough to hold p_from
 */
err_t
pbuf_copy(struct pbuf *p_to, const struct pbuf *p_from)
{
 8005520:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy(%p, %p)\n",
              (const void *)p_to, (const void *)p_from));

  /* is the target big enough to hold the source? */
  LWIP_ERROR("pbuf_copy: target not big enough to hold source", ((p_to != NULL) &&
 8005524:	b178      	cbz	r0, 8005546 <pbuf_copy+0x26>
 8005526:	460c      	mov	r4, r1
 8005528:	4606      	mov	r6, r0
 800552a:	b161      	cbz	r1, 8005546 <pbuf_copy+0x26>
 800552c:	8902      	ldrh	r2, [r0, #8]
 800552e:	890b      	ldrh	r3, [r1, #8]
 8005530:	429a      	cmp	r2, r3
 8005532:	d308      	bcc.n	8005546 <pbuf_copy+0x26>
  size_t offset_to = 0, offset_from = 0, len;
 8005534:	2700      	movs	r7, #0
 8005536:	46b8      	mov	r8, r7
      len = p_to->len - offset_to;
    }
    MEMCPY((u8_t *)p_to->payload + offset_to, (u8_t *)p_from->payload + offset_from, len);
    offset_to += len;
    offset_from += len;
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
 8005538:	f8df a10c 	ldr.w	sl, [pc, #268]	; 8005648 <pbuf_copy+0x128>
 800553c:	f8df b120 	ldr.w	fp, [pc, #288]	; 8005660 <pbuf_copy+0x140>
 8005540:	f8df 910c 	ldr.w	r9, [pc, #268]	; 8005650 <pbuf_copy+0x130>
 8005544:	e050      	b.n	80055e8 <pbuf_copy+0xc8>
  LWIP_ERROR("pbuf_copy: target not big enough to hold source", ((p_to != NULL) &&
 8005546:	4b40      	ldr	r3, [pc, #256]	; (8005648 <pbuf_copy+0x128>)
 8005548:	f240 32c9 	movw	r2, #969	; 0x3c9
 800554c:	493f      	ldr	r1, [pc, #252]	; (800564c <pbuf_copy+0x12c>)
 800554e:	4840      	ldr	r0, [pc, #256]	; (8005650 <pbuf_copy+0x130>)
 8005550:	f005 ff72 	bl	800b438 <iprintf>
 8005554:	f06f 000f 	mvn.w	r0, #15
 8005558:	e016      	b.n	8005588 <pbuf_copy+0x68>
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
 800555a:	4653      	mov	r3, sl
 800555c:	f240 32d9 	movw	r2, #985	; 0x3d9
 8005560:	4659      	mov	r1, fp
 8005562:	4648      	mov	r0, r9
 8005564:	f005 ff68 	bl	800b438 <iprintf>
 8005568:	e052      	b.n	8005610 <pbuf_copy+0xf0>
    LWIP_ASSERT("offset_from <= p_from->len", offset_from <= p_from->len);
 800556a:	4653      	mov	r3, sl
 800556c:	f240 32da 	movw	r2, #986	; 0x3da
 8005570:	4938      	ldr	r1, [pc, #224]	; (8005654 <pbuf_copy+0x134>)
 8005572:	4648      	mov	r0, r9
 8005574:	f005 ff60 	bl	800b438 <iprintf>
 8005578:	e04d      	b.n	8005616 <pbuf_copy+0xf6>
      p_from = p_from->next;
    }
    if (offset_to == p_to->len) {
      /* on to next p_to (if any) */
      offset_to = 0;
      p_to = p_to->next;
 800557a:	6836      	ldr	r6, [r6, #0]
      LWIP_ERROR("p_to != NULL", (p_to != NULL) || (p_from == NULL), return ERR_ARG;);
 800557c:	b116      	cbz	r6, 8005584 <pbuf_copy+0x64>
      offset_to = 0;
 800557e:	f04f 0800 	mov.w	r8, #0
 8005582:	e050      	b.n	8005626 <pbuf_copy+0x106>
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
                 (p_to->next == NULL), return ERR_VAL;);
    }
  } while (p_from);
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy: end of chain reached.\n"));
  return ERR_OK;
 8005584:	2000      	movs	r0, #0
      LWIP_ERROR("p_to != NULL", (p_to != NULL) || (p_from == NULL), return ERR_ARG;);
 8005586:	b90c      	cbnz	r4, 800558c <pbuf_copy+0x6c>
}
 8005588:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
      LWIP_ERROR("p_to != NULL", (p_to != NULL) || (p_from == NULL), return ERR_ARG;);
 800558c:	4b2e      	ldr	r3, [pc, #184]	; (8005648 <pbuf_copy+0x128>)
 800558e:	f44f 7279 	mov.w	r2, #996	; 0x3e4
 8005592:	4931      	ldr	r1, [pc, #196]	; (8005658 <pbuf_copy+0x138>)
 8005594:	482e      	ldr	r0, [pc, #184]	; (8005650 <pbuf_copy+0x130>)
 8005596:	f005 ff4f 	bl	800b438 <iprintf>
 800559a:	f06f 000f 	mvn.w	r0, #15
 800559e:	e7f3      	b.n	8005588 <pbuf_copy+0x68>
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 80055a0:	6823      	ldr	r3, [r4, #0]
 80055a2:	2b00      	cmp	r3, #0
 80055a4:	d045      	beq.n	8005632 <pbuf_copy+0x112>
 80055a6:	4b28      	ldr	r3, [pc, #160]	; (8005648 <pbuf_copy+0x128>)
 80055a8:	f240 32e9 	movw	r2, #1001	; 0x3e9
 80055ac:	492b      	ldr	r1, [pc, #172]	; (800565c <pbuf_copy+0x13c>)
 80055ae:	4828      	ldr	r0, [pc, #160]	; (8005650 <pbuf_copy+0x130>)
 80055b0:	f005 ff42 	bl	800b438 <iprintf>
 80055b4:	f06f 0005 	mvn.w	r0, #5
 80055b8:	e7e6      	b.n	8005588 <pbuf_copy+0x68>
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 80055ba:	4b23      	ldr	r3, [pc, #140]	; (8005648 <pbuf_copy+0x128>)
 80055bc:	f240 32ee 	movw	r2, #1006	; 0x3ee
 80055c0:	4926      	ldr	r1, [pc, #152]	; (800565c <pbuf_copy+0x13c>)
 80055c2:	4823      	ldr	r0, [pc, #140]	; (8005650 <pbuf_copy+0x130>)
 80055c4:	f005 ff38 	bl	800b438 <iprintf>
 80055c8:	f06f 0005 	mvn.w	r0, #5
 80055cc:	e7dc      	b.n	8005588 <pbuf_copy+0x68>
  return ERR_OK;
 80055ce:	2000      	movs	r0, #0
 80055d0:	e7da      	b.n	8005588 <pbuf_copy+0x68>
    if ((p_to != NULL) && (p_to->len == p_to->tot_len)) {
 80055d2:	2e00      	cmp	r6, #0
 80055d4:	d034      	beq.n	8005640 <pbuf_copy+0x120>
 80055d6:	8972      	ldrh	r2, [r6, #10]
 80055d8:	8933      	ldrh	r3, [r6, #8]
 80055da:	429a      	cmp	r2, r3
 80055dc:	d132      	bne.n	8005644 <pbuf_copy+0x124>
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 80055de:	6833      	ldr	r3, [r6, #0]
 80055e0:	2b00      	cmp	r3, #0
 80055e2:	d1ea      	bne.n	80055ba <pbuf_copy+0x9a>
  } while (p_from);
 80055e4:	2c00      	cmp	r4, #0
 80055e6:	d0f2      	beq.n	80055ce <pbuf_copy+0xae>
    if ((p_to->len - offset_to) >= (p_from->len - offset_from)) {
 80055e8:	8975      	ldrh	r5, [r6, #10]
 80055ea:	eba5 0508 	sub.w	r5, r5, r8
 80055ee:	8963      	ldrh	r3, [r4, #10]
 80055f0:	1bdb      	subs	r3, r3, r7
 80055f2:	429d      	cmp	r5, r3
 80055f4:	bf28      	it	cs
 80055f6:	461d      	movcs	r5, r3
    MEMCPY((u8_t *)p_to->payload + offset_to, (u8_t *)p_from->payload + offset_from, len);
 80055f8:	6870      	ldr	r0, [r6, #4]
 80055fa:	6861      	ldr	r1, [r4, #4]
 80055fc:	462a      	mov	r2, r5
 80055fe:	4439      	add	r1, r7
 8005600:	4440      	add	r0, r8
 8005602:	f005 fee9 	bl	800b3d8 <memcpy>
    offset_to += len;
 8005606:	44a8      	add	r8, r5
    offset_from += len;
 8005608:	442f      	add	r7, r5
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
 800560a:	8973      	ldrh	r3, [r6, #10]
 800560c:	4543      	cmp	r3, r8
 800560e:	d3a4      	bcc.n	800555a <pbuf_copy+0x3a>
    LWIP_ASSERT("offset_from <= p_from->len", offset_from <= p_from->len);
 8005610:	8963      	ldrh	r3, [r4, #10]
 8005612:	42bb      	cmp	r3, r7
 8005614:	d3a9      	bcc.n	800556a <pbuf_copy+0x4a>
    if (offset_from >= p_from->len) {
 8005616:	8963      	ldrh	r3, [r4, #10]
 8005618:	42bb      	cmp	r3, r7
      p_from = p_from->next;
 800561a:	bf9c      	itt	ls
 800561c:	6824      	ldrls	r4, [r4, #0]
      offset_from = 0;
 800561e:	2700      	movls	r7, #0
    if (offset_to == p_to->len) {
 8005620:	8973      	ldrh	r3, [r6, #10]
 8005622:	4543      	cmp	r3, r8
 8005624:	d0a9      	beq.n	800557a <pbuf_copy+0x5a>
    if ((p_from != NULL) && (p_from->len == p_from->tot_len)) {
 8005626:	2c00      	cmp	r4, #0
 8005628:	d0d3      	beq.n	80055d2 <pbuf_copy+0xb2>
 800562a:	8962      	ldrh	r2, [r4, #10]
 800562c:	8923      	ldrh	r3, [r4, #8]
 800562e:	429a      	cmp	r2, r3
 8005630:	d0b6      	beq.n	80055a0 <pbuf_copy+0x80>
    if ((p_to != NULL) && (p_to->len == p_to->tot_len)) {
 8005632:	2e00      	cmp	r6, #0
 8005634:	d0d8      	beq.n	80055e8 <pbuf_copy+0xc8>
 8005636:	8972      	ldrh	r2, [r6, #10]
 8005638:	8933      	ldrh	r3, [r6, #8]
 800563a:	429a      	cmp	r2, r3
 800563c:	d1d4      	bne.n	80055e8 <pbuf_copy+0xc8>
 800563e:	e7ce      	b.n	80055de <pbuf_copy+0xbe>
  return ERR_OK;
 8005640:	2000      	movs	r0, #0
 8005642:	e7a1      	b.n	8005588 <pbuf_copy+0x68>
 8005644:	2000      	movs	r0, #0
 8005646:	e79f      	b.n	8005588 <pbuf_copy+0x68>
 8005648:	08010b38 	.word	0x08010b38
 800564c:	08010cec 	.word	0x08010cec
 8005650:	0800cb24 	.word	0x0800cb24
 8005654:	08010d34 	.word	0x08010d34
 8005658:	08010d50 	.word	0x08010d50
 800565c:	08010d60 	.word	0x08010d60
 8005660:	08010d1c 	.word	0x08010d1c

08005664 <pbuf_copy_partial>:
 * @param offset offset into the packet buffer from where to begin copying len bytes
 * @return the number of bytes copied, or 0 on failure
 */
u16_t
pbuf_copy_partial(const struct pbuf *buf, void *dataptr, u16_t len, u16_t offset)
{
 8005664:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  const struct pbuf *p;
  u16_t left = 0;
  u16_t buf_copy_len;
  u16_t copied_total = 0;

  LWIP_ERROR("pbuf_copy_partial: invalid buf", (buf != NULL), return 0;);
 8005668:	b148      	cbz	r0, 800567e <pbuf_copy_partial+0x1a>
 800566a:	4688      	mov	r8, r1
 800566c:	4692      	mov	sl, r2
 800566e:	4605      	mov	r5, r0
  LWIP_ERROR("pbuf_copy_partial: invalid dataptr", (dataptr != NULL), return 0;);
 8005670:	b181      	cbz	r1, 8005694 <pbuf_copy_partial+0x30>
  u16_t copied_total = 0;
 8005672:	4617      	mov	r7, r2

  /* Note some systems use byte copy if dataptr or one of the pbuf payload pointers are unaligned. */
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 8005674:	b15a      	cbz	r2, 800568e <pbuf_copy_partial+0x2a>
  u16_t copied_total = 0;
 8005676:	2700      	movs	r7, #0
  u16_t left = 0;
 8005678:	463e      	mov	r6, r7
      /* copy the necessary parts of the buffer */
      MEMCPY(&((char *)dataptr)[left], &((char *)p->payload)[offset], buf_copy_len);
      copied_total = (u16_t)(copied_total + buf_copy_len);
      left = (u16_t)(left + buf_copy_len);
      len = (u16_t)(len - buf_copy_len);
      offset = 0;
 800567a:	46b9      	mov	r9, r7
 800567c:	e02f      	b.n	80056de <pbuf_copy_partial+0x7a>
  LWIP_ERROR("pbuf_copy_partial: invalid buf", (buf != NULL), return 0;);
 800567e:	4b1c      	ldr	r3, [pc, #112]	; (80056f0 <pbuf_copy_partial+0x8c>)
 8005680:	f240 420a 	movw	r2, #1034	; 0x40a
 8005684:	491b      	ldr	r1, [pc, #108]	; (80056f4 <pbuf_copy_partial+0x90>)
 8005686:	481c      	ldr	r0, [pc, #112]	; (80056f8 <pbuf_copy_partial+0x94>)
 8005688:	f005 fed6 	bl	800b438 <iprintf>
 800568c:	2700      	movs	r7, #0
    }
  }
  return copied_total;
}
 800568e:	4638      	mov	r0, r7
 8005690:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  LWIP_ERROR("pbuf_copy_partial: invalid dataptr", (dataptr != NULL), return 0;);
 8005694:	4b16      	ldr	r3, [pc, #88]	; (80056f0 <pbuf_copy_partial+0x8c>)
 8005696:	f240 420b 	movw	r2, #1035	; 0x40b
 800569a:	4918      	ldr	r1, [pc, #96]	; (80056fc <pbuf_copy_partial+0x98>)
 800569c:	4816      	ldr	r0, [pc, #88]	; (80056f8 <pbuf_copy_partial+0x94>)
 800569e:	f005 fecb 	bl	800b438 <iprintf>
 80056a2:	2700      	movs	r7, #0
 80056a4:	e7f3      	b.n	800568e <pbuf_copy_partial+0x2a>
      buf_copy_len = (u16_t)(p->len - offset);
 80056a6:	896c      	ldrh	r4, [r5, #10]
 80056a8:	1ae4      	subs	r4, r4, r3
 80056aa:	b2a4      	uxth	r4, r4
      if (buf_copy_len > len) {
 80056ac:	4554      	cmp	r4, sl
 80056ae:	bf28      	it	cs
 80056b0:	4654      	movcs	r4, sl
      MEMCPY(&((char *)dataptr)[left], &((char *)p->payload)[offset], buf_copy_len);
 80056b2:	6869      	ldr	r1, [r5, #4]
 80056b4:	4622      	mov	r2, r4
 80056b6:	4419      	add	r1, r3
 80056b8:	eb08 0006 	add.w	r0, r8, r6
 80056bc:	f005 fe8c 	bl	800b3d8 <memcpy>
      copied_total = (u16_t)(copied_total + buf_copy_len);
 80056c0:	4427      	add	r7, r4
 80056c2:	b2bf      	uxth	r7, r7
      left = (u16_t)(left + buf_copy_len);
 80056c4:	4426      	add	r6, r4
 80056c6:	b2b6      	uxth	r6, r6
      len = (u16_t)(len - buf_copy_len);
 80056c8:	ebaa 0404 	sub.w	r4, sl, r4
 80056cc:	fa1f fa84 	uxth.w	sl, r4
      offset = 0;
 80056d0:	464b      	mov	r3, r9
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 80056d2:	682d      	ldr	r5, [r5, #0]
 80056d4:	f1ba 0f00 	cmp.w	sl, #0
 80056d8:	d0d9      	beq.n	800568e <pbuf_copy_partial+0x2a>
 80056da:	2d00      	cmp	r5, #0
 80056dc:	d0d7      	beq.n	800568e <pbuf_copy_partial+0x2a>
    if ((offset != 0) && (offset >= p->len)) {
 80056de:	2b00      	cmp	r3, #0
 80056e0:	d0e1      	beq.n	80056a6 <pbuf_copy_partial+0x42>
 80056e2:	896a      	ldrh	r2, [r5, #10]
 80056e4:	429a      	cmp	r2, r3
 80056e6:	d8de      	bhi.n	80056a6 <pbuf_copy_partial+0x42>
      offset = (u16_t)(offset - p->len);
 80056e8:	1a9b      	subs	r3, r3, r2
 80056ea:	b29b      	uxth	r3, r3
 80056ec:	e7f1      	b.n	80056d2 <pbuf_copy_partial+0x6e>
 80056ee:	bf00      	nop
 80056f0:	08010b38 	.word	0x08010b38
 80056f4:	08010d8c 	.word	0x08010d8c
 80056f8:	0800cb24 	.word	0x0800cb24
 80056fc:	08010dac 	.word	0x08010dac

08005700 <pbuf_clone>:
 *
 * @return a new pbuf or NULL if allocation fails
 */
struct pbuf *
pbuf_clone(pbuf_layer layer, pbuf_type type, struct pbuf *p)
{
 8005700:	b538      	push	{r3, r4, r5, lr}
 8005702:	4614      	mov	r4, r2
  struct pbuf *q;
  err_t err;
  q = pbuf_alloc(layer, p->tot_len, type);
 8005704:	460a      	mov	r2, r1
 8005706:	8921      	ldrh	r1, [r4, #8]
 8005708:	f7ff fdb8 	bl	800527c <pbuf_alloc>
  if (q == NULL) {
 800570c:	4605      	mov	r5, r0
 800570e:	b118      	cbz	r0, 8005718 <pbuf_clone+0x18>
    return NULL;
  }
  err = pbuf_copy(q, p);
 8005710:	4621      	mov	r1, r4
 8005712:	f7ff ff05 	bl	8005520 <pbuf_copy>
  LWIP_UNUSED_ARG(err); /* in case of LWIP_NOASSERT */
  LWIP_ASSERT("pbuf_copy failed", err == ERR_OK);
 8005716:	b908      	cbnz	r0, 800571c <pbuf_clone+0x1c>
  return q;
}
 8005718:	4628      	mov	r0, r5
 800571a:	bd38      	pop	{r3, r4, r5, pc}
  LWIP_ASSERT("pbuf_copy failed", err == ERR_OK);
 800571c:	4b03      	ldr	r3, [pc, #12]	; (800572c <pbuf_clone+0x2c>)
 800571e:	f240 5224 	movw	r2, #1316	; 0x524
 8005722:	4903      	ldr	r1, [pc, #12]	; (8005730 <pbuf_clone+0x30>)
 8005724:	4803      	ldr	r0, [pc, #12]	; (8005734 <pbuf_clone+0x34>)
 8005726:	f005 fe87 	bl	800b438 <iprintf>
 800572a:	e7f5      	b.n	8005718 <pbuf_clone+0x18>
 800572c:	08010b38 	.word	0x08010b38
 8005730:	08010dd0 	.word	0x08010dd0
 8005734:	0800cb24 	.word	0x0800cb24

08005738 <tcp_new_port>:
 *
 * @return a new (free) local TCP port number
 */
static u16_t
tcp_new_port(void)
{
 8005738:	b510      	push	{r4, lr}
  u8_t i;
  u16_t n = 0;
 800573a:	4b13      	ldr	r3, [pc, #76]	; (8005788 <tcp_new_port+0x50>)
 800573c:	8818      	ldrh	r0, [r3, #0]
{
 800573e:	f44f 4480 	mov.w	r4, #16384	; 0x4000
  struct tcp_pcb *pcb;

again:
  tcp_port++;
  if (tcp_port == TCP_LOCAL_PORT_RANGE_END) {
 8005742:	f64f 7eff 	movw	lr, #65535	; 0xffff
 8005746:	e002      	b.n	800574e <tcp_new_port+0x16>
  /* Check all PCB lists. */
  for (i = 0; i < NUM_TCP_PCB_LISTS; i++) {
    for (pcb = *tcp_pcb_lists[i]; pcb != NULL; pcb = pcb->next) {
      if (pcb->local_port == tcp_port) {
        n++;
        if (n > (TCP_LOCAL_PORT_RANGE_END - TCP_LOCAL_PORT_RANGE_START)) {
 8005748:	3c01      	subs	r4, #1
 800574a:	b2a4      	uxth	r4, r4
 800574c:	b1bc      	cbz	r4, 800577e <tcp_new_port+0x46>
  tcp_port++;
 800574e:	3001      	adds	r0, #1
 8005750:	b280      	uxth	r0, r0
    tcp_port = TCP_LOCAL_PORT_RANGE_START;
 8005752:	4570      	cmp	r0, lr
 8005754:	bf08      	it	eq
 8005756:	f44f 4040 	moveq.w	r0, #49152	; 0xc000
  for (i = 0; i < NUM_TCP_PCB_LISTS; i++) {
 800575a:	490c      	ldr	r1, [pc, #48]	; (800578c <tcp_new_port+0x54>)
 800575c:	f101 0c10 	add.w	ip, r1, #16
    for (pcb = *tcp_pcb_lists[i]; pcb != NULL; pcb = pcb->next) {
 8005760:	f851 3b04 	ldr.w	r3, [r1], #4
 8005764:	681b      	ldr	r3, [r3, #0]
 8005766:	b12b      	cbz	r3, 8005774 <tcp_new_port+0x3c>
      if (pcb->local_port == tcp_port) {
 8005768:	8ada      	ldrh	r2, [r3, #22]
 800576a:	4282      	cmp	r2, r0
 800576c:	d0ec      	beq.n	8005748 <tcp_new_port+0x10>
    for (pcb = *tcp_pcb_lists[i]; pcb != NULL; pcb = pcb->next) {
 800576e:	68db      	ldr	r3, [r3, #12]
 8005770:	2b00      	cmp	r3, #0
 8005772:	d1f9      	bne.n	8005768 <tcp_new_port+0x30>
  for (i = 0; i < NUM_TCP_PCB_LISTS; i++) {
 8005774:	4561      	cmp	r1, ip
 8005776:	d1f3      	bne.n	8005760 <tcp_new_port+0x28>
 8005778:	4b03      	ldr	r3, [pc, #12]	; (8005788 <tcp_new_port+0x50>)
 800577a:	8018      	strh	r0, [r3, #0]
        goto again;
      }
    }
  }
  return tcp_port;
}
 800577c:	bd10      	pop	{r4, pc}
 800577e:	4b02      	ldr	r3, [pc, #8]	; (8005788 <tcp_new_port+0x50>)
 8005780:	8018      	strh	r0, [r3, #0]
          return 0;
 8005782:	4620      	mov	r0, r4
 8005784:	e7fa      	b.n	800577c <tcp_new_port+0x44>
 8005786:	bf00      	nop
 8005788:	20000034 	.word	0x20000034
 800578c:	08011470 	.word	0x08011470

08005790 <tcp_close_shutdown_fin>:
{
 8005790:	b510      	push	{r4, lr}
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 8005792:	4604      	mov	r4, r0
 8005794:	b140      	cbz	r0, 80057a8 <tcp_close_shutdown_fin+0x18>
  switch (pcb->state) {
 8005796:	7d23      	ldrb	r3, [r4, #20]
 8005798:	2b04      	cmp	r3, #4
 800579a:	d018      	beq.n	80057ce <tcp_close_shutdown_fin+0x3e>
 800579c:	2b07      	cmp	r3, #7
 800579e:	d01d      	beq.n	80057dc <tcp_close_shutdown_fin+0x4c>
 80057a0:	2b03      	cmp	r3, #3
 80057a2:	d009      	beq.n	80057b8 <tcp_close_shutdown_fin+0x28>
 80057a4:	2000      	movs	r0, #0
}
 80057a6:	bd10      	pop	{r4, pc}
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 80057a8:	4b14      	ldr	r3, [pc, #80]	; (80057fc <tcp_close_shutdown_fin+0x6c>)
 80057aa:	f44f 72ce 	mov.w	r2, #412	; 0x19c
 80057ae:	4914      	ldr	r1, [pc, #80]	; (8005800 <tcp_close_shutdown_fin+0x70>)
 80057b0:	4814      	ldr	r0, [pc, #80]	; (8005804 <tcp_close_shutdown_fin+0x74>)
 80057b2:	f005 fe41 	bl	800b438 <iprintf>
 80057b6:	e7ee      	b.n	8005796 <tcp_close_shutdown_fin+0x6>
      err = tcp_send_fin(pcb);
 80057b8:	4620      	mov	r0, r4
 80057ba:	f003 fbbb 	bl	8008f34 <tcp_send_fin>
      if (err == ERR_OK) {
 80057be:	b9a0      	cbnz	r0, 80057ea <tcp_close_shutdown_fin+0x5a>
        pcb->state = FIN_WAIT_1;
 80057c0:	2305      	movs	r3, #5
 80057c2:	7523      	strb	r3, [r4, #20]
    tcp_output(pcb);
 80057c4:	4620      	mov	r0, r4
 80057c6:	f003 fd3b 	bl	8009240 <tcp_output>
  return err;
 80057ca:	2000      	movs	r0, #0
 80057cc:	e7eb      	b.n	80057a6 <tcp_close_shutdown_fin+0x16>
      err = tcp_send_fin(pcb);
 80057ce:	4620      	mov	r0, r4
 80057d0:	f003 fbb0 	bl	8008f34 <tcp_send_fin>
      if (err == ERR_OK) {
 80057d4:	b948      	cbnz	r0, 80057ea <tcp_close_shutdown_fin+0x5a>
        pcb->state = FIN_WAIT_1;
 80057d6:	2305      	movs	r3, #5
 80057d8:	7523      	strb	r3, [r4, #20]
 80057da:	e7f3      	b.n	80057c4 <tcp_close_shutdown_fin+0x34>
      err = tcp_send_fin(pcb);
 80057dc:	4620      	mov	r0, r4
 80057de:	f003 fba9 	bl	8008f34 <tcp_send_fin>
      if (err == ERR_OK) {
 80057e2:	b910      	cbnz	r0, 80057ea <tcp_close_shutdown_fin+0x5a>
        pcb->state = LAST_ACK;
 80057e4:	2309      	movs	r3, #9
 80057e6:	7523      	strb	r3, [r4, #20]
 80057e8:	e7ec      	b.n	80057c4 <tcp_close_shutdown_fin+0x34>
  } else if (err == ERR_MEM) {
 80057ea:	f1b0 3fff 	cmp.w	r0, #4294967295
 80057ee:	d1da      	bne.n	80057a6 <tcp_close_shutdown_fin+0x16>
    tcp_set_flags(pcb, TF_CLOSEPEND);
 80057f0:	8b63      	ldrh	r3, [r4, #26]
 80057f2:	f043 0308 	orr.w	r3, r3, #8
 80057f6:	8363      	strh	r3, [r4, #26]
    return ERR_OK;
 80057f8:	2000      	movs	r0, #0
 80057fa:	e7d4      	b.n	80057a6 <tcp_close_shutdown_fin+0x16>
 80057fc:	08010de4 	.word	0x08010de4
 8005800:	08010e14 	.word	0x08010e14
 8005804:	0800cb24 	.word	0x0800cb24

08005808 <tcp_init>:
{
 8005808:	b508      	push	{r3, lr}
  tcp_port = TCP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 800580a:	f005 fe2d 	bl	800b468 <rand>
 800580e:	ea6f 4080 	mvn.w	r0, r0, lsl #18
 8005812:	ea6f 4090 	mvn.w	r0, r0, lsr #18
 8005816:	4b01      	ldr	r3, [pc, #4]	; (800581c <tcp_init+0x14>)
 8005818:	8018      	strh	r0, [r3, #0]
}
 800581a:	bd08      	pop	{r3, pc}
 800581c:	20000034 	.word	0x20000034

08005820 <tcp_free>:
{
 8005820:	b510      	push	{r4, lr}
 8005822:	4604      	mov	r4, r0
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 8005824:	7d03      	ldrb	r3, [r0, #20]
 8005826:	2b01      	cmp	r3, #1
 8005828:	d004      	beq.n	8005834 <tcp_free+0x14>
  memp_free(MEMP_TCP_PCB, pcb);
 800582a:	4621      	mov	r1, r4
 800582c:	2001      	movs	r0, #1
 800582e:	f7ff f9fd 	bl	8004c2c <memp_free>
}
 8005832:	bd10      	pop	{r4, pc}
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 8005834:	4b03      	ldr	r3, [pc, #12]	; (8005844 <tcp_free+0x24>)
 8005836:	22d4      	movs	r2, #212	; 0xd4
 8005838:	4903      	ldr	r1, [pc, #12]	; (8005848 <tcp_free+0x28>)
 800583a:	4804      	ldr	r0, [pc, #16]	; (800584c <tcp_free+0x2c>)
 800583c:	f005 fdfc 	bl	800b438 <iprintf>
 8005840:	e7f3      	b.n	800582a <tcp_free+0xa>
 8005842:	bf00      	nop
 8005844:	08010de4 	.word	0x08010de4
 8005848:	08010e20 	.word	0x08010e20
 800584c:	0800cb24 	.word	0x0800cb24

08005850 <tcp_bind>:
{
 8005850:	b570      	push	{r4, r5, r6, lr}
    ipaddr = IP4_ADDR_ANY;
 8005852:	4c2a      	ldr	r4, [pc, #168]	; (80058fc <tcp_bind+0xac>)
 8005854:	2900      	cmp	r1, #0
 8005856:	bf18      	it	ne
 8005858:	460c      	movne	r4, r1
  LWIP_ERROR("tcp_bind: invalid pcb", pcb != NULL, return ERR_ARG);
 800585a:	b168      	cbz	r0, 8005878 <tcp_bind+0x28>
 800585c:	4605      	mov	r5, r0
  LWIP_ERROR("tcp_bind: can only bind in state CLOSED", pcb->state == CLOSED, return ERR_VAL);
 800585e:	7d03      	ldrb	r3, [r0, #20]
 8005860:	b9a3      	cbnz	r3, 800588c <tcp_bind+0x3c>
  if (port == 0) {
 8005862:	b1ea      	cbz	r2, 80058a0 <tcp_bind+0x50>
 8005864:	4e26      	ldr	r6, [pc, #152]	; (8005900 <tcp_bind+0xb0>)
 8005866:	f106 0c10 	add.w	ip, r6, #16
      for (cpcb = *tcp_pcb_lists[i]; cpcb != NULL; cpcb = cpcb->next) {
 800586a:	f856 3b04 	ldr.w	r3, [r6], #4
 800586e:	681b      	ldr	r3, [r3, #0]
 8005870:	bb53      	cbnz	r3, 80058c8 <tcp_bind+0x78>
    for (i = 0; i < max_pcb_list; i++) {
 8005872:	4566      	cmp	r6, ip
 8005874:	d1f9      	bne.n	800586a <tcp_bind+0x1a>
 8005876:	e017      	b.n	80058a8 <tcp_bind+0x58>
  LWIP_ERROR("tcp_bind: invalid pcb", pcb != NULL, return ERR_ARG);
 8005878:	4b22      	ldr	r3, [pc, #136]	; (8005904 <tcp_bind+0xb4>)
 800587a:	f240 22a9 	movw	r2, #681	; 0x2a9
 800587e:	4922      	ldr	r1, [pc, #136]	; (8005908 <tcp_bind+0xb8>)
 8005880:	4822      	ldr	r0, [pc, #136]	; (800590c <tcp_bind+0xbc>)
 8005882:	f005 fdd9 	bl	800b438 <iprintf>
 8005886:	f06f 000f 	mvn.w	r0, #15
 800588a:	e019      	b.n	80058c0 <tcp_bind+0x70>
  LWIP_ERROR("tcp_bind: can only bind in state CLOSED", pcb->state == CLOSED, return ERR_VAL);
 800588c:	4b1d      	ldr	r3, [pc, #116]	; (8005904 <tcp_bind+0xb4>)
 800588e:	f240 22ab 	movw	r2, #683	; 0x2ab
 8005892:	491f      	ldr	r1, [pc, #124]	; (8005910 <tcp_bind+0xc0>)
 8005894:	481d      	ldr	r0, [pc, #116]	; (800590c <tcp_bind+0xbc>)
 8005896:	f005 fdcf 	bl	800b438 <iprintf>
 800589a:	f06f 0005 	mvn.w	r0, #5
 800589e:	e00f      	b.n	80058c0 <tcp_bind+0x70>
    port = tcp_new_port();
 80058a0:	f7ff ff4a 	bl	8005738 <tcp_new_port>
    if (port == 0) {
 80058a4:	4602      	mov	r2, r0
 80058a6:	b1e0      	cbz	r0, 80058e2 <tcp_bind+0x92>
  if (!ip_addr_isany(ipaddr)
 80058a8:	b114      	cbz	r4, 80058b0 <tcp_bind+0x60>
 80058aa:	6823      	ldr	r3, [r4, #0]
 80058ac:	b103      	cbz	r3, 80058b0 <tcp_bind+0x60>
    ip_addr_set(&pcb->local_ip, ipaddr);
 80058ae:	602b      	str	r3, [r5, #0]
  pcb->local_port = port;
 80058b0:	82ea      	strh	r2, [r5, #22]
  TCP_REG(&tcp_bound_pcbs, pcb);
 80058b2:	4b18      	ldr	r3, [pc, #96]	; (8005914 <tcp_bind+0xc4>)
 80058b4:	681a      	ldr	r2, [r3, #0]
 80058b6:	60ea      	str	r2, [r5, #12]
 80058b8:	601d      	str	r5, [r3, #0]
 80058ba:	f003 ffd1 	bl	8009860 <tcp_timer_needed>
  return ERR_OK;
 80058be:	2000      	movs	r0, #0
}
 80058c0:	bd70      	pop	{r4, r5, r6, pc}
      for (cpcb = *tcp_pcb_lists[i]; cpcb != NULL; cpcb = cpcb->next) {
 80058c2:	68db      	ldr	r3, [r3, #12]
 80058c4:	2b00      	cmp	r3, #0
 80058c6:	d0d4      	beq.n	8005872 <tcp_bind+0x22>
        if (cpcb->local_port == port) {
 80058c8:	8ad9      	ldrh	r1, [r3, #22]
 80058ca:	4291      	cmp	r1, r2
 80058cc:	d1f9      	bne.n	80058c2 <tcp_bind+0x72>
                (ip_addr_isany(&cpcb->local_ip) ||
 80058ce:	6819      	ldr	r1, [r3, #0]
 80058d0:	b151      	cbz	r1, 80058e8 <tcp_bind+0x98>
 80058d2:	b164      	cbz	r4, 80058ee <tcp_bind+0x9e>
                 ip_addr_isany(ipaddr) ||
 80058d4:	6820      	ldr	r0, [r4, #0]
 80058d6:	b168      	cbz	r0, 80058f4 <tcp_bind+0xa4>
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
 80058d8:	4281      	cmp	r1, r0
 80058da:	d1f2      	bne.n	80058c2 <tcp_bind+0x72>
              return ERR_USE;
 80058dc:	f06f 0007 	mvn.w	r0, #7
 80058e0:	e7ee      	b.n	80058c0 <tcp_bind+0x70>
      return ERR_BUF;
 80058e2:	f06f 0001 	mvn.w	r0, #1
 80058e6:	e7eb      	b.n	80058c0 <tcp_bind+0x70>
              return ERR_USE;
 80058e8:	f06f 0007 	mvn.w	r0, #7
 80058ec:	e7e8      	b.n	80058c0 <tcp_bind+0x70>
 80058ee:	f06f 0007 	mvn.w	r0, #7
 80058f2:	e7e5      	b.n	80058c0 <tcp_bind+0x70>
 80058f4:	f06f 0007 	mvn.w	r0, #7
 80058f8:	e7e2      	b.n	80058c0 <tcp_bind+0x70>
 80058fa:	bf00      	nop
 80058fc:	08012434 	.word	0x08012434
 8005900:	08011470 	.word	0x08011470
 8005904:	08010de4 	.word	0x08010de4
 8005908:	08010e34 	.word	0x08010e34
 800590c:	0800cb24 	.word	0x0800cb24
 8005910:	08010e4c 	.word	0x08010e4c
 8005914:	2000ae60 	.word	0x2000ae60

08005918 <tcp_listen_with_backlog_and_err>:
{
 8005918:	b570      	push	{r4, r5, r6, lr}
 800591a:	4616      	mov	r6, r2
  LWIP_ERROR("tcp_listen_with_backlog_and_err: invalid pcb", pcb != NULL, res = ERR_ARG; goto done);
 800591c:	4604      	mov	r4, r0
 800591e:	b330      	cbz	r0, 800596e <tcp_listen_with_backlog_and_err+0x56>
  LWIP_ERROR("tcp_listen_with_backlog_and_err: pcb already connected", pcb->state == CLOSED, res = ERR_CLSD; goto done);
 8005920:	7d03      	ldrb	r3, [r0, #20]
 8005922:	2b00      	cmp	r3, #0
 8005924:	d12e      	bne.n	8005984 <tcp_listen_with_backlog_and_err+0x6c>
  lpcb = (struct tcp_pcb_listen *)memp_malloc(MEMP_TCP_PCB_LISTEN);
 8005926:	2002      	movs	r0, #2
 8005928:	f7ff f950 	bl	8004bcc <memp_malloc>
  if (lpcb == NULL) {
 800592c:	4605      	mov	r5, r0
 800592e:	2800      	cmp	r0, #0
 8005930:	d04b      	beq.n	80059ca <tcp_listen_with_backlog_and_err+0xb2>
  lpcb->callback_arg = pcb->callback_arg;
 8005932:	6923      	ldr	r3, [r4, #16]
 8005934:	6103      	str	r3, [r0, #16]
  lpcb->local_port = pcb->local_port;
 8005936:	8ae3      	ldrh	r3, [r4, #22]
 8005938:	82c3      	strh	r3, [r0, #22]
  lpcb->state = LISTEN;
 800593a:	2301      	movs	r3, #1
 800593c:	7503      	strb	r3, [r0, #20]
  lpcb->prio = pcb->prio;
 800593e:	7d63      	ldrb	r3, [r4, #21]
 8005940:	7543      	strb	r3, [r0, #21]
  lpcb->so_options = pcb->so_options;
 8005942:	7a63      	ldrb	r3, [r4, #9]
 8005944:	7243      	strb	r3, [r0, #9]
  lpcb->netif_idx = NETIF_NO_INDEX;
 8005946:	2300      	movs	r3, #0
 8005948:	7203      	strb	r3, [r0, #8]
  lpcb->ttl = pcb->ttl;
 800594a:	7ae3      	ldrb	r3, [r4, #11]
 800594c:	72c3      	strb	r3, [r0, #11]
  lpcb->tos = pcb->tos;
 800594e:	7aa3      	ldrb	r3, [r4, #10]
 8005950:	7283      	strb	r3, [r0, #10]
  ip_addr_copy(lpcb->local_ip, pcb->local_ip);
 8005952:	6823      	ldr	r3, [r4, #0]
 8005954:	6003      	str	r3, [r0, #0]
  if (pcb->local_port != 0) {
 8005956:	8ae3      	ldrh	r3, [r4, #22]
 8005958:	b33b      	cbz	r3, 80059aa <tcp_listen_with_backlog_and_err+0x92>
    TCP_RMV(&tcp_bound_pcbs, pcb);
 800595a:	4b1d      	ldr	r3, [pc, #116]	; (80059d0 <tcp_listen_with_backlog_and_err+0xb8>)
 800595c:	681b      	ldr	r3, [r3, #0]
 800595e:	42a3      	cmp	r3, r4
 8005960:	d01b      	beq.n	800599a <tcp_listen_with_backlog_and_err+0x82>
 8005962:	b303      	cbz	r3, 80059a6 <tcp_listen_with_backlog_and_err+0x8e>
 8005964:	68da      	ldr	r2, [r3, #12]
 8005966:	42a2      	cmp	r2, r4
 8005968:	d01b      	beq.n	80059a2 <tcp_listen_with_backlog_and_err+0x8a>
 800596a:	4613      	mov	r3, r2
 800596c:	e7f9      	b.n	8005962 <tcp_listen_with_backlog_and_err+0x4a>
  LWIP_ERROR("tcp_listen_with_backlog_and_err: invalid pcb", pcb != NULL, res = ERR_ARG; goto done);
 800596e:	4b19      	ldr	r3, [pc, #100]	; (80059d4 <tcp_listen_with_backlog_and_err+0xbc>)
 8005970:	f240 3259 	movw	r2, #857	; 0x359
 8005974:	4918      	ldr	r1, [pc, #96]	; (80059d8 <tcp_listen_with_backlog_and_err+0xc0>)
 8005976:	4819      	ldr	r0, [pc, #100]	; (80059dc <tcp_listen_with_backlog_and_err+0xc4>)
 8005978:	f005 fd5e 	bl	800b438 <iprintf>
  struct tcp_pcb_listen *lpcb = NULL;
 800597c:	4625      	mov	r5, r4
  LWIP_ERROR("tcp_listen_with_backlog_and_err: invalid pcb", pcb != NULL, res = ERR_ARG; goto done);
 800597e:	f06f 030f 	mvn.w	r3, #15
 8005982:	e01e      	b.n	80059c2 <tcp_listen_with_backlog_and_err+0xaa>
  LWIP_ERROR("tcp_listen_with_backlog_and_err: pcb already connected", pcb->state == CLOSED, res = ERR_CLSD; goto done);
 8005984:	4b13      	ldr	r3, [pc, #76]	; (80059d4 <tcp_listen_with_backlog_and_err+0xbc>)
 8005986:	f240 325a 	movw	r2, #858	; 0x35a
 800598a:	4915      	ldr	r1, [pc, #84]	; (80059e0 <tcp_listen_with_backlog_and_err+0xc8>)
 800598c:	4813      	ldr	r0, [pc, #76]	; (80059dc <tcp_listen_with_backlog_and_err+0xc4>)
 800598e:	f005 fd53 	bl	800b438 <iprintf>
 8005992:	f06f 030e 	mvn.w	r3, #14
  struct tcp_pcb_listen *lpcb = NULL;
 8005996:	2500      	movs	r5, #0
  LWIP_ERROR("tcp_listen_with_backlog_and_err: pcb already connected", pcb->state == CLOSED, res = ERR_CLSD; goto done);
 8005998:	e013      	b.n	80059c2 <tcp_listen_with_backlog_and_err+0xaa>
    TCP_RMV(&tcp_bound_pcbs, pcb);
 800599a:	68e2      	ldr	r2, [r4, #12]
 800599c:	4b0c      	ldr	r3, [pc, #48]	; (80059d0 <tcp_listen_with_backlog_and_err+0xb8>)
 800599e:	601a      	str	r2, [r3, #0]
 80059a0:	e001      	b.n	80059a6 <tcp_listen_with_backlog_and_err+0x8e>
 80059a2:	68e2      	ldr	r2, [r4, #12]
 80059a4:	60da      	str	r2, [r3, #12]
 80059a6:	2300      	movs	r3, #0
 80059a8:	60e3      	str	r3, [r4, #12]
  tcp_free(pcb);
 80059aa:	4620      	mov	r0, r4
 80059ac:	f7ff ff38 	bl	8005820 <tcp_free>
  lpcb->accept = tcp_accept_null;
 80059b0:	4b0c      	ldr	r3, [pc, #48]	; (80059e4 <tcp_listen_with_backlog_and_err+0xcc>)
 80059b2:	61ab      	str	r3, [r5, #24]
  TCP_REG(&tcp_listen_pcbs.pcbs, (struct tcp_pcb *)lpcb);
 80059b4:	4b0c      	ldr	r3, [pc, #48]	; (80059e8 <tcp_listen_with_backlog_and_err+0xd0>)
 80059b6:	681a      	ldr	r2, [r3, #0]
 80059b8:	60ea      	str	r2, [r5, #12]
 80059ba:	601d      	str	r5, [r3, #0]
 80059bc:	f003 ff50 	bl	8009860 <tcp_timer_needed>
  res = ERR_OK;
 80059c0:	2300      	movs	r3, #0
  if (err != NULL) {
 80059c2:	b106      	cbz	r6, 80059c6 <tcp_listen_with_backlog_and_err+0xae>
    *err = res;
 80059c4:	7033      	strb	r3, [r6, #0]
}
 80059c6:	4628      	mov	r0, r5
 80059c8:	bd70      	pop	{r4, r5, r6, pc}
    res = ERR_MEM;
 80059ca:	f04f 33ff 	mov.w	r3, #4294967295
 80059ce:	e7f8      	b.n	80059c2 <tcp_listen_with_backlog_and_err+0xaa>
 80059d0:	2000ae60 	.word	0x2000ae60
 80059d4:	08010de4 	.word	0x08010de4
 80059d8:	08010e74 	.word	0x08010e74
 80059dc:	0800cb24 	.word	0x0800cb24
 80059e0:	08010ea4 	.word	0x08010ea4
 80059e4:	08005f4d 	.word	0x08005f4d
 80059e8:	2000ae64 	.word	0x2000ae64

080059ec <tcp_listen_with_backlog>:
{
 80059ec:	b508      	push	{r3, lr}
  return tcp_listen_with_backlog_and_err(pcb, backlog, NULL);
 80059ee:	2200      	movs	r2, #0
 80059f0:	f7ff ff92 	bl	8005918 <tcp_listen_with_backlog_and_err>
}
 80059f4:	bd08      	pop	{r3, pc}
	...

080059f8 <tcp_update_rcv_ann_wnd>:
{
 80059f8:	b538      	push	{r3, r4, r5, lr}
  LWIP_ASSERT("tcp_update_rcv_ann_wnd: invalid pcb", pcb != NULL);
 80059fa:	4604      	mov	r4, r0
 80059fc:	b188      	cbz	r0, 8005a22 <tcp_update_rcv_ann_wnd+0x2a>
  new_right_edge = pcb->rcv_nxt + pcb->rcv_wnd;
 80059fe:	6a65      	ldr	r5, [r4, #36]	; 0x24
 8005a00:	8d22      	ldrh	r2, [r4, #40]	; 0x28
  if (TCP_SEQ_GEQ(new_right_edge, pcb->rcv_ann_right_edge + LWIP_MIN((TCP_WND / 2), pcb->mss))) {
 8005a02:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
  new_right_edge = pcb->rcv_nxt + pcb->rcv_wnd;
 8005a04:	1950      	adds	r0, r2, r5
 8005a06:	1ac0      	subs	r0, r0, r3
  if (TCP_SEQ_GEQ(new_right_edge, pcb->rcv_ann_right_edge + LWIP_MIN((TCP_WND / 2), pcb->mss))) {
 8005a08:	f8b4 c032 	ldrh.w	ip, [r4, #50]	; 0x32
 8005a0c:	f5bc 6f86 	cmp.w	ip, #1072	; 0x430
 8005a10:	bf94      	ite	ls
 8005a12:	eba0 010c 	subls.w	r1, r0, ip
 8005a16:	f5a0 6186 	subhi.w	r1, r0, #1072	; 0x430
 8005a1a:	2900      	cmp	r1, #0
 8005a1c:	db09      	blt.n	8005a32 <tcp_update_rcv_ann_wnd+0x3a>
    pcb->rcv_ann_wnd = pcb->rcv_wnd;
 8005a1e:	8562      	strh	r2, [r4, #42]	; 0x2a
}
 8005a20:	bd38      	pop	{r3, r4, r5, pc}
  LWIP_ASSERT("tcp_update_rcv_ann_wnd: invalid pcb", pcb != NULL);
 8005a22:	4b0e      	ldr	r3, [pc, #56]	; (8005a5c <tcp_update_rcv_ann_wnd+0x64>)
 8005a24:	f240 32a6 	movw	r2, #934	; 0x3a6
 8005a28:	490d      	ldr	r1, [pc, #52]	; (8005a60 <tcp_update_rcv_ann_wnd+0x68>)
 8005a2a:	480e      	ldr	r0, [pc, #56]	; (8005a64 <tcp_update_rcv_ann_wnd+0x6c>)
 8005a2c:	f005 fd04 	bl	800b438 <iprintf>
 8005a30:	e7e5      	b.n	80059fe <tcp_update_rcv_ann_wnd+0x6>
    if (TCP_SEQ_GT(pcb->rcv_nxt, pcb->rcv_ann_right_edge)) {
 8005a32:	1aea      	subs	r2, r5, r3
 8005a34:	2a00      	cmp	r2, #0
 8005a36:	dd02      	ble.n	8005a3e <tcp_update_rcv_ann_wnd+0x46>
      pcb->rcv_ann_wnd = 0;
 8005a38:	2000      	movs	r0, #0
 8005a3a:	8560      	strh	r0, [r4, #42]	; 0x2a
 8005a3c:	e7f0      	b.n	8005a20 <tcp_update_rcv_ann_wnd+0x28>
      u32_t new_rcv_ann_wnd = pcb->rcv_ann_right_edge - pcb->rcv_nxt;
 8005a3e:	1b5d      	subs	r5, r3, r5
      LWIP_ASSERT("new_rcv_ann_wnd <= 0xffff", new_rcv_ann_wnd <= 0xffff);
 8005a40:	f5b5 3f80 	cmp.w	r5, #65536	; 0x10000
 8005a44:	d202      	bcs.n	8005a4c <tcp_update_rcv_ann_wnd+0x54>
      pcb->rcv_ann_wnd = (tcpwnd_size_t)new_rcv_ann_wnd;
 8005a46:	8565      	strh	r5, [r4, #42]	; 0x2a
    return 0;
 8005a48:	2000      	movs	r0, #0
 8005a4a:	e7e9      	b.n	8005a20 <tcp_update_rcv_ann_wnd+0x28>
      LWIP_ASSERT("new_rcv_ann_wnd <= 0xffff", new_rcv_ann_wnd <= 0xffff);
 8005a4c:	4b03      	ldr	r3, [pc, #12]	; (8005a5c <tcp_update_rcv_ann_wnd+0x64>)
 8005a4e:	f240 32b6 	movw	r2, #950	; 0x3b6
 8005a52:	4905      	ldr	r1, [pc, #20]	; (8005a68 <tcp_update_rcv_ann_wnd+0x70>)
 8005a54:	4803      	ldr	r0, [pc, #12]	; (8005a64 <tcp_update_rcv_ann_wnd+0x6c>)
 8005a56:	f005 fcef 	bl	800b438 <iprintf>
 8005a5a:	e7f4      	b.n	8005a46 <tcp_update_rcv_ann_wnd+0x4e>
 8005a5c:	08010de4 	.word	0x08010de4
 8005a60:	08010edc 	.word	0x08010edc
 8005a64:	0800cb24 	.word	0x0800cb24
 8005a68:	08010f00 	.word	0x08010f00

08005a6c <tcp_recved>:
{
 8005a6c:	b538      	push	{r3, r4, r5, lr}
  LWIP_ERROR("tcp_recved: invalid pcb", pcb != NULL, return);
 8005a6e:	b178      	cbz	r0, 8005a90 <tcp_recved+0x24>
 8005a70:	460c      	mov	r4, r1
 8005a72:	4605      	mov	r5, r0
  LWIP_ASSERT("don't call tcp_recved for listen-pcbs",
 8005a74:	7d03      	ldrb	r3, [r0, #20]
 8005a76:	2b01      	cmp	r3, #1
 8005a78:	d012      	beq.n	8005aa0 <tcp_recved+0x34>
  rcv_wnd = (tcpwnd_size_t)(pcb->rcv_wnd + len);
 8005a7a:	8d2b      	ldrh	r3, [r5, #40]	; 0x28
 8005a7c:	1919      	adds	r1, r3, r4
 8005a7e:	b289      	uxth	r1, r1
  if ((rcv_wnd > TCP_WND_MAX(pcb)) || (rcv_wnd < pcb->rcv_wnd)) {
 8005a80:	f5b1 6f06 	cmp.w	r1, #2144	; 0x860
 8005a84:	d814      	bhi.n	8005ab0 <tcp_recved+0x44>
    pcb->rcv_wnd = TCP_WND_MAX(pcb);
 8005a86:	428b      	cmp	r3, r1
 8005a88:	bf88      	it	hi
 8005a8a:	f44f 6106 	movhi.w	r1, #2144	; 0x860
 8005a8e:	e011      	b.n	8005ab4 <tcp_recved+0x48>
  LWIP_ERROR("tcp_recved: invalid pcb", pcb != NULL, return);
 8005a90:	4b10      	ldr	r3, [pc, #64]	; (8005ad4 <tcp_recved+0x68>)
 8005a92:	f240 32cf 	movw	r2, #975	; 0x3cf
 8005a96:	4910      	ldr	r1, [pc, #64]	; (8005ad8 <tcp_recved+0x6c>)
 8005a98:	4810      	ldr	r0, [pc, #64]	; (8005adc <tcp_recved+0x70>)
 8005a9a:	f005 fccd 	bl	800b438 <iprintf>
 8005a9e:	e010      	b.n	8005ac2 <tcp_recved+0x56>
  LWIP_ASSERT("don't call tcp_recved for listen-pcbs",
 8005aa0:	4b0c      	ldr	r3, [pc, #48]	; (8005ad4 <tcp_recved+0x68>)
 8005aa2:	f240 32d2 	movw	r2, #978	; 0x3d2
 8005aa6:	490e      	ldr	r1, [pc, #56]	; (8005ae0 <tcp_recved+0x74>)
 8005aa8:	480c      	ldr	r0, [pc, #48]	; (8005adc <tcp_recved+0x70>)
 8005aaa:	f005 fcc5 	bl	800b438 <iprintf>
 8005aae:	e7e4      	b.n	8005a7a <tcp_recved+0xe>
    pcb->rcv_wnd = TCP_WND_MAX(pcb);
 8005ab0:	f44f 6106 	mov.w	r1, #2144	; 0x860
 8005ab4:	8529      	strh	r1, [r5, #40]	; 0x28
  wnd_inflation = tcp_update_rcv_ann_wnd(pcb);
 8005ab6:	4628      	mov	r0, r5
 8005ab8:	f7ff ff9e 	bl	80059f8 <tcp_update_rcv_ann_wnd>
  if (wnd_inflation >= TCP_WND_UPDATE_THRESHOLD) {
 8005abc:	f5b0 7f06 	cmp.w	r0, #536	; 0x218
 8005ac0:	d200      	bcs.n	8005ac4 <tcp_recved+0x58>
}
 8005ac2:	bd38      	pop	{r3, r4, r5, pc}
    tcp_ack_now(pcb);
 8005ac4:	8b6b      	ldrh	r3, [r5, #26]
 8005ac6:	f043 0302 	orr.w	r3, r3, #2
 8005aca:	836b      	strh	r3, [r5, #26]
    tcp_output(pcb);
 8005acc:	4628      	mov	r0, r5
 8005ace:	f003 fbb7 	bl	8009240 <tcp_output>
                          len, pcb->rcv_wnd, (u16_t)(TCP_WND_MAX(pcb) - pcb->rcv_wnd)));
 8005ad2:	e7f6      	b.n	8005ac2 <tcp_recved+0x56>
 8005ad4:	08010de4 	.word	0x08010de4
 8005ad8:	08010f1c 	.word	0x08010f1c
 8005adc:	0800cb24 	.word	0x0800cb24
 8005ae0:	08010f34 	.word	0x08010f34

08005ae4 <tcp_seg_free>:
 * @param seg single tcp_seg to free
 */
void
tcp_seg_free(struct tcp_seg *seg)
{
  if (seg != NULL) {
 8005ae4:	b150      	cbz	r0, 8005afc <tcp_seg_free+0x18>
{
 8005ae6:	b510      	push	{r4, lr}
 8005ae8:	4604      	mov	r4, r0
    if (seg->p != NULL) {
 8005aea:	6840      	ldr	r0, [r0, #4]
 8005aec:	b108      	cbz	r0, 8005af2 <tcp_seg_free+0xe>
      pbuf_free(seg->p);
 8005aee:	f7ff fb5b 	bl	80051a8 <pbuf_free>
#if TCP_DEBUG
      seg->p = NULL;
#endif /* TCP_DEBUG */
    }
    memp_free(MEMP_TCP_SEG, seg);
 8005af2:	4621      	mov	r1, r4
 8005af4:	2003      	movs	r0, #3
 8005af6:	f7ff f899 	bl	8004c2c <memp_free>
  }
}
 8005afa:	bd10      	pop	{r4, pc}
 8005afc:	4770      	bx	lr

08005afe <tcp_segs_free>:
{
 8005afe:	b510      	push	{r4, lr}
  while (seg != NULL) {
 8005b00:	4604      	mov	r4, r0
 8005b02:	b128      	cbz	r0, 8005b10 <tcp_segs_free+0x12>
    struct tcp_seg *next = seg->next;
 8005b04:	4620      	mov	r0, r4
 8005b06:	6824      	ldr	r4, [r4, #0]
    tcp_seg_free(seg);
 8005b08:	f7ff ffec 	bl	8005ae4 <tcp_seg_free>
  while (seg != NULL) {
 8005b0c:	2c00      	cmp	r4, #0
 8005b0e:	d1f9      	bne.n	8005b04 <tcp_segs_free+0x6>
}
 8005b10:	bd10      	pop	{r4, pc}
	...

08005b14 <tcp_setprio>:
 * @param pcb the tcp_pcb to manipulate
 * @param prio new priority
 */
void
tcp_setprio(struct tcp_pcb *pcb, u8_t prio)
{
 8005b14:	b508      	push	{r3, lr}
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_setprio: invalid pcb", pcb != NULL, return);
 8005b16:	b108      	cbz	r0, 8005b1c <tcp_setprio+0x8>

  pcb->prio = prio;
 8005b18:	7541      	strb	r1, [r0, #21]
}
 8005b1a:	bd08      	pop	{r3, pc}
  LWIP_ERROR("tcp_setprio: invalid pcb", pcb != NULL, return);
 8005b1c:	4b03      	ldr	r3, [pc, #12]	; (8005b2c <tcp_setprio+0x18>)
 8005b1e:	f44f 62ce 	mov.w	r2, #1648	; 0x670
 8005b22:	4903      	ldr	r1, [pc, #12]	; (8005b30 <tcp_setprio+0x1c>)
 8005b24:	4803      	ldr	r0, [pc, #12]	; (8005b34 <tcp_setprio+0x20>)
 8005b26:	f005 fc87 	bl	800b438 <iprintf>
 8005b2a:	e7f6      	b.n	8005b1a <tcp_setprio+0x6>
 8005b2c:	08010de4 	.word	0x08010de4
 8005b30:	08010f5c 	.word	0x08010f5c
 8005b34:	0800cb24 	.word	0x0800cb24

08005b38 <tcp_seg_copy>:
 * @param seg the old tcp_seg
 * @return a copy of seg
 */
struct tcp_seg *
tcp_seg_copy(struct tcp_seg *seg)
{
 8005b38:	b538      	push	{r3, r4, r5, lr}
  struct tcp_seg *cseg;

  LWIP_ASSERT("tcp_seg_copy: invalid seg", seg != NULL);
 8005b3a:	4605      	mov	r5, r0
 8005b3c:	b188      	cbz	r0, 8005b62 <tcp_seg_copy+0x2a>

  cseg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG);
 8005b3e:	2003      	movs	r0, #3
 8005b40:	f7ff f844 	bl	8004bcc <memp_malloc>
  if (cseg == NULL) {
 8005b44:	4604      	mov	r4, r0
 8005b46:	b150      	cbz	r0, 8005b5e <tcp_seg_copy+0x26>
    return NULL;
  }
  SMEMCPY((u8_t *)cseg, (const u8_t *)seg, sizeof(struct tcp_seg));
 8005b48:	6828      	ldr	r0, [r5, #0]
 8005b4a:	6869      	ldr	r1, [r5, #4]
 8005b4c:	68aa      	ldr	r2, [r5, #8]
 8005b4e:	68eb      	ldr	r3, [r5, #12]
 8005b50:	6020      	str	r0, [r4, #0]
 8005b52:	6061      	str	r1, [r4, #4]
 8005b54:	60a2      	str	r2, [r4, #8]
 8005b56:	60e3      	str	r3, [r4, #12]
  pbuf_ref(cseg->p);
 8005b58:	6860      	ldr	r0, [r4, #4]
 8005b5a:	f7ff fc8b 	bl	8005474 <pbuf_ref>
  return cseg;
}
 8005b5e:	4620      	mov	r0, r4
 8005b60:	bd38      	pop	{r3, r4, r5, pc}
  LWIP_ASSERT("tcp_seg_copy: invalid seg", seg != NULL);
 8005b62:	4b04      	ldr	r3, [pc, #16]	; (8005b74 <tcp_seg_copy+0x3c>)
 8005b64:	f240 6282 	movw	r2, #1666	; 0x682
 8005b68:	4903      	ldr	r1, [pc, #12]	; (8005b78 <tcp_seg_copy+0x40>)
 8005b6a:	4804      	ldr	r0, [pc, #16]	; (8005b7c <tcp_seg_copy+0x44>)
 8005b6c:	f005 fc64 	bl	800b438 <iprintf>
 8005b70:	e7e5      	b.n	8005b3e <tcp_seg_copy+0x6>
 8005b72:	bf00      	nop
 8005b74:	08010de4 	.word	0x08010de4
 8005b78:	08010f78 	.word	0x08010f78
 8005b7c:	0800cb24 	.word	0x0800cb24

08005b80 <tcp_arg>:
tcp_arg(struct tcp_pcb *pcb, void *arg)
{
  LWIP_ASSERT_CORE_LOCKED();
  /* This function is allowed to be called for both listen pcbs and
     connection pcbs. */
  if (pcb != NULL) {
 8005b80:	b100      	cbz	r0, 8005b84 <tcp_arg+0x4>
    pcb->callback_arg = arg;
 8005b82:	6101      	str	r1, [r0, #16]
  }
}
 8005b84:	4770      	bx	lr
	...

08005b88 <tcp_recv>:
 */
void
tcp_recv(struct tcp_pcb *pcb, tcp_recv_fn recv)
{
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 8005b88:	b180      	cbz	r0, 8005bac <tcp_recv+0x24>
{
 8005b8a:	b538      	push	{r3, r4, r5, lr}
 8005b8c:	460c      	mov	r4, r1
 8005b8e:	4605      	mov	r5, r0
    LWIP_ASSERT("invalid socket state for recv callback", pcb->state != LISTEN);
 8005b90:	7d03      	ldrb	r3, [r0, #20]
 8005b92:	2b01      	cmp	r3, #1
 8005b94:	d002      	beq.n	8005b9c <tcp_recv+0x14>
    pcb->recv = recv;
 8005b96:	f8c5 4084 	str.w	r4, [r5, #132]	; 0x84
  }
}
 8005b9a:	bd38      	pop	{r3, r4, r5, pc}
    LWIP_ASSERT("invalid socket state for recv callback", pcb->state != LISTEN);
 8005b9c:	4b04      	ldr	r3, [pc, #16]	; (8005bb0 <tcp_recv+0x28>)
 8005b9e:	f240 72df 	movw	r2, #2015	; 0x7df
 8005ba2:	4904      	ldr	r1, [pc, #16]	; (8005bb4 <tcp_recv+0x2c>)
 8005ba4:	4804      	ldr	r0, [pc, #16]	; (8005bb8 <tcp_recv+0x30>)
 8005ba6:	f005 fc47 	bl	800b438 <iprintf>
 8005baa:	e7f4      	b.n	8005b96 <tcp_recv+0xe>
 8005bac:	4770      	bx	lr
 8005bae:	bf00      	nop
 8005bb0:	08010de4 	.word	0x08010de4
 8005bb4:	08010f94 	.word	0x08010f94
 8005bb8:	0800cb24 	.word	0x0800cb24

08005bbc <tcp_sent>:
 */
void
tcp_sent(struct tcp_pcb *pcb, tcp_sent_fn sent)
{
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 8005bbc:	b180      	cbz	r0, 8005be0 <tcp_sent+0x24>
{
 8005bbe:	b538      	push	{r3, r4, r5, lr}
 8005bc0:	460c      	mov	r4, r1
 8005bc2:	4605      	mov	r5, r0
    LWIP_ASSERT("invalid socket state for sent callback", pcb->state != LISTEN);
 8005bc4:	7d03      	ldrb	r3, [r0, #20]
 8005bc6:	2b01      	cmp	r3, #1
 8005bc8:	d002      	beq.n	8005bd0 <tcp_sent+0x14>
    pcb->sent = sent;
 8005bca:	f8c5 4080 	str.w	r4, [r5, #128]	; 0x80
  }
}
 8005bce:	bd38      	pop	{r3, r4, r5, pc}
    LWIP_ASSERT("invalid socket state for sent callback", pcb->state != LISTEN);
 8005bd0:	4b04      	ldr	r3, [pc, #16]	; (8005be4 <tcp_sent+0x28>)
 8005bd2:	f240 72f3 	movw	r2, #2035	; 0x7f3
 8005bd6:	4904      	ldr	r1, [pc, #16]	; (8005be8 <tcp_sent+0x2c>)
 8005bd8:	4804      	ldr	r0, [pc, #16]	; (8005bec <tcp_sent+0x30>)
 8005bda:	f005 fc2d 	bl	800b438 <iprintf>
 8005bde:	e7f4      	b.n	8005bca <tcp_sent+0xe>
 8005be0:	4770      	bx	lr
 8005be2:	bf00      	nop
 8005be4:	08010de4 	.word	0x08010de4
 8005be8:	08010fbc 	.word	0x08010fbc
 8005bec:	0800cb24 	.word	0x0800cb24

08005bf0 <tcp_err>:
 */
void
tcp_err(struct tcp_pcb *pcb, tcp_err_fn err)
{
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 8005bf0:	b180      	cbz	r0, 8005c14 <tcp_err+0x24>
{
 8005bf2:	b538      	push	{r3, r4, r5, lr}
 8005bf4:	460c      	mov	r4, r1
 8005bf6:	4605      	mov	r5, r0
    LWIP_ASSERT("invalid socket state for err callback", pcb->state != LISTEN);
 8005bf8:	7d03      	ldrb	r3, [r0, #20]
 8005bfa:	2b01      	cmp	r3, #1
 8005bfc:	d002      	beq.n	8005c04 <tcp_err+0x14>
    pcb->errf = err;
 8005bfe:	f8c5 4090 	str.w	r4, [r5, #144]	; 0x90
  }
}
 8005c02:	bd38      	pop	{r3, r4, r5, pc}
    LWIP_ASSERT("invalid socket state for err callback", pcb->state != LISTEN);
 8005c04:	4b04      	ldr	r3, [pc, #16]	; (8005c18 <tcp_err+0x28>)
 8005c06:	f640 020d 	movw	r2, #2061	; 0x80d
 8005c0a:	4904      	ldr	r1, [pc, #16]	; (8005c1c <tcp_err+0x2c>)
 8005c0c:	4804      	ldr	r0, [pc, #16]	; (8005c20 <tcp_err+0x30>)
 8005c0e:	f005 fc13 	bl	800b438 <iprintf>
 8005c12:	e7f4      	b.n	8005bfe <tcp_err+0xe>
 8005c14:	4770      	bx	lr
 8005c16:	bf00      	nop
 8005c18:	08010de4 	.word	0x08010de4
 8005c1c:	08010fe4 	.word	0x08010fe4
 8005c20:	0800cb24 	.word	0x0800cb24

08005c24 <tcp_accept>:
 */
void
tcp_accept(struct tcp_pcb *pcb, tcp_accept_fn accept)
{
  LWIP_ASSERT_CORE_LOCKED();
  if ((pcb != NULL) && (pcb->state == LISTEN)) {
 8005c24:	b118      	cbz	r0, 8005c2e <tcp_accept+0xa>
 8005c26:	7d02      	ldrb	r2, [r0, #20]
 8005c28:	2a01      	cmp	r2, #1
    struct tcp_pcb_listen *lpcb = (struct tcp_pcb_listen *)pcb;
    lpcb->accept = accept;
 8005c2a:	bf08      	it	eq
 8005c2c:	6181      	streq	r1, [r0, #24]
  }
}
 8005c2e:	4770      	bx	lr

08005c30 <tcp_poll>:
 * the application may use the polling functionality to call tcp_write()
 * again when the connection has been idle for a while.
 */
void
tcp_poll(struct tcp_pcb *pcb, tcp_poll_fn poll, u8_t interval)
{
 8005c30:	b570      	push	{r4, r5, r6, lr}
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_poll: invalid pcb", pcb != NULL, return);
 8005c32:	b148      	cbz	r0, 8005c48 <tcp_poll+0x18>
 8005c34:	460d      	mov	r5, r1
 8005c36:	4614      	mov	r4, r2
 8005c38:	4606      	mov	r6, r0
  LWIP_ASSERT("invalid socket state for poll", pcb->state != LISTEN);
 8005c3a:	7d03      	ldrb	r3, [r0, #20]
 8005c3c:	2b01      	cmp	r3, #1
 8005c3e:	d00b      	beq.n	8005c58 <tcp_poll+0x28>

#if LWIP_CALLBACK_API
  pcb->poll = poll;
 8005c40:	f8c6 508c 	str.w	r5, [r6, #140]	; 0x8c
#else /* LWIP_CALLBACK_API */
  LWIP_UNUSED_ARG(poll);
#endif /* LWIP_CALLBACK_API */
  pcb->pollinterval = interval;
 8005c44:	7774      	strb	r4, [r6, #29]
}
 8005c46:	bd70      	pop	{r4, r5, r6, pc}
  LWIP_ERROR("tcp_poll: invalid pcb", pcb != NULL, return);
 8005c48:	4b07      	ldr	r3, [pc, #28]	; (8005c68 <tcp_poll+0x38>)
 8005c4a:	f640 023d 	movw	r2, #2109	; 0x83d
 8005c4e:	4907      	ldr	r1, [pc, #28]	; (8005c6c <tcp_poll+0x3c>)
 8005c50:	4807      	ldr	r0, [pc, #28]	; (8005c70 <tcp_poll+0x40>)
 8005c52:	f005 fbf1 	bl	800b438 <iprintf>
 8005c56:	e7f6      	b.n	8005c46 <tcp_poll+0x16>
  LWIP_ASSERT("invalid socket state for poll", pcb->state != LISTEN);
 8005c58:	4b03      	ldr	r3, [pc, #12]	; (8005c68 <tcp_poll+0x38>)
 8005c5a:	f640 023e 	movw	r2, #2110	; 0x83e
 8005c5e:	4905      	ldr	r1, [pc, #20]	; (8005c74 <tcp_poll+0x44>)
 8005c60:	4803      	ldr	r0, [pc, #12]	; (8005c70 <tcp_poll+0x40>)
 8005c62:	f005 fbe9 	bl	800b438 <iprintf>
 8005c66:	e7eb      	b.n	8005c40 <tcp_poll+0x10>
 8005c68:	08010de4 	.word	0x08010de4
 8005c6c:	0801100c 	.word	0x0801100c
 8005c70:	0800cb24 	.word	0x0800cb24
 8005c74:	08011024 	.word	0x08011024

08005c78 <tcp_next_iss>:
 *
 * @return u32_t pseudo random sequence number
 */
u32_t
tcp_next_iss(struct tcp_pcb *pcb)
{
 8005c78:	b508      	push	{r3, lr}
  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
  return LWIP_HOOK_TCP_ISN(&pcb->local_ip, pcb->local_port, &pcb->remote_ip, pcb->remote_port);
#else /* LWIP_HOOK_TCP_ISN */
  static u32_t iss = 6510;

  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
 8005c7a:	b130      	cbz	r0, 8005c8a <tcp_next_iss+0x12>
  LWIP_UNUSED_ARG(pcb);

  iss += tcp_ticks;       /* XXX */
 8005c7c:	4b07      	ldr	r3, [pc, #28]	; (8005c9c <tcp_next_iss+0x24>)
 8005c7e:	6818      	ldr	r0, [r3, #0]
 8005c80:	4a07      	ldr	r2, [pc, #28]	; (8005ca0 <tcp_next_iss+0x28>)
 8005c82:	6812      	ldr	r2, [r2, #0]
 8005c84:	4410      	add	r0, r2
 8005c86:	6018      	str	r0, [r3, #0]
  return iss;
#endif /* LWIP_HOOK_TCP_ISN */
}
 8005c88:	bd08      	pop	{r3, pc}
  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
 8005c8a:	4b06      	ldr	r3, [pc, #24]	; (8005ca4 <tcp_next_iss+0x2c>)
 8005c8c:	f640 02af 	movw	r2, #2223	; 0x8af
 8005c90:	4905      	ldr	r1, [pc, #20]	; (8005ca8 <tcp_next_iss+0x30>)
 8005c92:	4806      	ldr	r0, [pc, #24]	; (8005cac <tcp_next_iss+0x34>)
 8005c94:	f005 fbd0 	bl	800b438 <iprintf>
 8005c98:	e7f0      	b.n	8005c7c <tcp_next_iss+0x4>
 8005c9a:	bf00      	nop
 8005c9c:	20000030 	.word	0x20000030
 8005ca0:	2000ae68 	.word	0x2000ae68
 8005ca4:	08010de4 	.word	0x08010de4
 8005ca8:	08011044 	.word	0x08011044
 8005cac:	0800cb24 	.word	0x0800cb24

08005cb0 <tcp_eff_send_mss_netif>:
 * by calculating the minimum of TCP_MSS and the mtu (if set) of the target
 * netif (if not NULL).
 */
u16_t
tcp_eff_send_mss_netif(u16_t sendmss, struct netif *outif, const ip_addr_t *dest)
{
 8005cb0:	b538      	push	{r3, r4, r5, lr}
 8005cb2:	4605      	mov	r5, r0
 8005cb4:	460c      	mov	r4, r1
  u16_t mss_s;
  u16_t mtu;

  LWIP_UNUSED_ARG(dest); /* in case IPv6 is disabled */

  LWIP_ASSERT("tcp_eff_send_mss_netif: invalid dst_ip", dest != NULL);
 8005cb6:	b162      	cbz	r2, 8005cd2 <tcp_eff_send_mss_netif+0x22>
  else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
  {
    if (outif == NULL) {
 8005cb8:	b14c      	cbz	r4, 8005cce <tcp_eff_send_mss_netif+0x1e>
      return sendmss;
    }
    mtu = outif->mtu;
 8005cba:	8ca3      	ldrh	r3, [r4, #36]	; 0x24
  }
#endif /* LWIP_IPV4 */

  if (mtu != 0) {
 8005cbc:	b13b      	cbz	r3, 8005cce <tcp_eff_send_mss_netif+0x1e>
#if LWIP_IPV4
    {
      offset = IP_HLEN + TCP_HLEN;
    }
#endif /* LWIP_IPV4 */
    mss_s = (mtu > offset) ? (u16_t)(mtu - offset) : 0;
 8005cbe:	2b28      	cmp	r3, #40	; 0x28
 8005cc0:	bf86      	itte	hi
 8005cc2:	3b28      	subhi	r3, #40	; 0x28
 8005cc4:	b29b      	uxthhi	r3, r3
 8005cc6:	2300      	movls	r3, #0
    /* RFC 1122, chap 4.2.2.6:
     * Eff.snd.MSS = min(SendMSS+20, MMS_S) - TCPhdrsize - IPoptionsize
     * We correct for TCP options in tcp_write(), and don't support IP options.
     */
    sendmss = LWIP_MIN(sendmss, mss_s);
 8005cc8:	429d      	cmp	r5, r3
 8005cca:	bf28      	it	cs
 8005ccc:	461d      	movcs	r5, r3
  }
  return sendmss;
}
 8005cce:	4628      	mov	r0, r5
 8005cd0:	bd38      	pop	{r3, r4, r5, pc}
  LWIP_ASSERT("tcp_eff_send_mss_netif: invalid dst_ip", dest != NULL);
 8005cd2:	4b04      	ldr	r3, [pc, #16]	; (8005ce4 <tcp_eff_send_mss_netif+0x34>)
 8005cd4:	f640 02c5 	movw	r2, #2245	; 0x8c5
 8005cd8:	4903      	ldr	r1, [pc, #12]	; (8005ce8 <tcp_eff_send_mss_netif+0x38>)
 8005cda:	4804      	ldr	r0, [pc, #16]	; (8005cec <tcp_eff_send_mss_netif+0x3c>)
 8005cdc:	f005 fbac 	bl	800b438 <iprintf>
 8005ce0:	e7ea      	b.n	8005cb8 <tcp_eff_send_mss_netif+0x8>
 8005ce2:	bf00      	nop
 8005ce4:	08010de4 	.word	0x08010de4
 8005ce8:	08011060 	.word	0x08011060
 8005cec:	0800cb24 	.word	0x0800cb24

08005cf0 <tcp_free_ooseq>:

#if TCP_QUEUE_OOSEQ
/* Free all ooseq pbufs (and possibly reset SACK state) */
void
tcp_free_ooseq(struct tcp_pcb *pcb)
{
 8005cf0:	b510      	push	{r4, lr}
 8005cf2:	4604      	mov	r4, r0
  if (pcb->ooseq) {
 8005cf4:	6f40      	ldr	r0, [r0, #116]	; 0x74
 8005cf6:	b118      	cbz	r0, 8005d00 <tcp_free_ooseq+0x10>
    tcp_segs_free(pcb->ooseq);
 8005cf8:	f7ff ff01 	bl	8005afe <tcp_segs_free>
    pcb->ooseq = NULL;
 8005cfc:	2300      	movs	r3, #0
 8005cfe:	6763      	str	r3, [r4, #116]	; 0x74
#if LWIP_TCP_SACK_OUT
    memset(pcb->rcv_sacks, 0, sizeof(pcb->rcv_sacks));
#endif /* LWIP_TCP_SACK_OUT */
  }
}
 8005d00:	bd10      	pop	{r4, pc}
	...

08005d04 <tcp_pcb_purge>:
{
 8005d04:	b510      	push	{r4, lr}
  LWIP_ERROR("tcp_pcb_purge: invalid pcb", pcb != NULL, return);
 8005d06:	b1f8      	cbz	r0, 8005d48 <tcp_pcb_purge+0x44>
 8005d08:	4604      	mov	r4, r0
  if (pcb->state != CLOSED &&
 8005d0a:	7d03      	ldrb	r3, [r0, #20]
 8005d0c:	2b01      	cmp	r3, #1
 8005d0e:	d91a      	bls.n	8005d46 <tcp_pcb_purge+0x42>
 8005d10:	2b0a      	cmp	r3, #10
 8005d12:	d018      	beq.n	8005d46 <tcp_pcb_purge+0x42>
    if (pcb->refused_data != NULL) {
 8005d14:	6f80      	ldr	r0, [r0, #120]	; 0x78
 8005d16:	b118      	cbz	r0, 8005d20 <tcp_pcb_purge+0x1c>
      pbuf_free(pcb->refused_data);
 8005d18:	f7ff fa46 	bl	80051a8 <pbuf_free>
      pcb->refused_data = NULL;
 8005d1c:	2300      	movs	r3, #0
 8005d1e:	67a3      	str	r3, [r4, #120]	; 0x78
    if (pcb->ooseq != NULL) {
 8005d20:	6f63      	ldr	r3, [r4, #116]	; 0x74
 8005d22:	b113      	cbz	r3, 8005d2a <tcp_pcb_purge+0x26>
      tcp_free_ooseq(pcb);
 8005d24:	4620      	mov	r0, r4
 8005d26:	f7ff ffe3 	bl	8005cf0 <tcp_free_ooseq>
    pcb->rtime = -1;
 8005d2a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8005d2e:	8623      	strh	r3, [r4, #48]	; 0x30
    tcp_segs_free(pcb->unsent);
 8005d30:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
 8005d32:	f7ff fee4 	bl	8005afe <tcp_segs_free>
    tcp_segs_free(pcb->unacked);
 8005d36:	6f20      	ldr	r0, [r4, #112]	; 0x70
 8005d38:	f7ff fee1 	bl	8005afe <tcp_segs_free>
    pcb->unacked = pcb->unsent = NULL;
 8005d3c:	2300      	movs	r3, #0
 8005d3e:	66e3      	str	r3, [r4, #108]	; 0x6c
 8005d40:	6723      	str	r3, [r4, #112]	; 0x70
    pcb->unsent_oversize = 0;
 8005d42:	f8a4 3068 	strh.w	r3, [r4, #104]	; 0x68
}
 8005d46:	bd10      	pop	{r4, pc}
  LWIP_ERROR("tcp_pcb_purge: invalid pcb", pcb != NULL, return);
 8005d48:	4b03      	ldr	r3, [pc, #12]	; (8005d58 <tcp_pcb_purge+0x54>)
 8005d4a:	f640 0251 	movw	r2, #2129	; 0x851
 8005d4e:	4903      	ldr	r1, [pc, #12]	; (8005d5c <tcp_pcb_purge+0x58>)
 8005d50:	4803      	ldr	r0, [pc, #12]	; (8005d60 <tcp_pcb_purge+0x5c>)
 8005d52:	f005 fb71 	bl	800b438 <iprintf>
 8005d56:	e7f6      	b.n	8005d46 <tcp_pcb_purge+0x42>
 8005d58:	08010de4 	.word	0x08010de4
 8005d5c:	08011088 	.word	0x08011088
 8005d60:	0800cb24 	.word	0x0800cb24

08005d64 <tcp_pcb_remove>:
{
 8005d64:	b538      	push	{r3, r4, r5, lr}
 8005d66:	4605      	mov	r5, r0
  LWIP_ASSERT("tcp_pcb_remove: invalid pcb", pcb != NULL);
 8005d68:	460c      	mov	r4, r1
 8005d6a:	b149      	cbz	r1, 8005d80 <tcp_pcb_remove+0x1c>
  LWIP_ASSERT("tcp_pcb_remove: invalid pcblist", pcblist != NULL);
 8005d6c:	b185      	cbz	r5, 8005d90 <tcp_pcb_remove+0x2c>
  TCP_RMV(pcblist, pcb);
 8005d6e:	682b      	ldr	r3, [r5, #0]
 8005d70:	42a3      	cmp	r3, r4
 8005d72:	d015      	beq.n	8005da0 <tcp_pcb_remove+0x3c>
 8005d74:	b1cb      	cbz	r3, 8005daa <tcp_pcb_remove+0x46>
 8005d76:	68da      	ldr	r2, [r3, #12]
 8005d78:	42a2      	cmp	r2, r4
 8005d7a:	d014      	beq.n	8005da6 <tcp_pcb_remove+0x42>
 8005d7c:	4613      	mov	r3, r2
 8005d7e:	e7f9      	b.n	8005d74 <tcp_pcb_remove+0x10>
  LWIP_ASSERT("tcp_pcb_remove: invalid pcb", pcb != NULL);
 8005d80:	4b25      	ldr	r3, [pc, #148]	; (8005e18 <tcp_pcb_remove+0xb4>)
 8005d82:	f640 0283 	movw	r2, #2179	; 0x883
 8005d86:	4925      	ldr	r1, [pc, #148]	; (8005e1c <tcp_pcb_remove+0xb8>)
 8005d88:	4825      	ldr	r0, [pc, #148]	; (8005e20 <tcp_pcb_remove+0xbc>)
 8005d8a:	f005 fb55 	bl	800b438 <iprintf>
 8005d8e:	e7ed      	b.n	8005d6c <tcp_pcb_remove+0x8>
  LWIP_ASSERT("tcp_pcb_remove: invalid pcblist", pcblist != NULL);
 8005d90:	4b21      	ldr	r3, [pc, #132]	; (8005e18 <tcp_pcb_remove+0xb4>)
 8005d92:	f640 0284 	movw	r2, #2180	; 0x884
 8005d96:	4923      	ldr	r1, [pc, #140]	; (8005e24 <tcp_pcb_remove+0xc0>)
 8005d98:	4821      	ldr	r0, [pc, #132]	; (8005e20 <tcp_pcb_remove+0xbc>)
 8005d9a:	f005 fb4d 	bl	800b438 <iprintf>
 8005d9e:	e7e6      	b.n	8005d6e <tcp_pcb_remove+0xa>
  TCP_RMV(pcblist, pcb);
 8005da0:	68e3      	ldr	r3, [r4, #12]
 8005da2:	602b      	str	r3, [r5, #0]
 8005da4:	e001      	b.n	8005daa <tcp_pcb_remove+0x46>
 8005da6:	68e2      	ldr	r2, [r4, #12]
 8005da8:	60da      	str	r2, [r3, #12]
 8005daa:	2300      	movs	r3, #0
 8005dac:	60e3      	str	r3, [r4, #12]
  tcp_pcb_purge(pcb);
 8005dae:	4620      	mov	r0, r4
 8005db0:	f7ff ffa8 	bl	8005d04 <tcp_pcb_purge>
  if ((pcb->state != TIME_WAIT) &&
 8005db4:	7d23      	ldrb	r3, [r4, #20]
 8005db6:	2b0a      	cmp	r3, #10
 8005db8:	d005      	beq.n	8005dc6 <tcp_pcb_remove+0x62>
 8005dba:	2b01      	cmp	r3, #1
 8005dbc:	d01e      	beq.n	8005dfc <tcp_pcb_remove+0x98>
      (pcb->flags & TF_ACK_DELAY)) {
 8005dbe:	8b63      	ldrh	r3, [r4, #26]
      (pcb->state != LISTEN) &&
 8005dc0:	f013 0f01 	tst.w	r3, #1
 8005dc4:	d11e      	bne.n	8005e04 <tcp_pcb_remove+0xa0>
    LWIP_ASSERT("unsent segments leaking", pcb->unsent == NULL);
 8005dc6:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 8005dc8:	b133      	cbz	r3, 8005dd8 <tcp_pcb_remove+0x74>
 8005dca:	4b13      	ldr	r3, [pc, #76]	; (8005e18 <tcp_pcb_remove+0xb4>)
 8005dcc:	f640 0293 	movw	r2, #2195	; 0x893
 8005dd0:	4915      	ldr	r1, [pc, #84]	; (8005e28 <tcp_pcb_remove+0xc4>)
 8005dd2:	4813      	ldr	r0, [pc, #76]	; (8005e20 <tcp_pcb_remove+0xbc>)
 8005dd4:	f005 fb30 	bl	800b438 <iprintf>
    LWIP_ASSERT("unacked segments leaking", pcb->unacked == NULL);
 8005dd8:	6f23      	ldr	r3, [r4, #112]	; 0x70
 8005dda:	b133      	cbz	r3, 8005dea <tcp_pcb_remove+0x86>
 8005ddc:	4b0e      	ldr	r3, [pc, #56]	; (8005e18 <tcp_pcb_remove+0xb4>)
 8005dde:	f640 0294 	movw	r2, #2196	; 0x894
 8005de2:	4912      	ldr	r1, [pc, #72]	; (8005e2c <tcp_pcb_remove+0xc8>)
 8005de4:	480e      	ldr	r0, [pc, #56]	; (8005e20 <tcp_pcb_remove+0xbc>)
 8005de6:	f005 fb27 	bl	800b438 <iprintf>
    LWIP_ASSERT("ooseq segments leaking", pcb->ooseq == NULL);
 8005dea:	6f63      	ldr	r3, [r4, #116]	; 0x74
 8005dec:	b133      	cbz	r3, 8005dfc <tcp_pcb_remove+0x98>
 8005dee:	4b0a      	ldr	r3, [pc, #40]	; (8005e18 <tcp_pcb_remove+0xb4>)
 8005df0:	f640 0296 	movw	r2, #2198	; 0x896
 8005df4:	490e      	ldr	r1, [pc, #56]	; (8005e30 <tcp_pcb_remove+0xcc>)
 8005df6:	480a      	ldr	r0, [pc, #40]	; (8005e20 <tcp_pcb_remove+0xbc>)
 8005df8:	f005 fb1e 	bl	800b438 <iprintf>
  pcb->state = CLOSED;
 8005dfc:	2300      	movs	r3, #0
 8005dfe:	7523      	strb	r3, [r4, #20]
  pcb->local_port = 0;
 8005e00:	82e3      	strh	r3, [r4, #22]
}
 8005e02:	bd38      	pop	{r3, r4, r5, pc}
    tcp_ack_now(pcb);
 8005e04:	f043 0302 	orr.w	r3, r3, #2
 8005e08:	8363      	strh	r3, [r4, #26]
    tcp_output(pcb);
 8005e0a:	4620      	mov	r0, r4
 8005e0c:	f003 fa18 	bl	8009240 <tcp_output>
  if (pcb->state != LISTEN) {
 8005e10:	7d23      	ldrb	r3, [r4, #20]
 8005e12:	2b01      	cmp	r3, #1
 8005e14:	d0f2      	beq.n	8005dfc <tcp_pcb_remove+0x98>
 8005e16:	e7d6      	b.n	8005dc6 <tcp_pcb_remove+0x62>
 8005e18:	08010de4 	.word	0x08010de4
 8005e1c:	080110a4 	.word	0x080110a4
 8005e20:	0800cb24 	.word	0x0800cb24
 8005e24:	080110c0 	.word	0x080110c0
 8005e28:	080110e0 	.word	0x080110e0
 8005e2c:	080110f8 	.word	0x080110f8
 8005e30:	08011114 	.word	0x08011114

08005e34 <tcp_abandon>:
{
 8005e34:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005e38:	b084      	sub	sp, #16
  LWIP_ERROR("tcp_abandon: invalid pcb", pcb != NULL, return);
 8005e3a:	b1f8      	cbz	r0, 8005e7c <tcp_abandon+0x48>
 8005e3c:	460d      	mov	r5, r1
 8005e3e:	4604      	mov	r4, r0
  LWIP_ASSERT("don't call tcp_abort/tcp_abandon for listen-pcbs",
 8005e40:	7d03      	ldrb	r3, [r0, #20]
 8005e42:	2b01      	cmp	r3, #1
 8005e44:	d022      	beq.n	8005e8c <tcp_abandon+0x58>
  if (pcb->state == TIME_WAIT) {
 8005e46:	7d23      	ldrb	r3, [r4, #20]
 8005e48:	2b0a      	cmp	r3, #10
 8005e4a:	d027      	beq.n	8005e9c <tcp_abandon+0x68>
    seqno = pcb->snd_nxt;
 8005e4c:	f8d4 8050 	ldr.w	r8, [r4, #80]	; 0x50
    ackno = pcb->rcv_nxt;
 8005e50:	f8d4 9024 	ldr.w	r9, [r4, #36]	; 0x24
    errf = pcb->errf;
 8005e54:	f8d4 6090 	ldr.w	r6, [r4, #144]	; 0x90
    errf_arg = pcb->callback_arg;
 8005e58:	6927      	ldr	r7, [r4, #16]
    if (pcb->state == CLOSED) {
 8005e5a:	2b00      	cmp	r3, #0
 8005e5c:	d147      	bne.n	8005eee <tcp_abandon+0xba>
      if (pcb->local_port != 0) {
 8005e5e:	f8b4 a016 	ldrh.w	sl, [r4, #22]
 8005e62:	f1ba 0f00 	cmp.w	sl, #0
 8005e66:	d04c      	beq.n	8005f02 <tcp_abandon+0xce>
        TCP_RMV(&tcp_bound_pcbs, pcb);
 8005e68:	4b2d      	ldr	r3, [pc, #180]	; (8005f20 <tcp_abandon+0xec>)
 8005e6a:	681b      	ldr	r3, [r3, #0]
 8005e6c:	42a3      	cmp	r3, r4
 8005e6e:	d01d      	beq.n	8005eac <tcp_abandon+0x78>
 8005e70:	b313      	cbz	r3, 8005eb8 <tcp_abandon+0x84>
 8005e72:	68da      	ldr	r2, [r3, #12]
 8005e74:	42a2      	cmp	r2, r4
 8005e76:	d01d      	beq.n	8005eb4 <tcp_abandon+0x80>
 8005e78:	4613      	mov	r3, r2
 8005e7a:	e7f9      	b.n	8005e70 <tcp_abandon+0x3c>
  LWIP_ERROR("tcp_abandon: invalid pcb", pcb != NULL, return);
 8005e7c:	4b29      	ldr	r3, [pc, #164]	; (8005f24 <tcp_abandon+0xf0>)
 8005e7e:	f240 223d 	movw	r2, #573	; 0x23d
 8005e82:	4929      	ldr	r1, [pc, #164]	; (8005f28 <tcp_abandon+0xf4>)
 8005e84:	4829      	ldr	r0, [pc, #164]	; (8005f2c <tcp_abandon+0xf8>)
 8005e86:	f005 fad7 	bl	800b438 <iprintf>
 8005e8a:	e02d      	b.n	8005ee8 <tcp_abandon+0xb4>
  LWIP_ASSERT("don't call tcp_abort/tcp_abandon for listen-pcbs",
 8005e8c:	4b25      	ldr	r3, [pc, #148]	; (8005f24 <tcp_abandon+0xf0>)
 8005e8e:	f44f 7210 	mov.w	r2, #576	; 0x240
 8005e92:	4927      	ldr	r1, [pc, #156]	; (8005f30 <tcp_abandon+0xfc>)
 8005e94:	4825      	ldr	r0, [pc, #148]	; (8005f2c <tcp_abandon+0xf8>)
 8005e96:	f005 facf 	bl	800b438 <iprintf>
 8005e9a:	e7d4      	b.n	8005e46 <tcp_abandon+0x12>
    tcp_pcb_remove(&tcp_tw_pcbs, pcb);
 8005e9c:	4621      	mov	r1, r4
 8005e9e:	4825      	ldr	r0, [pc, #148]	; (8005f34 <tcp_abandon+0x100>)
 8005ea0:	f7ff ff60 	bl	8005d64 <tcp_pcb_remove>
    tcp_free(pcb);
 8005ea4:	4620      	mov	r0, r4
 8005ea6:	f7ff fcbb 	bl	8005820 <tcp_free>
 8005eaa:	e01d      	b.n	8005ee8 <tcp_abandon+0xb4>
        TCP_RMV(&tcp_bound_pcbs, pcb);
 8005eac:	68e2      	ldr	r2, [r4, #12]
 8005eae:	4b1c      	ldr	r3, [pc, #112]	; (8005f20 <tcp_abandon+0xec>)
 8005eb0:	601a      	str	r2, [r3, #0]
 8005eb2:	e001      	b.n	8005eb8 <tcp_abandon+0x84>
 8005eb4:	68e2      	ldr	r2, [r4, #12]
 8005eb6:	60da      	str	r2, [r3, #12]
 8005eb8:	2500      	movs	r5, #0
 8005eba:	60e5      	str	r5, [r4, #12]
    u16_t local_port = 0;
 8005ebc:	46aa      	mov	sl, r5
    if (pcb->unacked != NULL) {
 8005ebe:	6f20      	ldr	r0, [r4, #112]	; 0x70
 8005ec0:	b108      	cbz	r0, 8005ec6 <tcp_abandon+0x92>
      tcp_segs_free(pcb->unacked);
 8005ec2:	f7ff fe1c 	bl	8005afe <tcp_segs_free>
    if (pcb->unsent != NULL) {
 8005ec6:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
 8005ec8:	b108      	cbz	r0, 8005ece <tcp_abandon+0x9a>
      tcp_segs_free(pcb->unsent);
 8005eca:	f7ff fe18 	bl	8005afe <tcp_segs_free>
    if (pcb->ooseq != NULL) {
 8005ece:	6f60      	ldr	r0, [r4, #116]	; 0x74
 8005ed0:	b108      	cbz	r0, 8005ed6 <tcp_abandon+0xa2>
      tcp_segs_free(pcb->ooseq);
 8005ed2:	f7ff fe14 	bl	8005afe <tcp_segs_free>
    if (send_rst) {
 8005ed6:	b9b5      	cbnz	r5, 8005f06 <tcp_abandon+0xd2>
    tcp_free(pcb);
 8005ed8:	4620      	mov	r0, r4
 8005eda:	f7ff fca1 	bl	8005820 <tcp_free>
    TCP_EVENT_ERR(last_state, errf, errf_arg, ERR_ABRT);
 8005ede:	b11e      	cbz	r6, 8005ee8 <tcp_abandon+0xb4>
 8005ee0:	f06f 010c 	mvn.w	r1, #12
 8005ee4:	4638      	mov	r0, r7
 8005ee6:	47b0      	blx	r6
}
 8005ee8:	b004      	add	sp, #16
 8005eea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      local_port = pcb->local_port;
 8005eee:	f8b4 a016 	ldrh.w	sl, [r4, #22]
      TCP_PCB_REMOVE_ACTIVE(pcb);
 8005ef2:	4621      	mov	r1, r4
 8005ef4:	4810      	ldr	r0, [pc, #64]	; (8005f38 <tcp_abandon+0x104>)
 8005ef6:	f7ff ff35 	bl	8005d64 <tcp_pcb_remove>
 8005efa:	4b10      	ldr	r3, [pc, #64]	; (8005f3c <tcp_abandon+0x108>)
 8005efc:	2201      	movs	r2, #1
 8005efe:	701a      	strb	r2, [r3, #0]
 8005f00:	e7dd      	b.n	8005ebe <tcp_abandon+0x8a>
    int send_rst = 0;
 8005f02:	2500      	movs	r5, #0
 8005f04:	e7db      	b.n	8005ebe <tcp_abandon+0x8a>
      tcp_rst(pcb, seqno, ackno, &pcb->local_ip, &pcb->remote_ip, local_port, pcb->remote_port);
 8005f06:	8b23      	ldrh	r3, [r4, #24]
 8005f08:	9302      	str	r3, [sp, #8]
 8005f0a:	f8cd a004 	str.w	sl, [sp, #4]
 8005f0e:	1d23      	adds	r3, r4, #4
 8005f10:	9300      	str	r3, [sp, #0]
 8005f12:	4623      	mov	r3, r4
 8005f14:	464a      	mov	r2, r9
 8005f16:	4641      	mov	r1, r8
 8005f18:	4620      	mov	r0, r4
 8005f1a:	f003 f90f 	bl	800913c <tcp_rst>
 8005f1e:	e7db      	b.n	8005ed8 <tcp_abandon+0xa4>
 8005f20:	2000ae60 	.word	0x2000ae60
 8005f24:	08010de4 	.word	0x08010de4
 8005f28:	0801112c 	.word	0x0801112c
 8005f2c:	0800cb24 	.word	0x0800cb24
 8005f30:	08011148 	.word	0x08011148
 8005f34:	2000ae70 	.word	0x2000ae70
 8005f38:	2000ae58 	.word	0x2000ae58
 8005f3c:	2000ae5c 	.word	0x2000ae5c

08005f40 <tcp_abort>:
{
 8005f40:	b508      	push	{r3, lr}
  tcp_abandon(pcb, 1);
 8005f42:	2101      	movs	r1, #1
 8005f44:	f7ff ff76 	bl	8005e34 <tcp_abandon>
}
 8005f48:	bd08      	pop	{r3, pc}
	...

08005f4c <tcp_accept_null>:
{
 8005f4c:	b510      	push	{r4, lr}
  LWIP_ASSERT("tcp_accept_null: invalid pcb", pcb != NULL);
 8005f4e:	460c      	mov	r4, r1
 8005f50:	b129      	cbz	r1, 8005f5e <tcp_accept_null+0x12>
  tcp_abort(pcb);
 8005f52:	4620      	mov	r0, r4
 8005f54:	f7ff fff4 	bl	8005f40 <tcp_abort>
}
 8005f58:	f06f 000c 	mvn.w	r0, #12
 8005f5c:	bd10      	pop	{r4, pc}
  LWIP_ASSERT("tcp_accept_null: invalid pcb", pcb != NULL);
 8005f5e:	4b04      	ldr	r3, [pc, #16]	; (8005f70 <tcp_accept_null+0x24>)
 8005f60:	f240 320f 	movw	r2, #783	; 0x30f
 8005f64:	4903      	ldr	r1, [pc, #12]	; (8005f74 <tcp_accept_null+0x28>)
 8005f66:	4804      	ldr	r0, [pc, #16]	; (8005f78 <tcp_accept_null+0x2c>)
 8005f68:	f005 fa66 	bl	800b438 <iprintf>
 8005f6c:	e7f1      	b.n	8005f52 <tcp_accept_null+0x6>
 8005f6e:	bf00      	nop
 8005f70:	08010de4 	.word	0x08010de4
 8005f74:	0801117c 	.word	0x0801117c
 8005f78:	0800cb24 	.word	0x0800cb24

08005f7c <tcp_netif_ip_addr_changed_pcblist>:
{
 8005f7c:	b570      	push	{r4, r5, r6, lr}
 8005f7e:	460c      	mov	r4, r1
  LWIP_ASSERT("tcp_netif_ip_addr_changed_pcblist: invalid old_addr", old_addr != NULL);
 8005f80:	4605      	mov	r5, r0
 8005f82:	b108      	cbz	r0, 8005f88 <tcp_netif_ip_addr_changed_pcblist+0xc>
  while (pcb != NULL) {
 8005f84:	b97c      	cbnz	r4, 8005fa6 <tcp_netif_ip_addr_changed_pcblist+0x2a>
}
 8005f86:	bd70      	pop	{r4, r5, r6, pc}
  LWIP_ASSERT("tcp_netif_ip_addr_changed_pcblist: invalid old_addr", old_addr != NULL);
 8005f88:	4b0a      	ldr	r3, [pc, #40]	; (8005fb4 <tcp_netif_ip_addr_changed_pcblist+0x38>)
 8005f8a:	f44f 6210 	mov.w	r2, #2304	; 0x900
 8005f8e:	490a      	ldr	r1, [pc, #40]	; (8005fb8 <tcp_netif_ip_addr_changed_pcblist+0x3c>)
 8005f90:	480a      	ldr	r0, [pc, #40]	; (8005fbc <tcp_netif_ip_addr_changed_pcblist+0x40>)
 8005f92:	f005 fa51 	bl	800b438 <iprintf>
 8005f96:	e7f5      	b.n	8005f84 <tcp_netif_ip_addr_changed_pcblist+0x8>
      struct tcp_pcb *next = pcb->next;
 8005f98:	68e6      	ldr	r6, [r4, #12]
      tcp_abort(pcb);
 8005f9a:	4620      	mov	r0, r4
 8005f9c:	f7ff ffd0 	bl	8005f40 <tcp_abort>
      pcb = next;
 8005fa0:	4634      	mov	r4, r6
  while (pcb != NULL) {
 8005fa2:	2c00      	cmp	r4, #0
 8005fa4:	d0ef      	beq.n	8005f86 <tcp_netif_ip_addr_changed_pcblist+0xa>
    if (ip_addr_cmp(&pcb->local_ip, old_addr)
 8005fa6:	6822      	ldr	r2, [r4, #0]
 8005fa8:	682b      	ldr	r3, [r5, #0]
 8005faa:	429a      	cmp	r2, r3
 8005fac:	d0f4      	beq.n	8005f98 <tcp_netif_ip_addr_changed_pcblist+0x1c>
      pcb = pcb->next;
 8005fae:	68e4      	ldr	r4, [r4, #12]
 8005fb0:	e7f7      	b.n	8005fa2 <tcp_netif_ip_addr_changed_pcblist+0x26>
 8005fb2:	bf00      	nop
 8005fb4:	08010de4 	.word	0x08010de4
 8005fb8:	0801119c 	.word	0x0801119c
 8005fbc:	0800cb24 	.word	0x0800cb24

08005fc0 <tcp_netif_ip_addr_changed>:
  if (!ip_addr_isany(old_addr)) {
 8005fc0:	b308      	cbz	r0, 8006006 <tcp_netif_ip_addr_changed+0x46>
{
 8005fc2:	b538      	push	{r3, r4, r5, lr}
 8005fc4:	460d      	mov	r5, r1
 8005fc6:	4604      	mov	r4, r0
  if (!ip_addr_isany(old_addr)) {
 8005fc8:	6803      	ldr	r3, [r0, #0]
 8005fca:	b903      	cbnz	r3, 8005fce <tcp_netif_ip_addr_changed+0xe>
}
 8005fcc:	bd38      	pop	{r3, r4, r5, pc}
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_active_pcbs);
 8005fce:	4b0e      	ldr	r3, [pc, #56]	; (8006008 <tcp_netif_ip_addr_changed+0x48>)
 8005fd0:	6819      	ldr	r1, [r3, #0]
 8005fd2:	f7ff ffd3 	bl	8005f7c <tcp_netif_ip_addr_changed_pcblist>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_bound_pcbs);
 8005fd6:	4b0d      	ldr	r3, [pc, #52]	; (800600c <tcp_netif_ip_addr_changed+0x4c>)
 8005fd8:	6819      	ldr	r1, [r3, #0]
 8005fda:	4620      	mov	r0, r4
 8005fdc:	f7ff ffce 	bl	8005f7c <tcp_netif_ip_addr_changed_pcblist>
    if (!ip_addr_isany(new_addr)) {
 8005fe0:	2d00      	cmp	r5, #0
 8005fe2:	d0f3      	beq.n	8005fcc <tcp_netif_ip_addr_changed+0xc>
 8005fe4:	682b      	ldr	r3, [r5, #0]
 8005fe6:	2b00      	cmp	r3, #0
 8005fe8:	d0f0      	beq.n	8005fcc <tcp_netif_ip_addr_changed+0xc>
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 8005fea:	4b09      	ldr	r3, [pc, #36]	; (8006010 <tcp_netif_ip_addr_changed+0x50>)
 8005fec:	681b      	ldr	r3, [r3, #0]
 8005fee:	2b00      	cmp	r3, #0
 8005ff0:	d0ec      	beq.n	8005fcc <tcp_netif_ip_addr_changed+0xc>
        if (ip_addr_cmp(&lpcb->local_ip, old_addr)) {
 8005ff2:	6819      	ldr	r1, [r3, #0]
 8005ff4:	6822      	ldr	r2, [r4, #0]
 8005ff6:	4291      	cmp	r1, r2
          ip_addr_copy(lpcb->local_ip, *new_addr);
 8005ff8:	bf04      	itt	eq
 8005ffa:	682a      	ldreq	r2, [r5, #0]
 8005ffc:	601a      	streq	r2, [r3, #0]
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 8005ffe:	68db      	ldr	r3, [r3, #12]
 8006000:	2b00      	cmp	r3, #0
 8006002:	d1f6      	bne.n	8005ff2 <tcp_netif_ip_addr_changed+0x32>
 8006004:	e7e2      	b.n	8005fcc <tcp_netif_ip_addr_changed+0xc>
 8006006:	4770      	bx	lr
 8006008:	2000ae58 	.word	0x2000ae58
 800600c:	2000ae60 	.word	0x2000ae60
 8006010:	2000ae64 	.word	0x2000ae64

08006014 <tcp_kill_state>:
{
 8006014:	b538      	push	{r3, r4, r5, lr}
 8006016:	4604      	mov	r4, r0
  LWIP_ASSERT("invalid state", (state == CLOSING) || (state == LAST_ACK));
 8006018:	f1a0 0308 	sub.w	r3, r0, #8
 800601c:	b2db      	uxtb	r3, r3
 800601e:	2b01      	cmp	r3, #1
 8006020:	d807      	bhi.n	8006032 <tcp_kill_state+0x1e>
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8006022:	4b10      	ldr	r3, [pc, #64]	; (8006064 <tcp_kill_state+0x50>)
 8006024:	681b      	ldr	r3, [r3, #0]
 8006026:	b1e3      	cbz	r3, 8006062 <tcp_kill_state+0x4e>
      if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 8006028:	4a0f      	ldr	r2, [pc, #60]	; (8006068 <tcp_kill_state+0x54>)
 800602a:	6815      	ldr	r5, [r2, #0]
  inactivity = 0;
 800602c:	2100      	movs	r1, #0
  inactive = NULL;
 800602e:	4608      	mov	r0, r1
 8006030:	e009      	b.n	8006046 <tcp_kill_state+0x32>
  LWIP_ASSERT("invalid state", (state == CLOSING) || (state == LAST_ACK));
 8006032:	4b0e      	ldr	r3, [pc, #56]	; (800606c <tcp_kill_state+0x58>)
 8006034:	f240 62dd 	movw	r2, #1757	; 0x6dd
 8006038:	490d      	ldr	r1, [pc, #52]	; (8006070 <tcp_kill_state+0x5c>)
 800603a:	480e      	ldr	r0, [pc, #56]	; (8006074 <tcp_kill_state+0x60>)
 800603c:	f005 f9fc 	bl	800b438 <iprintf>
 8006040:	e7ef      	b.n	8006022 <tcp_kill_state+0xe>
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8006042:	68db      	ldr	r3, [r3, #12]
 8006044:	b14b      	cbz	r3, 800605a <tcp_kill_state+0x46>
    if (pcb->state == state) {
 8006046:	7d1a      	ldrb	r2, [r3, #20]
 8006048:	42a2      	cmp	r2, r4
 800604a:	d1fa      	bne.n	8006042 <tcp_kill_state+0x2e>
      if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 800604c:	6a1a      	ldr	r2, [r3, #32]
 800604e:	1aaa      	subs	r2, r5, r2
 8006050:	428a      	cmp	r2, r1
        inactivity = tcp_ticks - pcb->tmr;
 8006052:	bf24      	itt	cs
 8006054:	4611      	movcs	r1, r2
      if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 8006056:	4618      	movcs	r0, r3
 8006058:	e7f3      	b.n	8006042 <tcp_kill_state+0x2e>
  if (inactive != NULL) {
 800605a:	b110      	cbz	r0, 8006062 <tcp_kill_state+0x4e>
    tcp_abandon(inactive, 0);
 800605c:	2100      	movs	r1, #0
 800605e:	f7ff fee9 	bl	8005e34 <tcp_abandon>
}
 8006062:	bd38      	pop	{r3, r4, r5, pc}
 8006064:	2000ae58 	.word	0x2000ae58
 8006068:	2000ae68 	.word	0x2000ae68
 800606c:	08010de4 	.word	0x08010de4
 8006070:	080111d0 	.word	0x080111d0
 8006074:	0800cb24 	.word	0x0800cb24

08006078 <tcp_alloc>:
{
 8006078:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800607a:	4606      	mov	r6, r0
  pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800607c:	2001      	movs	r0, #1
 800607e:	f7fe fda5 	bl	8004bcc <memp_malloc>
  if (pcb == NULL) {
 8006082:	4604      	mov	r4, r0
 8006084:	b360      	cbz	r0, 80060e0 <tcp_alloc+0x68>
    memset(pcb, 0, sizeof(struct tcp_pcb));
 8006086:	229c      	movs	r2, #156	; 0x9c
 8006088:	2100      	movs	r1, #0
 800608a:	4620      	mov	r0, r4
 800608c:	f005 f9cc 	bl	800b428 <memset>
    pcb->prio = prio;
 8006090:	7566      	strb	r6, [r4, #21]
    pcb->snd_buf = TCP_SND_BUF;
 8006092:	f44f 6386 	mov.w	r3, #1072	; 0x430
 8006096:	f8a4 3064 	strh.w	r3, [r4, #100]	; 0x64
    pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
 800609a:	f44f 6206 	mov.w	r2, #2144	; 0x860
 800609e:	8562      	strh	r2, [r4, #42]	; 0x2a
 80060a0:	8522      	strh	r2, [r4, #40]	; 0x28
    pcb->ttl = TCP_TTL;
 80060a2:	22ff      	movs	r2, #255	; 0xff
 80060a4:	72e2      	strb	r2, [r4, #11]
    pcb->mss = INITIAL_MSS;
 80060a6:	f44f 7206 	mov.w	r2, #536	; 0x218
 80060aa:	8662      	strh	r2, [r4, #50]	; 0x32
    pcb->rto = 3000 / TCP_SLOW_INTERVAL;
 80060ac:	2206      	movs	r2, #6
 80060ae:	f8a4 2040 	strh.w	r2, [r4, #64]	; 0x40
    pcb->sv = 3000 / TCP_SLOW_INTERVAL;
 80060b2:	87e2      	strh	r2, [r4, #62]	; 0x3e
    pcb->rtime = -1;
 80060b4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80060b8:	8622      	strh	r2, [r4, #48]	; 0x30
    pcb->cwnd = 1;
 80060ba:	2201      	movs	r2, #1
 80060bc:	f8a4 2048 	strh.w	r2, [r4, #72]	; 0x48
    pcb->tmr = tcp_ticks;
 80060c0:	4a3b      	ldr	r2, [pc, #236]	; (80061b0 <tcp_alloc+0x138>)
 80060c2:	6812      	ldr	r2, [r2, #0]
 80060c4:	6222      	str	r2, [r4, #32]
    pcb->last_timer = tcp_timer_ctr;
 80060c6:	4a3b      	ldr	r2, [pc, #236]	; (80061b4 <tcp_alloc+0x13c>)
 80060c8:	7812      	ldrb	r2, [r2, #0]
 80060ca:	77a2      	strb	r2, [r4, #30]
    pcb->ssthresh = TCP_SND_BUF;
 80060cc:	f8a4 304a 	strh.w	r3, [r4, #74]	; 0x4a
    pcb->recv = tcp_recv_null;
 80060d0:	4b39      	ldr	r3, [pc, #228]	; (80061b8 <tcp_alloc+0x140>)
 80060d2:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
    pcb->keep_idle  = TCP_KEEPIDLE_DEFAULT;
 80060d6:	4b39      	ldr	r3, [pc, #228]	; (80061bc <tcp_alloc+0x144>)
 80060d8:	f8c4 3094 	str.w	r3, [r4, #148]	; 0x94
}
 80060dc:	4620      	mov	r0, r4
 80060de:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  struct tcp_pcb *pcb = tcp_active_pcbs;
 80060e0:	4b37      	ldr	r3, [pc, #220]	; (80061c0 <tcp_alloc+0x148>)
 80060e2:	681d      	ldr	r5, [r3, #0]
  while (pcb != NULL) {
 80060e4:	2d00      	cmp	r5, #0
 80060e6:	d132      	bne.n	800614e <tcp_alloc+0xd6>
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 80060e8:	4b36      	ldr	r3, [pc, #216]	; (80061c4 <tcp_alloc+0x14c>)
 80060ea:	681b      	ldr	r3, [r3, #0]
 80060ec:	b17b      	cbz	r3, 800610e <tcp_alloc+0x96>
    if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 80060ee:	4a30      	ldr	r2, [pc, #192]	; (80061b0 <tcp_alloc+0x138>)
 80060f0:	6810      	ldr	r0, [r2, #0]
  inactivity = 0;
 80060f2:	2100      	movs	r1, #0
    if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 80060f4:	6a1a      	ldr	r2, [r3, #32]
 80060f6:	1a82      	subs	r2, r0, r2
 80060f8:	428a      	cmp	r2, r1
      inactivity = tcp_ticks - pcb->tmr;
 80060fa:	bf24      	itt	cs
 80060fc:	4611      	movcs	r1, r2
    if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 80060fe:	461c      	movcs	r4, r3
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8006100:	68db      	ldr	r3, [r3, #12]
 8006102:	2b00      	cmp	r3, #0
 8006104:	d1f6      	bne.n	80060f4 <tcp_alloc+0x7c>
  if (inactive != NULL) {
 8006106:	b114      	cbz	r4, 800610e <tcp_alloc+0x96>
    tcp_abort(inactive);
 8006108:	4620      	mov	r0, r4
 800610a:	f7ff ff19 	bl	8005f40 <tcp_abort>
    pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800610e:	2001      	movs	r0, #1
 8006110:	f7fe fd5c 	bl	8004bcc <memp_malloc>
    if (pcb == NULL) {
 8006114:	4604      	mov	r4, r0
 8006116:	2800      	cmp	r0, #0
 8006118:	d1b5      	bne.n	8006086 <tcp_alloc+0xe>
      tcp_kill_state(LAST_ACK);
 800611a:	2009      	movs	r0, #9
 800611c:	f7ff ff7a 	bl	8006014 <tcp_kill_state>
      pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8006120:	2001      	movs	r0, #1
 8006122:	f7fe fd53 	bl	8004bcc <memp_malloc>
      if (pcb == NULL) {
 8006126:	4604      	mov	r4, r0
 8006128:	2800      	cmp	r0, #0
 800612a:	d1ac      	bne.n	8006086 <tcp_alloc+0xe>
        tcp_kill_state(CLOSING);
 800612c:	2008      	movs	r0, #8
 800612e:	f7ff ff71 	bl	8006014 <tcp_kill_state>
        pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8006132:	2001      	movs	r0, #1
 8006134:	f7fe fd4a 	bl	8004bcc <memp_malloc>
        if (pcb == NULL) {
 8006138:	4604      	mov	r4, r0
 800613a:	2800      	cmp	r0, #0
 800613c:	d1a3      	bne.n	8006086 <tcp_alloc+0xe>
  mprio = LWIP_MIN(TCP_PRIO_MAX, prio);
 800613e:	f016 0f80 	tst.w	r6, #128	; 0x80
 8006142:	d110      	bne.n	8006166 <tcp_alloc+0xee>
  if (mprio == 0) {
 8006144:	b36e      	cbz	r6, 80061a2 <tcp_alloc+0x12a>
  mprio = LWIP_MIN(TCP_PRIO_MAX, prio);
 8006146:	4633      	mov	r3, r6
 8006148:	e00e      	b.n	8006168 <tcp_alloc+0xf0>
  while (pcb != NULL) {
 800614a:	2d00      	cmp	r5, #0
 800614c:	d0cc      	beq.n	80060e8 <tcp_alloc+0x70>
    struct tcp_pcb *next = pcb->next;
 800614e:	4628      	mov	r0, r5
 8006150:	68ed      	ldr	r5, [r5, #12]
    if (pcb->flags & TF_CLOSEPEND) {
 8006152:	8b43      	ldrh	r3, [r0, #26]
 8006154:	f013 0f08 	tst.w	r3, #8
 8006158:	d0f7      	beq.n	800614a <tcp_alloc+0xd2>
      tcp_clear_flags(pcb, TF_CLOSEPEND);
 800615a:	f023 0308 	bic.w	r3, r3, #8
 800615e:	8343      	strh	r3, [r0, #26]
      tcp_close_shutdown_fin(pcb);
 8006160:	f7ff fb16 	bl	8005790 <tcp_close_shutdown_fin>
 8006164:	e7f1      	b.n	800614a <tcp_alloc+0xd2>
  mprio = LWIP_MIN(TCP_PRIO_MAX, prio);
 8006166:	237f      	movs	r3, #127	; 0x7f
  mprio--;
 8006168:	3b01      	subs	r3, #1
 800616a:	b2da      	uxtb	r2, r3
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800616c:	4b14      	ldr	r3, [pc, #80]	; (80061c0 <tcp_alloc+0x148>)
 800616e:	681b      	ldr	r3, [r3, #0]
 8006170:	b1bb      	cbz	r3, 80061a2 <tcp_alloc+0x12a>
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 8006172:	490f      	ldr	r1, [pc, #60]	; (80061b0 <tcp_alloc+0x138>)
 8006174:	680d      	ldr	r5, [r1, #0]
  inactivity = 0;
 8006176:	2000      	movs	r0, #0
 8006178:	e005      	b.n	8006186 <tcp_alloc+0x10e>
      inactivity = tcp_ticks - pcb->tmr;
 800617a:	6a1a      	ldr	r2, [r3, #32]
 800617c:	1aa8      	subs	r0, r5, r2
      mprio      = pcb->prio;
 800617e:	460a      	mov	r2, r1
      inactivity = tcp_ticks - pcb->tmr;
 8006180:	461c      	mov	r4, r3
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8006182:	68db      	ldr	r3, [r3, #12]
 8006184:	b14b      	cbz	r3, 800619a <tcp_alloc+0x122>
    if ((pcb->prio < mprio) ||
 8006186:	7d59      	ldrb	r1, [r3, #21]
 8006188:	4291      	cmp	r1, r2
 800618a:	d3f6      	bcc.n	800617a <tcp_alloc+0x102>
 800618c:	d1f9      	bne.n	8006182 <tcp_alloc+0x10a>
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 800618e:	6a1f      	ldr	r7, [r3, #32]
 8006190:	eba5 0c07 	sub.w	ip, r5, r7
 8006194:	4584      	cmp	ip, r0
 8006196:	d3f4      	bcc.n	8006182 <tcp_alloc+0x10a>
 8006198:	e7ef      	b.n	800617a <tcp_alloc+0x102>
  if (inactive != NULL) {
 800619a:	b114      	cbz	r4, 80061a2 <tcp_alloc+0x12a>
    tcp_abort(inactive);
 800619c:	4620      	mov	r0, r4
 800619e:	f7ff fecf 	bl	8005f40 <tcp_abort>
          pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 80061a2:	2001      	movs	r0, #1
 80061a4:	f7fe fd12 	bl	8004bcc <memp_malloc>
  if (pcb != NULL) {
 80061a8:	4604      	mov	r4, r0
 80061aa:	2800      	cmp	r0, #0
 80061ac:	d096      	beq.n	80060dc <tcp_alloc+0x64>
 80061ae:	e76a      	b.n	8006086 <tcp_alloc+0xe>
 80061b0:	2000ae68 	.word	0x2000ae68
 80061b4:	2000ae6d 	.word	0x2000ae6d
 80061b8:	0800639d 	.word	0x0800639d
 80061bc:	006ddd00 	.word	0x006ddd00
 80061c0:	2000ae58 	.word	0x2000ae58
 80061c4:	2000ae70 	.word	0x2000ae70

080061c8 <tcp_new_ip_type>:
{
 80061c8:	b508      	push	{r3, lr}
  pcb = tcp_alloc(TCP_PRIO_NORMAL);
 80061ca:	2040      	movs	r0, #64	; 0x40
 80061cc:	f7ff ff54 	bl	8006078 <tcp_alloc>
}
 80061d0:	bd08      	pop	{r3, pc}
	...

080061d4 <tcp_close_shutdown>:
{
 80061d4:	b530      	push	{r4, r5, lr}
 80061d6:	b085      	sub	sp, #20
 80061d8:	460d      	mov	r5, r1
  LWIP_ASSERT("tcp_close_shutdown: invalid pcb", pcb != NULL);
 80061da:	4604      	mov	r4, r0
 80061dc:	b188      	cbz	r0, 8006202 <tcp_close_shutdown+0x2e>
  if (rst_on_unacked_data && ((pcb->state == ESTABLISHED) || (pcb->state == CLOSE_WAIT))) {
 80061de:	b125      	cbz	r5, 80061ea <tcp_close_shutdown+0x16>
 80061e0:	7d23      	ldrb	r3, [r4, #20]
 80061e2:	2b04      	cmp	r3, #4
 80061e4:	d015      	beq.n	8006212 <tcp_close_shutdown+0x3e>
 80061e6:	2b07      	cmp	r3, #7
 80061e8:	d013      	beq.n	8006212 <tcp_close_shutdown+0x3e>
  switch (pcb->state) {
 80061ea:	7d23      	ldrb	r3, [r4, #20]
 80061ec:	2b01      	cmp	r3, #1
 80061ee:	d06d      	beq.n	80062cc <tcp_close_shutdown+0xf8>
 80061f0:	2b02      	cmp	r3, #2
 80061f2:	f000 8091 	beq.w	8006318 <tcp_close_shutdown+0x144>
 80061f6:	2b00      	cmp	r3, #0
 80061f8:	d04f      	beq.n	800629a <tcp_close_shutdown+0xc6>
      return tcp_close_shutdown_fin(pcb);
 80061fa:	4620      	mov	r0, r4
 80061fc:	f7ff fac8 	bl	8005790 <tcp_close_shutdown_fin>
 8006200:	e081      	b.n	8006306 <tcp_close_shutdown+0x132>
  LWIP_ASSERT("tcp_close_shutdown: invalid pcb", pcb != NULL);
 8006202:	4b4b      	ldr	r3, [pc, #300]	; (8006330 <tcp_close_shutdown+0x15c>)
 8006204:	f44f 72af 	mov.w	r2, #350	; 0x15e
 8006208:	494a      	ldr	r1, [pc, #296]	; (8006334 <tcp_close_shutdown+0x160>)
 800620a:	484b      	ldr	r0, [pc, #300]	; (8006338 <tcp_close_shutdown+0x164>)
 800620c:	f005 f914 	bl	800b438 <iprintf>
 8006210:	e7e5      	b.n	80061de <tcp_close_shutdown+0xa>
    if ((pcb->refused_data != NULL) || (pcb->rcv_wnd != TCP_WND_MAX(pcb))) {
 8006212:	6fa3      	ldr	r3, [r4, #120]	; 0x78
 8006214:	b1e3      	cbz	r3, 8006250 <tcp_close_shutdown+0x7c>
      LWIP_ASSERT("pcb->flags & TF_RXCLOSED", pcb->flags & TF_RXCLOSED);
 8006216:	8b63      	ldrh	r3, [r4, #26]
 8006218:	f013 0f10 	tst.w	r3, #16
 800621c:	d01d      	beq.n	800625a <tcp_close_shutdown+0x86>
      tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 800621e:	8b23      	ldrh	r3, [r4, #24]
 8006220:	9302      	str	r3, [sp, #8]
 8006222:	8ae3      	ldrh	r3, [r4, #22]
 8006224:	9301      	str	r3, [sp, #4]
 8006226:	1d23      	adds	r3, r4, #4
 8006228:	9300      	str	r3, [sp, #0]
 800622a:	4623      	mov	r3, r4
 800622c:	6a62      	ldr	r2, [r4, #36]	; 0x24
 800622e:	6d21      	ldr	r1, [r4, #80]	; 0x50
 8006230:	4620      	mov	r0, r4
 8006232:	f002 ff83 	bl	800913c <tcp_rst>
      tcp_pcb_purge(pcb);
 8006236:	4620      	mov	r0, r4
 8006238:	f7ff fd64 	bl	8005d04 <tcp_pcb_purge>
      TCP_RMV_ACTIVE(pcb);
 800623c:	4b3f      	ldr	r3, [pc, #252]	; (800633c <tcp_close_shutdown+0x168>)
 800623e:	681b      	ldr	r3, [r3, #0]
 8006240:	42a3      	cmp	r3, r4
 8006242:	d012      	beq.n	800626a <tcp_close_shutdown+0x96>
 8006244:	b1bb      	cbz	r3, 8006276 <tcp_close_shutdown+0xa2>
 8006246:	68da      	ldr	r2, [r3, #12]
 8006248:	42a2      	cmp	r2, r4
 800624a:	d012      	beq.n	8006272 <tcp_close_shutdown+0x9e>
 800624c:	4613      	mov	r3, r2
 800624e:	e7f9      	b.n	8006244 <tcp_close_shutdown+0x70>
    if ((pcb->refused_data != NULL) || (pcb->rcv_wnd != TCP_WND_MAX(pcb))) {
 8006250:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8006252:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 8006256:	d0c8      	beq.n	80061ea <tcp_close_shutdown+0x16>
 8006258:	e7dd      	b.n	8006216 <tcp_close_shutdown+0x42>
      LWIP_ASSERT("pcb->flags & TF_RXCLOSED", pcb->flags & TF_RXCLOSED);
 800625a:	4b35      	ldr	r3, [pc, #212]	; (8006330 <tcp_close_shutdown+0x15c>)
 800625c:	f44f 72b2 	mov.w	r2, #356	; 0x164
 8006260:	4937      	ldr	r1, [pc, #220]	; (8006340 <tcp_close_shutdown+0x16c>)
 8006262:	4835      	ldr	r0, [pc, #212]	; (8006338 <tcp_close_shutdown+0x164>)
 8006264:	f005 f8e8 	bl	800b438 <iprintf>
 8006268:	e7d9      	b.n	800621e <tcp_close_shutdown+0x4a>
      TCP_RMV_ACTIVE(pcb);
 800626a:	68e2      	ldr	r2, [r4, #12]
 800626c:	4b33      	ldr	r3, [pc, #204]	; (800633c <tcp_close_shutdown+0x168>)
 800626e:	601a      	str	r2, [r3, #0]
 8006270:	e001      	b.n	8006276 <tcp_close_shutdown+0xa2>
 8006272:	68e2      	ldr	r2, [r4, #12]
 8006274:	60da      	str	r2, [r3, #12]
 8006276:	2300      	movs	r3, #0
 8006278:	60e3      	str	r3, [r4, #12]
 800627a:	4b32      	ldr	r3, [pc, #200]	; (8006344 <tcp_close_shutdown+0x170>)
 800627c:	2201      	movs	r2, #1
 800627e:	701a      	strb	r2, [r3, #0]
      if (tcp_input_pcb == pcb) {
 8006280:	4b31      	ldr	r3, [pc, #196]	; (8006348 <tcp_close_shutdown+0x174>)
 8006282:	681b      	ldr	r3, [r3, #0]
 8006284:	42a3      	cmp	r3, r4
 8006286:	d004      	beq.n	8006292 <tcp_close_shutdown+0xbe>
        tcp_free(pcb);
 8006288:	4620      	mov	r0, r4
 800628a:	f7ff fac9 	bl	8005820 <tcp_free>
      return ERR_OK;
 800628e:	2000      	movs	r0, #0
 8006290:	e039      	b.n	8006306 <tcp_close_shutdown+0x132>
        tcp_trigger_input_pcb_close();
 8006292:	f001 ffcf 	bl	8008234 <tcp_trigger_input_pcb_close>
      return ERR_OK;
 8006296:	2000      	movs	r0, #0
 8006298:	e035      	b.n	8006306 <tcp_close_shutdown+0x132>
      if (pcb->local_port != 0) {
 800629a:	8ae3      	ldrh	r3, [r4, #22]
 800629c:	b18b      	cbz	r3, 80062c2 <tcp_close_shutdown+0xee>
        TCP_RMV(&tcp_bound_pcbs, pcb);
 800629e:	4b2b      	ldr	r3, [pc, #172]	; (800634c <tcp_close_shutdown+0x178>)
 80062a0:	681b      	ldr	r3, [r3, #0]
 80062a2:	42a3      	cmp	r3, r4
 80062a4:	d005      	beq.n	80062b2 <tcp_close_shutdown+0xde>
 80062a6:	b153      	cbz	r3, 80062be <tcp_close_shutdown+0xea>
 80062a8:	68da      	ldr	r2, [r3, #12]
 80062aa:	42a2      	cmp	r2, r4
 80062ac:	d005      	beq.n	80062ba <tcp_close_shutdown+0xe6>
 80062ae:	4613      	mov	r3, r2
 80062b0:	e7f9      	b.n	80062a6 <tcp_close_shutdown+0xd2>
 80062b2:	68e2      	ldr	r2, [r4, #12]
 80062b4:	4b25      	ldr	r3, [pc, #148]	; (800634c <tcp_close_shutdown+0x178>)
 80062b6:	601a      	str	r2, [r3, #0]
 80062b8:	e001      	b.n	80062be <tcp_close_shutdown+0xea>
 80062ba:	68e2      	ldr	r2, [r4, #12]
 80062bc:	60da      	str	r2, [r3, #12]
 80062be:	2300      	movs	r3, #0
 80062c0:	60e3      	str	r3, [r4, #12]
      tcp_free(pcb);
 80062c2:	4620      	mov	r0, r4
 80062c4:	f7ff faac 	bl	8005820 <tcp_free>
  return ERR_OK;
 80062c8:	2000      	movs	r0, #0
      break;
 80062ca:	e01c      	b.n	8006306 <tcp_close_shutdown+0x132>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 80062cc:	4d20      	ldr	r5, [pc, #128]	; (8006350 <tcp_close_shutdown+0x17c>)
 80062ce:	1d29      	adds	r1, r5, #4
 80062d0:	3510      	adds	r5, #16
      pcb->listener = NULL;
 80062d2:	2000      	movs	r0, #0
    tcp_remove_listener(*tcp_pcb_lists[i], (struct tcp_pcb_listen *)pcb);
 80062d4:	f851 3b04 	ldr.w	r3, [r1], #4
 80062d8:	681b      	ldr	r3, [r3, #0]
  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 80062da:	b133      	cbz	r3, 80062ea <tcp_close_shutdown+0x116>
    if (pcb->listener == lpcb) {
 80062dc:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 80062de:	4294      	cmp	r4, r2
      pcb->listener = NULL;
 80062e0:	bf08      	it	eq
 80062e2:	67d8      	streq	r0, [r3, #124]	; 0x7c
  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 80062e4:	68db      	ldr	r3, [r3, #12]
 80062e6:	2b00      	cmp	r3, #0
 80062e8:	d1f8      	bne.n	80062dc <tcp_close_shutdown+0x108>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 80062ea:	428d      	cmp	r5, r1
 80062ec:	d1f2      	bne.n	80062d4 <tcp_close_shutdown+0x100>
      tcp_pcb_remove(&tcp_listen_pcbs.pcbs, pcb);
 80062ee:	4621      	mov	r1, r4
 80062f0:	4818      	ldr	r0, [pc, #96]	; (8006354 <tcp_close_shutdown+0x180>)
 80062f2:	f7ff fd37 	bl	8005d64 <tcp_pcb_remove>
  LWIP_ASSERT("tcp_free_listen: !LISTEN", pcb->state != LISTEN);
 80062f6:	7d23      	ldrb	r3, [r4, #20]
 80062f8:	2b01      	cmp	r3, #1
 80062fa:	d006      	beq.n	800630a <tcp_close_shutdown+0x136>
  memp_free(MEMP_TCP_PCB_LISTEN, pcb);
 80062fc:	4621      	mov	r1, r4
 80062fe:	2002      	movs	r0, #2
 8006300:	f7fe fc94 	bl	8004c2c <memp_free>
  return ERR_OK;
 8006304:	2000      	movs	r0, #0
}
 8006306:	b005      	add	sp, #20
 8006308:	bd30      	pop	{r4, r5, pc}
  LWIP_ASSERT("tcp_free_listen: !LISTEN", pcb->state != LISTEN);
 800630a:	4b09      	ldr	r3, [pc, #36]	; (8006330 <tcp_close_shutdown+0x15c>)
 800630c:	22df      	movs	r2, #223	; 0xdf
 800630e:	4912      	ldr	r1, [pc, #72]	; (8006358 <tcp_close_shutdown+0x184>)
 8006310:	4809      	ldr	r0, [pc, #36]	; (8006338 <tcp_close_shutdown+0x164>)
 8006312:	f005 f891 	bl	800b438 <iprintf>
 8006316:	e7f1      	b.n	80062fc <tcp_close_shutdown+0x128>
      TCP_PCB_REMOVE_ACTIVE(pcb);
 8006318:	4621      	mov	r1, r4
 800631a:	4808      	ldr	r0, [pc, #32]	; (800633c <tcp_close_shutdown+0x168>)
 800631c:	f7ff fd22 	bl	8005d64 <tcp_pcb_remove>
 8006320:	4b08      	ldr	r3, [pc, #32]	; (8006344 <tcp_close_shutdown+0x170>)
 8006322:	2201      	movs	r2, #1
 8006324:	701a      	strb	r2, [r3, #0]
      tcp_free(pcb);
 8006326:	4620      	mov	r0, r4
 8006328:	f7ff fa7a 	bl	8005820 <tcp_free>
  return ERR_OK;
 800632c:	2000      	movs	r0, #0
      break;
 800632e:	e7ea      	b.n	8006306 <tcp_close_shutdown+0x132>
 8006330:	08010de4 	.word	0x08010de4
 8006334:	080111e0 	.word	0x080111e0
 8006338:	0800cb24 	.word	0x0800cb24
 800633c:	2000ae58 	.word	0x2000ae58
 8006340:	08011200 	.word	0x08011200
 8006344:	2000ae5c 	.word	0x2000ae5c
 8006348:	2000ae9c 	.word	0x2000ae9c
 800634c:	2000ae60 	.word	0x2000ae60
 8006350:	08011470 	.word	0x08011470
 8006354:	2000ae64 	.word	0x2000ae64
 8006358:	0801121c 	.word	0x0801121c

0800635c <tcp_close>:
{
 800635c:	b508      	push	{r3, lr}
  LWIP_ERROR("tcp_close: invalid pcb", pcb != NULL, return ERR_ARG);
 800635e:	b160      	cbz	r0, 800637a <tcp_close+0x1e>
 8006360:	4603      	mov	r3, r0
  if (pcb->state != LISTEN) {
 8006362:	7d02      	ldrb	r2, [r0, #20]
 8006364:	2a01      	cmp	r2, #1
 8006366:	d003      	beq.n	8006370 <tcp_close+0x14>
    tcp_set_flags(pcb, TF_RXCLOSED);
 8006368:	8b42      	ldrh	r2, [r0, #26]
 800636a:	f042 0210 	orr.w	r2, r2, #16
 800636e:	8342      	strh	r2, [r0, #26]
  return tcp_close_shutdown(pcb, 1);
 8006370:	2101      	movs	r1, #1
 8006372:	4618      	mov	r0, r3
 8006374:	f7ff ff2e 	bl	80061d4 <tcp_close_shutdown>
}
 8006378:	bd08      	pop	{r3, pc}
  LWIP_ERROR("tcp_close: invalid pcb", pcb != NULL, return ERR_ARG);
 800637a:	4b05      	ldr	r3, [pc, #20]	; (8006390 <tcp_close+0x34>)
 800637c:	f44f 72f4 	mov.w	r2, #488	; 0x1e8
 8006380:	4904      	ldr	r1, [pc, #16]	; (8006394 <tcp_close+0x38>)
 8006382:	4805      	ldr	r0, [pc, #20]	; (8006398 <tcp_close+0x3c>)
 8006384:	f005 f858 	bl	800b438 <iprintf>
 8006388:	f06f 000f 	mvn.w	r0, #15
 800638c:	e7f4      	b.n	8006378 <tcp_close+0x1c>
 800638e:	bf00      	nop
 8006390:	08010de4 	.word	0x08010de4
 8006394:	08011238 	.word	0x08011238
 8006398:	0800cb24 	.word	0x0800cb24

0800639c <tcp_recv_null>:
{
 800639c:	b510      	push	{r4, lr}
  LWIP_ERROR("tcp_recv_null: invalid pcb", pcb != NULL, return ERR_ARG);
 800639e:	b151      	cbz	r1, 80063b6 <tcp_recv_null+0x1a>
 80063a0:	4614      	mov	r4, r2
 80063a2:	4608      	mov	r0, r1
  if (p != NULL) {
 80063a4:	b18a      	cbz	r2, 80063ca <tcp_recv_null+0x2e>
    tcp_recved(pcb, p->tot_len);
 80063a6:	8911      	ldrh	r1, [r2, #8]
 80063a8:	f7ff fb60 	bl	8005a6c <tcp_recved>
    pbuf_free(p);
 80063ac:	4620      	mov	r0, r4
 80063ae:	f7fe fefb 	bl	80051a8 <pbuf_free>
  return ERR_OK;
 80063b2:	2000      	movs	r0, #0
}
 80063b4:	bd10      	pop	{r4, pc}
  LWIP_ERROR("tcp_recv_null: invalid pcb", pcb != NULL, return ERR_ARG);
 80063b6:	4b08      	ldr	r3, [pc, #32]	; (80063d8 <tcp_recv_null+0x3c>)
 80063b8:	f44f 62d3 	mov.w	r2, #1688	; 0x698
 80063bc:	4907      	ldr	r1, [pc, #28]	; (80063dc <tcp_recv_null+0x40>)
 80063be:	4808      	ldr	r0, [pc, #32]	; (80063e0 <tcp_recv_null+0x44>)
 80063c0:	f005 f83a 	bl	800b438 <iprintf>
 80063c4:	f06f 000f 	mvn.w	r0, #15
 80063c8:	e7f4      	b.n	80063b4 <tcp_recv_null+0x18>
  } else if (err == ERR_OK) {
 80063ca:	b10b      	cbz	r3, 80063d0 <tcp_recv_null+0x34>
  return ERR_OK;
 80063cc:	2000      	movs	r0, #0
 80063ce:	e7f1      	b.n	80063b4 <tcp_recv_null+0x18>
    return tcp_close(pcb);
 80063d0:	f7ff ffc4 	bl	800635c <tcp_close>
 80063d4:	e7ee      	b.n	80063b4 <tcp_recv_null+0x18>
 80063d6:	bf00      	nop
 80063d8:	08010de4 	.word	0x08010de4
 80063dc:	08011250 	.word	0x08011250
 80063e0:	0800cb24 	.word	0x0800cb24

080063e4 <tcp_process_refused_data>:
{
 80063e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  LWIP_ERROR("tcp_process_refused_data: invalid pcb", pcb != NULL, return ERR_ARG);
 80063e6:	b318      	cbz	r0, 8006430 <tcp_process_refused_data+0x4c>
 80063e8:	4604      	mov	r4, r0
    u8_t refused_flags = pcb->refused_data->flags;
 80063ea:	6f86      	ldr	r6, [r0, #120]	; 0x78
 80063ec:	7b77      	ldrb	r7, [r6, #13]
    pcb->refused_data = NULL;
 80063ee:	2300      	movs	r3, #0
 80063f0:	6783      	str	r3, [r0, #120]	; 0x78
    TCP_EVENT_RECV(pcb, refused_data, ERR_OK, err);
 80063f2:	f8d0 5084 	ldr.w	r5, [r0, #132]	; 0x84
 80063f6:	b32d      	cbz	r5, 8006444 <tcp_process_refused_data+0x60>
 80063f8:	4632      	mov	r2, r6
 80063fa:	4601      	mov	r1, r0
 80063fc:	6900      	ldr	r0, [r0, #16]
 80063fe:	47a8      	blx	r5
 8006400:	4605      	mov	r5, r0
    if (err == ERR_OK) {
 8006402:	bb3d      	cbnz	r5, 8006454 <tcp_process_refused_data+0x70>
      if ((refused_flags & PBUF_FLAG_TCP_FIN)
 8006404:	f017 0f20 	tst.w	r7, #32
 8006408:	d02a      	beq.n	8006460 <tcp_process_refused_data+0x7c>
        if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 800640a:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 800640c:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
          pcb->rcv_wnd++;
 8006410:	bf1c      	itt	ne
 8006412:	3301      	addne	r3, #1
 8006414:	8523      	strhne	r3, [r4, #40]	; 0x28
        TCP_EVENT_CLOSED(pcb, err);
 8006416:	f8d4 6084 	ldr.w	r6, [r4, #132]	; 0x84
 800641a:	b30e      	cbz	r6, 8006460 <tcp_process_refused_data+0x7c>
 800641c:	2300      	movs	r3, #0
 800641e:	461a      	mov	r2, r3
 8006420:	4621      	mov	r1, r4
 8006422:	6920      	ldr	r0, [r4, #16]
 8006424:	47b0      	blx	r6
          return ERR_ABRT;
 8006426:	f110 0f0d 	cmn.w	r0, #13
 800642a:	bf08      	it	eq
 800642c:	4605      	moveq	r5, r0
 800642e:	e017      	b.n	8006460 <tcp_process_refused_data+0x7c>
  LWIP_ERROR("tcp_process_refused_data: invalid pcb", pcb != NULL, return ERR_ARG);
 8006430:	4b0c      	ldr	r3, [pc, #48]	; (8006464 <tcp_process_refused_data+0x80>)
 8006432:	f240 6209 	movw	r2, #1545	; 0x609
 8006436:	490c      	ldr	r1, [pc, #48]	; (8006468 <tcp_process_refused_data+0x84>)
 8006438:	480c      	ldr	r0, [pc, #48]	; (800646c <tcp_process_refused_data+0x88>)
 800643a:	f004 fffd 	bl	800b438 <iprintf>
 800643e:	f06f 050f 	mvn.w	r5, #15
 8006442:	e00d      	b.n	8006460 <tcp_process_refused_data+0x7c>
    TCP_EVENT_RECV(pcb, refused_data, ERR_OK, err);
 8006444:	2300      	movs	r3, #0
 8006446:	4632      	mov	r2, r6
 8006448:	4601      	mov	r1, r0
 800644a:	4618      	mov	r0, r3
 800644c:	f7ff ffa6 	bl	800639c <tcp_recv_null>
 8006450:	4605      	mov	r5, r0
 8006452:	e7d6      	b.n	8006402 <tcp_process_refused_data+0x1e>
    } else if (err == ERR_ABRT) {
 8006454:	f115 0f0d 	cmn.w	r5, #13
      pcb->refused_data = refused_data;
 8006458:	bf1c      	itt	ne
 800645a:	67a6      	strne	r6, [r4, #120]	; 0x78
      return ERR_INPROGRESS;
 800645c:	f06f 0504 	mvnne.w	r5, #4
}
 8006460:	4628      	mov	r0, r5
 8006462:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006464:	08010de4 	.word	0x08010de4
 8006468:	0801126c 	.word	0x0801126c
 800646c:	0800cb24 	.word	0x0800cb24

08006470 <tcp_fasttmr>:
{
 8006470:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  ++tcp_timer_ctr;
 8006474:	4a1f      	ldr	r2, [pc, #124]	; (80064f4 <tcp_fasttmr+0x84>)
 8006476:	7813      	ldrb	r3, [r2, #0]
 8006478:	3301      	adds	r3, #1
 800647a:	7013      	strb	r3, [r2, #0]
  pcb = tcp_active_pcbs;
 800647c:	f8df 807c 	ldr.w	r8, [pc, #124]	; 80064fc <tcp_fasttmr+0x8c>
        tcp_active_pcbs_changed = 0;
 8006480:	4e1d      	ldr	r6, [pc, #116]	; (80064f8 <tcp_fasttmr+0x88>)
  pcb = tcp_active_pcbs;
 8006482:	f8d8 4000 	ldr.w	r4, [r8]
  while (pcb != NULL) {
 8006486:	2c00      	cmp	r4, #0
 8006488:	d032      	beq.n	80064f0 <tcp_fasttmr+0x80>
    if (pcb->last_timer != tcp_timer_ctr) {
 800648a:	4d1a      	ldr	r5, [pc, #104]	; (80064f4 <tcp_fasttmr+0x84>)
        tcp_active_pcbs_changed = 0;
 800648c:	2700      	movs	r7, #0
 800648e:	e013      	b.n	80064b8 <tcp_fasttmr+0x48>
        tcp_ack_now(pcb);
 8006490:	f043 0302 	orr.w	r3, r3, #2
 8006494:	8363      	strh	r3, [r4, #26]
        tcp_output(pcb);
 8006496:	4620      	mov	r0, r4
 8006498:	f002 fed2 	bl	8009240 <tcp_output>
        tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800649c:	8b63      	ldrh	r3, [r4, #26]
 800649e:	f023 0303 	bic.w	r3, r3, #3
 80064a2:	8363      	strh	r3, [r4, #26]
 80064a4:	e011      	b.n	80064ca <tcp_fasttmr+0x5a>
        tcp_clear_flags(pcb, TF_CLOSEPEND);
 80064a6:	f023 0308 	bic.w	r3, r3, #8
 80064aa:	8363      	strh	r3, [r4, #26]
        tcp_close_shutdown_fin(pcb);
 80064ac:	4620      	mov	r0, r4
 80064ae:	f7ff f96f 	bl	8005790 <tcp_close_shutdown_fin>
 80064b2:	e00e      	b.n	80064d2 <tcp_fasttmr+0x62>
      pcb = pcb->next;
 80064b4:	68e4      	ldr	r4, [r4, #12]
  while (pcb != NULL) {
 80064b6:	b1dc      	cbz	r4, 80064f0 <tcp_fasttmr+0x80>
    if (pcb->last_timer != tcp_timer_ctr) {
 80064b8:	782b      	ldrb	r3, [r5, #0]
 80064ba:	7fa2      	ldrb	r2, [r4, #30]
 80064bc:	429a      	cmp	r2, r3
 80064be:	d0f9      	beq.n	80064b4 <tcp_fasttmr+0x44>
      pcb->last_timer = tcp_timer_ctr;
 80064c0:	77a3      	strb	r3, [r4, #30]
      if (pcb->flags & TF_ACK_DELAY) {
 80064c2:	8b63      	ldrh	r3, [r4, #26]
 80064c4:	f013 0f01 	tst.w	r3, #1
 80064c8:	d1e2      	bne.n	8006490 <tcp_fasttmr+0x20>
      if (pcb->flags & TF_CLOSEPEND) {
 80064ca:	8b63      	ldrh	r3, [r4, #26]
 80064cc:	f013 0f08 	tst.w	r3, #8
 80064d0:	d1e9      	bne.n	80064a6 <tcp_fasttmr+0x36>
      next = pcb->next;
 80064d2:	f8d4 900c 	ldr.w	r9, [r4, #12]
      if (pcb->refused_data != NULL) {
 80064d6:	6fa3      	ldr	r3, [r4, #120]	; 0x78
 80064d8:	b143      	cbz	r3, 80064ec <tcp_fasttmr+0x7c>
        tcp_active_pcbs_changed = 0;
 80064da:	7037      	strb	r7, [r6, #0]
        tcp_process_refused_data(pcb);
 80064dc:	4620      	mov	r0, r4
 80064de:	f7ff ff81 	bl	80063e4 <tcp_process_refused_data>
        if (tcp_active_pcbs_changed) {
 80064e2:	7833      	ldrb	r3, [r6, #0]
 80064e4:	2b00      	cmp	r3, #0
 80064e6:	d1cc      	bne.n	8006482 <tcp_fasttmr+0x12>
      pcb = next;
 80064e8:	464c      	mov	r4, r9
 80064ea:	e7e4      	b.n	80064b6 <tcp_fasttmr+0x46>
 80064ec:	464c      	mov	r4, r9
 80064ee:	e7e2      	b.n	80064b6 <tcp_fasttmr+0x46>
}
 80064f0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80064f4:	2000ae6d 	.word	0x2000ae6d
 80064f8:	2000ae5c 	.word	0x2000ae5c
 80064fc:	2000ae58 	.word	0x2000ae58

08006500 <tcp_slowtmr>:
{
 8006500:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006504:	b085      	sub	sp, #20
  ++tcp_ticks;
 8006506:	4ab4      	ldr	r2, [pc, #720]	; (80067d8 <tcp_slowtmr+0x2d8>)
 8006508:	6813      	ldr	r3, [r2, #0]
 800650a:	3301      	adds	r3, #1
 800650c:	6013      	str	r3, [r2, #0]
  ++tcp_timer_ctr;
 800650e:	4ab3      	ldr	r2, [pc, #716]	; (80067dc <tcp_slowtmr+0x2dc>)
 8006510:	7813      	ldrb	r3, [r2, #0]
 8006512:	3301      	adds	r3, #1
 8006514:	7013      	strb	r3, [r2, #0]
  pcb = tcp_active_pcbs;
 8006516:	f8df a2ec 	ldr.w	sl, [pc, #748]	; 8006804 <tcp_slowtmr+0x304>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != CLOSED\n", pcb->state != CLOSED);
 800651a:	4eb1      	ldr	r6, [pc, #708]	; (80067e0 <tcp_slowtmr+0x2e0>)
          (pcb->keep_idle + TCP_KEEP_DUR(pcb)) / TCP_SLOW_INTERVAL) {
 800651c:	f8df b2e8 	ldr.w	fp, [pc, #744]	; 8006808 <tcp_slowtmr+0x308>
  pcb = tcp_active_pcbs;
 8006520:	f8da 4000 	ldr.w	r4, [sl]
  while (pcb != NULL) {
 8006524:	2c00      	cmp	r4, #0
 8006526:	f000 81f4 	beq.w	8006912 <tcp_slowtmr+0x412>
  prev = NULL;
 800652a:	2500      	movs	r5, #0
 800652c:	e19e      	b.n	800686c <tcp_slowtmr+0x36c>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != CLOSED\n", pcb->state != CLOSED);
 800652e:	4633      	mov	r3, r6
 8006530:	f240 42be 	movw	r2, #1214	; 0x4be
 8006534:	49ab      	ldr	r1, [pc, #684]	; (80067e4 <tcp_slowtmr+0x2e4>)
 8006536:	48ac      	ldr	r0, [pc, #688]	; (80067e8 <tcp_slowtmr+0x2e8>)
 8006538:	f004 ff7e 	bl	800b438 <iprintf>
 800653c:	e19a      	b.n	8006874 <tcp_slowtmr+0x374>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != LISTEN\n", pcb->state != LISTEN);
 800653e:	4633      	mov	r3, r6
 8006540:	f240 42bf 	movw	r2, #1215	; 0x4bf
 8006544:	49a9      	ldr	r1, [pc, #676]	; (80067ec <tcp_slowtmr+0x2ec>)
 8006546:	48a8      	ldr	r0, [pc, #672]	; (80067e8 <tcp_slowtmr+0x2e8>)
 8006548:	f004 ff76 	bl	800b438 <iprintf>
 800654c:	e196      	b.n	800687c <tcp_slowtmr+0x37c>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != TIME-WAIT\n", pcb->state != TIME_WAIT);
 800654e:	4633      	mov	r3, r6
 8006550:	f44f 6298 	mov.w	r2, #1216	; 0x4c0
 8006554:	49a6      	ldr	r1, [pc, #664]	; (80067f0 <tcp_slowtmr+0x2f0>)
 8006556:	48a4      	ldr	r0, [pc, #656]	; (80067e8 <tcp_slowtmr+0x2e8>)
 8006558:	f004 ff6e 	bl	800b438 <iprintf>
 800655c:	e192      	b.n	8006884 <tcp_slowtmr+0x384>
      continue;
 800655e:	4625      	mov	r5, r4
      pcb = pcb->next;
 8006560:	68e4      	ldr	r4, [r4, #12]
      continue;
 8006562:	e181      	b.n	8006868 <tcp_slowtmr+0x368>
    if (pcb->state == SYN_SENT && pcb->nrtx >= TCP_SYNMAXRTX) {
 8006564:	f894 3042 	ldrb.w	r3, [r4, #66]	; 0x42
 8006568:	2b05      	cmp	r3, #5
 800656a:	f240 819b 	bls.w	80068a4 <tcp_slowtmr+0x3a4>
    pcb_reset = 0;
 800656e:	f04f 0800 	mov.w	r8, #0
      ++pcb_remove;
 8006572:	2701      	movs	r7, #1
    if (pcb->ooseq != NULL &&
 8006574:	6f63      	ldr	r3, [r4, #116]	; 0x74
 8006576:	b15b      	cbz	r3, 8006590 <tcp_slowtmr+0x90>
        (tcp_ticks - pcb->tmr >= (u32_t)pcb->rto * TCP_OOSEQ_TIMEOUT)) {
 8006578:	4b97      	ldr	r3, [pc, #604]	; (80067d8 <tcp_slowtmr+0x2d8>)
 800657a:	681a      	ldr	r2, [r3, #0]
 800657c:	6a23      	ldr	r3, [r4, #32]
 800657e:	1ad2      	subs	r2, r2, r3
 8006580:	f9b4 3040 	ldrsh.w	r3, [r4, #64]	; 0x40
 8006584:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    if (pcb->ooseq != NULL &&
 8006588:	ebb2 0f43 	cmp.w	r2, r3, lsl #1
 800658c:	f080 80f8 	bcs.w	8006780 <tcp_slowtmr+0x280>
    if (pcb->state == SYN_RCVD) {
 8006590:	7d23      	ldrb	r3, [r4, #20]
 8006592:	2b03      	cmp	r3, #3
 8006594:	f000 80f8 	beq.w	8006788 <tcp_slowtmr+0x288>
    if (pcb->state == LAST_ACK) {
 8006598:	2b09      	cmp	r3, #9
 800659a:	f040 80fc 	bne.w	8006796 <tcp_slowtmr+0x296>
      if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 800659e:	4b8e      	ldr	r3, [pc, #568]	; (80067d8 <tcp_slowtmr+0x2d8>)
 80065a0:	681b      	ldr	r3, [r3, #0]
 80065a2:	6a22      	ldr	r2, [r4, #32]
 80065a4:	1a9b      	subs	r3, r3, r2
 80065a6:	2bf0      	cmp	r3, #240	; 0xf0
 80065a8:	f240 80f5 	bls.w	8006796 <tcp_slowtmr+0x296>
      tcp_err_fn err_fn = pcb->errf;
 80065ac:	f8d4 7090 	ldr.w	r7, [r4, #144]	; 0x90
      tcp_pcb_purge(pcb);
 80065b0:	4620      	mov	r0, r4
 80065b2:	f7ff fba7 	bl	8005d04 <tcp_pcb_purge>
      if (prev != NULL) {
 80065b6:	2d00      	cmp	r5, #0
 80065b8:	f000 8130 	beq.w	800681c <tcp_slowtmr+0x31c>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_active_pcbs", pcb != tcp_active_pcbs);
 80065bc:	f8da 3000 	ldr.w	r3, [sl]
 80065c0:	42a3      	cmp	r3, r4
 80065c2:	f000 8123 	beq.w	800680c <tcp_slowtmr+0x30c>
        prev->next = pcb->next;
 80065c6:	68e3      	ldr	r3, [r4, #12]
 80065c8:	60eb      	str	r3, [r5, #12]
      if (pcb_reset) {
 80065ca:	f1b8 0f00 	cmp.w	r8, #0
 80065ce:	f040 8134 	bne.w	800683a <tcp_slowtmr+0x33a>
      err_arg = pcb->callback_arg;
 80065d2:	f8d4 9010 	ldr.w	r9, [r4, #16]
      pcb = pcb->next;
 80065d6:	f8d4 800c 	ldr.w	r8, [r4, #12]
      tcp_free(pcb2);
 80065da:	4620      	mov	r0, r4
 80065dc:	f7ff f920 	bl	8005820 <tcp_free>
      tcp_active_pcbs_changed = 0;
 80065e0:	4b84      	ldr	r3, [pc, #528]	; (80067f4 <tcp_slowtmr+0x2f4>)
 80065e2:	2200      	movs	r2, #0
 80065e4:	701a      	strb	r2, [r3, #0]
      TCP_EVENT_ERR(last_state, err_fn, err_arg, ERR_ABRT);
 80065e6:	2f00      	cmp	r7, #0
 80065e8:	f000 813a 	beq.w	8006860 <tcp_slowtmr+0x360>
 80065ec:	f06f 010c 	mvn.w	r1, #12
 80065f0:	4648      	mov	r0, r9
 80065f2:	47b8      	blx	r7
      if (tcp_active_pcbs_changed) {
 80065f4:	4b7f      	ldr	r3, [pc, #508]	; (80067f4 <tcp_slowtmr+0x2f4>)
 80065f6:	781b      	ldrb	r3, [r3, #0]
 80065f8:	2b00      	cmp	r3, #0
 80065fa:	d191      	bne.n	8006520 <tcp_slowtmr+0x20>
      pcb = pcb->next;
 80065fc:	4644      	mov	r4, r8
 80065fe:	e133      	b.n	8006868 <tcp_slowtmr+0x368>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with empty send buffer", pcb->unsent != NULL);
 8006600:	4633      	mov	r3, r6
 8006602:	f240 42d5 	movw	r2, #1237	; 0x4d5
 8006606:	497c      	ldr	r1, [pc, #496]	; (80067f8 <tcp_slowtmr+0x2f8>)
 8006608:	4877      	ldr	r0, [pc, #476]	; (80067e8 <tcp_slowtmr+0x2e8>)
 800660a:	f004 ff15 	bl	800b438 <iprintf>
 800660e:	e15b      	b.n	80068c8 <tcp_slowtmr+0x3c8>
              if (tcp_split_unsent_seg(pcb, (u16_t)pcb->snd_wnd) == ERR_OK) {
 8006610:	4620      	mov	r0, r4
 8006612:	f002 fb0d 	bl	8008c30 <tcp_split_unsent_seg>
 8006616:	b158      	cbz	r0, 8006630 <tcp_slowtmr+0x130>
              pcb->persist_cnt = 0;
 8006618:	2300      	movs	r3, #0
 800661a:	f884 3098 	strb.w	r3, [r4, #152]	; 0x98
              if (pcb->persist_backoff < sizeof(tcp_persist_backoff)) {
 800661e:	f894 3099 	ldrb.w	r3, [r4, #153]	; 0x99
 8006622:	2b06      	cmp	r3, #6
 8006624:	d876      	bhi.n	8006714 <tcp_slowtmr+0x214>
                pcb->persist_backoff++;
 8006626:	3301      	adds	r3, #1
 8006628:	f884 3099 	strb.w	r3, [r4, #153]	; 0x99
    pcb_remove = 0;
 800662c:	2700      	movs	r7, #0
 800662e:	e050      	b.n	80066d2 <tcp_slowtmr+0x1d2>
                if (tcp_output(pcb) == ERR_OK) {
 8006630:	4620      	mov	r0, r4
 8006632:	f002 fe05 	bl	8009240 <tcp_output>
 8006636:	2800      	cmp	r0, #0
 8006638:	d1ee      	bne.n	8006618 <tcp_slowtmr+0x118>
    pcb_remove = 0;
 800663a:	2700      	movs	r7, #0
 800663c:	e049      	b.n	80066d2 <tcp_slowtmr+0x1d2>
        if ((pcb->rtime >= 0) && (pcb->rtime < 0x7FFF)) {
 800663e:	8e23      	ldrh	r3, [r4, #48]	; 0x30
 8006640:	f647 72fe 	movw	r2, #32766	; 0x7ffe
 8006644:	4293      	cmp	r3, r2
          ++pcb->rtime;
 8006646:	bf9c      	itt	ls
 8006648:	3301      	addls	r3, #1
 800664a:	8623      	strhls	r3, [r4, #48]	; 0x30
        if (pcb->rtime >= pcb->rto) {
 800664c:	f9b4 2030 	ldrsh.w	r2, [r4, #48]	; 0x30
 8006650:	f9b4 3040 	ldrsh.w	r3, [r4, #64]	; 0x40
 8006654:	429a      	cmp	r2, r3
 8006656:	db3c      	blt.n	80066d2 <tcp_slowtmr+0x1d2>
          if ((tcp_rexmit_rto_prepare(pcb) == ERR_OK) || ((pcb->unacked == NULL) && (pcb->unsent != NULL))) {
 8006658:	4620      	mov	r0, r4
 800665a:	f002 fc9d 	bl	8008f98 <tcp_rexmit_rto_prepare>
 800665e:	b118      	cbz	r0, 8006668 <tcp_slowtmr+0x168>
 8006660:	6f23      	ldr	r3, [r4, #112]	; 0x70
 8006662:	bbb3      	cbnz	r3, 80066d2 <tcp_slowtmr+0x1d2>
 8006664:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 8006666:	b3a3      	cbz	r3, 80066d2 <tcp_slowtmr+0x1d2>
            if (pcb->state != SYN_SENT) {
 8006668:	7d23      	ldrb	r3, [r4, #20]
 800666a:	2b02      	cmp	r3, #2
 800666c:	d014      	beq.n	8006698 <tcp_slowtmr+0x198>
              int calc_rto = ((pcb->sa >> 3) + pcb->sv) << tcp_backoff[backoff_idx];
 800666e:	f9b4 203c 	ldrsh.w	r2, [r4, #60]	; 0x3c
 8006672:	f9b4 303e 	ldrsh.w	r3, [r4, #62]	; 0x3e
 8006676:	eb03 03e2 	add.w	r3, r3, r2, asr #3
              u8_t backoff_idx = LWIP_MIN(pcb->nrtx, sizeof(tcp_backoff) - 1);
 800667a:	f894 2042 	ldrb.w	r2, [r4, #66]	; 0x42
              int calc_rto = ((pcb->sa >> 3) + pcb->sv) << tcp_backoff[backoff_idx];
 800667e:	2a0c      	cmp	r2, #12
 8006680:	bf28      	it	cs
 8006682:	220c      	movcs	r2, #12
 8006684:	495d      	ldr	r1, [pc, #372]	; (80067fc <tcp_slowtmr+0x2fc>)
 8006686:	5c8a      	ldrb	r2, [r1, r2]
 8006688:	4093      	lsls	r3, r2
              pcb->rto = (s16_t)LWIP_MIN(calc_rto, 0x7FFF);
 800668a:	f647 72ff 	movw	r2, #32767	; 0x7fff
 800668e:	4293      	cmp	r3, r2
 8006690:	bfa8      	it	ge
 8006692:	4613      	movge	r3, r2
 8006694:	f8a4 3040 	strh.w	r3, [r4, #64]	; 0x40
            pcb->rtime = 0;
 8006698:	2300      	movs	r3, #0
 800669a:	8623      	strh	r3, [r4, #48]	; 0x30
            eff_wnd = LWIP_MIN(pcb->cwnd, pcb->snd_wnd);
 800669c:	f8b4 2060 	ldrh.w	r2, [r4, #96]	; 0x60
 80066a0:	f8b4 3048 	ldrh.w	r3, [r4, #72]	; 0x48
            pcb->ssthresh = eff_wnd >> 1;
 80066a4:	429a      	cmp	r2, r3
 80066a6:	bf28      	it	cs
 80066a8:	461a      	movcs	r2, r3
 80066aa:	0851      	lsrs	r1, r2, #1
            if (pcb->ssthresh < (tcpwnd_size_t)(pcb->mss << 1)) {
 80066ac:	8e60      	ldrh	r0, [r4, #50]	; 0x32
 80066ae:	0043      	lsls	r3, r0, #1
 80066b0:	b29b      	uxth	r3, r3
              pcb->ssthresh = (tcpwnd_size_t)(pcb->mss << 1);
 80066b2:	ebb3 0f52 	cmp.w	r3, r2, lsr #1
 80066b6:	bf98      	it	ls
 80066b8:	460b      	movls	r3, r1
 80066ba:	f8a4 304a 	strh.w	r3, [r4, #74]	; 0x4a
            pcb->cwnd = pcb->mss;
 80066be:	f8a4 0048 	strh.w	r0, [r4, #72]	; 0x48
            pcb->bytes_acked = 0;
 80066c2:	2300      	movs	r3, #0
 80066c4:	f8a4 306a 	strh.w	r3, [r4, #106]	; 0x6a
            tcp_rexmit_rto_commit(pcb);
 80066c8:	4620      	mov	r0, r4
 80066ca:	f002 ff85 	bl	80095d8 <tcp_rexmit_rto_commit>
 80066ce:	e000      	b.n	80066d2 <tcp_slowtmr+0x1d2>
      ++pcb_remove;
 80066d0:	2701      	movs	r7, #1
    if (pcb->state == FIN_WAIT_2) {
 80066d2:	7d23      	ldrb	r3, [r4, #20]
 80066d4:	2b06      	cmp	r3, #6
 80066d6:	d01f      	beq.n	8006718 <tcp_slowtmr+0x218>
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 80066d8:	f894 8009 	ldrb.w	r8, [r4, #9]
 80066dc:	f018 0808 	ands.w	r8, r8, #8
 80066e0:	f43f af48 	beq.w	8006574 <tcp_slowtmr+0x74>
 80066e4:	2b04      	cmp	r3, #4
 80066e6:	d12a      	bne.n	800673e <tcp_slowtmr+0x23e>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 80066e8:	4b3b      	ldr	r3, [pc, #236]	; (80067d8 <tcp_slowtmr+0x2d8>)
 80066ea:	681a      	ldr	r2, [r3, #0]
 80066ec:	6a23      	ldr	r3, [r4, #32]
 80066ee:	1ad2      	subs	r2, r2, r3
          (pcb->keep_idle + TCP_KEEP_DUR(pcb)) / TCP_SLOW_INTERVAL) {
 80066f0:	f8d4 1094 	ldr.w	r1, [r4, #148]	; 0x94
 80066f4:	f501 2324 	add.w	r3, r1, #671744	; 0xa4000
 80066f8:	f603 43b8 	addw	r3, r3, #3256	; 0xcb8
 80066fc:	fbab 0303 	umull	r0, r3, fp, r3
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 8006700:	ebb2 1f53 	cmp.w	r2, r3, lsr #5
 8006704:	d920      	bls.n	8006748 <tcp_slowtmr+0x248>
        ++pcb_remove;
 8006706:	3701      	adds	r7, #1
 8006708:	b2ff      	uxtb	r7, r7
        ++pcb_reset;
 800670a:	f04f 0801 	mov.w	r8, #1
 800670e:	e731      	b.n	8006574 <tcp_slowtmr+0x74>
          ++pcb_remove; /* max probes reached */
 8006710:	2701      	movs	r7, #1
 8006712:	e7de      	b.n	80066d2 <tcp_slowtmr+0x1d2>
    pcb_remove = 0;
 8006714:	2700      	movs	r7, #0
 8006716:	e7dc      	b.n	80066d2 <tcp_slowtmr+0x1d2>
      if (pcb->flags & TF_RXCLOSED) {
 8006718:	8b63      	ldrh	r3, [r4, #26]
 800671a:	f013 0f10 	tst.w	r3, #16
 800671e:	d007      	beq.n	8006730 <tcp_slowtmr+0x230>
        if ((u32_t)(tcp_ticks - pcb->tmr) >
 8006720:	4b2d      	ldr	r3, [pc, #180]	; (80067d8 <tcp_slowtmr+0x2d8>)
 8006722:	681b      	ldr	r3, [r3, #0]
 8006724:	6a22      	ldr	r2, [r4, #32]
 8006726:	1a9b      	subs	r3, r3, r2
 8006728:	2b28      	cmp	r3, #40	; 0x28
 800672a:	d901      	bls.n	8006730 <tcp_slowtmr+0x230>
          ++pcb_remove;
 800672c:	3701      	adds	r7, #1
 800672e:	b2ff      	uxtb	r7, r7
    if (pcb->ooseq != NULL &&
 8006730:	6f63      	ldr	r3, [r4, #116]	; 0x74
 8006732:	2b00      	cmp	r3, #0
 8006734:	f000 8134 	beq.w	80069a0 <tcp_slowtmr+0x4a0>
    pcb_reset = 0;
 8006738:	f04f 0800 	mov.w	r8, #0
 800673c:	e71c      	b.n	8006578 <tcp_slowtmr+0x78>
        ((pcb->state == ESTABLISHED) ||
 800673e:	2b07      	cmp	r3, #7
 8006740:	d0d2      	beq.n	80066e8 <tcp_slowtmr+0x1e8>
    pcb_reset = 0;
 8006742:	f04f 0800 	mov.w	r8, #0
 8006746:	e715      	b.n	8006574 <tcp_slowtmr+0x74>
                 (pcb->keep_idle + pcb->keep_cnt_sent * TCP_KEEP_INTVL(pcb))
 8006748:	f894 309b 	ldrb.w	r3, [r4, #155]	; 0x9b
 800674c:	482c      	ldr	r0, [pc, #176]	; (8006800 <tcp_slowtmr+0x300>)
 800674e:	fb00 1103 	mla	r1, r0, r3, r1
                 / TCP_SLOW_INTERVAL) {
 8006752:	fbab 3101 	umull	r3, r1, fp, r1
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 8006756:	ebb2 1f51 	cmp.w	r2, r1, lsr #5
 800675a:	d802      	bhi.n	8006762 <tcp_slowtmr+0x262>
    pcb_reset = 0;
 800675c:	f04f 0800 	mov.w	r8, #0
 8006760:	e708      	b.n	8006574 <tcp_slowtmr+0x74>
        err = tcp_keepalive(pcb);
 8006762:	4620      	mov	r0, r4
 8006764:	f002 ff6e 	bl	8009644 <tcp_keepalive>
        if (err == ERR_OK) {
 8006768:	b938      	cbnz	r0, 800677a <tcp_slowtmr+0x27a>
          pcb->keep_cnt_sent++;
 800676a:	f894 309b 	ldrb.w	r3, [r4, #155]	; 0x9b
 800676e:	3301      	adds	r3, #1
 8006770:	f884 309b 	strb.w	r3, [r4, #155]	; 0x9b
    pcb_reset = 0;
 8006774:	f04f 0800 	mov.w	r8, #0
 8006778:	e6fc      	b.n	8006574 <tcp_slowtmr+0x74>
 800677a:	f04f 0800 	mov.w	r8, #0
 800677e:	e6f9      	b.n	8006574 <tcp_slowtmr+0x74>
      tcp_free_ooseq(pcb);
 8006780:	4620      	mov	r0, r4
 8006782:	f7ff fab5 	bl	8005cf0 <tcp_free_ooseq>
 8006786:	e703      	b.n	8006590 <tcp_slowtmr+0x90>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 8006788:	4b13      	ldr	r3, [pc, #76]	; (80067d8 <tcp_slowtmr+0x2d8>)
 800678a:	681b      	ldr	r3, [r3, #0]
 800678c:	6a22      	ldr	r2, [r4, #32]
 800678e:	1a9b      	subs	r3, r3, r2
 8006790:	2b28      	cmp	r3, #40	; 0x28
 8006792:	f63f af0b 	bhi.w	80065ac <tcp_slowtmr+0xac>
    if (pcb_remove) {
 8006796:	2f00      	cmp	r7, #0
 8006798:	f47f af08 	bne.w	80065ac <tcp_slowtmr+0xac>
      pcb = pcb->next;
 800679c:	68e7      	ldr	r7, [r4, #12]
      ++prev->polltmr;
 800679e:	7f23      	ldrb	r3, [r4, #28]
 80067a0:	3301      	adds	r3, #1
 80067a2:	b2db      	uxtb	r3, r3
 80067a4:	7723      	strb	r3, [r4, #28]
      if (prev->polltmr >= prev->pollinterval) {
 80067a6:	7f62      	ldrb	r2, [r4, #29]
 80067a8:	429a      	cmp	r2, r3
 80067aa:	d85b      	bhi.n	8006864 <tcp_slowtmr+0x364>
        prev->polltmr = 0;
 80067ac:	2300      	movs	r3, #0
 80067ae:	7723      	strb	r3, [r4, #28]
        tcp_active_pcbs_changed = 0;
 80067b0:	4a10      	ldr	r2, [pc, #64]	; (80067f4 <tcp_slowtmr+0x2f4>)
 80067b2:	7013      	strb	r3, [r2, #0]
        TCP_EVENT_POLL(prev, err);
 80067b4:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
 80067b8:	2b00      	cmp	r3, #0
 80067ba:	d04b      	beq.n	8006854 <tcp_slowtmr+0x354>
 80067bc:	4621      	mov	r1, r4
 80067be:	6920      	ldr	r0, [r4, #16]
 80067c0:	4798      	blx	r3
        if (tcp_active_pcbs_changed) {
 80067c2:	4b0c      	ldr	r3, [pc, #48]	; (80067f4 <tcp_slowtmr+0x2f4>)
 80067c4:	781b      	ldrb	r3, [r3, #0]
 80067c6:	2b00      	cmp	r3, #0
 80067c8:	f47f aeaa 	bne.w	8006520 <tcp_slowtmr+0x20>
        if (err == ERR_OK) {
 80067cc:	2800      	cmp	r0, #0
 80067ce:	d041      	beq.n	8006854 <tcp_slowtmr+0x354>
 80067d0:	4625      	mov	r5, r4
      pcb = pcb->next;
 80067d2:	463c      	mov	r4, r7
 80067d4:	e048      	b.n	8006868 <tcp_slowtmr+0x368>
 80067d6:	bf00      	nop
 80067d8:	2000ae68 	.word	0x2000ae68
 80067dc:	2000ae6d 	.word	0x2000ae6d
 80067e0:	08010de4 	.word	0x08010de4
 80067e4:	08011294 	.word	0x08011294
 80067e8:	0800cb24 	.word	0x0800cb24
 80067ec:	080112c0 	.word	0x080112c0
 80067f0:	080112ec 	.word	0x080112ec
 80067f4:	2000ae5c 	.word	0x2000ae5c
 80067f8:	08011350 	.word	0x08011350
 80067fc:	08011460 	.word	0x08011460
 8006800:	000124f8 	.word	0x000124f8
 8006804:	2000ae58 	.word	0x2000ae58
 8006808:	10624dd3 	.word	0x10624dd3
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_active_pcbs", pcb != tcp_active_pcbs);
 800680c:	4633      	mov	r3, r6
 800680e:	f240 526d 	movw	r2, #1389	; 0x56d
 8006812:	4966      	ldr	r1, [pc, #408]	; (80069ac <tcp_slowtmr+0x4ac>)
 8006814:	4866      	ldr	r0, [pc, #408]	; (80069b0 <tcp_slowtmr+0x4b0>)
 8006816:	f004 fe0f 	bl	800b438 <iprintf>
 800681a:	e6d4      	b.n	80065c6 <tcp_slowtmr+0xc6>
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_active_pcbs", tcp_active_pcbs == pcb);
 800681c:	f8da 3000 	ldr.w	r3, [sl]
 8006820:	42a3      	cmp	r3, r4
 8006822:	d006      	beq.n	8006832 <tcp_slowtmr+0x332>
 8006824:	4633      	mov	r3, r6
 8006826:	f240 5271 	movw	r2, #1393	; 0x571
 800682a:	4962      	ldr	r1, [pc, #392]	; (80069b4 <tcp_slowtmr+0x4b4>)
 800682c:	4860      	ldr	r0, [pc, #384]	; (80069b0 <tcp_slowtmr+0x4b0>)
 800682e:	f004 fe03 	bl	800b438 <iprintf>
        tcp_active_pcbs = pcb->next;
 8006832:	68e3      	ldr	r3, [r4, #12]
 8006834:	f8ca 3000 	str.w	r3, [sl]
 8006838:	e6c7      	b.n	80065ca <tcp_slowtmr+0xca>
        tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 800683a:	6a62      	ldr	r2, [r4, #36]	; 0x24
 800683c:	6d21      	ldr	r1, [r4, #80]	; 0x50
 800683e:	8b23      	ldrh	r3, [r4, #24]
 8006840:	9302      	str	r3, [sp, #8]
 8006842:	8ae3      	ldrh	r3, [r4, #22]
 8006844:	9301      	str	r3, [sp, #4]
 8006846:	1d23      	adds	r3, r4, #4
 8006848:	9300      	str	r3, [sp, #0]
 800684a:	4623      	mov	r3, r4
 800684c:	4620      	mov	r0, r4
 800684e:	f002 fc75 	bl	800913c <tcp_rst>
 8006852:	e6be      	b.n	80065d2 <tcp_slowtmr+0xd2>
          tcp_output(prev);
 8006854:	4620      	mov	r0, r4
 8006856:	f002 fcf3 	bl	8009240 <tcp_output>
 800685a:	4625      	mov	r5, r4
      pcb = pcb->next;
 800685c:	463c      	mov	r4, r7
 800685e:	e003      	b.n	8006868 <tcp_slowtmr+0x368>
      pcb = pcb->next;
 8006860:	4644      	mov	r4, r8
 8006862:	e001      	b.n	8006868 <tcp_slowtmr+0x368>
 8006864:	4625      	mov	r5, r4
      pcb = pcb->next;
 8006866:	463c      	mov	r4, r7
  while (pcb != NULL) {
 8006868:	2c00      	cmp	r4, #0
 800686a:	d052      	beq.n	8006912 <tcp_slowtmr+0x412>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != CLOSED\n", pcb->state != CLOSED);
 800686c:	7d23      	ldrb	r3, [r4, #20]
 800686e:	2b00      	cmp	r3, #0
 8006870:	f43f ae5d 	beq.w	800652e <tcp_slowtmr+0x2e>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != LISTEN\n", pcb->state != LISTEN);
 8006874:	7d23      	ldrb	r3, [r4, #20]
 8006876:	2b01      	cmp	r3, #1
 8006878:	f43f ae61 	beq.w	800653e <tcp_slowtmr+0x3e>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != TIME-WAIT\n", pcb->state != TIME_WAIT);
 800687c:	7d23      	ldrb	r3, [r4, #20]
 800687e:	2b0a      	cmp	r3, #10
 8006880:	f43f ae65 	beq.w	800654e <tcp_slowtmr+0x4e>
    if (pcb->last_timer == tcp_timer_ctr) {
 8006884:	4b4c      	ldr	r3, [pc, #304]	; (80069b8 <tcp_slowtmr+0x4b8>)
 8006886:	781b      	ldrb	r3, [r3, #0]
 8006888:	7fa2      	ldrb	r2, [r4, #30]
 800688a:	429a      	cmp	r2, r3
 800688c:	f43f ae67 	beq.w	800655e <tcp_slowtmr+0x5e>
    pcb->last_timer = tcp_timer_ctr;
 8006890:	77a3      	strb	r3, [r4, #30]
    if (pcb->state == SYN_SENT && pcb->nrtx >= TCP_SYNMAXRTX) {
 8006892:	7d23      	ldrb	r3, [r4, #20]
 8006894:	2b02      	cmp	r3, #2
 8006896:	f43f ae65 	beq.w	8006564 <tcp_slowtmr+0x64>
    } else if (pcb->nrtx >= TCP_MAXRTX) {
 800689a:	f894 3042 	ldrb.w	r3, [r4, #66]	; 0x42
 800689e:	2b0b      	cmp	r3, #11
 80068a0:	f63f af16 	bhi.w	80066d0 <tcp_slowtmr+0x1d0>
      if (pcb->persist_backoff > 0) {
 80068a4:	f894 7099 	ldrb.w	r7, [r4, #153]	; 0x99
 80068a8:	2f00      	cmp	r7, #0
 80068aa:	f43f aec8 	beq.w	800663e <tcp_slowtmr+0x13e>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with in-flight data", pcb->unacked == NULL);
 80068ae:	6f23      	ldr	r3, [r4, #112]	; 0x70
 80068b0:	b133      	cbz	r3, 80068c0 <tcp_slowtmr+0x3c0>
 80068b2:	4633      	mov	r3, r6
 80068b4:	f240 42d4 	movw	r2, #1236	; 0x4d4
 80068b8:	4940      	ldr	r1, [pc, #256]	; (80069bc <tcp_slowtmr+0x4bc>)
 80068ba:	483d      	ldr	r0, [pc, #244]	; (80069b0 <tcp_slowtmr+0x4b0>)
 80068bc:	f004 fdbc 	bl	800b438 <iprintf>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with empty send buffer", pcb->unsent != NULL);
 80068c0:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 80068c2:	2b00      	cmp	r3, #0
 80068c4:	f43f ae9c 	beq.w	8006600 <tcp_slowtmr+0x100>
        if (pcb->persist_probe >= TCP_MAXRTX) {
 80068c8:	f894 309a 	ldrb.w	r3, [r4, #154]	; 0x9a
 80068cc:	2b0b      	cmp	r3, #11
 80068ce:	f63f af1f 	bhi.w	8006710 <tcp_slowtmr+0x210>
          u8_t backoff_cnt = tcp_persist_backoff[pcb->persist_backoff - 1];
 80068d2:	f894 2099 	ldrb.w	r2, [r4, #153]	; 0x99
 80068d6:	4b3a      	ldr	r3, [pc, #232]	; (80069c0 <tcp_slowtmr+0x4c0>)
 80068d8:	4413      	add	r3, r2
 80068da:	f813 2c01 	ldrb.w	r2, [r3, #-1]
          if (pcb->persist_cnt < backoff_cnt) {
 80068de:	f894 3098 	ldrb.w	r3, [r4, #152]	; 0x98
 80068e2:	4293      	cmp	r3, r2
 80068e4:	d208      	bcs.n	80068f8 <tcp_slowtmr+0x3f8>
            pcb->persist_cnt++;
 80068e6:	3301      	adds	r3, #1
 80068e8:	b2db      	uxtb	r3, r3
 80068ea:	f884 3098 	strb.w	r3, [r4, #152]	; 0x98
          if (pcb->persist_cnt >= backoff_cnt) {
 80068ee:	4293      	cmp	r3, r2
    pcb_remove = 0;
 80068f0:	bf38      	it	cc
 80068f2:	2700      	movcc	r7, #0
          if (pcb->persist_cnt >= backoff_cnt) {
 80068f4:	f4ff aeed 	bcc.w	80066d2 <tcp_slowtmr+0x1d2>
            if (pcb->snd_wnd == 0) {
 80068f8:	f8b4 1060 	ldrh.w	r1, [r4, #96]	; 0x60
 80068fc:	2900      	cmp	r1, #0
 80068fe:	f47f ae87 	bne.w	8006610 <tcp_slowtmr+0x110>
              if (tcp_zero_window_probe(pcb) != ERR_OK) {
 8006902:	4620      	mov	r0, r4
 8006904:	f002 fecc 	bl	80096a0 <tcp_zero_window_probe>
 8006908:	2800      	cmp	r0, #0
 800690a:	f43f ae85 	beq.w	8006618 <tcp_slowtmr+0x118>
    pcb_remove = 0;
 800690e:	2700      	movs	r7, #0
 8006910:	e6df      	b.n	80066d2 <tcp_slowtmr+0x1d2>
  pcb = tcp_tw_pcbs;
 8006912:	4b2c      	ldr	r3, [pc, #176]	; (80069c4 <tcp_slowtmr+0x4c4>)
 8006914:	681c      	ldr	r4, [r3, #0]
  while (pcb != NULL) {
 8006916:	2c00      	cmp	r4, #0
 8006918:	d045      	beq.n	80069a6 <tcp_slowtmr+0x4a6>
  prev = NULL;
 800691a:	2500      	movs	r5, #0
    LWIP_ASSERT("tcp_slowtmr: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 800691c:	4f2a      	ldr	r7, [pc, #168]	; (80069c8 <tcp_slowtmr+0x4c8>)
 800691e:	f8df 80b8 	ldr.w	r8, [pc, #184]	; 80069d8 <tcp_slowtmr+0x4d8>
 8006922:	4e23      	ldr	r6, [pc, #140]	; (80069b0 <tcp_slowtmr+0x4b0>)
 8006924:	e009      	b.n	800693a <tcp_slowtmr+0x43a>
    if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 8006926:	4b29      	ldr	r3, [pc, #164]	; (80069cc <tcp_slowtmr+0x4cc>)
 8006928:	681b      	ldr	r3, [r3, #0]
 800692a:	6a22      	ldr	r2, [r4, #32]
 800692c:	1a9b      	subs	r3, r3, r2
 800692e:	2bf0      	cmp	r3, #240	; 0xf0
 8006930:	d80e      	bhi.n	8006950 <tcp_slowtmr+0x450>
      pcb = pcb->next;
 8006932:	4625      	mov	r5, r4
 8006934:	68e4      	ldr	r4, [r4, #12]
  while (pcb != NULL) {
 8006936:	2c00      	cmp	r4, #0
 8006938:	d035      	beq.n	80069a6 <tcp_slowtmr+0x4a6>
    LWIP_ASSERT("tcp_slowtmr: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 800693a:	7d23      	ldrb	r3, [r4, #20]
 800693c:	2b0a      	cmp	r3, #10
 800693e:	d0f2      	beq.n	8006926 <tcp_slowtmr+0x426>
 8006940:	463b      	mov	r3, r7
 8006942:	f240 52a1 	movw	r2, #1441	; 0x5a1
 8006946:	4641      	mov	r1, r8
 8006948:	4630      	mov	r0, r6
 800694a:	f004 fd75 	bl	800b438 <iprintf>
 800694e:	e7ea      	b.n	8006926 <tcp_slowtmr+0x426>
      tcp_pcb_purge(pcb);
 8006950:	4620      	mov	r0, r4
 8006952:	f7ff f9d7 	bl	8005d04 <tcp_pcb_purge>
      if (prev != NULL) {
 8006956:	b1a5      	cbz	r5, 8006982 <tcp_slowtmr+0x482>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_tw_pcbs", pcb != tcp_tw_pcbs);
 8006958:	4b1a      	ldr	r3, [pc, #104]	; (80069c4 <tcp_slowtmr+0x4c4>)
 800695a:	681b      	ldr	r3, [r3, #0]
 800695c:	42a3      	cmp	r3, r4
 800695e:	d008      	beq.n	8006972 <tcp_slowtmr+0x472>
        prev->next = pcb->next;
 8006960:	68e3      	ldr	r3, [r4, #12]
 8006962:	60eb      	str	r3, [r5, #12]
      pcb = pcb->next;
 8006964:	f8d4 900c 	ldr.w	r9, [r4, #12]
      tcp_free(pcb2);
 8006968:	4620      	mov	r0, r4
 800696a:	f7fe ff59 	bl	8005820 <tcp_free>
      pcb = pcb->next;
 800696e:	464c      	mov	r4, r9
 8006970:	e7e1      	b.n	8006936 <tcp_slowtmr+0x436>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_tw_pcbs", pcb != tcp_tw_pcbs);
 8006972:	463b      	mov	r3, r7
 8006974:	f240 52af 	movw	r2, #1455	; 0x5af
 8006978:	4915      	ldr	r1, [pc, #84]	; (80069d0 <tcp_slowtmr+0x4d0>)
 800697a:	4630      	mov	r0, r6
 800697c:	f004 fd5c 	bl	800b438 <iprintf>
 8006980:	e7ee      	b.n	8006960 <tcp_slowtmr+0x460>
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_tw_pcbs", tcp_tw_pcbs == pcb);
 8006982:	4b10      	ldr	r3, [pc, #64]	; (80069c4 <tcp_slowtmr+0x4c4>)
 8006984:	681b      	ldr	r3, [r3, #0]
 8006986:	42a3      	cmp	r3, r4
 8006988:	d006      	beq.n	8006998 <tcp_slowtmr+0x498>
 800698a:	463b      	mov	r3, r7
 800698c:	f240 52b3 	movw	r2, #1459	; 0x5b3
 8006990:	4910      	ldr	r1, [pc, #64]	; (80069d4 <tcp_slowtmr+0x4d4>)
 8006992:	4630      	mov	r0, r6
 8006994:	f004 fd50 	bl	800b438 <iprintf>
        tcp_tw_pcbs = pcb->next;
 8006998:	68e2      	ldr	r2, [r4, #12]
 800699a:	4b0a      	ldr	r3, [pc, #40]	; (80069c4 <tcp_slowtmr+0x4c4>)
 800699c:	601a      	str	r2, [r3, #0]
 800699e:	e7e1      	b.n	8006964 <tcp_slowtmr+0x464>
    pcb_reset = 0;
 80069a0:	f04f 0800 	mov.w	r8, #0
 80069a4:	e6f7      	b.n	8006796 <tcp_slowtmr+0x296>
}
 80069a6:	b005      	add	sp, #20
 80069a8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80069ac:	08011388 	.word	0x08011388
 80069b0:	0800cb24 	.word	0x0800cb24
 80069b4:	080113b4 	.word	0x080113b4
 80069b8:	2000ae6d 	.word	0x2000ae6d
 80069bc:	0801131c 	.word	0x0801131c
 80069c0:	08011480 	.word	0x08011480
 80069c4:	2000ae70 	.word	0x2000ae70
 80069c8:	08010de4 	.word	0x08010de4
 80069cc:	2000ae68 	.word	0x2000ae68
 80069d0:	08011410 	.word	0x08011410
 80069d4:	08011438 	.word	0x08011438
 80069d8:	080113e0 	.word	0x080113e0

080069dc <tcp_tmr>:
{
 80069dc:	b508      	push	{r3, lr}
  tcp_fasttmr();
 80069de:	f7ff fd47 	bl	8006470 <tcp_fasttmr>
  if (++tcp_timer & 1) {
 80069e2:	4a06      	ldr	r2, [pc, #24]	; (80069fc <tcp_tmr+0x20>)
 80069e4:	7813      	ldrb	r3, [r2, #0]
 80069e6:	3301      	adds	r3, #1
 80069e8:	b2db      	uxtb	r3, r3
 80069ea:	7013      	strb	r3, [r2, #0]
 80069ec:	f013 0f01 	tst.w	r3, #1
 80069f0:	d100      	bne.n	80069f4 <tcp_tmr+0x18>
}
 80069f2:	bd08      	pop	{r3, pc}
    tcp_slowtmr();
 80069f4:	f7ff fd84 	bl	8006500 <tcp_slowtmr>
}
 80069f8:	e7fb      	b.n	80069f2 <tcp_tmr+0x16>
 80069fa:	bf00      	nop
 80069fc:	2000ae6c 	.word	0x2000ae6c

08006a00 <tcp_get_next_optbyte>:
}

static u8_t
tcp_get_next_optbyte(void)
{
  u16_t optidx = tcp_optidx++;
 8006a00:	4a09      	ldr	r2, [pc, #36]	; (8006a28 <tcp_get_next_optbyte+0x28>)
 8006a02:	8813      	ldrh	r3, [r2, #0]
 8006a04:	1c59      	adds	r1, r3, #1
 8006a06:	8011      	strh	r1, [r2, #0]
  if ((tcphdr_opt2 == NULL) || (optidx < tcphdr_opt1len)) {
 8006a08:	4a08      	ldr	r2, [pc, #32]	; (8006a2c <tcp_get_next_optbyte+0x2c>)
 8006a0a:	6812      	ldr	r2, [r2, #0]
 8006a0c:	b11a      	cbz	r2, 8006a16 <tcp_get_next_optbyte+0x16>
 8006a0e:	4908      	ldr	r1, [pc, #32]	; (8006a30 <tcp_get_next_optbyte+0x30>)
 8006a10:	8809      	ldrh	r1, [r1, #0]
 8006a12:	428b      	cmp	r3, r1
 8006a14:	d204      	bcs.n	8006a20 <tcp_get_next_optbyte+0x20>
    u8_t *opts = (u8_t *)tcphdr + TCP_HLEN;
 8006a16:	4a07      	ldr	r2, [pc, #28]	; (8006a34 <tcp_get_next_optbyte+0x34>)
    return opts[optidx];
 8006a18:	6812      	ldr	r2, [r2, #0]
 8006a1a:	4413      	add	r3, r2
 8006a1c:	7d18      	ldrb	r0, [r3, #20]
 8006a1e:	4770      	bx	lr
  } else {
    u8_t idx = (u8_t)(optidx - tcphdr_opt1len);
 8006a20:	1a5b      	subs	r3, r3, r1
    return tcphdr_opt2[idx];
 8006a22:	b2db      	uxtb	r3, r3
 8006a24:	5cd0      	ldrb	r0, [r2, r3]
  }
}
 8006a26:	4770      	bx	lr
 8006a28:	2000aea0 	.word	0x2000aea0
 8006a2c:	2000aeac 	.word	0x2000aeac
 8006a30:	2000aea8 	.word	0x2000aea8
 8006a34:	2000aea4 	.word	0x2000aea4

08006a38 <tcp_parseopt>:
 *
 * @param pcb the tcp_pcb for which a segment arrived
 */
static void
tcp_parseopt(struct tcp_pcb *pcb)
{
 8006a38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  u16_t mss;
#if LWIP_TCP_TIMESTAMPS
  u32_t tsval;
#endif

  LWIP_ASSERT("tcp_parseopt: invalid pcb", pcb != NULL);
 8006a3a:	4607      	mov	r7, r0
 8006a3c:	b1d0      	cbz	r0, 8006a74 <tcp_parseopt+0x3c>

  /* Parse the TCP MSS option, if present. */
  if (tcphdr_optlen != 0) {
 8006a3e:	4b1e      	ldr	r3, [pc, #120]	; (8006ab8 <tcp_parseopt+0x80>)
 8006a40:	881d      	ldrh	r5, [r3, #0]
 8006a42:	2d00      	cmp	r5, #0
 8006a44:	d037      	beq.n	8006ab6 <tcp_parseopt+0x7e>
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 8006a46:	4b1d      	ldr	r3, [pc, #116]	; (8006abc <tcp_parseopt+0x84>)
 8006a48:	2200      	movs	r2, #0
 8006a4a:	801a      	strh	r2, [r3, #0]
 8006a4c:	461e      	mov	r6, r3
 8006a4e:	8833      	ldrh	r3, [r6, #0]
 8006a50:	42ab      	cmp	r3, r5
 8006a52:	d230      	bcs.n	8006ab6 <tcp_parseopt+0x7e>
      u8_t opt = tcp_get_next_optbyte();
 8006a54:	f7ff ffd4 	bl	8006a00 <tcp_get_next_optbyte>
      switch (opt) {
 8006a58:	2801      	cmp	r0, #1
 8006a5a:	d0f8      	beq.n	8006a4e <tcp_parseopt+0x16>
 8006a5c:	2802      	cmp	r0, #2
 8006a5e:	d011      	beq.n	8006a84 <tcp_parseopt+0x4c>
 8006a60:	b348      	cbz	r0, 8006ab6 <tcp_parseopt+0x7e>
          }
          break;
#endif /* LWIP_TCP_SACK_OUT */
        default:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: other\n"));
          data = tcp_get_next_optbyte();
 8006a62:	f7ff ffcd 	bl	8006a00 <tcp_get_next_optbyte>
          if (data < 2) {
 8006a66:	2801      	cmp	r0, #1
 8006a68:	d925      	bls.n	8006ab6 <tcp_parseopt+0x7e>
               and we don't process them further. */
            return;
          }
          /* All other options have a length field, so that we easily
             can skip past them. */
          tcp_optidx += data - 2;
 8006a6a:	8833      	ldrh	r3, [r6, #0]
 8006a6c:	3b02      	subs	r3, #2
 8006a6e:	4418      	add	r0, r3
 8006a70:	8030      	strh	r0, [r6, #0]
 8006a72:	e7ec      	b.n	8006a4e <tcp_parseopt+0x16>
  LWIP_ASSERT("tcp_parseopt: invalid pcb", pcb != NULL);
 8006a74:	4b12      	ldr	r3, [pc, #72]	; (8006ac0 <tcp_parseopt+0x88>)
 8006a76:	f240 727d 	movw	r2, #1917	; 0x77d
 8006a7a:	4912      	ldr	r1, [pc, #72]	; (8006ac4 <tcp_parseopt+0x8c>)
 8006a7c:	4812      	ldr	r0, [pc, #72]	; (8006ac8 <tcp_parseopt+0x90>)
 8006a7e:	f004 fcdb 	bl	800b438 <iprintf>
 8006a82:	e7dc      	b.n	8006a3e <tcp_parseopt+0x6>
          if (tcp_get_next_optbyte() != LWIP_TCP_OPT_LEN_MSS || (tcp_optidx - 2 + LWIP_TCP_OPT_LEN_MSS) > tcphdr_optlen) {
 8006a84:	f7ff ffbc 	bl	8006a00 <tcp_get_next_optbyte>
 8006a88:	2804      	cmp	r0, #4
 8006a8a:	d114      	bne.n	8006ab6 <tcp_parseopt+0x7e>
 8006a8c:	8833      	ldrh	r3, [r6, #0]
 8006a8e:	3301      	adds	r3, #1
 8006a90:	42ab      	cmp	r3, r5
 8006a92:	da10      	bge.n	8006ab6 <tcp_parseopt+0x7e>
          mss = (u16_t)(tcp_get_next_optbyte() << 8);
 8006a94:	f7ff ffb4 	bl	8006a00 <tcp_get_next_optbyte>
 8006a98:	0204      	lsls	r4, r0, #8
 8006a9a:	b2a4      	uxth	r4, r4
          mss |= tcp_get_next_optbyte();
 8006a9c:	f7ff ffb0 	bl	8006a00 <tcp_get_next_optbyte>
 8006aa0:	4320      	orrs	r0, r4
 8006aa2:	b280      	uxth	r0, r0
          pcb->mss = ((mss > TCP_MSS) || (mss == 0)) ? TCP_MSS : mss;
 8006aa4:	1e43      	subs	r3, r0, #1
 8006aa6:	b29b      	uxth	r3, r3
 8006aa8:	f5b3 7f06 	cmp.w	r3, #536	; 0x218
 8006aac:	bf28      	it	cs
 8006aae:	f44f 7006 	movcs.w	r0, #536	; 0x218
 8006ab2:	8678      	strh	r0, [r7, #50]	; 0x32
          break;
 8006ab4:	e7cb      	b.n	8006a4e <tcp_parseopt+0x16>
      }
    }
  }
}
 8006ab6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006ab8:	2000aeb0 	.word	0x2000aeb0
 8006abc:	2000aea0 	.word	0x2000aea0
 8006ac0:	08011488 	.word	0x08011488
 8006ac4:	080114bc 	.word	0x080114bc
 8006ac8:	0800cb24 	.word	0x0800cb24

08006acc <tcp_input_delayed_close>:
{
 8006acc:	b510      	push	{r4, lr}
  LWIP_ASSERT("tcp_input_delayed_close: invalid pcb", pcb != NULL);
 8006ace:	4604      	mov	r4, r0
 8006ad0:	b130      	cbz	r0, 8006ae0 <tcp_input_delayed_close+0x14>
  if (recv_flags & TF_CLOSED) {
 8006ad2:	4b11      	ldr	r3, [pc, #68]	; (8006b18 <tcp_input_delayed_close+0x4c>)
 8006ad4:	781b      	ldrb	r3, [r3, #0]
 8006ad6:	f013 0f10 	tst.w	r3, #16
 8006ada:	d109      	bne.n	8006af0 <tcp_input_delayed_close+0x24>
  return 0;
 8006adc:	2000      	movs	r0, #0
}
 8006ade:	bd10      	pop	{r4, pc}
  LWIP_ASSERT("tcp_input_delayed_close: invalid pcb", pcb != NULL);
 8006ae0:	4b0e      	ldr	r3, [pc, #56]	; (8006b1c <tcp_input_delayed_close+0x50>)
 8006ae2:	f240 225a 	movw	r2, #602	; 0x25a
 8006ae6:	490e      	ldr	r1, [pc, #56]	; (8006b20 <tcp_input_delayed_close+0x54>)
 8006ae8:	480e      	ldr	r0, [pc, #56]	; (8006b24 <tcp_input_delayed_close+0x58>)
 8006aea:	f004 fca5 	bl	800b438 <iprintf>
 8006aee:	e7f0      	b.n	8006ad2 <tcp_input_delayed_close+0x6>
    if (!(pcb->flags & TF_RXCLOSED)) {
 8006af0:	8b63      	ldrh	r3, [r4, #26]
 8006af2:	f013 0f10 	tst.w	r3, #16
 8006af6:	d106      	bne.n	8006b06 <tcp_input_delayed_close+0x3a>
      TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_CLSD);
 8006af8:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 8006afc:	b11b      	cbz	r3, 8006b06 <tcp_input_delayed_close+0x3a>
 8006afe:	f06f 010e 	mvn.w	r1, #14
 8006b02:	6920      	ldr	r0, [r4, #16]
 8006b04:	4798      	blx	r3
    tcp_pcb_remove(&tcp_active_pcbs, pcb);
 8006b06:	4621      	mov	r1, r4
 8006b08:	4807      	ldr	r0, [pc, #28]	; (8006b28 <tcp_input_delayed_close+0x5c>)
 8006b0a:	f7ff f92b 	bl	8005d64 <tcp_pcb_remove>
    tcp_free(pcb);
 8006b0e:	4620      	mov	r0, r4
 8006b10:	f7fe fe86 	bl	8005820 <tcp_free>
    return 1;
 8006b14:	2001      	movs	r0, #1
 8006b16:	e7e2      	b.n	8006ade <tcp_input_delayed_close+0x12>
 8006b18:	2000ae94 	.word	0x2000ae94
 8006b1c:	08011488 	.word	0x08011488
 8006b20:	080114d8 	.word	0x080114d8
 8006b24:	0800cb24 	.word	0x0800cb24
 8006b28:	2000ae58 	.word	0x2000ae58

08006b2c <tcp_free_acked_segments>:
{
 8006b2c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  while (seg_list != NULL &&
 8006b30:	460d      	mov	r5, r1
 8006b32:	b139      	cbz	r1, 8006b44 <tcp_free_acked_segments+0x18>
 8006b34:	4606      	mov	r6, r0
 8006b36:	4698      	mov	r8, r3
         TCP_SEQ_LEQ(lwip_ntohl(seg_list->tcphdr->seqno) +
 8006b38:	4f2c      	ldr	r7, [pc, #176]	; (8006bec <tcp_free_acked_segments+0xc0>)
    LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= clen));
 8006b3a:	f8df a0b8 	ldr.w	sl, [pc, #184]	; 8006bf4 <tcp_free_acked_segments+0xc8>
 8006b3e:	f8df 90c0 	ldr.w	r9, [pc, #192]	; 8006c00 <tcp_free_acked_segments+0xd4>
 8006b42:	e01b      	b.n	8006b7c <tcp_free_acked_segments+0x50>
  while (seg_list != NULL &&
 8006b44:	468b      	mov	fp, r1
 8006b46:	e00a      	b.n	8006b5e <tcp_free_acked_segments+0x32>
    LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= clen));
 8006b48:	4653      	mov	r3, sl
 8006b4a:	f240 4257 	movw	r2, #1111	; 0x457
 8006b4e:	4649      	mov	r1, r9
 8006b50:	4827      	ldr	r0, [pc, #156]	; (8006bf0 <tcp_free_acked_segments+0xc4>)
 8006b52:	f004 fc71 	bl	800b438 <iprintf>
 8006b56:	e030      	b.n	8006bba <tcp_free_acked_segments+0x8e>
      LWIP_ASSERT("tcp_receive: valid queue length",
 8006b58:	f1b8 0f00 	cmp.w	r8, #0
 8006b5c:	d002      	beq.n	8006b64 <tcp_free_acked_segments+0x38>
}
 8006b5e:	4658      	mov	r0, fp
 8006b60:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
      LWIP_ASSERT("tcp_receive: valid queue length",
 8006b64:	4b23      	ldr	r3, [pc, #140]	; (8006bf4 <tcp_free_acked_segments+0xc8>)
 8006b66:	f240 4261 	movw	r2, #1121	; 0x461
 8006b6a:	4923      	ldr	r1, [pc, #140]	; (8006bf8 <tcp_free_acked_segments+0xcc>)
 8006b6c:	4820      	ldr	r0, [pc, #128]	; (8006bf0 <tcp_free_acked_segments+0xc4>)
 8006b6e:	f004 fc63 	bl	800b438 <iprintf>
 8006b72:	e7f4      	b.n	8006b5e <tcp_free_acked_segments+0x32>
  while (seg_list != NULL &&
 8006b74:	f1bb 0f00 	cmp.w	fp, #0
 8006b78:	d0f1      	beq.n	8006b5e <tcp_free_acked_segments+0x32>
 8006b7a:	465d      	mov	r5, fp
         TCP_SEQ_LEQ(lwip_ntohl(seg_list->tcphdr->seqno) +
 8006b7c:	68eb      	ldr	r3, [r5, #12]
 8006b7e:	6858      	ldr	r0, [r3, #4]
 8006b80:	f7fd fcf3 	bl	800456a <lwip_htonl>
 8006b84:	4604      	mov	r4, r0
 8006b86:	f8b5 b008 	ldrh.w	fp, [r5, #8]
 8006b8a:	68eb      	ldr	r3, [r5, #12]
 8006b8c:	8998      	ldrh	r0, [r3, #12]
 8006b8e:	f7fd fce7 	bl	8004560 <lwip_htons>
 8006b92:	683b      	ldr	r3, [r7, #0]
 8006b94:	1ae4      	subs	r4, r4, r3
 8006b96:	445c      	add	r4, fp
 8006b98:	f010 0003 	ands.w	r0, r0, #3
 8006b9c:	bf18      	it	ne
 8006b9e:	2001      	movne	r0, #1
 8006ba0:	4404      	add	r4, r0
  while (seg_list != NULL &&
 8006ba2:	2c00      	cmp	r4, #0
 8006ba4:	dc1f      	bgt.n	8006be6 <tcp_free_acked_segments+0xba>
    seg_list = seg_list->next;
 8006ba6:	f8d5 b000 	ldr.w	fp, [r5]
    clen = pbuf_clen(next->p);
 8006baa:	6868      	ldr	r0, [r5, #4]
 8006bac:	f7fe fc56 	bl	800545c <pbuf_clen>
 8006bb0:	4604      	mov	r4, r0
    LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= clen));
 8006bb2:	f8b6 3066 	ldrh.w	r3, [r6, #102]	; 0x66
 8006bb6:	4283      	cmp	r3, r0
 8006bb8:	d3c6      	bcc.n	8006b48 <tcp_free_acked_segments+0x1c>
    pcb->snd_queuelen = (u16_t)(pcb->snd_queuelen - clen);
 8006bba:	f8b6 0066 	ldrh.w	r0, [r6, #102]	; 0x66
 8006bbe:	1b04      	subs	r4, r0, r4
 8006bc0:	f8a6 4066 	strh.w	r4, [r6, #102]	; 0x66
    recv_acked = (tcpwnd_size_t)(recv_acked + next->len);
 8006bc4:	4a0d      	ldr	r2, [pc, #52]	; (8006bfc <tcp_free_acked_segments+0xd0>)
 8006bc6:	892b      	ldrh	r3, [r5, #8]
 8006bc8:	8811      	ldrh	r1, [r2, #0]
 8006bca:	440b      	add	r3, r1
 8006bcc:	8013      	strh	r3, [r2, #0]
    tcp_seg_free(next);
 8006bce:	4628      	mov	r0, r5
 8006bd0:	f7fe ff88 	bl	8005ae4 <tcp_seg_free>
    if (pcb->snd_queuelen != 0) {
 8006bd4:	f8b6 3066 	ldrh.w	r3, [r6, #102]	; 0x66
 8006bd8:	2b00      	cmp	r3, #0
 8006bda:	d0cb      	beq.n	8006b74 <tcp_free_acked_segments+0x48>
      LWIP_ASSERT("tcp_receive: valid queue length",
 8006bdc:	f1bb 0f00 	cmp.w	fp, #0
 8006be0:	d0ba      	beq.n	8006b58 <tcp_free_acked_segments+0x2c>
 8006be2:	465d      	mov	r5, fp
 8006be4:	e7ca      	b.n	8006b7c <tcp_free_acked_segments+0x50>
 8006be6:	46ab      	mov	fp, r5
  return seg_list;
 8006be8:	e7b9      	b.n	8006b5e <tcp_free_acked_segments+0x32>
 8006bea:	bf00      	nop
 8006bec:	2000ae74 	.word	0x2000ae74
 8006bf0:	0800cb24 	.word	0x0800cb24
 8006bf4:	08011488 	.word	0x08011488
 8006bf8:	08011528 	.word	0x08011528
 8006bfc:	2000ae8c 	.word	0x2000ae8c
 8006c00:	08011500 	.word	0x08011500

08006c04 <tcp_oos_insert_segment>:
{
 8006c04:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006c08:	460c      	mov	r4, r1
  LWIP_ASSERT("tcp_oos_insert_segment: invalid cseg", cseg != NULL);
 8006c0a:	4605      	mov	r5, r0
 8006c0c:	b160      	cbz	r0, 8006c28 <tcp_oos_insert_segment+0x24>
  if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 8006c0e:	68eb      	ldr	r3, [r5, #12]
 8006c10:	8998      	ldrh	r0, [r3, #12]
 8006c12:	f7fd fca5 	bl	8004560 <lwip_htons>
 8006c16:	f010 0f01 	tst.w	r0, #1
 8006c1a:	d10d      	bne.n	8006c38 <tcp_oos_insert_segment+0x34>
    while (next &&
 8006c1c:	2c00      	cmp	r4, #0
 8006c1e:	d035      	beq.n	8006c8c <tcp_oos_insert_segment+0x88>
           TCP_SEQ_GEQ((seqno + cseg->len),
 8006c20:	4e20      	ldr	r6, [pc, #128]	; (8006ca4 <tcp_oos_insert_segment+0xa0>)
        TCPH_SET_FLAG(cseg->tcphdr, TCP_FIN);
 8006c22:	f04f 0901 	mov.w	r9, #1
 8006c26:	e014      	b.n	8006c52 <tcp_oos_insert_segment+0x4e>
  LWIP_ASSERT("tcp_oos_insert_segment: invalid cseg", cseg != NULL);
 8006c28:	4b1f      	ldr	r3, [pc, #124]	; (8006ca8 <tcp_oos_insert_segment+0xa4>)
 8006c2a:	f240 421f 	movw	r2, #1055	; 0x41f
 8006c2e:	491f      	ldr	r1, [pc, #124]	; (8006cac <tcp_oos_insert_segment+0xa8>)
 8006c30:	481f      	ldr	r0, [pc, #124]	; (8006cb0 <tcp_oos_insert_segment+0xac>)
 8006c32:	f004 fc01 	bl	800b438 <iprintf>
 8006c36:	e7ea      	b.n	8006c0e <tcp_oos_insert_segment+0xa>
    tcp_segs_free(next);
 8006c38:	4620      	mov	r0, r4
 8006c3a:	f7fe ff60 	bl	8005afe <tcp_segs_free>
    next = NULL;
 8006c3e:	2400      	movs	r4, #0
  cseg->next = next;
 8006c40:	602c      	str	r4, [r5, #0]
}
 8006c42:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
      next = next->next;
 8006c46:	6827      	ldr	r7, [r4, #0]
      tcp_seg_free(old_seg);
 8006c48:	4620      	mov	r0, r4
 8006c4a:	f7fe ff4b 	bl	8005ae4 <tcp_seg_free>
    while (next &&
 8006c4e:	b1ef      	cbz	r7, 8006c8c <tcp_oos_insert_segment+0x88>
      next = next->next;
 8006c50:	463c      	mov	r4, r7
           TCP_SEQ_GEQ((seqno + cseg->len),
 8006c52:	f8d6 c000 	ldr.w	ip, [r6]
 8006c56:	68e1      	ldr	r1, [r4, #12]
 8006c58:	6848      	ldr	r0, [r1, #4]
 8006c5a:	892b      	ldrh	r3, [r5, #8]
 8006c5c:	4463      	add	r3, ip
 8006c5e:	1a1b      	subs	r3, r3, r0
 8006c60:	8922      	ldrh	r2, [r4, #8]
 8006c62:	1a9a      	subs	r2, r3, r2
    while (next &&
 8006c64:	2a00      	cmp	r2, #0
 8006c66:	db13      	blt.n	8006c90 <tcp_oos_insert_segment+0x8c>
      if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 8006c68:	8988      	ldrh	r0, [r1, #12]
 8006c6a:	f7fd fc79 	bl	8004560 <lwip_htons>
 8006c6e:	f010 0f01 	tst.w	r0, #1
 8006c72:	d0e8      	beq.n	8006c46 <tcp_oos_insert_segment+0x42>
        TCPH_SET_FLAG(cseg->tcphdr, TCP_FIN);
 8006c74:	68eb      	ldr	r3, [r5, #12]
 8006c76:	f8b3 800c 	ldrh.w	r8, [r3, #12]
 8006c7a:	4648      	mov	r0, r9
 8006c7c:	f7fd fc70 	bl	8004560 <lwip_htons>
 8006c80:	68eb      	ldr	r3, [r5, #12]
 8006c82:	ea48 0800 	orr.w	r8, r8, r0
 8006c86:	f8a3 800c 	strh.w	r8, [r3, #12]
 8006c8a:	e7dc      	b.n	8006c46 <tcp_oos_insert_segment+0x42>
    next = NULL;
 8006c8c:	2400      	movs	r4, #0
 8006c8e:	e7d7      	b.n	8006c40 <tcp_oos_insert_segment+0x3c>
    if (next &&
 8006c90:	2b00      	cmp	r3, #0
 8006c92:	ddd5      	ble.n	8006c40 <tcp_oos_insert_segment+0x3c>
      cseg->len = (u16_t)(next->tcphdr->seqno - seqno);
 8006c94:	eba0 010c 	sub.w	r1, r0, ip
 8006c98:	b289      	uxth	r1, r1
 8006c9a:	8129      	strh	r1, [r5, #8]
      pbuf_realloc(cseg->p, cseg->len);
 8006c9c:	6868      	ldr	r0, [r5, #4]
 8006c9e:	f7fe fb7d 	bl	800539c <pbuf_realloc>
 8006ca2:	e7cd      	b.n	8006c40 <tcp_oos_insert_segment+0x3c>
 8006ca4:	2000ae98 	.word	0x2000ae98
 8006ca8:	08011488 	.word	0x08011488
 8006cac:	08011548 	.word	0x08011548
 8006cb0:	0800cb24 	.word	0x0800cb24

08006cb4 <tcp_receive>:
{
 8006cb4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  LWIP_ASSERT("tcp_receive: invalid pcb", pcb != NULL);
 8006cb8:	4604      	mov	r4, r0
 8006cba:	2800      	cmp	r0, #0
 8006cbc:	d066      	beq.n	8006d8c <tcp_receive+0xd8>
  LWIP_ASSERT("tcp_receive: wrong state", pcb->state >= ESTABLISHED);
 8006cbe:	7d23      	ldrb	r3, [r4, #20]
 8006cc0:	2b03      	cmp	r3, #3
 8006cc2:	d96b      	bls.n	8006d9c <tcp_receive+0xe8>
  if (flags & TCP_ACK) {
 8006cc4:	4ba4      	ldr	r3, [pc, #656]	; (8006f58 <tcp_receive+0x2a4>)
 8006cc6:	781b      	ldrb	r3, [r3, #0]
 8006cc8:	f013 0f10 	tst.w	r3, #16
 8006ccc:	d03a      	beq.n	8006d44 <tcp_receive+0x90>
    right_wnd_edge = pcb->snd_wnd + pcb->snd_wl2;
 8006cce:	f8b4 5060 	ldrh.w	r5, [r4, #96]	; 0x60
 8006cd2:	6da0      	ldr	r0, [r4, #88]	; 0x58
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 8006cd4:	6d62      	ldr	r2, [r4, #84]	; 0x54
 8006cd6:	4ba1      	ldr	r3, [pc, #644]	; (8006f5c <tcp_receive+0x2a8>)
 8006cd8:	681b      	ldr	r3, [r3, #0]
 8006cda:	1ad1      	subs	r1, r2, r3
 8006cdc:	2900      	cmp	r1, #0
 8006cde:	db0a      	blt.n	8006cf6 <tcp_receive+0x42>
 8006ce0:	429a      	cmp	r2, r3
 8006ce2:	d063      	beq.n	8006dac <tcp_receive+0xf8>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 8006ce4:	4a9e      	ldr	r2, [pc, #632]	; (8006f60 <tcp_receive+0x2ac>)
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 8006ce6:	6812      	ldr	r2, [r2, #0]
 8006ce8:	4290      	cmp	r0, r2
 8006cea:	d114      	bne.n	8006d16 <tcp_receive+0x62>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 8006cec:	4a9d      	ldr	r2, [pc, #628]	; (8006f64 <tcp_receive+0x2b0>)
 8006cee:	6812      	ldr	r2, [r2, #0]
 8006cf0:	89d2      	ldrh	r2, [r2, #14]
 8006cf2:	42aa      	cmp	r2, r5
 8006cf4:	d90f      	bls.n	8006d16 <tcp_receive+0x62>
      pcb->snd_wnd = SND_WND_SCALE(pcb, tcphdr->wnd);
 8006cf6:	4a9b      	ldr	r2, [pc, #620]	; (8006f64 <tcp_receive+0x2b0>)
 8006cf8:	6812      	ldr	r2, [r2, #0]
 8006cfa:	89d2      	ldrh	r2, [r2, #14]
 8006cfc:	b291      	uxth	r1, r2
 8006cfe:	f8a4 2060 	strh.w	r2, [r4, #96]	; 0x60
      if (pcb->snd_wnd_max < pcb->snd_wnd) {
 8006d02:	f8b4 6062 	ldrh.w	r6, [r4, #98]	; 0x62
 8006d06:	428e      	cmp	r6, r1
        pcb->snd_wnd_max = pcb->snd_wnd;
 8006d08:	bf38      	it	cc
 8006d0a:	f8a4 2062 	strhcc.w	r2, [r4, #98]	; 0x62
      pcb->snd_wl1 = seqno;
 8006d0e:	6563      	str	r3, [r4, #84]	; 0x54
      pcb->snd_wl2 = ackno;
 8006d10:	4b93      	ldr	r3, [pc, #588]	; (8006f60 <tcp_receive+0x2ac>)
 8006d12:	681b      	ldr	r3, [r3, #0]
 8006d14:	65a3      	str	r3, [r4, #88]	; 0x58
    if (TCP_SEQ_LEQ(ackno, pcb->lastack)) {
 8006d16:	4b92      	ldr	r3, [pc, #584]	; (8006f60 <tcp_receive+0x2ac>)
 8006d18:	681b      	ldr	r3, [r3, #0]
 8006d1a:	6c61      	ldr	r1, [r4, #68]	; 0x44
 8006d1c:	1a5a      	subs	r2, r3, r1
 8006d1e:	2a00      	cmp	r2, #0
 8006d20:	dd4a      	ble.n	8006db8 <tcp_receive+0x104>
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8006d22:	6d22      	ldr	r2, [r4, #80]	; 0x50
 8006d24:	1a9a      	subs	r2, r3, r2
 8006d26:	2a00      	cmp	r2, #0
 8006d28:	f340 808a 	ble.w	8006e40 <tcp_receive+0x18c>
      tcp_send_empty_ack(pcb);
 8006d2c:	4620      	mov	r0, r4
 8006d2e:	f002 fa4d 	bl	80091cc <tcp_send_empty_ack>
    if (pcb->rttest && TCP_SEQ_LT(pcb->rtseq, ackno)) {
 8006d32:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8006d34:	b133      	cbz	r3, 8006d44 <tcp_receive+0x90>
 8006d36:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8006d38:	4989      	ldr	r1, [pc, #548]	; (8006f60 <tcp_receive+0x2ac>)
 8006d3a:	6809      	ldr	r1, [r1, #0]
 8006d3c:	1a52      	subs	r2, r2, r1
 8006d3e:	2a00      	cmp	r2, #0
 8006d40:	f2c0 8131 	blt.w	8006fa6 <tcp_receive+0x2f2>
  if ((tcplen > 0) && (pcb->state < CLOSE_WAIT)) {
 8006d44:	4b88      	ldr	r3, [pc, #544]	; (8006f68 <tcp_receive+0x2b4>)
 8006d46:	881a      	ldrh	r2, [r3, #0]
 8006d48:	2a00      	cmp	r2, #0
 8006d4a:	d058      	beq.n	8006dfe <tcp_receive+0x14a>
 8006d4c:	7d23      	ldrb	r3, [r4, #20]
 8006d4e:	2b06      	cmp	r3, #6
 8006d50:	d855      	bhi.n	8006dfe <tcp_receive+0x14a>
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 8006d52:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8006d54:	4b81      	ldr	r3, [pc, #516]	; (8006f5c <tcp_receive+0x2a8>)
 8006d56:	681b      	ldr	r3, [r3, #0]
 8006d58:	1ace      	subs	r6, r1, r3
 8006d5a:	2e01      	cmp	r6, #1
 8006d5c:	d406      	bmi.n	8006d6c <tcp_receive+0xb8>
 8006d5e:	f1c3 0001 	rsb	r0, r3, #1
 8006d62:	1a82      	subs	r2, r0, r2
 8006d64:	440a      	add	r2, r1
 8006d66:	2a00      	cmp	r2, #0
 8006d68:	f340 813f 	ble.w	8006fea <tcp_receive+0x336>
      if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
 8006d6c:	1a5a      	subs	r2, r3, r1
 8006d6e:	2a00      	cmp	r2, #0
 8006d70:	f2c0 8185 	blt.w	800707e <tcp_receive+0x3ca>
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 8006d74:	8d22      	ldrh	r2, [r4, #40]	; 0x28
 8006d76:	f1c2 0201 	rsb	r2, r2, #1
 8006d7a:	441a      	add	r2, r3
 8006d7c:	1a52      	subs	r2, r2, r1
 8006d7e:	2a00      	cmp	r2, #0
 8006d80:	f340 8182 	ble.w	8007088 <tcp_receive+0x3d4>
      tcp_send_empty_ack(pcb);
 8006d84:	4620      	mov	r0, r4
 8006d86:	f002 fa21 	bl	80091cc <tcp_send_empty_ack>
 8006d8a:	e048      	b.n	8006e1e <tcp_receive+0x16a>
  LWIP_ASSERT("tcp_receive: invalid pcb", pcb != NULL);
 8006d8c:	4b77      	ldr	r3, [pc, #476]	; (8006f6c <tcp_receive+0x2b8>)
 8006d8e:	f240 427b 	movw	r2, #1147	; 0x47b
 8006d92:	4977      	ldr	r1, [pc, #476]	; (8006f70 <tcp_receive+0x2bc>)
 8006d94:	4877      	ldr	r0, [pc, #476]	; (8006f74 <tcp_receive+0x2c0>)
 8006d96:	f004 fb4f 	bl	800b438 <iprintf>
 8006d9a:	e790      	b.n	8006cbe <tcp_receive+0xa>
  LWIP_ASSERT("tcp_receive: wrong state", pcb->state >= ESTABLISHED);
 8006d9c:	4b73      	ldr	r3, [pc, #460]	; (8006f6c <tcp_receive+0x2b8>)
 8006d9e:	f240 427c 	movw	r2, #1148	; 0x47c
 8006da2:	4975      	ldr	r1, [pc, #468]	; (8006f78 <tcp_receive+0x2c4>)
 8006da4:	4873      	ldr	r0, [pc, #460]	; (8006f74 <tcp_receive+0x2c0>)
 8006da6:	f004 fb47 	bl	800b438 <iprintf>
 8006daa:	e78b      	b.n	8006cc4 <tcp_receive+0x10>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 8006dac:	4a6c      	ldr	r2, [pc, #432]	; (8006f60 <tcp_receive+0x2ac>)
 8006dae:	6812      	ldr	r2, [r2, #0]
 8006db0:	1a82      	subs	r2, r0, r2
 8006db2:	2a00      	cmp	r2, #0
 8006db4:	da96      	bge.n	8006ce4 <tcp_receive+0x30>
 8006db6:	e79e      	b.n	8006cf6 <tcp_receive+0x42>
      if (tcplen == 0) {
 8006db8:	4a6b      	ldr	r2, [pc, #428]	; (8006f68 <tcp_receive+0x2b4>)
 8006dba:	8812      	ldrh	r2, [r2, #0]
 8006dbc:	b932      	cbnz	r2, 8006dcc <tcp_receive+0x118>
        if (pcb->snd_wl2 + pcb->snd_wnd == right_wnd_edge) {
 8006dbe:	f8b4 2060 	ldrh.w	r2, [r4, #96]	; 0x60
 8006dc2:	6da6      	ldr	r6, [r4, #88]	; 0x58
 8006dc4:	4432      	add	r2, r6
    right_wnd_edge = pcb->snd_wnd + pcb->snd_wl2;
 8006dc6:	4428      	add	r0, r5
        if (pcb->snd_wl2 + pcb->snd_wnd == right_wnd_edge) {
 8006dc8:	4282      	cmp	r2, r0
 8006dca:	d003      	beq.n	8006dd4 <tcp_receive+0x120>
        pcb->dupacks = 0;
 8006dcc:	2300      	movs	r3, #0
 8006dce:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006dd2:	e7ae      	b.n	8006d32 <tcp_receive+0x7e>
          if (pcb->rtime >= 0) {
 8006dd4:	f9b4 2030 	ldrsh.w	r2, [r4, #48]	; 0x30
 8006dd8:	2a00      	cmp	r2, #0
 8006dda:	dbf7      	blt.n	8006dcc <tcp_receive+0x118>
            if (pcb->lastack == ackno) {
 8006ddc:	428b      	cmp	r3, r1
 8006dde:	d1f5      	bne.n	8006dcc <tcp_receive+0x118>
              if ((u8_t)(pcb->dupacks + 1) > pcb->dupacks) {
 8006de0:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8006de4:	2bff      	cmp	r3, #255	; 0xff
 8006de6:	d01c      	beq.n	8006e22 <tcp_receive+0x16e>
                ++pcb->dupacks;
 8006de8:	3301      	adds	r3, #1
 8006dea:	b2db      	uxtb	r3, r3
 8006dec:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
              if (pcb->dupacks > 3) {
 8006df0:	2b03      	cmp	r3, #3
 8006df2:	d816      	bhi.n	8006e22 <tcp_receive+0x16e>
              if (pcb->dupacks >= 3) {
 8006df4:	2b03      	cmp	r3, #3
 8006df6:	d01f      	beq.n	8006e38 <tcp_receive+0x184>
    if (pcb->rttest && TCP_SEQ_LT(pcb->rtseq, ackno)) {
 8006df8:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8006dfa:	2b00      	cmp	r3, #0
 8006dfc:	d19b      	bne.n	8006d36 <tcp_receive+0x82>
    if (!TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
 8006dfe:	4b57      	ldr	r3, [pc, #348]	; (8006f5c <tcp_receive+0x2a8>)
 8006e00:	681b      	ldr	r3, [r3, #0]
 8006e02:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8006e04:	1a99      	subs	r1, r3, r2
 8006e06:	2900      	cmp	r1, #0
 8006e08:	db05      	blt.n	8006e16 <tcp_receive+0x162>
 8006e0a:	3301      	adds	r3, #1
 8006e0c:	1a9b      	subs	r3, r3, r2
 8006e0e:	8d22      	ldrh	r2, [r4, #40]	; 0x28
 8006e10:	1a9b      	subs	r3, r3, r2
 8006e12:	2b00      	cmp	r3, #0
 8006e14:	dd03      	ble.n	8006e1e <tcp_receive+0x16a>
      tcp_ack_now(pcb);
 8006e16:	8b63      	ldrh	r3, [r4, #26]
 8006e18:	f043 0302 	orr.w	r3, r3, #2
 8006e1c:	8363      	strh	r3, [r4, #26]
}
 8006e1e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
                TCP_WND_INC(pcb->cwnd, pcb->mss);
 8006e22:	f8b4 2048 	ldrh.w	r2, [r4, #72]	; 0x48
 8006e26:	8e63      	ldrh	r3, [r4, #50]	; 0x32
 8006e28:	4413      	add	r3, r2
 8006e2a:	b29b      	uxth	r3, r3
 8006e2c:	429a      	cmp	r2, r3
 8006e2e:	bf88      	it	hi
 8006e30:	f64f 73ff 	movwhi	r3, #65535	; 0xffff
 8006e34:	f8a4 3048 	strh.w	r3, [r4, #72]	; 0x48
                tcp_rexmit_fast(pcb);
 8006e38:	4620      	mov	r0, r4
 8006e3a:	f002 f943 	bl	80090c4 <tcp_rexmit_fast>
      if (!found_dupack) {
 8006e3e:	e778      	b.n	8006d32 <tcp_receive+0x7e>
      if (pcb->flags & TF_INFR) {
 8006e40:	8b62      	ldrh	r2, [r4, #26]
 8006e42:	f012 0f04 	tst.w	r2, #4
 8006e46:	d009      	beq.n	8006e5c <tcp_receive+0x1a8>
        tcp_clear_flags(pcb, TF_INFR);
 8006e48:	f022 0204 	bic.w	r2, r2, #4
 8006e4c:	8362      	strh	r2, [r4, #26]
        pcb->cwnd = pcb->ssthresh;
 8006e4e:	f8b4 204a 	ldrh.w	r2, [r4, #74]	; 0x4a
 8006e52:	f8a4 2048 	strh.w	r2, [r4, #72]	; 0x48
        pcb->bytes_acked = 0;
 8006e56:	2200      	movs	r2, #0
 8006e58:	f8a4 206a 	strh.w	r2, [r4, #106]	; 0x6a
      pcb->nrtx = 0;
 8006e5c:	2000      	movs	r0, #0
 8006e5e:	f884 0042 	strb.w	r0, [r4, #66]	; 0x42
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 8006e62:	f9b4 503c 	ldrsh.w	r5, [r4, #60]	; 0x3c
 8006e66:	8fe2      	ldrh	r2, [r4, #62]	; 0x3e
 8006e68:	eb02 02e5 	add.w	r2, r2, r5, asr #3
 8006e6c:	f8a4 2040 	strh.w	r2, [r4, #64]	; 0x40
      pcb->dupacks = 0;
 8006e70:	f884 0043 	strb.w	r0, [r4, #67]	; 0x43
      pcb->lastack = ackno;
 8006e74:	6463      	str	r3, [r4, #68]	; 0x44
      if (pcb->state >= ESTABLISHED) {
 8006e76:	7d22      	ldrb	r2, [r4, #20]
 8006e78:	2a03      	cmp	r2, #3
 8006e7a:	d91c      	bls.n	8006eb6 <tcp_receive+0x202>
      acked = (tcpwnd_size_t)(ackno - pcb->lastack);
 8006e7c:	1a5b      	subs	r3, r3, r1
 8006e7e:	b29b      	uxth	r3, r3
        if (pcb->cwnd < pcb->ssthresh) {
 8006e80:	f8b4 2048 	ldrh.w	r2, [r4, #72]	; 0x48
 8006e84:	f8b4 104a 	ldrh.w	r1, [r4, #74]	; 0x4a
 8006e88:	4291      	cmp	r1, r2
 8006e8a:	d948      	bls.n	8006f1e <tcp_receive+0x26a>
          u8_t num_seg = (pcb->flags & TF_RTO) ? 1 : 2;
 8006e8c:	8b61      	ldrh	r1, [r4, #26]
 8006e8e:	f411 6f00 	tst.w	r1, #2048	; 0x800
 8006e92:	bf14      	ite	ne
 8006e94:	2001      	movne	r0, #1
 8006e96:	2002      	moveq	r0, #2
          increase = LWIP_MIN(acked, (tcpwnd_size_t)(num_seg * pcb->mss));
 8006e98:	8e61      	ldrh	r1, [r4, #50]	; 0x32
 8006e9a:	fb11 f100 	smulbb	r1, r1, r0
 8006e9e:	b289      	uxth	r1, r1
          TCP_WND_INC(pcb->cwnd, increase);
 8006ea0:	4299      	cmp	r1, r3
 8006ea2:	bf94      	ite	ls
 8006ea4:	1850      	addls	r0, r2, r1
 8006ea6:	18d0      	addhi	r0, r2, r3
 8006ea8:	b283      	uxth	r3, r0
 8006eaa:	429a      	cmp	r2, r3
 8006eac:	bf88      	it	hi
 8006eae:	f64f 73ff 	movwhi	r3, #65535	; 0xffff
 8006eb2:	f8a4 3048 	strh.w	r3, [r4, #72]	; 0x48
      pcb->unacked = tcp_free_acked_segments(pcb, pcb->unacked, "unacked", pcb->unsent);
 8006eb6:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 8006eb8:	4a30      	ldr	r2, [pc, #192]	; (8006f7c <tcp_receive+0x2c8>)
 8006eba:	6f21      	ldr	r1, [r4, #112]	; 0x70
 8006ebc:	4620      	mov	r0, r4
 8006ebe:	f7ff fe35 	bl	8006b2c <tcp_free_acked_segments>
 8006ec2:	4603      	mov	r3, r0
 8006ec4:	6720      	str	r0, [r4, #112]	; 0x70
      pcb->unsent = tcp_free_acked_segments(pcb, pcb->unsent, "unsent", pcb->unacked);
 8006ec6:	4a2e      	ldr	r2, [pc, #184]	; (8006f80 <tcp_receive+0x2cc>)
 8006ec8:	6ee1      	ldr	r1, [r4, #108]	; 0x6c
 8006eca:	4620      	mov	r0, r4
 8006ecc:	f7ff fe2e 	bl	8006b2c <tcp_free_acked_segments>
 8006ed0:	66e0      	str	r0, [r4, #108]	; 0x6c
      if (pcb->unacked == NULL) {
 8006ed2:	6f22      	ldr	r2, [r4, #112]	; 0x70
 8006ed4:	fab2 f382 	clz	r3, r2
 8006ed8:	095b      	lsrs	r3, r3, #5
 8006eda:	425b      	negs	r3, r3
 8006edc:	8623      	strh	r3, [r4, #48]	; 0x30
      pcb->polltmr = 0;
 8006ede:	2300      	movs	r3, #0
 8006ee0:	7723      	strb	r3, [r4, #28]
      if (pcb->unsent == NULL) {
 8006ee2:	2800      	cmp	r0, #0
 8006ee4:	d035      	beq.n	8006f52 <tcp_receive+0x29e>
      pcb->snd_buf = (tcpwnd_size_t)(pcb->snd_buf + recv_acked);
 8006ee6:	f8b4 3064 	ldrh.w	r3, [r4, #100]	; 0x64
 8006eea:	4926      	ldr	r1, [pc, #152]	; (8006f84 <tcp_receive+0x2d0>)
 8006eec:	8809      	ldrh	r1, [r1, #0]
 8006eee:	440b      	add	r3, r1
 8006ef0:	f8a4 3064 	strh.w	r3, [r4, #100]	; 0x64
      if (pcb->flags & TF_RTO) {
 8006ef4:	8b63      	ldrh	r3, [r4, #26]
 8006ef6:	f413 6f00 	tst.w	r3, #2048	; 0x800
 8006efa:	f43f af1a 	beq.w	8006d32 <tcp_receive+0x7e>
        if (pcb->unacked == NULL) {
 8006efe:	2a00      	cmp	r2, #0
 8006f00:	d042      	beq.n	8006f88 <tcp_receive+0x2d4>
        } else if (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unacked->tcphdr->seqno))) {
 8006f02:	6ce5      	ldr	r5, [r4, #76]	; 0x4c
 8006f04:	68d3      	ldr	r3, [r2, #12]
 8006f06:	6858      	ldr	r0, [r3, #4]
 8006f08:	f7fd fb2f 	bl	800456a <lwip_htonl>
 8006f0c:	1a2d      	subs	r5, r5, r0
 8006f0e:	2d00      	cmp	r5, #0
 8006f10:	f73f af0f 	bgt.w	8006d32 <tcp_receive+0x7e>
          tcp_clear_flags(pcb, TF_RTO);
 8006f14:	8b63      	ldrh	r3, [r4, #26]
 8006f16:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006f1a:	8363      	strh	r3, [r4, #26]
 8006f1c:	e709      	b.n	8006d32 <tcp_receive+0x7e>
          TCP_WND_INC(pcb->bytes_acked, acked);
 8006f1e:	f8b4 106a 	ldrh.w	r1, [r4, #106]	; 0x6a
 8006f22:	440b      	add	r3, r1
 8006f24:	b29b      	uxth	r3, r3
 8006f26:	4299      	cmp	r1, r3
 8006f28:	d804      	bhi.n	8006f34 <tcp_receive+0x280>
          if (pcb->bytes_acked >= pcb->cwnd) {
 8006f2a:	429a      	cmp	r2, r3
 8006f2c:	d904      	bls.n	8006f38 <tcp_receive+0x284>
 8006f2e:	f8a4 306a 	strh.w	r3, [r4, #106]	; 0x6a
 8006f32:	e7c0      	b.n	8006eb6 <tcp_receive+0x202>
          TCP_WND_INC(pcb->bytes_acked, acked);
 8006f34:	f64f 73ff 	movw	r3, #65535	; 0xffff
            pcb->bytes_acked = (tcpwnd_size_t)(pcb->bytes_acked - pcb->cwnd);
 8006f38:	1a9b      	subs	r3, r3, r2
 8006f3a:	f8a4 306a 	strh.w	r3, [r4, #106]	; 0x6a
            TCP_WND_INC(pcb->cwnd, pcb->mss);
 8006f3e:	8e63      	ldrh	r3, [r4, #50]	; 0x32
 8006f40:	4413      	add	r3, r2
 8006f42:	b29b      	uxth	r3, r3
 8006f44:	429a      	cmp	r2, r3
 8006f46:	bf88      	it	hi
 8006f48:	f64f 73ff 	movwhi	r3, #65535	; 0xffff
 8006f4c:	f8a4 3048 	strh.w	r3, [r4, #72]	; 0x48
 8006f50:	e7b1      	b.n	8006eb6 <tcp_receive+0x202>
        pcb->unsent_oversize = 0;
 8006f52:	f8a4 3068 	strh.w	r3, [r4, #104]	; 0x68
 8006f56:	e7c6      	b.n	8006ee6 <tcp_receive+0x232>
 8006f58:	2000ae78 	.word	0x2000ae78
 8006f5c:	2000ae98 	.word	0x2000ae98
 8006f60:	2000ae74 	.word	0x2000ae74
 8006f64:	2000aea4 	.word	0x2000aea4
 8006f68:	2000aeb2 	.word	0x2000aeb2
 8006f6c:	08011488 	.word	0x08011488
 8006f70:	08011570 	.word	0x08011570
 8006f74:	0800cb24 	.word	0x0800cb24
 8006f78:	0801158c 	.word	0x0801158c
 8006f7c:	080115a8 	.word	0x080115a8
 8006f80:	080115b0 	.word	0x080115b0
 8006f84:	2000ae8c 	.word	0x2000ae8c
          if ((pcb->unsent == NULL) ||
 8006f88:	b140      	cbz	r0, 8006f9c <tcp_receive+0x2e8>
              (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unsent->tcphdr->seqno)))) {
 8006f8a:	6ce5      	ldr	r5, [r4, #76]	; 0x4c
 8006f8c:	68c3      	ldr	r3, [r0, #12]
 8006f8e:	6858      	ldr	r0, [r3, #4]
 8006f90:	f7fd faeb 	bl	800456a <lwip_htonl>
 8006f94:	1a2d      	subs	r5, r5, r0
          if ((pcb->unsent == NULL) ||
 8006f96:	2d00      	cmp	r5, #0
 8006f98:	f73f aecb 	bgt.w	8006d32 <tcp_receive+0x7e>
            tcp_clear_flags(pcb, TF_RTO);
 8006f9c:	8b63      	ldrh	r3, [r4, #26]
 8006f9e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006fa2:	8363      	strh	r3, [r4, #26]
 8006fa4:	e6c5      	b.n	8006d32 <tcp_receive+0x7e>
      m = (s16_t)(tcp_ticks - pcb->rttest);
 8006fa6:	4a9a      	ldr	r2, [pc, #616]	; (8007210 <tcp_receive+0x55c>)
 8006fa8:	8816      	ldrh	r6, [r2, #0]
 8006faa:	b29b      	uxth	r3, r3
      m = (s16_t)(m - (pcb->sa >> 3));
 8006fac:	f9b4 503c 	ldrsh.w	r5, [r4, #60]	; 0x3c
 8006fb0:	f3c5 02cf 	ubfx	r2, r5, #3, #16
 8006fb4:	1ab1      	subs	r1, r6, r2
 8006fb6:	1ac9      	subs	r1, r1, r3
 8006fb8:	b208      	sxth	r0, r1
      pcb->sa = (s16_t)(pcb->sa + m);
 8006fba:	fa15 f181 	uxtah	r1, r5, r1
 8006fbe:	b209      	sxth	r1, r1
 8006fc0:	87a1      	strh	r1, [r4, #60]	; 0x3c
      if (m < 0) {
 8006fc2:	2800      	cmp	r0, #0
 8006fc4:	db0d      	blt.n	8006fe2 <tcp_receive+0x32e>
      m = (s16_t)(m - (pcb->sv >> 2));
 8006fc6:	f9b4 203e 	ldrsh.w	r2, [r4, #62]	; 0x3e
      pcb->sv = (s16_t)(pcb->sv + m);
 8006fca:	eba2 02a2 	sub.w	r2, r2, r2, asr #2
 8006fce:	1813      	adds	r3, r2, r0
 8006fd0:	b29b      	uxth	r3, r3
 8006fd2:	87e3      	strh	r3, [r4, #62]	; 0x3e
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 8006fd4:	eb03 03e1 	add.w	r3, r3, r1, asr #3
 8006fd8:	f8a4 3040 	strh.w	r3, [r4, #64]	; 0x40
      pcb->rttest = 0;
 8006fdc:	2300      	movs	r3, #0
 8006fde:	6363      	str	r3, [r4, #52]	; 0x34
 8006fe0:	e6b0      	b.n	8006d44 <tcp_receive+0x90>
        m = (s16_t) - m;
 8006fe2:	1b92      	subs	r2, r2, r6
 8006fe4:	4413      	add	r3, r2
 8006fe6:	b218      	sxth	r0, r3
 8006fe8:	e7ed      	b.n	8006fc6 <tcp_receive+0x312>
      struct pbuf *p = inseg.p;
 8006fea:	4b8a      	ldr	r3, [pc, #552]	; (8007214 <tcp_receive+0x560>)
 8006fec:	685d      	ldr	r5, [r3, #4]
      LWIP_ASSERT("inseg.p != NULL", inseg.p);
 8006fee:	2d00      	cmp	r5, #0
 8006ff0:	d02d      	beq.n	800704e <tcp_receive+0x39a>
      LWIP_ASSERT("insane offset!", (off32 < 0xffff));
 8006ff2:	f64f 73fe 	movw	r3, #65534	; 0xfffe
 8006ff6:	429e      	cmp	r6, r3
 8006ff8:	d831      	bhi.n	800705e <tcp_receive+0x3aa>
      off = (u16_t)off32;
 8006ffa:	b2b6      	uxth	r6, r6
      LWIP_ASSERT("pbuf too short!", (((s32_t)inseg.p->tot_len) >= off));
 8006ffc:	4b85      	ldr	r3, [pc, #532]	; (8007214 <tcp_receive+0x560>)
 8006ffe:	685b      	ldr	r3, [r3, #4]
 8007000:	891b      	ldrh	r3, [r3, #8]
 8007002:	42b3      	cmp	r3, r6
 8007004:	d333      	bcc.n	800706e <tcp_receive+0x3ba>
      inseg.len -= off;
 8007006:	4b83      	ldr	r3, [pc, #524]	; (8007214 <tcp_receive+0x560>)
 8007008:	891a      	ldrh	r2, [r3, #8]
 800700a:	1b92      	subs	r2, r2, r6
 800700c:	811a      	strh	r2, [r3, #8]
      new_tot_len = (u16_t)(inseg.p->tot_len - off);
 800700e:	685b      	ldr	r3, [r3, #4]
 8007010:	891a      	ldrh	r2, [r3, #8]
 8007012:	1b92      	subs	r2, r2, r6
 8007014:	b292      	uxth	r2, r2
      while (p->len < off) {
 8007016:	896b      	ldrh	r3, [r5, #10]
 8007018:	429e      	cmp	r6, r3
 800701a:	d908      	bls.n	800702e <tcp_receive+0x37a>
        p->len = 0;
 800701c:	2100      	movs	r1, #0
        off -= p->len;
 800701e:	1af3      	subs	r3, r6, r3
 8007020:	b29e      	uxth	r6, r3
        p->tot_len = new_tot_len;
 8007022:	812a      	strh	r2, [r5, #8]
        p->len = 0;
 8007024:	8169      	strh	r1, [r5, #10]
        p = p->next;
 8007026:	682d      	ldr	r5, [r5, #0]
      while (p->len < off) {
 8007028:	896b      	ldrh	r3, [r5, #10]
 800702a:	42b3      	cmp	r3, r6
 800702c:	d3f7      	bcc.n	800701e <tcp_receive+0x36a>
      pbuf_remove_header(p, off);
 800702e:	4631      	mov	r1, r6
 8007030:	4628      	mov	r0, r5
 8007032:	f7fe f879 	bl	8005128 <pbuf_remove_header>
      inseg.tcphdr->seqno = seqno = pcb->rcv_nxt;
 8007036:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007038:	4a77      	ldr	r2, [pc, #476]	; (8007218 <tcp_receive+0x564>)
 800703a:	6013      	str	r3, [r2, #0]
 800703c:	4a75      	ldr	r2, [pc, #468]	; (8007214 <tcp_receive+0x560>)
 800703e:	68d2      	ldr	r2, [r2, #12]
 8007040:	6053      	str	r3, [r2, #4]
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 8007042:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8007044:	1a5a      	subs	r2, r3, r1
 8007046:	2a00      	cmp	r2, #0
 8007048:	f6bf ae94 	bge.w	8006d74 <tcp_receive+0xc0>
 800704c:	e69a      	b.n	8006d84 <tcp_receive+0xd0>
      LWIP_ASSERT("inseg.p != NULL", inseg.p);
 800704e:	4b73      	ldr	r3, [pc, #460]	; (800721c <tcp_receive+0x568>)
 8007050:	f240 5294 	movw	r2, #1428	; 0x594
 8007054:	4972      	ldr	r1, [pc, #456]	; (8007220 <tcp_receive+0x56c>)
 8007056:	4873      	ldr	r0, [pc, #460]	; (8007224 <tcp_receive+0x570>)
 8007058:	f004 f9ee 	bl	800b438 <iprintf>
 800705c:	e7c9      	b.n	8006ff2 <tcp_receive+0x33e>
      LWIP_ASSERT("insane offset!", (off32 < 0xffff));
 800705e:	4b6f      	ldr	r3, [pc, #444]	; (800721c <tcp_receive+0x568>)
 8007060:	f240 5295 	movw	r2, #1429	; 0x595
 8007064:	4970      	ldr	r1, [pc, #448]	; (8007228 <tcp_receive+0x574>)
 8007066:	486f      	ldr	r0, [pc, #444]	; (8007224 <tcp_receive+0x570>)
 8007068:	f004 f9e6 	bl	800b438 <iprintf>
 800706c:	e7c5      	b.n	8006ffa <tcp_receive+0x346>
      LWIP_ASSERT("pbuf too short!", (((s32_t)inseg.p->tot_len) >= off));
 800706e:	4b6b      	ldr	r3, [pc, #428]	; (800721c <tcp_receive+0x568>)
 8007070:	f240 5297 	movw	r2, #1431	; 0x597
 8007074:	496d      	ldr	r1, [pc, #436]	; (800722c <tcp_receive+0x578>)
 8007076:	486b      	ldr	r0, [pc, #428]	; (8007224 <tcp_receive+0x570>)
 8007078:	f004 f9de 	bl	800b438 <iprintf>
 800707c:	e7c3      	b.n	8007006 <tcp_receive+0x352>
        tcp_ack_now(pcb);
 800707e:	8b63      	ldrh	r3, [r4, #26]
 8007080:	f043 0302 	orr.w	r3, r3, #2
 8007084:	8363      	strh	r3, [r4, #26]
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 8007086:	e67d      	b.n	8006d84 <tcp_receive+0xd0>
      if (pcb->rcv_nxt == seqno) {
 8007088:	428b      	cmp	r3, r1
 800708a:	d008      	beq.n	800709e <tcp_receive+0x3ea>
        if (pcb->ooseq == NULL) {
 800708c:	6f65      	ldr	r5, [r4, #116]	; 0x74
 800708e:	2d00      	cmp	r5, #0
 8007090:	f000 817a 	beq.w	8007388 <tcp_receive+0x6d4>
          struct tcp_seg *next, *prev = NULL;
 8007094:	2600      	movs	r6, #0
                if (TCP_SEQ_BETWEEN(seqno, prev->tcphdr->seqno + 1, next->tcphdr->seqno - 1)) {
 8007096:	1e5f      	subs	r7, r3, #1
 8007098:	f103 0c01 	add.w	ip, r3, #1
 800709c:	e195      	b.n	80073ca <tcp_receive+0x716>
        tcplen = TCP_TCPLEN(&inseg);
 800709e:	4b5d      	ldr	r3, [pc, #372]	; (8007214 <tcp_receive+0x560>)
 80070a0:	891d      	ldrh	r5, [r3, #8]
 80070a2:	68db      	ldr	r3, [r3, #12]
 80070a4:	8998      	ldrh	r0, [r3, #12]
 80070a6:	f7fd fa5b 	bl	8004560 <lwip_htons>
 80070aa:	f010 0303 	ands.w	r3, r0, #3
 80070ae:	bf18      	it	ne
 80070b0:	2301      	movne	r3, #1
 80070b2:	442b      	add	r3, r5
 80070b4:	b29b      	uxth	r3, r3
 80070b6:	4a5e      	ldr	r2, [pc, #376]	; (8007230 <tcp_receive+0x57c>)
 80070b8:	8013      	strh	r3, [r2, #0]
        if (tcplen > pcb->rcv_wnd) {
 80070ba:	8d22      	ldrh	r2, [r4, #40]	; 0x28
 80070bc:	429a      	cmp	r2, r3
 80070be:	d317      	bcc.n	80070f0 <tcp_receive+0x43c>
        if (pcb->ooseq != NULL) {
 80070c0:	6f63      	ldr	r3, [r4, #116]	; 0x74
 80070c2:	2b00      	cmp	r3, #0
 80070c4:	f000 823e 	beq.w	8007544 <tcp_receive+0x890>
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 80070c8:	4b52      	ldr	r3, [pc, #328]	; (8007214 <tcp_receive+0x560>)
 80070ca:	68db      	ldr	r3, [r3, #12]
 80070cc:	8998      	ldrh	r0, [r3, #12]
 80070ce:	f7fd fa47 	bl	8004560 <lwip_htons>
 80070d2:	f010 0f01 	tst.w	r0, #1
 80070d6:	d053      	beq.n	8007180 <tcp_receive+0x4cc>
            while (pcb->ooseq != NULL) {
 80070d8:	6f60      	ldr	r0, [r4, #116]	; 0x74
 80070da:	2800      	cmp	r0, #0
 80070dc:	f000 8232 	beq.w	8007544 <tcp_receive+0x890>
              pcb->ooseq = pcb->ooseq->next;
 80070e0:	6803      	ldr	r3, [r0, #0]
 80070e2:	6763      	str	r3, [r4, #116]	; 0x74
              tcp_seg_free(old_ooseq);
 80070e4:	f7fe fcfe 	bl	8005ae4 <tcp_seg_free>
            while (pcb->ooseq != NULL) {
 80070e8:	6f60      	ldr	r0, [r4, #116]	; 0x74
 80070ea:	2800      	cmp	r0, #0
 80070ec:	d1f8      	bne.n	80070e0 <tcp_receive+0x42c>
 80070ee:	e229      	b.n	8007544 <tcp_receive+0x890>
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 80070f0:	4b48      	ldr	r3, [pc, #288]	; (8007214 <tcp_receive+0x560>)
 80070f2:	68db      	ldr	r3, [r3, #12]
 80070f4:	8998      	ldrh	r0, [r3, #12]
 80070f6:	f7fd fa33 	bl	8004560 <lwip_htons>
 80070fa:	f010 0f01 	tst.w	r0, #1
 80070fe:	d12f      	bne.n	8007160 <tcp_receive+0x4ac>
          inseg.len = (u16_t)pcb->rcv_wnd;
 8007100:	4b44      	ldr	r3, [pc, #272]	; (8007214 <tcp_receive+0x560>)
 8007102:	8d22      	ldrh	r2, [r4, #40]	; 0x28
 8007104:	811a      	strh	r2, [r3, #8]
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 8007106:	68db      	ldr	r3, [r3, #12]
 8007108:	8998      	ldrh	r0, [r3, #12]
 800710a:	f7fd fa29 	bl	8004560 <lwip_htons>
 800710e:	f010 0f02 	tst.w	r0, #2
 8007112:	d003      	beq.n	800711c <tcp_receive+0x468>
            inseg.len -= 1;
 8007114:	4a3f      	ldr	r2, [pc, #252]	; (8007214 <tcp_receive+0x560>)
 8007116:	8913      	ldrh	r3, [r2, #8]
 8007118:	3b01      	subs	r3, #1
 800711a:	8113      	strh	r3, [r2, #8]
          pbuf_realloc(inseg.p, inseg.len);
 800711c:	4e3d      	ldr	r6, [pc, #244]	; (8007214 <tcp_receive+0x560>)
 800711e:	8931      	ldrh	r1, [r6, #8]
 8007120:	6870      	ldr	r0, [r6, #4]
 8007122:	f7fe f93b 	bl	800539c <pbuf_realloc>
          tcplen = TCP_TCPLEN(&inseg);
 8007126:	8935      	ldrh	r5, [r6, #8]
 8007128:	68f3      	ldr	r3, [r6, #12]
 800712a:	8998      	ldrh	r0, [r3, #12]
 800712c:	f7fd fa18 	bl	8004560 <lwip_htons>
 8007130:	f010 0303 	ands.w	r3, r0, #3
 8007134:	bf18      	it	ne
 8007136:	2301      	movne	r3, #1
 8007138:	442b      	add	r3, r5
 800713a:	b29b      	uxth	r3, r3
 800713c:	4a3c      	ldr	r2, [pc, #240]	; (8007230 <tcp_receive+0x57c>)
 800713e:	8013      	strh	r3, [r2, #0]
          LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 8007140:	4a35      	ldr	r2, [pc, #212]	; (8007218 <tcp_receive+0x564>)
 8007142:	6812      	ldr	r2, [r2, #0]
 8007144:	4413      	add	r3, r2
 8007146:	8d22      	ldrh	r2, [r4, #40]	; 0x28
 8007148:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800714a:	440a      	add	r2, r1
 800714c:	4293      	cmp	r3, r2
 800714e:	d0b7      	beq.n	80070c0 <tcp_receive+0x40c>
 8007150:	4b32      	ldr	r3, [pc, #200]	; (800721c <tcp_receive+0x568>)
 8007152:	f240 52cb 	movw	r2, #1483	; 0x5cb
 8007156:	4937      	ldr	r1, [pc, #220]	; (8007234 <tcp_receive+0x580>)
 8007158:	4832      	ldr	r0, [pc, #200]	; (8007224 <tcp_receive+0x570>)
 800715a:	f004 f96d 	bl	800b438 <iprintf>
 800715e:	e7af      	b.n	80070c0 <tcp_receive+0x40c>
            TCPH_FLAGS_SET(inseg.tcphdr, TCPH_FLAGS(inseg.tcphdr) & ~(unsigned int)TCP_FIN);
 8007160:	4e2c      	ldr	r6, [pc, #176]	; (8007214 <tcp_receive+0x560>)
 8007162:	68f3      	ldr	r3, [r6, #12]
 8007164:	899d      	ldrh	r5, [r3, #12]
 8007166:	4628      	mov	r0, r5
 8007168:	f7fd f9fa 	bl	8004560 <lwip_htons>
 800716c:	f000 003e 	and.w	r0, r0, #62	; 0x3e
 8007170:	f7fd f9f6 	bl	8004560 <lwip_htons>
 8007174:	68f3      	ldr	r3, [r6, #12]
 8007176:	f425 557c 	bic.w	r5, r5, #16128	; 0x3f00
 800717a:	4305      	orrs	r5, r0
 800717c:	819d      	strh	r5, [r3, #12]
 800717e:	e7bf      	b.n	8007100 <tcp_receive+0x44c>
            struct tcp_seg *next = pcb->ooseq;
 8007180:	6f65      	ldr	r5, [r4, #116]	; 0x74
            while (next &&
 8007182:	2d00      	cmp	r5, #0
 8007184:	f000 81d8 	beq.w	8007538 <tcp_receive+0x884>
                   TCP_SEQ_GEQ(seqno + tcplen,
 8007188:	4f23      	ldr	r7, [pc, #140]	; (8007218 <tcp_receive+0x564>)
 800718a:	4e29      	ldr	r6, [pc, #164]	; (8007230 <tcp_receive+0x57c>)
                  (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) == 0) {
 800718c:	f8df 8084 	ldr.w	r8, [pc, #132]	; 8007214 <tcp_receive+0x560>
 8007190:	e009      	b.n	80071a6 <tcp_receive+0x4f2>
              next = next->next;
 8007192:	f8d5 9000 	ldr.w	r9, [r5]
              tcp_seg_free(tmp);
 8007196:	4628      	mov	r0, r5
 8007198:	f7fe fca4 	bl	8005ae4 <tcp_seg_free>
            while (next &&
 800719c:	f1b9 0f00 	cmp.w	r9, #0
 80071a0:	f000 81ca 	beq.w	8007538 <tcp_receive+0x884>
              next = next->next;
 80071a4:	464d      	mov	r5, r9
                   TCP_SEQ_GEQ(seqno + tcplen,
 80071a6:	f8d7 c000 	ldr.w	ip, [r7]
 80071aa:	68e9      	ldr	r1, [r5, #12]
 80071ac:	6848      	ldr	r0, [r1, #4]
 80071ae:	8833      	ldrh	r3, [r6, #0]
 80071b0:	4463      	add	r3, ip
 80071b2:	1a1b      	subs	r3, r3, r0
 80071b4:	892a      	ldrh	r2, [r5, #8]
 80071b6:	1a9a      	subs	r2, r3, r2
            while (next &&
 80071b8:	2a00      	cmp	r2, #0
 80071ba:	f2c0 81bf 	blt.w	800753c <tcp_receive+0x888>
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 80071be:	8988      	ldrh	r0, [r1, #12]
 80071c0:	f7fd f9ce 	bl	8004560 <lwip_htons>
 80071c4:	f010 0f01 	tst.w	r0, #1
 80071c8:	d0e3      	beq.n	8007192 <tcp_receive+0x4de>
                  (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) == 0) {
 80071ca:	f8d8 300c 	ldr.w	r3, [r8, #12]
 80071ce:	8998      	ldrh	r0, [r3, #12]
 80071d0:	f7fd f9c6 	bl	8004560 <lwip_htons>
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 80071d4:	f010 0f02 	tst.w	r0, #2
 80071d8:	d1db      	bne.n	8007192 <tcp_receive+0x4de>
                TCPH_SET_FLAG(inseg.tcphdr, TCP_FIN);
 80071da:	f8d8 300c 	ldr.w	r3, [r8, #12]
 80071de:	f8b3 900c 	ldrh.w	r9, [r3, #12]
 80071e2:	2001      	movs	r0, #1
 80071e4:	f7fd f9bc 	bl	8004560 <lwip_htons>
 80071e8:	f8d8 300c 	ldr.w	r3, [r8, #12]
 80071ec:	ea49 0900 	orr.w	r9, r9, r0
 80071f0:	f8a3 900c 	strh.w	r9, [r3, #12]
                tcplen = TCP_TCPLEN(&inseg);
 80071f4:	f8b8 9008 	ldrh.w	r9, [r8, #8]
 80071f8:	f8d8 300c 	ldr.w	r3, [r8, #12]
 80071fc:	8998      	ldrh	r0, [r3, #12]
 80071fe:	f7fd f9af 	bl	8004560 <lwip_htons>
 8007202:	f010 0303 	ands.w	r3, r0, #3
 8007206:	bf18      	it	ne
 8007208:	2301      	movne	r3, #1
 800720a:	444b      	add	r3, r9
 800720c:	8033      	strh	r3, [r6, #0]
 800720e:	e7c0      	b.n	8007192 <tcp_receive+0x4de>
 8007210:	2000ae68 	.word	0x2000ae68
 8007214:	2000ae7c 	.word	0x2000ae7c
 8007218:	2000ae98 	.word	0x2000ae98
 800721c:	08011488 	.word	0x08011488
 8007220:	080115b8 	.word	0x080115b8
 8007224:	0800cb24 	.word	0x0800cb24
 8007228:	080115c8 	.word	0x080115c8
 800722c:	080115d8 	.word	0x080115d8
 8007230:	2000aeb2 	.word	0x2000aeb2
 8007234:	080115e8 	.word	0x080115e8
              inseg.len = (u16_t)(next->tcphdr->seqno - seqno);
 8007238:	4b81      	ldr	r3, [pc, #516]	; (8007440 <tcp_receive+0x78c>)
 800723a:	eba0 000c 	sub.w	r0, r0, ip
 800723e:	8118      	strh	r0, [r3, #8]
              if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 8007240:	68db      	ldr	r3, [r3, #12]
 8007242:	8998      	ldrh	r0, [r3, #12]
 8007244:	f7fd f98c 	bl	8004560 <lwip_htons>
 8007248:	f010 0f02 	tst.w	r0, #2
 800724c:	d003      	beq.n	8007256 <tcp_receive+0x5a2>
                inseg.len -= 1;
 800724e:	4a7c      	ldr	r2, [pc, #496]	; (8007440 <tcp_receive+0x78c>)
 8007250:	8913      	ldrh	r3, [r2, #8]
 8007252:	3b01      	subs	r3, #1
 8007254:	8113      	strh	r3, [r2, #8]
              pbuf_realloc(inseg.p, inseg.len);
 8007256:	4f7a      	ldr	r7, [pc, #488]	; (8007440 <tcp_receive+0x78c>)
 8007258:	8939      	ldrh	r1, [r7, #8]
 800725a:	6878      	ldr	r0, [r7, #4]
 800725c:	f7fe f89e 	bl	800539c <pbuf_realloc>
              tcplen = TCP_TCPLEN(&inseg);
 8007260:	893e      	ldrh	r6, [r7, #8]
 8007262:	68fb      	ldr	r3, [r7, #12]
 8007264:	8998      	ldrh	r0, [r3, #12]
 8007266:	f7fd f97b 	bl	8004560 <lwip_htons>
 800726a:	f010 0303 	ands.w	r3, r0, #3
 800726e:	bf18      	it	ne
 8007270:	2301      	movne	r3, #1
 8007272:	4433      	add	r3, r6
 8007274:	b29b      	uxth	r3, r3
 8007276:	4a73      	ldr	r2, [pc, #460]	; (8007444 <tcp_receive+0x790>)
 8007278:	8013      	strh	r3, [r2, #0]
              LWIP_ASSERT("tcp_receive: segment not trimmed correctly to ooseq queue\n",
 800727a:	4a73      	ldr	r2, [pc, #460]	; (8007448 <tcp_receive+0x794>)
 800727c:	6812      	ldr	r2, [r2, #0]
 800727e:	4413      	add	r3, r2
 8007280:	68ea      	ldr	r2, [r5, #12]
 8007282:	6852      	ldr	r2, [r2, #4]
 8007284:	4293      	cmp	r3, r2
 8007286:	f000 815c 	beq.w	8007542 <tcp_receive+0x88e>
 800728a:	4b70      	ldr	r3, [pc, #448]	; (800744c <tcp_receive+0x798>)
 800728c:	f240 52fc 	movw	r2, #1532	; 0x5fc
 8007290:	496f      	ldr	r1, [pc, #444]	; (8007450 <tcp_receive+0x79c>)
 8007292:	4870      	ldr	r0, [pc, #448]	; (8007454 <tcp_receive+0x7a0>)
 8007294:	f004 f8d0 	bl	800b438 <iprintf>
 8007298:	e153      	b.n	8007542 <tcp_receive+0x88e>
        LWIP_ASSERT("tcp_receive: tcplen > rcv_wnd\n", pcb->rcv_wnd >= tcplen);
 800729a:	4b6c      	ldr	r3, [pc, #432]	; (800744c <tcp_receive+0x798>)
 800729c:	f240 6207 	movw	r2, #1543	; 0x607
 80072a0:	496d      	ldr	r1, [pc, #436]	; (8007458 <tcp_receive+0x7a4>)
 80072a2:	486c      	ldr	r0, [pc, #432]	; (8007454 <tcp_receive+0x7a0>)
 80072a4:	f004 f8c8 	bl	800b438 <iprintf>
 80072a8:	e156      	b.n	8007558 <tcp_receive+0x8a4>
          LWIP_ASSERT("tcp_receive: ooseq tcplen > rcv_wnd\n",
 80072aa:	4643      	mov	r3, r8
 80072ac:	f240 622b 	movw	r2, #1579	; 0x62b
 80072b0:	4639      	mov	r1, r7
 80072b2:	4868      	ldr	r0, [pc, #416]	; (8007454 <tcp_receive+0x7a0>)
 80072b4:	f004 f8c0 	bl	800b438 <iprintf>
 80072b8:	e03e      	b.n	8007338 <tcp_receive+0x684>
              recv_data = cseg->p;
 80072ba:	4b68      	ldr	r3, [pc, #416]	; (800745c <tcp_receive+0x7a8>)
 80072bc:	6019      	str	r1, [r3, #0]
            cseg->p = NULL;
 80072be:	2300      	movs	r3, #0
 80072c0:	606b      	str	r3, [r5, #4]
          if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 80072c2:	68eb      	ldr	r3, [r5, #12]
 80072c4:	8998      	ldrh	r0, [r3, #12]
 80072c6:	f7fd f94b 	bl	8004560 <lwip_htons>
 80072ca:	f010 0f01 	tst.w	r0, #1
 80072ce:	d009      	beq.n	80072e4 <tcp_receive+0x630>
            recv_flags |= TF_GOT_FIN;
 80072d0:	4a63      	ldr	r2, [pc, #396]	; (8007460 <tcp_receive+0x7ac>)
 80072d2:	7813      	ldrb	r3, [r2, #0]
 80072d4:	f043 0320 	orr.w	r3, r3, #32
 80072d8:	7013      	strb	r3, [r2, #0]
            if (pcb->state == ESTABLISHED) { /* force passive close or we can move to active close */
 80072da:	7d23      	ldrb	r3, [r4, #20]
 80072dc:	2b04      	cmp	r3, #4
              pcb->state = CLOSE_WAIT;
 80072de:	bf04      	itt	eq
 80072e0:	2307      	moveq	r3, #7
 80072e2:	7523      	strbeq	r3, [r4, #20]
          pcb->ooseq = cseg->next;
 80072e4:	682b      	ldr	r3, [r5, #0]
 80072e6:	6763      	str	r3, [r4, #116]	; 0x74
          tcp_seg_free(cseg);
 80072e8:	4628      	mov	r0, r5
 80072ea:	f7fe fbfb 	bl	8005ae4 <tcp_seg_free>
        while (pcb->ooseq != NULL &&
 80072ee:	6f65      	ldr	r5, [r4, #116]	; 0x74
 80072f0:	2d00      	cmp	r5, #0
 80072f2:	d03d      	beq.n	8007370 <tcp_receive+0x6bc>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {
 80072f4:	68ea      	ldr	r2, [r5, #12]
 80072f6:	6853      	ldr	r3, [r2, #4]
        while (pcb->ooseq != NULL &&
 80072f8:	6a61      	ldr	r1, [r4, #36]	; 0x24
 80072fa:	428b      	cmp	r3, r1
 80072fc:	d138      	bne.n	8007370 <tcp_receive+0x6bc>
          seqno = pcb->ooseq->tcphdr->seqno;
 80072fe:	6033      	str	r3, [r6, #0]
          pcb->rcv_nxt += TCP_TCPLEN(cseg);
 8007300:	f8b5 9008 	ldrh.w	r9, [r5, #8]
 8007304:	8990      	ldrh	r0, [r2, #12]
 8007306:	f7fd f92b 	bl	8004560 <lwip_htons>
 800730a:	f010 0003 	ands.w	r0, r0, #3
 800730e:	bf18      	it	ne
 8007310:	2001      	movne	r0, #1
 8007312:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007314:	4499      	add	r9, r3
 8007316:	4448      	add	r0, r9
 8007318:	6260      	str	r0, [r4, #36]	; 0x24
          LWIP_ASSERT("tcp_receive: ooseq tcplen > rcv_wnd\n",
 800731a:	f8b4 9028 	ldrh.w	r9, [r4, #40]	; 0x28
 800731e:	f8b5 a008 	ldrh.w	sl, [r5, #8]
 8007322:	68eb      	ldr	r3, [r5, #12]
 8007324:	8998      	ldrh	r0, [r3, #12]
 8007326:	f7fd f91b 	bl	8004560 <lwip_htons>
 800732a:	f010 0003 	ands.w	r0, r0, #3
 800732e:	bf18      	it	ne
 8007330:	2001      	movne	r0, #1
 8007332:	4450      	add	r0, sl
 8007334:	4581      	cmp	r9, r0
 8007336:	d3b8      	bcc.n	80072aa <tcp_receive+0x5f6>
          pcb->rcv_wnd -= TCP_TCPLEN(cseg);
 8007338:	f8b5 9008 	ldrh.w	r9, [r5, #8]
 800733c:	68eb      	ldr	r3, [r5, #12]
 800733e:	8998      	ldrh	r0, [r3, #12]
 8007340:	f7fd f90e 	bl	8004560 <lwip_htons>
 8007344:	f010 0003 	ands.w	r0, r0, #3
 8007348:	bf18      	it	ne
 800734a:	2001      	movne	r0, #1
 800734c:	4448      	add	r0, r9
 800734e:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8007350:	1a18      	subs	r0, r3, r0
 8007352:	8520      	strh	r0, [r4, #40]	; 0x28
          tcp_update_rcv_ann_wnd(pcb);
 8007354:	4620      	mov	r0, r4
 8007356:	f7fe fb4f 	bl	80059f8 <tcp_update_rcv_ann_wnd>
          if (cseg->p->tot_len > 0) {
 800735a:	6869      	ldr	r1, [r5, #4]
 800735c:	890b      	ldrh	r3, [r1, #8]
 800735e:	2b00      	cmp	r3, #0
 8007360:	d0af      	beq.n	80072c2 <tcp_receive+0x60e>
            if (recv_data) {
 8007362:	4b3e      	ldr	r3, [pc, #248]	; (800745c <tcp_receive+0x7a8>)
 8007364:	6818      	ldr	r0, [r3, #0]
 8007366:	2800      	cmp	r0, #0
 8007368:	d0a7      	beq.n	80072ba <tcp_receive+0x606>
              pbuf_cat(recv_data, cseg->p);
 800736a:	f7fe f89b 	bl	80054a4 <pbuf_cat>
 800736e:	e7a6      	b.n	80072be <tcp_receive+0x60a>
        tcp_ack(pcb);
 8007370:	8b63      	ldrh	r3, [r4, #26]
 8007372:	f013 0f01 	tst.w	r3, #1
 8007376:	bf1a      	itte	ne
 8007378:	f023 0301 	bicne.w	r3, r3, #1
 800737c:	f043 0302 	orrne.w	r3, r3, #2
 8007380:	f043 0301 	orreq.w	r3, r3, #1
 8007384:	8363      	strh	r3, [r4, #26]
 8007386:	e54a      	b.n	8006e1e <tcp_receive+0x16a>
          pcb->ooseq = tcp_seg_copy(&inseg);
 8007388:	482d      	ldr	r0, [pc, #180]	; (8007440 <tcp_receive+0x78c>)
 800738a:	f7fe fbd5 	bl	8005b38 <tcp_seg_copy>
 800738e:	6760      	str	r0, [r4, #116]	; 0x74
 8007390:	e051      	b.n	8007436 <tcp_receive+0x782>
              if (inseg.len > next->len) {
 8007392:	4b2b      	ldr	r3, [pc, #172]	; (8007440 <tcp_receive+0x78c>)
 8007394:	891a      	ldrh	r2, [r3, #8]
 8007396:	892b      	ldrh	r3, [r5, #8]
 8007398:	429a      	cmp	r2, r3
 800739a:	d94c      	bls.n	8007436 <tcp_receive+0x782>
                struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 800739c:	4828      	ldr	r0, [pc, #160]	; (8007440 <tcp_receive+0x78c>)
 800739e:	f7fe fbcb 	bl	8005b38 <tcp_seg_copy>
                if (cseg != NULL) {
 80073a2:	4603      	mov	r3, r0
 80073a4:	2800      	cmp	r0, #0
 80073a6:	d046      	beq.n	8007436 <tcp_receive+0x782>
                  if (prev != NULL) {
 80073a8:	b12e      	cbz	r6, 80073b6 <tcp_receive+0x702>
                    prev->next = cseg;
 80073aa:	6030      	str	r0, [r6, #0]
                  tcp_oos_insert_segment(cseg, next);
 80073ac:	4629      	mov	r1, r5
 80073ae:	4618      	mov	r0, r3
 80073b0:	f7ff fc28 	bl	8006c04 <tcp_oos_insert_segment>
 80073b4:	e03f      	b.n	8007436 <tcp_receive+0x782>
                    pcb->ooseq = cseg;
 80073b6:	6760      	str	r0, [r4, #116]	; 0x74
 80073b8:	e7f8      	b.n	80073ac <tcp_receive+0x6f8>
                if (TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {
 80073ba:	1a99      	subs	r1, r3, r2
 80073bc:	2900      	cmp	r1, #0
 80073be:	db27      	blt.n	8007410 <tcp_receive+0x75c>
              if (next->next == NULL &&
 80073c0:	6829      	ldr	r1, [r5, #0]
 80073c2:	462e      	mov	r6, r5
 80073c4:	2900      	cmp	r1, #0
 80073c6:	d033      	beq.n	8007430 <tcp_receive+0x77c>
 80073c8:	460d      	mov	r5, r1
            if (seqno == next->tcphdr->seqno) {
 80073ca:	68e8      	ldr	r0, [r5, #12]
 80073cc:	6842      	ldr	r2, [r0, #4]
 80073ce:	429a      	cmp	r2, r3
 80073d0:	d0df      	beq.n	8007392 <tcp_receive+0x6de>
              if (prev == NULL) {
 80073d2:	2e00      	cmp	r6, #0
 80073d4:	d0f1      	beq.n	80073ba <tcp_receive+0x706>
                if (TCP_SEQ_BETWEEN(seqno, prev->tcphdr->seqno + 1, next->tcphdr->seqno - 1)) {
 80073d6:	68f1      	ldr	r1, [r6, #12]
 80073d8:	6849      	ldr	r1, [r1, #4]
 80073da:	1a79      	subs	r1, r7, r1
 80073dc:	2900      	cmp	r1, #0
 80073de:	dbef      	blt.n	80073c0 <tcp_receive+0x70c>
 80073e0:	ebac 0102 	sub.w	r1, ip, r2
 80073e4:	2900      	cmp	r1, #0
 80073e6:	dceb      	bgt.n	80073c0 <tcp_receive+0x70c>
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 80073e8:	4815      	ldr	r0, [pc, #84]	; (8007440 <tcp_receive+0x78c>)
 80073ea:	f7fe fba5 	bl	8005b38 <tcp_seg_copy>
                  if (cseg != NULL) {
 80073ee:	4607      	mov	r7, r0
 80073f0:	b308      	cbz	r0, 8007436 <tcp_receive+0x782>
                    if (TCP_SEQ_GT(prev->tcphdr->seqno + prev->len, seqno)) {
 80073f2:	68f3      	ldr	r3, [r6, #12]
 80073f4:	6859      	ldr	r1, [r3, #4]
 80073f6:	4b14      	ldr	r3, [pc, #80]	; (8007448 <tcp_receive+0x794>)
 80073f8:	681a      	ldr	r2, [r3, #0]
 80073fa:	8933      	ldrh	r3, [r6, #8]
 80073fc:	440b      	add	r3, r1
 80073fe:	1a9b      	subs	r3, r3, r2
 8007400:	2b00      	cmp	r3, #0
 8007402:	dc0e      	bgt.n	8007422 <tcp_receive+0x76e>
                    prev->next = cseg;
 8007404:	6037      	str	r7, [r6, #0]
                    tcp_oos_insert_segment(cseg, next);
 8007406:	4629      	mov	r1, r5
 8007408:	4638      	mov	r0, r7
 800740a:	f7ff fbfb 	bl	8006c04 <tcp_oos_insert_segment>
 800740e:	e012      	b.n	8007436 <tcp_receive+0x782>
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 8007410:	480b      	ldr	r0, [pc, #44]	; (8007440 <tcp_receive+0x78c>)
 8007412:	f7fe fb91 	bl	8005b38 <tcp_seg_copy>
                  if (cseg != NULL) {
 8007416:	b170      	cbz	r0, 8007436 <tcp_receive+0x782>
                    pcb->ooseq = cseg;
 8007418:	6760      	str	r0, [r4, #116]	; 0x74
                    tcp_oos_insert_segment(cseg, next);
 800741a:	4629      	mov	r1, r5
 800741c:	f7ff fbf2 	bl	8006c04 <tcp_oos_insert_segment>
 8007420:	e009      	b.n	8007436 <tcp_receive+0x782>
                      prev->len = (u16_t)(seqno - prev->tcphdr->seqno);
 8007422:	1a52      	subs	r2, r2, r1
 8007424:	b291      	uxth	r1, r2
 8007426:	8131      	strh	r1, [r6, #8]
                      pbuf_realloc(prev->p, prev->len);
 8007428:	6870      	ldr	r0, [r6, #4]
 800742a:	f7fd ffb7 	bl	800539c <pbuf_realloc>
 800742e:	e7e9      	b.n	8007404 <tcp_receive+0x750>
                  TCP_SEQ_GT(seqno, next->tcphdr->seqno)) {
 8007430:	1a9b      	subs	r3, r3, r2
              if (next->next == NULL &&
 8007432:	2b00      	cmp	r3, #0
 8007434:	dc16      	bgt.n	8007464 <tcp_receive+0x7b0>
        tcp_send_empty_ack(pcb);
 8007436:	4620      	mov	r0, r4
 8007438:	f001 fec8 	bl	80091cc <tcp_send_empty_ack>
 800743c:	e4ef      	b.n	8006e1e <tcp_receive+0x16a>
 800743e:	bf00      	nop
 8007440:	2000ae7c 	.word	0x2000ae7c
 8007444:	2000aeb2 	.word	0x2000aeb2
 8007448:	2000ae98 	.word	0x2000ae98
 800744c:	08011488 	.word	0x08011488
 8007450:	08011620 	.word	0x08011620
 8007454:	0800cb24 	.word	0x0800cb24
 8007458:	0801165c 	.word	0x0801165c
 800745c:	2000ae90 	.word	0x2000ae90
 8007460:	2000ae94 	.word	0x2000ae94
                if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 8007464:	8980      	ldrh	r0, [r0, #12]
 8007466:	f7fd f87b 	bl	8004560 <lwip_htons>
 800746a:	f010 0f01 	tst.w	r0, #1
 800746e:	d1e2      	bne.n	8007436 <tcp_receive+0x782>
                next->next = tcp_seg_copy(&inseg);
 8007470:	484d      	ldr	r0, [pc, #308]	; (80075a8 <tcp_receive+0x8f4>)
 8007472:	f7fe fb61 	bl	8005b38 <tcp_seg_copy>
 8007476:	6028      	str	r0, [r5, #0]
                if (next->next != NULL) {
 8007478:	2800      	cmp	r0, #0
 800747a:	d0dc      	beq.n	8007436 <tcp_receive+0x782>
                  if (TCP_SEQ_GT(next->tcphdr->seqno + next->len, seqno)) {
 800747c:	68eb      	ldr	r3, [r5, #12]
 800747e:	6859      	ldr	r1, [r3, #4]
 8007480:	4b4a      	ldr	r3, [pc, #296]	; (80075ac <tcp_receive+0x8f8>)
 8007482:	681b      	ldr	r3, [r3, #0]
 8007484:	892a      	ldrh	r2, [r5, #8]
 8007486:	440a      	add	r2, r1
 8007488:	1ad2      	subs	r2, r2, r3
 800748a:	2a00      	cmp	r2, #0
 800748c:	dc3c      	bgt.n	8007508 <tcp_receive+0x854>
                  if (TCP_SEQ_GT((u32_t)tcplen + seqno, pcb->rcv_nxt + (u32_t)pcb->rcv_wnd)) {
 800748e:	4b48      	ldr	r3, [pc, #288]	; (80075b0 <tcp_receive+0x8fc>)
 8007490:	881b      	ldrh	r3, [r3, #0]
 8007492:	4a46      	ldr	r2, [pc, #280]	; (80075ac <tcp_receive+0x8f8>)
 8007494:	6812      	ldr	r2, [r2, #0]
 8007496:	4413      	add	r3, r2
 8007498:	6a62      	ldr	r2, [r4, #36]	; 0x24
 800749a:	1a9b      	subs	r3, r3, r2
 800749c:	8d22      	ldrh	r2, [r4, #40]	; 0x28
 800749e:	1a9b      	subs	r3, r3, r2
 80074a0:	2b00      	cmp	r3, #0
 80074a2:	ddc8      	ble.n	8007436 <tcp_receive+0x782>
                    if (TCPH_FLAGS(next->next->tcphdr) & TCP_FIN) {
 80074a4:	682b      	ldr	r3, [r5, #0]
 80074a6:	68db      	ldr	r3, [r3, #12]
 80074a8:	8998      	ldrh	r0, [r3, #12]
 80074aa:	f7fd f859 	bl	8004560 <lwip_htons>
 80074ae:	f010 0f01 	tst.w	r0, #1
 80074b2:	d130      	bne.n	8007516 <tcp_receive+0x862>
                    next->next->len = (u16_t)(pcb->rcv_nxt + pcb->rcv_wnd - seqno);
 80074b4:	682a      	ldr	r2, [r5, #0]
 80074b6:	4e3d      	ldr	r6, [pc, #244]	; (80075ac <tcp_receive+0x8f8>)
 80074b8:	6831      	ldr	r1, [r6, #0]
 80074ba:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 80074bc:	1a5b      	subs	r3, r3, r1
 80074be:	6a61      	ldr	r1, [r4, #36]	; 0x24
 80074c0:	440b      	add	r3, r1
 80074c2:	8113      	strh	r3, [r2, #8]
                    pbuf_realloc(next->next->p, next->next->len);
 80074c4:	682b      	ldr	r3, [r5, #0]
 80074c6:	8919      	ldrh	r1, [r3, #8]
 80074c8:	6858      	ldr	r0, [r3, #4]
 80074ca:	f7fd ff67 	bl	800539c <pbuf_realloc>
                    tcplen = TCP_TCPLEN(next->next);
 80074ce:	682b      	ldr	r3, [r5, #0]
 80074d0:	891d      	ldrh	r5, [r3, #8]
 80074d2:	68db      	ldr	r3, [r3, #12]
 80074d4:	8998      	ldrh	r0, [r3, #12]
 80074d6:	f7fd f843 	bl	8004560 <lwip_htons>
 80074da:	f010 0303 	ands.w	r3, r0, #3
 80074de:	bf18      	it	ne
 80074e0:	2301      	movne	r3, #1
 80074e2:	442b      	add	r3, r5
 80074e4:	b29b      	uxth	r3, r3
 80074e6:	4a32      	ldr	r2, [pc, #200]	; (80075b0 <tcp_receive+0x8fc>)
 80074e8:	8013      	strh	r3, [r2, #0]
                    LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 80074ea:	6832      	ldr	r2, [r6, #0]
 80074ec:	4413      	add	r3, r2
 80074ee:	8d22      	ldrh	r2, [r4, #40]	; 0x28
 80074f0:	6a61      	ldr	r1, [r4, #36]	; 0x24
 80074f2:	440a      	add	r2, r1
 80074f4:	4293      	cmp	r3, r2
 80074f6:	d09e      	beq.n	8007436 <tcp_receive+0x782>
 80074f8:	4b2e      	ldr	r3, [pc, #184]	; (80075b4 <tcp_receive+0x900>)
 80074fa:	f44f 62df 	mov.w	r2, #1784	; 0x6f8
 80074fe:	492e      	ldr	r1, [pc, #184]	; (80075b8 <tcp_receive+0x904>)
 8007500:	482e      	ldr	r0, [pc, #184]	; (80075bc <tcp_receive+0x908>)
 8007502:	f003 ff99 	bl	800b438 <iprintf>
 8007506:	e796      	b.n	8007436 <tcp_receive+0x782>
                    next->len = (u16_t)(seqno - next->tcphdr->seqno);
 8007508:	1a5b      	subs	r3, r3, r1
 800750a:	b299      	uxth	r1, r3
 800750c:	8129      	strh	r1, [r5, #8]
                    pbuf_realloc(next->p, next->len);
 800750e:	6868      	ldr	r0, [r5, #4]
 8007510:	f7fd ff44 	bl	800539c <pbuf_realloc>
 8007514:	e7bb      	b.n	800748e <tcp_receive+0x7da>
                      TCPH_FLAGS_SET(next->next->tcphdr, TCPH_FLAGS(next->next->tcphdr) & ~TCP_FIN);
 8007516:	682b      	ldr	r3, [r5, #0]
 8007518:	68db      	ldr	r3, [r3, #12]
 800751a:	899e      	ldrh	r6, [r3, #12]
 800751c:	4630      	mov	r0, r6
 800751e:	f7fd f81f 	bl	8004560 <lwip_htons>
 8007522:	f000 003e 	and.w	r0, r0, #62	; 0x3e
 8007526:	f7fd f81b 	bl	8004560 <lwip_htons>
 800752a:	682b      	ldr	r3, [r5, #0]
 800752c:	68db      	ldr	r3, [r3, #12]
 800752e:	f426 567c 	bic.w	r6, r6, #16128	; 0x3f00
 8007532:	4306      	orrs	r6, r0
 8007534:	819e      	strh	r6, [r3, #12]
 8007536:	e7bd      	b.n	80074b4 <tcp_receive+0x800>
              next = next->next;
 8007538:	2500      	movs	r5, #0
 800753a:	e002      	b.n	8007542 <tcp_receive+0x88e>
            if (next &&
 800753c:	2b00      	cmp	r3, #0
 800753e:	f73f ae7b 	bgt.w	8007238 <tcp_receive+0x584>
            pcb->ooseq = next;
 8007542:	6765      	str	r5, [r4, #116]	; 0x74
        pcb->rcv_nxt = seqno + tcplen;
 8007544:	4b1a      	ldr	r3, [pc, #104]	; (80075b0 <tcp_receive+0x8fc>)
 8007546:	881a      	ldrh	r2, [r3, #0]
 8007548:	4b18      	ldr	r3, [pc, #96]	; (80075ac <tcp_receive+0x8f8>)
 800754a:	681b      	ldr	r3, [r3, #0]
 800754c:	4413      	add	r3, r2
 800754e:	6263      	str	r3, [r4, #36]	; 0x24
        LWIP_ASSERT("tcp_receive: tcplen > rcv_wnd\n", pcb->rcv_wnd >= tcplen);
 8007550:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8007552:	4293      	cmp	r3, r2
 8007554:	f4ff aea1 	bcc.w	800729a <tcp_receive+0x5e6>
        pcb->rcv_wnd -= tcplen;
 8007558:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 800755a:	4a15      	ldr	r2, [pc, #84]	; (80075b0 <tcp_receive+0x8fc>)
 800755c:	8812      	ldrh	r2, [r2, #0]
 800755e:	1a9b      	subs	r3, r3, r2
 8007560:	8523      	strh	r3, [r4, #40]	; 0x28
        tcp_update_rcv_ann_wnd(pcb);
 8007562:	4620      	mov	r0, r4
 8007564:	f7fe fa48 	bl	80059f8 <tcp_update_rcv_ann_wnd>
        if (inseg.p->tot_len > 0) {
 8007568:	4b0f      	ldr	r3, [pc, #60]	; (80075a8 <tcp_receive+0x8f4>)
 800756a:	685b      	ldr	r3, [r3, #4]
 800756c:	891a      	ldrh	r2, [r3, #8]
 800756e:	b122      	cbz	r2, 800757a <tcp_receive+0x8c6>
          recv_data = inseg.p;
 8007570:	4a13      	ldr	r2, [pc, #76]	; (80075c0 <tcp_receive+0x90c>)
 8007572:	6013      	str	r3, [r2, #0]
          inseg.p = NULL;
 8007574:	4b0c      	ldr	r3, [pc, #48]	; (80075a8 <tcp_receive+0x8f4>)
 8007576:	2200      	movs	r2, #0
 8007578:	605a      	str	r2, [r3, #4]
        if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 800757a:	4b0b      	ldr	r3, [pc, #44]	; (80075a8 <tcp_receive+0x8f4>)
 800757c:	68db      	ldr	r3, [r3, #12]
 800757e:	8998      	ldrh	r0, [r3, #12]
 8007580:	f7fc ffee 	bl	8004560 <lwip_htons>
 8007584:	f010 0f01 	tst.w	r0, #1
 8007588:	d004      	beq.n	8007594 <tcp_receive+0x8e0>
          recv_flags |= TF_GOT_FIN;
 800758a:	4a0e      	ldr	r2, [pc, #56]	; (80075c4 <tcp_receive+0x910>)
 800758c:	7813      	ldrb	r3, [r2, #0]
 800758e:	f043 0320 	orr.w	r3, r3, #32
 8007592:	7013      	strb	r3, [r2, #0]
        while (pcb->ooseq != NULL &&
 8007594:	6f65      	ldr	r5, [r4, #116]	; 0x74
 8007596:	2d00      	cmp	r5, #0
 8007598:	f43f aeea 	beq.w	8007370 <tcp_receive+0x6bc>
          seqno = pcb->ooseq->tcphdr->seqno;
 800759c:	4e03      	ldr	r6, [pc, #12]	; (80075ac <tcp_receive+0x8f8>)
          LWIP_ASSERT("tcp_receive: ooseq tcplen > rcv_wnd\n",
 800759e:	f8df 8014 	ldr.w	r8, [pc, #20]	; 80075b4 <tcp_receive+0x900>
 80075a2:	4f09      	ldr	r7, [pc, #36]	; (80075c8 <tcp_receive+0x914>)
 80075a4:	e6a6      	b.n	80072f4 <tcp_receive+0x640>
 80075a6:	bf00      	nop
 80075a8:	2000ae7c 	.word	0x2000ae7c
 80075ac:	2000ae98 	.word	0x2000ae98
 80075b0:	2000aeb2 	.word	0x2000aeb2
 80075b4:	08011488 	.word	0x08011488
 80075b8:	080115e8 	.word	0x080115e8
 80075bc:	0800cb24 	.word	0x0800cb24
 80075c0:	2000ae90 	.word	0x2000ae90
 80075c4:	2000ae94 	.word	0x2000ae94
 80075c8:	0801167c 	.word	0x0801167c

080075cc <tcp_input>:
{
 80075cc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80075d0:	b085      	sub	sp, #20
  LWIP_ASSERT("tcp_input: invalid pbuf", p != NULL);
 80075d2:	4605      	mov	r5, r0
 80075d4:	b158      	cbz	r0, 80075ee <tcp_input+0x22>
  tcphdr = (struct tcp_hdr *)p->payload;
 80075d6:	686a      	ldr	r2, [r5, #4]
 80075d8:	4b77      	ldr	r3, [pc, #476]	; (80077b8 <tcp_input+0x1ec>)
 80075da:	601a      	str	r2, [r3, #0]
  if (p->len < TCP_HLEN) {
 80075dc:	896b      	ldrh	r3, [r5, #10]
 80075de:	2b13      	cmp	r3, #19
 80075e0:	d80c      	bhi.n	80075fc <tcp_input+0x30>
  pbuf_free(p);
 80075e2:	4628      	mov	r0, r5
 80075e4:	f7fd fde0 	bl	80051a8 <pbuf_free>
}
 80075e8:	b005      	add	sp, #20
 80075ea:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  LWIP_ASSERT("tcp_input: invalid pbuf", p != NULL);
 80075ee:	4b73      	ldr	r3, [pc, #460]	; (80077bc <tcp_input+0x1f0>)
 80075f0:	2283      	movs	r2, #131	; 0x83
 80075f2:	4973      	ldr	r1, [pc, #460]	; (80077c0 <tcp_input+0x1f4>)
 80075f4:	4873      	ldr	r0, [pc, #460]	; (80077c4 <tcp_input+0x1f8>)
 80075f6:	f003 ff1f 	bl	800b438 <iprintf>
 80075fa:	e7ec      	b.n	80075d6 <tcp_input+0xa>
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 80075fc:	4b72      	ldr	r3, [pc, #456]	; (80077c8 <tcp_input+0x1fc>)
 80075fe:	6819      	ldr	r1, [r3, #0]
 8007600:	6958      	ldr	r0, [r3, #20]
 8007602:	f003 f9a8 	bl	800a956 <ip4_addr_isbroadcast_u32>
 8007606:	2800      	cmp	r0, #0
 8007608:	d1eb      	bne.n	80075e2 <tcp_input+0x16>
      ip_addr_ismulticast(ip_current_dest_addr())) {
 800760a:	4b6f      	ldr	r3, [pc, #444]	; (80077c8 <tcp_input+0x1fc>)
 800760c:	695b      	ldr	r3, [r3, #20]
 800760e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 8007612:	2be0      	cmp	r3, #224	; 0xe0
 8007614:	d0e5      	beq.n	80075e2 <tcp_input+0x16>
  hdrlen_bytes = TCPH_HDRLEN_BYTES(tcphdr);
 8007616:	4b68      	ldr	r3, [pc, #416]	; (80077b8 <tcp_input+0x1ec>)
 8007618:	681b      	ldr	r3, [r3, #0]
 800761a:	8998      	ldrh	r0, [r3, #12]
 800761c:	f7fc ffa0 	bl	8004560 <lwip_htons>
 8007620:	0a81      	lsrs	r1, r0, #10
 8007622:	f001 01fc 	and.w	r1, r1, #252	; 0xfc
  if ((hdrlen_bytes < TCP_HLEN) || (hdrlen_bytes > p->tot_len)) {
 8007626:	2913      	cmp	r1, #19
 8007628:	d9db      	bls.n	80075e2 <tcp_input+0x16>
 800762a:	b28b      	uxth	r3, r1
 800762c:	892a      	ldrh	r2, [r5, #8]
 800762e:	429a      	cmp	r2, r3
 8007630:	d3d7      	bcc.n	80075e2 <tcp_input+0x16>
  tcphdr_optlen = (u16_t)(hdrlen_bytes - TCP_HLEN);
 8007632:	f1a3 0214 	sub.w	r2, r3, #20
 8007636:	b292      	uxth	r2, r2
 8007638:	4864      	ldr	r0, [pc, #400]	; (80077cc <tcp_input+0x200>)
 800763a:	8002      	strh	r2, [r0, #0]
  tcphdr_opt2 = NULL;
 800763c:	4864      	ldr	r0, [pc, #400]	; (80077d0 <tcp_input+0x204>)
 800763e:	2400      	movs	r4, #0
 8007640:	6004      	str	r4, [r0, #0]
  if (p->len >= hdrlen_bytes) {
 8007642:	8968      	ldrh	r0, [r5, #10]
 8007644:	4298      	cmp	r0, r3
 8007646:	d22e      	bcs.n	80076a6 <tcp_input+0xda>
    LWIP_ASSERT("p->next != NULL", p->next != NULL);
 8007648:	682b      	ldr	r3, [r5, #0]
 800764a:	2b00      	cmp	r3, #0
 800764c:	d068      	beq.n	8007720 <tcp_input+0x154>
    pbuf_remove_header(p, TCP_HLEN);
 800764e:	2114      	movs	r1, #20
 8007650:	4628      	mov	r0, r5
 8007652:	f7fd fd69 	bl	8005128 <pbuf_remove_header>
    tcphdr_opt1len = p->len;
 8007656:	896c      	ldrh	r4, [r5, #10]
 8007658:	4b5e      	ldr	r3, [pc, #376]	; (80077d4 <tcp_input+0x208>)
 800765a:	801c      	strh	r4, [r3, #0]
    opt2len = (u16_t)(tcphdr_optlen - tcphdr_opt1len);
 800765c:	4b5b      	ldr	r3, [pc, #364]	; (80077cc <tcp_input+0x200>)
 800765e:	881f      	ldrh	r7, [r3, #0]
 8007660:	1b3e      	subs	r6, r7, r4
 8007662:	b2b6      	uxth	r6, r6
    pbuf_remove_header(p, tcphdr_opt1len);
 8007664:	4621      	mov	r1, r4
 8007666:	4628      	mov	r0, r5
 8007668:	f7fd fd5e 	bl	8005128 <pbuf_remove_header>
    if (opt2len > p->next->len) {
 800766c:	6828      	ldr	r0, [r5, #0]
 800766e:	8943      	ldrh	r3, [r0, #10]
 8007670:	42b3      	cmp	r3, r6
 8007672:	d3b6      	bcc.n	80075e2 <tcp_input+0x16>
    tcphdr_opt2 = (u8_t *)p->next->payload;
 8007674:	6842      	ldr	r2, [r0, #4]
 8007676:	4b56      	ldr	r3, [pc, #344]	; (80077d0 <tcp_input+0x204>)
 8007678:	601a      	str	r2, [r3, #0]
    pbuf_remove_header(p->next, opt2len);
 800767a:	4631      	mov	r1, r6
 800767c:	f7fd fd54 	bl	8005128 <pbuf_remove_header>
    p->tot_len = (u16_t)(p->tot_len - opt2len);
 8007680:	892b      	ldrh	r3, [r5, #8]
 8007682:	441c      	add	r4, r3
 8007684:	1be4      	subs	r4, r4, r7
 8007686:	812c      	strh	r4, [r5, #8]
    LWIP_ASSERT("p->len == 0", p->len == 0);
 8007688:	896b      	ldrh	r3, [r5, #10]
 800768a:	2b00      	cmp	r3, #0
 800768c:	d14f      	bne.n	800772e <tcp_input+0x162>
    LWIP_ASSERT("p->tot_len == p->next->tot_len", p->tot_len == p->next->tot_len);
 800768e:	682b      	ldr	r3, [r5, #0]
 8007690:	892a      	ldrh	r2, [r5, #8]
 8007692:	891b      	ldrh	r3, [r3, #8]
 8007694:	429a      	cmp	r2, r3
 8007696:	d00b      	beq.n	80076b0 <tcp_input+0xe4>
 8007698:	4b48      	ldr	r3, [pc, #288]	; (80077bc <tcp_input+0x1f0>)
 800769a:	22e0      	movs	r2, #224	; 0xe0
 800769c:	494e      	ldr	r1, [pc, #312]	; (80077d8 <tcp_input+0x20c>)
 800769e:	4849      	ldr	r0, [pc, #292]	; (80077c4 <tcp_input+0x1f8>)
 80076a0:	f003 feca 	bl	800b438 <iprintf>
 80076a4:	e004      	b.n	80076b0 <tcp_input+0xe4>
    tcphdr_opt1len = tcphdr_optlen;
 80076a6:	4b4b      	ldr	r3, [pc, #300]	; (80077d4 <tcp_input+0x208>)
 80076a8:	801a      	strh	r2, [r3, #0]
    pbuf_remove_header(p, hdrlen_bytes); /* cannot fail */
 80076aa:	4628      	mov	r0, r5
 80076ac:	f7fd fd3c 	bl	8005128 <pbuf_remove_header>
  tcphdr->src = lwip_ntohs(tcphdr->src);
 80076b0:	4c41      	ldr	r4, [pc, #260]	; (80077b8 <tcp_input+0x1ec>)
 80076b2:	6826      	ldr	r6, [r4, #0]
 80076b4:	8830      	ldrh	r0, [r6, #0]
 80076b6:	f7fc ff53 	bl	8004560 <lwip_htons>
 80076ba:	8030      	strh	r0, [r6, #0]
  tcphdr->dest = lwip_ntohs(tcphdr->dest);
 80076bc:	6826      	ldr	r6, [r4, #0]
 80076be:	8870      	ldrh	r0, [r6, #2]
 80076c0:	f7fc ff4e 	bl	8004560 <lwip_htons>
 80076c4:	8070      	strh	r0, [r6, #2]
  seqno = tcphdr->seqno = lwip_ntohl(tcphdr->seqno);
 80076c6:	6826      	ldr	r6, [r4, #0]
 80076c8:	6870      	ldr	r0, [r6, #4]
 80076ca:	f7fc ff4e 	bl	800456a <lwip_htonl>
 80076ce:	6070      	str	r0, [r6, #4]
 80076d0:	4b42      	ldr	r3, [pc, #264]	; (80077dc <tcp_input+0x210>)
 80076d2:	6018      	str	r0, [r3, #0]
  ackno = tcphdr->ackno = lwip_ntohl(tcphdr->ackno);
 80076d4:	6826      	ldr	r6, [r4, #0]
 80076d6:	68b0      	ldr	r0, [r6, #8]
 80076d8:	f7fc ff47 	bl	800456a <lwip_htonl>
 80076dc:	60b0      	str	r0, [r6, #8]
 80076de:	4b40      	ldr	r3, [pc, #256]	; (80077e0 <tcp_input+0x214>)
 80076e0:	6018      	str	r0, [r3, #0]
  tcphdr->wnd = lwip_ntohs(tcphdr->wnd);
 80076e2:	6826      	ldr	r6, [r4, #0]
 80076e4:	89f0      	ldrh	r0, [r6, #14]
 80076e6:	f7fc ff3b 	bl	8004560 <lwip_htons>
 80076ea:	81f0      	strh	r0, [r6, #14]
  flags = TCPH_FLAGS(tcphdr);
 80076ec:	6823      	ldr	r3, [r4, #0]
 80076ee:	8998      	ldrh	r0, [r3, #12]
 80076f0:	f7fc ff36 	bl	8004560 <lwip_htons>
 80076f4:	f000 023f 	and.w	r2, r0, #63	; 0x3f
 80076f8:	4b3a      	ldr	r3, [pc, #232]	; (80077e4 <tcp_input+0x218>)
 80076fa:	701a      	strb	r2, [r3, #0]
  tcplen = p->tot_len;
 80076fc:	892a      	ldrh	r2, [r5, #8]
  if (flags & (TCP_FIN | TCP_SYN)) {
 80076fe:	f010 0f03 	tst.w	r0, #3
 8007702:	d11b      	bne.n	800773c <tcp_input+0x170>
  tcplen = p->tot_len;
 8007704:	4b38      	ldr	r3, [pc, #224]	; (80077e8 <tcp_input+0x21c>)
 8007706:	801a      	strh	r2, [r3, #0]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8007708:	4b38      	ldr	r3, [pc, #224]	; (80077ec <tcp_input+0x220>)
 800770a:	681c      	ldr	r4, [r3, #0]
 800770c:	2c00      	cmp	r4, #0
 800770e:	f000 8563 	beq.w	80081d8 <tcp_input+0xc0c>
  prev = NULL;
 8007712:	2600      	movs	r6, #0
    LWIP_ASSERT("tcp_input: active pcb->state != CLOSED", pcb->state != CLOSED);
 8007714:	f8df 80a4 	ldr.w	r8, [pc, #164]	; 80077bc <tcp_input+0x1f0>
 8007718:	f8df 90e4 	ldr.w	r9, [pc, #228]	; 8007800 <tcp_input+0x234>
 800771c:	4f29      	ldr	r7, [pc, #164]	; (80077c4 <tcp_input+0x1f8>)
 800771e:	e035      	b.n	800778c <tcp_input+0x1c0>
    LWIP_ASSERT("p->next != NULL", p->next != NULL);
 8007720:	4b26      	ldr	r3, [pc, #152]	; (80077bc <tcp_input+0x1f0>)
 8007722:	22c2      	movs	r2, #194	; 0xc2
 8007724:	4932      	ldr	r1, [pc, #200]	; (80077f0 <tcp_input+0x224>)
 8007726:	4827      	ldr	r0, [pc, #156]	; (80077c4 <tcp_input+0x1f8>)
 8007728:	f003 fe86 	bl	800b438 <iprintf>
 800772c:	e78f      	b.n	800764e <tcp_input+0x82>
    LWIP_ASSERT("p->len == 0", p->len == 0);
 800772e:	4b23      	ldr	r3, [pc, #140]	; (80077bc <tcp_input+0x1f0>)
 8007730:	22df      	movs	r2, #223	; 0xdf
 8007732:	4930      	ldr	r1, [pc, #192]	; (80077f4 <tcp_input+0x228>)
 8007734:	4823      	ldr	r0, [pc, #140]	; (80077c4 <tcp_input+0x1f8>)
 8007736:	f003 fe7f 	bl	800b438 <iprintf>
 800773a:	e7a8      	b.n	800768e <tcp_input+0xc2>
    tcplen++;
 800773c:	1c53      	adds	r3, r2, #1
 800773e:	b29b      	uxth	r3, r3
 8007740:	4929      	ldr	r1, [pc, #164]	; (80077e8 <tcp_input+0x21c>)
 8007742:	800b      	strh	r3, [r1, #0]
    if (tcplen < p->tot_len) {
 8007744:	429a      	cmp	r2, r3
 8007746:	d9df      	bls.n	8007708 <tcp_input+0x13c>
 8007748:	e74b      	b.n	80075e2 <tcp_input+0x16>
    LWIP_ASSERT("tcp_input: active pcb->state != CLOSED", pcb->state != CLOSED);
 800774a:	4643      	mov	r3, r8
 800774c:	22fb      	movs	r2, #251	; 0xfb
 800774e:	4649      	mov	r1, r9
 8007750:	4638      	mov	r0, r7
 8007752:	f003 fe71 	bl	800b438 <iprintf>
 8007756:	e01c      	b.n	8007792 <tcp_input+0x1c6>
    LWIP_ASSERT("tcp_input: active pcb->state != TIME-WAIT", pcb->state != TIME_WAIT);
 8007758:	4643      	mov	r3, r8
 800775a:	22fc      	movs	r2, #252	; 0xfc
 800775c:	4926      	ldr	r1, [pc, #152]	; (80077f8 <tcp_input+0x22c>)
 800775e:	4638      	mov	r0, r7
 8007760:	f003 fe6a 	bl	800b438 <iprintf>
 8007764:	e018      	b.n	8007798 <tcp_input+0x1cc>
    LWIP_ASSERT("tcp_input: active pcb->state != LISTEN", pcb->state != LISTEN);
 8007766:	4643      	mov	r3, r8
 8007768:	22fd      	movs	r2, #253	; 0xfd
 800776a:	4924      	ldr	r1, [pc, #144]	; (80077fc <tcp_input+0x230>)
 800776c:	4638      	mov	r0, r7
 800776e:	f003 fe63 	bl	800b438 <iprintf>
 8007772:	e014      	b.n	800779e <tcp_input+0x1d2>
    if (pcb->remote_port == tcphdr->src &&
 8007774:	4b10      	ldr	r3, [pc, #64]	; (80077b8 <tcp_input+0x1ec>)
 8007776:	681b      	ldr	r3, [r3, #0]
 8007778:	8b21      	ldrh	r1, [r4, #24]
 800777a:	881a      	ldrh	r2, [r3, #0]
 800777c:	4291      	cmp	r1, r2
 800777e:	d041      	beq.n	8007804 <tcp_input+0x238>
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8007780:	68e3      	ldr	r3, [r4, #12]
 8007782:	4626      	mov	r6, r4
 8007784:	2b00      	cmp	r3, #0
 8007786:	f000 8527 	beq.w	80081d8 <tcp_input+0xc0c>
 800778a:	461c      	mov	r4, r3
    LWIP_ASSERT("tcp_input: active pcb->state != CLOSED", pcb->state != CLOSED);
 800778c:	7d23      	ldrb	r3, [r4, #20]
 800778e:	2b00      	cmp	r3, #0
 8007790:	d0db      	beq.n	800774a <tcp_input+0x17e>
    LWIP_ASSERT("tcp_input: active pcb->state != TIME-WAIT", pcb->state != TIME_WAIT);
 8007792:	7d23      	ldrb	r3, [r4, #20]
 8007794:	2b0a      	cmp	r3, #10
 8007796:	d0df      	beq.n	8007758 <tcp_input+0x18c>
    LWIP_ASSERT("tcp_input: active pcb->state != LISTEN", pcb->state != LISTEN);
 8007798:	7d23      	ldrb	r3, [r4, #20]
 800779a:	2b01      	cmp	r3, #1
 800779c:	d0e3      	beq.n	8007766 <tcp_input+0x19a>
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800779e:	7a22      	ldrb	r2, [r4, #8]
 80077a0:	2a00      	cmp	r2, #0
 80077a2:	d0e7      	beq.n	8007774 <tcp_input+0x1a8>
        (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 80077a4:	4b08      	ldr	r3, [pc, #32]	; (80077c8 <tcp_input+0x1fc>)
 80077a6:	685b      	ldr	r3, [r3, #4]
 80077a8:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80077ac:	3301      	adds	r3, #1
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 80077ae:	b2db      	uxtb	r3, r3
 80077b0:	429a      	cmp	r2, r3
 80077b2:	d0df      	beq.n	8007774 <tcp_input+0x1a8>
 80077b4:	e7e4      	b.n	8007780 <tcp_input+0x1b4>
 80077b6:	bf00      	nop
 80077b8:	2000aea4 	.word	0x2000aea4
 80077bc:	08011488 	.word	0x08011488
 80077c0:	080116a4 	.word	0x080116a4
 80077c4:	0800cb24 	.word	0x0800cb24
 80077c8:	20005728 	.word	0x20005728
 80077cc:	2000aeb0 	.word	0x2000aeb0
 80077d0:	2000aeac 	.word	0x2000aeac
 80077d4:	2000aea8 	.word	0x2000aea8
 80077d8:	080116d8 	.word	0x080116d8
 80077dc:	2000ae98 	.word	0x2000ae98
 80077e0:	2000ae74 	.word	0x2000ae74
 80077e4:	2000ae78 	.word	0x2000ae78
 80077e8:	2000aeb2 	.word	0x2000aeb2
 80077ec:	2000ae58 	.word	0x2000ae58
 80077f0:	080116bc 	.word	0x080116bc
 80077f4:	080116cc 	.word	0x080116cc
 80077f8:	08011720 	.word	0x08011720
 80077fc:	0801174c 	.word	0x0801174c
 8007800:	080116f8 	.word	0x080116f8
    if (pcb->remote_port == tcphdr->src &&
 8007804:	8ae2      	ldrh	r2, [r4, #22]
 8007806:	885b      	ldrh	r3, [r3, #2]
 8007808:	429a      	cmp	r2, r3
 800780a:	d1b9      	bne.n	8007780 <tcp_input+0x1b4>
        pcb->local_port == tcphdr->dest &&
 800780c:	6862      	ldr	r2, [r4, #4]
 800780e:	4b8f      	ldr	r3, [pc, #572]	; (8007a4c <tcp_input+0x480>)
 8007810:	691b      	ldr	r3, [r3, #16]
 8007812:	429a      	cmp	r2, r3
 8007814:	d1b4      	bne.n	8007780 <tcp_input+0x1b4>
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8007816:	6822      	ldr	r2, [r4, #0]
 8007818:	4b8c      	ldr	r3, [pc, #560]	; (8007a4c <tcp_input+0x480>)
 800781a:	695b      	ldr	r3, [r3, #20]
 800781c:	429a      	cmp	r2, r3
 800781e:	d1af      	bne.n	8007780 <tcp_input+0x1b4>
      LWIP_ASSERT("tcp_input: pcb->next != pcb (before cache)", pcb->next != pcb);
 8007820:	68e3      	ldr	r3, [r4, #12]
 8007822:	42a3      	cmp	r3, r4
 8007824:	d04d      	beq.n	80078c2 <tcp_input+0x2f6>
      if (prev != NULL) {
 8007826:	b146      	cbz	r6, 800783a <tcp_input+0x26e>
        prev->next = pcb->next;
 8007828:	68e3      	ldr	r3, [r4, #12]
 800782a:	60f3      	str	r3, [r6, #12]
        pcb->next = tcp_active_pcbs;
 800782c:	4b88      	ldr	r3, [pc, #544]	; (8007a50 <tcp_input+0x484>)
 800782e:	681a      	ldr	r2, [r3, #0]
 8007830:	60e2      	str	r2, [r4, #12]
        tcp_active_pcbs = pcb;
 8007832:	601c      	str	r4, [r3, #0]
      LWIP_ASSERT("tcp_input: pcb->next != pcb (after cache)", pcb->next != pcb);
 8007834:	68e3      	ldr	r3, [r4, #12]
 8007836:	42a3      	cmp	r3, r4
 8007838:	d04d      	beq.n	80078d6 <tcp_input+0x30a>
    inseg.next = NULL;
 800783a:	4a86      	ldr	r2, [pc, #536]	; (8007a54 <tcp_input+0x488>)
 800783c:	2300      	movs	r3, #0
 800783e:	6013      	str	r3, [r2, #0]
    inseg.len = p->tot_len;
 8007840:	8929      	ldrh	r1, [r5, #8]
 8007842:	8111      	strh	r1, [r2, #8]
    inseg.p = p;
 8007844:	6055      	str	r5, [r2, #4]
    inseg.tcphdr = tcphdr;
 8007846:	4984      	ldr	r1, [pc, #528]	; (8007a58 <tcp_input+0x48c>)
 8007848:	6809      	ldr	r1, [r1, #0]
 800784a:	60d1      	str	r1, [r2, #12]
    recv_data = NULL;
 800784c:	4a83      	ldr	r2, [pc, #524]	; (8007a5c <tcp_input+0x490>)
 800784e:	6013      	str	r3, [r2, #0]
    recv_flags = 0;
 8007850:	4a83      	ldr	r2, [pc, #524]	; (8007a60 <tcp_input+0x494>)
 8007852:	7013      	strb	r3, [r2, #0]
    recv_acked = 0;
 8007854:	4a83      	ldr	r2, [pc, #524]	; (8007a64 <tcp_input+0x498>)
 8007856:	8013      	strh	r3, [r2, #0]
    if (flags & TCP_PSH) {
 8007858:	4b83      	ldr	r3, [pc, #524]	; (8007a68 <tcp_input+0x49c>)
 800785a:	781b      	ldrb	r3, [r3, #0]
 800785c:	f013 0f08 	tst.w	r3, #8
 8007860:	f040 817c 	bne.w	8007b5c <tcp_input+0x590>
    if (pcb->refused_data != NULL) {
 8007864:	6fa3      	ldr	r3, [r4, #120]	; 0x78
 8007866:	b16b      	cbz	r3, 8007884 <tcp_input+0x2b8>
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 8007868:	4620      	mov	r0, r4
 800786a:	f7fe fdbb 	bl	80063e4 <tcp_process_refused_data>
 800786e:	f110 0f0d 	cmn.w	r0, #13
 8007872:	f000 8178 	beq.w	8007b66 <tcp_input+0x59a>
 8007876:	6fa3      	ldr	r3, [r4, #120]	; 0x78
 8007878:	b123      	cbz	r3, 8007884 <tcp_input+0x2b8>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 800787a:	4b7c      	ldr	r3, [pc, #496]	; (8007a6c <tcp_input+0x4a0>)
 800787c:	881b      	ldrh	r3, [r3, #0]
 800787e:	2b00      	cmp	r3, #0
 8007880:	f040 8171 	bne.w	8007b66 <tcp_input+0x59a>
    tcp_input_pcb = pcb;
 8007884:	4b7a      	ldr	r3, [pc, #488]	; (8007a70 <tcp_input+0x4a4>)
 8007886:	601c      	str	r4, [r3, #0]
  if (flags & TCP_RST) {
 8007888:	4b77      	ldr	r3, [pc, #476]	; (8007a68 <tcp_input+0x49c>)
 800788a:	781b      	ldrb	r3, [r3, #0]
 800788c:	f013 0f04 	tst.w	r3, #4
 8007890:	f000 81aa 	beq.w	8007be8 <tcp_input+0x61c>
    if (pcb->state == SYN_SENT) {
 8007894:	7d21      	ldrb	r1, [r4, #20]
 8007896:	2902      	cmp	r1, #2
 8007898:	f000 816b 	beq.w	8007b72 <tcp_input+0x5a6>
      if (seqno == pcb->rcv_nxt) {
 800789c:	6a62      	ldr	r2, [r4, #36]	; 0x24
 800789e:	4b75      	ldr	r3, [pc, #468]	; (8007a74 <tcp_input+0x4a8>)
 80078a0:	681b      	ldr	r3, [r3, #0]
 80078a2:	429a      	cmp	r2, r3
 80078a4:	f000 818e 	beq.w	8007bc4 <tcp_input+0x5f8>
      } else  if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 80078a8:	1a9b      	subs	r3, r3, r2
 80078aa:	f100 8167 	bmi.w	8007b7c <tcp_input+0x5b0>
 80078ae:	8d22      	ldrh	r2, [r4, #40]	; 0x28
 80078b0:	1a9b      	subs	r3, r3, r2
 80078b2:	2b00      	cmp	r3, #0
 80078b4:	f300 8162 	bgt.w	8007b7c <tcp_input+0x5b0>
        tcp_ack_now(pcb);
 80078b8:	8b63      	ldrh	r3, [r4, #26]
 80078ba:	f043 0302 	orr.w	r3, r3, #2
 80078be:	8363      	strh	r3, [r4, #26]
    if (acceptable) {
 80078c0:	e15c      	b.n	8007b7c <tcp_input+0x5b0>
      LWIP_ASSERT("tcp_input: pcb->next != pcb (before cache)", pcb->next != pcb);
 80078c2:	4b6d      	ldr	r3, [pc, #436]	; (8007a78 <tcp_input+0x4ac>)
 80078c4:	f240 120d 	movw	r2, #269	; 0x10d
 80078c8:	496c      	ldr	r1, [pc, #432]	; (8007a7c <tcp_input+0x4b0>)
 80078ca:	486d      	ldr	r0, [pc, #436]	; (8007a80 <tcp_input+0x4b4>)
 80078cc:	f003 fdb4 	bl	800b438 <iprintf>
      if (prev != NULL) {
 80078d0:	2e00      	cmp	r6, #0
 80078d2:	d1a9      	bne.n	8007828 <tcp_input+0x25c>
 80078d4:	e7ae      	b.n	8007834 <tcp_input+0x268>
      LWIP_ASSERT("tcp_input: pcb->next != pcb (after cache)", pcb->next != pcb);
 80078d6:	4b68      	ldr	r3, [pc, #416]	; (8007a78 <tcp_input+0x4ac>)
 80078d8:	f240 1215 	movw	r2, #277	; 0x115
 80078dc:	4969      	ldr	r1, [pc, #420]	; (8007a84 <tcp_input+0x4b8>)
 80078de:	4868      	ldr	r0, [pc, #416]	; (8007a80 <tcp_input+0x4b4>)
 80078e0:	f003 fdaa 	bl	800b438 <iprintf>
 80078e4:	e7a9      	b.n	800783a <tcp_input+0x26e>
      LWIP_ASSERT("tcp_input: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 80078e6:	4643      	mov	r3, r8
 80078e8:	f240 121f 	movw	r2, #287	; 0x11f
 80078ec:	4639      	mov	r1, r7
 80078ee:	4630      	mov	r0, r6
 80078f0:	f003 fda2 	bl	800b438 <iprintf>
 80078f4:	e00b      	b.n	800790e <tcp_input+0x342>
      if (pcb->remote_port == tcphdr->src &&
 80078f6:	4b58      	ldr	r3, [pc, #352]	; (8007a58 <tcp_input+0x48c>)
 80078f8:	681b      	ldr	r3, [r3, #0]
 80078fa:	8819      	ldrh	r1, [r3, #0]
 80078fc:	8b22      	ldrh	r2, [r4, #24]
 80078fe:	428a      	cmp	r2, r1
 8007900:	d011      	beq.n	8007926 <tcp_input+0x35a>
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8007902:	68e4      	ldr	r4, [r4, #12]
 8007904:	2c00      	cmp	r4, #0
 8007906:	d051      	beq.n	80079ac <tcp_input+0x3e0>
      LWIP_ASSERT("tcp_input: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 8007908:	7d23      	ldrb	r3, [r4, #20]
 800790a:	2b0a      	cmp	r3, #10
 800790c:	d1eb      	bne.n	80078e6 <tcp_input+0x31a>
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800790e:	7a22      	ldrb	r2, [r4, #8]
 8007910:	2a00      	cmp	r2, #0
 8007912:	d0f0      	beq.n	80078f6 <tcp_input+0x32a>
          (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 8007914:	4b4d      	ldr	r3, [pc, #308]	; (8007a4c <tcp_input+0x480>)
 8007916:	685b      	ldr	r3, [r3, #4]
 8007918:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800791c:	3301      	adds	r3, #1
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800791e:	b2db      	uxtb	r3, r3
 8007920:	429a      	cmp	r2, r3
 8007922:	d0e8      	beq.n	80078f6 <tcp_input+0x32a>
 8007924:	e7ed      	b.n	8007902 <tcp_input+0x336>
          pcb->local_port == tcphdr->dest &&
 8007926:	8858      	ldrh	r0, [r3, #2]
      if (pcb->remote_port == tcphdr->src &&
 8007928:	8ae3      	ldrh	r3, [r4, #22]
 800792a:	4283      	cmp	r3, r0
 800792c:	d1e9      	bne.n	8007902 <tcp_input+0x336>
          pcb->local_port == tcphdr->dest &&
 800792e:	6862      	ldr	r2, [r4, #4]
 8007930:	4b46      	ldr	r3, [pc, #280]	; (8007a4c <tcp_input+0x480>)
 8007932:	691b      	ldr	r3, [r3, #16]
 8007934:	429a      	cmp	r2, r3
 8007936:	d1e4      	bne.n	8007902 <tcp_input+0x336>
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8007938:	6822      	ldr	r2, [r4, #0]
 800793a:	4b44      	ldr	r3, [pc, #272]	; (8007a4c <tcp_input+0x480>)
 800793c:	695b      	ldr	r3, [r3, #20]
 800793e:	429a      	cmp	r2, r3
 8007940:	d1df      	bne.n	8007902 <tcp_input+0x336>
  if (flags & TCP_RST) {
 8007942:	4b49      	ldr	r3, [pc, #292]	; (8007a68 <tcp_input+0x49c>)
 8007944:	781b      	ldrb	r3, [r3, #0]
 8007946:	f013 0f04 	tst.w	r3, #4
 800794a:	d10e      	bne.n	800796a <tcp_input+0x39e>
  if (flags & TCP_SYN) {
 800794c:	f013 0f02 	tst.w	r3, #2
 8007950:	d01d      	beq.n	800798e <tcp_input+0x3c2>
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd)) {
 8007952:	4b48      	ldr	r3, [pc, #288]	; (8007a74 <tcp_input+0x4a8>)
 8007954:	681a      	ldr	r2, [r3, #0]
 8007956:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007958:	1ad3      	subs	r3, r2, r3
 800795a:	d403      	bmi.n	8007964 <tcp_input+0x398>
 800795c:	8d26      	ldrh	r6, [r4, #40]	; 0x28
 800795e:	1b9b      	subs	r3, r3, r6
 8007960:	2b00      	cmp	r3, #0
 8007962:	dd06      	ble.n	8007972 <tcp_input+0x3a6>
  if ((tcplen > 0)) {
 8007964:	4b41      	ldr	r3, [pc, #260]	; (8007a6c <tcp_input+0x4a0>)
 8007966:	881b      	ldrh	r3, [r3, #0]
 8007968:	b9c3      	cbnz	r3, 800799c <tcp_input+0x3d0>
        pbuf_free(p);
 800796a:	4628      	mov	r0, r5
 800796c:	f7fd fc1c 	bl	80051a8 <pbuf_free>
        return;
 8007970:	e63a      	b.n	80075e8 <tcp_input+0x1c>
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8007972:	4b45      	ldr	r3, [pc, #276]	; (8007a88 <tcp_input+0x4bc>)
 8007974:	4e3d      	ldr	r6, [pc, #244]	; (8007a6c <tcp_input+0x4a0>)
 8007976:	8836      	ldrh	r6, [r6, #0]
 8007978:	9102      	str	r1, [sp, #8]
 800797a:	9001      	str	r0, [sp, #4]
 800797c:	1f19      	subs	r1, r3, #4
 800797e:	9100      	str	r1, [sp, #0]
 8007980:	4432      	add	r2, r6
 8007982:	4942      	ldr	r1, [pc, #264]	; (8007a8c <tcp_input+0x4c0>)
 8007984:	6809      	ldr	r1, [r1, #0]
 8007986:	4620      	mov	r0, r4
 8007988:	f001 fbd8 	bl	800913c <tcp_rst>
      return;
 800798c:	e7ed      	b.n	800796a <tcp_input+0x39e>
  } else if (flags & TCP_FIN) {
 800798e:	f013 0f01 	tst.w	r3, #1
 8007992:	d0e7      	beq.n	8007964 <tcp_input+0x398>
    pcb->tmr = tcp_ticks;
 8007994:	4b3e      	ldr	r3, [pc, #248]	; (8007a90 <tcp_input+0x4c4>)
 8007996:	681b      	ldr	r3, [r3, #0]
 8007998:	6223      	str	r3, [r4, #32]
 800799a:	e7e3      	b.n	8007964 <tcp_input+0x398>
    tcp_ack_now(pcb);
 800799c:	8b63      	ldrh	r3, [r4, #26]
 800799e:	f043 0302 	orr.w	r3, r3, #2
 80079a2:	8363      	strh	r3, [r4, #26]
    tcp_output(pcb);
 80079a4:	4620      	mov	r0, r4
 80079a6:	f001 fc4b 	bl	8009240 <tcp_output>
 80079aa:	e7de      	b.n	800796a <tcp_input+0x39e>
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 80079ac:	4b39      	ldr	r3, [pc, #228]	; (8007a94 <tcp_input+0x4c8>)
 80079ae:	f8d3 c000 	ldr.w	ip, [r3]
 80079b2:	f1bc 0f00 	cmp.w	ip, #0
 80079b6:	f000 8402 	beq.w	80081be <tcp_input+0xbf2>
          (lpcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 80079ba:	4b24      	ldr	r3, [pc, #144]	; (8007a4c <tcp_input+0x480>)
 80079bc:	685e      	ldr	r6, [r3, #4]
      if (lpcb->local_port == tcphdr->dest) {
 80079be:	4a26      	ldr	r2, [pc, #152]	; (8007a58 <tcp_input+0x48c>)
 80079c0:	6810      	ldr	r0, [r2, #0]
          if (ip_addr_cmp(&lpcb->local_ip, ip_current_dest_addr())) {
 80079c2:	695f      	ldr	r7, [r3, #20]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 80079c4:	4664      	mov	r4, ip
    prev = NULL;
 80079c6:	2100      	movs	r1, #0
 80079c8:	e009      	b.n	80079de <tcp_input+0x412>
      if (lpcb->local_port == tcphdr->dest) {
 80079ca:	8ae2      	ldrh	r2, [r4, #22]
 80079cc:	8843      	ldrh	r3, [r0, #2]
 80079ce:	429a      	cmp	r2, r3
 80079d0:	d00f      	beq.n	80079f2 <tcp_input+0x426>
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 80079d2:	68e3      	ldr	r3, [r4, #12]
 80079d4:	4621      	mov	r1, r4
 80079d6:	2b00      	cmp	r3, #0
 80079d8:	f000 83f1 	beq.w	80081be <tcp_input+0xbf2>
 80079dc:	461c      	mov	r4, r3
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 80079de:	7a22      	ldrb	r2, [r4, #8]
 80079e0:	2a00      	cmp	r2, #0
 80079e2:	d0f2      	beq.n	80079ca <tcp_input+0x3fe>
          (lpcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 80079e4:	f896 3030 	ldrb.w	r3, [r6, #48]	; 0x30
 80079e8:	3301      	adds	r3, #1
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 80079ea:	b2db      	uxtb	r3, r3
 80079ec:	429a      	cmp	r2, r3
 80079ee:	d0ec      	beq.n	80079ca <tcp_input+0x3fe>
 80079f0:	e7ef      	b.n	80079d2 <tcp_input+0x406>
          if (ip_addr_cmp(&lpcb->local_ip, ip_current_dest_addr())) {
 80079f2:	6823      	ldr	r3, [r4, #0]
 80079f4:	42bb      	cmp	r3, r7
 80079f6:	d001      	beq.n	80079fc <tcp_input+0x430>
          } else if (ip_addr_isany(&lpcb->local_ip)) {
 80079f8:	2b00      	cmp	r3, #0
 80079fa:	d1ea      	bne.n	80079d2 <tcp_input+0x406>
      if (prev != NULL) {
 80079fc:	b129      	cbz	r1, 8007a0a <tcp_input+0x43e>
        ((struct tcp_pcb_listen *)prev)->next = lpcb->next;
 80079fe:	68e3      	ldr	r3, [r4, #12]
 8007a00:	60cb      	str	r3, [r1, #12]
        lpcb->next = tcp_listen_pcbs.listen_pcbs;
 8007a02:	f8c4 c00c 	str.w	ip, [r4, #12]
        tcp_listen_pcbs.listen_pcbs = lpcb;
 8007a06:	4b23      	ldr	r3, [pc, #140]	; (8007a94 <tcp_input+0x4c8>)
 8007a08:	601c      	str	r4, [r3, #0]
  if (flags & TCP_RST) {
 8007a0a:	4b17      	ldr	r3, [pc, #92]	; (8007a68 <tcp_input+0x49c>)
 8007a0c:	781b      	ldrb	r3, [r3, #0]
 8007a0e:	f013 0f04 	tst.w	r3, #4
 8007a12:	d105      	bne.n	8007a20 <tcp_input+0x454>
  if (flags & TCP_ACK) {
 8007a14:	f013 0f10 	tst.w	r3, #16
 8007a18:	d106      	bne.n	8007a28 <tcp_input+0x45c>
  } else if (flags & TCP_SYN) {
 8007a1a:	f013 0f02 	tst.w	r3, #2
 8007a1e:	d13b      	bne.n	8007a98 <tcp_input+0x4cc>
      pbuf_free(p);
 8007a20:	4628      	mov	r0, r5
 8007a22:	f7fd fbc1 	bl	80051a8 <pbuf_free>
      return;
 8007a26:	e5df      	b.n	80075e8 <tcp_input+0x1c>
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8007a28:	4b17      	ldr	r3, [pc, #92]	; (8007a88 <tcp_input+0x4bc>)
 8007a2a:	4a10      	ldr	r2, [pc, #64]	; (8007a6c <tcp_input+0x4a0>)
 8007a2c:	8811      	ldrh	r1, [r2, #0]
 8007a2e:	4a11      	ldr	r2, [pc, #68]	; (8007a74 <tcp_input+0x4a8>)
 8007a30:	6812      	ldr	r2, [r2, #0]
 8007a32:	8806      	ldrh	r6, [r0, #0]
 8007a34:	9602      	str	r6, [sp, #8]
 8007a36:	8840      	ldrh	r0, [r0, #2]
 8007a38:	9001      	str	r0, [sp, #4]
 8007a3a:	1f18      	subs	r0, r3, #4
 8007a3c:	9000      	str	r0, [sp, #0]
 8007a3e:	440a      	add	r2, r1
 8007a40:	4912      	ldr	r1, [pc, #72]	; (8007a8c <tcp_input+0x4c0>)
 8007a42:	6809      	ldr	r1, [r1, #0]
 8007a44:	4620      	mov	r0, r4
 8007a46:	f001 fb79 	bl	800913c <tcp_rst>
 8007a4a:	e7e9      	b.n	8007a20 <tcp_input+0x454>
 8007a4c:	20005728 	.word	0x20005728
 8007a50:	2000ae58 	.word	0x2000ae58
 8007a54:	2000ae7c 	.word	0x2000ae7c
 8007a58:	2000aea4 	.word	0x2000aea4
 8007a5c:	2000ae90 	.word	0x2000ae90
 8007a60:	2000ae94 	.word	0x2000ae94
 8007a64:	2000ae8c 	.word	0x2000ae8c
 8007a68:	2000ae78 	.word	0x2000ae78
 8007a6c:	2000aeb2 	.word	0x2000aeb2
 8007a70:	2000ae9c 	.word	0x2000ae9c
 8007a74:	2000ae98 	.word	0x2000ae98
 8007a78:	08011488 	.word	0x08011488
 8007a7c:	08011774 	.word	0x08011774
 8007a80:	0800cb24 	.word	0x0800cb24
 8007a84:	080117a0 	.word	0x080117a0
 8007a88:	2000573c 	.word	0x2000573c
 8007a8c:	2000ae74 	.word	0x2000ae74
 8007a90:	2000ae68 	.word	0x2000ae68
 8007a94:	2000ae64 	.word	0x2000ae64
    npcb = tcp_alloc(pcb->prio);
 8007a98:	7d60      	ldrb	r0, [r4, #21]
 8007a9a:	f7fe faed 	bl	8006078 <tcp_alloc>
    if (npcb == NULL) {
 8007a9e:	4606      	mov	r6, r0
 8007aa0:	2800      	cmp	r0, #0
 8007aa2:	d04c      	beq.n	8007b3e <tcp_input+0x572>
    ip_addr_copy(npcb->local_ip, *ip_current_dest_addr());
 8007aa4:	4ba5      	ldr	r3, [pc, #660]	; (8007d3c <tcp_input+0x770>)
 8007aa6:	695a      	ldr	r2, [r3, #20]
 8007aa8:	6002      	str	r2, [r0, #0]
    ip_addr_copy(npcb->remote_ip, *ip_current_src_addr());
 8007aaa:	691b      	ldr	r3, [r3, #16]
 8007aac:	6043      	str	r3, [r0, #4]
    npcb->local_port = pcb->local_port;
 8007aae:	8ae3      	ldrh	r3, [r4, #22]
 8007ab0:	82c3      	strh	r3, [r0, #22]
    npcb->remote_port = tcphdr->src;
 8007ab2:	4fa3      	ldr	r7, [pc, #652]	; (8007d40 <tcp_input+0x774>)
 8007ab4:	683b      	ldr	r3, [r7, #0]
 8007ab6:	881b      	ldrh	r3, [r3, #0]
 8007ab8:	8303      	strh	r3, [r0, #24]
    npcb->state = SYN_RCVD;
 8007aba:	2303      	movs	r3, #3
 8007abc:	7503      	strb	r3, [r0, #20]
    npcb->rcv_nxt = seqno + 1;
 8007abe:	f8df 82bc 	ldr.w	r8, [pc, #700]	; 8007d7c <tcp_input+0x7b0>
 8007ac2:	f8d8 3000 	ldr.w	r3, [r8]
 8007ac6:	3301      	adds	r3, #1
 8007ac8:	6243      	str	r3, [r0, #36]	; 0x24
    npcb->rcv_ann_right_edge = npcb->rcv_nxt;
 8007aca:	62c3      	str	r3, [r0, #44]	; 0x2c
    iss = tcp_next_iss(npcb);
 8007acc:	f7fe f8d4 	bl	8005c78 <tcp_next_iss>
    npcb->snd_wl2 = iss;
 8007ad0:	65b0      	str	r0, [r6, #88]	; 0x58
    npcb->snd_nxt = iss;
 8007ad2:	6530      	str	r0, [r6, #80]	; 0x50
    npcb->lastack = iss;
 8007ad4:	6470      	str	r0, [r6, #68]	; 0x44
    npcb->snd_lbb = iss;
 8007ad6:	65f0      	str	r0, [r6, #92]	; 0x5c
    npcb->snd_wl1 = seqno - 1;/* initialise to seqno-1 to force window update */
 8007ad8:	f8d8 3000 	ldr.w	r3, [r8]
 8007adc:	3b01      	subs	r3, #1
 8007ade:	6573      	str	r3, [r6, #84]	; 0x54
    npcb->callback_arg = pcb->callback_arg;
 8007ae0:	6923      	ldr	r3, [r4, #16]
 8007ae2:	6133      	str	r3, [r6, #16]
    npcb->listener = pcb;
 8007ae4:	67f4      	str	r4, [r6, #124]	; 0x7c
    npcb->so_options = pcb->so_options & SOF_INHERITED;
 8007ae6:	7a63      	ldrb	r3, [r4, #9]
 8007ae8:	f003 030c 	and.w	r3, r3, #12
 8007aec:	7273      	strb	r3, [r6, #9]
    npcb->netif_idx = pcb->netif_idx;
 8007aee:	7a23      	ldrb	r3, [r4, #8]
 8007af0:	7233      	strb	r3, [r6, #8]
    TCP_REG_ACTIVE(npcb);
 8007af2:	4b94      	ldr	r3, [pc, #592]	; (8007d44 <tcp_input+0x778>)
 8007af4:	681a      	ldr	r2, [r3, #0]
 8007af6:	60f2      	str	r2, [r6, #12]
 8007af8:	601e      	str	r6, [r3, #0]
 8007afa:	f001 feb1 	bl	8009860 <tcp_timer_needed>
 8007afe:	4b92      	ldr	r3, [pc, #584]	; (8007d48 <tcp_input+0x77c>)
 8007b00:	2201      	movs	r2, #1
 8007b02:	701a      	strb	r2, [r3, #0]
    tcp_parseopt(npcb);
 8007b04:	4630      	mov	r0, r6
 8007b06:	f7fe ff97 	bl	8006a38 <tcp_parseopt>
    npcb->snd_wnd = tcphdr->wnd;
 8007b0a:	683b      	ldr	r3, [r7, #0]
 8007b0c:	89db      	ldrh	r3, [r3, #14]
 8007b0e:	f8a6 3060 	strh.w	r3, [r6, #96]	; 0x60
    npcb->snd_wnd_max = npcb->snd_wnd;
 8007b12:	f8a6 3062 	strh.w	r3, [r6, #98]	; 0x62
    npcb->mss = tcp_eff_send_mss(npcb->mss, &npcb->local_ip, &npcb->remote_ip);
 8007b16:	8e77      	ldrh	r7, [r6, #50]	; 0x32
 8007b18:	1d34      	adds	r4, r6, #4
 8007b1a:	4620      	mov	r0, r4
 8007b1c:	f002 fd7a 	bl	800a614 <ip4_route>
 8007b20:	4601      	mov	r1, r0
 8007b22:	4622      	mov	r2, r4
 8007b24:	4638      	mov	r0, r7
 8007b26:	f7fe f8c3 	bl	8005cb0 <tcp_eff_send_mss_netif>
 8007b2a:	8670      	strh	r0, [r6, #50]	; 0x32
    rc = tcp_enqueue_flags(npcb, TCP_SYN | TCP_ACK);
 8007b2c:	2112      	movs	r1, #18
 8007b2e:	4630      	mov	r0, r6
 8007b30:	f001 f956 	bl	8008de0 <tcp_enqueue_flags>
    if (rc != ERR_OK) {
 8007b34:	b968      	cbnz	r0, 8007b52 <tcp_input+0x586>
    tcp_output(npcb);
 8007b36:	4630      	mov	r0, r6
 8007b38:	f001 fb82 	bl	8009240 <tcp_output>
 8007b3c:	e770      	b.n	8007a20 <tcp_input+0x454>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 8007b3e:	69a3      	ldr	r3, [r4, #24]
 8007b40:	2b00      	cmp	r3, #0
 8007b42:	f43f af6d 	beq.w	8007a20 <tcp_input+0x454>
 8007b46:	f04f 32ff 	mov.w	r2, #4294967295
 8007b4a:	2100      	movs	r1, #0
 8007b4c:	6920      	ldr	r0, [r4, #16]
 8007b4e:	4798      	blx	r3
 8007b50:	e766      	b.n	8007a20 <tcp_input+0x454>
      tcp_abandon(npcb, 0);
 8007b52:	2100      	movs	r1, #0
 8007b54:	4630      	mov	r0, r6
 8007b56:	f7fe f96d 	bl	8005e34 <tcp_abandon>
      return;
 8007b5a:	e761      	b.n	8007a20 <tcp_input+0x454>
      p->flags |= PBUF_FLAG_PUSH;
 8007b5c:	7b6b      	ldrb	r3, [r5, #13]
 8007b5e:	f043 0301 	orr.w	r3, r3, #1
 8007b62:	736b      	strb	r3, [r5, #13]
 8007b64:	e67e      	b.n	8007864 <tcp_input+0x298>
        if (pcb->rcv_ann_wnd == 0) {
 8007b66:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8007b68:	b9e3      	cbnz	r3, 8007ba4 <tcp_input+0x5d8>
          tcp_send_empty_ack(pcb);
 8007b6a:	4620      	mov	r0, r4
 8007b6c:	f001 fb2e 	bl	80091cc <tcp_send_empty_ack>
 8007b70:	e018      	b.n	8007ba4 <tcp_input+0x5d8>
      if (ackno == pcb->snd_nxt) {
 8007b72:	6d22      	ldr	r2, [r4, #80]	; 0x50
 8007b74:	4b75      	ldr	r3, [pc, #468]	; (8007d4c <tcp_input+0x780>)
 8007b76:	681b      	ldr	r3, [r3, #0]
 8007b78:	429a      	cmp	r2, r3
 8007b7a:	d02b      	beq.n	8007bd4 <tcp_input+0x608>
      if (recv_flags & TF_RESET) {
 8007b7c:	4b74      	ldr	r3, [pc, #464]	; (8007d50 <tcp_input+0x784>)
 8007b7e:	781b      	ldrb	r3, [r3, #0]
 8007b80:	f013 0f08 	tst.w	r3, #8
 8007b84:	f000 8295 	beq.w	80080b2 <tcp_input+0xae6>
        TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_RST);
 8007b88:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 8007b8c:	b11b      	cbz	r3, 8007b96 <tcp_input+0x5ca>
 8007b8e:	f06f 010d 	mvn.w	r1, #13
 8007b92:	6920      	ldr	r0, [r4, #16]
 8007b94:	4798      	blx	r3
        tcp_pcb_remove(&tcp_active_pcbs, pcb);
 8007b96:	4621      	mov	r1, r4
 8007b98:	486a      	ldr	r0, [pc, #424]	; (8007d44 <tcp_input+0x778>)
 8007b9a:	f7fe f8e3 	bl	8005d64 <tcp_pcb_remove>
        tcp_free(pcb);
 8007b9e:	4620      	mov	r0, r4
 8007ba0:	f7fd fe3e 	bl	8005820 <tcp_free>
    tcp_input_pcb = NULL;
 8007ba4:	2300      	movs	r3, #0
 8007ba6:	4a6b      	ldr	r2, [pc, #428]	; (8007d54 <tcp_input+0x788>)
 8007ba8:	6013      	str	r3, [r2, #0]
    recv_data = NULL;
 8007baa:	4a6b      	ldr	r2, [pc, #428]	; (8007d58 <tcp_input+0x78c>)
 8007bac:	6013      	str	r3, [r2, #0]
    if (inseg.p != NULL) {
 8007bae:	4b6b      	ldr	r3, [pc, #428]	; (8007d5c <tcp_input+0x790>)
 8007bb0:	6858      	ldr	r0, [r3, #4]
 8007bb2:	2800      	cmp	r0, #0
 8007bb4:	f43f ad18 	beq.w	80075e8 <tcp_input+0x1c>
      pbuf_free(inseg.p);
 8007bb8:	f7fd faf6 	bl	80051a8 <pbuf_free>
      inseg.p = NULL;
 8007bbc:	4b67      	ldr	r3, [pc, #412]	; (8007d5c <tcp_input+0x790>)
 8007bbe:	2200      	movs	r2, #0
 8007bc0:	605a      	str	r2, [r3, #4]
 8007bc2:	e511      	b.n	80075e8 <tcp_input+0x1c>
      LWIP_ASSERT("tcp_input: pcb->state != CLOSED", pcb->state != CLOSED);
 8007bc4:	b931      	cbnz	r1, 8007bd4 <tcp_input+0x608>
 8007bc6:	4b66      	ldr	r3, [pc, #408]	; (8007d60 <tcp_input+0x794>)
 8007bc8:	f44f 724e 	mov.w	r2, #824	; 0x338
 8007bcc:	4965      	ldr	r1, [pc, #404]	; (8007d64 <tcp_input+0x798>)
 8007bce:	4866      	ldr	r0, [pc, #408]	; (8007d68 <tcp_input+0x79c>)
 8007bd0:	f003 fc32 	bl	800b438 <iprintf>
      recv_flags |= TF_RESET;
 8007bd4:	4a5e      	ldr	r2, [pc, #376]	; (8007d50 <tcp_input+0x784>)
 8007bd6:	7813      	ldrb	r3, [r2, #0]
 8007bd8:	f043 0308 	orr.w	r3, r3, #8
 8007bdc:	7013      	strb	r3, [r2, #0]
      tcp_clear_flags(pcb, TF_ACK_DELAY);
 8007bde:	8b63      	ldrh	r3, [r4, #26]
 8007be0:	f023 0301 	bic.w	r3, r3, #1
 8007be4:	8363      	strh	r3, [r4, #26]
      return ERR_RST;
 8007be6:	e7c9      	b.n	8007b7c <tcp_input+0x5b0>
  if ((flags & TCP_SYN) && (pcb->state != SYN_SENT && pcb->state != SYN_RCVD)) {
 8007be8:	f013 0f02 	tst.w	r3, #2
 8007bec:	d004      	beq.n	8007bf8 <tcp_input+0x62c>
 8007bee:	7d23      	ldrb	r3, [r4, #20]
 8007bf0:	3b02      	subs	r3, #2
 8007bf2:	b2db      	uxtb	r3, r3
 8007bf4:	2b01      	cmp	r3, #1
 8007bf6:	d81c      	bhi.n	8007c32 <tcp_input+0x666>
  if ((pcb->flags & TF_RXCLOSED) == 0) {
 8007bf8:	8b63      	ldrh	r3, [r4, #26]
 8007bfa:	f013 0f10 	tst.w	r3, #16
 8007bfe:	d102      	bne.n	8007c06 <tcp_input+0x63a>
    pcb->tmr = tcp_ticks;
 8007c00:	4b5a      	ldr	r3, [pc, #360]	; (8007d6c <tcp_input+0x7a0>)
 8007c02:	681b      	ldr	r3, [r3, #0]
 8007c04:	6223      	str	r3, [r4, #32]
  pcb->keep_cnt_sent = 0;
 8007c06:	2300      	movs	r3, #0
 8007c08:	f884 309b 	strb.w	r3, [r4, #155]	; 0x9b
  pcb->persist_probe = 0;
 8007c0c:	f884 309a 	strb.w	r3, [r4, #154]	; 0x9a
  tcp_parseopt(pcb);
 8007c10:	4620      	mov	r0, r4
 8007c12:	f7fe ff11 	bl	8006a38 <tcp_parseopt>
  switch (pcb->state) {
 8007c16:	7d23      	ldrb	r3, [r4, #20]
 8007c18:	3b02      	subs	r3, #2
 8007c1a:	2b07      	cmp	r3, #7
 8007c1c:	d8ae      	bhi.n	8007b7c <tcp_input+0x5b0>
 8007c1e:	e8df f013 	tbh	[pc, r3, lsl #1]
 8007c22:	000d      	.short	0x000d
 8007c24:	014f00d1 	.word	0x014f00d1
 8007c28:	01b1015f 	.word	0x01b1015f
 8007c2c:	01fd014f 	.word	0x01fd014f
 8007c30:	022f      	.short	0x022f
    tcp_ack_now(pcb);
 8007c32:	8b63      	ldrh	r3, [r4, #26]
 8007c34:	f043 0302 	orr.w	r3, r3, #2
 8007c38:	8363      	strh	r3, [r4, #26]
    return ERR_OK;
 8007c3a:	e79f      	b.n	8007b7c <tcp_input+0x5b0>
      if ((flags & TCP_ACK) && (flags & TCP_SYN)
 8007c3c:	4b4c      	ldr	r3, [pc, #304]	; (8007d70 <tcp_input+0x7a4>)
 8007c3e:	781a      	ldrb	r2, [r3, #0]
 8007c40:	f002 0312 	and.w	r3, r2, #18
 8007c44:	2b12      	cmp	r3, #18
 8007c46:	d020      	beq.n	8007c8a <tcp_input+0x6be>
      else if (flags & TCP_ACK) {
 8007c48:	f012 0f10 	tst.w	r2, #16
 8007c4c:	d096      	beq.n	8007b7c <tcp_input+0x5b0>
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8007c4e:	4b3c      	ldr	r3, [pc, #240]	; (8007d40 <tcp_input+0x774>)
 8007c50:	6819      	ldr	r1, [r3, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8007c52:	4b48      	ldr	r3, [pc, #288]	; (8007d74 <tcp_input+0x7a8>)
 8007c54:	4a48      	ldr	r2, [pc, #288]	; (8007d78 <tcp_input+0x7ac>)
 8007c56:	8810      	ldrh	r0, [r2, #0]
 8007c58:	4a48      	ldr	r2, [pc, #288]	; (8007d7c <tcp_input+0x7b0>)
 8007c5a:	6812      	ldr	r2, [r2, #0]
 8007c5c:	880d      	ldrh	r5, [r1, #0]
 8007c5e:	9502      	str	r5, [sp, #8]
 8007c60:	8849      	ldrh	r1, [r1, #2]
 8007c62:	9101      	str	r1, [sp, #4]
 8007c64:	1f19      	subs	r1, r3, #4
 8007c66:	9100      	str	r1, [sp, #0]
 8007c68:	4402      	add	r2, r0
 8007c6a:	4938      	ldr	r1, [pc, #224]	; (8007d4c <tcp_input+0x780>)
 8007c6c:	6809      	ldr	r1, [r1, #0]
 8007c6e:	4620      	mov	r0, r4
 8007c70:	f001 fa64 	bl	800913c <tcp_rst>
        if (pcb->nrtx < TCP_SYNMAXRTX) {
 8007c74:	f894 3042 	ldrb.w	r3, [r4, #66]	; 0x42
 8007c78:	2b05      	cmp	r3, #5
 8007c7a:	f63f af7f 	bhi.w	8007b7c <tcp_input+0x5b0>
          pcb->rtime = 0;
 8007c7e:	2300      	movs	r3, #0
 8007c80:	8623      	strh	r3, [r4, #48]	; 0x30
          tcp_rexmit_rto(pcb);
 8007c82:	4620      	mov	r0, r4
 8007c84:	f001 fcc4 	bl	8009610 <tcp_rexmit_rto>
 8007c88:	e778      	b.n	8007b7c <tcp_input+0x5b0>
          && (ackno == pcb->lastack + 1)) {
 8007c8a:	4b30      	ldr	r3, [pc, #192]	; (8007d4c <tcp_input+0x780>)
 8007c8c:	6819      	ldr	r1, [r3, #0]
 8007c8e:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8007c90:	3301      	adds	r3, #1
 8007c92:	428b      	cmp	r3, r1
 8007c94:	d1d8      	bne.n	8007c48 <tcp_input+0x67c>
        pcb->rcv_nxt = seqno + 1;
 8007c96:	4b39      	ldr	r3, [pc, #228]	; (8007d7c <tcp_input+0x7b0>)
 8007c98:	681b      	ldr	r3, [r3, #0]
 8007c9a:	1c5a      	adds	r2, r3, #1
 8007c9c:	6262      	str	r2, [r4, #36]	; 0x24
        pcb->rcv_ann_right_edge = pcb->rcv_nxt;
 8007c9e:	62e2      	str	r2, [r4, #44]	; 0x2c
        pcb->lastack = ackno;
 8007ca0:	6461      	str	r1, [r4, #68]	; 0x44
        pcb->snd_wnd = tcphdr->wnd;
 8007ca2:	4a27      	ldr	r2, [pc, #156]	; (8007d40 <tcp_input+0x774>)
 8007ca4:	6812      	ldr	r2, [r2, #0]
 8007ca6:	89d2      	ldrh	r2, [r2, #14]
 8007ca8:	f8a4 2060 	strh.w	r2, [r4, #96]	; 0x60
        pcb->snd_wnd_max = pcb->snd_wnd;
 8007cac:	f8a4 2062 	strh.w	r2, [r4, #98]	; 0x62
        pcb->snd_wl1 = seqno - 1; /* initialise to seqno - 1 to force window update */
 8007cb0:	3b01      	subs	r3, #1
 8007cb2:	6563      	str	r3, [r4, #84]	; 0x54
        pcb->state = ESTABLISHED;
 8007cb4:	2304      	movs	r3, #4
 8007cb6:	7523      	strb	r3, [r4, #20]
        pcb->mss = tcp_eff_send_mss(pcb->mss, &pcb->local_ip, &pcb->remote_ip);
 8007cb8:	8e66      	ldrh	r6, [r4, #50]	; 0x32
 8007cba:	18e5      	adds	r5, r4, r3
 8007cbc:	4628      	mov	r0, r5
 8007cbe:	f002 fca9 	bl	800a614 <ip4_route>
 8007cc2:	4601      	mov	r1, r0
 8007cc4:	462a      	mov	r2, r5
 8007cc6:	4630      	mov	r0, r6
 8007cc8:	f7fd fff2 	bl	8005cb0 <tcp_eff_send_mss_netif>
 8007ccc:	4603      	mov	r3, r0
 8007cce:	8660      	strh	r0, [r4, #50]	; 0x32
        pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 8007cd0:	0041      	lsls	r1, r0, #1
 8007cd2:	f241 121c 	movw	r2, #4380	; 0x111c
 8007cd6:	428a      	cmp	r2, r1
 8007cd8:	bf38      	it	cc
 8007cda:	460a      	movcc	r2, r1
 8007cdc:	ebb2 0f80 	cmp.w	r2, r0, lsl #2
 8007ce0:	d94e      	bls.n	8007d80 <tcp_input+0x7b4>
 8007ce2:	0083      	lsls	r3, r0, #2
 8007ce4:	b29b      	uxth	r3, r3
 8007ce6:	f8a4 3048 	strh.w	r3, [r4, #72]	; 0x48
        LWIP_ASSERT("pcb->snd_queuelen > 0", (pcb->snd_queuelen > 0));
 8007cea:	f8b4 3066 	ldrh.w	r3, [r4, #102]	; 0x66
 8007cee:	2b00      	cmp	r3, #0
 8007cf0:	d04f      	beq.n	8007d92 <tcp_input+0x7c6>
        --pcb->snd_queuelen;
 8007cf2:	f8b4 3066 	ldrh.w	r3, [r4, #102]	; 0x66
 8007cf6:	3b01      	subs	r3, #1
 8007cf8:	f8a4 3066 	strh.w	r3, [r4, #102]	; 0x66
        rseg = pcb->unacked;
 8007cfc:	6f25      	ldr	r5, [r4, #112]	; 0x70
        if (rseg == NULL) {
 8007cfe:	2d00      	cmp	r5, #0
 8007d00:	d04f      	beq.n	8007da2 <tcp_input+0x7d6>
          pcb->unacked = rseg->next;
 8007d02:	682b      	ldr	r3, [r5, #0]
 8007d04:	6723      	str	r3, [r4, #112]	; 0x70
        tcp_seg_free(rseg);
 8007d06:	4628      	mov	r0, r5
 8007d08:	f7fd feec 	bl	8005ae4 <tcp_seg_free>
        if (pcb->unacked == NULL) {
 8007d0c:	6f23      	ldr	r3, [r4, #112]	; 0x70
 8007d0e:	2b00      	cmp	r3, #0
 8007d10:	d054      	beq.n	8007dbc <tcp_input+0x7f0>
          pcb->rtime = 0;
 8007d12:	2300      	movs	r3, #0
 8007d14:	8623      	strh	r3, [r4, #48]	; 0x30
          pcb->nrtx = 0;
 8007d16:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
        TCP_EVENT_CONNECTED(pcb, ERR_OK, err);
 8007d1a:	f8d4 3088 	ldr.w	r3, [r4, #136]	; 0x88
 8007d1e:	b13b      	cbz	r3, 8007d30 <tcp_input+0x764>
 8007d20:	2200      	movs	r2, #0
 8007d22:	4621      	mov	r1, r4
 8007d24:	6920      	ldr	r0, [r4, #16]
 8007d26:	4798      	blx	r3
        if (err == ERR_ABRT) {
 8007d28:	f110 0f0d 	cmn.w	r0, #13
 8007d2c:	f43f af3a 	beq.w	8007ba4 <tcp_input+0x5d8>
        tcp_ack_now(pcb);
 8007d30:	8b63      	ldrh	r3, [r4, #26]
 8007d32:	f043 0302 	orr.w	r3, r3, #2
 8007d36:	8363      	strh	r3, [r4, #26]
 8007d38:	e720      	b.n	8007b7c <tcp_input+0x5b0>
 8007d3a:	bf00      	nop
 8007d3c:	20005728 	.word	0x20005728
 8007d40:	2000aea4 	.word	0x2000aea4
 8007d44:	2000ae58 	.word	0x2000ae58
 8007d48:	2000ae5c 	.word	0x2000ae5c
 8007d4c:	2000ae74 	.word	0x2000ae74
 8007d50:	2000ae94 	.word	0x2000ae94
 8007d54:	2000ae9c 	.word	0x2000ae9c
 8007d58:	2000ae90 	.word	0x2000ae90
 8007d5c:	2000ae7c 	.word	0x2000ae7c
 8007d60:	08011488 	.word	0x08011488
 8007d64:	080117fc 	.word	0x080117fc
 8007d68:	0800cb24 	.word	0x0800cb24
 8007d6c:	2000ae68 	.word	0x2000ae68
 8007d70:	2000ae78 	.word	0x2000ae78
 8007d74:	2000573c 	.word	0x2000573c
 8007d78:	2000aeb2 	.word	0x2000aeb2
 8007d7c:	2000ae98 	.word	0x2000ae98
        pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 8007d80:	f241 121c 	movw	r2, #4380	; 0x111c
 8007d84:	4291      	cmp	r1, r2
 8007d86:	bf86      	itte	hi
 8007d88:	0043      	lslhi	r3, r0, #1
 8007d8a:	b29b      	uxthhi	r3, r3
 8007d8c:	f241 131c 	movwls	r3, #4380	; 0x111c
 8007d90:	e7a9      	b.n	8007ce6 <tcp_input+0x71a>
        LWIP_ASSERT("pcb->snd_queuelen > 0", (pcb->snd_queuelen > 0));
 8007d92:	4b92      	ldr	r3, [pc, #584]	; (8007fdc <tcp_input+0xa10>)
 8007d94:	f44f 725b 	mov.w	r2, #876	; 0x36c
 8007d98:	4991      	ldr	r1, [pc, #580]	; (8007fe0 <tcp_input+0xa14>)
 8007d9a:	4892      	ldr	r0, [pc, #584]	; (8007fe4 <tcp_input+0xa18>)
 8007d9c:	f003 fb4c 	bl	800b438 <iprintf>
 8007da0:	e7a7      	b.n	8007cf2 <tcp_input+0x726>
          rseg = pcb->unsent;
 8007da2:	6ee5      	ldr	r5, [r4, #108]	; 0x6c
          LWIP_ASSERT("no segment to free", rseg != NULL);
 8007da4:	b115      	cbz	r5, 8007dac <tcp_input+0x7e0>
          pcb->unsent = rseg->next;
 8007da6:	682b      	ldr	r3, [r5, #0]
 8007da8:	66e3      	str	r3, [r4, #108]	; 0x6c
 8007daa:	e7ac      	b.n	8007d06 <tcp_input+0x73a>
          LWIP_ASSERT("no segment to free", rseg != NULL);
 8007dac:	4b8b      	ldr	r3, [pc, #556]	; (8007fdc <tcp_input+0xa10>)
 8007dae:	f44f 725d 	mov.w	r2, #884	; 0x374
 8007db2:	498d      	ldr	r1, [pc, #564]	; (8007fe8 <tcp_input+0xa1c>)
 8007db4:	488b      	ldr	r0, [pc, #556]	; (8007fe4 <tcp_input+0xa18>)
 8007db6:	f003 fb3f 	bl	800b438 <iprintf>
 8007dba:	e7f4      	b.n	8007da6 <tcp_input+0x7da>
          pcb->rtime = -1;
 8007dbc:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8007dc0:	8623      	strh	r3, [r4, #48]	; 0x30
 8007dc2:	e7aa      	b.n	8007d1a <tcp_input+0x74e>
      if (flags & TCP_ACK) {
 8007dc4:	4b89      	ldr	r3, [pc, #548]	; (8007fec <tcp_input+0xa20>)
 8007dc6:	781b      	ldrb	r3, [r3, #0]
 8007dc8:	f013 0f10 	tst.w	r3, #16
 8007dcc:	d069      	beq.n	8007ea2 <tcp_input+0x8d6>
        if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8007dce:	4b88      	ldr	r3, [pc, #544]	; (8007ff0 <tcp_input+0xa24>)
 8007dd0:	6819      	ldr	r1, [r3, #0]
 8007dd2:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8007dd4:	43db      	mvns	r3, r3
 8007dd6:	42cb      	cmn	r3, r1
 8007dd8:	d403      	bmi.n	8007de2 <tcp_input+0x816>
 8007dda:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8007ddc:	1acb      	subs	r3, r1, r3
 8007dde:	2b00      	cmp	r3, #0
 8007de0:	dd11      	ble.n	8007e06 <tcp_input+0x83a>
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8007de2:	4b84      	ldr	r3, [pc, #528]	; (8007ff4 <tcp_input+0xa28>)
 8007de4:	6818      	ldr	r0, [r3, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8007de6:	4b84      	ldr	r3, [pc, #528]	; (8007ff8 <tcp_input+0xa2c>)
 8007de8:	4a84      	ldr	r2, [pc, #528]	; (8007ffc <tcp_input+0xa30>)
 8007dea:	8815      	ldrh	r5, [r2, #0]
 8007dec:	4a84      	ldr	r2, [pc, #528]	; (8008000 <tcp_input+0xa34>)
 8007dee:	6812      	ldr	r2, [r2, #0]
 8007df0:	8806      	ldrh	r6, [r0, #0]
 8007df2:	9602      	str	r6, [sp, #8]
 8007df4:	8840      	ldrh	r0, [r0, #2]
 8007df6:	9001      	str	r0, [sp, #4]
 8007df8:	1f18      	subs	r0, r3, #4
 8007dfa:	9000      	str	r0, [sp, #0]
 8007dfc:	442a      	add	r2, r5
 8007dfe:	4620      	mov	r0, r4
 8007e00:	f001 f99c 	bl	800913c <tcp_rst>
 8007e04:	e6ba      	b.n	8007b7c <tcp_input+0x5b0>
          pcb->state = ESTABLISHED;
 8007e06:	2304      	movs	r3, #4
 8007e08:	7523      	strb	r3, [r4, #20]
          if (pcb->listener == NULL) {
 8007e0a:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
 8007e0c:	2b00      	cmp	r3, #0
 8007e0e:	d03b      	beq.n	8007e88 <tcp_input+0x8bc>
            LWIP_ASSERT("pcb->listener->accept != NULL", pcb->listener->accept != NULL);
 8007e10:	699b      	ldr	r3, [r3, #24]
 8007e12:	b34b      	cbz	r3, 8007e68 <tcp_input+0x89c>
            TCP_EVENT_ACCEPT(pcb->listener, pcb, pcb->callback_arg, ERR_OK, err);
 8007e14:	2200      	movs	r2, #0
 8007e16:	4621      	mov	r1, r4
 8007e18:	6920      	ldr	r0, [r4, #16]
 8007e1a:	4798      	blx	r3
          if (err != ERR_OK) {
 8007e1c:	2800      	cmp	r0, #0
 8007e1e:	d12f      	bne.n	8007e80 <tcp_input+0x8b4>
          tcp_receive(pcb);
 8007e20:	4620      	mov	r0, r4
 8007e22:	f7fe ff47 	bl	8006cb4 <tcp_receive>
          if (recv_acked != 0) {
 8007e26:	4b77      	ldr	r3, [pc, #476]	; (8008004 <tcp_input+0xa38>)
 8007e28:	881b      	ldrh	r3, [r3, #0]
 8007e2a:	b113      	cbz	r3, 8007e32 <tcp_input+0x866>
            recv_acked--;
 8007e2c:	3b01      	subs	r3, #1
 8007e2e:	4a75      	ldr	r2, [pc, #468]	; (8008004 <tcp_input+0xa38>)
 8007e30:	8013      	strh	r3, [r2, #0]
          pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 8007e32:	8e63      	ldrh	r3, [r4, #50]	; 0x32
 8007e34:	0059      	lsls	r1, r3, #1
 8007e36:	f241 121c 	movw	r2, #4380	; 0x111c
 8007e3a:	428a      	cmp	r2, r1
 8007e3c:	bf38      	it	cc
 8007e3e:	460a      	movcc	r2, r1
 8007e40:	ebb2 0f83 	cmp.w	r2, r3, lsl #2
 8007e44:	d924      	bls.n	8007e90 <tcp_input+0x8c4>
 8007e46:	009b      	lsls	r3, r3, #2
 8007e48:	b29b      	uxth	r3, r3
 8007e4a:	f8a4 3048 	strh.w	r3, [r4, #72]	; 0x48
          if (recv_flags & TF_GOT_FIN) {
 8007e4e:	4b6e      	ldr	r3, [pc, #440]	; (8008008 <tcp_input+0xa3c>)
 8007e50:	781b      	ldrb	r3, [r3, #0]
 8007e52:	f013 0f20 	tst.w	r3, #32
 8007e56:	f43f ae91 	beq.w	8007b7c <tcp_input+0x5b0>
            tcp_ack_now(pcb);
 8007e5a:	8b63      	ldrh	r3, [r4, #26]
 8007e5c:	f043 0302 	orr.w	r3, r3, #2
 8007e60:	8363      	strh	r3, [r4, #26]
            pcb->state = CLOSE_WAIT;
 8007e62:	2307      	movs	r3, #7
 8007e64:	7523      	strb	r3, [r4, #20]
 8007e66:	e689      	b.n	8007b7c <tcp_input+0x5b0>
            LWIP_ASSERT("pcb->listener->accept != NULL", pcb->listener->accept != NULL);
 8007e68:	4b5c      	ldr	r3, [pc, #368]	; (8007fdc <tcp_input+0xa10>)
 8007e6a:	f44f 726a 	mov.w	r2, #936	; 0x3a8
 8007e6e:	4967      	ldr	r1, [pc, #412]	; (800800c <tcp_input+0xa40>)
 8007e70:	485c      	ldr	r0, [pc, #368]	; (8007fe4 <tcp_input+0xa18>)
 8007e72:	f003 fae1 	bl	800b438 <iprintf>
            TCP_EVENT_ACCEPT(pcb->listener, pcb, pcb->callback_arg, ERR_OK, err);
 8007e76:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
 8007e78:	699b      	ldr	r3, [r3, #24]
 8007e7a:	2b00      	cmp	r3, #0
 8007e7c:	d1ca      	bne.n	8007e14 <tcp_input+0x848>
 8007e7e:	e003      	b.n	8007e88 <tcp_input+0x8bc>
            if (err != ERR_ABRT) {
 8007e80:	f110 0f0d 	cmn.w	r0, #13
 8007e84:	f43f ae8e 	beq.w	8007ba4 <tcp_input+0x5d8>
              tcp_abort(pcb);
 8007e88:	4620      	mov	r0, r4
 8007e8a:	f7fe f859 	bl	8005f40 <tcp_abort>
 8007e8e:	e689      	b.n	8007ba4 <tcp_input+0x5d8>
          pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 8007e90:	f241 121c 	movw	r2, #4380	; 0x111c
 8007e94:	4291      	cmp	r1, r2
 8007e96:	bf86      	itte	hi
 8007e98:	005b      	lslhi	r3, r3, #1
 8007e9a:	b29b      	uxthhi	r3, r3
 8007e9c:	f241 131c 	movwls	r3, #4380	; 0x111c
 8007ea0:	e7d3      	b.n	8007e4a <tcp_input+0x87e>
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
 8007ea2:	f013 0f02 	tst.w	r3, #2
 8007ea6:	f43f ae69 	beq.w	8007b7c <tcp_input+0x5b0>
 8007eaa:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007eac:	3b01      	subs	r3, #1
 8007eae:	4a54      	ldr	r2, [pc, #336]	; (8008000 <tcp_input+0xa34>)
 8007eb0:	6812      	ldr	r2, [r2, #0]
 8007eb2:	4293      	cmp	r3, r2
 8007eb4:	f47f ae62 	bne.w	8007b7c <tcp_input+0x5b0>
        tcp_rexmit(pcb);
 8007eb8:	4620      	mov	r0, r4
 8007eba:	f001 f8bb 	bl	8009034 <tcp_rexmit>
 8007ebe:	e65d      	b.n	8007b7c <tcp_input+0x5b0>
      tcp_receive(pcb);
 8007ec0:	4620      	mov	r0, r4
 8007ec2:	f7fe fef7 	bl	8006cb4 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) { /* passive close */
 8007ec6:	4b50      	ldr	r3, [pc, #320]	; (8008008 <tcp_input+0xa3c>)
 8007ec8:	781b      	ldrb	r3, [r3, #0]
 8007eca:	f013 0f20 	tst.w	r3, #32
 8007ece:	f43f ae55 	beq.w	8007b7c <tcp_input+0x5b0>
        tcp_ack_now(pcb);
 8007ed2:	8b63      	ldrh	r3, [r4, #26]
 8007ed4:	f043 0302 	orr.w	r3, r3, #2
 8007ed8:	8363      	strh	r3, [r4, #26]
        pcb->state = CLOSE_WAIT;
 8007eda:	2307      	movs	r3, #7
 8007edc:	7523      	strb	r3, [r4, #20]
 8007ede:	e64d      	b.n	8007b7c <tcp_input+0x5b0>
      tcp_receive(pcb);
 8007ee0:	4620      	mov	r0, r4
 8007ee2:	f7fe fee7 	bl	8006cb4 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 8007ee6:	4b48      	ldr	r3, [pc, #288]	; (8008008 <tcp_input+0xa3c>)
 8007ee8:	781b      	ldrb	r3, [r3, #0]
 8007eea:	f013 0f20 	tst.w	r3, #32
 8007eee:	d036      	beq.n	8007f5e <tcp_input+0x992>
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8007ef0:	4b3e      	ldr	r3, [pc, #248]	; (8007fec <tcp_input+0xa20>)
 8007ef2:	781b      	ldrb	r3, [r3, #0]
 8007ef4:	f013 0f10 	tst.w	r3, #16
 8007ef8:	d004      	beq.n	8007f04 <tcp_input+0x938>
 8007efa:	6d22      	ldr	r2, [r4, #80]	; 0x50
 8007efc:	4b3c      	ldr	r3, [pc, #240]	; (8007ff0 <tcp_input+0xa24>)
 8007efe:	681b      	ldr	r3, [r3, #0]
 8007f00:	429a      	cmp	r2, r3
 8007f02:	d006      	beq.n	8007f12 <tcp_input+0x946>
          tcp_ack_now(pcb);
 8007f04:	8b63      	ldrh	r3, [r4, #26]
 8007f06:	f043 0302 	orr.w	r3, r3, #2
 8007f0a:	8363      	strh	r3, [r4, #26]
          pcb->state = CLOSING;
 8007f0c:	2308      	movs	r3, #8
 8007f0e:	7523      	strb	r3, [r4, #20]
 8007f10:	e634      	b.n	8007b7c <tcp_input+0x5b0>
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8007f12:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 8007f14:	2b00      	cmp	r3, #0
 8007f16:	d1f5      	bne.n	8007f04 <tcp_input+0x938>
          tcp_ack_now(pcb);
 8007f18:	8b63      	ldrh	r3, [r4, #26]
 8007f1a:	f043 0302 	orr.w	r3, r3, #2
 8007f1e:	8363      	strh	r3, [r4, #26]
          tcp_pcb_purge(pcb);
 8007f20:	4620      	mov	r0, r4
 8007f22:	f7fd feef 	bl	8005d04 <tcp_pcb_purge>
          TCP_RMV_ACTIVE(pcb);
 8007f26:	4b3a      	ldr	r3, [pc, #232]	; (8008010 <tcp_input+0xa44>)
 8007f28:	681b      	ldr	r3, [r3, #0]
 8007f2a:	42a3      	cmp	r3, r4
 8007f2c:	d005      	beq.n	8007f3a <tcp_input+0x96e>
 8007f2e:	b153      	cbz	r3, 8007f46 <tcp_input+0x97a>
 8007f30:	68da      	ldr	r2, [r3, #12]
 8007f32:	42a2      	cmp	r2, r4
 8007f34:	d005      	beq.n	8007f42 <tcp_input+0x976>
 8007f36:	4613      	mov	r3, r2
 8007f38:	e7f9      	b.n	8007f2e <tcp_input+0x962>
 8007f3a:	68e2      	ldr	r2, [r4, #12]
 8007f3c:	4b34      	ldr	r3, [pc, #208]	; (8008010 <tcp_input+0xa44>)
 8007f3e:	601a      	str	r2, [r3, #0]
 8007f40:	e001      	b.n	8007f46 <tcp_input+0x97a>
 8007f42:	68e2      	ldr	r2, [r4, #12]
 8007f44:	60da      	str	r2, [r3, #12]
 8007f46:	4b33      	ldr	r3, [pc, #204]	; (8008014 <tcp_input+0xa48>)
 8007f48:	2201      	movs	r2, #1
 8007f4a:	701a      	strb	r2, [r3, #0]
          pcb->state = TIME_WAIT;
 8007f4c:	230a      	movs	r3, #10
 8007f4e:	7523      	strb	r3, [r4, #20]
          TCP_REG(&tcp_tw_pcbs, pcb);
 8007f50:	4b31      	ldr	r3, [pc, #196]	; (8008018 <tcp_input+0xa4c>)
 8007f52:	681a      	ldr	r2, [r3, #0]
 8007f54:	60e2      	str	r2, [r4, #12]
 8007f56:	601c      	str	r4, [r3, #0]
 8007f58:	f001 fc82 	bl	8009860 <tcp_timer_needed>
 8007f5c:	e60e      	b.n	8007b7c <tcp_input+0x5b0>
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8007f5e:	4b23      	ldr	r3, [pc, #140]	; (8007fec <tcp_input+0xa20>)
 8007f60:	781b      	ldrb	r3, [r3, #0]
 8007f62:	f013 0f10 	tst.w	r3, #16
 8007f66:	f43f ae09 	beq.w	8007b7c <tcp_input+0x5b0>
 8007f6a:	6d22      	ldr	r2, [r4, #80]	; 0x50
 8007f6c:	4b20      	ldr	r3, [pc, #128]	; (8007ff0 <tcp_input+0xa24>)
 8007f6e:	681b      	ldr	r3, [r3, #0]
 8007f70:	429a      	cmp	r2, r3
 8007f72:	f47f ae03 	bne.w	8007b7c <tcp_input+0x5b0>
 8007f76:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 8007f78:	2b00      	cmp	r3, #0
 8007f7a:	f47f adff 	bne.w	8007b7c <tcp_input+0x5b0>
        pcb->state = FIN_WAIT_2;
 8007f7e:	2306      	movs	r3, #6
 8007f80:	7523      	strb	r3, [r4, #20]
 8007f82:	e5fb      	b.n	8007b7c <tcp_input+0x5b0>
      tcp_receive(pcb);
 8007f84:	4620      	mov	r0, r4
 8007f86:	f7fe fe95 	bl	8006cb4 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 8007f8a:	4b1f      	ldr	r3, [pc, #124]	; (8008008 <tcp_input+0xa3c>)
 8007f8c:	781b      	ldrb	r3, [r3, #0]
 8007f8e:	f013 0f20 	tst.w	r3, #32
 8007f92:	f43f adf3 	beq.w	8007b7c <tcp_input+0x5b0>
        tcp_ack_now(pcb);
 8007f96:	8b63      	ldrh	r3, [r4, #26]
 8007f98:	f043 0302 	orr.w	r3, r3, #2
 8007f9c:	8363      	strh	r3, [r4, #26]
        tcp_pcb_purge(pcb);
 8007f9e:	4620      	mov	r0, r4
 8007fa0:	f7fd feb0 	bl	8005d04 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 8007fa4:	4b1a      	ldr	r3, [pc, #104]	; (8008010 <tcp_input+0xa44>)
 8007fa6:	681b      	ldr	r3, [r3, #0]
 8007fa8:	42a3      	cmp	r3, r4
 8007faa:	d005      	beq.n	8007fb8 <tcp_input+0x9ec>
 8007fac:	b153      	cbz	r3, 8007fc4 <tcp_input+0x9f8>
 8007fae:	68da      	ldr	r2, [r3, #12]
 8007fb0:	42a2      	cmp	r2, r4
 8007fb2:	d005      	beq.n	8007fc0 <tcp_input+0x9f4>
 8007fb4:	4613      	mov	r3, r2
 8007fb6:	e7f9      	b.n	8007fac <tcp_input+0x9e0>
 8007fb8:	68e2      	ldr	r2, [r4, #12]
 8007fba:	4b15      	ldr	r3, [pc, #84]	; (8008010 <tcp_input+0xa44>)
 8007fbc:	601a      	str	r2, [r3, #0]
 8007fbe:	e001      	b.n	8007fc4 <tcp_input+0x9f8>
 8007fc0:	68e2      	ldr	r2, [r4, #12]
 8007fc2:	60da      	str	r2, [r3, #12]
 8007fc4:	4b13      	ldr	r3, [pc, #76]	; (8008014 <tcp_input+0xa48>)
 8007fc6:	2201      	movs	r2, #1
 8007fc8:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 8007fca:	230a      	movs	r3, #10
 8007fcc:	7523      	strb	r3, [r4, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 8007fce:	4b12      	ldr	r3, [pc, #72]	; (8008018 <tcp_input+0xa4c>)
 8007fd0:	681a      	ldr	r2, [r3, #0]
 8007fd2:	60e2      	str	r2, [r4, #12]
 8007fd4:	601c      	str	r4, [r3, #0]
 8007fd6:	f001 fc43 	bl	8009860 <tcp_timer_needed>
 8007fda:	e5cf      	b.n	8007b7c <tcp_input+0x5b0>
 8007fdc:	08011488 	.word	0x08011488
 8007fe0:	0801181c 	.word	0x0801181c
 8007fe4:	0800cb24 	.word	0x0800cb24
 8007fe8:	08011834 	.word	0x08011834
 8007fec:	2000ae78 	.word	0x2000ae78
 8007ff0:	2000ae74 	.word	0x2000ae74
 8007ff4:	2000aea4 	.word	0x2000aea4
 8007ff8:	2000573c 	.word	0x2000573c
 8007ffc:	2000aeb2 	.word	0x2000aeb2
 8008000:	2000ae98 	.word	0x2000ae98
 8008004:	2000ae8c 	.word	0x2000ae8c
 8008008:	2000ae94 	.word	0x2000ae94
 800800c:	08011848 	.word	0x08011848
 8008010:	2000ae58 	.word	0x2000ae58
 8008014:	2000ae5c 	.word	0x2000ae5c
 8008018:	2000ae70 	.word	0x2000ae70
      tcp_receive(pcb);
 800801c:	4620      	mov	r0, r4
 800801e:	f7fe fe49 	bl	8006cb4 <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 8008022:	4b73      	ldr	r3, [pc, #460]	; (80081f0 <tcp_input+0xc24>)
 8008024:	781b      	ldrb	r3, [r3, #0]
 8008026:	f013 0f10 	tst.w	r3, #16
 800802a:	f43f ada7 	beq.w	8007b7c <tcp_input+0x5b0>
 800802e:	6d22      	ldr	r2, [r4, #80]	; 0x50
 8008030:	4b70      	ldr	r3, [pc, #448]	; (80081f4 <tcp_input+0xc28>)
 8008032:	681b      	ldr	r3, [r3, #0]
 8008034:	429a      	cmp	r2, r3
 8008036:	f47f ada1 	bne.w	8007b7c <tcp_input+0x5b0>
 800803a:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 800803c:	2b00      	cmp	r3, #0
 800803e:	f47f ad9d 	bne.w	8007b7c <tcp_input+0x5b0>
        tcp_pcb_purge(pcb);
 8008042:	4620      	mov	r0, r4
 8008044:	f7fd fe5e 	bl	8005d04 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 8008048:	4b6b      	ldr	r3, [pc, #428]	; (80081f8 <tcp_input+0xc2c>)
 800804a:	681b      	ldr	r3, [r3, #0]
 800804c:	42a3      	cmp	r3, r4
 800804e:	d005      	beq.n	800805c <tcp_input+0xa90>
 8008050:	b153      	cbz	r3, 8008068 <tcp_input+0xa9c>
 8008052:	68da      	ldr	r2, [r3, #12]
 8008054:	42a2      	cmp	r2, r4
 8008056:	d005      	beq.n	8008064 <tcp_input+0xa98>
 8008058:	4613      	mov	r3, r2
 800805a:	e7f9      	b.n	8008050 <tcp_input+0xa84>
 800805c:	68e2      	ldr	r2, [r4, #12]
 800805e:	4b66      	ldr	r3, [pc, #408]	; (80081f8 <tcp_input+0xc2c>)
 8008060:	601a      	str	r2, [r3, #0]
 8008062:	e001      	b.n	8008068 <tcp_input+0xa9c>
 8008064:	68e2      	ldr	r2, [r4, #12]
 8008066:	60da      	str	r2, [r3, #12]
 8008068:	4b64      	ldr	r3, [pc, #400]	; (80081fc <tcp_input+0xc30>)
 800806a:	2201      	movs	r2, #1
 800806c:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 800806e:	230a      	movs	r3, #10
 8008070:	7523      	strb	r3, [r4, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 8008072:	4b63      	ldr	r3, [pc, #396]	; (8008200 <tcp_input+0xc34>)
 8008074:	681a      	ldr	r2, [r3, #0]
 8008076:	60e2      	str	r2, [r4, #12]
 8008078:	601c      	str	r4, [r3, #0]
 800807a:	f001 fbf1 	bl	8009860 <tcp_timer_needed>
 800807e:	e57d      	b.n	8007b7c <tcp_input+0x5b0>
      tcp_receive(pcb);
 8008080:	4620      	mov	r0, r4
 8008082:	f7fe fe17 	bl	8006cb4 <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 8008086:	4b5a      	ldr	r3, [pc, #360]	; (80081f0 <tcp_input+0xc24>)
 8008088:	781b      	ldrb	r3, [r3, #0]
 800808a:	f013 0f10 	tst.w	r3, #16
 800808e:	f43f ad75 	beq.w	8007b7c <tcp_input+0x5b0>
 8008092:	6d22      	ldr	r2, [r4, #80]	; 0x50
 8008094:	4b57      	ldr	r3, [pc, #348]	; (80081f4 <tcp_input+0xc28>)
 8008096:	681b      	ldr	r3, [r3, #0]
 8008098:	429a      	cmp	r2, r3
 800809a:	f47f ad6f 	bne.w	8007b7c <tcp_input+0x5b0>
 800809e:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 80080a0:	2b00      	cmp	r3, #0
 80080a2:	f47f ad6b 	bne.w	8007b7c <tcp_input+0x5b0>
        recv_flags |= TF_CLOSED;
 80080a6:	4a57      	ldr	r2, [pc, #348]	; (8008204 <tcp_input+0xc38>)
 80080a8:	7813      	ldrb	r3, [r2, #0]
 80080aa:	f043 0310 	orr.w	r3, r3, #16
 80080ae:	7013      	strb	r3, [r2, #0]
 80080b0:	e564      	b.n	8007b7c <tcp_input+0x5b0>
        if (recv_acked > 0) {
 80080b2:	4b55      	ldr	r3, [pc, #340]	; (8008208 <tcp_input+0xc3c>)
 80080b4:	881a      	ldrh	r2, [r3, #0]
 80080b6:	b162      	cbz	r2, 80080d2 <tcp_input+0xb06>
            TCP_EVENT_SENT(pcb, (u16_t)acked16, err);
 80080b8:	f8d4 3080 	ldr.w	r3, [r4, #128]	; 0x80
 80080bc:	b133      	cbz	r3, 80080cc <tcp_input+0xb00>
 80080be:	4621      	mov	r1, r4
 80080c0:	6920      	ldr	r0, [r4, #16]
 80080c2:	4798      	blx	r3
            if (err == ERR_ABRT) {
 80080c4:	f110 0f0d 	cmn.w	r0, #13
 80080c8:	f43f ad6c 	beq.w	8007ba4 <tcp_input+0x5d8>
          recv_acked = 0;
 80080cc:	4b4e      	ldr	r3, [pc, #312]	; (8008208 <tcp_input+0xc3c>)
 80080ce:	2200      	movs	r2, #0
 80080d0:	801a      	strh	r2, [r3, #0]
        if (tcp_input_delayed_close(pcb)) {
 80080d2:	4620      	mov	r0, r4
 80080d4:	f7fe fcfa 	bl	8006acc <tcp_input_delayed_close>
 80080d8:	2800      	cmp	r0, #0
 80080da:	f47f ad63 	bne.w	8007ba4 <tcp_input+0x5d8>
        if (recv_data != NULL) {
 80080de:	4b4b      	ldr	r3, [pc, #300]	; (800820c <tcp_input+0xc40>)
 80080e0:	681b      	ldr	r3, [r3, #0]
 80080e2:	b1eb      	cbz	r3, 8008120 <tcp_input+0xb54>
          LWIP_ASSERT("pcb->refused_data == NULL", pcb->refused_data == NULL);
 80080e4:	6fa3      	ldr	r3, [r4, #120]	; 0x78
 80080e6:	b133      	cbz	r3, 80080f6 <tcp_input+0xb2a>
 80080e8:	4b49      	ldr	r3, [pc, #292]	; (8008210 <tcp_input+0xc44>)
 80080ea:	f44f 72f3 	mov.w	r2, #486	; 0x1e6
 80080ee:	4949      	ldr	r1, [pc, #292]	; (8008214 <tcp_input+0xc48>)
 80080f0:	4849      	ldr	r0, [pc, #292]	; (8008218 <tcp_input+0xc4c>)
 80080f2:	f003 f9a1 	bl	800b438 <iprintf>
          if (pcb->flags & TF_RXCLOSED) {
 80080f6:	8b63      	ldrh	r3, [r4, #26]
 80080f8:	f013 0f10 	tst.w	r3, #16
 80080fc:	d128      	bne.n	8008150 <tcp_input+0xb84>
          TCP_EVENT_RECV(pcb, recv_data, ERR_OK, err);
 80080fe:	f8d4 5084 	ldr.w	r5, [r4, #132]	; 0x84
 8008102:	b36d      	cbz	r5, 8008160 <tcp_input+0xb94>
 8008104:	2300      	movs	r3, #0
 8008106:	4a41      	ldr	r2, [pc, #260]	; (800820c <tcp_input+0xc40>)
 8008108:	6812      	ldr	r2, [r2, #0]
 800810a:	4621      	mov	r1, r4
 800810c:	6920      	ldr	r0, [r4, #16]
 800810e:	47a8      	blx	r5
          if (err == ERR_ABRT) {
 8008110:	f110 0f0d 	cmn.w	r0, #13
 8008114:	f43f ad46 	beq.w	8007ba4 <tcp_input+0x5d8>
          if (err != ERR_OK) {
 8008118:	b110      	cbz	r0, 8008120 <tcp_input+0xb54>
            pcb->refused_data = recv_data;
 800811a:	4b3c      	ldr	r3, [pc, #240]	; (800820c <tcp_input+0xc40>)
 800811c:	681b      	ldr	r3, [r3, #0]
 800811e:	67a3      	str	r3, [r4, #120]	; 0x78
        if (recv_flags & TF_GOT_FIN) {
 8008120:	4b38      	ldr	r3, [pc, #224]	; (8008204 <tcp_input+0xc38>)
 8008122:	781b      	ldrb	r3, [r3, #0]
 8008124:	f013 0f20 	tst.w	r3, #32
 8008128:	d005      	beq.n	8008136 <tcp_input+0xb6a>
          if (pcb->refused_data != NULL) {
 800812a:	6fa3      	ldr	r3, [r4, #120]	; 0x78
 800812c:	b303      	cbz	r3, 8008170 <tcp_input+0xba4>
            pcb->refused_data->flags |= PBUF_FLAG_TCP_FIN;
 800812e:	7b5a      	ldrb	r2, [r3, #13]
 8008130:	f042 0220 	orr.w	r2, r2, #32
 8008134:	735a      	strb	r2, [r3, #13]
        tcp_input_pcb = NULL;
 8008136:	4b39      	ldr	r3, [pc, #228]	; (800821c <tcp_input+0xc50>)
 8008138:	2200      	movs	r2, #0
 800813a:	601a      	str	r2, [r3, #0]
        if (tcp_input_delayed_close(pcb)) {
 800813c:	4620      	mov	r0, r4
 800813e:	f7fe fcc5 	bl	8006acc <tcp_input_delayed_close>
 8008142:	2800      	cmp	r0, #0
 8008144:	f47f ad2e 	bne.w	8007ba4 <tcp_input+0x5d8>
        tcp_output(pcb);
 8008148:	4620      	mov	r0, r4
 800814a:	f001 f879 	bl	8009240 <tcp_output>
 800814e:	e529      	b.n	8007ba4 <tcp_input+0x5d8>
            pbuf_free(recv_data);
 8008150:	4b2e      	ldr	r3, [pc, #184]	; (800820c <tcp_input+0xc40>)
 8008152:	6818      	ldr	r0, [r3, #0]
 8008154:	f7fd f828 	bl	80051a8 <pbuf_free>
            tcp_abort(pcb);
 8008158:	4620      	mov	r0, r4
 800815a:	f7fd fef1 	bl	8005f40 <tcp_abort>
            goto aborted;
 800815e:	e521      	b.n	8007ba4 <tcp_input+0x5d8>
          TCP_EVENT_RECV(pcb, recv_data, ERR_OK, err);
 8008160:	2300      	movs	r3, #0
 8008162:	4a2a      	ldr	r2, [pc, #168]	; (800820c <tcp_input+0xc40>)
 8008164:	6812      	ldr	r2, [r2, #0]
 8008166:	4621      	mov	r1, r4
 8008168:	4618      	mov	r0, r3
 800816a:	f7fe f917 	bl	800639c <tcp_recv_null>
 800816e:	e7cf      	b.n	8008110 <tcp_input+0xb44>
            if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 8008170:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8008172:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
              pcb->rcv_wnd++;
 8008176:	bf1c      	itt	ne
 8008178:	3301      	addne	r3, #1
 800817a:	8523      	strhne	r3, [r4, #40]	; 0x28
            TCP_EVENT_CLOSED(pcb, err);
 800817c:	f8d4 5084 	ldr.w	r5, [r4, #132]	; 0x84
 8008180:	2d00      	cmp	r5, #0
 8008182:	d0d8      	beq.n	8008136 <tcp_input+0xb6a>
 8008184:	2300      	movs	r3, #0
 8008186:	461a      	mov	r2, r3
 8008188:	4621      	mov	r1, r4
 800818a:	6920      	ldr	r0, [r4, #16]
 800818c:	47a8      	blx	r5
            if (err == ERR_ABRT) {
 800818e:	f110 0f0d 	cmn.w	r0, #13
 8008192:	d1d0      	bne.n	8008136 <tcp_input+0xb6a>
 8008194:	e506      	b.n	8007ba4 <tcp_input+0x5d8>
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8008196:	4b22      	ldr	r3, [pc, #136]	; (8008220 <tcp_input+0xc54>)
 8008198:	6819      	ldr	r1, [r3, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 800819a:	4b22      	ldr	r3, [pc, #136]	; (8008224 <tcp_input+0xc58>)
 800819c:	4a22      	ldr	r2, [pc, #136]	; (8008228 <tcp_input+0xc5c>)
 800819e:	8810      	ldrh	r0, [r2, #0]
 80081a0:	4a22      	ldr	r2, [pc, #136]	; (800822c <tcp_input+0xc60>)
 80081a2:	6812      	ldr	r2, [r2, #0]
 80081a4:	880c      	ldrh	r4, [r1, #0]
 80081a6:	9402      	str	r4, [sp, #8]
 80081a8:	8849      	ldrh	r1, [r1, #2]
 80081aa:	9101      	str	r1, [sp, #4]
 80081ac:	1f19      	subs	r1, r3, #4
 80081ae:	9100      	str	r1, [sp, #0]
 80081b0:	4402      	add	r2, r0
 80081b2:	4910      	ldr	r1, [pc, #64]	; (80081f4 <tcp_input+0xc28>)
 80081b4:	6809      	ldr	r1, [r1, #0]
 80081b6:	2000      	movs	r0, #0
 80081b8:	f000 ffc0 	bl	800913c <tcp_rst>
 80081bc:	e007      	b.n	80081ce <tcp_input+0xc02>
    if (!(TCPH_FLAGS(tcphdr) & TCP_RST)) {
 80081be:	4b18      	ldr	r3, [pc, #96]	; (8008220 <tcp_input+0xc54>)
 80081c0:	681b      	ldr	r3, [r3, #0]
 80081c2:	8998      	ldrh	r0, [r3, #12]
 80081c4:	f7fc f9cc 	bl	8004560 <lwip_htons>
 80081c8:	f010 0f04 	tst.w	r0, #4
 80081cc:	d0e3      	beq.n	8008196 <tcp_input+0xbca>
    pbuf_free(p);
 80081ce:	4628      	mov	r0, r5
 80081d0:	f7fc ffea 	bl	80051a8 <pbuf_free>
 80081d4:	f7ff ba08 	b.w	80075e8 <tcp_input+0x1c>
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 80081d8:	4b09      	ldr	r3, [pc, #36]	; (8008200 <tcp_input+0xc34>)
 80081da:	681c      	ldr	r4, [r3, #0]
 80081dc:	2c00      	cmp	r4, #0
 80081de:	f43f abe5 	beq.w	80079ac <tcp_input+0x3e0>
      LWIP_ASSERT("tcp_input: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 80081e2:	f8df 802c 	ldr.w	r8, [pc, #44]	; 8008210 <tcp_input+0xc44>
 80081e6:	4f12      	ldr	r7, [pc, #72]	; (8008230 <tcp_input+0xc64>)
 80081e8:	4e0b      	ldr	r6, [pc, #44]	; (8008218 <tcp_input+0xc4c>)
 80081ea:	f7ff bb8d 	b.w	8007908 <tcp_input+0x33c>
 80081ee:	bf00      	nop
 80081f0:	2000ae78 	.word	0x2000ae78
 80081f4:	2000ae74 	.word	0x2000ae74
 80081f8:	2000ae58 	.word	0x2000ae58
 80081fc:	2000ae5c 	.word	0x2000ae5c
 8008200:	2000ae70 	.word	0x2000ae70
 8008204:	2000ae94 	.word	0x2000ae94
 8008208:	2000ae8c 	.word	0x2000ae8c
 800820c:	2000ae90 	.word	0x2000ae90
 8008210:	08011488 	.word	0x08011488
 8008214:	08011868 	.word	0x08011868
 8008218:	0800cb24 	.word	0x0800cb24
 800821c:	2000ae9c 	.word	0x2000ae9c
 8008220:	2000aea4 	.word	0x2000aea4
 8008224:	2000573c 	.word	0x2000573c
 8008228:	2000aeb2 	.word	0x2000aeb2
 800822c:	2000ae98 	.word	0x2000ae98
 8008230:	080117cc 	.word	0x080117cc

08008234 <tcp_trigger_input_pcb_close>:

void
tcp_trigger_input_pcb_close(void)
{
  recv_flags |= TF_CLOSED;
 8008234:	4a02      	ldr	r2, [pc, #8]	; (8008240 <tcp_trigger_input_pcb_close+0xc>)
 8008236:	7813      	ldrb	r3, [r2, #0]
 8008238:	f043 0310 	orr.w	r3, r3, #16
 800823c:	7013      	strb	r3, [r2, #0]
}
 800823e:	4770      	bx	lr
 8008240:	2000ae94 	.word	0x2000ae94

08008244 <tcp_output_segment_busy>:
 * @arg seg the tcp segment to check
 * @return 1 if ref != 1, 0 if ref == 1
 */
static int
tcp_output_segment_busy(const struct tcp_seg *seg)
{
 8008244:	b510      	push	{r4, lr}
  LWIP_ASSERT("tcp_output_segment_busy: invalid seg", seg != NULL);
 8008246:	4604      	mov	r4, r0
 8008248:	b128      	cbz	r0, 8008256 <tcp_output_segment_busy+0x12>

  /* We only need to check the first pbuf here:
     If a pbuf is queued for transmission, a driver calls pbuf_ref(),
     which only changes the ref count of the first pbuf */
  if (seg->p->ref != 1) {
 800824a:	6863      	ldr	r3, [r4, #4]
 800824c:	7b98      	ldrb	r0, [r3, #14]
    /* other reference found */
    return 1;
  }
  /* no other references found */
  return 0;
}
 800824e:	3801      	subs	r0, #1
 8008250:	bf18      	it	ne
 8008252:	2001      	movne	r0, #1
 8008254:	bd10      	pop	{r4, pc}
  LWIP_ASSERT("tcp_output_segment_busy: invalid seg", seg != NULL);
 8008256:	4b04      	ldr	r3, [pc, #16]	; (8008268 <tcp_output_segment_busy+0x24>)
 8008258:	f240 529a 	movw	r2, #1434	; 0x59a
 800825c:	4903      	ldr	r1, [pc, #12]	; (800826c <tcp_output_segment_busy+0x28>)
 800825e:	4804      	ldr	r0, [pc, #16]	; (8008270 <tcp_output_segment_busy+0x2c>)
 8008260:	f003 f8ea 	bl	800b438 <iprintf>
 8008264:	e7f1      	b.n	800824a <tcp_output_segment_busy+0x6>
 8008266:	bf00      	nop
 8008268:	08011884 	.word	0x08011884
 800826c:	080118b8 	.word	0x080118b8
 8008270:	0800cb24 	.word	0x0800cb24

08008274 <tcp_output_fill_options>:
}

/* Fill in options for control segments */
static void
tcp_output_fill_options(const struct tcp_pcb *pcb, struct pbuf *p, u8_t optflags, u8_t num_sacks)
{
 8008274:	b538      	push	{r3, r4, r5, lr}
 8008276:	4614      	mov	r4, r2
  struct tcp_hdr *tcphdr;
  u32_t *opts;
  u16_t sacks_len = 0;

  LWIP_ASSERT("tcp_output_fill_options: invalid pbuf", p != NULL);
 8008278:	460d      	mov	r5, r1
 800827a:	b181      	cbz	r1, 800829e <tcp_output_fill_options+0x2a>

  tcphdr = (struct tcp_hdr *)p->payload;
 800827c:	686b      	ldr	r3, [r5, #4]
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(p, tcphdr, pcb, opts);
#endif

  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(sacks_len);
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(tcphdr + 1)) + sacks_len * 4 + LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb));
 800827e:	00a4      	lsls	r4, r4, #2
 8008280:	f004 0404 	and.w	r4, r4, #4
 8008284:	3414      	adds	r4, #20
 8008286:	441c      	add	r4, r3
  opts = (u32_t *)(void *)(tcphdr + 1);
 8008288:	3314      	adds	r3, #20
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(tcphdr + 1)) + sacks_len * 4 + LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb));
 800828a:	429c      	cmp	r4, r3
 800828c:	d006      	beq.n	800829c <tcp_output_fill_options+0x28>
 800828e:	4b08      	ldr	r3, [pc, #32]	; (80082b0 <tcp_output_fill_options+0x3c>)
 8008290:	f240 7275 	movw	r2, #1909	; 0x775
 8008294:	4907      	ldr	r1, [pc, #28]	; (80082b4 <tcp_output_fill_options+0x40>)
 8008296:	4808      	ldr	r0, [pc, #32]	; (80082b8 <tcp_output_fill_options+0x44>)
 8008298:	f003 f8ce 	bl	800b438 <iprintf>
  LWIP_UNUSED_ARG(optflags); /* for LWIP_NOASSERT */
  LWIP_UNUSED_ARG(opts); /* for LWIP_NOASSERT */
}
 800829c:	bd38      	pop	{r3, r4, r5, pc}
  LWIP_ASSERT("tcp_output_fill_options: invalid pbuf", p != NULL);
 800829e:	4b04      	ldr	r3, [pc, #16]	; (80082b0 <tcp_output_fill_options+0x3c>)
 80082a0:	f240 7256 	movw	r2, #1878	; 0x756
 80082a4:	4905      	ldr	r1, [pc, #20]	; (80082bc <tcp_output_fill_options+0x48>)
 80082a6:	4804      	ldr	r0, [pc, #16]	; (80082b8 <tcp_output_fill_options+0x44>)
 80082a8:	f003 f8c6 	bl	800b438 <iprintf>
 80082ac:	e7e6      	b.n	800827c <tcp_output_fill_options+0x8>
 80082ae:	bf00      	nop
 80082b0:	08011884 	.word	0x08011884
 80082b4:	08011908 	.word	0x08011908
 80082b8:	0800cb24 	.word	0x0800cb24
 80082bc:	080118e0 	.word	0x080118e0

080082c0 <tcp_pbuf_prealloc>:
{
 80082c0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80082c4:	4680      	mov	r8, r0
 80082c6:	460c      	mov	r4, r1
 80082c8:	4615      	mov	r5, r2
 80082ca:	9e08      	ldr	r6, [sp, #32]
 80082cc:	f89d 9028 	ldrb.w	r9, [sp, #40]	; 0x28
  LWIP_ASSERT("tcp_pbuf_prealloc: invalid oversize", oversize != NULL);
 80082d0:	461f      	mov	r7, r3
 80082d2:	b1cb      	cbz	r3, 8008308 <tcp_pbuf_prealloc+0x48>
  LWIP_ASSERT("tcp_pbuf_prealloc: invalid pcb", pcb != NULL);
 80082d4:	b1fe      	cbz	r6, 8008316 <tcp_pbuf_prealloc+0x56>
  if (length < max_length) {
 80082d6:	42ac      	cmp	r4, r5
 80082d8:	d229      	bcs.n	800832e <tcp_pbuf_prealloc+0x6e>
    if ((apiflags & TCP_WRITE_FLAG_MORE) ||
 80082da:	f89d 3024 	ldrb.w	r3, [sp, #36]	; 0x24
 80082de:	f013 0f02 	tst.w	r3, #2
 80082e2:	d108      	bne.n	80082f6 <tcp_pbuf_prealloc+0x36>
 80082e4:	8b73      	ldrh	r3, [r6, #26]
 80082e6:	f013 0f40 	tst.w	r3, #64	; 0x40
 80082ea:	d139      	bne.n	8008360 <tcp_pbuf_prealloc+0xa0>
        (!(pcb->flags & TF_NODELAY) &&
 80082ec:	f1b9 0f00 	cmp.w	r9, #0
 80082f0:	d001      	beq.n	80082f6 <tcp_pbuf_prealloc+0x36>
         (!first_seg ||
 80082f2:	6ef3      	ldr	r3, [r6, #108]	; 0x6c
 80082f4:	b1b3      	cbz	r3, 8008324 <tcp_pbuf_prealloc+0x64>
      alloc = LWIP_MIN(max_length, LWIP_MEM_ALIGN_SIZE(TCP_OVERSIZE_CALC_LENGTH(length)));
 80082f6:	f204 211b 	addw	r1, r4, #539	; 0x21b
 80082fa:	f021 0103 	bic.w	r1, r1, #3
 80082fe:	428d      	cmp	r5, r1
 8008300:	bf28      	it	cs
 8008302:	460d      	movcs	r5, r1
 8008304:	b2a9      	uxth	r1, r5
 8008306:	e013      	b.n	8008330 <tcp_pbuf_prealloc+0x70>
  LWIP_ASSERT("tcp_pbuf_prealloc: invalid oversize", oversize != NULL);
 8008308:	4b16      	ldr	r3, [pc, #88]	; (8008364 <tcp_pbuf_prealloc+0xa4>)
 800830a:	22e8      	movs	r2, #232	; 0xe8
 800830c:	4916      	ldr	r1, [pc, #88]	; (8008368 <tcp_pbuf_prealloc+0xa8>)
 800830e:	4817      	ldr	r0, [pc, #92]	; (800836c <tcp_pbuf_prealloc+0xac>)
 8008310:	f003 f892 	bl	800b438 <iprintf>
 8008314:	e7de      	b.n	80082d4 <tcp_pbuf_prealloc+0x14>
  LWIP_ASSERT("tcp_pbuf_prealloc: invalid pcb", pcb != NULL);
 8008316:	4b13      	ldr	r3, [pc, #76]	; (8008364 <tcp_pbuf_prealloc+0xa4>)
 8008318:	22e9      	movs	r2, #233	; 0xe9
 800831a:	4915      	ldr	r1, [pc, #84]	; (8008370 <tcp_pbuf_prealloc+0xb0>)
 800831c:	4813      	ldr	r0, [pc, #76]	; (800836c <tcp_pbuf_prealloc+0xac>)
 800831e:	f003 f88b 	bl	800b438 <iprintf>
 8008322:	e7d8      	b.n	80082d6 <tcp_pbuf_prealloc+0x16>
          pcb->unsent != NULL ||
 8008324:	6f33      	ldr	r3, [r6, #112]	; 0x70
 8008326:	2b00      	cmp	r3, #0
 8008328:	d1e5      	bne.n	80082f6 <tcp_pbuf_prealloc+0x36>
  u16_t alloc = length;
 800832a:	4621      	mov	r1, r4
 800832c:	e000      	b.n	8008330 <tcp_pbuf_prealloc+0x70>
 800832e:	4621      	mov	r1, r4
  p = pbuf_alloc(layer, alloc, PBUF_RAM);
 8008330:	f44f 7220 	mov.w	r2, #640	; 0x280
 8008334:	4640      	mov	r0, r8
 8008336:	f7fc ffa1 	bl	800527c <pbuf_alloc>
  if (p == NULL) {
 800833a:	4605      	mov	r5, r0
 800833c:	b168      	cbz	r0, 800835a <tcp_pbuf_prealloc+0x9a>
  LWIP_ASSERT("need unchained pbuf", p->next == NULL);
 800833e:	6803      	ldr	r3, [r0, #0]
 8008340:	b133      	cbz	r3, 8008350 <tcp_pbuf_prealloc+0x90>
 8008342:	4b08      	ldr	r3, [pc, #32]	; (8008364 <tcp_pbuf_prealloc+0xa4>)
 8008344:	f240 120b 	movw	r2, #267	; 0x10b
 8008348:	490a      	ldr	r1, [pc, #40]	; (8008374 <tcp_pbuf_prealloc+0xb4>)
 800834a:	4808      	ldr	r0, [pc, #32]	; (800836c <tcp_pbuf_prealloc+0xac>)
 800834c:	f003 f874 	bl	800b438 <iprintf>
  *oversize = p->len - length;
 8008350:	896b      	ldrh	r3, [r5, #10]
 8008352:	1b1b      	subs	r3, r3, r4
 8008354:	803b      	strh	r3, [r7, #0]
  p->len = p->tot_len = length;
 8008356:	812c      	strh	r4, [r5, #8]
 8008358:	816c      	strh	r4, [r5, #10]
}
 800835a:	4628      	mov	r0, r5
 800835c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  u16_t alloc = length;
 8008360:	4621      	mov	r1, r4
 8008362:	e7e5      	b.n	8008330 <tcp_pbuf_prealloc+0x70>
 8008364:	08011884 	.word	0x08011884
 8008368:	0801191c 	.word	0x0801191c
 800836c:	0800cb24 	.word	0x0800cb24
 8008370:	08011940 	.word	0x08011940
 8008374:	08011960 	.word	0x08011960

08008378 <tcp_create_segment>:
{
 8008378:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800837c:	460e      	mov	r6, r1
 800837e:	4617      	mov	r7, r2
 8008380:	4698      	mov	r8, r3
 8008382:	f89d a020 	ldrb.w	sl, [sp, #32]
  LWIP_ASSERT("tcp_create_segment: invalid pcb", pcb != NULL);
 8008386:	4681      	mov	r9, r0
 8008388:	2800      	cmp	r0, #0
 800838a:	d041      	beq.n	8008410 <tcp_create_segment+0x98>
  LWIP_ASSERT("tcp_create_segment: invalid pbuf", p != NULL);
 800838c:	2e00      	cmp	r6, #0
 800838e:	d046      	beq.n	800841e <tcp_create_segment+0xa6>
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 8008390:	ea4f 058a 	mov.w	r5, sl, lsl #2
 8008394:	f005 0504 	and.w	r5, r5, #4
  if ((seg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG)) == NULL) {
 8008398:	2003      	movs	r0, #3
 800839a:	f7fc fc17 	bl	8004bcc <memp_malloc>
 800839e:	4604      	mov	r4, r0
 80083a0:	2800      	cmp	r0, #0
 80083a2:	d043      	beq.n	800842c <tcp_create_segment+0xb4>
  seg->flags = optflags;
 80083a4:	f880 a00a 	strb.w	sl, [r0, #10]
  seg->next = NULL;
 80083a8:	2300      	movs	r3, #0
 80083aa:	6003      	str	r3, [r0, #0]
  seg->p = p;
 80083ac:	6046      	str	r6, [r0, #4]
  LWIP_ASSERT("p->tot_len >= optlen", p->tot_len >= optlen);
 80083ae:	fa1f fa85 	uxth.w	sl, r5
 80083b2:	8933      	ldrh	r3, [r6, #8]
 80083b4:	4553      	cmp	r3, sl
 80083b6:	d33d      	bcc.n	8008434 <tcp_create_segment+0xbc>
  seg->len = p->tot_len - optlen;
 80083b8:	8931      	ldrh	r1, [r6, #8]
 80083ba:	eba1 010a 	sub.w	r1, r1, sl
 80083be:	8121      	strh	r1, [r4, #8]
  if (pbuf_add_header(p, TCP_HLEN)) {
 80083c0:	2114      	movs	r1, #20
 80083c2:	4630      	mov	r0, r6
 80083c4:	f7fc feab 	bl	800511e <pbuf_add_header>
 80083c8:	2800      	cmp	r0, #0
 80083ca:	d13a      	bne.n	8008442 <tcp_create_segment+0xca>
  seg->tcphdr = (struct tcp_hdr *)seg->p->payload;
 80083cc:	6863      	ldr	r3, [r4, #4]
 80083ce:	685e      	ldr	r6, [r3, #4]
 80083d0:	60e6      	str	r6, [r4, #12]
  seg->tcphdr->src = lwip_htons(pcb->local_port);
 80083d2:	f8b9 0016 	ldrh.w	r0, [r9, #22]
 80083d6:	f7fc f8c3 	bl	8004560 <lwip_htons>
 80083da:	8030      	strh	r0, [r6, #0]
  seg->tcphdr->dest = lwip_htons(pcb->remote_port);
 80083dc:	68e6      	ldr	r6, [r4, #12]
 80083de:	f8b9 0018 	ldrh.w	r0, [r9, #24]
 80083e2:	f7fc f8bd 	bl	8004560 <lwip_htons>
 80083e6:	8070      	strh	r0, [r6, #2]
  seg->tcphdr->seqno = lwip_htonl(seqno);
 80083e8:	68e6      	ldr	r6, [r4, #12]
 80083ea:	4640      	mov	r0, r8
 80083ec:	f7fc f8bd 	bl	800456a <lwip_htonl>
 80083f0:	6070      	str	r0, [r6, #4]
  TCPH_HDRLEN_FLAGS_SET(seg->tcphdr, (5 + optlen / 4), hdrflags);
 80083f2:	68e6      	ldr	r6, [r4, #12]
 80083f4:	02a8      	lsls	r0, r5, #10
 80083f6:	f500 40a0 	add.w	r0, r0, #20480	; 0x5000
 80083fa:	4338      	orrs	r0, r7
 80083fc:	f7fc f8b0 	bl	8004560 <lwip_htons>
 8008400:	81b0      	strh	r0, [r6, #12]
  seg->tcphdr->urgp = 0;
 8008402:	68e3      	ldr	r3, [r4, #12]
 8008404:	2200      	movs	r2, #0
 8008406:	749a      	strb	r2, [r3, #18]
 8008408:	74da      	strb	r2, [r3, #19]
}
 800840a:	4620      	mov	r0, r4
 800840c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  LWIP_ASSERT("tcp_create_segment: invalid pcb", pcb != NULL);
 8008410:	4b0e      	ldr	r3, [pc, #56]	; (800844c <tcp_create_segment+0xd4>)
 8008412:	22a3      	movs	r2, #163	; 0xa3
 8008414:	490e      	ldr	r1, [pc, #56]	; (8008450 <tcp_create_segment+0xd8>)
 8008416:	480f      	ldr	r0, [pc, #60]	; (8008454 <tcp_create_segment+0xdc>)
 8008418:	f003 f80e 	bl	800b438 <iprintf>
 800841c:	e7b6      	b.n	800838c <tcp_create_segment+0x14>
  LWIP_ASSERT("tcp_create_segment: invalid pbuf", p != NULL);
 800841e:	4b0b      	ldr	r3, [pc, #44]	; (800844c <tcp_create_segment+0xd4>)
 8008420:	22a4      	movs	r2, #164	; 0xa4
 8008422:	490d      	ldr	r1, [pc, #52]	; (8008458 <tcp_create_segment+0xe0>)
 8008424:	480b      	ldr	r0, [pc, #44]	; (8008454 <tcp_create_segment+0xdc>)
 8008426:	f003 f807 	bl	800b438 <iprintf>
 800842a:	e7b1      	b.n	8008390 <tcp_create_segment+0x18>
    pbuf_free(p);
 800842c:	4630      	mov	r0, r6
 800842e:	f7fc febb 	bl	80051a8 <pbuf_free>
    return NULL;
 8008432:	e7ea      	b.n	800840a <tcp_create_segment+0x92>
  LWIP_ASSERT("p->tot_len >= optlen", p->tot_len >= optlen);
 8008434:	4b05      	ldr	r3, [pc, #20]	; (800844c <tcp_create_segment+0xd4>)
 8008436:	22b0      	movs	r2, #176	; 0xb0
 8008438:	4908      	ldr	r1, [pc, #32]	; (800845c <tcp_create_segment+0xe4>)
 800843a:	4806      	ldr	r0, [pc, #24]	; (8008454 <tcp_create_segment+0xdc>)
 800843c:	f002 fffc 	bl	800b438 <iprintf>
 8008440:	e7ba      	b.n	80083b8 <tcp_create_segment+0x40>
    tcp_seg_free(seg);
 8008442:	4620      	mov	r0, r4
 8008444:	f7fd fb4e 	bl	8005ae4 <tcp_seg_free>
    return NULL;
 8008448:	2400      	movs	r4, #0
 800844a:	e7de      	b.n	800840a <tcp_create_segment+0x92>
 800844c:	08011884 	.word	0x08011884
 8008450:	08011974 	.word	0x08011974
 8008454:	0800cb24 	.word	0x0800cb24
 8008458:	08011994 	.word	0x08011994
 800845c:	080119b8 	.word	0x080119b8

08008460 <tcp_output_alloc_header_common>:
{
 8008460:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008464:	4607      	mov	r7, r0
 8008466:	460c      	mov	r4, r1
 8008468:	4698      	mov	r8, r3
  p = pbuf_alloc(PBUF_IP, TCP_HLEN + optlen + datalen, PBUF_RAM);
 800846a:	3214      	adds	r2, #20
 800846c:	4411      	add	r1, r2
 800846e:	f44f 7220 	mov.w	r2, #640	; 0x280
 8008472:	b289      	uxth	r1, r1
 8008474:	2022      	movs	r0, #34	; 0x22
 8008476:	f7fc ff01 	bl	800527c <pbuf_alloc>
  if (p != NULL) {
 800847a:	4606      	mov	r6, r0
 800847c:	b348      	cbz	r0, 80084d2 <tcp_output_alloc_header_common+0x72>
    LWIP_ASSERT("check that first pbuf can hold struct tcp_hdr",
 800847e:	f104 0313 	add.w	r3, r4, #19
 8008482:	8942      	ldrh	r2, [r0, #10]
 8008484:	4293      	cmp	r3, r2
 8008486:	da27      	bge.n	80084d8 <tcp_output_alloc_header_common+0x78>
    tcphdr = (struct tcp_hdr *)p->payload;
 8008488:	6875      	ldr	r5, [r6, #4]
    tcphdr->src = lwip_htons(src_port);
 800848a:	f8bd 0018 	ldrh.w	r0, [sp, #24]
 800848e:	f7fc f867 	bl	8004560 <lwip_htons>
 8008492:	8028      	strh	r0, [r5, #0]
    tcphdr->dest = lwip_htons(dst_port);
 8008494:	f8bd 001c 	ldrh.w	r0, [sp, #28]
 8008498:	f7fc f862 	bl	8004560 <lwip_htons>
 800849c:	8068      	strh	r0, [r5, #2]
    tcphdr->seqno = seqno_be;
 800849e:	f8c5 8004 	str.w	r8, [r5, #4]
    tcphdr->ackno = lwip_htonl(ackno);
 80084a2:	4638      	mov	r0, r7
 80084a4:	f7fc f861 	bl	800456a <lwip_htonl>
 80084a8:	60a8      	str	r0, [r5, #8]
    TCPH_HDRLEN_FLAGS_SET(tcphdr, (5 + optlen / 4), flags);
 80084aa:	08a4      	lsrs	r4, r4, #2
 80084ac:	3405      	adds	r4, #5
 80084ae:	f89d 0020 	ldrb.w	r0, [sp, #32]
 80084b2:	ea40 3404 	orr.w	r4, r0, r4, lsl #12
 80084b6:	b2a0      	uxth	r0, r4
 80084b8:	f7fc f852 	bl	8004560 <lwip_htons>
 80084bc:	81a8      	strh	r0, [r5, #12]
    tcphdr->wnd = lwip_htons(wnd);
 80084be:	f8bd 0024 	ldrh.w	r0, [sp, #36]	; 0x24
 80084c2:	f7fc f84d 	bl	8004560 <lwip_htons>
 80084c6:	81e8      	strh	r0, [r5, #14]
    tcphdr->chksum = 0;
 80084c8:	2300      	movs	r3, #0
 80084ca:	742b      	strb	r3, [r5, #16]
 80084cc:	746b      	strb	r3, [r5, #17]
    tcphdr->urgp = 0;
 80084ce:	74ab      	strb	r3, [r5, #18]
 80084d0:	74eb      	strb	r3, [r5, #19]
}
 80084d2:	4630      	mov	r0, r6
 80084d4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    LWIP_ASSERT("check that first pbuf can hold struct tcp_hdr",
 80084d8:	4b03      	ldr	r3, [pc, #12]	; (80084e8 <tcp_output_alloc_header_common+0x88>)
 80084da:	f240 7223 	movw	r2, #1827	; 0x723
 80084de:	4903      	ldr	r1, [pc, #12]	; (80084ec <tcp_output_alloc_header_common+0x8c>)
 80084e0:	4803      	ldr	r0, [pc, #12]	; (80084f0 <tcp_output_alloc_header_common+0x90>)
 80084e2:	f002 ffa9 	bl	800b438 <iprintf>
 80084e6:	e7cf      	b.n	8008488 <tcp_output_alloc_header_common+0x28>
 80084e8:	08011884 	.word	0x08011884
 80084ec:	080119d0 	.word	0x080119d0
 80084f0:	0800cb24 	.word	0x0800cb24

080084f4 <tcp_output_alloc_header>:
{
 80084f4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80084f6:	b085      	sub	sp, #20
 80084f8:	460d      	mov	r5, r1
 80084fa:	4616      	mov	r6, r2
 80084fc:	461f      	mov	r7, r3
  LWIP_ASSERT("tcp_output_alloc_header: invalid pcb", pcb != NULL);
 80084fe:	4604      	mov	r4, r0
 8008500:	b1a0      	cbz	r0, 800852c <tcp_output_alloc_header+0x38>
  p = tcp_output_alloc_header_common(pcb->rcv_nxt, optlen, datalen,
 8008502:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8008504:	9303      	str	r3, [sp, #12]
 8008506:	2310      	movs	r3, #16
 8008508:	9302      	str	r3, [sp, #8]
 800850a:	8b23      	ldrh	r3, [r4, #24]
 800850c:	9301      	str	r3, [sp, #4]
 800850e:	8ae3      	ldrh	r3, [r4, #22]
 8008510:	9300      	str	r3, [sp, #0]
 8008512:	463b      	mov	r3, r7
 8008514:	4632      	mov	r2, r6
 8008516:	4629      	mov	r1, r5
 8008518:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800851a:	f7ff ffa1 	bl	8008460 <tcp_output_alloc_header_common>
  if (p != NULL) {
 800851e:	b118      	cbz	r0, 8008528 <tcp_output_alloc_header+0x34>
    pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 8008520:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 8008522:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008524:	4413      	add	r3, r2
 8008526:	62e3      	str	r3, [r4, #44]	; 0x2c
}
 8008528:	b005      	add	sp, #20
 800852a:	bdf0      	pop	{r4, r5, r6, r7, pc}
  LWIP_ASSERT("tcp_output_alloc_header: invalid pcb", pcb != NULL);
 800852c:	4b03      	ldr	r3, [pc, #12]	; (800853c <tcp_output_alloc_header+0x48>)
 800852e:	f240 7242 	movw	r2, #1858	; 0x742
 8008532:	4903      	ldr	r1, [pc, #12]	; (8008540 <tcp_output_alloc_header+0x4c>)
 8008534:	4803      	ldr	r0, [pc, #12]	; (8008544 <tcp_output_alloc_header+0x50>)
 8008536:	f002 ff7f 	bl	800b438 <iprintf>
 800853a:	e7e2      	b.n	8008502 <tcp_output_alloc_header+0xe>
 800853c:	08011884 	.word	0x08011884
 8008540:	08011a00 	.word	0x08011a00
 8008544:	0800cb24 	.word	0x0800cb24

08008548 <tcp_output_control_segment>:
 * header checksum and calling ip_output_if while handling netif hints and stats.
 */
static err_t
tcp_output_control_segment(const struct tcp_pcb *pcb, struct pbuf *p,
                           const ip_addr_t *src, const ip_addr_t *dst)
{
 8008548:	b5f0      	push	{r4, r5, r6, r7, lr}
 800854a:	b085      	sub	sp, #20
 800854c:	4604      	mov	r4, r0
 800854e:	4616      	mov	r6, r2
 8008550:	461d      	mov	r5, r3
  err_t err;
  struct netif *netif;

  LWIP_ASSERT("tcp_output_control_segment: invalid pbuf", p != NULL);
 8008552:	460f      	mov	r7, r1
 8008554:	b1c9      	cbz	r1, 800858a <tcp_output_control_segment+0x42>
  if ((pcb != NULL) && (pcb->netif_idx != NETIF_NO_INDEX)) {
 8008556:	b374      	cbz	r4, 80085b6 <tcp_output_control_segment+0x6e>
 8008558:	7a20      	ldrb	r0, [r4, #8]
 800855a:	b9f0      	cbnz	r0, 800859a <tcp_output_control_segment+0x52>
    return ip_route(src, dst);
 800855c:	4628      	mov	r0, r5
 800855e:	f002 f859 	bl	800a614 <ip4_route>

  netif = tcp_route(pcb, src, dst);
  if (netif == NULL) {
 8008562:	4602      	mov	r2, r0
 8008564:	b308      	cbz	r0, 80085aa <tcp_output_control_segment+0x62>
                                        src, dst);
    }
#endif
    if (pcb != NULL) {
      NETIF_SET_HINTS(netif, LWIP_CONST_CAST(struct netif_hint*, &(pcb->netif_hints)));
      ttl = pcb->ttl;
 8008566:	7ae3      	ldrb	r3, [r4, #11]
      tos = pcb->tos;
 8008568:	7aa1      	ldrb	r1, [r4, #10]
      /* Send output with hardcoded TTL/HL since we have no access to the pcb */
      ttl = TCP_TTL;
      tos = 0;
    }
    TCP_STATS_INC(tcp.xmit);
    err = ip_output_if(p, src, dst, ttl, tos, IP_PROTO_TCP, netif);
 800856a:	9202      	str	r2, [sp, #8]
 800856c:	2206      	movs	r2, #6
 800856e:	9201      	str	r2, [sp, #4]
 8008570:	9100      	str	r1, [sp, #0]
 8008572:	462a      	mov	r2, r5
 8008574:	4631      	mov	r1, r6
 8008576:	4638      	mov	r0, r7
 8008578:	f002 f9d8 	bl	800a92c <ip4_output_if>
 800857c:	4604      	mov	r4, r0
    NETIF_RESET_HINTS(netif);
  }
  pbuf_free(p);
 800857e:	4638      	mov	r0, r7
 8008580:	f7fc fe12 	bl	80051a8 <pbuf_free>
  return err;
}
 8008584:	4620      	mov	r0, r4
 8008586:	b005      	add	sp, #20
 8008588:	bdf0      	pop	{r4, r5, r6, r7, pc}
  LWIP_ASSERT("tcp_output_control_segment: invalid pbuf", p != NULL);
 800858a:	4b0f      	ldr	r3, [pc, #60]	; (80085c8 <tcp_output_control_segment+0x80>)
 800858c:	f240 7287 	movw	r2, #1927	; 0x787
 8008590:	490e      	ldr	r1, [pc, #56]	; (80085cc <tcp_output_control_segment+0x84>)
 8008592:	480f      	ldr	r0, [pc, #60]	; (80085d0 <tcp_output_control_segment+0x88>)
 8008594:	f002 ff50 	bl	800b438 <iprintf>
 8008598:	e7dd      	b.n	8008556 <tcp_output_control_segment+0xe>
    return netif_get_by_index(pcb->netif_idx);
 800859a:	f7fc fd15 	bl	8004fc8 <netif_get_by_index>
  if (netif == NULL) {
 800859e:	4602      	mov	r2, r0
 80085a0:	2800      	cmp	r0, #0
 80085a2:	d1e0      	bne.n	8008566 <tcp_output_control_segment+0x1e>
    err = ERR_RTE;
 80085a4:	f06f 0403 	mvn.w	r4, #3
 80085a8:	e7e9      	b.n	800857e <tcp_output_control_segment+0x36>
 80085aa:	f06f 0403 	mvn.w	r4, #3
 80085ae:	e7e6      	b.n	800857e <tcp_output_control_segment+0x36>
 80085b0:	f06f 0403 	mvn.w	r4, #3
 80085b4:	e7e3      	b.n	800857e <tcp_output_control_segment+0x36>
    return ip_route(src, dst);
 80085b6:	4628      	mov	r0, r5
 80085b8:	f002 f82c 	bl	800a614 <ip4_route>
  if (netif == NULL) {
 80085bc:	4602      	mov	r2, r0
 80085be:	2800      	cmp	r0, #0
 80085c0:	d0f6      	beq.n	80085b0 <tcp_output_control_segment+0x68>
      tos = 0;
 80085c2:	2100      	movs	r1, #0
      ttl = TCP_TTL;
 80085c4:	23ff      	movs	r3, #255	; 0xff
 80085c6:	e7d0      	b.n	800856a <tcp_output_control_segment+0x22>
 80085c8:	08011884 	.word	0x08011884
 80085cc:	08011a28 	.word	0x08011a28
 80085d0:	0800cb24 	.word	0x0800cb24

080085d4 <tcp_write>:
{
 80085d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80085d8:	b091      	sub	sp, #68	; 0x44
 80085da:	9107      	str	r1, [sp, #28]
 80085dc:	930a      	str	r3, [sp, #40]	; 0x28
  u16_t oversize = 0;
 80085de:	2300      	movs	r3, #0
 80085e0:	f8ad 303e 	strh.w	r3, [sp, #62]	; 0x3e
  LWIP_ERROR("tcp_write: invalid pcb", pcb != NULL, return ERR_ARG);
 80085e4:	b1c0      	cbz	r0, 8008618 <tcp_write+0x44>
 80085e6:	4692      	mov	sl, r2
 80085e8:	4680      	mov	r8, r0
  mss_local = LWIP_MIN(pcb->mss, TCPWND_MIN16(pcb->snd_wnd_max / 2));
 80085ea:	8e42      	ldrh	r2, [r0, #50]	; 0x32
 80085ec:	f8b0 3062 	ldrh.w	r3, [r0, #98]	; 0x62
 80085f0:	085b      	lsrs	r3, r3, #1
 80085f2:	4293      	cmp	r3, r2
 80085f4:	bf28      	it	cs
 80085f6:	4613      	movcs	r3, r2
 80085f8:	469b      	mov	fp, r3
  mss_local = mss_local ? mss_local : pcb->mss;
 80085fa:	2b00      	cmp	r3, #0
 80085fc:	bf08      	it	eq
 80085fe:	4693      	moveq	fp, r2
  LWIP_ERROR("tcp_write: arg == NULL (programmer violates API)",
 8008600:	9b07      	ldr	r3, [sp, #28]
 8008602:	b19b      	cbz	r3, 800862c <tcp_write+0x58>
  if ((pcb->state != ESTABLISHED) &&
 8008604:	7d03      	ldrb	r3, [r0, #20]
 8008606:	2b07      	cmp	r3, #7
 8008608:	d01a      	beq.n	8008640 <tcp_write+0x6c>
      (pcb->state != CLOSE_WAIT) &&
 800860a:	3b02      	subs	r3, #2
 800860c:	b2db      	uxtb	r3, r3
 800860e:	2b02      	cmp	r3, #2
 8008610:	d916      	bls.n	8008640 <tcp_write+0x6c>
    return ERR_CONN;
 8008612:	f06f 000a 	mvn.w	r0, #10
  if (err != ERR_OK) {
 8008616:	e203      	b.n	8008a20 <tcp_write+0x44c>
  LWIP_ERROR("tcp_write: invalid pcb", pcb != NULL, return ERR_ARG);
 8008618:	4ba5      	ldr	r3, [pc, #660]	; (80088b0 <tcp_write+0x2dc>)
 800861a:	f44f 72cf 	mov.w	r2, #414	; 0x19e
 800861e:	49a5      	ldr	r1, [pc, #660]	; (80088b4 <tcp_write+0x2e0>)
 8008620:	48a5      	ldr	r0, [pc, #660]	; (80088b8 <tcp_write+0x2e4>)
 8008622:	f002 ff09 	bl	800b438 <iprintf>
 8008626:	f06f 000f 	mvn.w	r0, #15
 800862a:	e1f9      	b.n	8008a20 <tcp_write+0x44c>
  LWIP_ERROR("tcp_write: arg == NULL (programmer violates API)",
 800862c:	4ba0      	ldr	r3, [pc, #640]	; (80088b0 <tcp_write+0x2dc>)
 800862e:	f240 12ad 	movw	r2, #429	; 0x1ad
 8008632:	49a2      	ldr	r1, [pc, #648]	; (80088bc <tcp_write+0x2e8>)
 8008634:	48a0      	ldr	r0, [pc, #640]	; (80088b8 <tcp_write+0x2e4>)
 8008636:	f002 feff 	bl	800b438 <iprintf>
 800863a:	f06f 000f 	mvn.w	r0, #15
 800863e:	e1ef      	b.n	8008a20 <tcp_write+0x44c>
  } else if (len == 0) {
 8008640:	f1ba 0f00 	cmp.w	sl, #0
 8008644:	d039      	beq.n	80086ba <tcp_write+0xe6>
  if (len > pcb->snd_buf) {
 8008646:	f8b8 3064 	ldrh.w	r3, [r8, #100]	; 0x64
 800864a:	4553      	cmp	r3, sl
 800864c:	d310      	bcc.n	8008670 <tcp_write+0x9c>
  if (pcb->snd_queuelen >= LWIP_MIN(TCP_SND_QUEUELEN, (TCP_SNDQUEUELEN_OVERFLOW + 1))) {
 800864e:	f8b8 3066 	ldrh.w	r3, [r8, #102]	; 0x66
 8008652:	2b08      	cmp	r3, #8
 8008654:	d815      	bhi.n	8008682 <tcp_write+0xae>
  if (pcb->snd_queuelen != 0) {
 8008656:	b32b      	cbz	r3, 80086a4 <tcp_write+0xd0>
    LWIP_ASSERT("tcp_write: pbufs on queue => at least one queue non-empty",
 8008658:	f8d8 3070 	ldr.w	r3, [r8, #112]	; 0x70
 800865c:	bb6b      	cbnz	r3, 80086ba <tcp_write+0xe6>
 800865e:	f8d8 306c 	ldr.w	r3, [r8, #108]	; 0x6c
 8008662:	b1bb      	cbz	r3, 8008694 <tcp_write+0xc0>
  queuelen = pcb->snd_queuelen;
 8008664:	f8b8 6066 	ldrh.w	r6, [r8, #102]	; 0x66
  if (pcb->unsent != NULL) {
 8008668:	f8d8 906c 	ldr.w	r9, [r8, #108]	; 0x6c
 800866c:	464b      	mov	r3, r9
 800866e:	e02c      	b.n	80086ca <tcp_write+0xf6>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8008670:	f8b8 301a 	ldrh.w	r3, [r8, #26]
 8008674:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008678:	f8a8 301a 	strh.w	r3, [r8, #26]
    return ERR_MEM;
 800867c:	f04f 30ff 	mov.w	r0, #4294967295
 8008680:	e1ce      	b.n	8008a20 <tcp_write+0x44c>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8008682:	f8b8 301a 	ldrh.w	r3, [r8, #26]
 8008686:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800868a:	f8a8 301a 	strh.w	r3, [r8, #26]
    return ERR_MEM;
 800868e:	f04f 30ff 	mov.w	r0, #4294967295
 8008692:	e1c5      	b.n	8008a20 <tcp_write+0x44c>
    LWIP_ASSERT("tcp_write: pbufs on queue => at least one queue non-empty",
 8008694:	4b86      	ldr	r3, [pc, #536]	; (80088b0 <tcp_write+0x2dc>)
 8008696:	f240 1255 	movw	r2, #341	; 0x155
 800869a:	4989      	ldr	r1, [pc, #548]	; (80088c0 <tcp_write+0x2ec>)
 800869c:	4886      	ldr	r0, [pc, #536]	; (80088b8 <tcp_write+0x2e4>)
 800869e:	f002 fecb 	bl	800b438 <iprintf>
 80086a2:	e00a      	b.n	80086ba <tcp_write+0xe6>
    LWIP_ASSERT("tcp_write: no pbufs on queue => both queues empty",
 80086a4:	f8d8 3070 	ldr.w	r3, [r8, #112]	; 0x70
 80086a8:	2b00      	cmp	r3, #0
 80086aa:	d04f      	beq.n	800874c <tcp_write+0x178>
 80086ac:	4b80      	ldr	r3, [pc, #512]	; (80088b0 <tcp_write+0x2dc>)
 80086ae:	f44f 72ac 	mov.w	r2, #344	; 0x158
 80086b2:	4984      	ldr	r1, [pc, #528]	; (80088c4 <tcp_write+0x2f0>)
 80086b4:	4880      	ldr	r0, [pc, #512]	; (80088b8 <tcp_write+0x2e4>)
 80086b6:	f002 febf 	bl	800b438 <iprintf>
  queuelen = pcb->snd_queuelen;
 80086ba:	f8b8 6066 	ldrh.w	r6, [r8, #102]	; 0x66
  if (pcb->unsent != NULL) {
 80086be:	f8d8 906c 	ldr.w	r9, [r8, #108]	; 0x6c
 80086c2:	f1b9 0f00 	cmp.w	r9, #0
 80086c6:	d047      	beq.n	8008758 <tcp_write+0x184>
 80086c8:	464b      	mov	r3, r9
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 80086ca:	9309      	str	r3, [sp, #36]	; 0x24
 80086cc:	681b      	ldr	r3, [r3, #0]
 80086ce:	2b00      	cmp	r3, #0
 80086d0:	d1fb      	bne.n	80086ca <tcp_write+0xf6>
    unsent_optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(last_unsent->flags, pcb);
 80086d2:	4699      	mov	r9, r3
 80086d4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80086d6:	7a9c      	ldrb	r4, [r3, #10]
 80086d8:	00a4      	lsls	r4, r4, #2
 80086da:	f004 0404 	and.w	r4, r4, #4
    LWIP_ASSERT("mss_local is too small", mss_local >= last_unsent->len + unsent_optlen);
 80086de:	891b      	ldrh	r3, [r3, #8]
 80086e0:	4423      	add	r3, r4
 80086e2:	459b      	cmp	fp, r3
 80086e4:	db4f      	blt.n	8008786 <tcp_write+0x1b2>
    space = mss_local - (last_unsent->len + unsent_optlen);
 80086e6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80086e8:	891b      	ldrh	r3, [r3, #8]
 80086ea:	ebab 0303 	sub.w	r3, fp, r3
 80086ee:	1b1c      	subs	r4, r3, r4
 80086f0:	b2a3      	uxth	r3, r4
 80086f2:	930b      	str	r3, [sp, #44]	; 0x2c
    oversize = pcb->unsent_oversize;
 80086f4:	f8b8 4068 	ldrh.w	r4, [r8, #104]	; 0x68
 80086f8:	f8ad 403e 	strh.w	r4, [sp, #62]	; 0x3e
    if (oversize > 0) {
 80086fc:	2c00      	cmp	r4, #0
 80086fe:	d05b      	beq.n	80087b8 <tcp_write+0x1e4>
      LWIP_ASSERT("inconsistent oversize vs. space", oversize <= space);
 8008700:	429c      	cmp	r4, r3
 8008702:	d848      	bhi.n	8008796 <tcp_write+0x1c2>
      oversize_used = LWIP_MIN(space, LWIP_MIN(oversize, len));
 8008704:	f8bd 303e 	ldrh.w	r3, [sp, #62]	; 0x3e
 8008708:	461c      	mov	r4, r3
 800870a:	4553      	cmp	r3, sl
 800870c:	bf28      	it	cs
 800870e:	4654      	movcs	r4, sl
 8008710:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8008712:	4294      	cmp	r4, r2
 8008714:	bf28      	it	cs
 8008716:	4614      	movcs	r4, r2
 8008718:	b2a4      	uxth	r4, r4
      oversize -= oversize_used;
 800871a:	1b1b      	subs	r3, r3, r4
 800871c:	b29b      	uxth	r3, r3
 800871e:	f8ad 303e 	strh.w	r3, [sp, #62]	; 0x3e
      space -= oversize_used;
 8008722:	1b12      	subs	r2, r2, r4
 8008724:	b292      	uxth	r2, r2
 8008726:	920b      	str	r2, [sp, #44]	; 0x2c
    LWIP_ASSERT("inconsistent oversize vs. len", (oversize == 0) || (pos == len));
 8008728:	2b00      	cmp	r3, #0
 800872a:	f000 8082 	beq.w	8008832 <tcp_write+0x25e>
 800872e:	45a2      	cmp	sl, r4
 8008730:	d139      	bne.n	80087a6 <tcp_write+0x1d2>
 8008732:	9f09      	ldr	r7, [sp, #36]	; 0x24
  if (oversize_used > 0) {
 8008734:	2c00      	cmp	r4, #0
 8008736:	f000 8266 	beq.w	8008c06 <tcp_write+0x632>
 800873a:	46cb      	mov	fp, r9
 800873c:	2300      	movs	r3, #0
 800873e:	930b      	str	r3, [sp, #44]	; 0x2c
    for (p = last_unsent->p; p; p = p->next) {
 8008740:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008742:	685d      	ldr	r5, [r3, #4]
 8008744:	2d00      	cmp	r5, #0
 8008746:	f040 8187 	bne.w	8008a58 <tcp_write+0x484>
 800874a:	e198      	b.n	8008a7e <tcp_write+0x4aa>
    LWIP_ASSERT("tcp_write: no pbufs on queue => both queues empty",
 800874c:	f8d8 306c 	ldr.w	r3, [r8, #108]	; 0x6c
 8008750:	2b00      	cmp	r3, #0
 8008752:	d1ab      	bne.n	80086ac <tcp_write+0xd8>
  queuelen = pcb->snd_queuelen;
 8008754:	f8b8 6066 	ldrh.w	r6, [r8, #102]	; 0x66
    LWIP_ASSERT("unsent_oversize mismatch (pcb->unsent is NULL)",
 8008758:	f8b8 4068 	ldrh.w	r4, [r8, #104]	; 0x68
 800875c:	2c00      	cmp	r4, #0
 800875e:	f040 8094 	bne.w	800888a <tcp_write+0x2b6>
  u16_t extendlen = 0;
 8008762:	940b      	str	r4, [sp, #44]	; 0x2c
  u16_t oversize_used = 0;
 8008764:	940d      	str	r4, [sp, #52]	; 0x34
  struct tcp_seg *last_unsent = NULL, *seg = NULL, *prev_seg = NULL, *queue = NULL;
 8008766:	2300      	movs	r3, #0
 8008768:	9309      	str	r3, [sp, #36]	; 0x24
  struct pbuf *concat_p = NULL;
 800876a:	4699      	mov	r9, r3
  while (pos < len) {
 800876c:	45a2      	cmp	sl, r4
 800876e:	f240 816e 	bls.w	8008a4e <tcp_write+0x47a>
 8008772:	2300      	movs	r3, #0
 8008774:	9306      	str	r3, [sp, #24]
 8008776:	9305      	str	r3, [sp, #20]
    if (apiflags & TCP_WRITE_FLAG_COPY) {
 8008778:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800877a:	f003 0301 	and.w	r3, r3, #1
 800877e:	9308      	str	r3, [sp, #32]
 8008780:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
 8008784:	e110      	b.n	80089a8 <tcp_write+0x3d4>
    LWIP_ASSERT("mss_local is too small", mss_local >= last_unsent->len + unsent_optlen);
 8008786:	4b4a      	ldr	r3, [pc, #296]	; (80088b0 <tcp_write+0x2dc>)
 8008788:	f44f 72f3 	mov.w	r2, #486	; 0x1e6
 800878c:	494e      	ldr	r1, [pc, #312]	; (80088c8 <tcp_write+0x2f4>)
 800878e:	484a      	ldr	r0, [pc, #296]	; (80088b8 <tcp_write+0x2e4>)
 8008790:	f002 fe52 	bl	800b438 <iprintf>
 8008794:	e7a7      	b.n	80086e6 <tcp_write+0x112>
      LWIP_ASSERT("inconsistent oversize vs. space", oversize <= space);
 8008796:	4b46      	ldr	r3, [pc, #280]	; (80088b0 <tcp_write+0x2dc>)
 8008798:	f44f 72fc 	mov.w	r2, #504	; 0x1f8
 800879c:	494b      	ldr	r1, [pc, #300]	; (80088cc <tcp_write+0x2f8>)
 800879e:	4846      	ldr	r0, [pc, #280]	; (80088b8 <tcp_write+0x2e4>)
 80087a0:	f002 fe4a 	bl	800b438 <iprintf>
 80087a4:	e7ae      	b.n	8008704 <tcp_write+0x130>
    LWIP_ASSERT("inconsistent oversize vs. len", (oversize == 0) || (pos == len));
 80087a6:	4b42      	ldr	r3, [pc, #264]	; (80088b0 <tcp_write+0x2dc>)
 80087a8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80087ac:	4948      	ldr	r1, [pc, #288]	; (80088d0 <tcp_write+0x2fc>)
 80087ae:	4842      	ldr	r0, [pc, #264]	; (80088b8 <tcp_write+0x2e4>)
 80087b0:	f002 fe42 	bl	800b438 <iprintf>
 80087b4:	9f09      	ldr	r7, [sp, #36]	; 0x24
 80087b6:	e000      	b.n	80087ba <tcp_write+0x1e6>
  struct tcp_seg *last_unsent = NULL, *seg = NULL, *prev_seg = NULL, *queue = NULL;
 80087b8:	464f      	mov	r7, r9
    if ((pos < len) && (space > 0) && (last_unsent->len > 0)) {
 80087ba:	45a2      	cmp	sl, r4
 80087bc:	d9ba      	bls.n	8008734 <tcp_write+0x160>
 80087be:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80087c0:	2a00      	cmp	r2, #0
 80087c2:	d070      	beq.n	80088a6 <tcp_write+0x2d2>
 80087c4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80087c6:	891b      	ldrh	r3, [r3, #8]
 80087c8:	2b00      	cmp	r3, #0
 80087ca:	d06e      	beq.n	80088aa <tcp_write+0x2d6>
      u16_t seglen = LWIP_MIN(space, len - pos);
 80087cc:	ebaa 0704 	sub.w	r7, sl, r4
 80087d0:	4297      	cmp	r7, r2
 80087d2:	bfa8      	it	ge
 80087d4:	4617      	movge	r7, r2
 80087d6:	b2bd      	uxth	r5, r7
      if (apiflags & TCP_WRITE_FLAG_COPY) {
 80087d8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80087da:	f013 0f01 	tst.w	r3, #1
 80087de:	d12a      	bne.n	8008836 <tcp_write+0x262>
        for (p = last_unsent->p; p->next != NULL; p = p->next);
 80087e0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80087e2:	f8d3 9004 	ldr.w	r9, [r3, #4]
 80087e6:	464a      	mov	r2, r9
 80087e8:	4613      	mov	r3, r2
 80087ea:	6812      	ldr	r2, [r2, #0]
 80087ec:	2a00      	cmp	r2, #0
 80087ee:	d1fb      	bne.n	80087e8 <tcp_write+0x214>
        if (((p->type_internal & (PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS | PBUF_TYPE_FLAG_DATA_VOLATILE)) == 0) &&
 80087f0:	4691      	mov	r9, r2
 80087f2:	7b1a      	ldrb	r2, [r3, #12]
 80087f4:	f012 0fc0 	tst.w	r2, #192	; 0xc0
 80087f8:	d105      	bne.n	8008806 <tcp_write+0x232>
            (const u8_t *)p->payload + p->len == (const u8_t *)arg) {
 80087fa:	895a      	ldrh	r2, [r3, #10]
 80087fc:	685b      	ldr	r3, [r3, #4]
 80087fe:	4413      	add	r3, r2
        if (((p->type_internal & (PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS | PBUF_TYPE_FLAG_DATA_VOLATILE)) == 0) &&
 8008800:	9a07      	ldr	r2, [sp, #28]
 8008802:	429a      	cmp	r2, r3
 8008804:	d035      	beq.n	8008872 <tcp_write+0x29e>
          if ((concat_p = pbuf_alloc(PBUF_RAW, seglen, PBUF_ROM)) == NULL) {
 8008806:	2201      	movs	r2, #1
 8008808:	4629      	mov	r1, r5
 800880a:	2000      	movs	r0, #0
 800880c:	f7fc fd36 	bl	800527c <pbuf_alloc>
 8008810:	4681      	mov	r9, r0
 8008812:	2800      	cmp	r0, #0
 8008814:	f000 81d6 	beq.w	8008bc4 <tcp_write+0x5f0>
          ((struct pbuf_rom *)concat_p)->payload = (const u8_t *)arg + pos;
 8008818:	9b07      	ldr	r3, [sp, #28]
 800881a:	4423      	add	r3, r4
 800881c:	6043      	str	r3, [r0, #4]
          queuelen += pbuf_clen(concat_p);
 800881e:	f7fc fe1d 	bl	800545c <pbuf_clen>
 8008822:	4406      	add	r6, r0
 8008824:	b2b6      	uxth	r6, r6
  u16_t extendlen = 0;
 8008826:	2300      	movs	r3, #0
 8008828:	930b      	str	r3, [sp, #44]	; 0x2c
      pos += seglen;
 800882a:	4425      	add	r5, r4
 800882c:	940d      	str	r4, [sp, #52]	; 0x34
 800882e:	b2ac      	uxth	r4, r5
 8008830:	e79c      	b.n	800876c <tcp_write+0x198>
 8008832:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8008834:	e7c1      	b.n	80087ba <tcp_write+0x1e6>
        if ((concat_p = tcp_pbuf_prealloc(PBUF_RAW, seglen, space, &oversize, pcb, apiflags, 1)) == NULL) {
 8008836:	2301      	movs	r3, #1
 8008838:	9302      	str	r3, [sp, #8]
 800883a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800883c:	9301      	str	r3, [sp, #4]
 800883e:	f8cd 8000 	str.w	r8, [sp]
 8008842:	f10d 033e 	add.w	r3, sp, #62	; 0x3e
 8008846:	4629      	mov	r1, r5
 8008848:	2000      	movs	r0, #0
 800884a:	f7ff fd39 	bl	80082c0 <tcp_pbuf_prealloc>
 800884e:	4681      	mov	r9, r0
 8008850:	2800      	cmp	r0, #0
 8008852:	f000 81b7 	beq.w	8008bc4 <tcp_write+0x5f0>
        TCP_DATA_COPY2(concat_p->payload, (const u8_t *)arg + pos, seglen, &concat_chksum, &concat_chksum_swapped);
 8008856:	462a      	mov	r2, r5
 8008858:	9b07      	ldr	r3, [sp, #28]
 800885a:	1919      	adds	r1, r3, r4
 800885c:	6840      	ldr	r0, [r0, #4]
 800885e:	f002 fdbb 	bl	800b3d8 <memcpy>
        queuelen += pbuf_clen(concat_p);
 8008862:	4648      	mov	r0, r9
 8008864:	f7fc fdfa 	bl	800545c <pbuf_clen>
 8008868:	4406      	add	r6, r0
 800886a:	b2b6      	uxth	r6, r6
  u16_t extendlen = 0;
 800886c:	2300      	movs	r3, #0
 800886e:	930b      	str	r3, [sp, #44]	; 0x2c
 8008870:	e7db      	b.n	800882a <tcp_write+0x256>
          LWIP_ASSERT("tcp_write: ROM pbufs cannot be oversized", pos == 0);
 8008872:	b90c      	cbnz	r4, 8008878 <tcp_write+0x2a4>
          extendlen = seglen;
 8008874:	950b      	str	r5, [sp, #44]	; 0x2c
 8008876:	e7d8      	b.n	800882a <tcp_write+0x256>
          LWIP_ASSERT("tcp_write: ROM pbufs cannot be oversized", pos == 0);
 8008878:	4b0d      	ldr	r3, [pc, #52]	; (80088b0 <tcp_write+0x2dc>)
 800887a:	f240 2231 	movw	r2, #561	; 0x231
 800887e:	4915      	ldr	r1, [pc, #84]	; (80088d4 <tcp_write+0x300>)
 8008880:	480d      	ldr	r0, [pc, #52]	; (80088b8 <tcp_write+0x2e4>)
 8008882:	f002 fdd9 	bl	800b438 <iprintf>
          extendlen = seglen;
 8008886:	950b      	str	r5, [sp, #44]	; 0x2c
 8008888:	e7cf      	b.n	800882a <tcp_write+0x256>
    LWIP_ASSERT("unsent_oversize mismatch (pcb->unsent is NULL)",
 800888a:	4b09      	ldr	r3, [pc, #36]	; (80088b0 <tcp_write+0x2dc>)
 800888c:	f240 224a 	movw	r2, #586	; 0x24a
 8008890:	4911      	ldr	r1, [pc, #68]	; (80088d8 <tcp_write+0x304>)
 8008892:	4809      	ldr	r0, [pc, #36]	; (80088b8 <tcp_write+0x2e4>)
 8008894:	f002 fdd0 	bl	800b438 <iprintf>
  u16_t extendlen = 0;
 8008898:	2300      	movs	r3, #0
 800889a:	930b      	str	r3, [sp, #44]	; 0x2c
  u16_t oversize_used = 0;
 800889c:	930d      	str	r3, [sp, #52]	; 0x34
  u16_t pos = 0; /* position in 'arg' data */
 800889e:	461c      	mov	r4, r3
  struct tcp_seg *last_unsent = NULL, *seg = NULL, *prev_seg = NULL, *queue = NULL;
 80088a0:	9309      	str	r3, [sp, #36]	; 0x24
  struct pbuf *concat_p = NULL;
 80088a2:	4699      	mov	r9, r3
 80088a4:	e762      	b.n	800876c <tcp_write+0x198>
 80088a6:	940d      	str	r4, [sp, #52]	; 0x34
 80088a8:	e763      	b.n	8008772 <tcp_write+0x19e>
 80088aa:	930b      	str	r3, [sp, #44]	; 0x2c
 80088ac:	940d      	str	r4, [sp, #52]	; 0x34
 80088ae:	e760      	b.n	8008772 <tcp_write+0x19e>
 80088b0:	08011884 	.word	0x08011884
 80088b4:	08011a54 	.word	0x08011a54
 80088b8:	0800cb24 	.word	0x0800cb24
 80088bc:	08011a6c 	.word	0x08011a6c
 80088c0:	08011aa0 	.word	0x08011aa0
 80088c4:	08011adc 	.word	0x08011adc
 80088c8:	08011b10 	.word	0x08011b10
 80088cc:	08011b28 	.word	0x08011b28
 80088d0:	08011b48 	.word	0x08011b48
 80088d4:	08011b68 	.word	0x08011b68
 80088d8:	08011b94 	.word	0x08011b94
      if ((p = tcp_pbuf_prealloc(PBUF_TRANSPORT, seglen + optlen, mss_local, &oversize, pcb, apiflags, queue == NULL)) == NULL) {
 80088dc:	9b06      	ldr	r3, [sp, #24]
 80088de:	fab3 f383 	clz	r3, r3
 80088e2:	095b      	lsrs	r3, r3, #5
 80088e4:	9302      	str	r3, [sp, #8]
 80088e6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80088e8:	9301      	str	r3, [sp, #4]
 80088ea:	f8cd 8000 	str.w	r8, [sp]
 80088ee:	f10d 033e 	add.w	r3, sp, #62	; 0x3e
 80088f2:	465a      	mov	r2, fp
 80088f4:	4629      	mov	r1, r5
 80088f6:	2036      	movs	r0, #54	; 0x36
 80088f8:	f7ff fce2 	bl	80082c0 <tcp_pbuf_prealloc>
 80088fc:	4607      	mov	r7, r0
 80088fe:	2800      	cmp	r0, #0
 8008900:	f000 8143 	beq.w	8008b8a <tcp_write+0x5b6>
      LWIP_ASSERT("tcp_write: check that first pbuf can hold the complete seglen",
 8008904:	8943      	ldrh	r3, [r0, #10]
 8008906:	42ab      	cmp	r3, r5
 8008908:	d306      	bcc.n	8008918 <tcp_write+0x344>
      TCP_DATA_COPY2((char *)p->payload + optlen, (const u8_t *)arg + pos, seglen, &chksum, &chksum_swapped);
 800890a:	462a      	mov	r2, r5
 800890c:	9b07      	ldr	r3, [sp, #28]
 800890e:	1919      	adds	r1, r3, r4
 8008910:	6878      	ldr	r0, [r7, #4]
 8008912:	f002 fd61 	bl	800b3d8 <memcpy>
 8008916:	e026      	b.n	8008966 <tcp_write+0x392>
      LWIP_ASSERT("tcp_write: check that first pbuf can hold the complete seglen",
 8008918:	4bae      	ldr	r3, [pc, #696]	; (8008bd4 <tcp_write+0x600>)
 800891a:	f240 2266 	movw	r2, #614	; 0x266
 800891e:	49ae      	ldr	r1, [pc, #696]	; (8008bd8 <tcp_write+0x604>)
 8008920:	48ae      	ldr	r0, [pc, #696]	; (8008bdc <tcp_write+0x608>)
 8008922:	f002 fd89 	bl	800b438 <iprintf>
 8008926:	e7f0      	b.n	800890a <tcp_write+0x336>
      LWIP_ASSERT("oversize == 0", oversize == 0);
 8008928:	4baa      	ldr	r3, [pc, #680]	; (8008bd4 <tcp_write+0x600>)
 800892a:	f240 2271 	movw	r2, #625	; 0x271
 800892e:	49ac      	ldr	r1, [pc, #688]	; (8008be0 <tcp_write+0x60c>)
 8008930:	48aa      	ldr	r0, [pc, #680]	; (8008bdc <tcp_write+0x608>)
 8008932:	f002 fd81 	bl	800b438 <iprintf>
      if ((p2 = pbuf_alloc(PBUF_TRANSPORT, seglen, PBUF_ROM)) == NULL) {
 8008936:	2201      	movs	r2, #1
 8008938:	4629      	mov	r1, r5
 800893a:	2036      	movs	r0, #54	; 0x36
 800893c:	f7fc fc9e 	bl	800527c <pbuf_alloc>
 8008940:	4681      	mov	r9, r0
 8008942:	2800      	cmp	r0, #0
 8008944:	f000 8124 	beq.w	8008b90 <tcp_write+0x5bc>
      ((struct pbuf_rom *)p2)->payload = (const u8_t *)arg + pos;
 8008948:	9b07      	ldr	r3, [sp, #28]
 800894a:	4423      	add	r3, r4
 800894c:	6043      	str	r3, [r0, #4]
      if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 800894e:	f44f 7220 	mov.w	r2, #640	; 0x280
 8008952:	2100      	movs	r1, #0
 8008954:	2036      	movs	r0, #54	; 0x36
 8008956:	f7fc fc91 	bl	800527c <pbuf_alloc>
 800895a:	4607      	mov	r7, r0
 800895c:	2800      	cmp	r0, #0
 800895e:	d032      	beq.n	80089c6 <tcp_write+0x3f2>
      pbuf_cat(p/*header*/, p2/*data*/);
 8008960:	4649      	mov	r1, r9
 8008962:	f7fc fd9f 	bl	80054a4 <pbuf_cat>
    queuelen += pbuf_clen(p);
 8008966:	4638      	mov	r0, r7
 8008968:	f7fc fd78 	bl	800545c <pbuf_clen>
 800896c:	4406      	add	r6, r0
 800896e:	b2b6      	uxth	r6, r6
    if (queuelen > LWIP_MIN(TCP_SND_QUEUELEN, TCP_SNDQUEUELEN_OVERFLOW)) {
 8008970:	2e09      	cmp	r6, #9
 8008972:	d82e      	bhi.n	80089d2 <tcp_write+0x3fe>
    if ((seg = tcp_create_segment(pcb, p, 0, pcb->snd_lbb + pos, optflags)) == NULL) {
 8008974:	f8d8 305c 	ldr.w	r3, [r8, #92]	; 0x5c
 8008978:	2200      	movs	r2, #0
 800897a:	9200      	str	r2, [sp, #0]
 800897c:	4423      	add	r3, r4
 800897e:	4639      	mov	r1, r7
 8008980:	4640      	mov	r0, r8
 8008982:	f7ff fcf9 	bl	8008378 <tcp_create_segment>
 8008986:	4607      	mov	r7, r0
 8008988:	2800      	cmp	r0, #0
 800898a:	f000 8104 	beq.w	8008b96 <tcp_write+0x5c2>
    if (queue == NULL) {
 800898e:	9b06      	ldr	r3, [sp, #24]
 8008990:	2b00      	cmp	r3, #0
 8008992:	d050      	beq.n	8008a36 <tcp_write+0x462>
      LWIP_ASSERT("prev_seg != NULL", prev_seg != NULL);
 8008994:	9b05      	ldr	r3, [sp, #20]
 8008996:	2b00      	cmp	r3, #0
 8008998:	d045      	beq.n	8008a26 <tcp_write+0x452>
      prev_seg->next = seg;
 800899a:	9b05      	ldr	r3, [sp, #20]
 800899c:	601f      	str	r7, [r3, #0]
    pos += seglen;
 800899e:	442c      	add	r4, r5
 80089a0:	b2a4      	uxth	r4, r4
  while (pos < len) {
 80089a2:	45a2      	cmp	sl, r4
 80089a4:	d949      	bls.n	8008a3a <tcp_write+0x466>
    if ((seg = tcp_create_segment(pcb, p, 0, pcb->snd_lbb + pos, optflags)) == NULL) {
 80089a6:	9705      	str	r7, [sp, #20]
    u16_t left = len - pos;
 80089a8:	ebaa 0504 	sub.w	r5, sl, r4
    u16_t seglen = LWIP_MIN(left, max_len);
 80089ac:	b2ad      	uxth	r5, r5
 80089ae:	455d      	cmp	r5, fp
 80089b0:	bf28      	it	cs
 80089b2:	465d      	movcs	r5, fp
 80089b4:	b2ad      	uxth	r5, r5
    if (apiflags & TCP_WRITE_FLAG_COPY) {
 80089b6:	9b08      	ldr	r3, [sp, #32]
 80089b8:	2b00      	cmp	r3, #0
 80089ba:	d18f      	bne.n	80088dc <tcp_write+0x308>
      LWIP_ASSERT("oversize == 0", oversize == 0);
 80089bc:	f8bd 303e 	ldrh.w	r3, [sp, #62]	; 0x3e
 80089c0:	2b00      	cmp	r3, #0
 80089c2:	d0b8      	beq.n	8008936 <tcp_write+0x362>
 80089c4:	e7b0      	b.n	8008928 <tcp_write+0x354>
        pbuf_free(p2);
 80089c6:	4648      	mov	r0, r9
 80089c8:	f8dd 9030 	ldr.w	r9, [sp, #48]	; 0x30
 80089cc:	f7fc fbec 	bl	80051a8 <pbuf_free>
        goto memerr;
 80089d0:	e004      	b.n	80089dc <tcp_write+0x408>
      pbuf_free(p);
 80089d2:	f8dd 9030 	ldr.w	r9, [sp, #48]	; 0x30
 80089d6:	4638      	mov	r0, r7
 80089d8:	f7fc fbe6 	bl	80051a8 <pbuf_free>
  tcp_set_flags(pcb, TF_NAGLEMEMERR);
 80089dc:	f8b8 301a 	ldrh.w	r3, [r8, #26]
 80089e0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80089e4:	f8a8 301a 	strh.w	r3, [r8, #26]
  if (concat_p != NULL) {
 80089e8:	f1b9 0f00 	cmp.w	r9, #0
 80089ec:	d002      	beq.n	80089f4 <tcp_write+0x420>
    pbuf_free(concat_p);
 80089ee:	4648      	mov	r0, r9
 80089f0:	f7fc fbda 	bl	80051a8 <pbuf_free>
  if (queue != NULL) {
 80089f4:	9b06      	ldr	r3, [sp, #24]
 80089f6:	b113      	cbz	r3, 80089fe <tcp_write+0x42a>
    tcp_segs_free(queue);
 80089f8:	4618      	mov	r0, r3
 80089fa:	f7fd f880 	bl	8005afe <tcp_segs_free>
  if (pcb->snd_queuelen != 0) {
 80089fe:	f8b8 3066 	ldrh.w	r3, [r8, #102]	; 0x66
 8008a02:	2b00      	cmp	r3, #0
 8008a04:	f000 80d8 	beq.w	8008bb8 <tcp_write+0x5e4>
    LWIP_ASSERT("tcp_write: valid queue length", pcb->unacked != NULL ||
 8008a08:	f8d8 3070 	ldr.w	r3, [r8, #112]	; 0x70
 8008a0c:	2b00      	cmp	r3, #0
 8008a0e:	f040 80d6 	bne.w	8008bbe <tcp_write+0x5ea>
 8008a12:	f8d8 306c 	ldr.w	r3, [r8, #108]	; 0x6c
 8008a16:	2b00      	cmp	r3, #0
 8008a18:	f000 80c0 	beq.w	8008b9c <tcp_write+0x5c8>
  return ERR_MEM;
 8008a1c:	f04f 30ff 	mov.w	r0, #4294967295
}
 8008a20:	b011      	add	sp, #68	; 0x44
 8008a22:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      LWIP_ASSERT("prev_seg != NULL", prev_seg != NULL);
 8008a26:	4b6b      	ldr	r3, [pc, #428]	; (8008bd4 <tcp_write+0x600>)
 8008a28:	f240 22ab 	movw	r2, #683	; 0x2ab
 8008a2c:	496d      	ldr	r1, [pc, #436]	; (8008be4 <tcp_write+0x610>)
 8008a2e:	486b      	ldr	r0, [pc, #428]	; (8008bdc <tcp_write+0x608>)
 8008a30:	f002 fd02 	bl	800b438 <iprintf>
 8008a34:	e7b1      	b.n	800899a <tcp_write+0x3c6>
    if ((seg = tcp_create_segment(pcb, p, 0, pcb->snd_lbb + pos, optflags)) == NULL) {
 8008a36:	9006      	str	r0, [sp, #24]
 8008a38:	e7b1      	b.n	800899e <tcp_write+0x3ca>
 8008a3a:	f8dd 9030 	ldr.w	r9, [sp, #48]	; 0x30
  if (oversize_used > 0) {
 8008a3e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008a40:	2b00      	cmp	r3, #0
 8008a42:	d052      	beq.n	8008aea <tcp_write+0x516>
 8008a44:	461c      	mov	r4, r3
 8008a46:	46cb      	mov	fp, r9
 8008a48:	f8dd 9018 	ldr.w	r9, [sp, #24]
 8008a4c:	e678      	b.n	8008740 <tcp_write+0x16c>
  while (pos < len) {
 8008a4e:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8008a50:	2300      	movs	r3, #0
 8008a52:	9306      	str	r3, [sp, #24]
 8008a54:	e7f3      	b.n	8008a3e <tcp_write+0x46a>
  if (oversize_used > 0) {
 8008a56:	461d      	mov	r5, r3
      p->tot_len += oversize_used;
 8008a58:	892b      	ldrh	r3, [r5, #8]
 8008a5a:	4423      	add	r3, r4
 8008a5c:	812b      	strh	r3, [r5, #8]
      if (p->next == NULL) {
 8008a5e:	682b      	ldr	r3, [r5, #0]
 8008a60:	2b00      	cmp	r3, #0
 8008a62:	d1f8      	bne.n	8008a56 <tcp_write+0x482>
        TCP_DATA_COPY((char *)p->payload + p->len, arg, oversize_used, last_unsent);
 8008a64:	896b      	ldrh	r3, [r5, #10]
 8008a66:	6868      	ldr	r0, [r5, #4]
 8008a68:	4622      	mov	r2, r4
 8008a6a:	9907      	ldr	r1, [sp, #28]
 8008a6c:	4418      	add	r0, r3
 8008a6e:	f002 fcb3 	bl	800b3d8 <memcpy>
        p->len += oversize_used;
 8008a72:	896b      	ldrh	r3, [r5, #10]
 8008a74:	4423      	add	r3, r4
 8008a76:	816b      	strh	r3, [r5, #10]
    for (p = last_unsent->p; p; p = p->next) {
 8008a78:	682b      	ldr	r3, [r5, #0]
 8008a7a:	2b00      	cmp	r3, #0
 8008a7c:	d1eb      	bne.n	8008a56 <tcp_write+0x482>
    last_unsent->len += oversize_used;
 8008a7e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008a80:	8913      	ldrh	r3, [r2, #8]
 8008a82:	441c      	add	r4, r3
 8008a84:	8114      	strh	r4, [r2, #8]
  pcb->unsent_oversize = oversize;
 8008a86:	f8bd 303e 	ldrh.w	r3, [sp, #62]	; 0x3e
 8008a8a:	f8a8 3068 	strh.w	r3, [r8, #104]	; 0x68
  if (concat_p != NULL) {
 8008a8e:	f1bb 0f00 	cmp.w	fp, #0
 8008a92:	f000 80af 	beq.w	8008bf4 <tcp_write+0x620>
    pbuf_cat(last_unsent->p, concat_p);
 8008a96:	4659      	mov	r1, fp
 8008a98:	9c09      	ldr	r4, [sp, #36]	; 0x24
 8008a9a:	6860      	ldr	r0, [r4, #4]
 8008a9c:	f7fc fd02 	bl	80054a4 <pbuf_cat>
    last_unsent->len += concat_p->tot_len;
 8008aa0:	8923      	ldrh	r3, [r4, #8]
 8008aa2:	f8bb 2008 	ldrh.w	r2, [fp, #8]
 8008aa6:	4413      	add	r3, r2
 8008aa8:	8123      	strh	r3, [r4, #8]
    last_unsent->next = queue;
 8008aaa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008aac:	f8c3 9000 	str.w	r9, [r3]
  pcb->snd_lbb += len;
 8008ab0:	f8d8 305c 	ldr.w	r3, [r8, #92]	; 0x5c
 8008ab4:	4453      	add	r3, sl
 8008ab6:	f8c8 305c 	str.w	r3, [r8, #92]	; 0x5c
  pcb->snd_buf -= len;
 8008aba:	f8b8 3064 	ldrh.w	r3, [r8, #100]	; 0x64
 8008abe:	eba3 0a0a 	sub.w	sl, r3, sl
 8008ac2:	f8a8 a064 	strh.w	sl, [r8, #100]	; 0x64
  pcb->snd_queuelen = queuelen;
 8008ac6:	f8a8 6066 	strh.w	r6, [r8, #102]	; 0x66
  if (pcb->snd_queuelen != 0) {
 8008aca:	b11e      	cbz	r6, 8008ad4 <tcp_write+0x500>
    LWIP_ASSERT("tcp_write: valid queue length",
 8008acc:	f8d8 3070 	ldr.w	r3, [r8, #112]	; 0x70
 8008ad0:	2b00      	cmp	r3, #0
 8008ad2:	d045      	beq.n	8008b60 <tcp_write+0x58c>
  if (seg != NULL && seg->tcphdr != NULL && ((apiflags & TCP_WRITE_FLAG_MORE) == 0)) {
 8008ad4:	2f00      	cmp	r7, #0
 8008ad6:	d06b      	beq.n	8008bb0 <tcp_write+0x5dc>
 8008ad8:	68fb      	ldr	r3, [r7, #12]
 8008ada:	2b00      	cmp	r3, #0
 8008adc:	d06a      	beq.n	8008bb4 <tcp_write+0x5e0>
 8008ade:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008ae0:	f012 0f02 	tst.w	r2, #2
 8008ae4:	d048      	beq.n	8008b78 <tcp_write+0x5a4>
  return ERR_OK;
 8008ae6:	2000      	movs	r0, #0
 8008ae8:	e79a      	b.n	8008a20 <tcp_write+0x44c>
  pcb->unsent_oversize = oversize;
 8008aea:	f8bd 303e 	ldrh.w	r3, [sp, #62]	; 0x3e
 8008aee:	f8a8 3068 	strh.w	r3, [r8, #104]	; 0x68
  if (concat_p != NULL) {
 8008af2:	f1b9 0f00 	cmp.w	r9, #0
 8008af6:	d010      	beq.n	8008b1a <tcp_write+0x546>
    LWIP_ASSERT("tcp_write: cannot concatenate when pcb->unsent is empty",
 8008af8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008afa:	b11b      	cbz	r3, 8008b04 <tcp_write+0x530>
 8008afc:	46cb      	mov	fp, r9
 8008afe:	f8dd 9018 	ldr.w	r9, [sp, #24]
 8008b02:	e7c8      	b.n	8008a96 <tcp_write+0x4c2>
 8008b04:	4b33      	ldr	r3, [pc, #204]	; (8008bd4 <tcp_write+0x600>)
 8008b06:	f44f 7238 	mov.w	r2, #736	; 0x2e0
 8008b0a:	4937      	ldr	r1, [pc, #220]	; (8008be8 <tcp_write+0x614>)
 8008b0c:	4833      	ldr	r0, [pc, #204]	; (8008bdc <tcp_write+0x608>)
 8008b0e:	f002 fc93 	bl	800b438 <iprintf>
 8008b12:	46cb      	mov	fp, r9
 8008b14:	f8dd 9018 	ldr.w	r9, [sp, #24]
 8008b18:	e7bd      	b.n	8008a96 <tcp_write+0x4c2>
 8008b1a:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8008b1c:	f8dd 9018 	ldr.w	r9, [sp, #24]
 8008b20:	e075      	b.n	8008c0e <tcp_write+0x63a>
 8008b22:	940b      	str	r4, [sp, #44]	; 0x2c
    LWIP_ASSERT("tcp_write: extension of reference requires reference",
 8008b24:	4b2b      	ldr	r3, [pc, #172]	; (8008bd4 <tcp_write+0x600>)
 8008b26:	f240 22e6 	movw	r2, #742	; 0x2e6
 8008b2a:	4930      	ldr	r1, [pc, #192]	; (8008bec <tcp_write+0x618>)
 8008b2c:	482b      	ldr	r0, [pc, #172]	; (8008bdc <tcp_write+0x608>)
 8008b2e:	f002 fc83 	bl	800b438 <iprintf>
 8008b32:	e076      	b.n	8008c22 <tcp_write+0x64e>
    for (p = last_unsent->p; p->next != NULL; p = p->next) {
 8008b34:	461a      	mov	r2, r3
      p->tot_len += extendlen;
 8008b36:	890b      	ldrh	r3, [r1, #8]
 8008b38:	4403      	add	r3, r0
 8008b3a:	810b      	strh	r3, [r1, #8]
    for (p = last_unsent->p; p->next != NULL; p = p->next) {
 8008b3c:	6813      	ldr	r3, [r2, #0]
 8008b3e:	4611      	mov	r1, r2
 8008b40:	2b00      	cmp	r3, #0
 8008b42:	d1f7      	bne.n	8008b34 <tcp_write+0x560>
    p->tot_len += extendlen;
 8008b44:	8913      	ldrh	r3, [r2, #8]
 8008b46:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8008b48:	440b      	add	r3, r1
 8008b4a:	8113      	strh	r3, [r2, #8]
    p->len += extendlen;
 8008b4c:	8953      	ldrh	r3, [r2, #10]
 8008b4e:	440b      	add	r3, r1
 8008b50:	8153      	strh	r3, [r2, #10]
    last_unsent->len += extendlen;
 8008b52:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008b54:	8913      	ldrh	r3, [r2, #8]
 8008b56:	440b      	add	r3, r1
 8008b58:	8113      	strh	r3, [r2, #8]
 8008b5a:	e7a6      	b.n	8008aaa <tcp_write+0x4d6>
    for (p = last_unsent->p; p->next != NULL; p = p->next) {
 8008b5c:	460a      	mov	r2, r1
 8008b5e:	e7f1      	b.n	8008b44 <tcp_write+0x570>
    LWIP_ASSERT("tcp_write: valid queue length",
 8008b60:	f8d8 306c 	ldr.w	r3, [r8, #108]	; 0x6c
 8008b64:	2b00      	cmp	r3, #0
 8008b66:	d1b5      	bne.n	8008ad4 <tcp_write+0x500>
 8008b68:	4b1a      	ldr	r3, [pc, #104]	; (8008bd4 <tcp_write+0x600>)
 8008b6a:	f240 3212 	movw	r2, #786	; 0x312
 8008b6e:	4920      	ldr	r1, [pc, #128]	; (8008bf0 <tcp_write+0x61c>)
 8008b70:	481a      	ldr	r0, [pc, #104]	; (8008bdc <tcp_write+0x608>)
 8008b72:	f002 fc61 	bl	800b438 <iprintf>
 8008b76:	e7ad      	b.n	8008ad4 <tcp_write+0x500>
    TCPH_SET_FLAG(seg->tcphdr, TCP_PSH);
 8008b78:	899c      	ldrh	r4, [r3, #12]
 8008b7a:	2008      	movs	r0, #8
 8008b7c:	f7fb fcf0 	bl	8004560 <lwip_htons>
 8008b80:	68fb      	ldr	r3, [r7, #12]
 8008b82:	4304      	orrs	r4, r0
 8008b84:	819c      	strh	r4, [r3, #12]
  return ERR_OK;
 8008b86:	2000      	movs	r0, #0
 8008b88:	e74a      	b.n	8008a20 <tcp_write+0x44c>
 8008b8a:	f8dd 9030 	ldr.w	r9, [sp, #48]	; 0x30
 8008b8e:	e725      	b.n	80089dc <tcp_write+0x408>
 8008b90:	f8dd 9030 	ldr.w	r9, [sp, #48]	; 0x30
 8008b94:	e722      	b.n	80089dc <tcp_write+0x408>
 8008b96:	f8dd 9030 	ldr.w	r9, [sp, #48]	; 0x30
 8008b9a:	e71f      	b.n	80089dc <tcp_write+0x408>
    LWIP_ASSERT("tcp_write: valid queue length", pcb->unacked != NULL ||
 8008b9c:	4b0d      	ldr	r3, [pc, #52]	; (8008bd4 <tcp_write+0x600>)
 8008b9e:	f240 3227 	movw	r2, #807	; 0x327
 8008ba2:	4913      	ldr	r1, [pc, #76]	; (8008bf0 <tcp_write+0x61c>)
 8008ba4:	480d      	ldr	r0, [pc, #52]	; (8008bdc <tcp_write+0x608>)
 8008ba6:	f002 fc47 	bl	800b438 <iprintf>
  return ERR_MEM;
 8008baa:	f04f 30ff 	mov.w	r0, #4294967295
 8008bae:	e737      	b.n	8008a20 <tcp_write+0x44c>
  return ERR_OK;
 8008bb0:	2000      	movs	r0, #0
 8008bb2:	e735      	b.n	8008a20 <tcp_write+0x44c>
 8008bb4:	2000      	movs	r0, #0
 8008bb6:	e733      	b.n	8008a20 <tcp_write+0x44c>
  return ERR_MEM;
 8008bb8:	f04f 30ff 	mov.w	r0, #4294967295
 8008bbc:	e730      	b.n	8008a20 <tcp_write+0x44c>
 8008bbe:	f04f 30ff 	mov.w	r0, #4294967295
 8008bc2:	e72d      	b.n	8008a20 <tcp_write+0x44c>
  tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8008bc4:	f8b8 301a 	ldrh.w	r3, [r8, #26]
 8008bc8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008bcc:	f8a8 301a 	strh.w	r3, [r8, #26]
  if (queue != NULL) {
 8008bd0:	e715      	b.n	80089fe <tcp_write+0x42a>
 8008bd2:	bf00      	nop
 8008bd4:	08011884 	.word	0x08011884
 8008bd8:	08011bc4 	.word	0x08011bc4
 8008bdc:	0800cb24 	.word	0x0800cb24
 8008be0:	08011c04 	.word	0x08011c04
 8008be4:	08011c14 	.word	0x08011c14
 8008be8:	08011c28 	.word	0x08011c28
 8008bec:	08011c60 	.word	0x08011c60
 8008bf0:	08011c98 	.word	0x08011c98
  } else if (extendlen > 0) {
 8008bf4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008bf6:	b983      	cbnz	r3, 8008c1a <tcp_write+0x646>
  if (last_unsent == NULL) {
 8008bf8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008bfa:	2b00      	cmp	r3, #0
 8008bfc:	f47f af55 	bne.w	8008aaa <tcp_write+0x4d6>
    pcb->unsent = queue;
 8008c00:	f8c8 906c 	str.w	r9, [r8, #108]	; 0x6c
 8008c04:	e754      	b.n	8008ab0 <tcp_write+0x4dc>
  pcb->unsent_oversize = oversize;
 8008c06:	f8bd 303e 	ldrh.w	r3, [sp, #62]	; 0x3e
 8008c0a:	f8a8 3068 	strh.w	r3, [r8, #104]	; 0x68
  } else if (extendlen > 0) {
 8008c0e:	2c00      	cmp	r4, #0
 8008c10:	d0f2      	beq.n	8008bf8 <tcp_write+0x624>
    LWIP_ASSERT("tcp_write: extension of reference requires reference",
 8008c12:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008c14:	2b00      	cmp	r3, #0
 8008c16:	d084      	beq.n	8008b22 <tcp_write+0x54e>
 8008c18:	940b      	str	r4, [sp, #44]	; 0x2c
 8008c1a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008c1c:	685b      	ldr	r3, [r3, #4]
 8008c1e:	2b00      	cmp	r3, #0
 8008c20:	d080      	beq.n	8008b24 <tcp_write+0x550>
    for (p = last_unsent->p; p->next != NULL; p = p->next) {
 8008c22:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008c24:	6859      	ldr	r1, [r3, #4]
 8008c26:	680a      	ldr	r2, [r1, #0]
 8008c28:	2a00      	cmp	r2, #0
 8008c2a:	d097      	beq.n	8008b5c <tcp_write+0x588>
 8008c2c:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8008c2e:	e782      	b.n	8008b36 <tcp_write+0x562>

08008c30 <tcp_split_unsent_seg>:
{
 8008c30:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008c34:	b083      	sub	sp, #12
 8008c36:	460c      	mov	r4, r1
  LWIP_ASSERT("tcp_split_unsent_seg: invalid pcb", pcb != NULL);
 8008c38:	4607      	mov	r7, r0
 8008c3a:	2800      	cmp	r0, #0
 8008c3c:	d037      	beq.n	8008cae <tcp_split_unsent_seg+0x7e>
  useg = pcb->unsent;
 8008c3e:	6efd      	ldr	r5, [r7, #108]	; 0x6c
  if (useg == NULL) {
 8008c40:	2d00      	cmp	r5, #0
 8008c42:	f000 80b7 	beq.w	8008db4 <tcp_split_unsent_seg+0x184>
  if (split == 0) {
 8008c46:	2c00      	cmp	r4, #0
 8008c48:	d039      	beq.n	8008cbe <tcp_split_unsent_seg+0x8e>
  if (useg->len <= split) {
 8008c4a:	892b      	ldrh	r3, [r5, #8]
 8008c4c:	42a3      	cmp	r3, r4
 8008c4e:	f240 80b4 	bls.w	8008dba <tcp_split_unsent_seg+0x18a>
  LWIP_ASSERT("split <= mss", split <= pcb->mss);
 8008c52:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 8008c54:	42a3      	cmp	r3, r4
 8008c56:	d33c      	bcc.n	8008cd2 <tcp_split_unsent_seg+0xa2>
  optflags = useg->flags;
 8008c58:	f895 900a 	ldrb.w	r9, [r5, #10]
  optlen = LWIP_TCP_OPT_LENGTH(optflags);
 8008c5c:	ea4f 0b89 	mov.w	fp, r9, lsl #2
 8008c60:	f00b 0b04 	and.w	fp, fp, #4
  remainder = useg->len - split;
 8008c64:	f8b5 a008 	ldrh.w	sl, [r5, #8]
 8008c68:	ebaa 0604 	sub.w	r6, sl, r4
 8008c6c:	b2b6      	uxth	r6, r6
  p = pbuf_alloc(PBUF_TRANSPORT, remainder + optlen, PBUF_RAM);
 8008c6e:	eb06 010b 	add.w	r1, r6, fp
 8008c72:	f44f 7220 	mov.w	r2, #640	; 0x280
 8008c76:	b289      	uxth	r1, r1
 8008c78:	2036      	movs	r0, #54	; 0x36
 8008c7a:	f7fc faff 	bl	800527c <pbuf_alloc>
  if (p == NULL) {
 8008c7e:	4680      	mov	r8, r0
 8008c80:	2800      	cmp	r0, #0
 8008c82:	f000 809e 	beq.w	8008dc2 <tcp_split_unsent_seg+0x192>
  offset = useg->p->tot_len - useg->len + split;
 8008c86:	6868      	ldr	r0, [r5, #4]
 8008c88:	8903      	ldrh	r3, [r0, #8]
 8008c8a:	892a      	ldrh	r2, [r5, #8]
 8008c8c:	1a9b      	subs	r3, r3, r2
 8008c8e:	4423      	add	r3, r4
  if (pbuf_copy_partial(useg->p, (u8_t *)p->payload + optlen, remainder, offset ) != remainder) {
 8008c90:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8008c94:	b29b      	uxth	r3, r3
 8008c96:	4632      	mov	r2, r6
 8008c98:	4459      	add	r1, fp
 8008c9a:	f7fc fce3 	bl	8005664 <pbuf_copy_partial>
 8008c9e:	42b0      	cmp	r0, r6
 8008ca0:	d029      	beq.n	8008cf6 <tcp_split_unsent_seg+0xc6>
    pbuf_free(p);
 8008ca2:	4640      	mov	r0, r8
 8008ca4:	f7fc fa80 	bl	80051a8 <pbuf_free>
  return ERR_MEM;
 8008ca8:	f04f 30ff 	mov.w	r0, #4294967295
 8008cac:	e086      	b.n	8008dbc <tcp_split_unsent_seg+0x18c>
  LWIP_ASSERT("tcp_split_unsent_seg: invalid pcb", pcb != NULL);
 8008cae:	4b46      	ldr	r3, [pc, #280]	; (8008dc8 <tcp_split_unsent_seg+0x198>)
 8008cb0:	f240 324b 	movw	r2, #843	; 0x34b
 8008cb4:	4945      	ldr	r1, [pc, #276]	; (8008dcc <tcp_split_unsent_seg+0x19c>)
 8008cb6:	4846      	ldr	r0, [pc, #280]	; (8008dd0 <tcp_split_unsent_seg+0x1a0>)
 8008cb8:	f002 fbbe 	bl	800b438 <iprintf>
 8008cbc:	e7bf      	b.n	8008c3e <tcp_split_unsent_seg+0xe>
    LWIP_ASSERT("Can't split segment into length 0", 0);
 8008cbe:	4b42      	ldr	r3, [pc, #264]	; (8008dc8 <tcp_split_unsent_seg+0x198>)
 8008cc0:	f240 3253 	movw	r2, #851	; 0x353
 8008cc4:	4943      	ldr	r1, [pc, #268]	; (8008dd4 <tcp_split_unsent_seg+0x1a4>)
 8008cc6:	4842      	ldr	r0, [pc, #264]	; (8008dd0 <tcp_split_unsent_seg+0x1a0>)
 8008cc8:	f002 fbb6 	bl	800b438 <iprintf>
    return ERR_VAL;
 8008ccc:	f06f 0005 	mvn.w	r0, #5
 8008cd0:	e074      	b.n	8008dbc <tcp_split_unsent_seg+0x18c>
  LWIP_ASSERT("split <= mss", split <= pcb->mss);
 8008cd2:	4b3d      	ldr	r3, [pc, #244]	; (8008dc8 <tcp_split_unsent_seg+0x198>)
 8008cd4:	f240 325b 	movw	r2, #859	; 0x35b
 8008cd8:	493f      	ldr	r1, [pc, #252]	; (8008dd8 <tcp_split_unsent_seg+0x1a8>)
 8008cda:	483d      	ldr	r0, [pc, #244]	; (8008dd0 <tcp_split_unsent_seg+0x1a0>)
 8008cdc:	f002 fbac 	bl	800b438 <iprintf>
  LWIP_ASSERT("useg->len > 0", useg->len > 0);
 8008ce0:	892b      	ldrh	r3, [r5, #8]
 8008ce2:	2b00      	cmp	r3, #0
 8008ce4:	d1b8      	bne.n	8008c58 <tcp_split_unsent_seg+0x28>
 8008ce6:	4b38      	ldr	r3, [pc, #224]	; (8008dc8 <tcp_split_unsent_seg+0x198>)
 8008ce8:	f44f 7257 	mov.w	r2, #860	; 0x35c
 8008cec:	493b      	ldr	r1, [pc, #236]	; (8008ddc <tcp_split_unsent_seg+0x1ac>)
 8008cee:	4838      	ldr	r0, [pc, #224]	; (8008dd0 <tcp_split_unsent_seg+0x1a0>)
 8008cf0:	f002 fba2 	bl	800b438 <iprintf>
 8008cf4:	e7b0      	b.n	8008c58 <tcp_split_unsent_seg+0x28>
  split_flags = TCPH_FLAGS(useg->tcphdr);
 8008cf6:	68eb      	ldr	r3, [r5, #12]
 8008cf8:	8998      	ldrh	r0, [r3, #12]
 8008cfa:	f7fb fc31 	bl	8004560 <lwip_htons>
 8008cfe:	b2c6      	uxtb	r6, r0
  if (split_flags & TCP_PSH) {
 8008d00:	f010 0b08 	ands.w	fp, r0, #8
  split_flags = TCPH_FLAGS(useg->tcphdr);
 8008d04:	bf0e      	itee	eq
 8008d06:	f006 063f 	andeq.w	r6, r6, #63	; 0x3f
    split_flags &= ~TCP_PSH;
 8008d0a:	f006 0637 	andne.w	r6, r6, #55	; 0x37
    remainder_flags |= TCP_PSH;
 8008d0e:	f04f 0b08 	movne.w	fp, #8
  if (split_flags & TCP_FIN) {
 8008d12:	f016 0f01 	tst.w	r6, #1
    split_flags &= ~TCP_FIN;
 8008d16:	bf1c      	itt	ne
 8008d18:	f006 06fe 	andne.w	r6, r6, #254	; 0xfe
    remainder_flags |= TCP_FIN;
 8008d1c:	f04b 0b01 	orrne.w	fp, fp, #1
  seg = tcp_create_segment(pcb, p, remainder_flags, lwip_ntohl(useg->tcphdr->seqno) + split, optflags);
 8008d20:	68eb      	ldr	r3, [r5, #12]
 8008d22:	6858      	ldr	r0, [r3, #4]
 8008d24:	f7fb fc21 	bl	800456a <lwip_htonl>
 8008d28:	f8cd 9000 	str.w	r9, [sp]
 8008d2c:	1823      	adds	r3, r4, r0
 8008d2e:	465a      	mov	r2, fp
 8008d30:	4641      	mov	r1, r8
 8008d32:	4638      	mov	r0, r7
 8008d34:	f7ff fb20 	bl	8008378 <tcp_create_segment>
  if (seg == NULL) {
 8008d38:	4681      	mov	r9, r0
 8008d3a:	2800      	cmp	r0, #0
 8008d3c:	d0b1      	beq.n	8008ca2 <tcp_split_unsent_seg+0x72>
  pcb->snd_queuelen -= pbuf_clen(useg->p);
 8008d3e:	6868      	ldr	r0, [r5, #4]
 8008d40:	f7fc fb8c 	bl	800545c <pbuf_clen>
 8008d44:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 8008d48:	1a1b      	subs	r3, r3, r0
 8008d4a:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
  pbuf_realloc(useg->p, useg->p->tot_len - remainder);
 8008d4e:	6868      	ldr	r0, [r5, #4]
 8008d50:	eba4 040a 	sub.w	r4, r4, sl
 8008d54:	b2a4      	uxth	r4, r4
 8008d56:	8901      	ldrh	r1, [r0, #8]
 8008d58:	4421      	add	r1, r4
 8008d5a:	b289      	uxth	r1, r1
 8008d5c:	f7fc fb1e 	bl	800539c <pbuf_realloc>
  useg->len -= remainder;
 8008d60:	892b      	ldrh	r3, [r5, #8]
 8008d62:	441c      	add	r4, r3
 8008d64:	812c      	strh	r4, [r5, #8]
  TCPH_SET_FLAG(useg->tcphdr, split_flags);
 8008d66:	68eb      	ldr	r3, [r5, #12]
 8008d68:	899c      	ldrh	r4, [r3, #12]
 8008d6a:	4630      	mov	r0, r6
 8008d6c:	f7fb fbf8 	bl	8004560 <lwip_htons>
 8008d70:	68eb      	ldr	r3, [r5, #12]
 8008d72:	4304      	orrs	r4, r0
 8008d74:	819c      	strh	r4, [r3, #12]
  pcb->snd_queuelen += pbuf_clen(useg->p);
 8008d76:	6868      	ldr	r0, [r5, #4]
 8008d78:	f7fc fb70 	bl	800545c <pbuf_clen>
 8008d7c:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 8008d80:	4418      	add	r0, r3
 8008d82:	f8a7 0066 	strh.w	r0, [r7, #102]	; 0x66
  pcb->snd_queuelen += pbuf_clen(seg->p);
 8008d86:	f8d9 0004 	ldr.w	r0, [r9, #4]
 8008d8a:	f7fc fb67 	bl	800545c <pbuf_clen>
 8008d8e:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 8008d92:	4418      	add	r0, r3
 8008d94:	f8a7 0066 	strh.w	r0, [r7, #102]	; 0x66
  seg->next = useg->next;
 8008d98:	682b      	ldr	r3, [r5, #0]
 8008d9a:	f8c9 3000 	str.w	r3, [r9]
  useg->next = seg;
 8008d9e:	f8c5 9000 	str.w	r9, [r5]
  if (seg->next == NULL) {
 8008da2:	f8d9 3000 	ldr.w	r3, [r9]
 8008da6:	b10b      	cbz	r3, 8008dac <tcp_split_unsent_seg+0x17c>
  return ERR_OK;
 8008da8:	2000      	movs	r0, #0
 8008daa:	e007      	b.n	8008dbc <tcp_split_unsent_seg+0x18c>
    pcb->unsent_oversize = 0;
 8008dac:	2000      	movs	r0, #0
 8008dae:	f8a7 0068 	strh.w	r0, [r7, #104]	; 0x68
 8008db2:	e003      	b.n	8008dbc <tcp_split_unsent_seg+0x18c>
    return ERR_MEM;
 8008db4:	f04f 30ff 	mov.w	r0, #4294967295
 8008db8:	e000      	b.n	8008dbc <tcp_split_unsent_seg+0x18c>
    return ERR_OK;
 8008dba:	2000      	movs	r0, #0
}
 8008dbc:	b003      	add	sp, #12
 8008dbe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  return ERR_MEM;
 8008dc2:	f04f 30ff 	mov.w	r0, #4294967295
 8008dc6:	e7f9      	b.n	8008dbc <tcp_split_unsent_seg+0x18c>
 8008dc8:	08011884 	.word	0x08011884
 8008dcc:	08011cb8 	.word	0x08011cb8
 8008dd0:	0800cb24 	.word	0x0800cb24
 8008dd4:	08011cdc 	.word	0x08011cdc
 8008dd8:	08011d00 	.word	0x08011d00
 8008ddc:	08011d10 	.word	0x08011d10

08008de0 <tcp_enqueue_flags>:
{
 8008de0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8008de4:	b083      	sub	sp, #12
 8008de6:	4604      	mov	r4, r0
 8008de8:	460d      	mov	r5, r1
  LWIP_ASSERT("tcp_enqueue_flags: need either TCP_SYN or TCP_FIN in flags (programmer violates API)",
 8008dea:	f011 0703 	ands.w	r7, r1, #3
 8008dee:	d048      	beq.n	8008e82 <tcp_enqueue_flags+0xa2>
  LWIP_ASSERT("tcp_enqueue_flags: invalid pcb", pcb != NULL);
 8008df0:	2c00      	cmp	r4, #0
 8008df2:	d04e      	beq.n	8008e92 <tcp_enqueue_flags+0xb2>
  if (flags & TCP_SYN) {
 8008df4:	f3c5 0640 	ubfx	r6, r5, #1, #1
  if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 8008df8:	ea4f 0886 	mov.w	r8, r6, lsl #2
 8008dfc:	f44f 7220 	mov.w	r2, #640	; 0x280
 8008e00:	4641      	mov	r1, r8
 8008e02:	2036      	movs	r0, #54	; 0x36
 8008e04:	f7fc fa3a 	bl	800527c <pbuf_alloc>
 8008e08:	4681      	mov	r9, r0
 8008e0a:	2800      	cmp	r0, #0
 8008e0c:	d049      	beq.n	8008ea2 <tcp_enqueue_flags+0xc2>
  LWIP_ASSERT("tcp_enqueue_flags: check that first pbuf can hold optlen",
 8008e0e:	8943      	ldrh	r3, [r0, #10]
 8008e10:	4543      	cmp	r3, r8
 8008e12:	d34d      	bcc.n	8008eb0 <tcp_enqueue_flags+0xd0>
  if ((seg = tcp_create_segment(pcb, p, flags, pcb->snd_lbb, optflags)) == NULL) {
 8008e14:	9600      	str	r6, [sp, #0]
 8008e16:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8008e18:	462a      	mov	r2, r5
 8008e1a:	4649      	mov	r1, r9
 8008e1c:	4620      	mov	r0, r4
 8008e1e:	f7ff faab 	bl	8008378 <tcp_create_segment>
 8008e22:	4606      	mov	r6, r0
 8008e24:	2800      	cmp	r0, #0
 8008e26:	d04b      	beq.n	8008ec0 <tcp_enqueue_flags+0xe0>
  LWIP_ASSERT("seg->tcphdr not aligned", ((mem_ptr_t)seg->tcphdr % LWIP_MIN(MEM_ALIGNMENT, 4)) == 0);
 8008e28:	68c3      	ldr	r3, [r0, #12]
 8008e2a:	f013 0f03 	tst.w	r3, #3
 8008e2e:	d14e      	bne.n	8008ece <tcp_enqueue_flags+0xee>
  LWIP_ASSERT("tcp_enqueue_flags: invalid segment length", seg->len == 0);
 8008e30:	8933      	ldrh	r3, [r6, #8]
 8008e32:	2b00      	cmp	r3, #0
 8008e34:	d153      	bne.n	8008ede <tcp_enqueue_flags+0xfe>
  if (pcb->unsent == NULL) {
 8008e36:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 8008e38:	2b00      	cmp	r3, #0
 8008e3a:	d058      	beq.n	8008eee <tcp_enqueue_flags+0x10e>
    for (useg = pcb->unsent; useg->next != NULL; useg = useg->next);
 8008e3c:	461a      	mov	r2, r3
 8008e3e:	681b      	ldr	r3, [r3, #0]
 8008e40:	2b00      	cmp	r3, #0
 8008e42:	d1fb      	bne.n	8008e3c <tcp_enqueue_flags+0x5c>
    useg->next = seg;
 8008e44:	6016      	str	r6, [r2, #0]
  pcb->unsent_oversize = 0;
 8008e46:	2300      	movs	r3, #0
 8008e48:	f8a4 3068 	strh.w	r3, [r4, #104]	; 0x68
  if ((flags & TCP_SYN) || (flags & TCP_FIN)) {
 8008e4c:	b117      	cbz	r7, 8008e54 <tcp_enqueue_flags+0x74>
    pcb->snd_lbb++;
 8008e4e:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8008e50:	3301      	adds	r3, #1
 8008e52:	65e3      	str	r3, [r4, #92]	; 0x5c
  if (flags & TCP_FIN) {
 8008e54:	f015 0f01 	tst.w	r5, #1
 8008e58:	d003      	beq.n	8008e62 <tcp_enqueue_flags+0x82>
    tcp_set_flags(pcb, TF_FIN);
 8008e5a:	8b63      	ldrh	r3, [r4, #26]
 8008e5c:	f043 0320 	orr.w	r3, r3, #32
 8008e60:	8363      	strh	r3, [r4, #26]
  pcb->snd_queuelen += pbuf_clen(seg->p);
 8008e62:	6870      	ldr	r0, [r6, #4]
 8008e64:	f7fc fafa 	bl	800545c <pbuf_clen>
 8008e68:	f8b4 3066 	ldrh.w	r3, [r4, #102]	; 0x66
 8008e6c:	4418      	add	r0, r3
 8008e6e:	b280      	uxth	r0, r0
 8008e70:	f8a4 0066 	strh.w	r0, [r4, #102]	; 0x66
  if (pcb->snd_queuelen != 0) {
 8008e74:	2800      	cmp	r0, #0
 8008e76:	d049      	beq.n	8008f0c <tcp_enqueue_flags+0x12c>
    LWIP_ASSERT("tcp_enqueue_flags: invalid queue length",
 8008e78:	6f23      	ldr	r3, [r4, #112]	; 0x70
 8008e7a:	2b00      	cmp	r3, #0
 8008e7c:	d039      	beq.n	8008ef2 <tcp_enqueue_flags+0x112>
  return ERR_OK;
 8008e7e:	2000      	movs	r0, #0
 8008e80:	e045      	b.n	8008f0e <tcp_enqueue_flags+0x12e>
  LWIP_ASSERT("tcp_enqueue_flags: need either TCP_SYN or TCP_FIN in flags (programmer violates API)",
 8008e82:	4b24      	ldr	r3, [pc, #144]	; (8008f14 <tcp_enqueue_flags+0x134>)
 8008e84:	f240 4211 	movw	r2, #1041	; 0x411
 8008e88:	4923      	ldr	r1, [pc, #140]	; (8008f18 <tcp_enqueue_flags+0x138>)
 8008e8a:	4824      	ldr	r0, [pc, #144]	; (8008f1c <tcp_enqueue_flags+0x13c>)
 8008e8c:	f002 fad4 	bl	800b438 <iprintf>
 8008e90:	e7ae      	b.n	8008df0 <tcp_enqueue_flags+0x10>
  LWIP_ASSERT("tcp_enqueue_flags: invalid pcb", pcb != NULL);
 8008e92:	4b20      	ldr	r3, [pc, #128]	; (8008f14 <tcp_enqueue_flags+0x134>)
 8008e94:	f240 4213 	movw	r2, #1043	; 0x413
 8008e98:	4921      	ldr	r1, [pc, #132]	; (8008f20 <tcp_enqueue_flags+0x140>)
 8008e9a:	4820      	ldr	r0, [pc, #128]	; (8008f1c <tcp_enqueue_flags+0x13c>)
 8008e9c:	f002 facc 	bl	800b438 <iprintf>
 8008ea0:	e7a8      	b.n	8008df4 <tcp_enqueue_flags+0x14>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8008ea2:	8b63      	ldrh	r3, [r4, #26]
 8008ea4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008ea8:	8363      	strh	r3, [r4, #26]
    return ERR_MEM;
 8008eaa:	f04f 30ff 	mov.w	r0, #4294967295
 8008eae:	e02e      	b.n	8008f0e <tcp_enqueue_flags+0x12e>
  LWIP_ASSERT("tcp_enqueue_flags: check that first pbuf can hold optlen",
 8008eb0:	4b18      	ldr	r3, [pc, #96]	; (8008f14 <tcp_enqueue_flags+0x134>)
 8008eb2:	f240 4239 	movw	r2, #1081	; 0x439
 8008eb6:	491b      	ldr	r1, [pc, #108]	; (8008f24 <tcp_enqueue_flags+0x144>)
 8008eb8:	4818      	ldr	r0, [pc, #96]	; (8008f1c <tcp_enqueue_flags+0x13c>)
 8008eba:	f002 fabd 	bl	800b438 <iprintf>
 8008ebe:	e7a9      	b.n	8008e14 <tcp_enqueue_flags+0x34>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8008ec0:	8b63      	ldrh	r3, [r4, #26]
 8008ec2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008ec6:	8363      	strh	r3, [r4, #26]
    return ERR_MEM;
 8008ec8:	f04f 30ff 	mov.w	r0, #4294967295
 8008ecc:	e01f      	b.n	8008f0e <tcp_enqueue_flags+0x12e>
  LWIP_ASSERT("seg->tcphdr not aligned", ((mem_ptr_t)seg->tcphdr % LWIP_MIN(MEM_ALIGNMENT, 4)) == 0);
 8008ece:	4b11      	ldr	r3, [pc, #68]	; (8008f14 <tcp_enqueue_flags+0x134>)
 8008ed0:	f240 4242 	movw	r2, #1090	; 0x442
 8008ed4:	4914      	ldr	r1, [pc, #80]	; (8008f28 <tcp_enqueue_flags+0x148>)
 8008ed6:	4811      	ldr	r0, [pc, #68]	; (8008f1c <tcp_enqueue_flags+0x13c>)
 8008ed8:	f002 faae 	bl	800b438 <iprintf>
 8008edc:	e7a8      	b.n	8008e30 <tcp_enqueue_flags+0x50>
  LWIP_ASSERT("tcp_enqueue_flags: invalid segment length", seg->len == 0);
 8008ede:	4b0d      	ldr	r3, [pc, #52]	; (8008f14 <tcp_enqueue_flags+0x134>)
 8008ee0:	f240 4243 	movw	r2, #1091	; 0x443
 8008ee4:	4911      	ldr	r1, [pc, #68]	; (8008f2c <tcp_enqueue_flags+0x14c>)
 8008ee6:	480d      	ldr	r0, [pc, #52]	; (8008f1c <tcp_enqueue_flags+0x13c>)
 8008ee8:	f002 faa6 	bl	800b438 <iprintf>
 8008eec:	e7a3      	b.n	8008e36 <tcp_enqueue_flags+0x56>
    pcb->unsent = seg;
 8008eee:	66e6      	str	r6, [r4, #108]	; 0x6c
 8008ef0:	e7a9      	b.n	8008e46 <tcp_enqueue_flags+0x66>
    LWIP_ASSERT("tcp_enqueue_flags: invalid queue length",
 8008ef2:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 8008ef4:	b10b      	cbz	r3, 8008efa <tcp_enqueue_flags+0x11a>
  return ERR_OK;
 8008ef6:	2000      	movs	r0, #0
 8008ef8:	e009      	b.n	8008f0e <tcp_enqueue_flags+0x12e>
    LWIP_ASSERT("tcp_enqueue_flags: invalid queue length",
 8008efa:	4b06      	ldr	r3, [pc, #24]	; (8008f14 <tcp_enqueue_flags+0x134>)
 8008efc:	f240 4265 	movw	r2, #1125	; 0x465
 8008f00:	490b      	ldr	r1, [pc, #44]	; (8008f30 <tcp_enqueue_flags+0x150>)
 8008f02:	4806      	ldr	r0, [pc, #24]	; (8008f1c <tcp_enqueue_flags+0x13c>)
 8008f04:	f002 fa98 	bl	800b438 <iprintf>
  return ERR_OK;
 8008f08:	2000      	movs	r0, #0
 8008f0a:	e000      	b.n	8008f0e <tcp_enqueue_flags+0x12e>
 8008f0c:	2000      	movs	r0, #0
}
 8008f0e:	b003      	add	sp, #12
 8008f10:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8008f14:	08011884 	.word	0x08011884
 8008f18:	08011d20 	.word	0x08011d20
 8008f1c:	0800cb24 	.word	0x0800cb24
 8008f20:	08011d78 	.word	0x08011d78
 8008f24:	08011d98 	.word	0x08011d98
 8008f28:	08011dd4 	.word	0x08011dd4
 8008f2c:	08011dec 	.word	0x08011dec
 8008f30:	08011e18 	.word	0x08011e18

08008f34 <tcp_send_fin>:
{
 8008f34:	b570      	push	{r4, r5, r6, lr}
  LWIP_ASSERT("tcp_send_fin: invalid pcb", pcb != NULL);
 8008f36:	4605      	mov	r5, r0
 8008f38:	b188      	cbz	r0, 8008f5e <tcp_send_fin+0x2a>
  if (pcb->unsent != NULL) {
 8008f3a:	6eeb      	ldr	r3, [r5, #108]	; 0x6c
 8008f3c:	b153      	cbz	r3, 8008f54 <tcp_send_fin+0x20>
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 8008f3e:	461c      	mov	r4, r3
 8008f40:	681b      	ldr	r3, [r3, #0]
 8008f42:	2b00      	cmp	r3, #0
 8008f44:	d1fb      	bne.n	8008f3e <tcp_send_fin+0xa>
    if ((TCPH_FLAGS(last_unsent->tcphdr) & (TCP_SYN | TCP_FIN | TCP_RST)) == 0) {
 8008f46:	68e3      	ldr	r3, [r4, #12]
 8008f48:	8998      	ldrh	r0, [r3, #12]
 8008f4a:	f7fb fb09 	bl	8004560 <lwip_htons>
 8008f4e:	f010 0f07 	tst.w	r0, #7
 8008f52:	d00c      	beq.n	8008f6e <tcp_send_fin+0x3a>
  return tcp_enqueue_flags(pcb, TCP_FIN);
 8008f54:	2101      	movs	r1, #1
 8008f56:	4628      	mov	r0, r5
 8008f58:	f7ff ff42 	bl	8008de0 <tcp_enqueue_flags>
}
 8008f5c:	bd70      	pop	{r4, r5, r6, pc}
  LWIP_ASSERT("tcp_send_fin: invalid pcb", pcb != NULL);
 8008f5e:	4b0b      	ldr	r3, [pc, #44]	; (8008f8c <tcp_send_fin+0x58>)
 8008f60:	f240 32eb 	movw	r2, #1003	; 0x3eb
 8008f64:	490a      	ldr	r1, [pc, #40]	; (8008f90 <tcp_send_fin+0x5c>)
 8008f66:	480b      	ldr	r0, [pc, #44]	; (8008f94 <tcp_send_fin+0x60>)
 8008f68:	f002 fa66 	bl	800b438 <iprintf>
 8008f6c:	e7e5      	b.n	8008f3a <tcp_send_fin+0x6>
      TCPH_SET_FLAG(last_unsent->tcphdr, TCP_FIN);
 8008f6e:	68e3      	ldr	r3, [r4, #12]
 8008f70:	899e      	ldrh	r6, [r3, #12]
 8008f72:	2001      	movs	r0, #1
 8008f74:	f7fb faf4 	bl	8004560 <lwip_htons>
 8008f78:	68e3      	ldr	r3, [r4, #12]
 8008f7a:	4306      	orrs	r6, r0
 8008f7c:	819e      	strh	r6, [r3, #12]
      tcp_set_flags(pcb, TF_FIN);
 8008f7e:	8b6b      	ldrh	r3, [r5, #26]
 8008f80:	f043 0320 	orr.w	r3, r3, #32
 8008f84:	836b      	strh	r3, [r5, #26]
      return ERR_OK;
 8008f86:	2000      	movs	r0, #0
 8008f88:	e7e8      	b.n	8008f5c <tcp_send_fin+0x28>
 8008f8a:	bf00      	nop
 8008f8c:	08011884 	.word	0x08011884
 8008f90:	08011e40 	.word	0x08011e40
 8008f94:	0800cb24 	.word	0x0800cb24

08008f98 <tcp_rexmit_rto_prepare>:
{
 8008f98:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  LWIP_ASSERT("tcp_rexmit_rto_prepare: invalid pcb", pcb != NULL);
 8008f9c:	4605      	mov	r5, r0
 8008f9e:	2800      	cmp	r0, #0
 8008fa0:	d031      	beq.n	8009006 <tcp_rexmit_rto_prepare+0x6e>
  if (pcb->unacked == NULL) {
 8008fa2:	6f2c      	ldr	r4, [r5, #112]	; 0x70
 8008fa4:	2c00      	cmp	r4, #0
 8008fa6:	d036      	beq.n	8009016 <tcp_rexmit_rto_prepare+0x7e>
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 8008fa8:	6823      	ldr	r3, [r4, #0]
 8008faa:	b143      	cbz	r3, 8008fbe <tcp_rexmit_rto_prepare+0x26>
    if (tcp_output_segment_busy(seg)) {
 8008fac:	4620      	mov	r0, r4
 8008fae:	f7ff f949 	bl	8008244 <tcp_output_segment_busy>
 8008fb2:	2800      	cmp	r0, #0
 8008fb4:	d132      	bne.n	800901c <tcp_rexmit_rto_prepare+0x84>
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 8008fb6:	6824      	ldr	r4, [r4, #0]
 8008fb8:	6823      	ldr	r3, [r4, #0]
 8008fba:	2b00      	cmp	r3, #0
 8008fbc:	d1f6      	bne.n	8008fac <tcp_rexmit_rto_prepare+0x14>
  if (tcp_output_segment_busy(seg)) {
 8008fbe:	4620      	mov	r0, r4
 8008fc0:	f7ff f940 	bl	8008244 <tcp_output_segment_busy>
 8008fc4:	bb68      	cbnz	r0, 8009022 <tcp_rexmit_rto_prepare+0x8a>
  seg->next = pcb->unsent;
 8008fc6:	6eeb      	ldr	r3, [r5, #108]	; 0x6c
 8008fc8:	6023      	str	r3, [r4, #0]
  pcb->unsent = pcb->unacked;
 8008fca:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8008fcc:	66eb      	str	r3, [r5, #108]	; 0x6c
  pcb->unacked = NULL;
 8008fce:	2600      	movs	r6, #0
 8008fd0:	672e      	str	r6, [r5, #112]	; 0x70
  tcp_set_flags(pcb, TF_RTO);
 8008fd2:	8b6b      	ldrh	r3, [r5, #26]
 8008fd4:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8008fd8:	836b      	strh	r3, [r5, #26]
  pcb->rto_end = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 8008fda:	68e3      	ldr	r3, [r4, #12]
 8008fdc:	6858      	ldr	r0, [r3, #4]
 8008fde:	f7fb fac4 	bl	800456a <lwip_htonl>
 8008fe2:	4607      	mov	r7, r0
 8008fe4:	f8b4 8008 	ldrh.w	r8, [r4, #8]
 8008fe8:	68e3      	ldr	r3, [r4, #12]
 8008fea:	8998      	ldrh	r0, [r3, #12]
 8008fec:	f7fb fab8 	bl	8004560 <lwip_htons>
 8008ff0:	f010 0303 	ands.w	r3, r0, #3
 8008ff4:	bf18      	it	ne
 8008ff6:	2301      	movne	r3, #1
 8008ff8:	4447      	add	r7, r8
 8008ffa:	443b      	add	r3, r7
 8008ffc:	64eb      	str	r3, [r5, #76]	; 0x4c
  pcb->rttest = 0;
 8008ffe:	636e      	str	r6, [r5, #52]	; 0x34
  return ERR_OK;
 8009000:	4630      	mov	r0, r6
}
 8009002:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  LWIP_ASSERT("tcp_rexmit_rto_prepare: invalid pcb", pcb != NULL);
 8009006:	4b08      	ldr	r3, [pc, #32]	; (8009028 <tcp_rexmit_rto_prepare+0x90>)
 8009008:	f240 6263 	movw	r2, #1635	; 0x663
 800900c:	4907      	ldr	r1, [pc, #28]	; (800902c <tcp_rexmit_rto_prepare+0x94>)
 800900e:	4808      	ldr	r0, [pc, #32]	; (8009030 <tcp_rexmit_rto_prepare+0x98>)
 8009010:	f002 fa12 	bl	800b438 <iprintf>
 8009014:	e7c5      	b.n	8008fa2 <tcp_rexmit_rto_prepare+0xa>
    return ERR_VAL;
 8009016:	f06f 0005 	mvn.w	r0, #5
 800901a:	e7f2      	b.n	8009002 <tcp_rexmit_rto_prepare+0x6a>
      return ERR_VAL;
 800901c:	f06f 0005 	mvn.w	r0, #5
 8009020:	e7ef      	b.n	8009002 <tcp_rexmit_rto_prepare+0x6a>
    return ERR_VAL;
 8009022:	f06f 0005 	mvn.w	r0, #5
 8009026:	e7ec      	b.n	8009002 <tcp_rexmit_rto_prepare+0x6a>
 8009028:	08011884 	.word	0x08011884
 800902c:	08011e5c 	.word	0x08011e5c
 8009030:	0800cb24 	.word	0x0800cb24

08009034 <tcp_rexmit>:
{
 8009034:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  LWIP_ASSERT("tcp_rexmit: invalid pcb", pcb != NULL);
 8009036:	4607      	mov	r7, r0
 8009038:	2800      	cmp	r0, #0
 800903a:	d02c      	beq.n	8009096 <tcp_rexmit+0x62>
  if (pcb->unacked == NULL) {
 800903c:	6f3e      	ldr	r6, [r7, #112]	; 0x70
 800903e:	2e00      	cmp	r6, #0
 8009040:	d034      	beq.n	80090ac <tcp_rexmit+0x78>
  if (tcp_output_segment_busy(seg)) {
 8009042:	4630      	mov	r0, r6
 8009044:	f7ff f8fe 	bl	8008244 <tcp_output_segment_busy>
 8009048:	2800      	cmp	r0, #0
 800904a:	d132      	bne.n	80090b2 <tcp_rexmit+0x7e>
  pcb->unacked = seg->next;
 800904c:	6833      	ldr	r3, [r6, #0]
 800904e:	673b      	str	r3, [r7, #112]	; 0x70
  cur_seg = &(pcb->unsent);
 8009050:	f107 056c 	add.w	r5, r7, #108	; 0x6c
  while (*cur_seg &&
 8009054:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009056:	b17b      	cbz	r3, 8009078 <tcp_rexmit+0x44>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 8009058:	68db      	ldr	r3, [r3, #12]
 800905a:	6858      	ldr	r0, [r3, #4]
 800905c:	f7fb fa85 	bl	800456a <lwip_htonl>
 8009060:	4604      	mov	r4, r0
 8009062:	68f3      	ldr	r3, [r6, #12]
 8009064:	6858      	ldr	r0, [r3, #4]
 8009066:	f7fb fa80 	bl	800456a <lwip_htonl>
 800906a:	1a24      	subs	r4, r4, r0
  while (*cur_seg &&
 800906c:	2c00      	cmp	r4, #0
 800906e:	da03      	bge.n	8009078 <tcp_rexmit+0x44>
    cur_seg = &((*cur_seg)->next );
 8009070:	682d      	ldr	r5, [r5, #0]
  while (*cur_seg &&
 8009072:	682b      	ldr	r3, [r5, #0]
 8009074:	2b00      	cmp	r3, #0
 8009076:	d1ef      	bne.n	8009058 <tcp_rexmit+0x24>
  seg->next = *cur_seg;
 8009078:	682b      	ldr	r3, [r5, #0]
 800907a:	6033      	str	r3, [r6, #0]
  *cur_seg = seg;
 800907c:	602e      	str	r6, [r5, #0]
  if (seg->next == NULL) {
 800907e:	6833      	ldr	r3, [r6, #0]
 8009080:	b18b      	cbz	r3, 80090a6 <tcp_rexmit+0x72>
  if (pcb->nrtx < 0xFF) {
 8009082:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
 8009086:	2bff      	cmp	r3, #255	; 0xff
    ++pcb->nrtx;
 8009088:	bf1c      	itt	ne
 800908a:	3301      	addne	r3, #1
 800908c:	f887 3042 	strbne.w	r3, [r7, #66]	; 0x42
  pcb->rttest = 0;
 8009090:	2000      	movs	r0, #0
 8009092:	6378      	str	r0, [r7, #52]	; 0x34
}
 8009094:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  LWIP_ASSERT("tcp_rexmit: invalid pcb", pcb != NULL);
 8009096:	4b08      	ldr	r3, [pc, #32]	; (80090b8 <tcp_rexmit+0x84>)
 8009098:	f240 62c1 	movw	r2, #1729	; 0x6c1
 800909c:	4907      	ldr	r1, [pc, #28]	; (80090bc <tcp_rexmit+0x88>)
 800909e:	4808      	ldr	r0, [pc, #32]	; (80090c0 <tcp_rexmit+0x8c>)
 80090a0:	f002 f9ca 	bl	800b438 <iprintf>
 80090a4:	e7ca      	b.n	800903c <tcp_rexmit+0x8>
    pcb->unsent_oversize = 0;
 80090a6:	f8a7 3068 	strh.w	r3, [r7, #104]	; 0x68
 80090aa:	e7ea      	b.n	8009082 <tcp_rexmit+0x4e>
    return ERR_VAL;
 80090ac:	f06f 0005 	mvn.w	r0, #5
 80090b0:	e7f0      	b.n	8009094 <tcp_rexmit+0x60>
    return ERR_VAL;
 80090b2:	f06f 0005 	mvn.w	r0, #5
 80090b6:	e7ed      	b.n	8009094 <tcp_rexmit+0x60>
 80090b8:	08011884 	.word	0x08011884
 80090bc:	08011e80 	.word	0x08011e80
 80090c0:	0800cb24 	.word	0x0800cb24

080090c4 <tcp_rexmit_fast>:
{
 80090c4:	b510      	push	{r4, lr}
  LWIP_ASSERT("tcp_rexmit_fast: invalid pcb", pcb != NULL);
 80090c6:	4604      	mov	r4, r0
 80090c8:	b130      	cbz	r0, 80090d8 <tcp_rexmit_fast+0x14>
  if (pcb->unacked != NULL && !(pcb->flags & TF_INFR)) {
 80090ca:	6f23      	ldr	r3, [r4, #112]	; 0x70
 80090cc:	b11b      	cbz	r3, 80090d6 <tcp_rexmit_fast+0x12>
 80090ce:	8b63      	ldrh	r3, [r4, #26]
 80090d0:	f013 0f04 	tst.w	r3, #4
 80090d4:	d008      	beq.n	80090e8 <tcp_rexmit_fast+0x24>
}
 80090d6:	bd10      	pop	{r4, pc}
  LWIP_ASSERT("tcp_rexmit_fast: invalid pcb", pcb != NULL);
 80090d8:	4b15      	ldr	r3, [pc, #84]	; (8009130 <tcp_rexmit_fast+0x6c>)
 80090da:	f240 62f9 	movw	r2, #1785	; 0x6f9
 80090de:	4915      	ldr	r1, [pc, #84]	; (8009134 <tcp_rexmit_fast+0x70>)
 80090e0:	4815      	ldr	r0, [pc, #84]	; (8009138 <tcp_rexmit_fast+0x74>)
 80090e2:	f002 f9a9 	bl	800b438 <iprintf>
 80090e6:	e7f0      	b.n	80090ca <tcp_rexmit_fast+0x6>
    if (tcp_rexmit(pcb) == ERR_OK) {
 80090e8:	4620      	mov	r0, r4
 80090ea:	f7ff ffa3 	bl	8009034 <tcp_rexmit>
 80090ee:	2800      	cmp	r0, #0
 80090f0:	d1f1      	bne.n	80090d6 <tcp_rexmit_fast+0x12>
      pcb->ssthresh = LWIP_MIN(pcb->cwnd, pcb->snd_wnd) / 2;
 80090f2:	f8b4 2060 	ldrh.w	r2, [r4, #96]	; 0x60
 80090f6:	f8b4 3048 	ldrh.w	r3, [r4, #72]	; 0x48
 80090fa:	429a      	cmp	r2, r3
 80090fc:	bf28      	it	cs
 80090fe:	461a      	movcs	r2, r3
 8009100:	1052      	asrs	r2, r2, #1
 8009102:	f8a4 204a 	strh.w	r2, [r4, #74]	; 0x4a
      if (pcb->ssthresh < (2U * pcb->mss)) {
 8009106:	8e63      	ldrh	r3, [r4, #50]	; 0x32
 8009108:	ebb2 0f43 	cmp.w	r2, r3, lsl #1
        pcb->ssthresh = 2 * pcb->mss;
 800910c:	bf3c      	itt	cc
 800910e:	005a      	lslcc	r2, r3, #1
 8009110:	f8a4 204a 	strhcc.w	r2, [r4, #74]	; 0x4a
      pcb->cwnd = pcb->ssthresh + 3 * pcb->mss;
 8009114:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8009118:	f8b4 204a 	ldrh.w	r2, [r4, #74]	; 0x4a
 800911c:	4413      	add	r3, r2
 800911e:	f8a4 3048 	strh.w	r3, [r4, #72]	; 0x48
      tcp_set_flags(pcb, TF_INFR);
 8009122:	8b63      	ldrh	r3, [r4, #26]
 8009124:	f043 0304 	orr.w	r3, r3, #4
 8009128:	8363      	strh	r3, [r4, #26]
      pcb->rtime = 0;
 800912a:	2300      	movs	r3, #0
 800912c:	8623      	strh	r3, [r4, #48]	; 0x30
}
 800912e:	e7d2      	b.n	80090d6 <tcp_rexmit_fast+0x12>
 8009130:	08011884 	.word	0x08011884
 8009134:	08011e98 	.word	0x08011e98
 8009138:	0800cb24 	.word	0x0800cb24

0800913c <tcp_rst>:
 */
void
tcp_rst(const struct tcp_pcb *pcb, u32_t seqno, u32_t ackno,
        const ip_addr_t *local_ip, const ip_addr_t *remote_ip,
        u16_t local_port, u16_t remote_port)
{
 800913c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009140:	b084      	sub	sp, #16
 8009142:	4604      	mov	r4, r0
 8009144:	460e      	mov	r6, r1
 8009146:	4615      	mov	r5, r2
 8009148:	9f0a      	ldr	r7, [sp, #40]	; 0x28
  struct pbuf *p;
  u16_t wnd;
  u8_t optlen;

  LWIP_ASSERT("tcp_rst: invalid local_ip", local_ip != NULL);
 800914a:	4698      	mov	r8, r3
 800914c:	b32b      	cbz	r3, 800919a <tcp_rst+0x5e>
  LWIP_ASSERT("tcp_rst: invalid remote_ip", remote_ip != NULL);
 800914e:	b367      	cbz	r7, 80091aa <tcp_rst+0x6e>
  wnd = PP_HTONS(((TCP_WND >> TCP_RCV_SCALE) & 0xFFFF));
#else
  wnd = PP_HTONS(TCP_WND);
#endif

  p = tcp_output_alloc_header_common(ackno, optlen, 0, lwip_htonl(seqno), local_port,
 8009150:	4630      	mov	r0, r6
 8009152:	f7fb fa0a 	bl	800456a <lwip_htonl>
 8009156:	4603      	mov	r3, r0
 8009158:	f246 0208 	movw	r2, #24584	; 0x6008
 800915c:	9203      	str	r2, [sp, #12]
 800915e:	2214      	movs	r2, #20
 8009160:	9202      	str	r2, [sp, #8]
 8009162:	f8bd 2030 	ldrh.w	r2, [sp, #48]	; 0x30
 8009166:	9201      	str	r2, [sp, #4]
 8009168:	f8bd 202c 	ldrh.w	r2, [sp, #44]	; 0x2c
 800916c:	9200      	str	r2, [sp, #0]
 800916e:	2200      	movs	r2, #0
 8009170:	4611      	mov	r1, r2
 8009172:	4628      	mov	r0, r5
 8009174:	f7ff f974 	bl	8008460 <tcp_output_alloc_header_common>
    remote_port, TCP_RST | TCP_ACK, wnd);
  if (p == NULL) {
 8009178:	4605      	mov	r5, r0
 800917a:	b158      	cbz	r0, 8009194 <tcp_rst+0x58>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_rst: could not allocate memory for pbuf\n"));
    return;
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 800917c:	2300      	movs	r3, #0
 800917e:	461a      	mov	r2, r3
 8009180:	4601      	mov	r1, r0
 8009182:	4620      	mov	r0, r4
 8009184:	f7ff f876 	bl	8008274 <tcp_output_fill_options>

  MIB2_STATS_INC(mib2.tcpoutrsts);

  tcp_output_control_segment(pcb, p, local_ip, remote_ip);
 8009188:	463b      	mov	r3, r7
 800918a:	4642      	mov	r2, r8
 800918c:	4629      	mov	r1, r5
 800918e:	4620      	mov	r0, r4
 8009190:	f7ff f9da 	bl	8008548 <tcp_output_control_segment>
  LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_rst: seqno %"U32_F" ackno %"U32_F".\n", seqno, ackno));
}
 8009194:	b004      	add	sp, #16
 8009196:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  LWIP_ASSERT("tcp_rst: invalid local_ip", local_ip != NULL);
 800919a:	4b08      	ldr	r3, [pc, #32]	; (80091bc <tcp_rst+0x80>)
 800919c:	f240 72c4 	movw	r2, #1988	; 0x7c4
 80091a0:	4907      	ldr	r1, [pc, #28]	; (80091c0 <tcp_rst+0x84>)
 80091a2:	4808      	ldr	r0, [pc, #32]	; (80091c4 <tcp_rst+0x88>)
 80091a4:	f002 f948 	bl	800b438 <iprintf>
 80091a8:	e7d1      	b.n	800914e <tcp_rst+0x12>
  LWIP_ASSERT("tcp_rst: invalid remote_ip", remote_ip != NULL);
 80091aa:	4b04      	ldr	r3, [pc, #16]	; (80091bc <tcp_rst+0x80>)
 80091ac:	f240 72c5 	movw	r2, #1989	; 0x7c5
 80091b0:	4905      	ldr	r1, [pc, #20]	; (80091c8 <tcp_rst+0x8c>)
 80091b2:	4804      	ldr	r0, [pc, #16]	; (80091c4 <tcp_rst+0x88>)
 80091b4:	f002 f940 	bl	800b438 <iprintf>
 80091b8:	e7ca      	b.n	8009150 <tcp_rst+0x14>
 80091ba:	bf00      	nop
 80091bc:	08011884 	.word	0x08011884
 80091c0:	08011eb8 	.word	0x08011eb8
 80091c4:	0800cb24 	.word	0x0800cb24
 80091c8:	08011ed4 	.word	0x08011ed4

080091cc <tcp_send_empty_ack>:
 *
 * @param pcb Protocol control block for the TCP connection to send the ACK
 */
err_t
tcp_send_empty_ack(struct tcp_pcb *pcb)
{
 80091cc:	b538      	push	{r3, r4, r5, lr}
  err_t err;
  struct pbuf *p;
  u8_t optlen, optflags = 0;
  u8_t num_sacks = 0;

  LWIP_ASSERT("tcp_send_empty_ack: invalid pcb", pcb != NULL);
 80091ce:	4604      	mov	r4, r0
 80091d0:	b1e0      	cbz	r0, 800920c <tcp_send_empty_ack+0x40>
  if ((num_sacks = tcp_get_num_sacks(pcb, optlen)) > 0) {
    optlen += 4 + num_sacks * 8; /* 4 bytes for header (including 2*NOP), plus 8B for each SACK */
  }
#endif

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt));
 80091d2:	6d20      	ldr	r0, [r4, #80]	; 0x50
 80091d4:	f7fb f9c9 	bl	800456a <lwip_htonl>
 80091d8:	4603      	mov	r3, r0
 80091da:	2200      	movs	r2, #0
 80091dc:	4611      	mov	r1, r2
 80091de:	4620      	mov	r0, r4
 80091e0:	f7ff f988 	bl	80084f4 <tcp_output_alloc_header>
  if (p == NULL) {
 80091e4:	4605      	mov	r5, r0
 80091e6:	b1c8      	cbz	r0, 800921c <tcp_send_empty_ack+0x50>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output: (ACK) could not allocate pbuf\n"));
    return ERR_BUF;
  }
  tcp_output_fill_options(pcb, p, optflags, num_sacks);
 80091e8:	2300      	movs	r3, #0
 80091ea:	461a      	mov	r2, r3
 80091ec:	4601      	mov	r1, r0
 80091ee:	4620      	mov	r0, r4
 80091f0:	f7ff f840 	bl	8008274 <tcp_output_fill_options>
  pcb->ts_lastacksent = pcb->rcv_nxt;
#endif

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG,
              ("tcp_output: sending ACK for %"U32_F"\n", pcb->rcv_nxt));
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 80091f4:	1d23      	adds	r3, r4, #4
 80091f6:	4622      	mov	r2, r4
 80091f8:	4629      	mov	r1, r5
 80091fa:	4620      	mov	r0, r4
 80091fc:	f7ff f9a4 	bl	8008548 <tcp_output_control_segment>
  if (err != ERR_OK) {
 8009200:	b198      	cbz	r0, 800922a <tcp_send_empty_ack+0x5e>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8009202:	8b63      	ldrh	r3, [r4, #26]
 8009204:	f043 0303 	orr.w	r3, r3, #3
 8009208:	8363      	strh	r3, [r4, #26]
    /* remove ACK flags from the PCB, as we sent an empty ACK now */
    tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
  }

  return err;
}
 800920a:	bd38      	pop	{r3, r4, r5, pc}
  LWIP_ASSERT("tcp_send_empty_ack: invalid pcb", pcb != NULL);
 800920c:	4b09      	ldr	r3, [pc, #36]	; (8009234 <tcp_send_empty_ack+0x68>)
 800920e:	f240 72ea 	movw	r2, #2026	; 0x7ea
 8009212:	4909      	ldr	r1, [pc, #36]	; (8009238 <tcp_send_empty_ack+0x6c>)
 8009214:	4809      	ldr	r0, [pc, #36]	; (800923c <tcp_send_empty_ack+0x70>)
 8009216:	f002 f90f 	bl	800b438 <iprintf>
 800921a:	e7da      	b.n	80091d2 <tcp_send_empty_ack+0x6>
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800921c:	8b63      	ldrh	r3, [r4, #26]
 800921e:	f043 0303 	orr.w	r3, r3, #3
 8009222:	8363      	strh	r3, [r4, #26]
    return ERR_BUF;
 8009224:	f06f 0001 	mvn.w	r0, #1
 8009228:	e7ef      	b.n	800920a <tcp_send_empty_ack+0x3e>
    tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800922a:	8b63      	ldrh	r3, [r4, #26]
 800922c:	f023 0303 	bic.w	r3, r3, #3
 8009230:	8363      	strh	r3, [r4, #26]
 8009232:	e7ea      	b.n	800920a <tcp_send_empty_ack+0x3e>
 8009234:	08011884 	.word	0x08011884
 8009238:	08011ef0 	.word	0x08011ef0
 800923c:	0800cb24 	.word	0x0800cb24

08009240 <tcp_output>:
{
 8009240:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009244:	b085      	sub	sp, #20
  LWIP_ASSERT("tcp_output: invalid pcb", pcb != NULL);
 8009246:	4605      	mov	r5, r0
 8009248:	2800      	cmp	r0, #0
 800924a:	d03a      	beq.n	80092c2 <tcp_output+0x82>
  LWIP_ASSERT("don't call tcp_output for listen-pcbs",
 800924c:	7d2b      	ldrb	r3, [r5, #20]
 800924e:	2b01      	cmp	r3, #1
 8009250:	d03f      	beq.n	80092d2 <tcp_output+0x92>
  if (tcp_input_pcb == pcb) {
 8009252:	4b9b      	ldr	r3, [pc, #620]	; (80094c0 <tcp_output+0x280>)
 8009254:	681b      	ldr	r3, [r3, #0]
 8009256:	42ab      	cmp	r3, r5
 8009258:	f000 81b8 	beq.w	80095cc <tcp_output+0x38c>
  seg = pcb->unsent;
 800925c:	6eec      	ldr	r4, [r5, #108]	; 0x6c
  if (seg == NULL) {
 800925e:	2c00      	cmp	r4, #0
 8009260:	d03f      	beq.n	80092e2 <tcp_output+0xa2>
  wnd = LWIP_MIN(pcb->snd_wnd, pcb->cwnd);
 8009262:	f8b5 7048 	ldrh.w	r7, [r5, #72]	; 0x48
 8009266:	f8b5 6060 	ldrh.w	r6, [r5, #96]	; 0x60
  netif = tcp_route(pcb, &pcb->local_ip, &pcb->remote_ip);
 800926a:	f105 0a04 	add.w	sl, r5, #4
  if ((pcb != NULL) && (pcb->netif_idx != NETIF_NO_INDEX)) {
 800926e:	7a28      	ldrb	r0, [r5, #8]
 8009270:	2800      	cmp	r0, #0
 8009272:	d148      	bne.n	8009306 <tcp_output+0xc6>
    return ip_route(src, dst);
 8009274:	4650      	mov	r0, sl
 8009276:	f001 f9cd 	bl	800a614 <ip4_route>
 800927a:	4681      	mov	r9, r0
  if (netif == NULL) {
 800927c:	f1b9 0f00 	cmp.w	r9, #0
 8009280:	f000 81a6 	beq.w	80095d0 <tcp_output+0x390>
  if (ip_addr_isany(&pcb->local_ip)) {
 8009284:	682b      	ldr	r3, [r5, #0]
 8009286:	b913      	cbnz	r3, 800928e <tcp_output+0x4e>
    ip_addr_copy(pcb->local_ip, *local_ip);
 8009288:	f8d9 3004 	ldr.w	r3, [r9, #4]
 800928c:	602b      	str	r3, [r5, #0]
  wnd = LWIP_MIN(pcb->snd_wnd, pcb->cwnd);
 800928e:	42b7      	cmp	r7, r6
 8009290:	bf28      	it	cs
 8009292:	4637      	movcs	r7, r6
  if (lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd) {
 8009294:	68e3      	ldr	r3, [r4, #12]
 8009296:	6858      	ldr	r0, [r3, #4]
 8009298:	f7fb f967 	bl	800456a <lwip_htonl>
 800929c:	8923      	ldrh	r3, [r4, #8]
 800929e:	6c6a      	ldr	r2, [r5, #68]	; 0x44
 80092a0:	1a9b      	subs	r3, r3, r2
 80092a2:	4403      	add	r3, r0
 80092a4:	42bb      	cmp	r3, r7
 80092a6:	d941      	bls.n	800932c <tcp_output+0xec>
    if (wnd == pcb->snd_wnd && pcb->unacked == NULL && pcb->persist_backoff == 0) {
 80092a8:	f8b5 3060 	ldrh.w	r3, [r5, #96]	; 0x60
 80092ac:	42bb      	cmp	r3, r7
 80092ae:	d02e      	beq.n	800930e <tcp_output+0xce>
    if (pcb->flags & TF_ACK_NOW) {
 80092b0:	8b6b      	ldrh	r3, [r5, #26]
 80092b2:	f013 0f02 	tst.w	r3, #2
 80092b6:	d018      	beq.n	80092ea <tcp_output+0xaa>
      return tcp_send_empty_ack(pcb);
 80092b8:	4628      	mov	r0, r5
 80092ba:	f7ff ff87 	bl	80091cc <tcp_send_empty_ack>
 80092be:	4603      	mov	r3, r0
 80092c0:	e018      	b.n	80092f4 <tcp_output+0xb4>
  LWIP_ASSERT("tcp_output: invalid pcb", pcb != NULL);
 80092c2:	4b80      	ldr	r3, [pc, #512]	; (80094c4 <tcp_output+0x284>)
 80092c4:	f240 42e1 	movw	r2, #1249	; 0x4e1
 80092c8:	497f      	ldr	r1, [pc, #508]	; (80094c8 <tcp_output+0x288>)
 80092ca:	4880      	ldr	r0, [pc, #512]	; (80094cc <tcp_output+0x28c>)
 80092cc:	f002 f8b4 	bl	800b438 <iprintf>
 80092d0:	e7bc      	b.n	800924c <tcp_output+0xc>
  LWIP_ASSERT("don't call tcp_output for listen-pcbs",
 80092d2:	4b7c      	ldr	r3, [pc, #496]	; (80094c4 <tcp_output+0x284>)
 80092d4:	f240 42e3 	movw	r2, #1251	; 0x4e3
 80092d8:	497d      	ldr	r1, [pc, #500]	; (80094d0 <tcp_output+0x290>)
 80092da:	487c      	ldr	r0, [pc, #496]	; (80094cc <tcp_output+0x28c>)
 80092dc:	f002 f8ac 	bl	800b438 <iprintf>
 80092e0:	e7b7      	b.n	8009252 <tcp_output+0x12>
    if (pcb->flags & TF_ACK_NOW) {
 80092e2:	8b6b      	ldrh	r3, [r5, #26]
 80092e4:	f013 0f02 	tst.w	r3, #2
 80092e8:	d108      	bne.n	80092fc <tcp_output+0xbc>
  tcp_clear_flags(pcb, TF_NAGLEMEMERR);
 80092ea:	8b6b      	ldrh	r3, [r5, #26]
 80092ec:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80092f0:	836b      	strh	r3, [r5, #26]
  return ERR_OK;
 80092f2:	2300      	movs	r3, #0
}
 80092f4:	4618      	mov	r0, r3
 80092f6:	b005      	add	sp, #20
 80092f8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      return tcp_send_empty_ack(pcb);
 80092fc:	4628      	mov	r0, r5
 80092fe:	f7ff ff65 	bl	80091cc <tcp_send_empty_ack>
 8009302:	4603      	mov	r3, r0
 8009304:	e7f6      	b.n	80092f4 <tcp_output+0xb4>
    return netif_get_by_index(pcb->netif_idx);
 8009306:	f7fb fe5f 	bl	8004fc8 <netif_get_by_index>
 800930a:	4681      	mov	r9, r0
 800930c:	e7b6      	b.n	800927c <tcp_output+0x3c>
    if (wnd == pcb->snd_wnd && pcb->unacked == NULL && pcb->persist_backoff == 0) {
 800930e:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8009310:	2b00      	cmp	r3, #0
 8009312:	d1cd      	bne.n	80092b0 <tcp_output+0x70>
 8009314:	f895 3099 	ldrb.w	r3, [r5, #153]	; 0x99
 8009318:	2b00      	cmp	r3, #0
 800931a:	d1c9      	bne.n	80092b0 <tcp_output+0x70>
      pcb->persist_cnt = 0;
 800931c:	f885 3098 	strb.w	r3, [r5, #152]	; 0x98
      pcb->persist_backoff = 1;
 8009320:	2201      	movs	r2, #1
 8009322:	f885 2099 	strb.w	r2, [r5, #153]	; 0x99
      pcb->persist_probe = 0;
 8009326:	f885 309a 	strb.w	r3, [r5, #154]	; 0x9a
 800932a:	e7c1      	b.n	80092b0 <tcp_output+0x70>
  pcb->persist_backoff = 0;
 800932c:	2300      	movs	r3, #0
 800932e:	f885 3099 	strb.w	r3, [r5, #153]	; 0x99
  useg = pcb->unacked;
 8009332:	6f2b      	ldr	r3, [r5, #112]	; 0x70
  if (useg != NULL) {
 8009334:	2b00      	cmp	r3, #0
 8009336:	f000 8147 	beq.w	80095c8 <tcp_output+0x388>
    for (; useg->next != NULL; useg = useg->next);
 800933a:	4698      	mov	r8, r3
 800933c:	681b      	ldr	r3, [r3, #0]
 800933e:	2b00      	cmp	r3, #0
 8009340:	d1fb      	bne.n	800933a <tcp_output+0xfa>
 8009342:	e0d4      	b.n	80094ee <tcp_output+0x2ae>
    LWIP_ASSERT("RST not expected here!",
 8009344:	4b5f      	ldr	r3, [pc, #380]	; (80094c4 <tcp_output+0x284>)
 8009346:	f240 5236 	movw	r2, #1334	; 0x536
 800934a:	4962      	ldr	r1, [pc, #392]	; (80094d4 <tcp_output+0x294>)
 800934c:	485f      	ldr	r0, [pc, #380]	; (80094cc <tcp_output+0x28c>)
 800934e:	f002 f873 	bl	800b438 <iprintf>
 8009352:	e0df      	b.n	8009514 <tcp_output+0x2d4>
    if ((tcp_do_output_nagle(pcb) == 0) &&
 8009354:	8911      	ldrh	r1, [r2, #8]
 8009356:	8e6a      	ldrh	r2, [r5, #50]	; 0x32
 8009358:	4291      	cmp	r1, r2
 800935a:	f080 80e9 	bcs.w	8009530 <tcp_output+0x2f0>
 800935e:	f8b5 2064 	ldrh.w	r2, [r5, #100]	; 0x64
 8009362:	2a00      	cmp	r2, #0
 8009364:	f000 80e4 	beq.w	8009530 <tcp_output+0x2f0>
 8009368:	f8b5 2066 	ldrh.w	r2, [r5, #102]	; 0x66
 800936c:	2a08      	cmp	r2, #8
 800936e:	f200 80df 	bhi.w	8009530 <tcp_output+0x2f0>
 8009372:	f013 0fa0 	tst.w	r3, #160	; 0xa0
 8009376:	f040 80db 	bne.w	8009530 <tcp_output+0x2f0>
  if (pcb->unsent == NULL) {
 800937a:	6eeb      	ldr	r3, [r5, #108]	; 0x6c
 800937c:	2b00      	cmp	r3, #0
 800937e:	d1b4      	bne.n	80092ea <tcp_output+0xaa>
    pcb->unsent_oversize = 0;
 8009380:	2300      	movs	r3, #0
 8009382:	f8a5 3068 	strh.w	r3, [r5, #104]	; 0x68
 8009386:	e7b0      	b.n	80092ea <tcp_output+0xaa>
      TCPH_SET_FLAG(seg->tcphdr, TCP_ACK);
 8009388:	68e3      	ldr	r3, [r4, #12]
 800938a:	899e      	ldrh	r6, [r3, #12]
 800938c:	2010      	movs	r0, #16
 800938e:	f7fb f8e7 	bl	8004560 <lwip_htons>
 8009392:	68e3      	ldr	r3, [r4, #12]
 8009394:	4330      	orrs	r0, r6
 8009396:	8198      	strh	r0, [r3, #12]
 8009398:	e0ce      	b.n	8009538 <tcp_output+0x2f8>
  seg->tcphdr->ackno = lwip_htonl(pcb->rcv_nxt);
 800939a:	68e6      	ldr	r6, [r4, #12]
 800939c:	6a68      	ldr	r0, [r5, #36]	; 0x24
 800939e:	f7fb f8e4 	bl	800456a <lwip_htonl>
 80093a2:	60b0      	str	r0, [r6, #8]
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
 80093a4:	68e6      	ldr	r6, [r4, #12]
 80093a6:	8d68      	ldrh	r0, [r5, #42]	; 0x2a
 80093a8:	f7fb f8da 	bl	8004560 <lwip_htons>
 80093ac:	81f0      	strh	r0, [r6, #14]
  pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 80093ae:	8d6a      	ldrh	r2, [r5, #42]	; 0x2a
 80093b0:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80093b2:	4413      	add	r3, r2
 80093b4:	62eb      	str	r3, [r5, #44]	; 0x2c
  opts = (u32_t *)(void *)(seg->tcphdr + 1);
 80093b6:	68e6      	ldr	r6, [r4, #12]
  if (seg->flags & TF_SEG_OPTS_MSS) {
 80093b8:	7aa3      	ldrb	r3, [r4, #10]
 80093ba:	f013 0f01 	tst.w	r3, #1
 80093be:	d140      	bne.n	8009442 <tcp_output+0x202>
  opts = (u32_t *)(void *)(seg->tcphdr + 1);
 80093c0:	3614      	adds	r6, #20
  if (pcb->rtime < 0) {
 80093c2:	f9b5 3030 	ldrsh.w	r3, [r5, #48]	; 0x30
 80093c6:	2b00      	cmp	r3, #0
    pcb->rtime = 0;
 80093c8:	bfbc      	itt	lt
 80093ca:	2300      	movlt	r3, #0
 80093cc:	862b      	strhlt	r3, [r5, #48]	; 0x30
  if (pcb->rttest == 0) {
 80093ce:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 80093d0:	2b00      	cmp	r3, #0
 80093d2:	d043      	beq.n	800945c <tcp_output+0x21c>
  len = (u16_t)((u8_t *)seg->tcphdr - (u8_t *)seg->p->payload);
 80093d4:	6862      	ldr	r2, [r4, #4]
 80093d6:	68e3      	ldr	r3, [r4, #12]
 80093d8:	6851      	ldr	r1, [r2, #4]
 80093da:	1a5b      	subs	r3, r3, r1
 80093dc:	b29b      	uxth	r3, r3
  seg->p->len -= len;
 80093de:	8951      	ldrh	r1, [r2, #10]
 80093e0:	1ac9      	subs	r1, r1, r3
 80093e2:	8151      	strh	r1, [r2, #10]
  seg->p->tot_len -= len;
 80093e4:	6861      	ldr	r1, [r4, #4]
 80093e6:	890a      	ldrh	r2, [r1, #8]
 80093e8:	1ad3      	subs	r3, r2, r3
 80093ea:	810b      	strh	r3, [r1, #8]
  seg->p->payload = seg->tcphdr;
 80093ec:	6862      	ldr	r2, [r4, #4]
 80093ee:	68e3      	ldr	r3, [r4, #12]
 80093f0:	6053      	str	r3, [r2, #4]
  seg->tcphdr->chksum = 0;
 80093f2:	2200      	movs	r2, #0
 80093f4:	741a      	strb	r2, [r3, #16]
 80093f6:	745a      	strb	r2, [r3, #17]
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(seg->tcphdr + 1)) + LWIP_TCP_OPT_LENGTH_SEGMENT(seg->flags, pcb));
 80093f8:	7aa3      	ldrb	r3, [r4, #10]
 80093fa:	009b      	lsls	r3, r3, #2
 80093fc:	f003 0304 	and.w	r3, r3, #4
 8009400:	3314      	adds	r3, #20
 8009402:	68e2      	ldr	r2, [r4, #12]
 8009404:	4413      	add	r3, r2
 8009406:	429e      	cmp	r6, r3
 8009408:	d006      	beq.n	8009418 <tcp_output+0x1d8>
 800940a:	4b2e      	ldr	r3, [pc, #184]	; (80094c4 <tcp_output+0x284>)
 800940c:	f240 621c 	movw	r2, #1564	; 0x61c
 8009410:	4931      	ldr	r1, [pc, #196]	; (80094d8 <tcp_output+0x298>)
 8009412:	482e      	ldr	r0, [pc, #184]	; (80094cc <tcp_output+0x28c>)
 8009414:	f002 f810 	bl	800b438 <iprintf>
  err = ip_output_if(seg->p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl,
 8009418:	6860      	ldr	r0, [r4, #4]
 800941a:	f8cd 9008 	str.w	r9, [sp, #8]
 800941e:	2306      	movs	r3, #6
 8009420:	9301      	str	r3, [sp, #4]
 8009422:	7aab      	ldrb	r3, [r5, #10]
 8009424:	9300      	str	r3, [sp, #0]
 8009426:	7aeb      	ldrb	r3, [r5, #11]
 8009428:	4652      	mov	r2, sl
 800942a:	4629      	mov	r1, r5
 800942c:	f001 fa7e 	bl	800a92c <ip4_output_if>
    if (err != ERR_OK) {
 8009430:	4603      	mov	r3, r0
 8009432:	2800      	cmp	r0, #0
 8009434:	f000 8086 	beq.w	8009544 <tcp_output+0x304>
      tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8009438:	8b6a      	ldrh	r2, [r5, #26]
 800943a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800943e:	836a      	strh	r2, [r5, #26]
      return err;
 8009440:	e758      	b.n	80092f4 <tcp_output+0xb4>
    mss = tcp_eff_send_mss_netif(TCP_MSS, netif, &pcb->remote_ip);
 8009442:	4652      	mov	r2, sl
 8009444:	4649      	mov	r1, r9
 8009446:	f44f 7006 	mov.w	r0, #536	; 0x218
 800944a:	f7fc fc31 	bl	8005cb0 <tcp_eff_send_mss_netif>
    *opts = TCP_BUILD_MSS_OPTION(mss);
 800944e:	f040 7001 	orr.w	r0, r0, #33816576	; 0x2040000
 8009452:	f7fb f88a 	bl	800456a <lwip_htonl>
 8009456:	6170      	str	r0, [r6, #20]
    opts += 1;
 8009458:	3618      	adds	r6, #24
 800945a:	e7b2      	b.n	80093c2 <tcp_output+0x182>
    pcb->rttest = tcp_ticks;
 800945c:	4b1f      	ldr	r3, [pc, #124]	; (80094dc <tcp_output+0x29c>)
 800945e:	681b      	ldr	r3, [r3, #0]
 8009460:	636b      	str	r3, [r5, #52]	; 0x34
    pcb->rtseq = lwip_ntohl(seg->tcphdr->seqno);
 8009462:	68e3      	ldr	r3, [r4, #12]
 8009464:	6858      	ldr	r0, [r3, #4]
 8009466:	f7fb f880 	bl	800456a <lwip_htonl>
 800946a:	63a8      	str	r0, [r5, #56]	; 0x38
 800946c:	e7b2      	b.n	80093d4 <tcp_output+0x194>
        pcb->unacked = seg;
 800946e:	672c      	str	r4, [r5, #112]	; 0x70
        useg = seg;
 8009470:	46a0      	mov	r8, r4
 8009472:	e038      	b.n	80094e6 <tcp_output+0x2a6>
          struct tcp_seg **cur_seg = &(pcb->unacked);
 8009474:	f105 0b70 	add.w	fp, r5, #112	; 0x70
          while (*cur_seg &&
 8009478:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 800947a:	b1d3      	cbz	r3, 80094b2 <tcp_output+0x272>
 800947c:	4622      	mov	r2, r4
 800947e:	465c      	mov	r4, fp
 8009480:	4693      	mov	fp, r2
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 8009482:	68db      	ldr	r3, [r3, #12]
 8009484:	6858      	ldr	r0, [r3, #4]
 8009486:	f7fb f870 	bl	800456a <lwip_htonl>
 800948a:	4606      	mov	r6, r0
 800948c:	f8db 300c 	ldr.w	r3, [fp, #12]
 8009490:	6858      	ldr	r0, [r3, #4]
 8009492:	f7fb f86a 	bl	800456a <lwip_htonl>
 8009496:	1a36      	subs	r6, r6, r0
          while (*cur_seg &&
 8009498:	2e00      	cmp	r6, #0
 800949a:	da07      	bge.n	80094ac <tcp_output+0x26c>
            cur_seg = &((*cur_seg)->next );
 800949c:	6824      	ldr	r4, [r4, #0]
          while (*cur_seg &&
 800949e:	6823      	ldr	r3, [r4, #0]
 80094a0:	2b00      	cmp	r3, #0
 80094a2:	d1ee      	bne.n	8009482 <tcp_output+0x242>
 80094a4:	465b      	mov	r3, fp
 80094a6:	46a3      	mov	fp, r4
 80094a8:	461c      	mov	r4, r3
 80094aa:	e002      	b.n	80094b2 <tcp_output+0x272>
 80094ac:	465b      	mov	r3, fp
 80094ae:	46a3      	mov	fp, r4
 80094b0:	461c      	mov	r4, r3
          seg->next = (*cur_seg);
 80094b2:	f8db 3000 	ldr.w	r3, [fp]
 80094b6:	6023      	str	r3, [r4, #0]
          (*cur_seg) = seg;
 80094b8:	f8cb 4000 	str.w	r4, [fp]
 80094bc:	e013      	b.n	80094e6 <tcp_output+0x2a6>
 80094be:	bf00      	nop
 80094c0:	2000ae9c 	.word	0x2000ae9c
 80094c4:	08011884 	.word	0x08011884
 80094c8:	08011f10 	.word	0x08011f10
 80094cc:	0800cb24 	.word	0x0800cb24
 80094d0:	08011f28 	.word	0x08011f28
 80094d4:	08011f50 	.word	0x08011f50
 80094d8:	08011908 	.word	0x08011908
 80094dc:	2000ae68 	.word	0x2000ae68
      tcp_seg_free(seg);
 80094e0:	4620      	mov	r0, r4
 80094e2:	f7fc faff 	bl	8005ae4 <tcp_seg_free>
    seg = pcb->unsent;
 80094e6:	6eec      	ldr	r4, [r5, #108]	; 0x6c
  while (seg != NULL &&
 80094e8:	2c00      	cmp	r4, #0
 80094ea:	f43f af49 	beq.w	8009380 <tcp_output+0x140>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
 80094ee:	68e3      	ldr	r3, [r4, #12]
 80094f0:	6858      	ldr	r0, [r3, #4]
 80094f2:	f7fb f83a 	bl	800456a <lwip_htonl>
 80094f6:	6c6b      	ldr	r3, [r5, #68]	; 0x44
 80094f8:	1ac0      	subs	r0, r0, r3
 80094fa:	8923      	ldrh	r3, [r4, #8]
 80094fc:	4418      	add	r0, r3
  while (seg != NULL &&
 80094fe:	42b8      	cmp	r0, r7
 8009500:	f63f af3b 	bhi.w	800937a <tcp_output+0x13a>
    LWIP_ASSERT("RST not expected here!",
 8009504:	68e3      	ldr	r3, [r4, #12]
 8009506:	8998      	ldrh	r0, [r3, #12]
 8009508:	f7fb f82a 	bl	8004560 <lwip_htons>
 800950c:	f010 0f04 	tst.w	r0, #4
 8009510:	f47f af18 	bne.w	8009344 <tcp_output+0x104>
    if ((tcp_do_output_nagle(pcb) == 0) &&
 8009514:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8009516:	b15b      	cbz	r3, 8009530 <tcp_output+0x2f0>
 8009518:	8b6b      	ldrh	r3, [r5, #26]
 800951a:	f013 0f44 	tst.w	r3, #68	; 0x44
 800951e:	d107      	bne.n	8009530 <tcp_output+0x2f0>
 8009520:	6eea      	ldr	r2, [r5, #108]	; 0x6c
 8009522:	2a00      	cmp	r2, #0
 8009524:	f43f af1b 	beq.w	800935e <tcp_output+0x11e>
 8009528:	6811      	ldr	r1, [r2, #0]
 800952a:	2900      	cmp	r1, #0
 800952c:	f43f af12 	beq.w	8009354 <tcp_output+0x114>
    if (pcb->state != SYN_SENT) {
 8009530:	7d2b      	ldrb	r3, [r5, #20]
 8009532:	2b02      	cmp	r3, #2
 8009534:	f47f af28 	bne.w	8009388 <tcp_output+0x148>
  if (tcp_output_segment_busy(seg)) {
 8009538:	4620      	mov	r0, r4
 800953a:	f7fe fe83 	bl	8008244 <tcp_output_segment_busy>
 800953e:	2800      	cmp	r0, #0
 8009540:	f43f af2b 	beq.w	800939a <tcp_output+0x15a>
    pcb->unsent = seg->next;
 8009544:	6823      	ldr	r3, [r4, #0]
 8009546:	66eb      	str	r3, [r5, #108]	; 0x6c
    if (pcb->state != SYN_SENT) {
 8009548:	7d2b      	ldrb	r3, [r5, #20]
 800954a:	2b02      	cmp	r3, #2
 800954c:	d003      	beq.n	8009556 <tcp_output+0x316>
      tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800954e:	8b6b      	ldrh	r3, [r5, #26]
 8009550:	f023 0303 	bic.w	r3, r3, #3
 8009554:	836b      	strh	r3, [r5, #26]
    snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 8009556:	68e3      	ldr	r3, [r4, #12]
 8009558:	6858      	ldr	r0, [r3, #4]
 800955a:	f7fb f806 	bl	800456a <lwip_htonl>
 800955e:	4606      	mov	r6, r0
 8009560:	f8b4 b008 	ldrh.w	fp, [r4, #8]
 8009564:	68e3      	ldr	r3, [r4, #12]
 8009566:	8998      	ldrh	r0, [r3, #12]
 8009568:	f7fa fffa 	bl	8004560 <lwip_htons>
 800956c:	f010 0003 	ands.w	r0, r0, #3
 8009570:	bf18      	it	ne
 8009572:	2001      	movne	r0, #1
 8009574:	445e      	add	r6, fp
 8009576:	4430      	add	r0, r6
    if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 8009578:	6d2b      	ldr	r3, [r5, #80]	; 0x50
 800957a:	1a1b      	subs	r3, r3, r0
 800957c:	2b00      	cmp	r3, #0
      pcb->snd_nxt = snd_nxt;
 800957e:	bfb8      	it	lt
 8009580:	6528      	strlt	r0, [r5, #80]	; 0x50
    if (TCP_TCPLEN(seg) > 0) {
 8009582:	8926      	ldrh	r6, [r4, #8]
 8009584:	68e3      	ldr	r3, [r4, #12]
 8009586:	8998      	ldrh	r0, [r3, #12]
 8009588:	f7fa ffea 	bl	8004560 <lwip_htons>
 800958c:	f010 0003 	ands.w	r0, r0, #3
 8009590:	bf18      	it	ne
 8009592:	2001      	movne	r0, #1
 8009594:	42f0      	cmn	r0, r6
 8009596:	d0a3      	beq.n	80094e0 <tcp_output+0x2a0>
      seg->next = NULL;
 8009598:	2300      	movs	r3, #0
 800959a:	6023      	str	r3, [r4, #0]
      if (pcb->unacked == NULL) {
 800959c:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 800959e:	2b00      	cmp	r3, #0
 80095a0:	f43f af65 	beq.w	800946e <tcp_output+0x22e>
        if (TCP_SEQ_LT(lwip_ntohl(seg->tcphdr->seqno), lwip_ntohl(useg->tcphdr->seqno))) {
 80095a4:	68e3      	ldr	r3, [r4, #12]
 80095a6:	6858      	ldr	r0, [r3, #4]
 80095a8:	f7fa ffdf 	bl	800456a <lwip_htonl>
 80095ac:	4606      	mov	r6, r0
 80095ae:	f8d8 300c 	ldr.w	r3, [r8, #12]
 80095b2:	6858      	ldr	r0, [r3, #4]
 80095b4:	f7fa ffd9 	bl	800456a <lwip_htonl>
 80095b8:	1a36      	subs	r6, r6, r0
 80095ba:	2e00      	cmp	r6, #0
 80095bc:	f6ff af5a 	blt.w	8009474 <tcp_output+0x234>
          useg->next = seg;
 80095c0:	f8c8 4000 	str.w	r4, [r8]
 80095c4:	46a0      	mov	r8, r4
 80095c6:	e78e      	b.n	80094e6 <tcp_output+0x2a6>
  useg = pcb->unacked;
 80095c8:	4698      	mov	r8, r3
  while (seg != NULL &&
 80095ca:	e790      	b.n	80094ee <tcp_output+0x2ae>
    return ERR_OK;
 80095cc:	2300      	movs	r3, #0
 80095ce:	e691      	b.n	80092f4 <tcp_output+0xb4>
    return ERR_RTE;
 80095d0:	f06f 0303 	mvn.w	r3, #3
 80095d4:	e68e      	b.n	80092f4 <tcp_output+0xb4>
 80095d6:	bf00      	nop

080095d8 <tcp_rexmit_rto_commit>:
{
 80095d8:	b510      	push	{r4, lr}
  LWIP_ASSERT("tcp_rexmit_rto_commit: invalid pcb", pcb != NULL);
 80095da:	4604      	mov	r4, r0
 80095dc:	b150      	cbz	r0, 80095f4 <tcp_rexmit_rto_commit+0x1c>
  if (pcb->nrtx < 0xFF) {
 80095de:	f894 3042 	ldrb.w	r3, [r4, #66]	; 0x42
 80095e2:	2bff      	cmp	r3, #255	; 0xff
    ++pcb->nrtx;
 80095e4:	bf1c      	itt	ne
 80095e6:	3301      	addne	r3, #1
 80095e8:	f884 3042 	strbne.w	r3, [r4, #66]	; 0x42
  tcp_output(pcb);
 80095ec:	4620      	mov	r0, r4
 80095ee:	f7ff fe27 	bl	8009240 <tcp_output>
}
 80095f2:	bd10      	pop	{r4, pc}
  LWIP_ASSERT("tcp_rexmit_rto_commit: invalid pcb", pcb != NULL);
 80095f4:	4b03      	ldr	r3, [pc, #12]	; (8009604 <tcp_rexmit_rto_commit+0x2c>)
 80095f6:	f44f 62d3 	mov.w	r2, #1688	; 0x698
 80095fa:	4903      	ldr	r1, [pc, #12]	; (8009608 <tcp_rexmit_rto_commit+0x30>)
 80095fc:	4803      	ldr	r0, [pc, #12]	; (800960c <tcp_rexmit_rto_commit+0x34>)
 80095fe:	f001 ff1b 	bl	800b438 <iprintf>
 8009602:	e7ec      	b.n	80095de <tcp_rexmit_rto_commit+0x6>
 8009604:	08011884 	.word	0x08011884
 8009608:	08011f68 	.word	0x08011f68
 800960c:	0800cb24 	.word	0x0800cb24

08009610 <tcp_rexmit_rto>:
{
 8009610:	b510      	push	{r4, lr}
  LWIP_ASSERT("tcp_rexmit_rto: invalid pcb", pcb != NULL);
 8009612:	4604      	mov	r4, r0
 8009614:	b120      	cbz	r0, 8009620 <tcp_rexmit_rto+0x10>
  if (tcp_rexmit_rto_prepare(pcb) == ERR_OK) {
 8009616:	4620      	mov	r0, r4
 8009618:	f7ff fcbe 	bl	8008f98 <tcp_rexmit_rto_prepare>
 800961c:	b140      	cbz	r0, 8009630 <tcp_rexmit_rto+0x20>
}
 800961e:	bd10      	pop	{r4, pc}
  LWIP_ASSERT("tcp_rexmit_rto: invalid pcb", pcb != NULL);
 8009620:	4b05      	ldr	r3, [pc, #20]	; (8009638 <tcp_rexmit_rto+0x28>)
 8009622:	f240 62ad 	movw	r2, #1709	; 0x6ad
 8009626:	4905      	ldr	r1, [pc, #20]	; (800963c <tcp_rexmit_rto+0x2c>)
 8009628:	4805      	ldr	r0, [pc, #20]	; (8009640 <tcp_rexmit_rto+0x30>)
 800962a:	f001 ff05 	bl	800b438 <iprintf>
 800962e:	e7f2      	b.n	8009616 <tcp_rexmit_rto+0x6>
    tcp_rexmit_rto_commit(pcb);
 8009630:	4620      	mov	r0, r4
 8009632:	f7ff ffd1 	bl	80095d8 <tcp_rexmit_rto_commit>
}
 8009636:	e7f2      	b.n	800961e <tcp_rexmit_rto+0xe>
 8009638:	08011884 	.word	0x08011884
 800963c:	08011f8c 	.word	0x08011f8c
 8009640:	0800cb24 	.word	0x0800cb24

08009644 <tcp_keepalive>:
 *
 * @param pcb the tcp_pcb for which to send a keepalive packet
 */
err_t
tcp_keepalive(struct tcp_pcb *pcb)
{
 8009644:	b538      	push	{r3, r4, r5, lr}
  err_t err;
  struct pbuf *p;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);

  LWIP_ASSERT("tcp_keepalive: invalid pcb", pcb != NULL);
 8009646:	4604      	mov	r4, r0
 8009648:	b1c0      	cbz	r0, 800967c <tcp_keepalive+0x38>
  LWIP_DEBUGF(TCP_DEBUG, ("\n"));

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: tcp_ticks %"U32_F"   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
                          tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt - 1));
 800964a:	6d20      	ldr	r0, [r4, #80]	; 0x50
 800964c:	3801      	subs	r0, #1
 800964e:	f7fa ff8c 	bl	800456a <lwip_htonl>
 8009652:	4603      	mov	r3, r0
 8009654:	2200      	movs	r2, #0
 8009656:	4611      	mov	r1, r2
 8009658:	4620      	mov	r0, r4
 800965a:	f7fe ff4b 	bl	80084f4 <tcp_output_alloc_header>
  if (p == NULL) {
 800965e:	4605      	mov	r5, r0
 8009660:	b1a0      	cbz	r0, 800968c <tcp_keepalive+0x48>
    LWIP_DEBUGF(TCP_DEBUG,
                ("tcp_keepalive: could not allocate memory for pbuf\n"));
    return ERR_MEM;
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 8009662:	2300      	movs	r3, #0
 8009664:	461a      	mov	r2, r3
 8009666:	4601      	mov	r1, r0
 8009668:	4620      	mov	r0, r4
 800966a:	f7fe fe03 	bl	8008274 <tcp_output_fill_options>
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 800966e:	1d23      	adds	r3, r4, #4
 8009670:	4622      	mov	r2, r4
 8009672:	4629      	mov	r1, r5
 8009674:	4620      	mov	r0, r4
 8009676:	f7fe ff67 	bl	8008548 <tcp_output_control_segment>

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: seqno %"U32_F" ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
}
 800967a:	bd38      	pop	{r3, r4, r5, pc}
  LWIP_ASSERT("tcp_keepalive: invalid pcb", pcb != NULL);
 800967c:	4b05      	ldr	r3, [pc, #20]	; (8009694 <tcp_keepalive+0x50>)
 800967e:	f640 0224 	movw	r2, #2084	; 0x824
 8009682:	4905      	ldr	r1, [pc, #20]	; (8009698 <tcp_keepalive+0x54>)
 8009684:	4805      	ldr	r0, [pc, #20]	; (800969c <tcp_keepalive+0x58>)
 8009686:	f001 fed7 	bl	800b438 <iprintf>
 800968a:	e7de      	b.n	800964a <tcp_keepalive+0x6>
    return ERR_MEM;
 800968c:	f04f 30ff 	mov.w	r0, #4294967295
 8009690:	e7f3      	b.n	800967a <tcp_keepalive+0x36>
 8009692:	bf00      	nop
 8009694:	08011884 	.word	0x08011884
 8009698:	08011fa8 	.word	0x08011fa8
 800969c:	0800cb24 	.word	0x0800cb24

080096a0 <tcp_zero_window_probe>:
 *
 * @param pcb the tcp_pcb for which to send a zero-window probe packet
 */
err_t
tcp_zero_window_probe(struct tcp_pcb *pcb)
{
 80096a0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  u16_t len;
  u8_t is_fin;
  u32_t snd_nxt;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);

  LWIP_ASSERT("tcp_zero_window_probe: invalid pcb", pcb != NULL);
 80096a4:	4604      	mov	r4, r0
 80096a6:	2800      	cmp	r0, #0
 80096a8:	d03e      	beq.n	8009728 <tcp_zero_window_probe+0x88>
              ("tcp_zero_window_probe: tcp_ticks %"U32_F
               "   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
               tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  /* Only consider unsent, persist timer should be off when there is data in-flight */
  seg = pcb->unsent;
 80096aa:	6ee5      	ldr	r5, [r4, #108]	; 0x6c
  if (seg == NULL) {
 80096ac:	2d00      	cmp	r5, #0
 80096ae:	d043      	beq.n	8009738 <tcp_zero_window_probe+0x98>

  /* increment probe count. NOTE: we record probe even if it fails
     to actually transmit due to an error. This ensures memory exhaustion/
     routing problem doesn't leave a zero-window pcb as an indefinite zombie.
     RTO mechanism has similar behavior, see pcb->nrtx */
  if (pcb->persist_probe < 0xFF) {
 80096b0:	f894 309a 	ldrb.w	r3, [r4, #154]	; 0x9a
 80096b4:	2bff      	cmp	r3, #255	; 0xff
    ++pcb->persist_probe;
 80096b6:	bf1c      	itt	ne
 80096b8:	3301      	addne	r3, #1
 80096ba:	f884 309a 	strbne.w	r3, [r4, #154]	; 0x9a
  }

  is_fin = ((TCPH_FLAGS(seg->tcphdr) & TCP_FIN) != 0) && (seg->len == 0);
 80096be:	68eb      	ldr	r3, [r5, #12]
 80096c0:	8998      	ldrh	r0, [r3, #12]
 80096c2:	f7fa ff4d 	bl	8004560 <lwip_htons>
 80096c6:	f010 0f01 	tst.w	r0, #1
 80096ca:	d002      	beq.n	80096d2 <tcp_zero_window_probe+0x32>
 80096cc:	892b      	ldrh	r3, [r5, #8]
 80096ce:	2b00      	cmp	r3, #0
 80096d0:	d03a      	beq.n	8009748 <tcp_zero_window_probe+0xa8>
  /* we want to send one seqno: either FIN or data (no options) */
  len = is_fin ? 0 : 1;

  p = tcp_output_alloc_header(pcb, optlen, len, seg->tcphdr->seqno);
 80096d2:	68eb      	ldr	r3, [r5, #12]
 80096d4:	685b      	ldr	r3, [r3, #4]
 80096d6:	2201      	movs	r2, #1
 80096d8:	2100      	movs	r1, #0
 80096da:	4620      	mov	r0, r4
 80096dc:	f7fe ff0a 	bl	80084f4 <tcp_output_alloc_header>
  if (p == NULL) {
 80096e0:	4606      	mov	r6, r0
 80096e2:	b370      	cbz	r0, 8009742 <tcp_zero_window_probe+0xa2>
    /* Data segment, copy in one byte from the head of the unacked queue */
    char *d = ((char *)p->payload + TCP_HLEN);
    /* Depending on whether the segment has already been sent (unacked) or not
       (unsent), seg->p->payload points to the IP header or TCP header.
       Ensure we copy the first TCP data byte: */
    pbuf_copy_partial(seg->p, d, 1, seg->p->tot_len - seg->len);
 80096e4:	6868      	ldr	r0, [r5, #4]
 80096e6:	8903      	ldrh	r3, [r0, #8]
 80096e8:	892a      	ldrh	r2, [r5, #8]
 80096ea:	1a9b      	subs	r3, r3, r2
    char *d = ((char *)p->payload + TCP_HLEN);
 80096ec:	6871      	ldr	r1, [r6, #4]
    pbuf_copy_partial(seg->p, d, 1, seg->p->tot_len - seg->len);
 80096ee:	b29b      	uxth	r3, r3
 80096f0:	2201      	movs	r2, #1
 80096f2:	3114      	adds	r1, #20
 80096f4:	f7fb ffb6 	bl	8005664 <pbuf_copy_partial>
  }

  /* The byte may be acknowledged without the window being opened. */
  snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + 1;
 80096f8:	68eb      	ldr	r3, [r5, #12]
 80096fa:	6858      	ldr	r0, [r3, #4]
 80096fc:	f7fa ff35 	bl	800456a <lwip_htonl>
 8009700:	3001      	adds	r0, #1
  if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 8009702:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8009704:	1a1b      	subs	r3, r3, r0
 8009706:	2b00      	cmp	r3, #0
    pcb->snd_nxt = snd_nxt;
 8009708:	bfb8      	it	lt
 800970a:	6520      	strlt	r0, [r4, #80]	; 0x50
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 800970c:	2300      	movs	r3, #0
 800970e:	461a      	mov	r2, r3
 8009710:	4631      	mov	r1, r6
 8009712:	4620      	mov	r0, r4
 8009714:	f7fe fdae 	bl	8008274 <tcp_output_fill_options>

  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 8009718:	1d23      	adds	r3, r4, #4
 800971a:	4622      	mov	r2, r4
 800971c:	4631      	mov	r1, r6
 800971e:	4620      	mov	r0, r4
 8009720:	f7fe ff12 	bl	8008548 <tcp_output_control_segment>

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: seqno %"U32_F
                          " ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
}
 8009724:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  LWIP_ASSERT("tcp_zero_window_probe: invalid pcb", pcb != NULL);
 8009728:	4b13      	ldr	r3, [pc, #76]	; (8009778 <tcp_zero_window_probe+0xd8>)
 800972a:	f640 024f 	movw	r2, #2127	; 0x84f
 800972e:	4913      	ldr	r1, [pc, #76]	; (800977c <tcp_zero_window_probe+0xdc>)
 8009730:	4813      	ldr	r0, [pc, #76]	; (8009780 <tcp_zero_window_probe+0xe0>)
 8009732:	f001 fe81 	bl	800b438 <iprintf>
 8009736:	e7b8      	b.n	80096aa <tcp_zero_window_probe+0xa>
    return ERR_OK;
 8009738:	2000      	movs	r0, #0
 800973a:	e7f3      	b.n	8009724 <tcp_zero_window_probe+0x84>
    return ERR_MEM;
 800973c:	f04f 30ff 	mov.w	r0, #4294967295
 8009740:	e7f0      	b.n	8009724 <tcp_zero_window_probe+0x84>
 8009742:	f04f 30ff 	mov.w	r0, #4294967295
 8009746:	e7ed      	b.n	8009724 <tcp_zero_window_probe+0x84>
  p = tcp_output_alloc_header(pcb, optlen, len, seg->tcphdr->seqno);
 8009748:	68eb      	ldr	r3, [r5, #12]
 800974a:	685b      	ldr	r3, [r3, #4]
 800974c:	2200      	movs	r2, #0
 800974e:	4611      	mov	r1, r2
 8009750:	4620      	mov	r0, r4
 8009752:	f7fe fecf 	bl	80084f4 <tcp_output_alloc_header>
  if (p == NULL) {
 8009756:	4606      	mov	r6, r0
 8009758:	2800      	cmp	r0, #0
 800975a:	d0ef      	beq.n	800973c <tcp_zero_window_probe+0x9c>
  tcphdr = (struct tcp_hdr *)p->payload;
 800975c:	f8d6 8004 	ldr.w	r8, [r6, #4]
    TCPH_FLAGS_SET(tcphdr, TCP_ACK | TCP_FIN);
 8009760:	f9b8 700c 	ldrsh.w	r7, [r8, #12]
 8009764:	f427 577c 	bic.w	r7, r7, #16128	; 0x3f00
 8009768:	2011      	movs	r0, #17
 800976a:	f7fa fef9 	bl	8004560 <lwip_htons>
 800976e:	4307      	orrs	r7, r0
 8009770:	f8a8 700c 	strh.w	r7, [r8, #12]
 8009774:	e7c0      	b.n	80096f8 <tcp_zero_window_probe+0x58>
 8009776:	bf00      	nop
 8009778:	08011884 	.word	0x08011884
 800977c:	08011fc4 	.word	0x08011fc4
 8009780:	0800cb24 	.word	0x0800cb24

08009784 <sys_timeout_abs>:
#if LWIP_DEBUG_TIMERNAMES
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg)
#endif
{
 8009784:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009786:	4604      	mov	r4, r0
 8009788:	460f      	mov	r7, r1
 800978a:	4616      	mov	r6, r2
  struct sys_timeo *timeout, *t;

  timeout = (struct sys_timeo *)memp_malloc(MEMP_SYS_TIMEOUT);
 800978c:	2006      	movs	r0, #6
 800978e:	f7fb fa1d 	bl	8004bcc <memp_malloc>
  if (timeout == NULL) {
 8009792:	b180      	cbz	r0, 80097b6 <sys_timeout_abs+0x32>
 8009794:	4605      	mov	r5, r0
    LWIP_ASSERT("sys_timeout: timeout != NULL, pool MEMP_SYS_TIMEOUT is empty", timeout != NULL);
    return;
  }

  timeout->next = NULL;
 8009796:	2300      	movs	r3, #0
 8009798:	6003      	str	r3, [r0, #0]
  timeout->h = handler;
 800979a:	6087      	str	r7, [r0, #8]
  timeout->arg = arg;
 800979c:	60c6      	str	r6, [r0, #12]
  timeout->time = abs_time;
 800979e:	6044      	str	r4, [r0, #4]
  timeout->handler_name = handler_name;
  LWIP_DEBUGF(TIMERS_DEBUG, ("sys_timeout: %p abs_time=%"U32_F" handler=%s arg=%p\n",
                             (void *)timeout, abs_time, handler_name, (void *)arg));
#endif /* LWIP_DEBUG_TIMERNAMES */

  if (next_timeout == NULL) {
 80097a0:	4b0f      	ldr	r3, [pc, #60]	; (80097e0 <sys_timeout_abs+0x5c>)
 80097a2:	681b      	ldr	r3, [r3, #0]
 80097a4:	b173      	cbz	r3, 80097c4 <sys_timeout_abs+0x40>
    next_timeout = timeout;
    return;
  }
  if (TIME_LESS_THAN(timeout->time, next_timeout->time)) {
 80097a6:	685a      	ldr	r2, [r3, #4]
 80097a8:	1aa2      	subs	r2, r4, r2
 80097aa:	2a00      	cmp	r2, #0
 80097ac:	da0d      	bge.n	80097ca <sys_timeout_abs+0x46>
    timeout->next = next_timeout;
 80097ae:	6003      	str	r3, [r0, #0]
    next_timeout = timeout;
 80097b0:	4b0b      	ldr	r3, [pc, #44]	; (80097e0 <sys_timeout_abs+0x5c>)
 80097b2:	6018      	str	r0, [r3, #0]
        t->next = timeout;
        break;
      }
    }
  }
}
 80097b4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    LWIP_ASSERT("sys_timeout: timeout != NULL, pool MEMP_SYS_TIMEOUT is empty", timeout != NULL);
 80097b6:	4b0b      	ldr	r3, [pc, #44]	; (80097e4 <sys_timeout_abs+0x60>)
 80097b8:	22be      	movs	r2, #190	; 0xbe
 80097ba:	490b      	ldr	r1, [pc, #44]	; (80097e8 <sys_timeout_abs+0x64>)
 80097bc:	480b      	ldr	r0, [pc, #44]	; (80097ec <sys_timeout_abs+0x68>)
 80097be:	f001 fe3b 	bl	800b438 <iprintf>
    return;
 80097c2:	e7f7      	b.n	80097b4 <sys_timeout_abs+0x30>
    next_timeout = timeout;
 80097c4:	4b06      	ldr	r3, [pc, #24]	; (80097e0 <sys_timeout_abs+0x5c>)
 80097c6:	6018      	str	r0, [r3, #0]
    return;
 80097c8:	e7f4      	b.n	80097b4 <sys_timeout_abs+0x30>
      if ((t->next == NULL) || TIME_LESS_THAN(timeout->time, t->next->time)) {
 80097ca:	4619      	mov	r1, r3
 80097cc:	681b      	ldr	r3, [r3, #0]
 80097ce:	b11b      	cbz	r3, 80097d8 <sys_timeout_abs+0x54>
 80097d0:	685a      	ldr	r2, [r3, #4]
 80097d2:	1aa2      	subs	r2, r4, r2
 80097d4:	2a00      	cmp	r2, #0
 80097d6:	daf8      	bge.n	80097ca <sys_timeout_abs+0x46>
        timeout->next = t->next;
 80097d8:	602b      	str	r3, [r5, #0]
        t->next = timeout;
 80097da:	600d      	str	r5, [r1, #0]
        break;
 80097dc:	e7ea      	b.n	80097b4 <sys_timeout_abs+0x30>
 80097de:	bf00      	nop
 80097e0:	2000aeb8 	.word	0x2000aeb8
 80097e4:	08011fe8 	.word	0x08011fe8
 80097e8:	0801201c 	.word	0x0801201c
 80097ec:	0800cb24 	.word	0x0800cb24

080097f0 <lwip_cyclic_timer>:
#if !LWIP_TESTMODE
static
#endif
void
lwip_cyclic_timer(void *arg)
{
 80097f0:	b538      	push	{r3, r4, r5, lr}
 80097f2:	4604      	mov	r4, r0
  const struct lwip_cyclic_timer *cyclic = (const struct lwip_cyclic_timer *)arg;

#if LWIP_DEBUG_TIMERNAMES
  LWIP_DEBUGF(TIMERS_DEBUG, ("tcpip: %s()\n", cyclic->handler_name));
#endif
  cyclic->handler();
 80097f4:	6843      	ldr	r3, [r0, #4]
 80097f6:	4798      	blx	r3

  now = sys_now();
 80097f8:	f7f9 fdb6 	bl	8003368 <sys_now>
 80097fc:	4684      	mov	ip, r0
  next_timeout_time = (u32_t)(current_timeout_due_time + cyclic->interval_ms);  /* overflow handled by TIME_LESS_THAN macro */ 
 80097fe:	6825      	ldr	r5, [r4, #0]
 8009800:	4b06      	ldr	r3, [pc, #24]	; (800981c <lwip_cyclic_timer+0x2c>)
 8009802:	6818      	ldr	r0, [r3, #0]
 8009804:	4428      	add	r0, r5
  if (TIME_LESS_THAN(next_timeout_time, now)) {
 8009806:	eba0 030c 	sub.w	r3, r0, ip
 800980a:	2b00      	cmp	r3, #0
    /* timer would immediately expire again -> "overload" -> restart without any correction */
#if LWIP_DEBUG_TIMERNAMES
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg);
 800980c:	4622      	mov	r2, r4
 800980e:	4904      	ldr	r1, [pc, #16]	; (8009820 <lwip_cyclic_timer+0x30>)
 8009810:	bfb8      	it	lt
 8009812:	eb05 000c 	addlt.w	r0, r5, ip
  } else {
    /* correct cyclic interval with handler execution delay and sys_check_timeouts jitter */
#if LWIP_DEBUG_TIMERNAMES
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
 8009816:	f7ff ffb5 	bl	8009784 <sys_timeout_abs>
#endif
  }
}
 800981a:	bd38      	pop	{r3, r4, r5, pc}
 800981c:	2000aeb4 	.word	0x2000aeb4
 8009820:	080097f1 	.word	0x080097f1

08009824 <sys_timeout>:
sys_timeout_debug(u32_t msecs, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
void
sys_timeout(u32_t msecs, sys_timeout_handler handler, void *arg)
#endif /* LWIP_DEBUG_TIMERNAMES */
{
 8009824:	b570      	push	{r4, r5, r6, lr}
 8009826:	4604      	mov	r4, r0
 8009828:	460d      	mov	r5, r1
 800982a:	4616      	mov	r6, r2
  u32_t next_timeout_time;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("Timeout time too long, max is LWIP_UINT32_MAX/4 msecs", msecs <= (LWIP_UINT32_MAX / 4));
 800982c:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8009830:	d207      	bcs.n	8009842 <sys_timeout+0x1e>

  next_timeout_time = (u32_t)(sys_now() + msecs); /* overflow handled by TIME_LESS_THAN macro */ 
 8009832:	f7f9 fd99 	bl	8003368 <sys_now>

#if LWIP_DEBUG_TIMERNAMES
  sys_timeout_abs(next_timeout_time, handler, arg, handler_name);
#else
  sys_timeout_abs(next_timeout_time, handler, arg);
 8009836:	4632      	mov	r2, r6
 8009838:	4629      	mov	r1, r5
 800983a:	4420      	add	r0, r4
 800983c:	f7ff ffa2 	bl	8009784 <sys_timeout_abs>
#endif
}
 8009840:	bd70      	pop	{r4, r5, r6, pc}
  LWIP_ASSERT("Timeout time too long, max is LWIP_UINT32_MAX/4 msecs", msecs <= (LWIP_UINT32_MAX / 4));
 8009842:	4b04      	ldr	r3, [pc, #16]	; (8009854 <sys_timeout+0x30>)
 8009844:	f240 1229 	movw	r2, #297	; 0x129
 8009848:	4903      	ldr	r1, [pc, #12]	; (8009858 <sys_timeout+0x34>)
 800984a:	4804      	ldr	r0, [pc, #16]	; (800985c <sys_timeout+0x38>)
 800984c:	f001 fdf4 	bl	800b438 <iprintf>
 8009850:	e7ef      	b.n	8009832 <sys_timeout+0xe>
 8009852:	bf00      	nop
 8009854:	08011fe8 	.word	0x08011fe8
 8009858:	0801205c 	.word	0x0801205c
 800985c:	0800cb24 	.word	0x0800cb24

08009860 <tcp_timer_needed>:
{
 8009860:	b508      	push	{r3, lr}
  if (!tcpip_tcp_timer_active && (tcp_active_pcbs || tcp_tw_pcbs)) {
 8009862:	4b0a      	ldr	r3, [pc, #40]	; (800988c <tcp_timer_needed+0x2c>)
 8009864:	681b      	ldr	r3, [r3, #0]
 8009866:	b953      	cbnz	r3, 800987e <tcp_timer_needed+0x1e>
 8009868:	4b09      	ldr	r3, [pc, #36]	; (8009890 <tcp_timer_needed+0x30>)
 800986a:	681b      	ldr	r3, [r3, #0]
 800986c:	b143      	cbz	r3, 8009880 <tcp_timer_needed+0x20>
    tcpip_tcp_timer_active = 1;
 800986e:	4b07      	ldr	r3, [pc, #28]	; (800988c <tcp_timer_needed+0x2c>)
 8009870:	2201      	movs	r2, #1
 8009872:	601a      	str	r2, [r3, #0]
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 8009874:	2200      	movs	r2, #0
 8009876:	4907      	ldr	r1, [pc, #28]	; (8009894 <tcp_timer_needed+0x34>)
 8009878:	20fa      	movs	r0, #250	; 0xfa
 800987a:	f7ff ffd3 	bl	8009824 <sys_timeout>
}
 800987e:	bd08      	pop	{r3, pc}
  if (!tcpip_tcp_timer_active && (tcp_active_pcbs || tcp_tw_pcbs)) {
 8009880:	4b05      	ldr	r3, [pc, #20]	; (8009898 <tcp_timer_needed+0x38>)
 8009882:	681b      	ldr	r3, [r3, #0]
 8009884:	2b00      	cmp	r3, #0
 8009886:	d1f2      	bne.n	800986e <tcp_timer_needed+0xe>
 8009888:	e7f9      	b.n	800987e <tcp_timer_needed+0x1e>
 800988a:	bf00      	nop
 800988c:	2000aebc 	.word	0x2000aebc
 8009890:	2000ae58 	.word	0x2000ae58
 8009894:	0800989d 	.word	0x0800989d
 8009898:	2000ae70 	.word	0x2000ae70

0800989c <tcpip_tcp_timer>:
{
 800989c:	b508      	push	{r3, lr}
  tcp_tmr();
 800989e:	f7fd f89d 	bl	80069dc <tcp_tmr>
  if (tcp_active_pcbs || tcp_tw_pcbs) {
 80098a2:	4b08      	ldr	r3, [pc, #32]	; (80098c4 <tcpip_tcp_timer+0x28>)
 80098a4:	681b      	ldr	r3, [r3, #0]
 80098a6:	b12b      	cbz	r3, 80098b4 <tcpip_tcp_timer+0x18>
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 80098a8:	2200      	movs	r2, #0
 80098aa:	4907      	ldr	r1, [pc, #28]	; (80098c8 <tcpip_tcp_timer+0x2c>)
 80098ac:	20fa      	movs	r0, #250	; 0xfa
 80098ae:	f7ff ffb9 	bl	8009824 <sys_timeout>
}
 80098b2:	bd08      	pop	{r3, pc}
  if (tcp_active_pcbs || tcp_tw_pcbs) {
 80098b4:	4b05      	ldr	r3, [pc, #20]	; (80098cc <tcpip_tcp_timer+0x30>)
 80098b6:	681b      	ldr	r3, [r3, #0]
 80098b8:	2b00      	cmp	r3, #0
 80098ba:	d1f5      	bne.n	80098a8 <tcpip_tcp_timer+0xc>
    tcpip_tcp_timer_active = 0;
 80098bc:	4b04      	ldr	r3, [pc, #16]	; (80098d0 <tcpip_tcp_timer+0x34>)
 80098be:	2200      	movs	r2, #0
 80098c0:	601a      	str	r2, [r3, #0]
}
 80098c2:	e7f6      	b.n	80098b2 <tcpip_tcp_timer+0x16>
 80098c4:	2000ae58 	.word	0x2000ae58
 80098c8:	0800989d 	.word	0x0800989d
 80098cc:	2000ae70 	.word	0x2000ae70
 80098d0:	2000aebc 	.word	0x2000aebc

080098d4 <sys_timeouts_init>:
{
 80098d4:	b538      	push	{r3, r4, r5, lr}
    sys_timeout(lwip_cyclic_timers[i].interval_ms, lwip_cyclic_timer, LWIP_CONST_CAST(void *, &lwip_cyclic_timers[i]));
 80098d6:	4d08      	ldr	r5, [pc, #32]	; (80098f8 <sys_timeouts_init+0x24>)
 80098d8:	4c08      	ldr	r4, [pc, #32]	; (80098fc <sys_timeouts_init+0x28>)
 80098da:	f105 0208 	add.w	r2, r5, #8
 80098de:	4621      	mov	r1, r4
 80098e0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80098e4:	f7ff ff9e 	bl	8009824 <sys_timeout>
 80098e8:	f105 0210 	add.w	r2, r5, #16
 80098ec:	4621      	mov	r1, r4
 80098ee:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80098f2:	f7ff ff97 	bl	8009824 <sys_timeout>
}
 80098f6:	bd38      	pop	{r3, r4, r5, pc}
 80098f8:	08012094 	.word	0x08012094
 80098fc:	080097f1 	.word	0x080097f1

08009900 <sys_check_timeouts>:
 *
 * Must be called periodically from your main loop.
 */
void
sys_check_timeouts(void)
{
 8009900:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  /* Process only timers expired at the start of the function. */
  now = sys_now();
 8009904:	f7f9 fd30 	bl	8003368 <sys_now>
 8009908:	4606      	mov	r6, r0
  do {
    struct sys_timeo *tmptimeout;
    sys_timeout_handler handler;
    void *arg;

    PBUF_CHECK_FREE_OOSEQ();
 800990a:	4f11      	ldr	r7, [pc, #68]	; (8009950 <sys_check_timeouts+0x50>)

    tmptimeout = next_timeout;
 800990c:	4c11      	ldr	r4, [pc, #68]	; (8009954 <sys_check_timeouts+0x54>)

    /* Timeout has expired */
    next_timeout = tmptimeout->next;
    handler = tmptimeout->h;
    arg = tmptimeout->arg;
    current_timeout_due_time = tmptimeout->time;
 800990e:	f8df 9048 	ldr.w	r9, [pc, #72]	; 8009958 <sys_check_timeouts+0x58>
    if (handler != NULL) {
      LWIP_DEBUGF(TIMERS_DEBUG, ("sct calling h=%s t=%"U32_F" arg=%p\n",
                                 tmptimeout->handler_name, sys_now() - tmptimeout->time, arg));
    }
#endif /* LWIP_DEBUG_TIMERNAMES */
    memp_free(MEMP_SYS_TIMEOUT, tmptimeout);
 8009912:	f04f 0806 	mov.w	r8, #6
 8009916:	e010      	b.n	800993a <sys_check_timeouts+0x3a>
    tmptimeout = next_timeout;
 8009918:	6821      	ldr	r1, [r4, #0]
    if (tmptimeout == NULL) {
 800991a:	b1b9      	cbz	r1, 800994c <sys_check_timeouts+0x4c>
    if (TIME_LESS_THAN(now, tmptimeout->time)) {
 800991c:	684b      	ldr	r3, [r1, #4]
 800991e:	1af2      	subs	r2, r6, r3
 8009920:	2a00      	cmp	r2, #0
 8009922:	db13      	blt.n	800994c <sys_check_timeouts+0x4c>
    next_timeout = tmptimeout->next;
 8009924:	680a      	ldr	r2, [r1, #0]
 8009926:	6022      	str	r2, [r4, #0]
    handler = tmptimeout->h;
 8009928:	688d      	ldr	r5, [r1, #8]
    arg = tmptimeout->arg;
 800992a:	f8d1 a00c 	ldr.w	sl, [r1, #12]
    current_timeout_due_time = tmptimeout->time;
 800992e:	f8c9 3000 	str.w	r3, [r9]
    memp_free(MEMP_SYS_TIMEOUT, tmptimeout);
 8009932:	4640      	mov	r0, r8
 8009934:	f7fb f97a 	bl	8004c2c <memp_free>
    if (handler != NULL) {
 8009938:	b92d      	cbnz	r5, 8009946 <sys_check_timeouts+0x46>
    PBUF_CHECK_FREE_OOSEQ();
 800993a:	783b      	ldrb	r3, [r7, #0]
 800993c:	2b00      	cmp	r3, #0
 800993e:	d0eb      	beq.n	8009918 <sys_check_timeouts+0x18>
 8009940:	f7fb fb94 	bl	800506c <pbuf_free_ooseq>
 8009944:	e7e8      	b.n	8009918 <sys_check_timeouts+0x18>
      handler(arg);
 8009946:	4650      	mov	r0, sl
 8009948:	47a8      	blx	r5
 800994a:	e7f6      	b.n	800993a <sys_check_timeouts+0x3a>
    }
    LWIP_TCPIP_THREAD_ALIVE();

    /* Repeat until all expired timers have been called */
  } while (1);
}
 800994c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009950:	2000ae55 	.word	0x2000ae55
 8009954:	2000aeb8 	.word	0x2000aeb8
 8009958:	2000aeb4 	.word	0x2000aeb4

0800995c <udp_init>:
/**
 * Initialize this module.
 */
void
udp_init(void)
{
 800995c:	b508      	push	{r3, lr}
#ifdef LWIP_RAND
  udp_port = UDP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 800995e:	f001 fd83 	bl	800b468 <rand>
 8009962:	ea6f 4080 	mvn.w	r0, r0, lsl #18
 8009966:	ea6f 4090 	mvn.w	r0, r0, lsr #18
 800996a:	4b01      	ldr	r3, [pc, #4]	; (8009970 <udp_init+0x14>)
 800996c:	8018      	strh	r0, [r3, #0]
#endif /* LWIP_RAND */
}
 800996e:	bd08      	pop	{r3, pc}
 8009970:	20000036 	.word	0x20000036

08009974 <udp_input>:
 * @param inp network interface on which the datagram was received.
 *
 */
void
udp_input(struct pbuf *p, struct netif *inp)
{
 8009974:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009978:	b085      	sub	sp, #20
 800997a:	460e      	mov	r6, r1

  LWIP_UNUSED_ARG(inp);

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("udp_input: invalid pbuf", p != NULL);
 800997c:	4681      	mov	r9, r0
 800997e:	b300      	cbz	r0, 80099c2 <udp_input+0x4e>
  LWIP_ASSERT("udp_input: invalid netif", inp != NULL);
 8009980:	b336      	cbz	r6, 80099d0 <udp_input+0x5c>
  PERF_START;

  UDP_STATS_INC(udp.recv);

  /* Check minimum length (UDP header) */
  if (p->len < UDP_HLEN) {
 8009982:	f8b9 300a 	ldrh.w	r3, [r9, #10]
 8009986:	2b07      	cmp	r3, #7
 8009988:	d929      	bls.n	80099de <udp_input+0x6a>
    MIB2_STATS_INC(mib2.udpinerrors);
    pbuf_free(p);
    goto end;
  }

  udphdr = (struct udp_hdr *)p->payload;
 800998a:	f8d9 4004 	ldr.w	r4, [r9, #4]

  /* is broadcast packet ? */
  broadcast = ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif());
 800998e:	4b68      	ldr	r3, [pc, #416]	; (8009b30 <udp_input+0x1bc>)
 8009990:	6819      	ldr	r1, [r3, #0]
 8009992:	6958      	ldr	r0, [r3, #20]
 8009994:	f000 ffdf 	bl	800a956 <ip4_addr_isbroadcast_u32>
 8009998:	4607      	mov	r7, r0

  LWIP_DEBUGF(UDP_DEBUG, ("udp_input: received datagram of length %"U16_F"\n", p->tot_len));

  /* convert src and dest ports to host byte order */
  src = lwip_ntohs(udphdr->src);
 800999a:	8820      	ldrh	r0, [r4, #0]
 800999c:	f7fa fde0 	bl	8004560 <lwip_htons>
 80099a0:	4682      	mov	sl, r0
  dest = lwip_ntohs(udphdr->dest);
 80099a2:	8860      	ldrh	r0, [r4, #2]
 80099a4:	f7fa fddc 	bl	8004560 <lwip_htons>
 80099a8:	4605      	mov	r5, r0
  uncon_pcb = NULL;
  /* Iterate through the UDP pcb list for a matching pcb.
   * 'Perfect match' pcbs (connected to the remote port & ip address) are
   * preferred. If no perfect match is found, the first unconnected pcb that
   * matches the local port and ip address gets the datagram. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 80099aa:	4b62      	ldr	r3, [pc, #392]	; (8009b34 <udp_input+0x1c0>)
 80099ac:	681c      	ldr	r4, [r3, #0]
 80099ae:	2c00      	cmp	r4, #0
 80099b0:	f000 8088 	beq.w	8009ac4 <udp_input+0x150>
  uncon_pcb = NULL;
 80099b4:	f04f 0b00 	mov.w	fp, #0
  prev = NULL;
 80099b8:	f8cd b00c 	str.w	fp, [sp, #12]
      }

      /* compare PCB remote addr+port to UDP source addr+port */
      if ((pcb->remote_port == src) &&
          (ip_addr_isany_val(pcb->remote_ip) ||
           ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()))) {
 80099bc:	f8df 8170 	ldr.w	r8, [pc, #368]	; 8009b30 <udp_input+0x1bc>
 80099c0:	e02c      	b.n	8009a1c <udp_input+0xa8>
  LWIP_ASSERT("udp_input: invalid pbuf", p != NULL);
 80099c2:	4b5d      	ldr	r3, [pc, #372]	; (8009b38 <udp_input+0x1c4>)
 80099c4:	22cf      	movs	r2, #207	; 0xcf
 80099c6:	495d      	ldr	r1, [pc, #372]	; (8009b3c <udp_input+0x1c8>)
 80099c8:	485d      	ldr	r0, [pc, #372]	; (8009b40 <udp_input+0x1cc>)
 80099ca:	f001 fd35 	bl	800b438 <iprintf>
 80099ce:	e7d7      	b.n	8009980 <udp_input+0xc>
  LWIP_ASSERT("udp_input: invalid netif", inp != NULL);
 80099d0:	4b59      	ldr	r3, [pc, #356]	; (8009b38 <udp_input+0x1c4>)
 80099d2:	22d0      	movs	r2, #208	; 0xd0
 80099d4:	495b      	ldr	r1, [pc, #364]	; (8009b44 <udp_input+0x1d0>)
 80099d6:	485a      	ldr	r0, [pc, #360]	; (8009b40 <udp_input+0x1cc>)
 80099d8:	f001 fd2e 	bl	800b438 <iprintf>
 80099dc:	e7d1      	b.n	8009982 <udp_input+0xe>
    pbuf_free(p);
 80099de:	4648      	mov	r0, r9
 80099e0:	f7fb fbe2 	bl	80051a8 <pbuf_free>
  UDP_STATS_INC(udp.drop);
  MIB2_STATS_INC(mib2.udpinerrors);
  pbuf_free(p);
  PERF_STOP("udp_input");
#endif /* CHECKSUM_CHECK_UDP */
}
 80099e4:	b005      	add	sp, #20
 80099e6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  LWIP_ASSERT("udp_input_local_match: invalid netif", inp != NULL);
 80099ea:	4b53      	ldr	r3, [pc, #332]	; (8009b38 <udp_input+0x1c4>)
 80099ec:	2288      	movs	r2, #136	; 0x88
 80099ee:	4956      	ldr	r1, [pc, #344]	; (8009b48 <udp_input+0x1d4>)
 80099f0:	4853      	ldr	r0, [pc, #332]	; (8009b40 <udp_input+0x1cc>)
 80099f2:	f001 fd21 	bl	800b438 <iprintf>
 80099f6:	e016      	b.n	8009a26 <udp_input+0xb2>
      if (ip_addr_isany(&pcb->local_ip) || ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 80099f8:	6823      	ldr	r3, [r4, #0]
 80099fa:	b11b      	cbz	r3, 8009a04 <udp_input+0x90>
 80099fc:	f8d8 2014 	ldr.w	r2, [r8, #20]
 8009a00:	4293      	cmp	r3, r2
 8009a02:	d106      	bne.n	8009a12 <udp_input+0x9e>
      if ((pcb->flags & UDP_FLAGS_CONNECTED) == 0) {
 8009a04:	7c23      	ldrb	r3, [r4, #16]
 8009a06:	f013 0f04 	tst.w	r3, #4
 8009a0a:	d025      	beq.n	8009a58 <udp_input+0xe4>
      if ((pcb->remote_port == src) &&
 8009a0c:	8aa3      	ldrh	r3, [r4, #20]
 8009a0e:	4553      	cmp	r3, sl
 8009a10:	d038      	beq.n	8009a84 <udp_input+0x110>
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8009a12:	68e3      	ldr	r3, [r4, #12]
 8009a14:	9403      	str	r4, [sp, #12]
 8009a16:	2b00      	cmp	r3, #0
 8009a18:	d051      	beq.n	8009abe <udp_input+0x14a>
 8009a1a:	461c      	mov	r4, r3
    if ((pcb->local_port == dest) &&
 8009a1c:	8a63      	ldrh	r3, [r4, #18]
 8009a1e:	42ab      	cmp	r3, r5
 8009a20:	d1f7      	bne.n	8009a12 <udp_input+0x9e>
  LWIP_ASSERT("udp_input_local_match: invalid netif", inp != NULL);
 8009a22:	2e00      	cmp	r6, #0
 8009a24:	d0e1      	beq.n	80099ea <udp_input+0x76>
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8009a26:	7a22      	ldrb	r2, [r4, #8]
 8009a28:	b13a      	cbz	r2, 8009a3a <udp_input+0xc6>
      (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 8009a2a:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8009a2e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8009a32:	3301      	adds	r3, #1
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8009a34:	b2db      	uxtb	r3, r3
 8009a36:	429a      	cmp	r2, r3
 8009a38:	d1eb      	bne.n	8009a12 <udp_input+0x9e>
    if (broadcast != 0) {
 8009a3a:	2f00      	cmp	r7, #0
 8009a3c:	d0dc      	beq.n	80099f8 <udp_input+0x84>
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 8009a3e:	6823      	ldr	r3, [r4, #0]
 8009a40:	2b00      	cmp	r3, #0
 8009a42:	d0df      	beq.n	8009a04 <udp_input+0x90>
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 8009a44:	f8d8 2014 	ldr.w	r2, [r8, #20]
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 8009a48:	f1b2 3fff 	cmp.w	r2, #4294967295
 8009a4c:	d0da      	beq.n	8009a04 <udp_input+0x90>
            ip4_addr_netcmp(ip_2_ip4(&pcb->local_ip), ip4_current_dest_addr(), netif_ip4_netmask(inp))) {
 8009a4e:	4053      	eors	r3, r2
 8009a50:	68b2      	ldr	r2, [r6, #8]
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 8009a52:	4213      	tst	r3, r2
 8009a54:	d1dd      	bne.n	8009a12 <udp_input+0x9e>
 8009a56:	e7d5      	b.n	8009a04 <udp_input+0x90>
        if (uncon_pcb == NULL) {
 8009a58:	f1bb 0f00 	cmp.w	fp, #0
 8009a5c:	d010      	beq.n	8009a80 <udp_input+0x10c>
        } else if (broadcast && ip4_current_dest_addr()->addr == IPADDR_BROADCAST) {
 8009a5e:	2f00      	cmp	r7, #0
 8009a60:	d0d4      	beq.n	8009a0c <udp_input+0x98>
 8009a62:	f8d8 3014 	ldr.w	r3, [r8, #20]
 8009a66:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009a6a:	d1cf      	bne.n	8009a0c <udp_input+0x98>
          if (!IP_IS_V4_VAL(uncon_pcb->local_ip) || !ip4_addr_cmp(ip_2_ip4(&uncon_pcb->local_ip), netif_ip4_addr(inp))) {
 8009a6c:	6873      	ldr	r3, [r6, #4]
 8009a6e:	f8db 2000 	ldr.w	r2, [fp]
 8009a72:	429a      	cmp	r2, r3
 8009a74:	d0ca      	beq.n	8009a0c <udp_input+0x98>
            if (IP_IS_V4_VAL(pcb->local_ip) && ip4_addr_cmp(ip_2_ip4(&pcb->local_ip), netif_ip4_addr(inp))) {
 8009a76:	6822      	ldr	r2, [r4, #0]
 8009a78:	4293      	cmp	r3, r2
 8009a7a:	bf08      	it	eq
 8009a7c:	46a3      	moveq	fp, r4
 8009a7e:	e7c5      	b.n	8009a0c <udp_input+0x98>
 8009a80:	46a3      	mov	fp, r4
 8009a82:	e7c3      	b.n	8009a0c <udp_input+0x98>
          (ip_addr_isany_val(pcb->remote_ip) ||
 8009a84:	6863      	ldr	r3, [r4, #4]
      if ((pcb->remote_port == src) &&
 8009a86:	b11b      	cbz	r3, 8009a90 <udp_input+0x11c>
          (ip_addr_isany_val(pcb->remote_ip) ||
 8009a88:	f8d8 2010 	ldr.w	r2, [r8, #16]
 8009a8c:	4293      	cmp	r3, r2
 8009a8e:	d1c0      	bne.n	8009a12 <udp_input+0x9e>
        if (prev != NULL) {
 8009a90:	9a03      	ldr	r2, [sp, #12]
 8009a92:	b12a      	cbz	r2, 8009aa0 <udp_input+0x12c>
          prev->next = pcb->next;
 8009a94:	68e3      	ldr	r3, [r4, #12]
 8009a96:	60d3      	str	r3, [r2, #12]
          pcb->next = udp_pcbs;
 8009a98:	4b26      	ldr	r3, [pc, #152]	; (8009b34 <udp_input+0x1c0>)
 8009a9a:	681a      	ldr	r2, [r3, #0]
 8009a9c:	60e2      	str	r2, [r4, #12]
          udp_pcbs = pcb;
 8009a9e:	601c      	str	r4, [r3, #0]
    if (pbuf_remove_header(p, UDP_HLEN)) {
 8009aa0:	2108      	movs	r1, #8
 8009aa2:	4648      	mov	r0, r9
 8009aa4:	f7fb fb40 	bl	8005128 <pbuf_remove_header>
 8009aa8:	bb08      	cbnz	r0, 8009aee <udp_input+0x17a>
      if (pcb->recv != NULL) {
 8009aaa:	69a5      	ldr	r5, [r4, #24]
 8009aac:	b355      	cbz	r5, 8009b04 <udp_input+0x190>
        pcb->recv(pcb->recv_arg, pcb, p, ip_current_src_addr(), src);
 8009aae:	69e0      	ldr	r0, [r4, #28]
 8009ab0:	f8cd a000 	str.w	sl, [sp]
 8009ab4:	4b25      	ldr	r3, [pc, #148]	; (8009b4c <udp_input+0x1d8>)
 8009ab6:	464a      	mov	r2, r9
 8009ab8:	4621      	mov	r1, r4
 8009aba:	47a8      	blx	r5
 8009abc:	e792      	b.n	80099e4 <udp_input+0x70>
  if (pcb != NULL) {
 8009abe:	f1bb 0f00 	cmp.w	fp, #0
 8009ac2:	d133      	bne.n	8009b2c <udp_input+0x1b8>
  if (for_us) {
 8009ac4:	6872      	ldr	r2, [r6, #4]
 8009ac6:	4b1a      	ldr	r3, [pc, #104]	; (8009b30 <udp_input+0x1bc>)
 8009ac8:	695b      	ldr	r3, [r3, #20]
 8009aca:	429a      	cmp	r2, r3
 8009acc:	d12a      	bne.n	8009b24 <udp_input+0x1b0>
    if (pbuf_remove_header(p, UDP_HLEN)) {
 8009ace:	2108      	movs	r1, #8
 8009ad0:	4648      	mov	r0, r9
 8009ad2:	f7fb fb29 	bl	8005128 <pbuf_remove_header>
 8009ad6:	b950      	cbnz	r0, 8009aee <udp_input+0x17a>
      if (!broadcast && !ip_addr_ismulticast(ip_current_dest_addr())) {
 8009ad8:	b92f      	cbnz	r7, 8009ae6 <udp_input+0x172>
 8009ada:	4b15      	ldr	r3, [pc, #84]	; (8009b30 <udp_input+0x1bc>)
 8009adc:	695b      	ldr	r3, [r3, #20]
 8009ade:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8009ae2:	2be0      	cmp	r3, #224	; 0xe0
 8009ae4:	d112      	bne.n	8009b0c <udp_input+0x198>
      pbuf_free(p);
 8009ae6:	4648      	mov	r0, r9
 8009ae8:	f7fb fb5e 	bl	80051a8 <pbuf_free>
 8009aec:	e77a      	b.n	80099e4 <udp_input+0x70>
      LWIP_ASSERT("pbuf_remove_header failed\n", 0);
 8009aee:	4b12      	ldr	r3, [pc, #72]	; (8009b38 <udp_input+0x1c4>)
 8009af0:	f44f 72b8 	mov.w	r2, #368	; 0x170
 8009af4:	4916      	ldr	r1, [pc, #88]	; (8009b50 <udp_input+0x1dc>)
 8009af6:	4812      	ldr	r0, [pc, #72]	; (8009b40 <udp_input+0x1cc>)
 8009af8:	f001 fc9e 	bl	800b438 <iprintf>
      pbuf_free(p);
 8009afc:	4648      	mov	r0, r9
 8009afe:	f7fb fb53 	bl	80051a8 <pbuf_free>
      goto end;
 8009b02:	e76f      	b.n	80099e4 <udp_input+0x70>
        pbuf_free(p);
 8009b04:	4648      	mov	r0, r9
 8009b06:	f7fb fb4f 	bl	80051a8 <pbuf_free>
        goto end;
 8009b0a:	e76b      	b.n	80099e4 <udp_input+0x70>
        pbuf_header_force(p, (s16_t)(ip_current_header_tot_len() + UDP_HLEN));
 8009b0c:	4b08      	ldr	r3, [pc, #32]	; (8009b30 <udp_input+0x1bc>)
 8009b0e:	8999      	ldrh	r1, [r3, #12]
 8009b10:	3108      	adds	r1, #8
 8009b12:	b209      	sxth	r1, r1
 8009b14:	4648      	mov	r0, r9
 8009b16:	f7fb fb3b 	bl	8005190 <pbuf_header_force>
        icmp_port_unreach(ip_current_is_v6(), p);
 8009b1a:	2103      	movs	r1, #3
 8009b1c:	4648      	mov	r0, r9
 8009b1e:	f000 fd51 	bl	800a5c4 <icmp_dest_unreach>
 8009b22:	e7e0      	b.n	8009ae6 <udp_input+0x172>
    pbuf_free(p);
 8009b24:	4648      	mov	r0, r9
 8009b26:	f7fb fb3f 	bl	80051a8 <pbuf_free>
  return;
 8009b2a:	e75b      	b.n	80099e4 <udp_input+0x70>
 8009b2c:	465c      	mov	r4, fp
 8009b2e:	e7b7      	b.n	8009aa0 <udp_input+0x12c>
 8009b30:	20005728 	.word	0x20005728
 8009b34:	2000aec0 	.word	0x2000aec0
 8009b38:	080120ac 	.word	0x080120ac
 8009b3c:	080120dc 	.word	0x080120dc
 8009b40:	0800cb24 	.word	0x0800cb24
 8009b44:	080120f4 	.word	0x080120f4
 8009b48:	08012110 	.word	0x08012110
 8009b4c:	20005738 	.word	0x20005738
 8009b50:	08012138 	.word	0x08012138

08009b54 <udp_netif_ip_addr_changed>:
 */
void udp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
  struct udp_pcb *upcb;

  if (!ip_addr_isany(old_addr) && !ip_addr_isany(new_addr)) {
 8009b54:	b1a8      	cbz	r0, 8009b82 <udp_netif_ip_addr_changed+0x2e>
 8009b56:	4602      	mov	r2, r0
 8009b58:	6803      	ldr	r3, [r0, #0]
 8009b5a:	b193      	cbz	r3, 8009b82 <udp_netif_ip_addr_changed+0x2e>
 8009b5c:	b189      	cbz	r1, 8009b82 <udp_netif_ip_addr_changed+0x2e>
 8009b5e:	680b      	ldr	r3, [r1, #0]
 8009b60:	b17b      	cbz	r3, 8009b82 <udp_netif_ip_addr_changed+0x2e>
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 8009b62:	4b08      	ldr	r3, [pc, #32]	; (8009b84 <udp_netif_ip_addr_changed+0x30>)
 8009b64:	681b      	ldr	r3, [r3, #0]
 8009b66:	b163      	cbz	r3, 8009b82 <udp_netif_ip_addr_changed+0x2e>
{
 8009b68:	b410      	push	{r4}
      /* PCB bound to current local interface address? */
      if (ip_addr_cmp(&upcb->local_ip, old_addr)) {
 8009b6a:	6810      	ldr	r0, [r2, #0]
 8009b6c:	681c      	ldr	r4, [r3, #0]
 8009b6e:	4284      	cmp	r4, r0
        /* The PCB is bound to the old ipaddr and
         * is set to bound to the new one instead */
        ip_addr_copy(upcb->local_ip, *new_addr);
 8009b70:	bf04      	itt	eq
 8009b72:	6808      	ldreq	r0, [r1, #0]
 8009b74:	6018      	streq	r0, [r3, #0]
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 8009b76:	68db      	ldr	r3, [r3, #12]
 8009b78:	2b00      	cmp	r3, #0
 8009b7a:	d1f6      	bne.n	8009b6a <udp_netif_ip_addr_changed+0x16>
      }
    }
  }
}
 8009b7c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009b80:	4770      	bx	lr
 8009b82:	4770      	bx	lr
 8009b84:	2000aec0 	.word	0x2000aec0

08009b88 <etharp_free_entry>:
#endif /* ARP_QUEUEING */

/** Clean up ARP table entries */
static void
etharp_free_entry(int i)
{
 8009b88:	b510      	push	{r4, lr}
 8009b8a:	4604      	mov	r4, r0
  /* remove from SNMP ARP index tree */
  mib2_remove_arp_entry(arp_table[i].netif, &arp_table[i].ipaddr);
  /* and empty packet queue */
  if (arp_table[i].q != NULL) {
 8009b8c:	eb00 0240 	add.w	r2, r0, r0, lsl #1
 8009b90:	4b09      	ldr	r3, [pc, #36]	; (8009bb8 <etharp_free_entry+0x30>)
 8009b92:	f853 0032 	ldr.w	r0, [r3, r2, lsl #3]
 8009b96:	b138      	cbz	r0, 8009ba8 <etharp_free_entry+0x20>
    /* remove all queued packets */
    LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_free_entry: freeing entry %"U16_F", packet queue %p.\n", (u16_t)i, (void *)(arp_table[i].q)));
    free_etharp_q(arp_table[i].q);
 8009b98:	f7fb fb06 	bl	80051a8 <pbuf_free>
    arp_table[i].q = NULL;
 8009b9c:	eb04 0344 	add.w	r3, r4, r4, lsl #1
 8009ba0:	00db      	lsls	r3, r3, #3
 8009ba2:	4a05      	ldr	r2, [pc, #20]	; (8009bb8 <etharp_free_entry+0x30>)
 8009ba4:	2100      	movs	r1, #0
 8009ba6:	50d1      	str	r1, [r2, r3]
  }
  /* recycle entry for re-use */
  arp_table[i].state = ETHARP_STATE_EMPTY;
 8009ba8:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 8009bac:	4802      	ldr	r0, [pc, #8]	; (8009bb8 <etharp_free_entry+0x30>)
 8009bae:	eb00 04c4 	add.w	r4, r0, r4, lsl #3
 8009bb2:	2300      	movs	r3, #0
 8009bb4:	7523      	strb	r3, [r4, #20]
  arp_table[i].ctime = 0;
  arp_table[i].netif = NULL;
  ip4_addr_set_zero(&arp_table[i].ipaddr);
  arp_table[i].ethaddr = ethzero;
#endif /* LWIP_DEBUG */
}
 8009bb6:	bd10      	pop	{r4, pc}
 8009bb8:	2000aec4 	.word	0x2000aec4

08009bbc <etharp_find_entry>:
 * @return The ARP entry index that matched or is created, ERR_MEM if no
 * entry is found or could be recycled.
 */
static s16_t
etharp_find_entry(const ip4_addr_t *ipaddr, u8_t flags, struct netif *netif)
{
 8009bbc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009bc0:	b085      	sub	sp, #20
 8009bc2:	4606      	mov	r6, r0
 8009bc4:	4617      	mov	r7, r2
   * 4) remember the oldest pending entry with queued packets (if any)
   * 5) search for a matching IP entry, either pending or stable
   *    until 5 matches, or all entries are searched for.
   */

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8009bc6:	4c4f      	ldr	r4, [pc, #316]	; (8009d04 <etharp_find_entry+0x148>)
{
 8009bc8:	2300      	movs	r3, #0
  u16_t age_queue = 0, age_pending = 0, age_stable = 0;
 8009bca:	4699      	mov	r9, r3
 8009bcc:	9302      	str	r3, [sp, #8]
 8009bce:	469b      	mov	fp, r3
  s16_t old_queue = ARP_TABLE_SIZE;
 8009bd0:	200a      	movs	r0, #10
  s16_t empty = ARP_TABLE_SIZE;
 8009bd2:	4605      	mov	r5, r0
  s16_t old_pending = ARP_TABLE_SIZE, old_stable = ARP_TABLE_SIZE;
 8009bd4:	4680      	mov	r8, r0
 8009bd6:	9003      	str	r0, [sp, #12]
 8009bd8:	4682      	mov	sl, r0
 8009bda:	9101      	str	r1, [sp, #4]
 8009bdc:	e007      	b.n	8009bee <etharp_find_entry+0x32>
    u8_t state = arp_table[i].state;
    /* no empty entry found yet and now we do find one? */
    if ((empty == ARP_TABLE_SIZE) && (state == ETHARP_STATE_EMPTY)) {
 8009bde:	f1bc 0f00 	cmp.w	ip, #0
 8009be2:	d10e      	bne.n	8009c02 <etharp_find_entry+0x46>
 8009be4:	4675      	mov	r5, lr
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8009be6:	3301      	adds	r3, #1
 8009be8:	3418      	adds	r4, #24
 8009bea:	2b0a      	cmp	r3, #10
 8009bec:	d02e      	beq.n	8009c4c <etharp_find_entry+0x90>
 8009bee:	fa0f fe83 	sxth.w	lr, r3
    u8_t state = arp_table[i].state;
 8009bf2:	4622      	mov	r2, r4
 8009bf4:	f894 c014 	ldrb.w	ip, [r4, #20]
    if ((empty == ARP_TABLE_SIZE) && (state == ETHARP_STATE_EMPTY)) {
 8009bf8:	2d0a      	cmp	r5, #10
 8009bfa:	d0f0      	beq.n	8009bde <etharp_find_entry+0x22>
      LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_find_entry: found empty entry %d\n", (int)i));
      /* remember first empty entry */
      empty = i;
    } else if (state != ETHARP_STATE_EMPTY) {
 8009bfc:	f1bc 0f00 	cmp.w	ip, #0
 8009c00:	d0f1      	beq.n	8009be6 <etharp_find_entry+0x2a>
      LWIP_ASSERT("state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE",
                  state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE);
      /* if given, does IP address match IP address in ARP entry? */
      if (ipaddr && ip4_addr_cmp(ipaddr, &arp_table[i].ipaddr)
 8009c02:	b11e      	cbz	r6, 8009c0c <etharp_find_entry+0x50>
 8009c04:	6831      	ldr	r1, [r6, #0]
 8009c06:	6850      	ldr	r0, [r2, #4]
 8009c08:	4281      	cmp	r1, r0
 8009c0a:	d008      	beq.n	8009c1e <etharp_find_entry+0x62>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: found matching entry %d\n", (int)i));
        /* found exact IP address match, simply bail out */
        return i;
      }
      /* pending entry? */
      if (state == ETHARP_STATE_PENDING) {
 8009c0c:	f1bc 0f01 	cmp.w	ip, #1
 8009c10:	d00c      	beq.n	8009c2c <etharp_find_entry+0x70>
        /* don't record old_stable for static entries since they never expire */
        if (state < ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
        {
          /* remember entry with oldest stable entry in oldest, its age in maxtime */
          if (arp_table[i].ctime >= age_stable) {
 8009c12:	8a52      	ldrh	r2, [r2, #18]
 8009c14:	454a      	cmp	r2, r9
 8009c16:	d3e6      	bcc.n	8009be6 <etharp_find_entry+0x2a>
            old_stable = i;
            age_stable = arp_table[i].ctime;
 8009c18:	4691      	mov	r9, r2
          if (arp_table[i].ctime >= age_stable) {
 8009c1a:	46f0      	mov	r8, lr
 8009c1c:	e7e3      	b.n	8009be6 <etharp_find_entry+0x2a>
          && ((netif == NULL) || (netif == arp_table[i].netif))
 8009c1e:	2f00      	cmp	r7, #0
 8009c20:	d064      	beq.n	8009cec <etharp_find_entry+0x130>
 8009c22:	6891      	ldr	r1, [r2, #8]
 8009c24:	42b9      	cmp	r1, r7
 8009c26:	d1f1      	bne.n	8009c0c <etharp_find_entry+0x50>
 8009c28:	4675      	mov	r5, lr
 8009c2a:	e031      	b.n	8009c90 <etharp_find_entry+0xd4>
        if (arp_table[i].q != NULL) {
 8009c2c:	6811      	ldr	r1, [r2, #0]
 8009c2e:	b129      	cbz	r1, 8009c3c <etharp_find_entry+0x80>
          if (arp_table[i].ctime >= age_queue) {
 8009c30:	8a52      	ldrh	r2, [r2, #18]
 8009c32:	455a      	cmp	r2, fp
 8009c34:	d3d7      	bcc.n	8009be6 <etharp_find_entry+0x2a>
            age_queue = arp_table[i].ctime;
 8009c36:	4693      	mov	fp, r2
          if (arp_table[i].ctime >= age_queue) {
 8009c38:	46f2      	mov	sl, lr
 8009c3a:	e7d4      	b.n	8009be6 <etharp_find_entry+0x2a>
          if (arp_table[i].ctime >= age_pending) {
 8009c3c:	8a52      	ldrh	r2, [r2, #18]
 8009c3e:	9902      	ldr	r1, [sp, #8]
 8009c40:	428a      	cmp	r2, r1
 8009c42:	d3d0      	bcc.n	8009be6 <etharp_find_entry+0x2a>
            age_pending = arp_table[i].ctime;
 8009c44:	9202      	str	r2, [sp, #8]
          if (arp_table[i].ctime >= age_pending) {
 8009c46:	f8cd e00c 	str.w	lr, [sp, #12]
 8009c4a:	e7cc      	b.n	8009be6 <etharp_find_entry+0x2a>
    }
  }
  /* { we have no match } => try to create a new entry */

  /* don't create new entry, only search? */
  if (((flags & ETHARP_FLAG_FIND_ONLY) != 0) ||
 8009c4c:	4650      	mov	r0, sl
 8009c4e:	9901      	ldr	r1, [sp, #4]
 8009c50:	f011 0f02 	tst.w	r1, #2
 8009c54:	d14c      	bne.n	8009cf0 <etharp_find_entry+0x134>
 8009c56:	2d0a      	cmp	r5, #10
 8009c58:	d01e      	beq.n	8009c98 <etharp_find_entry+0xdc>
   *
   * { ETHARP_FLAG_TRY_HARD is set at this point }
   */

  /* 1) empty entry available? */
  if (empty < ARP_TABLE_SIZE) {
 8009c5a:	2d09      	cmp	r5, #9
 8009c5c:	dc1f      	bgt.n	8009c9e <etharp_find_entry+0xe2>
    LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
    etharp_free_entry(i);
  }

  LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
  LWIP_ASSERT("arp_table[i].state == ETHARP_STATE_EMPTY",
 8009c5e:	462c      	mov	r4, r5
 8009c60:	eb05 0345 	add.w	r3, r5, r5, lsl #1
 8009c64:	4a27      	ldr	r2, [pc, #156]	; (8009d04 <etharp_find_entry+0x148>)
 8009c66:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8009c6a:	7d1b      	ldrb	r3, [r3, #20]
 8009c6c:	2b00      	cmp	r3, #0
 8009c6e:	d135      	bne.n	8009cdc <etharp_find_entry+0x120>
              arp_table[i].state == ETHARP_STATE_EMPTY);

  /* IP address given? */
  if (ipaddr != NULL) {
 8009c70:	b136      	cbz	r6, 8009c80 <etharp_find_entry+0xc4>
    /* set IP address */
    ip4_addr_copy(arp_table[i].ipaddr, *ipaddr);
 8009c72:	6831      	ldr	r1, [r6, #0]
 8009c74:	eb04 0344 	add.w	r3, r4, r4, lsl #1
 8009c78:	4a22      	ldr	r2, [pc, #136]	; (8009d04 <etharp_find_entry+0x148>)
 8009c7a:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8009c7e:	6059      	str	r1, [r3, #4]
  }
  arp_table[i].ctime = 0;
 8009c80:	4b20      	ldr	r3, [pc, #128]	; (8009d04 <etharp_find_entry+0x148>)
 8009c82:	eb04 0244 	add.w	r2, r4, r4, lsl #1
 8009c86:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
 8009c8a:	2100      	movs	r1, #0
 8009c8c:	8251      	strh	r1, [r2, #18]
#if ETHARP_TABLE_MATCH_NETIF
  arp_table[i].netif = netif;
 8009c8e:	6097      	str	r7, [r2, #8]
#endif /* ETHARP_TABLE_MATCH_NETIF */
  return (s16_t)i;
}
 8009c90:	4628      	mov	r0, r5
 8009c92:	b005      	add	sp, #20
 8009c94:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      ((empty == ARP_TABLE_SIZE) && ((flags & ETHARP_FLAG_TRY_HARD) == 0))) {
 8009c98:	f011 0f01 	tst.w	r1, #1
 8009c9c:	d02b      	beq.n	8009cf6 <etharp_find_entry+0x13a>
    if (old_stable < ARP_TABLE_SIZE) {
 8009c9e:	f1b8 0f09 	cmp.w	r8, #9
 8009ca2:	dc11      	bgt.n	8009cc8 <etharp_find_entry+0x10c>
      LWIP_ASSERT("arp_table[i].q == NULL", arp_table[i].q == NULL);
 8009ca4:	eb08 0348 	add.w	r3, r8, r8, lsl #1
 8009ca8:	4a16      	ldr	r2, [pc, #88]	; (8009d04 <etharp_find_entry+0x148>)
 8009caa:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8009cae:	b133      	cbz	r3, 8009cbe <etharp_find_entry+0x102>
 8009cb0:	4b15      	ldr	r3, [pc, #84]	; (8009d08 <etharp_find_entry+0x14c>)
 8009cb2:	f240 126d 	movw	r2, #365	; 0x16d
 8009cb6:	4915      	ldr	r1, [pc, #84]	; (8009d0c <etharp_find_entry+0x150>)
 8009cb8:	4815      	ldr	r0, [pc, #84]	; (8009d10 <etharp_find_entry+0x154>)
 8009cba:	f001 fbbd 	bl	800b438 <iprintf>
    etharp_free_entry(i);
 8009cbe:	4640      	mov	r0, r8
 8009cc0:	f7ff ff62 	bl	8009b88 <etharp_free_entry>
 8009cc4:	4645      	mov	r5, r8
 8009cc6:	e7ca      	b.n	8009c5e <etharp_find_entry+0xa2>
    } else if (old_pending < ARP_TABLE_SIZE) {
 8009cc8:	9b03      	ldr	r3, [sp, #12]
 8009cca:	2b09      	cmp	r3, #9
 8009ccc:	dd16      	ble.n	8009cfc <etharp_find_entry+0x140>
    } else if (old_queue < ARP_TABLE_SIZE) {
 8009cce:	2809      	cmp	r0, #9
      return (s16_t)ERR_MEM;
 8009cd0:	bfc8      	it	gt
 8009cd2:	f04f 35ff 	movgt.w	r5, #4294967295
    } else if (old_queue < ARP_TABLE_SIZE) {
 8009cd6:	dcdb      	bgt.n	8009c90 <etharp_find_entry+0xd4>
 8009cd8:	4680      	mov	r8, r0
 8009cda:	e7f0      	b.n	8009cbe <etharp_find_entry+0x102>
  LWIP_ASSERT("arp_table[i].state == ETHARP_STATE_EMPTY",
 8009cdc:	4b0a      	ldr	r3, [pc, #40]	; (8009d08 <etharp_find_entry+0x14c>)
 8009cde:	f44f 72c2 	mov.w	r2, #388	; 0x184
 8009ce2:	490c      	ldr	r1, [pc, #48]	; (8009d14 <etharp_find_entry+0x158>)
 8009ce4:	480a      	ldr	r0, [pc, #40]	; (8009d10 <etharp_find_entry+0x154>)
 8009ce6:	f001 fba7 	bl	800b438 <iprintf>
 8009cea:	e7c1      	b.n	8009c70 <etharp_find_entry+0xb4>
 8009cec:	4675      	mov	r5, lr
 8009cee:	e7cf      	b.n	8009c90 <etharp_find_entry+0xd4>
    return (s16_t)ERR_MEM;
 8009cf0:	f04f 35ff 	mov.w	r5, #4294967295
 8009cf4:	e7cc      	b.n	8009c90 <etharp_find_entry+0xd4>
 8009cf6:	f04f 35ff 	mov.w	r5, #4294967295
 8009cfa:	e7c9      	b.n	8009c90 <etharp_find_entry+0xd4>
 8009cfc:	f8dd 800c 	ldr.w	r8, [sp, #12]
 8009d00:	e7dd      	b.n	8009cbe <etharp_find_entry+0x102>
 8009d02:	bf00      	nop
 8009d04:	2000aec4 	.word	0x2000aec4
 8009d08:	08012154 	.word	0x08012154
 8009d0c:	0801218c 	.word	0x0801218c
 8009d10:	0800cb24 	.word	0x0800cb24
 8009d14:	080121a4 	.word	0x080121a4

08009d18 <etharp_raw>:
etharp_raw(struct netif *netif, const struct eth_addr *ethsrc_addr,
           const struct eth_addr *ethdst_addr,
           const struct eth_addr *hwsrc_addr, const ip4_addr_t *ipsrc_addr,
           const struct eth_addr *hwdst_addr, const ip4_addr_t *ipdst_addr,
           const u16_t opcode)
{
 8009d18:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009d1c:	b082      	sub	sp, #8
 8009d1e:	460f      	mov	r7, r1
 8009d20:	4690      	mov	r8, r2
 8009d22:	461d      	mov	r5, r3
 8009d24:	f8dd a02c 	ldr.w	sl, [sp, #44]	; 0x2c
  struct pbuf *p;
  err_t result = ERR_OK;
  struct etharp_hdr *hdr;

  LWIP_ASSERT("netif != NULL", netif != NULL);
 8009d28:	4681      	mov	r9, r0
 8009d2a:	2800      	cmp	r0, #0
 8009d2c:	d042      	beq.n	8009db4 <etharp_raw+0x9c>

  /* allocate a pbuf for the outgoing ARP request packet */
  p = pbuf_alloc(PBUF_LINK, SIZEOF_ETHARP_HDR, PBUF_RAM);
 8009d2e:	f44f 7220 	mov.w	r2, #640	; 0x280
 8009d32:	211c      	movs	r1, #28
 8009d34:	200e      	movs	r0, #14
 8009d36:	f7fb faa1 	bl	800527c <pbuf_alloc>
  /* could allocate a pbuf for an ARP request? */
  if (p == NULL) {
 8009d3a:	4606      	mov	r6, r0
 8009d3c:	2800      	cmp	r0, #0
 8009d3e:	d051      	beq.n	8009de4 <etharp_raw+0xcc>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("etharp_raw: could not allocate pbuf for ARP request.\n"));
    ETHARP_STATS_INC(etharp.memerr);
    return ERR_MEM;
  }
  LWIP_ASSERT("check that first pbuf can hold struct etharp_hdr",
 8009d40:	8943      	ldrh	r3, [r0, #10]
 8009d42:	2b1b      	cmp	r3, #27
 8009d44:	d93e      	bls.n	8009dc4 <etharp_raw+0xac>
              (p->len >= SIZEOF_ETHARP_HDR));

  hdr = (struct etharp_hdr *)p->payload;
 8009d46:	6874      	ldr	r4, [r6, #4]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_raw: sending raw ARP packet.\n"));
  hdr->opcode = lwip_htons(opcode);
 8009d48:	f8bd 0034 	ldrh.w	r0, [sp, #52]	; 0x34
 8009d4c:	f7fa fc08 	bl	8004560 <lwip_htons>
 8009d50:	80e0      	strh	r0, [r4, #6]

  LWIP_ASSERT("netif->hwaddr_len must be the same as ETH_HWADDR_LEN for etharp!",
 8009d52:	f899 302c 	ldrb.w	r3, [r9, #44]	; 0x2c
 8009d56:	2b06      	cmp	r3, #6
 8009d58:	d13c      	bne.n	8009dd4 <etharp_raw+0xbc>
              (netif->hwaddr_len == ETH_HWADDR_LEN));

  /* Write the ARP MAC-Addresses */
  SMEMCPY(&hdr->shwaddr, hwsrc_addr, ETH_HWADDR_LEN);
 8009d5a:	682b      	ldr	r3, [r5, #0]
 8009d5c:	60a3      	str	r3, [r4, #8]
 8009d5e:	88ab      	ldrh	r3, [r5, #4]
 8009d60:	81a3      	strh	r3, [r4, #12]
  SMEMCPY(&hdr->dhwaddr, hwdst_addr, ETH_HWADDR_LEN);
 8009d62:	f8da 3000 	ldr.w	r3, [sl]
 8009d66:	f8c4 3012 	str.w	r3, [r4, #18]
 8009d6a:	f8ba 3004 	ldrh.w	r3, [sl, #4]
 8009d6e:	82e3      	strh	r3, [r4, #22]
  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing. */
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->sipaddr, ipsrc_addr);
 8009d70:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009d72:	681b      	ldr	r3, [r3, #0]
 8009d74:	f8c4 300e 	str.w	r3, [r4, #14]
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->dipaddr, ipdst_addr);
 8009d78:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8009d7a:	681b      	ldr	r3, [r3, #0]
 8009d7c:	61a3      	str	r3, [r4, #24]

  hdr->hwtype = PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET);
 8009d7e:	2500      	movs	r5, #0
 8009d80:	7025      	strb	r5, [r4, #0]
 8009d82:	2301      	movs	r3, #1
 8009d84:	7063      	strb	r3, [r4, #1]
  hdr->proto = PP_HTONS(ETHTYPE_IP);
 8009d86:	2308      	movs	r3, #8
 8009d88:	70a3      	strb	r3, [r4, #2]
 8009d8a:	70e5      	strb	r5, [r4, #3]
  /* set hwlen and protolen */
  hdr->hwlen = ETH_HWADDR_LEN;
 8009d8c:	2306      	movs	r3, #6
 8009d8e:	7123      	strb	r3, [r4, #4]
  hdr->protolen = sizeof(ip4_addr_t);
 8009d90:	2304      	movs	r3, #4
 8009d92:	7163      	strb	r3, [r4, #5]
  if (ip4_addr_islinklocal(ipsrc_addr)) {
    ethernet_output(netif, p, ethsrc_addr, &ethbroadcast, ETHTYPE_ARP);
  } else
#endif /* LWIP_AUTOIP */
  {
    ethernet_output(netif, p, ethsrc_addr, ethdst_addr, ETHTYPE_ARP);
 8009d94:	f640 0306 	movw	r3, #2054	; 0x806
 8009d98:	9300      	str	r3, [sp, #0]
 8009d9a:	4643      	mov	r3, r8
 8009d9c:	463a      	mov	r2, r7
 8009d9e:	4631      	mov	r1, r6
 8009da0:	4648      	mov	r0, r9
 8009da2:	f001 faa9 	bl	800b2f8 <ethernet_output>
  }

  ETHARP_STATS_INC(etharp.xmit);
  /* free ARP query packet */
  pbuf_free(p);
 8009da6:	4630      	mov	r0, r6
 8009da8:	f7fb f9fe 	bl	80051a8 <pbuf_free>
  p = NULL;
  /* could not allocate pbuf for ARP request */

  return result;
 8009dac:	4628      	mov	r0, r5
}
 8009dae:	b002      	add	sp, #8
 8009db0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  LWIP_ASSERT("netif != NULL", netif != NULL);
 8009db4:	4b0d      	ldr	r3, [pc, #52]	; (8009dec <etharp_raw+0xd4>)
 8009db6:	f240 4257 	movw	r2, #1111	; 0x457
 8009dba:	490d      	ldr	r1, [pc, #52]	; (8009df0 <etharp_raw+0xd8>)
 8009dbc:	480d      	ldr	r0, [pc, #52]	; (8009df4 <etharp_raw+0xdc>)
 8009dbe:	f001 fb3b 	bl	800b438 <iprintf>
 8009dc2:	e7b4      	b.n	8009d2e <etharp_raw+0x16>
  LWIP_ASSERT("check that first pbuf can hold struct etharp_hdr",
 8009dc4:	4b09      	ldr	r3, [pc, #36]	; (8009dec <etharp_raw+0xd4>)
 8009dc6:	f240 4262 	movw	r2, #1122	; 0x462
 8009dca:	490b      	ldr	r1, [pc, #44]	; (8009df8 <etharp_raw+0xe0>)
 8009dcc:	4809      	ldr	r0, [pc, #36]	; (8009df4 <etharp_raw+0xdc>)
 8009dce:	f001 fb33 	bl	800b438 <iprintf>
 8009dd2:	e7b8      	b.n	8009d46 <etharp_raw+0x2e>
  LWIP_ASSERT("netif->hwaddr_len must be the same as ETH_HWADDR_LEN for etharp!",
 8009dd4:	4b05      	ldr	r3, [pc, #20]	; (8009dec <etharp_raw+0xd4>)
 8009dd6:	f240 4269 	movw	r2, #1129	; 0x469
 8009dda:	4908      	ldr	r1, [pc, #32]	; (8009dfc <etharp_raw+0xe4>)
 8009ddc:	4805      	ldr	r0, [pc, #20]	; (8009df4 <etharp_raw+0xdc>)
 8009dde:	f001 fb2b 	bl	800b438 <iprintf>
 8009de2:	e7ba      	b.n	8009d5a <etharp_raw+0x42>
    return ERR_MEM;
 8009de4:	f04f 30ff 	mov.w	r0, #4294967295
 8009de8:	e7e1      	b.n	8009dae <etharp_raw+0x96>
 8009dea:	bf00      	nop
 8009dec:	08012154 	.word	0x08012154
 8009df0:	0800cb14 	.word	0x0800cb14
 8009df4:	0800cb24 	.word	0x0800cb24
 8009df8:	080121d0 	.word	0x080121d0
 8009dfc:	08012204 	.word	0x08012204

08009e00 <etharp_cleanup_netif>:
{
 8009e00:	b570      	push	{r4, r5, r6, lr}
 8009e02:	4606      	mov	r6, r0
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8009e04:	4c08      	ldr	r4, [pc, #32]	; (8009e28 <etharp_cleanup_netif+0x28>)
 8009e06:	2500      	movs	r5, #0
 8009e08:	e003      	b.n	8009e12 <etharp_cleanup_netif+0x12>
 8009e0a:	3501      	adds	r5, #1
 8009e0c:	3418      	adds	r4, #24
 8009e0e:	2d0a      	cmp	r5, #10
 8009e10:	d009      	beq.n	8009e26 <etharp_cleanup_netif+0x26>
    if ((state != ETHARP_STATE_EMPTY) && (arp_table[i].netif == netif)) {
 8009e12:	7d23      	ldrb	r3, [r4, #20]
 8009e14:	2b00      	cmp	r3, #0
 8009e16:	d0f8      	beq.n	8009e0a <etharp_cleanup_netif+0xa>
 8009e18:	68a3      	ldr	r3, [r4, #8]
 8009e1a:	42b3      	cmp	r3, r6
 8009e1c:	d1f5      	bne.n	8009e0a <etharp_cleanup_netif+0xa>
      etharp_free_entry(i);
 8009e1e:	4628      	mov	r0, r5
 8009e20:	f7ff feb2 	bl	8009b88 <etharp_free_entry>
 8009e24:	e7f1      	b.n	8009e0a <etharp_cleanup_netif+0xa>
}
 8009e26:	bd70      	pop	{r4, r5, r6, pc}
 8009e28:	2000aec4 	.word	0x2000aec4

08009e2c <etharp_input>:
{
 8009e2c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8009e30:	b087      	sub	sp, #28
  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 8009e32:	b1a9      	cbz	r1, 8009e60 <etharp_input+0x34>
 8009e34:	4604      	mov	r4, r0
 8009e36:	460e      	mov	r6, r1
  hdr = (struct etharp_hdr *)p->payload;
 8009e38:	6845      	ldr	r5, [r0, #4]
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 8009e3a:	882b      	ldrh	r3, [r5, #0]
 8009e3c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009e40:	d108      	bne.n	8009e54 <etharp_input+0x28>
 8009e42:	792b      	ldrb	r3, [r5, #4]
 8009e44:	2b06      	cmp	r3, #6
 8009e46:	d105      	bne.n	8009e54 <etharp_input+0x28>
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 8009e48:	796b      	ldrb	r3, [r5, #5]
 8009e4a:	2b04      	cmp	r3, #4
 8009e4c:	d102      	bne.n	8009e54 <etharp_input+0x28>
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 8009e4e:	886b      	ldrh	r3, [r5, #2]
 8009e50:	2b08      	cmp	r3, #8
 8009e52:	d00d      	beq.n	8009e70 <etharp_input+0x44>
    pbuf_free(p);
 8009e54:	4620      	mov	r0, r4
 8009e56:	f7fb f9a7 	bl	80051a8 <pbuf_free>
}
 8009e5a:	b007      	add	sp, #28
 8009e5c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 8009e60:	4b44      	ldr	r3, [pc, #272]	; (8009f74 <etharp_input+0x148>)
 8009e62:	f240 228a 	movw	r2, #650	; 0x28a
 8009e66:	4944      	ldr	r1, [pc, #272]	; (8009f78 <etharp_input+0x14c>)
 8009e68:	4844      	ldr	r0, [pc, #272]	; (8009f7c <etharp_input+0x150>)
 8009e6a:	f001 fae5 	bl	800b438 <iprintf>
 8009e6e:	e7f4      	b.n	8009e5a <etharp_input+0x2e>
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&sipaddr, &hdr->sipaddr);
 8009e70:	f8d5 300e 	ldr.w	r3, [r5, #14]
 8009e74:	9305      	str	r3, [sp, #20]
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&dipaddr, &hdr->dipaddr);
 8009e76:	69aa      	ldr	r2, [r5, #24]
  if (ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 8009e78:	684b      	ldr	r3, [r1, #4]
 8009e7a:	2b00      	cmp	r3, #0
 8009e7c:	d153      	bne.n	8009f26 <etharp_input+0xfa>
  etharp_update_arp_entry(netif, &sipaddr, &(hdr->shwaddr),
 8009e7e:	f105 0708 	add.w	r7, r5, #8
    for_us = 0;
 8009e82:	f04f 0900 	mov.w	r9, #0
  etharp_update_arp_entry(netif, &sipaddr, &(hdr->shwaddr),
 8009e86:	f04f 0802 	mov.w	r8, #2
  LWIP_ASSERT("netif->hwaddr_len == ETH_HWADDR_LEN", netif->hwaddr_len == ETH_HWADDR_LEN);
 8009e8a:	f896 302c 	ldrb.w	r3, [r6, #44]	; 0x2c
 8009e8e:	2b06      	cmp	r3, #6
 8009e90:	d155      	bne.n	8009f3e <etharp_input+0x112>
  if (ip4_addr_isany(ipaddr) ||
 8009e92:	9805      	ldr	r0, [sp, #20]
 8009e94:	2800      	cmp	r0, #0
 8009e96:	d03e      	beq.n	8009f16 <etharp_input+0xea>
      ip4_addr_isbroadcast(ipaddr, netif) ||
 8009e98:	4631      	mov	r1, r6
 8009e9a:	f000 fd5c 	bl	800a956 <ip4_addr_isbroadcast_u32>
  if (ip4_addr_isany(ipaddr) ||
 8009e9e:	2800      	cmp	r0, #0
 8009ea0:	d139      	bne.n	8009f16 <etharp_input+0xea>
      ip4_addr_ismulticast(ipaddr)) {
 8009ea2:	9b05      	ldr	r3, [sp, #20]
 8009ea4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
      ip4_addr_isbroadcast(ipaddr, netif) ||
 8009ea8:	2be0      	cmp	r3, #224	; 0xe0
 8009eaa:	d034      	beq.n	8009f16 <etharp_input+0xea>
  i = etharp_find_entry(ipaddr, flags, netif);
 8009eac:	4632      	mov	r2, r6
 8009eae:	4641      	mov	r1, r8
 8009eb0:	a805      	add	r0, sp, #20
 8009eb2:	f7ff fe83 	bl	8009bbc <etharp_find_entry>
  if (i < 0) {
 8009eb6:	1e03      	subs	r3, r0, #0
 8009eb8:	db2d      	blt.n	8009f16 <etharp_input+0xea>
    arp_table[i].state = ETHARP_STATE_STABLE;
 8009eba:	4931      	ldr	r1, [pc, #196]	; (8009f80 <etharp_input+0x154>)
 8009ebc:	eb03 0e43 	add.w	lr, r3, r3, lsl #1
 8009ec0:	eb01 0cce 	add.w	ip, r1, lr, lsl #3
 8009ec4:	2202      	movs	r2, #2
 8009ec6:	f88c 2014 	strb.w	r2, [ip, #20]
  arp_table[i].netif = netif;
 8009eca:	f8cc 6008 	str.w	r6, [ip, #8]
  SMEMCPY(&arp_table[i].ethaddr, ethaddr, ETH_HWADDR_LEN);
 8009ece:	4672      	mov	r2, lr
 8009ed0:	00d2      	lsls	r2, r2, #3
 8009ed2:	320c      	adds	r2, #12
 8009ed4:	eb01 0802 	add.w	r8, r1, r2
 8009ed8:	6838      	ldr	r0, [r7, #0]
 8009eda:	5088      	str	r0, [r1, r2]
 8009edc:	88ba      	ldrh	r2, [r7, #4]
 8009ede:	f8a8 2004 	strh.w	r2, [r8, #4]
  arp_table[i].ctime = 0;
 8009ee2:	2200      	movs	r2, #0
 8009ee4:	f8ac 2012 	strh.w	r2, [ip, #18]
  if (arp_table[i].q != NULL) {
 8009ee8:	f851 803e 	ldr.w	r8, [r1, lr, lsl #3]
 8009eec:	f1b8 0f00 	cmp.w	r8, #0
 8009ef0:	d011      	beq.n	8009f16 <etharp_input+0xea>
    arp_table[i].q = NULL;
 8009ef2:	4673      	mov	r3, lr
 8009ef4:	00db      	lsls	r3, r3, #3
 8009ef6:	460a      	mov	r2, r1
 8009ef8:	2100      	movs	r1, #0
 8009efa:	50d1      	str	r1, [r2, r3]
    ethernet_output(netif, p, (struct eth_addr *)(netif->hwaddr), ethaddr, ETHTYPE_IP);
 8009efc:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8009f00:	9300      	str	r3, [sp, #0]
 8009f02:	463b      	mov	r3, r7
 8009f04:	f106 0226 	add.w	r2, r6, #38	; 0x26
 8009f08:	4641      	mov	r1, r8
 8009f0a:	4630      	mov	r0, r6
 8009f0c:	f001 f9f4 	bl	800b2f8 <ethernet_output>
    pbuf_free(p);
 8009f10:	4640      	mov	r0, r8
 8009f12:	f7fb f949 	bl	80051a8 <pbuf_free>
  switch (hdr->opcode) {
 8009f16:	88eb      	ldrh	r3, [r5, #6]
 8009f18:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009f1c:	d017      	beq.n	8009f4e <etharp_input+0x122>
  pbuf_free(p);
 8009f1e:	4620      	mov	r0, r4
 8009f20:	f7fb f942 	bl	80051a8 <pbuf_free>
 8009f24:	e799      	b.n	8009e5a <etharp_input+0x2e>
  etharp_update_arp_entry(netif, &sipaddr, &(hdr->shwaddr),
 8009f26:	f105 0708 	add.w	r7, r5, #8
 8009f2a:	4293      	cmp	r3, r2
    for_us = (u8_t)ip4_addr_cmp(&dipaddr, netif_ip4_addr(netif));
 8009f2c:	bf19      	ittee	ne
 8009f2e:	f04f 0900 	movne.w	r9, #0
  etharp_update_arp_entry(netif, &sipaddr, &(hdr->shwaddr),
 8009f32:	f04f 0802 	movne.w	r8, #2
    for_us = (u8_t)ip4_addr_cmp(&dipaddr, netif_ip4_addr(netif));
 8009f36:	f04f 0901 	moveq.w	r9, #1
  etharp_update_arp_entry(netif, &sipaddr, &(hdr->shwaddr),
 8009f3a:	46c8      	moveq	r8, r9
 8009f3c:	e7a5      	b.n	8009e8a <etharp_input+0x5e>
  LWIP_ASSERT("netif->hwaddr_len == ETH_HWADDR_LEN", netif->hwaddr_len == ETH_HWADDR_LEN);
 8009f3e:	4b0d      	ldr	r3, [pc, #52]	; (8009f74 <etharp_input+0x148>)
 8009f40:	f240 12a9 	movw	r2, #425	; 0x1a9
 8009f44:	490f      	ldr	r1, [pc, #60]	; (8009f84 <etharp_input+0x158>)
 8009f46:	480d      	ldr	r0, [pc, #52]	; (8009f7c <etharp_input+0x150>)
 8009f48:	f001 fa76 	bl	800b438 <iprintf>
 8009f4c:	e7a1      	b.n	8009e92 <etharp_input+0x66>
      if (for_us) {
 8009f4e:	f1b9 0f00 	cmp.w	r9, #0
 8009f52:	d0e4      	beq.n	8009f1e <etharp_input+0xf2>
                   (struct eth_addr *)netif->hwaddr, &hdr->shwaddr,
 8009f54:	f106 0126 	add.w	r1, r6, #38	; 0x26
        etharp_raw(netif,
 8009f58:	2302      	movs	r3, #2
 8009f5a:	9303      	str	r3, [sp, #12]
 8009f5c:	ab05      	add	r3, sp, #20
 8009f5e:	9302      	str	r3, [sp, #8]
 8009f60:	9701      	str	r7, [sp, #4]
                   (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif),
 8009f62:	1d33      	adds	r3, r6, #4
        etharp_raw(netif,
 8009f64:	9300      	str	r3, [sp, #0]
 8009f66:	460b      	mov	r3, r1
 8009f68:	463a      	mov	r2, r7
 8009f6a:	4630      	mov	r0, r6
 8009f6c:	f7ff fed4 	bl	8009d18 <etharp_raw>
 8009f70:	e7d5      	b.n	8009f1e <etharp_input+0xf2>
 8009f72:	bf00      	nop
 8009f74:	08012154 	.word	0x08012154
 8009f78:	0800cb14 	.word	0x0800cb14
 8009f7c:	0800cb24 	.word	0x0800cb24
 8009f80:	2000aec4 	.word	0x2000aec4
 8009f84:	08012268 	.word	0x08012268

08009f88 <etharp_request>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
err_t
etharp_request(struct netif *netif, const ip4_addr_t *ipaddr)
{
 8009f88:	b510      	push	{r4, lr}
 8009f8a:	b084      	sub	sp, #16
 8009f8c:	4602      	mov	r2, r0
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 8009f8e:	f100 0326 	add.w	r3, r0, #38	; 0x26
 8009f92:	2401      	movs	r4, #1
 8009f94:	9403      	str	r4, [sp, #12]
 8009f96:	9102      	str	r1, [sp, #8]
 8009f98:	4904      	ldr	r1, [pc, #16]	; (8009fac <etharp_request+0x24>)
 8009f9a:	9101      	str	r1, [sp, #4]
                    (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif), &ethzero,
 8009f9c:	3204      	adds	r2, #4
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 8009f9e:	9200      	str	r2, [sp, #0]
 8009fa0:	4a03      	ldr	r2, [pc, #12]	; (8009fb0 <etharp_request+0x28>)
 8009fa2:	4619      	mov	r1, r3
 8009fa4:	f7ff feb8 	bl	8009d18 <etharp_raw>
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_request: sending ARP request.\n"));
  return etharp_request_dst(netif, ipaddr, &ethbroadcast);
}
 8009fa8:	b004      	add	sp, #16
 8009faa:	bd10      	pop	{r4, pc}
 8009fac:	0801263c 	.word	0x0801263c
 8009fb0:	08012634 	.word	0x08012634

08009fb4 <etharp_tmr>:
{
 8009fb4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8009fb6:	4c14      	ldr	r4, [pc, #80]	; (800a008 <etharp_tmr+0x54>)
 8009fb8:	2500      	movs	r5, #0
        arp_table[i].state = ETHARP_STATE_STABLE;
 8009fba:	2702      	movs	r7, #2
        arp_table[i].state = ETHARP_STATE_STABLE_REREQUESTING_2;
 8009fbc:	2604      	movs	r6, #4
 8009fbe:	e008      	b.n	8009fd2 <etharp_tmr+0x1e>
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 8009fc0:	2b04      	cmp	r3, #4
 8009fc2:	d91b      	bls.n	8009ffc <etharp_tmr+0x48>
        etharp_free_entry(i);
 8009fc4:	4628      	mov	r0, r5
 8009fc6:	f7ff fddf 	bl	8009b88 <etharp_free_entry>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8009fca:	3501      	adds	r5, #1
 8009fcc:	3418      	adds	r4, #24
 8009fce:	2d0a      	cmp	r5, #10
 8009fd0:	d018      	beq.n	800a004 <etharp_tmr+0x50>
    u8_t state = arp_table[i].state;
 8009fd2:	4621      	mov	r1, r4
 8009fd4:	7c22      	ldrb	r2, [r4, #16]
    if (state != ETHARP_STATE_EMPTY
 8009fd6:	2a00      	cmp	r2, #0
 8009fd8:	d0f7      	beq.n	8009fca <etharp_tmr+0x16>
      arp_table[i].ctime++;
 8009fda:	89e3      	ldrh	r3, [r4, #14]
 8009fdc:	3301      	adds	r3, #1
 8009fde:	b29b      	uxth	r3, r3
 8009fe0:	81e3      	strh	r3, [r4, #14]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 8009fe2:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 8009fe6:	d2ed      	bcs.n	8009fc4 <etharp_tmr+0x10>
 8009fe8:	2a01      	cmp	r2, #1
 8009fea:	d0e9      	beq.n	8009fc0 <etharp_tmr+0xc>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_1) {
 8009fec:	2a03      	cmp	r2, #3
 8009fee:	d003      	beq.n	8009ff8 <etharp_tmr+0x44>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_2) {
 8009ff0:	2a04      	cmp	r2, #4
 8009ff2:	d1ea      	bne.n	8009fca <etharp_tmr+0x16>
        arp_table[i].state = ETHARP_STATE_STABLE;
 8009ff4:	7427      	strb	r7, [r4, #16]
 8009ff6:	e7e8      	b.n	8009fca <etharp_tmr+0x16>
        arp_table[i].state = ETHARP_STATE_STABLE_REREQUESTING_2;
 8009ff8:	7426      	strb	r6, [r4, #16]
 8009ffa:	e7e6      	b.n	8009fca <etharp_tmr+0x16>
        etharp_request(arp_table[i].netif, &arp_table[i].ipaddr);
 8009ffc:	6860      	ldr	r0, [r4, #4]
 8009ffe:	f7ff ffc3 	bl	8009f88 <etharp_request>
 800a002:	e7e2      	b.n	8009fca <etharp_tmr+0x16>
}
 800a004:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a006:	bf00      	nop
 800a008:	2000aec8 	.word	0x2000aec8

0800a00c <etharp_output_to_arp_index>:
{
 800a00c:	b570      	push	{r4, r5, r6, lr}
 800a00e:	b084      	sub	sp, #16
 800a010:	4605      	mov	r5, r0
 800a012:	460e      	mov	r6, r1
 800a014:	4614      	mov	r4, r2
  LWIP_ASSERT("arp_table[arp_idx].state >= ETHARP_STATE_STABLE",
 800a016:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 800a01a:	4b32      	ldr	r3, [pc, #200]	; (800a0e4 <etharp_output_to_arp_index+0xd8>)
 800a01c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800a020:	7d1b      	ldrb	r3, [r3, #20]
 800a022:	2b01      	cmp	r3, #1
 800a024:	d919      	bls.n	800a05a <etharp_output_to_arp_index+0x4e>
  if (arp_table[arp_idx].state == ETHARP_STATE_STABLE) {
 800a026:	eb04 0344 	add.w	r3, r4, r4, lsl #1
 800a02a:	4a2e      	ldr	r2, [pc, #184]	; (800a0e4 <etharp_output_to_arp_index+0xd8>)
 800a02c:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800a030:	7d1b      	ldrb	r3, [r3, #20]
 800a032:	2b02      	cmp	r3, #2
 800a034:	d019      	beq.n	800a06a <etharp_output_to_arp_index+0x5e>
  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), &arp_table[arp_idx].ethaddr, ETHTYPE_IP);
 800a036:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 800a03a:	4b2a      	ldr	r3, [pc, #168]	; (800a0e4 <etharp_output_to_arp_index+0xd8>)
 800a03c:	eb03 04c4 	add.w	r4, r3, r4, lsl #3
 800a040:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800a044:	9300      	str	r3, [sp, #0]
 800a046:	f104 030c 	add.w	r3, r4, #12
 800a04a:	f105 0226 	add.w	r2, r5, #38	; 0x26
 800a04e:	4631      	mov	r1, r6
 800a050:	4628      	mov	r0, r5
 800a052:	f001 f951 	bl	800b2f8 <ethernet_output>
}
 800a056:	b004      	add	sp, #16
 800a058:	bd70      	pop	{r4, r5, r6, pc}
  LWIP_ASSERT("arp_table[arp_idx].state >= ETHARP_STATE_STABLE",
 800a05a:	4b23      	ldr	r3, [pc, #140]	; (800a0e8 <etharp_output_to_arp_index+0xdc>)
 800a05c:	f240 22ee 	movw	r2, #750	; 0x2ee
 800a060:	4922      	ldr	r1, [pc, #136]	; (800a0ec <etharp_output_to_arp_index+0xe0>)
 800a062:	4823      	ldr	r0, [pc, #140]	; (800a0f0 <etharp_output_to_arp_index+0xe4>)
 800a064:	f001 f9e8 	bl	800b438 <iprintf>
 800a068:	e7dd      	b.n	800a026 <etharp_output_to_arp_index+0x1a>
    if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_BROADCAST) {
 800a06a:	eb04 0344 	add.w	r3, r4, r4, lsl #1
 800a06e:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800a072:	8a5b      	ldrh	r3, [r3, #18]
 800a074:	f5b3 7f8e 	cmp.w	r3, #284	; 0x11c
 800a078:	d822      	bhi.n	800a0c0 <etharp_output_to_arp_index+0xb4>
    } else if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_UNICAST) {
 800a07a:	f5b3 7f87 	cmp.w	r3, #270	; 0x10e
 800a07e:	d3da      	bcc.n	800a036 <etharp_output_to_arp_index+0x2a>
      if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR_OK) {
 800a080:	eb04 0044 	add.w	r0, r4, r4, lsl #1
 800a084:	00c0      	lsls	r0, r0, #3
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 800a086:	f105 0126 	add.w	r1, r5, #38	; 0x26
      if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR_OK) {
 800a08a:	4a16      	ldr	r2, [pc, #88]	; (800a0e4 <etharp_output_to_arp_index+0xd8>)
 800a08c:	f100 0c0c 	add.w	ip, r0, #12
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 800a090:	2301      	movs	r3, #1
 800a092:	9303      	str	r3, [sp, #12]
      if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR_OK) {
 800a094:	3004      	adds	r0, #4
 800a096:	4410      	add	r0, r2
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 800a098:	9002      	str	r0, [sp, #8]
 800a09a:	4b16      	ldr	r3, [pc, #88]	; (800a0f4 <etharp_output_to_arp_index+0xe8>)
 800a09c:	9301      	str	r3, [sp, #4]
                    (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif), &ethzero,
 800a09e:	1d2b      	adds	r3, r5, #4
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 800a0a0:	9300      	str	r3, [sp, #0]
 800a0a2:	460b      	mov	r3, r1
 800a0a4:	4462      	add	r2, ip
 800a0a6:	4628      	mov	r0, r5
 800a0a8:	f7ff fe36 	bl	8009d18 <etharp_raw>
      if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR_OK) {
 800a0ac:	2800      	cmp	r0, #0
 800a0ae:	d1c2      	bne.n	800a036 <etharp_output_to_arp_index+0x2a>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 800a0b0:	eb04 0344 	add.w	r3, r4, r4, lsl #1
 800a0b4:	4a0b      	ldr	r2, [pc, #44]	; (800a0e4 <etharp_output_to_arp_index+0xd8>)
 800a0b6:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800a0ba:	2203      	movs	r2, #3
 800a0bc:	751a      	strb	r2, [r3, #20]
 800a0be:	e7ba      	b.n	800a036 <etharp_output_to_arp_index+0x2a>
      if (etharp_request(netif, &arp_table[arp_idx].ipaddr) == ERR_OK) {
 800a0c0:	eb04 0144 	add.w	r1, r4, r4, lsl #1
 800a0c4:	eb02 01c1 	add.w	r1, r2, r1, lsl #3
 800a0c8:	3104      	adds	r1, #4
 800a0ca:	4628      	mov	r0, r5
 800a0cc:	f7ff ff5c 	bl	8009f88 <etharp_request>
 800a0d0:	2800      	cmp	r0, #0
 800a0d2:	d1b0      	bne.n	800a036 <etharp_output_to_arp_index+0x2a>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 800a0d4:	eb04 0344 	add.w	r3, r4, r4, lsl #1
 800a0d8:	4a02      	ldr	r2, [pc, #8]	; (800a0e4 <etharp_output_to_arp_index+0xd8>)
 800a0da:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800a0de:	2203      	movs	r2, #3
 800a0e0:	751a      	strb	r2, [r3, #20]
 800a0e2:	e7a8      	b.n	800a036 <etharp_output_to_arp_index+0x2a>
 800a0e4:	2000aec4 	.word	0x2000aec4
 800a0e8:	08012154 	.word	0x08012154
 800a0ec:	0801228c 	.word	0x0801228c
 800a0f0:	0800cb24 	.word	0x0800cb24
 800a0f4:	0801263c 	.word	0x0801263c

0800a0f8 <etharp_query>:
{
 800a0f8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800a0fc:	b083      	sub	sp, #12
 800a0fe:	4606      	mov	r6, r0
 800a100:	460d      	mov	r5, r1
 800a102:	4617      	mov	r7, r2
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 800a104:	4601      	mov	r1, r0
 800a106:	6828      	ldr	r0, [r5, #0]
 800a108:	f000 fc25 	bl	800a956 <ip4_addr_isbroadcast_u32>
 800a10c:	2800      	cmp	r0, #0
 800a10e:	d16b      	bne.n	800a1e8 <etharp_query+0xf0>
      ip4_addr_ismulticast(ipaddr) ||
 800a110:	682b      	ldr	r3, [r5, #0]
 800a112:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 800a116:	2ae0      	cmp	r2, #224	; 0xe0
 800a118:	d069      	beq.n	800a1ee <etharp_query+0xf6>
      ip4_addr_isany(ipaddr)) {
 800a11a:	2b00      	cmp	r3, #0
 800a11c:	d06a      	beq.n	800a1f4 <etharp_query+0xfc>
  i_err = etharp_find_entry(ipaddr, ETHARP_FLAG_TRY_HARD, netif);
 800a11e:	4632      	mov	r2, r6
 800a120:	2101      	movs	r1, #1
 800a122:	4628      	mov	r0, r5
 800a124:	f7ff fd4a 	bl	8009bbc <etharp_find_entry>
  if (i_err < 0) {
 800a128:	1e04      	subs	r4, r0, #0
 800a12a:	db2b      	blt.n	800a184 <etharp_query+0x8c>
  LWIP_ASSERT("type overflow", (size_t)i_err < NETIF_ADDR_IDX_MAX);
 800a12c:	b2a3      	uxth	r3, r4
 800a12e:	2b7e      	cmp	r3, #126	; 0x7e
 800a130:	d82a      	bhi.n	800a188 <etharp_query+0x90>
  i = (netif_addr_idx_t)i_err;
 800a132:	b2e4      	uxtb	r4, r4
  if (arp_table[i].state == ETHARP_STATE_EMPTY) {
 800a134:	eb04 0244 	add.w	r2, r4, r4, lsl #1
 800a138:	4b46      	ldr	r3, [pc, #280]	; (800a254 <etharp_query+0x15c>)
 800a13a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800a13e:	7d1b      	ldrb	r3, [r3, #20]
 800a140:	2b00      	cmp	r3, #0
 800a142:	f040 8082 	bne.w	800a24a <etharp_query+0x152>
    arp_table[i].state = ETHARP_STATE_PENDING;
 800a146:	4613      	mov	r3, r2
 800a148:	4a42      	ldr	r2, [pc, #264]	; (800a254 <etharp_query+0x15c>)
 800a14a:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800a14e:	2201      	movs	r2, #1
 800a150:	751a      	strb	r2, [r3, #20]
    arp_table[i].netif = netif;
 800a152:	609e      	str	r6, [r3, #8]
    result = etharp_request(netif, ipaddr);
 800a154:	4629      	mov	r1, r5
 800a156:	4630      	mov	r0, r6
 800a158:	f7ff ff16 	bl	8009f88 <etharp_request>
    if (q == NULL) {
 800a15c:	b36f      	cbz	r7, 800a1ba <etharp_query+0xc2>
  if (arp_table[i].state >= ETHARP_STATE_STABLE) {
 800a15e:	eb04 0344 	add.w	r3, r4, r4, lsl #1
 800a162:	4a3c      	ldr	r2, [pc, #240]	; (800a254 <etharp_query+0x15c>)
 800a164:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800a168:	7d1b      	ldrb	r3, [r3, #20]
 800a16a:	2b01      	cmp	r3, #1
 800a16c:	d814      	bhi.n	800a198 <etharp_query+0xa0>
  } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 800a16e:	2b01      	cmp	r3, #1
 800a170:	d123      	bne.n	800a1ba <etharp_query+0xc2>
    while (p) {
 800a172:	2f00      	cmp	r7, #0
 800a174:	d044      	beq.n	800a200 <etharp_query+0x108>
    p = q;
 800a176:	463d      	mov	r5, r7
      LWIP_ASSERT("no packet queues allowed!", (p->len != p->tot_len) || (p->next == 0));
 800a178:	f8df 90e0 	ldr.w	r9, [pc, #224]	; 800a25c <etharp_query+0x164>
 800a17c:	f8df 80e8 	ldr.w	r8, [pc, #232]	; 800a268 <etharp_query+0x170>
 800a180:	4e35      	ldr	r6, [pc, #212]	; (800a258 <etharp_query+0x160>)
 800a182:	e023      	b.n	800a1cc <etharp_query+0xd4>
    return (err_t)i_err;
 800a184:	b260      	sxtb	r0, r4
 800a186:	e018      	b.n	800a1ba <etharp_query+0xc2>
  LWIP_ASSERT("type overflow", (size_t)i_err < NETIF_ADDR_IDX_MAX);
 800a188:	4b34      	ldr	r3, [pc, #208]	; (800a25c <etharp_query+0x164>)
 800a18a:	f240 32c1 	movw	r2, #961	; 0x3c1
 800a18e:	4934      	ldr	r1, [pc, #208]	; (800a260 <etharp_query+0x168>)
 800a190:	4831      	ldr	r0, [pc, #196]	; (800a258 <etharp_query+0x160>)
 800a192:	f001 f951 	bl	800b438 <iprintf>
 800a196:	e7cc      	b.n	800a132 <etharp_query+0x3a>
    ETHARP_SET_ADDRHINT(netif, i);
 800a198:	4b32      	ldr	r3, [pc, #200]	; (800a264 <etharp_query+0x16c>)
 800a19a:	701c      	strb	r4, [r3, #0]
    result = ethernet_output(netif, q, srcaddr, &(arp_table[i].ethaddr), ETHTYPE_IP);
 800a19c:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 800a1a0:	4b2c      	ldr	r3, [pc, #176]	; (800a254 <etharp_query+0x15c>)
 800a1a2:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800a1a6:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800a1aa:	9200      	str	r2, [sp, #0]
 800a1ac:	330c      	adds	r3, #12
 800a1ae:	f106 0226 	add.w	r2, r6, #38	; 0x26
 800a1b2:	4639      	mov	r1, r7
 800a1b4:	4630      	mov	r0, r6
 800a1b6:	f001 f89f 	bl	800b2f8 <ethernet_output>
}
 800a1ba:	b003      	add	sp, #12
 800a1bc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
      if (PBUF_NEEDS_COPY(p)) {
 800a1c0:	7b2b      	ldrb	r3, [r5, #12]
 800a1c2:	f013 0f40 	tst.w	r3, #64	; 0x40
 800a1c6:	d128      	bne.n	800a21a <etharp_query+0x122>
      p = p->next;
 800a1c8:	682d      	ldr	r5, [r5, #0]
    while (p) {
 800a1ca:	b1cd      	cbz	r5, 800a200 <etharp_query+0x108>
      LWIP_ASSERT("no packet queues allowed!", (p->len != p->tot_len) || (p->next == 0));
 800a1cc:	896a      	ldrh	r2, [r5, #10]
 800a1ce:	892b      	ldrh	r3, [r5, #8]
 800a1d0:	429a      	cmp	r2, r3
 800a1d2:	d1f5      	bne.n	800a1c0 <etharp_query+0xc8>
 800a1d4:	682b      	ldr	r3, [r5, #0]
 800a1d6:	b1e3      	cbz	r3, 800a212 <etharp_query+0x11a>
 800a1d8:	464b      	mov	r3, r9
 800a1da:	f240 32f1 	movw	r2, #1009	; 0x3f1
 800a1de:	4641      	mov	r1, r8
 800a1e0:	4630      	mov	r0, r6
 800a1e2:	f001 f929 	bl	800b438 <iprintf>
 800a1e6:	e7eb      	b.n	800a1c0 <etharp_query+0xc8>
    return ERR_ARG;
 800a1e8:	f06f 000f 	mvn.w	r0, #15
 800a1ec:	e7e5      	b.n	800a1ba <etharp_query+0xc2>
 800a1ee:	f06f 000f 	mvn.w	r0, #15
 800a1f2:	e7e2      	b.n	800a1ba <etharp_query+0xc2>
 800a1f4:	f06f 000f 	mvn.w	r0, #15
 800a1f8:	e7df      	b.n	800a1ba <etharp_query+0xc2>
      result = ERR_MEM;
 800a1fa:	f04f 30ff 	mov.w	r0, #4294967295
 800a1fe:	e7dc      	b.n	800a1ba <etharp_query+0xc2>
      pbuf_ref(p);
 800a200:	4638      	mov	r0, r7
 800a202:	f7fb f937 	bl	8005474 <pbuf_ref>
 800a206:	e00f      	b.n	800a228 <etharp_query+0x130>
    result = etharp_request(netif, ipaddr);
 800a208:	4629      	mov	r1, r5
 800a20a:	4630      	mov	r0, r6
 800a20c:	f7ff febc 	bl	8009f88 <etharp_request>
    if (q == NULL) {
 800a210:	e7d3      	b.n	800a1ba <etharp_query+0xc2>
      if (PBUF_NEEDS_COPY(p)) {
 800a212:	7b2b      	ldrb	r3, [r5, #12]
 800a214:	f013 0f40 	tst.w	r3, #64	; 0x40
 800a218:	d0f2      	beq.n	800a200 <etharp_query+0x108>
      p = pbuf_clone(PBUF_LINK, PBUF_RAM, q);
 800a21a:	463a      	mov	r2, r7
 800a21c:	f44f 7120 	mov.w	r1, #640	; 0x280
 800a220:	200e      	movs	r0, #14
 800a222:	f7fb fa6d 	bl	8005700 <pbuf_clone>
 800a226:	4607      	mov	r7, r0
    if (p != NULL) {
 800a228:	2f00      	cmp	r7, #0
 800a22a:	d0e6      	beq.n	800a1fa <etharp_query+0x102>
      if (arp_table[i].q != NULL) {
 800a22c:	eb04 0344 	add.w	r3, r4, r4, lsl #1
 800a230:	4a08      	ldr	r2, [pc, #32]	; (800a254 <etharp_query+0x15c>)
 800a232:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 800a236:	b108      	cbz	r0, 800a23c <etharp_query+0x144>
        pbuf_free(arp_table[i].q);
 800a238:	f7fa ffb6 	bl	80051a8 <pbuf_free>
      arp_table[i].q = p;
 800a23c:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 800a240:	4a04      	ldr	r2, [pc, #16]	; (800a254 <etharp_query+0x15c>)
 800a242:	f842 7034 	str.w	r7, [r2, r4, lsl #3]
      result = ERR_OK;
 800a246:	2000      	movs	r0, #0
 800a248:	e7b7      	b.n	800a1ba <etharp_query+0xc2>
  if (is_new_entry || (q == NULL)) {
 800a24a:	2f00      	cmp	r7, #0
 800a24c:	d0dc      	beq.n	800a208 <etharp_query+0x110>
  err_t result = ERR_MEM;
 800a24e:	f04f 30ff 	mov.w	r0, #4294967295
 800a252:	e784      	b.n	800a15e <etharp_query+0x66>
 800a254:	2000aec4 	.word	0x2000aec4
 800a258:	0800cb24 	.word	0x0800cb24
 800a25c:	08012154 	.word	0x08012154
 800a260:	080122bc 	.word	0x080122bc
 800a264:	2000afb4 	.word	0x2000afb4
 800a268:	080122cc 	.word	0x080122cc

0800a26c <etharp_output>:
{
 800a26c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a26e:	b085      	sub	sp, #20
 800a270:	460e      	mov	r6, r1
 800a272:	4614      	mov	r4, r2
  LWIP_ASSERT("netif != NULL", netif != NULL);
 800a274:	4605      	mov	r5, r0
 800a276:	2800      	cmp	r0, #0
 800a278:	d032      	beq.n	800a2e0 <etharp_output+0x74>
  LWIP_ASSERT("q != NULL", q != NULL);
 800a27a:	2e00      	cmp	r6, #0
 800a27c:	d038      	beq.n	800a2f0 <etharp_output+0x84>
  LWIP_ASSERT("ipaddr != NULL", ipaddr != NULL);
 800a27e:	2c00      	cmp	r4, #0
 800a280:	d03e      	beq.n	800a300 <etharp_output+0x94>
  if (ip4_addr_isbroadcast(ipaddr, netif)) {
 800a282:	4629      	mov	r1, r5
 800a284:	6820      	ldr	r0, [r4, #0]
 800a286:	f000 fb66 	bl	800a956 <ip4_addr_isbroadcast_u32>
 800a28a:	2800      	cmp	r0, #0
 800a28c:	f040 8082 	bne.w	800a394 <etharp_output+0x128>
  } else if (ip4_addr_ismulticast(ipaddr)) {
 800a290:	6823      	ldr	r3, [r4, #0]
 800a292:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800a296:	2ae0      	cmp	r2, #224	; 0xe0
 800a298:	d03a      	beq.n	800a310 <etharp_output+0xa4>
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 800a29a:	686a      	ldr	r2, [r5, #4]
 800a29c:	405a      	eors	r2, r3
 800a29e:	68a9      	ldr	r1, [r5, #8]
 800a2a0:	420a      	tst	r2, r1
 800a2a2:	d009      	beq.n	800a2b8 <etharp_output+0x4c>
        !ip4_addr_islinklocal(ipaddr)) {
 800a2a4:	b29b      	uxth	r3, r3
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 800a2a6:	f64f 62a9 	movw	r2, #65193	; 0xfea9
 800a2aa:	4293      	cmp	r3, r2
 800a2ac:	d004      	beq.n	800a2b8 <etharp_output+0x4c>
          if (!ip4_addr_isany_val(*netif_ip4_gw(netif))) {
 800a2ae:	68eb      	ldr	r3, [r5, #12]
 800a2b0:	2b00      	cmp	r3, #0
 800a2b2:	d07b      	beq.n	800a3ac <etharp_output+0x140>
            dst_addr = netif_ip4_gw(netif);
 800a2b4:	f105 040c 	add.w	r4, r5, #12
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 800a2b8:	4b3e      	ldr	r3, [pc, #248]	; (800a3b4 <etharp_output+0x148>)
 800a2ba:	781a      	ldrb	r2, [r3, #0]
 800a2bc:	eb02 0142 	add.w	r1, r2, r2, lsl #1
 800a2c0:	4b3d      	ldr	r3, [pc, #244]	; (800a3b8 <etharp_output+0x14c>)
 800a2c2:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
 800a2c6:	7d1b      	ldrb	r3, [r3, #20]
 800a2c8:	2b01      	cmp	r3, #1
 800a2ca:	d906      	bls.n	800a2da <etharp_output+0x6e>
            (arp_table[etharp_cached_entry].netif == netif) &&
 800a2cc:	460b      	mov	r3, r1
 800a2ce:	493a      	ldr	r1, [pc, #232]	; (800a3b8 <etharp_output+0x14c>)
 800a2d0:	eb01 03c3 	add.w	r3, r1, r3, lsl #3
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 800a2d4:	689b      	ldr	r3, [r3, #8]
 800a2d6:	42ab      	cmp	r3, r5
 800a2d8:	d030      	beq.n	800a33c <etharp_output+0xd0>
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 800a2da:	4b37      	ldr	r3, [pc, #220]	; (800a3b8 <etharp_output+0x14c>)
{
 800a2dc:	2000      	movs	r0, #0
 800a2de:	e03f      	b.n	800a360 <etharp_output+0xf4>
  LWIP_ASSERT("netif != NULL", netif != NULL);
 800a2e0:	4b36      	ldr	r3, [pc, #216]	; (800a3bc <etharp_output+0x150>)
 800a2e2:	f240 321e 	movw	r2, #798	; 0x31e
 800a2e6:	4936      	ldr	r1, [pc, #216]	; (800a3c0 <etharp_output+0x154>)
 800a2e8:	4836      	ldr	r0, [pc, #216]	; (800a3c4 <etharp_output+0x158>)
 800a2ea:	f001 f8a5 	bl	800b438 <iprintf>
 800a2ee:	e7c4      	b.n	800a27a <etharp_output+0xe>
  LWIP_ASSERT("q != NULL", q != NULL);
 800a2f0:	4b32      	ldr	r3, [pc, #200]	; (800a3bc <etharp_output+0x150>)
 800a2f2:	f240 321f 	movw	r2, #799	; 0x31f
 800a2f6:	4934      	ldr	r1, [pc, #208]	; (800a3c8 <etharp_output+0x15c>)
 800a2f8:	4832      	ldr	r0, [pc, #200]	; (800a3c4 <etharp_output+0x158>)
 800a2fa:	f001 f89d 	bl	800b438 <iprintf>
 800a2fe:	e7be      	b.n	800a27e <etharp_output+0x12>
  LWIP_ASSERT("ipaddr != NULL", ipaddr != NULL);
 800a300:	4b2e      	ldr	r3, [pc, #184]	; (800a3bc <etharp_output+0x150>)
 800a302:	f44f 7248 	mov.w	r2, #800	; 0x320
 800a306:	4931      	ldr	r1, [pc, #196]	; (800a3cc <etharp_output+0x160>)
 800a308:	482e      	ldr	r0, [pc, #184]	; (800a3c4 <etharp_output+0x158>)
 800a30a:	f001 f895 	bl	800b438 <iprintf>
 800a30e:	e7b8      	b.n	800a282 <etharp_output+0x16>
    mcastaddr.addr[0] = LL_IP4_MULTICAST_ADDR_0;
 800a310:	2301      	movs	r3, #1
 800a312:	f88d 3008 	strb.w	r3, [sp, #8]
    mcastaddr.addr[1] = LL_IP4_MULTICAST_ADDR_1;
 800a316:	2300      	movs	r3, #0
 800a318:	f88d 3009 	strb.w	r3, [sp, #9]
    mcastaddr.addr[2] = LL_IP4_MULTICAST_ADDR_2;
 800a31c:	235e      	movs	r3, #94	; 0x5e
 800a31e:	f88d 300a 	strb.w	r3, [sp, #10]
    mcastaddr.addr[3] = ip4_addr2(ipaddr) & 0x7f;
 800a322:	7863      	ldrb	r3, [r4, #1]
 800a324:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a328:	f88d 300b 	strb.w	r3, [sp, #11]
    mcastaddr.addr[4] = ip4_addr3(ipaddr);
 800a32c:	78a3      	ldrb	r3, [r4, #2]
 800a32e:	f88d 300c 	strb.w	r3, [sp, #12]
    mcastaddr.addr[5] = ip4_addr4(ipaddr);
 800a332:	78e3      	ldrb	r3, [r4, #3]
 800a334:	f88d 300d 	strb.w	r3, [sp, #13]
    dest = &mcastaddr;
 800a338:	ab02      	add	r3, sp, #8
 800a33a:	e02c      	b.n	800a396 <etharp_output+0x12a>
            (ip4_addr_cmp(dst_addr, &arp_table[etharp_cached_entry].ipaddr))) {
 800a33c:	eb02 0342 	add.w	r3, r2, r2, lsl #1
 800a340:	491d      	ldr	r1, [pc, #116]	; (800a3b8 <etharp_output+0x14c>)
 800a342:	eb01 03c3 	add.w	r3, r1, r3, lsl #3
            (arp_table[etharp_cached_entry].netif == netif) &&
 800a346:	6821      	ldr	r1, [r4, #0]
 800a348:	685b      	ldr	r3, [r3, #4]
 800a34a:	4299      	cmp	r1, r3
 800a34c:	d1c5      	bne.n	800a2da <etharp_output+0x6e>
          return etharp_output_to_arp_index(netif, q, etharp_cached_entry);
 800a34e:	4631      	mov	r1, r6
 800a350:	4628      	mov	r0, r5
 800a352:	f7ff fe5b 	bl	800a00c <etharp_output_to_arp_index>
 800a356:	e027      	b.n	800a3a8 <etharp_output+0x13c>
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 800a358:	3001      	adds	r0, #1
 800a35a:	3318      	adds	r3, #24
 800a35c:	280a      	cmp	r0, #10
 800a35e:	d013      	beq.n	800a388 <etharp_output+0x11c>
 800a360:	b2c2      	uxtb	r2, r0
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 800a362:	f893 c014 	ldrb.w	ip, [r3, #20]
 800a366:	f1bc 0f01 	cmp.w	ip, #1
 800a36a:	d9f5      	bls.n	800a358 <etharp_output+0xec>
 800a36c:	6899      	ldr	r1, [r3, #8]
 800a36e:	42a9      	cmp	r1, r5
 800a370:	d1f2      	bne.n	800a358 <etharp_output+0xec>
          (arp_table[i].netif == netif) &&
 800a372:	6821      	ldr	r1, [r4, #0]
 800a374:	685f      	ldr	r7, [r3, #4]
 800a376:	42b9      	cmp	r1, r7
 800a378:	d1ee      	bne.n	800a358 <etharp_output+0xec>
        ETHARP_SET_ADDRHINT(netif, i);
 800a37a:	4b0e      	ldr	r3, [pc, #56]	; (800a3b4 <etharp_output+0x148>)
 800a37c:	701a      	strb	r2, [r3, #0]
        return etharp_output_to_arp_index(netif, q, i);
 800a37e:	4631      	mov	r1, r6
 800a380:	4628      	mov	r0, r5
 800a382:	f7ff fe43 	bl	800a00c <etharp_output_to_arp_index>
 800a386:	e00f      	b.n	800a3a8 <etharp_output+0x13c>
    return etharp_query(netif, dst_addr, q);
 800a388:	4632      	mov	r2, r6
 800a38a:	4621      	mov	r1, r4
 800a38c:	4628      	mov	r0, r5
 800a38e:	f7ff feb3 	bl	800a0f8 <etharp_query>
 800a392:	e009      	b.n	800a3a8 <etharp_output+0x13c>
    dest = (const struct eth_addr *)&ethbroadcast;
 800a394:	4b0e      	ldr	r3, [pc, #56]	; (800a3d0 <etharp_output+0x164>)
  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), dest, ETHTYPE_IP);
 800a396:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800a39a:	9200      	str	r2, [sp, #0]
 800a39c:	f105 0226 	add.w	r2, r5, #38	; 0x26
 800a3a0:	4631      	mov	r1, r6
 800a3a2:	4628      	mov	r0, r5
 800a3a4:	f000 ffa8 	bl	800b2f8 <ethernet_output>
}
 800a3a8:	b005      	add	sp, #20
 800a3aa:	bdf0      	pop	{r4, r5, r6, r7, pc}
            return ERR_RTE;
 800a3ac:	f06f 0003 	mvn.w	r0, #3
 800a3b0:	e7fa      	b.n	800a3a8 <etharp_output+0x13c>
 800a3b2:	bf00      	nop
 800a3b4:	2000afb4 	.word	0x2000afb4
 800a3b8:	2000aec4 	.word	0x2000aec4
 800a3bc:	08012154 	.word	0x08012154
 800a3c0:	0800cb14 	.word	0x0800cb14
 800a3c4:	0800cb24 	.word	0x0800cb24
 800a3c8:	080122e8 	.word	0x080122e8
 800a3cc:	08012248 	.word	0x08012248
 800a3d0:	08012634 	.word	0x08012634

0800a3d4 <icmp_send_response>:
 * @param type Type of the ICMP header
 * @param code Code of the ICMP header
 */
static void
icmp_send_response(struct pbuf *p, u8_t type, u8_t code)
{
 800a3d4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a3d8:	b086      	sub	sp, #24
 800a3da:	4606      	mov	r6, r0
 800a3dc:	4688      	mov	r8, r1
 800a3de:	4617      	mov	r7, r2

  /* increase number of messages attempted to send */
  MIB2_STATS_INC(mib2.icmpoutmsgs);

  /* ICMP header + IP header + 8 bytes of data */
  q = pbuf_alloc(PBUF_IP, sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE,
 800a3e0:	f44f 7220 	mov.w	r2, #640	; 0x280
 800a3e4:	2124      	movs	r1, #36	; 0x24
 800a3e6:	2022      	movs	r0, #34	; 0x22
 800a3e8:	f7fa ff48 	bl	800527c <pbuf_alloc>
                 PBUF_RAM);
  if (q == NULL) {
 800a3ec:	b3a0      	cbz	r0, 800a458 <icmp_send_response+0x84>
 800a3ee:	4605      	mov	r5, r0
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_time_exceeded: failed to allocate pbuf for ICMP packet.\n"));
    MIB2_STATS_INC(mib2.icmpouterrors);
    return;
  }
  LWIP_ASSERT("check that first pbuf can hold icmp message",
 800a3f0:	8943      	ldrh	r3, [r0, #10]
 800a3f2:	2b23      	cmp	r3, #35	; 0x23
 800a3f4:	d933      	bls.n	800a45e <icmp_send_response+0x8a>
              (q->len >= (sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE)));

  iphdr = (struct ip_hdr *)p->payload;
 800a3f6:	f8d6 c004 	ldr.w	ip, [r6, #4]
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->src);
  LWIP_DEBUGF(ICMP_DEBUG, (" to "));
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->dest);
  LWIP_DEBUGF(ICMP_DEBUG, ("\n"));

  icmphdr = (struct icmp_echo_hdr *)q->payload;
 800a3fa:	686c      	ldr	r4, [r5, #4]
  icmphdr->type = type;
 800a3fc:	f884 8000 	strb.w	r8, [r4]
  icmphdr->code = code;
 800a400:	7067      	strb	r7, [r4, #1]
  icmphdr->id = 0;
 800a402:	2300      	movs	r3, #0
 800a404:	7123      	strb	r3, [r4, #4]
 800a406:	7163      	strb	r3, [r4, #5]
  icmphdr->seqno = 0;
 800a408:	71a3      	strb	r3, [r4, #6]
 800a40a:	71e3      	strb	r3, [r4, #7]

  /* copy fields from original packet */
  SMEMCPY((u8_t *)q->payload + sizeof(struct icmp_echo_hdr), (u8_t *)p->payload,
 800a40c:	686b      	ldr	r3, [r5, #4]
 800a40e:	6872      	ldr	r2, [r6, #4]
 800a410:	6816      	ldr	r6, [r2, #0]
 800a412:	6850      	ldr	r0, [r2, #4]
 800a414:	6891      	ldr	r1, [r2, #8]
 800a416:	68d7      	ldr	r7, [r2, #12]
 800a418:	609e      	str	r6, [r3, #8]
 800a41a:	60d8      	str	r0, [r3, #12]
 800a41c:	6119      	str	r1, [r3, #16]
 800a41e:	615f      	str	r7, [r3, #20]
 800a420:	6916      	ldr	r6, [r2, #16]
 800a422:	6950      	ldr	r0, [r2, #20]
 800a424:	6991      	ldr	r1, [r2, #24]
 800a426:	619e      	str	r6, [r3, #24]
 800a428:	61d8      	str	r0, [r3, #28]
 800a42a:	6219      	str	r1, [r3, #32]
          IP_HLEN + ICMP_DEST_UNREACH_DATASIZE);

  ip4_addr_copy(iphdr_src, iphdr->src);
 800a42c:	f8dc 300c 	ldr.w	r3, [ip, #12]
 800a430:	9305      	str	r3, [sp, #20]
    ip4_addr_t iphdr_dst;
    ip4_addr_copy(iphdr_dst, iphdr->dest);
    netif = ip4_route_src(&iphdr_dst, &iphdr_src);
  }
#else
  netif = ip4_route(&iphdr_src);
 800a432:	a805      	add	r0, sp, #20
 800a434:	f000 f8ee 	bl	800a614 <ip4_route>
#endif
  if (netif != NULL) {
 800a438:	b158      	cbz	r0, 800a452 <icmp_send_response+0x7e>
    /* calculate checksum */
    icmphdr->chksum = 0;
 800a43a:	2100      	movs	r1, #0
 800a43c:	70a1      	strb	r1, [r4, #2]
 800a43e:	70e1      	strb	r1, [r4, #3]
    IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_ICMP) {
      icmphdr->chksum = inet_chksum(icmphdr, q->len);
    }
#endif
    ICMP_STATS_INC(icmp.xmit);
    ip4_output_if(q, NULL, &iphdr_src, ICMP_TTL, 0, IP_PROTO_ICMP, netif);
 800a440:	9002      	str	r0, [sp, #8]
 800a442:	2301      	movs	r3, #1
 800a444:	9301      	str	r3, [sp, #4]
 800a446:	9100      	str	r1, [sp, #0]
 800a448:	23ff      	movs	r3, #255	; 0xff
 800a44a:	aa05      	add	r2, sp, #20
 800a44c:	4628      	mov	r0, r5
 800a44e:	f000 fa6d 	bl	800a92c <ip4_output_if>
  }
  pbuf_free(q);
 800a452:	4628      	mov	r0, r5
 800a454:	f7fa fea8 	bl	80051a8 <pbuf_free>
}
 800a458:	b006      	add	sp, #24
 800a45a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  LWIP_ASSERT("check that first pbuf can hold icmp message",
 800a45e:	4b04      	ldr	r3, [pc, #16]	; (800a470 <icmp_send_response+0x9c>)
 800a460:	f44f 72b4 	mov.w	r2, #360	; 0x168
 800a464:	4903      	ldr	r1, [pc, #12]	; (800a474 <icmp_send_response+0xa0>)
 800a466:	4804      	ldr	r0, [pc, #16]	; (800a478 <icmp_send_response+0xa4>)
 800a468:	f000 ffe6 	bl	800b438 <iprintf>
 800a46c:	e7c3      	b.n	800a3f6 <icmp_send_response+0x22>
 800a46e:	bf00      	nop
 800a470:	080122f4 	.word	0x080122f4
 800a474:	0801232c 	.word	0x0801232c
 800a478:	0800cb24 	.word	0x0800cb24

0800a47c <icmp_input>:
{
 800a47c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800a480:	b085      	sub	sp, #20
 800a482:	4605      	mov	r5, r0
  iphdr_in = ip4_current_header();
 800a484:	4b4a      	ldr	r3, [pc, #296]	; (800a5b0 <icmp_input+0x134>)
 800a486:	689f      	ldr	r7, [r3, #8]
  hlen = IPH_HL_BYTES(iphdr_in);
 800a488:	783b      	ldrb	r3, [r7, #0]
 800a48a:	f003 030f 	and.w	r3, r3, #15
 800a48e:	ea4f 0883 	mov.w	r8, r3, lsl #2
 800a492:	4644      	mov	r4, r8
  if (hlen < IP_HLEN) {
 800a494:	2c13      	cmp	r4, #19
 800a496:	d915      	bls.n	800a4c4 <icmp_input+0x48>
 800a498:	460e      	mov	r6, r1
  if (p->len < sizeof(u16_t) * 2) {
 800a49a:	8943      	ldrh	r3, [r0, #10]
 800a49c:	2b03      	cmp	r3, #3
 800a49e:	d911      	bls.n	800a4c4 <icmp_input+0x48>
  type = *((u8_t *)p->payload);
 800a4a0:	6843      	ldr	r3, [r0, #4]
  switch (type) {
 800a4a2:	781b      	ldrb	r3, [r3, #0]
 800a4a4:	2b08      	cmp	r3, #8
 800a4a6:	d161      	bne.n	800a56c <icmp_input+0xf0>
      if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 800a4a8:	4b41      	ldr	r3, [pc, #260]	; (800a5b0 <icmp_input+0x134>)
 800a4aa:	6958      	ldr	r0, [r3, #20]
 800a4ac:	f000 03f0 	and.w	r3, r0, #240	; 0xf0
 800a4b0:	2be0      	cmp	r3, #224	; 0xe0
 800a4b2:	d01a      	beq.n	800a4ea <icmp_input+0x6e>
      if (ip4_addr_isbroadcast(ip4_current_dest_addr(), ip_current_netif())) {
 800a4b4:	4b3e      	ldr	r3, [pc, #248]	; (800a5b0 <icmp_input+0x134>)
 800a4b6:	6819      	ldr	r1, [r3, #0]
 800a4b8:	f000 fa4d 	bl	800a956 <ip4_addr_isbroadcast_u32>
 800a4bc:	b9a8      	cbnz	r0, 800a4ea <icmp_input+0x6e>
      if (p->tot_len < sizeof(struct icmp_echo_hdr)) {
 800a4be:	892b      	ldrh	r3, [r5, #8]
 800a4c0:	2b07      	cmp	r3, #7
 800a4c2:	d805      	bhi.n	800a4d0 <icmp_input+0x54>
  pbuf_free(p);
 800a4c4:	4628      	mov	r0, r5
 800a4c6:	f7fa fe6f 	bl	80051a8 <pbuf_free>
}
 800a4ca:	b005      	add	sp, #20
 800a4cc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
      if (pbuf_add_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 800a4d0:	f108 090e 	add.w	r9, r8, #14
 800a4d4:	4649      	mov	r1, r9
 800a4d6:	4628      	mov	r0, r5
 800a4d8:	f7fa fe21 	bl	800511e <pbuf_add_header>
 800a4dc:	2800      	cmp	r0, #0
 800a4de:	d03a      	beq.n	800a556 <icmp_input+0xda>
        u16_t alloc_len = (u16_t)(p->tot_len + hlen);
 800a4e0:	892a      	ldrh	r2, [r5, #8]
 800a4e2:	1913      	adds	r3, r2, r4
 800a4e4:	b299      	uxth	r1, r3
        if (alloc_len < p->tot_len) {
 800a4e6:	428a      	cmp	r2, r1
 800a4e8:	d903      	bls.n	800a4f2 <icmp_input+0x76>
  pbuf_free(p);
 800a4ea:	4628      	mov	r0, r5
 800a4ec:	f7fa fe5c 	bl	80051a8 <pbuf_free>
  return;
 800a4f0:	e7eb      	b.n	800a4ca <icmp_input+0x4e>
        r = pbuf_alloc(PBUF_LINK, alloc_len, PBUF_RAM);
 800a4f2:	f44f 7220 	mov.w	r2, #640	; 0x280
 800a4f6:	200e      	movs	r0, #14
 800a4f8:	f7fa fec0 	bl	800527c <pbuf_alloc>
        if (r == NULL) {
 800a4fc:	4604      	mov	r4, r0
 800a4fe:	2800      	cmp	r0, #0
 800a500:	d0f3      	beq.n	800a4ea <icmp_input+0x6e>
        if (r->len < hlen + sizeof(struct icmp_echo_hdr)) {
 800a502:	8942      	ldrh	r2, [r0, #10]
 800a504:	f108 0308 	add.w	r3, r8, #8
 800a508:	429a      	cmp	r2, r3
 800a50a:	d313      	bcc.n	800a534 <icmp_input+0xb8>
        MEMCPY(r->payload, iphdr_in, hlen);
 800a50c:	4642      	mov	r2, r8
 800a50e:	4639      	mov	r1, r7
 800a510:	6840      	ldr	r0, [r0, #4]
 800a512:	f000 ff61 	bl	800b3d8 <memcpy>
        if (pbuf_remove_header(r, hlen)) {
 800a516:	4641      	mov	r1, r8
 800a518:	4620      	mov	r0, r4
 800a51a:	f7fa fe05 	bl	8005128 <pbuf_remove_header>
 800a51e:	b960      	cbnz	r0, 800a53a <icmp_input+0xbe>
        if (pbuf_copy(r, p) != ERR_OK) {
 800a520:	4629      	mov	r1, r5
 800a522:	4620      	mov	r0, r4
 800a524:	f7fa fffc 	bl	8005520 <pbuf_copy>
 800a528:	b988      	cbnz	r0, 800a54e <icmp_input+0xd2>
        pbuf_free(p);
 800a52a:	4628      	mov	r0, r5
 800a52c:	f7fa fe3c 	bl	80051a8 <pbuf_free>
        p = r;
 800a530:	4625      	mov	r5, r4
 800a532:	e015      	b.n	800a560 <icmp_input+0xe4>
          pbuf_free(r);
 800a534:	f7fa fe38 	bl	80051a8 <pbuf_free>
          goto icmperr;
 800a538:	e7d7      	b.n	800a4ea <icmp_input+0x6e>
          LWIP_ASSERT("icmp_input: moving r->payload to icmp header failed\n", 0);
 800a53a:	4b1e      	ldr	r3, [pc, #120]	; (800a5b4 <icmp_input+0x138>)
 800a53c:	22b6      	movs	r2, #182	; 0xb6
 800a53e:	491e      	ldr	r1, [pc, #120]	; (800a5b8 <icmp_input+0x13c>)
 800a540:	481e      	ldr	r0, [pc, #120]	; (800a5bc <icmp_input+0x140>)
 800a542:	f000 ff79 	bl	800b438 <iprintf>
          pbuf_free(r);
 800a546:	4620      	mov	r0, r4
 800a548:	f7fa fe2e 	bl	80051a8 <pbuf_free>
          goto icmperr;
 800a54c:	e7cd      	b.n	800a4ea <icmp_input+0x6e>
          pbuf_free(r);
 800a54e:	4620      	mov	r0, r4
 800a550:	f7fa fe2a 	bl	80051a8 <pbuf_free>
          goto icmperr;
 800a554:	e7c9      	b.n	800a4ea <icmp_input+0x6e>
        if (pbuf_remove_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 800a556:	4649      	mov	r1, r9
 800a558:	4628      	mov	r0, r5
 800a55a:	f7fa fde5 	bl	8005128 <pbuf_remove_header>
 800a55e:	b948      	cbnz	r0, 800a574 <icmp_input+0xf8>
      iecho = (struct icmp_echo_hdr *)p->payload;
 800a560:	686c      	ldr	r4, [r5, #4]
      if (pbuf_add_header(p, hlen)) {
 800a562:	4641      	mov	r1, r8
 800a564:	4628      	mov	r0, r5
 800a566:	f7fa fdda 	bl	800511e <pbuf_add_header>
 800a56a:	b150      	cbz	r0, 800a582 <icmp_input+0x106>
  pbuf_free(p);
 800a56c:	4628      	mov	r0, r5
 800a56e:	f7fa fe1b 	bl	80051a8 <pbuf_free>
  return;
 800a572:	e7aa      	b.n	800a4ca <icmp_input+0x4e>
          LWIP_ASSERT("icmp_input: restoring original p->payload failed\n", 0);
 800a574:	4b0f      	ldr	r3, [pc, #60]	; (800a5b4 <icmp_input+0x138>)
 800a576:	22c7      	movs	r2, #199	; 0xc7
 800a578:	4911      	ldr	r1, [pc, #68]	; (800a5c0 <icmp_input+0x144>)
 800a57a:	4810      	ldr	r0, [pc, #64]	; (800a5bc <icmp_input+0x140>)
 800a57c:	f000 ff5c 	bl	800b438 <iprintf>
          goto icmperr;
 800a580:	e7b3      	b.n	800a4ea <icmp_input+0x6e>
        struct ip_hdr *iphdr = (struct ip_hdr *)p->payload;
 800a582:	6868      	ldr	r0, [r5, #4]
        ip4_addr_copy(iphdr->src, *src);
 800a584:	490a      	ldr	r1, [pc, #40]	; (800a5b0 <icmp_input+0x134>)
 800a586:	694b      	ldr	r3, [r1, #20]
 800a588:	60c3      	str	r3, [r0, #12]
        ip4_addr_copy(iphdr->dest, *ip4_current_src_addr());
 800a58a:	690b      	ldr	r3, [r1, #16]
 800a58c:	6103      	str	r3, [r0, #16]
        ICMPH_TYPE_SET(iecho, ICMP_ER);
 800a58e:	2200      	movs	r2, #0
 800a590:	7022      	strb	r2, [r4, #0]
        iecho->chksum = 0;
 800a592:	70a2      	strb	r2, [r4, #2]
 800a594:	70e2      	strb	r2, [r4, #3]
        IPH_TTL_SET(iphdr, ICMP_TTL);
 800a596:	23ff      	movs	r3, #255	; 0xff
 800a598:	7203      	strb	r3, [r0, #8]
        IPH_CHKSUM_SET(iphdr, 0);
 800a59a:	7282      	strb	r2, [r0, #10]
 800a59c:	72c2      	strb	r2, [r0, #11]
        ret = ip4_output_if(p, src, LWIP_IP_HDRINCL,
 800a59e:	9602      	str	r6, [sp, #8]
 800a5a0:	2001      	movs	r0, #1
 800a5a2:	9001      	str	r0, [sp, #4]
 800a5a4:	9200      	str	r2, [sp, #0]
 800a5a6:	3114      	adds	r1, #20
 800a5a8:	4628      	mov	r0, r5
 800a5aa:	f000 f9bf 	bl	800a92c <ip4_output_if>
        if (ret != ERR_OK) {
 800a5ae:	e7dd      	b.n	800a56c <icmp_input+0xf0>
 800a5b0:	20005728 	.word	0x20005728
 800a5b4:	080122f4 	.word	0x080122f4
 800a5b8:	08012358 	.word	0x08012358
 800a5bc:	0800cb24 	.word	0x0800cb24
 800a5c0:	08012390 	.word	0x08012390

0800a5c4 <icmp_dest_unreach>:
{
 800a5c4:	b508      	push	{r3, lr}
 800a5c6:	460a      	mov	r2, r1
  icmp_send_response(p, ICMP_DUR, t);
 800a5c8:	2103      	movs	r1, #3
 800a5ca:	f7ff ff03 	bl	800a3d4 <icmp_send_response>
}
 800a5ce:	bd08      	pop	{r3, pc}

0800a5d0 <icmp_time_exceeded>:
{
 800a5d0:	b508      	push	{r3, lr}
 800a5d2:	460a      	mov	r2, r1
  icmp_send_response(p, ICMP_TE, t);
 800a5d4:	210b      	movs	r1, #11
 800a5d6:	f7ff fefd 	bl	800a3d4 <icmp_send_response>
}
 800a5da:	bd08      	pop	{r3, pc}

0800a5dc <ip4_input_accept>:
#endif /* IP_FORWARD */

/** Return true if the current input packet should be accepted on this netif */
static int
ip4_input_accept(struct netif *netif)
{
 800a5dc:	b508      	push	{r3, lr}
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(netif_ip4_addr(netif)) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ~ip4_addr_get_u32(netif_ip4_netmask(netif))));

  /* interface is up and configured? */
  if ((netif_is_up(netif)) && (!ip4_addr_isany_val(*netif_ip4_addr(netif)))) {
 800a5de:	f890 302d 	ldrb.w	r3, [r0, #45]	; 0x2d
 800a5e2:	f013 0f01 	tst.w	r3, #1
 800a5e6:	d00c      	beq.n	800a602 <ip4_input_accept+0x26>
 800a5e8:	4601      	mov	r1, r0
 800a5ea:	6843      	ldr	r3, [r0, #4]
 800a5ec:	b15b      	cbz	r3, 800a606 <ip4_input_accept+0x2a>
    /* unicast to this interface address? */
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 800a5ee:	4a08      	ldr	r2, [pc, #32]	; (800a610 <ip4_input_accept+0x34>)
 800a5f0:	6950      	ldr	r0, [r2, #20]
 800a5f2:	4283      	cmp	r3, r0
 800a5f4:	d009      	beq.n	800a60a <ip4_input_accept+0x2e>
        /* or broadcast on this interface network address? */
        ip4_addr_isbroadcast(ip4_current_dest_addr(), netif)
 800a5f6:	f000 f9ae 	bl	800a956 <ip4_addr_isbroadcast_u32>
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 800a5fa:	3800      	subs	r0, #0
 800a5fc:	bf18      	it	ne
 800a5fe:	2001      	movne	r0, #1
 800a600:	e000      	b.n	800a604 <ip4_input_accept+0x28>
      /* accept on this netif */
      return 1;
    }
#endif /* LWIP_AUTOIP */
  }
  return 0;
 800a602:	2000      	movs	r0, #0
}
 800a604:	bd08      	pop	{r3, pc}
  return 0;
 800a606:	2000      	movs	r0, #0
 800a608:	e7fc      	b.n	800a604 <ip4_input_accept+0x28>
      return 1;
 800a60a:	2001      	movs	r0, #1
 800a60c:	e7fa      	b.n	800a604 <ip4_input_accept+0x28>
 800a60e:	bf00      	nop
 800a610:	20005728 	.word	0x20005728

0800a614 <ip4_route>:
{
 800a614:	b410      	push	{r4}
 800a616:	4684      	mov	ip, r0
  NETIF_FOREACH(netif) {
 800a618:	4b1a      	ldr	r3, [pc, #104]	; (800a684 <ip4_route+0x70>)
 800a61a:	6818      	ldr	r0, [r3, #0]
 800a61c:	b9a8      	cbnz	r0, 800a64a <ip4_route+0x36>
  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 800a61e:	4b1a      	ldr	r3, [pc, #104]	; (800a688 <ip4_route+0x74>)
 800a620:	6818      	ldr	r0, [r3, #0]
 800a622:	b160      	cbz	r0, 800a63e <ip4_route+0x2a>
 800a624:	f890 302d 	ldrb.w	r3, [r0, #45]	; 0x2d
 800a628:	f003 0305 	and.w	r3, r3, #5
 800a62c:	2b05      	cmp	r3, #5
 800a62e:	d124      	bne.n	800a67a <ip4_route+0x66>
 800a630:	6843      	ldr	r3, [r0, #4]
 800a632:	b323      	cbz	r3, 800a67e <ip4_route+0x6a>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 800a634:	f89c 3000 	ldrb.w	r3, [ip]
    return NULL;
 800a638:	2b7f      	cmp	r3, #127	; 0x7f
 800a63a:	bf08      	it	eq
 800a63c:	2000      	moveq	r0, #0
}
 800a63e:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a642:	4770      	bx	lr
  NETIF_FOREACH(netif) {
 800a644:	6800      	ldr	r0, [r0, #0]
 800a646:	2800      	cmp	r0, #0
 800a648:	d0e9      	beq.n	800a61e <ip4_route+0xa>
    if (netif_is_up(netif) && netif_is_link_up(netif) && !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 800a64a:	f890 302d 	ldrb.w	r3, [r0, #45]	; 0x2d
 800a64e:	f013 0f01 	tst.w	r3, #1
 800a652:	d0f7      	beq.n	800a644 <ip4_route+0x30>
 800a654:	f013 0f04 	tst.w	r3, #4
 800a658:	d0f4      	beq.n	800a644 <ip4_route+0x30>
 800a65a:	6842      	ldr	r2, [r0, #4]
 800a65c:	2a00      	cmp	r2, #0
 800a65e:	d0f1      	beq.n	800a644 <ip4_route+0x30>
      if (ip4_addr_netcmp(dest, netif_ip4_addr(netif), netif_ip4_netmask(netif))) {
 800a660:	f8dc 1000 	ldr.w	r1, [ip]
 800a664:	404a      	eors	r2, r1
 800a666:	6884      	ldr	r4, [r0, #8]
 800a668:	4222      	tst	r2, r4
 800a66a:	d0e8      	beq.n	800a63e <ip4_route+0x2a>
      if (((netif->flags & NETIF_FLAG_BROADCAST) == 0) && ip4_addr_cmp(dest, netif_ip4_gw(netif))) {
 800a66c:	f013 0f02 	tst.w	r3, #2
 800a670:	d1e8      	bne.n	800a644 <ip4_route+0x30>
 800a672:	68c3      	ldr	r3, [r0, #12]
 800a674:	4299      	cmp	r1, r3
 800a676:	d1e5      	bne.n	800a644 <ip4_route+0x30>
 800a678:	e7e1      	b.n	800a63e <ip4_route+0x2a>
    return NULL;
 800a67a:	2000      	movs	r0, #0
 800a67c:	e7df      	b.n	800a63e <ip4_route+0x2a>
 800a67e:	2000      	movs	r0, #0
 800a680:	e7dd      	b.n	800a63e <ip4_route+0x2a>
 800a682:	bf00      	nop
 800a684:	2000ae50 	.word	0x2000ae50
 800a688:	2000ae4c 	.word	0x2000ae4c

0800a68c <ip4_input>:
 * @return ERR_OK if the packet was processed (could return ERR_* if it wasn't
 *         processed, but currently always returns ERR_OK)
 */
err_t
ip4_input(struct pbuf *p, struct netif *inp)
{
 800a68c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a690:	4604      	mov	r4, r0

  IP_STATS_INC(ip.recv);
  MIB2_STATS_INC(mib2.ipinreceives);

  /* identify the IP header */
  iphdr = (struct ip_hdr *)p->payload;
 800a692:	f8d0 8004 	ldr.w	r8, [r0, #4]
  if (IPH_V(iphdr) != 4) {
 800a696:	f898 3000 	ldrb.w	r3, [r8]
 800a69a:	091a      	lsrs	r2, r3, #4
 800a69c:	2a04      	cmp	r2, #4
 800a69e:	d004      	beq.n	800a6aa <ip4_input+0x1e>
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_WARNING, ("IP packet dropped due to bad version number %"U16_F"\n", (u16_t)IPH_V(iphdr)));
    ip4_debug_print(p);
    pbuf_free(p);
 800a6a0:	f7fa fd82 	bl	80051a8 <pbuf_free>
  ip_data.current_ip_header_tot_len = 0;
  ip4_addr_set_any(ip4_current_src_addr());
  ip4_addr_set_any(ip4_current_dest_addr());

  return ERR_OK;
}
 800a6a4:	2000      	movs	r0, #0
 800a6a6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a6aa:	460f      	mov	r7, r1
  iphdr_hlen = IPH_HL_BYTES(iphdr);
 800a6ac:	f003 030f 	and.w	r3, r3, #15
 800a6b0:	ea4f 0983 	mov.w	r9, r3, lsl #2
 800a6b4:	464d      	mov	r5, r9
  iphdr_len = lwip_ntohs(IPH_LEN(iphdr));
 800a6b6:	f8b8 0002 	ldrh.w	r0, [r8, #2]
 800a6ba:	f7f9 ff51 	bl	8004560 <lwip_htons>
 800a6be:	4606      	mov	r6, r0
  if (iphdr_len < p->tot_len) {
 800a6c0:	8923      	ldrh	r3, [r4, #8]
 800a6c2:	4283      	cmp	r3, r0
 800a6c4:	d860      	bhi.n	800a788 <ip4_input+0xfc>
  if ((iphdr_hlen > p->len) || (iphdr_len > p->tot_len) || (iphdr_hlen < IP_HLEN)) {
 800a6c6:	8963      	ldrh	r3, [r4, #10]
 800a6c8:	42ab      	cmp	r3, r5
 800a6ca:	d362      	bcc.n	800a792 <ip4_input+0x106>
 800a6cc:	8923      	ldrh	r3, [r4, #8]
 800a6ce:	42b3      	cmp	r3, r6
 800a6d0:	d35f      	bcc.n	800a792 <ip4_input+0x106>
 800a6d2:	2d13      	cmp	r5, #19
 800a6d4:	d95d      	bls.n	800a792 <ip4_input+0x106>
  ip_addr_copy_from_ip4(ip_data.current_iphdr_dest, iphdr->dest);
 800a6d6:	f8d8 3010 	ldr.w	r3, [r8, #16]
 800a6da:	4a52      	ldr	r2, [pc, #328]	; (800a824 <ip4_input+0x198>)
 800a6dc:	6153      	str	r3, [r2, #20]
  ip_addr_copy_from_ip4(ip_data.current_iphdr_src, iphdr->src);
 800a6de:	f8d8 100c 	ldr.w	r1, [r8, #12]
 800a6e2:	6111      	str	r1, [r2, #16]
  if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 800a6e4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800a6e8:	2be0      	cmp	r3, #224	; 0xe0
 800a6ea:	d156      	bne.n	800a79a <ip4_input+0x10e>
    if ((netif_is_up(inp)) && (!ip4_addr_isany_val(*netif_ip4_addr(inp)))) {
 800a6ec:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800a6f0:	f013 0f01 	tst.w	r3, #1
 800a6f4:	d068      	beq.n	800a7c8 <ip4_input+0x13c>
 800a6f6:	687b      	ldr	r3, [r7, #4]
      netif = inp;
 800a6f8:	2b00      	cmp	r3, #0
 800a6fa:	bf14      	ite	ne
 800a6fc:	463d      	movne	r5, r7
 800a6fe:	2500      	moveq	r5, #0
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 800a700:	4639      	mov	r1, r7
 800a702:	4b48      	ldr	r3, [pc, #288]	; (800a824 <ip4_input+0x198>)
 800a704:	6918      	ldr	r0, [r3, #16]
 800a706:	f000 f926 	bl	800a956 <ip4_addr_isbroadcast_u32>
 800a70a:	2800      	cmp	r0, #0
 800a70c:	d162      	bne.n	800a7d4 <ip4_input+0x148>
        (ip4_addr_ismulticast(ip4_current_src_addr()))) {
 800a70e:	4b45      	ldr	r3, [pc, #276]	; (800a824 <ip4_input+0x198>)
 800a710:	691b      	ldr	r3, [r3, #16]
 800a712:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 800a716:	2be0      	cmp	r3, #224	; 0xe0
 800a718:	d05c      	beq.n	800a7d4 <ip4_input+0x148>
  if (netif == NULL) {
 800a71a:	2d00      	cmp	r5, #0
 800a71c:	d05e      	beq.n	800a7dc <ip4_input+0x150>
  if ((IPH_OFFSET(iphdr) & PP_HTONS(IP_OFFMASK | IP_MF)) != 0) {
 800a71e:	f8b8 3006 	ldrh.w	r3, [r8, #6]
 800a722:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800a726:	b29b      	uxth	r3, r3
 800a728:	b13b      	cbz	r3, 800a73a <ip4_input+0xae>
    p = ip4_reass(p);
 800a72a:	4620      	mov	r0, r4
 800a72c:	f000 fa62 	bl	800abf4 <ip4_reass>
    if (p == NULL) {
 800a730:	4604      	mov	r4, r0
 800a732:	2800      	cmp	r0, #0
 800a734:	d0b6      	beq.n	800a6a4 <ip4_input+0x18>
    iphdr = (const struct ip_hdr *)p->payload;
 800a736:	f8d0 8004 	ldr.w	r8, [r0, #4]
  ip_data.current_netif = netif;
 800a73a:	4a3a      	ldr	r2, [pc, #232]	; (800a824 <ip4_input+0x198>)
 800a73c:	6015      	str	r5, [r2, #0]
  ip_data.current_input_netif = inp;
 800a73e:	6057      	str	r7, [r2, #4]
  ip_data.current_ip4_header = iphdr;
 800a740:	f8c2 8008 	str.w	r8, [r2, #8]
  ip_data.current_ip_header_tot_len = IPH_HL_BYTES(iphdr);
 800a744:	f898 3000 	ldrb.w	r3, [r8]
 800a748:	f003 030f 	and.w	r3, r3, #15
 800a74c:	009b      	lsls	r3, r3, #2
 800a74e:	8193      	strh	r3, [r2, #12]
    pbuf_remove_header(p, iphdr_hlen); /* Move to payload, no check necessary. */
 800a750:	4649      	mov	r1, r9
 800a752:	4620      	mov	r0, r4
 800a754:	f7fa fce8 	bl	8005128 <pbuf_remove_header>
    switch (IPH_PROTO(iphdr)) {
 800a758:	f898 3009 	ldrb.w	r3, [r8, #9]
 800a75c:	2b06      	cmp	r3, #6
 800a75e:	d04e      	beq.n	800a7fe <ip4_input+0x172>
 800a760:	2b11      	cmp	r3, #17
 800a762:	d03f      	beq.n	800a7e4 <ip4_input+0x158>
 800a764:	2b01      	cmp	r3, #1
 800a766:	d04f      	beq.n	800a808 <ip4_input+0x17c>
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 800a768:	4629      	mov	r1, r5
 800a76a:	4b2e      	ldr	r3, [pc, #184]	; (800a824 <ip4_input+0x198>)
 800a76c:	6958      	ldr	r0, [r3, #20]
 800a76e:	f000 f8f2 	bl	800a956 <ip4_addr_isbroadcast_u32>
 800a772:	b928      	cbnz	r0, 800a780 <ip4_input+0xf4>
              !ip4_addr_ismulticast(ip4_current_dest_addr())) {
 800a774:	4b2b      	ldr	r3, [pc, #172]	; (800a824 <ip4_input+0x198>)
 800a776:	695b      	ldr	r3, [r3, #20]
 800a778:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 800a77c:	2be0      	cmp	r3, #224	; 0xe0
 800a77e:	d148      	bne.n	800a812 <ip4_input+0x186>
        pbuf_free(p);
 800a780:	4620      	mov	r0, r4
 800a782:	f7fa fd11 	bl	80051a8 <pbuf_free>
        break;
 800a786:	e031      	b.n	800a7ec <ip4_input+0x160>
    pbuf_realloc(p, iphdr_len);
 800a788:	4601      	mov	r1, r0
 800a78a:	4620      	mov	r0, r4
 800a78c:	f7fa fe06 	bl	800539c <pbuf_realloc>
 800a790:	e799      	b.n	800a6c6 <ip4_input+0x3a>
    pbuf_free(p);
 800a792:	4620      	mov	r0, r4
 800a794:	f7fa fd08 	bl	80051a8 <pbuf_free>
    return ERR_OK;
 800a798:	e784      	b.n	800a6a4 <ip4_input+0x18>
    if (ip4_input_accept(inp)) {
 800a79a:	4638      	mov	r0, r7
 800a79c:	f7ff ff1e 	bl	800a5dc <ip4_input_accept>
 800a7a0:	b9a0      	cbnz	r0, 800a7cc <ip4_input+0x140>
      if (!ip4_addr_isloopback(ip4_current_dest_addr()))
 800a7a2:	4b20      	ldr	r3, [pc, #128]	; (800a824 <ip4_input+0x198>)
 800a7a4:	7d1b      	ldrb	r3, [r3, #20]
 800a7a6:	2b7f      	cmp	r3, #127	; 0x7f
 800a7a8:	d012      	beq.n	800a7d0 <ip4_input+0x144>
        NETIF_FOREACH(netif) {
 800a7aa:	4b1f      	ldr	r3, [pc, #124]	; (800a828 <ip4_input+0x19c>)
 800a7ac:	681d      	ldr	r5, [r3, #0]
 800a7ae:	b91d      	cbnz	r5, 800a7b8 <ip4_input+0x12c>
 800a7b0:	e7a6      	b.n	800a700 <ip4_input+0x74>
 800a7b2:	682d      	ldr	r5, [r5, #0]
 800a7b4:	2d00      	cmp	r5, #0
 800a7b6:	d0a3      	beq.n	800a700 <ip4_input+0x74>
          if (netif == inp) {
 800a7b8:	42af      	cmp	r7, r5
 800a7ba:	d0fa      	beq.n	800a7b2 <ip4_input+0x126>
          if (ip4_input_accept(netif)) {
 800a7bc:	4628      	mov	r0, r5
 800a7be:	f7ff ff0d 	bl	800a5dc <ip4_input_accept>
 800a7c2:	2800      	cmp	r0, #0
 800a7c4:	d0f5      	beq.n	800a7b2 <ip4_input+0x126>
 800a7c6:	e79b      	b.n	800a700 <ip4_input+0x74>
      netif = NULL;
 800a7c8:	2500      	movs	r5, #0
 800a7ca:	e799      	b.n	800a700 <ip4_input+0x74>
      netif = inp;
 800a7cc:	463d      	mov	r5, r7
 800a7ce:	e797      	b.n	800a700 <ip4_input+0x74>
      netif = NULL;
 800a7d0:	2500      	movs	r5, #0
 800a7d2:	e795      	b.n	800a700 <ip4_input+0x74>
      pbuf_free(p);
 800a7d4:	4620      	mov	r0, r4
 800a7d6:	f7fa fce7 	bl	80051a8 <pbuf_free>
      return ERR_OK;
 800a7da:	e763      	b.n	800a6a4 <ip4_input+0x18>
    pbuf_free(p);
 800a7dc:	4620      	mov	r0, r4
 800a7de:	f7fa fce3 	bl	80051a8 <pbuf_free>
    return ERR_OK;
 800a7e2:	e75f      	b.n	800a6a4 <ip4_input+0x18>
        udp_input(p, inp);
 800a7e4:	4639      	mov	r1, r7
 800a7e6:	4620      	mov	r0, r4
 800a7e8:	f7ff f8c4 	bl	8009974 <udp_input>
  ip_data.current_netif = NULL;
 800a7ec:	4b0d      	ldr	r3, [pc, #52]	; (800a824 <ip4_input+0x198>)
 800a7ee:	2200      	movs	r2, #0
 800a7f0:	601a      	str	r2, [r3, #0]
  ip_data.current_input_netif = NULL;
 800a7f2:	605a      	str	r2, [r3, #4]
  ip_data.current_ip4_header = NULL;
 800a7f4:	609a      	str	r2, [r3, #8]
  ip_data.current_ip_header_tot_len = 0;
 800a7f6:	819a      	strh	r2, [r3, #12]
  ip4_addr_set_any(ip4_current_src_addr());
 800a7f8:	611a      	str	r2, [r3, #16]
  ip4_addr_set_any(ip4_current_dest_addr());
 800a7fa:	615a      	str	r2, [r3, #20]
  return ERR_OK;
 800a7fc:	e752      	b.n	800a6a4 <ip4_input+0x18>
        tcp_input(p, inp);
 800a7fe:	4639      	mov	r1, r7
 800a800:	4620      	mov	r0, r4
 800a802:	f7fc fee3 	bl	80075cc <tcp_input>
        break;
 800a806:	e7f1      	b.n	800a7ec <ip4_input+0x160>
        icmp_input(p, inp);
 800a808:	4639      	mov	r1, r7
 800a80a:	4620      	mov	r0, r4
 800a80c:	f7ff fe36 	bl	800a47c <icmp_input>
        break;
 800a810:	e7ec      	b.n	800a7ec <ip4_input+0x160>
            pbuf_header_force(p, (s16_t)iphdr_hlen); /* Move to ip header, no check necessary. */
 800a812:	4649      	mov	r1, r9
 800a814:	4620      	mov	r0, r4
 800a816:	f7fa fcbb 	bl	8005190 <pbuf_header_force>
            icmp_dest_unreach(p, ICMP_DUR_PROTO);
 800a81a:	2102      	movs	r1, #2
 800a81c:	4620      	mov	r0, r4
 800a81e:	f7ff fed1 	bl	800a5c4 <icmp_dest_unreach>
 800a822:	e7ad      	b.n	800a780 <ip4_input+0xf4>
 800a824:	20005728 	.word	0x20005728
 800a828:	2000ae50 	.word	0x2000ae50

0800a82c <ip4_output_if_src>:
 */
err_t
ip4_output_if_src(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos,
                  u8_t proto, struct netif *netif)
{
 800a82c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800a830:	b083      	sub	sp, #12
 800a832:	4604      	mov	r4, r0
 800a834:	460f      	mov	r7, r1
 800a836:	4616      	mov	r6, r2
 800a838:	4699      	mov	r9, r3
 800a83a:	f8dd 8030 	ldr.w	r8, [sp, #48]	; 0x30
#if CHECKSUM_GEN_IP_INLINE
  u32_t chk_sum = 0;
#endif /* CHECKSUM_GEN_IP_INLINE */

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_IP_CHECK_PBUF_REF_COUNT_FOR_TX(p);
 800a83e:	7b82      	ldrb	r2, [r0, #14]
 800a840:	2a01      	cmp	r2, #1
 800a842:	d13f      	bne.n	800a8c4 <ip4_output_if_src+0x98>

  MIB2_STATS_INC(mib2.ipoutrequests);

  /* Should the IP header be generated or is it already included in p? */
  if (dest != LWIP_IP_HDRINCL) {
 800a844:	2e00      	cmp	r6, #0
 800a846:	d050      	beq.n	800a8ea <ip4_output_if_src+0xbe>
      }
#endif /* CHECKSUM_GEN_IP_INLINE */
    }
#endif /* IP_OPTIONS_SEND */
    /* generate IP header */
    if (pbuf_add_header(p, IP_HLEN)) {
 800a848:	2114      	movs	r1, #20
 800a84a:	4620      	mov	r0, r4
 800a84c:	f7fa fc67 	bl	800511e <pbuf_add_header>
 800a850:	2800      	cmp	r0, #0
 800a852:	d158      	bne.n	800a906 <ip4_output_if_src+0xda>
      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
    }

    iphdr = (struct ip_hdr *)p->payload;
 800a854:	6865      	ldr	r5, [r4, #4]
    LWIP_ASSERT("check that first pbuf can hold struct ip_hdr",
 800a856:	8963      	ldrh	r3, [r4, #10]
 800a858:	2b13      	cmp	r3, #19
 800a85a:	d93b      	bls.n	800a8d4 <ip4_output_if_src+0xa8>
                (p->len >= sizeof(struct ip_hdr)));

    IPH_TTL_SET(iphdr, ttl);
 800a85c:	f885 9008 	strb.w	r9, [r5, #8]
    IPH_PROTO_SET(iphdr, proto);
 800a860:	f89d 302c 	ldrb.w	r3, [sp, #44]	; 0x2c
 800a864:	726b      	strb	r3, [r5, #9]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(proto | (ttl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */

    /* dest cannot be NULL here */
    ip4_addr_copy(iphdr->dest, *dest);
 800a866:	6833      	ldr	r3, [r6, #0]
 800a868:	612b      	str	r3, [r5, #16]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += ip4_addr_get_u32(&iphdr->dest) & 0xFFFF;
    chk_sum += ip4_addr_get_u32(&iphdr->dest) >> 16;
#endif /* CHECKSUM_GEN_IP_INLINE */

    IPH_VHL_SET(iphdr, 4, ip_hlen / 4);
 800a86a:	2345      	movs	r3, #69	; 0x45
 800a86c:	702b      	strb	r3, [r5, #0]
    IPH_TOS_SET(iphdr, tos);
 800a86e:	f89d 3028 	ldrb.w	r3, [sp, #40]	; 0x28
 800a872:	706b      	strb	r3, [r5, #1]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(tos | (iphdr->_v_hl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_LEN_SET(iphdr, lwip_htons(p->tot_len));
 800a874:	8920      	ldrh	r0, [r4, #8]
 800a876:	f7f9 fe73 	bl	8004560 <lwip_htons>
 800a87a:	8068      	strh	r0, [r5, #2]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_len;
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_OFFSET_SET(iphdr, 0);
 800a87c:	2300      	movs	r3, #0
 800a87e:	71ab      	strb	r3, [r5, #6]
 800a880:	71eb      	strb	r3, [r5, #7]
    IPH_ID_SET(iphdr, lwip_htons(ip_id));
 800a882:	f8df 90a4 	ldr.w	r9, [pc, #164]	; 800a928 <ip4_output_if_src+0xfc>
 800a886:	f8b9 0000 	ldrh.w	r0, [r9]
 800a88a:	f7f9 fe69 	bl	8004560 <lwip_htons>
 800a88e:	80a8      	strh	r0, [r5, #4]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_id;
#endif /* CHECKSUM_GEN_IP_INLINE */
    ++ip_id;
 800a890:	f8b9 3000 	ldrh.w	r3, [r9]
 800a894:	3301      	adds	r3, #1
 800a896:	f8a9 3000 	strh.w	r3, [r9]

    if (src == NULL) {
 800a89a:	b31f      	cbz	r7, 800a8e4 <ip4_output_if_src+0xb8>
      ip4_addr_copy(iphdr->src, *IP4_ADDR_ANY4);
    } else {
      /* src cannot be NULL here */
      ip4_addr_copy(iphdr->src, *src);
 800a89c:	683b      	ldr	r3, [r7, #0]
 800a89e:	60eb      	str	r3, [r5, #12]
    else {
      IPH_CHKSUM_SET(iphdr, 0);
    }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF*/
#else /* CHECKSUM_GEN_IP_INLINE */
    IPH_CHKSUM_SET(iphdr, 0);
 800a8a0:	2300      	movs	r3, #0
 800a8a2:	72ab      	strb	r3, [r5, #10]
 800a8a4:	72eb      	strb	r3, [r5, #11]
  }
#endif /* LWIP_MULTICAST_TX_OPTIONS */
#endif /* ENABLE_LOOPBACK */
#if IP_FRAG
  /* don't fragment if interface has mtu set to 0 [loopif] */
  if (netif->mtu && (p->tot_len > netif->mtu)) {
 800a8a6:	f8b8 3024 	ldrh.w	r3, [r8, #36]	; 0x24
 800a8aa:	b113      	cbz	r3, 800a8b2 <ip4_output_if_src+0x86>
 800a8ac:	8922      	ldrh	r2, [r4, #8]
 800a8ae:	429a      	cmp	r2, r3
 800a8b0:	d823      	bhi.n	800a8fa <ip4_output_if_src+0xce>
    return ip4_frag(p, netif, dest);
  }
#endif /* IP_FRAG */

  LWIP_DEBUGF(IP_DEBUG, ("ip4_output_if: call netif->output()\n"));
  return netif->output(netif, p, dest);
 800a8b2:	f8d8 3014 	ldr.w	r3, [r8, #20]
 800a8b6:	4632      	mov	r2, r6
 800a8b8:	4621      	mov	r1, r4
 800a8ba:	4640      	mov	r0, r8
 800a8bc:	4798      	blx	r3
}
 800a8be:	b003      	add	sp, #12
 800a8c0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  LWIP_IP_CHECK_PBUF_REF_COUNT_FOR_TX(p);
 800a8c4:	4b13      	ldr	r3, [pc, #76]	; (800a914 <ip4_output_if_src+0xe8>)
 800a8c6:	f44f 7255 	mov.w	r2, #852	; 0x354
 800a8ca:	4913      	ldr	r1, [pc, #76]	; (800a918 <ip4_output_if_src+0xec>)
 800a8cc:	4813      	ldr	r0, [pc, #76]	; (800a91c <ip4_output_if_src+0xf0>)
 800a8ce:	f000 fdb3 	bl	800b438 <iprintf>
 800a8d2:	e7b7      	b.n	800a844 <ip4_output_if_src+0x18>
    LWIP_ASSERT("check that first pbuf can hold struct ip_hdr",
 800a8d4:	4b0f      	ldr	r3, [pc, #60]	; (800a914 <ip4_output_if_src+0xe8>)
 800a8d6:	f44f 7262 	mov.w	r2, #904	; 0x388
 800a8da:	4911      	ldr	r1, [pc, #68]	; (800a920 <ip4_output_if_src+0xf4>)
 800a8dc:	480f      	ldr	r0, [pc, #60]	; (800a91c <ip4_output_if_src+0xf0>)
 800a8de:	f000 fdab 	bl	800b438 <iprintf>
 800a8e2:	e7bb      	b.n	800a85c <ip4_output_if_src+0x30>
      ip4_addr_copy(iphdr->src, *IP4_ADDR_ANY4);
 800a8e4:	4b0f      	ldr	r3, [pc, #60]	; (800a924 <ip4_output_if_src+0xf8>)
 800a8e6:	681b      	ldr	r3, [r3, #0]
 800a8e8:	e7d9      	b.n	800a89e <ip4_output_if_src+0x72>
    if (p->len < IP_HLEN) {
 800a8ea:	8963      	ldrh	r3, [r4, #10]
 800a8ec:	2b13      	cmp	r3, #19
 800a8ee:	d90d      	bls.n	800a90c <ip4_output_if_src+0xe0>
    ip4_addr_copy(dest_addr, iphdr->dest);
 800a8f0:	6863      	ldr	r3, [r4, #4]
 800a8f2:	691b      	ldr	r3, [r3, #16]
 800a8f4:	9301      	str	r3, [sp, #4]
    dest = &dest_addr;
 800a8f6:	ae01      	add	r6, sp, #4
 800a8f8:	e7d5      	b.n	800a8a6 <ip4_output_if_src+0x7a>
    return ip4_frag(p, netif, dest);
 800a8fa:	4632      	mov	r2, r6
 800a8fc:	4641      	mov	r1, r8
 800a8fe:	4620      	mov	r0, r4
 800a900:	f000 fba2 	bl	800b048 <ip4_frag>
 800a904:	e7db      	b.n	800a8be <ip4_output_if_src+0x92>
      return ERR_BUF;
 800a906:	f06f 0001 	mvn.w	r0, #1
 800a90a:	e7d8      	b.n	800a8be <ip4_output_if_src+0x92>
      return ERR_BUF;
 800a90c:	f06f 0001 	mvn.w	r0, #1
 800a910:	e7d5      	b.n	800a8be <ip4_output_if_src+0x92>
 800a912:	bf00      	nop
 800a914:	080123c4 	.word	0x080123c4
 800a918:	080123f8 	.word	0x080123f8
 800a91c:	0800cb24 	.word	0x0800cb24
 800a920:	08012404 	.word	0x08012404
 800a924:	08012434 	.word	0x08012434
 800a928:	2000afb6 	.word	0x2000afb6

0800a92c <ip4_output_if>:
{
 800a92c:	b510      	push	{r4, lr}
 800a92e:	b084      	sub	sp, #16
 800a930:	9c08      	ldr	r4, [sp, #32]
  if (dest != LWIP_IP_HDRINCL) {
 800a932:	4694      	mov	ip, r2
 800a934:	b11a      	cbz	r2, 800a93e <ip4_output_if+0x12>
    if (ip4_addr_isany(src)) {
 800a936:	b109      	cbz	r1, 800a93c <ip4_output_if+0x10>
 800a938:	680a      	ldr	r2, [r1, #0]
 800a93a:	b902      	cbnz	r2, 800a93e <ip4_output_if+0x12>
      src_used = netif_ip4_addr(netif);
 800a93c:	1d21      	adds	r1, r4, #4
  return ip4_output_if_src(p, src_used, dest, ttl, tos, proto, netif);
 800a93e:	9402      	str	r4, [sp, #8]
 800a940:	f89d 201c 	ldrb.w	r2, [sp, #28]
 800a944:	9201      	str	r2, [sp, #4]
 800a946:	f89d 2018 	ldrb.w	r2, [sp, #24]
 800a94a:	9200      	str	r2, [sp, #0]
 800a94c:	4662      	mov	r2, ip
 800a94e:	f7ff ff6d 	bl	800a82c <ip4_output_if_src>
}
 800a952:	b004      	add	sp, #16
 800a954:	bd10      	pop	{r4, pc}

0800a956 <ip4_addr_isbroadcast_u32>:
 * @param netif the network interface against which the address is checked
 * @return returns non-zero if the address is a broadcast address
 */
u8_t
ip4_addr_isbroadcast_u32(u32_t addr, const struct netif *netif)
{
 800a956:	4603      	mov	r3, r0
  ip4_addr_t ipaddr;
  ip4_addr_set_u32(&ipaddr, addr);

  /* all ones (broadcast) or all zeroes (old skool broadcast) */
  if ((~addr == IPADDR_ANY) ||
 800a958:	1e42      	subs	r2, r0, #1
 800a95a:	f112 0f03 	cmn.w	r2, #3
 800a95e:	d813      	bhi.n	800a988 <ip4_addr_isbroadcast_u32+0x32>
      (addr == IPADDR_ANY)) {
    return 1;
    /* no broadcast support on this network interface? */
  } else if ((netif->flags & NETIF_FLAG_BROADCAST) == 0) {
 800a960:	f891 002d 	ldrb.w	r0, [r1, #45]	; 0x2d
 800a964:	f010 0002 	ands.w	r0, r0, #2
 800a968:	d013      	beq.n	800a992 <ip4_addr_isbroadcast_u32+0x3c>
    /* the given address cannot be a broadcast address
     * nor can we check against any broadcast addresses */
    return 0;
    /* address matches network interface address exactly? => no broadcast */
  } else if (addr == ip4_addr_get_u32(netif_ip4_addr(netif))) {
 800a96a:	684a      	ldr	r2, [r1, #4]
 800a96c:	429a      	cmp	r2, r3
 800a96e:	d00d      	beq.n	800a98c <ip4_addr_isbroadcast_u32+0x36>
    return 0;
    /*  on the same (sub) network... */
  } else if (ip4_addr_netcmp(&ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif))
 800a970:	6889      	ldr	r1, [r1, #8]
 800a972:	405a      	eors	r2, r3
 800a974:	420a      	tst	r2, r1
 800a976:	d10b      	bne.n	800a990 <ip4_addr_isbroadcast_u32+0x3a>
             /* ...and host identifier bits are all ones? =>... */
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 800a978:	43c8      	mvns	r0, r1
 800a97a:	ea23 0301 	bic.w	r3, r3, r1
                 (IPADDR_BROADCAST & ~ip4_addr_get_u32(netif_ip4_netmask(netif))))) {
    /* => network broadcast address */
    return 1;
  } else {
    return 0;
 800a97e:	4283      	cmp	r3, r0
 800a980:	bf14      	ite	ne
 800a982:	2000      	movne	r0, #0
 800a984:	2001      	moveq	r0, #1
 800a986:	4770      	bx	lr
    return 1;
 800a988:	2001      	movs	r0, #1
 800a98a:	4770      	bx	lr
    return 0;
 800a98c:	2000      	movs	r0, #0
 800a98e:	4770      	bx	lr
    return 0;
 800a990:	2000      	movs	r0, #0
  }
}
 800a992:	4770      	bx	lr

0800a994 <ip_reass_dequeue_datagram>:
 * Dequeues a datagram from the datagram queue. Doesn't deallocate the pbufs.
 * @param ipr points to the queue entry to dequeue
 */
static void
ip_reass_dequeue_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 800a994:	b538      	push	{r3, r4, r5, lr}
 800a996:	4604      	mov	r4, r0
  /* dequeue the reass struct  */
  if (reassdatagrams == ipr) {
 800a998:	4b0c      	ldr	r3, [pc, #48]	; (800a9cc <ip_reass_dequeue_datagram+0x38>)
 800a99a:	681b      	ldr	r3, [r3, #0]
 800a99c:	4283      	cmp	r3, r0
 800a99e:	d008      	beq.n	800a9b2 <ip_reass_dequeue_datagram+0x1e>
 800a9a0:	460d      	mov	r5, r1
    /* it was the first in the list */
    reassdatagrams = ipr->next;
  } else {
    /* it wasn't the first, so it must have a valid 'prev' */
    LWIP_ASSERT("sanity check linked list", prev != NULL);
 800a9a2:	b151      	cbz	r1, 800a9ba <ip_reass_dequeue_datagram+0x26>
    prev->next = ipr->next;
 800a9a4:	6823      	ldr	r3, [r4, #0]
 800a9a6:	602b      	str	r3, [r5, #0]
  }

  /* now we can free the ip_reassdata struct */
  memp_free(MEMP_REASSDATA, ipr);
 800a9a8:	4621      	mov	r1, r4
 800a9aa:	2004      	movs	r0, #4
 800a9ac:	f7fa f93e 	bl	8004c2c <memp_free>
}
 800a9b0:	bd38      	pop	{r3, r4, r5, pc}
    reassdatagrams = ipr->next;
 800a9b2:	6802      	ldr	r2, [r0, #0]
 800a9b4:	4b05      	ldr	r3, [pc, #20]	; (800a9cc <ip_reass_dequeue_datagram+0x38>)
 800a9b6:	601a      	str	r2, [r3, #0]
 800a9b8:	e7f6      	b.n	800a9a8 <ip_reass_dequeue_datagram+0x14>
    LWIP_ASSERT("sanity check linked list", prev != NULL);
 800a9ba:	4b05      	ldr	r3, [pc, #20]	; (800a9d0 <ip_reass_dequeue_datagram+0x3c>)
 800a9bc:	f240 1245 	movw	r2, #325	; 0x145
 800a9c0:	4904      	ldr	r1, [pc, #16]	; (800a9d4 <ip_reass_dequeue_datagram+0x40>)
 800a9c2:	4805      	ldr	r0, [pc, #20]	; (800a9d8 <ip_reass_dequeue_datagram+0x44>)
 800a9c4:	f000 fd38 	bl	800b438 <iprintf>
 800a9c8:	e7ec      	b.n	800a9a4 <ip_reass_dequeue_datagram+0x10>
 800a9ca:	bf00      	nop
 800a9cc:	2000afbc 	.word	0x2000afbc
 800a9d0:	08012438 	.word	0x08012438
 800a9d4:	08012474 	.word	0x08012474
 800a9d8:	0800cb24 	.word	0x0800cb24

0800a9dc <ip_reass_free_complete_datagram>:
{
 800a9dc:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a9e0:	4680      	mov	r8, r0
 800a9e2:	4689      	mov	r9, r1
  LWIP_ASSERT("prev != ipr", prev != ipr);
 800a9e4:	4281      	cmp	r1, r0
 800a9e6:	d017      	beq.n	800aa18 <ip_reass_free_complete_datagram+0x3c>
  if (prev != NULL) {
 800a9e8:	f1b9 0f00 	cmp.w	r9, #0
 800a9ec:	d009      	beq.n	800aa02 <ip_reass_free_complete_datagram+0x26>
    LWIP_ASSERT("prev->next == ipr", prev->next == ipr);
 800a9ee:	f8d9 3000 	ldr.w	r3, [r9]
 800a9f2:	4543      	cmp	r3, r8
 800a9f4:	d005      	beq.n	800aa02 <ip_reass_free_complete_datagram+0x26>
 800a9f6:	4b34      	ldr	r3, [pc, #208]	; (800aac8 <ip_reass_free_complete_datagram+0xec>)
 800a9f8:	22ad      	movs	r2, #173	; 0xad
 800a9fa:	4934      	ldr	r1, [pc, #208]	; (800aacc <ip_reass_free_complete_datagram+0xf0>)
 800a9fc:	4834      	ldr	r0, [pc, #208]	; (800aad0 <ip_reass_free_complete_datagram+0xf4>)
 800a9fe:	f000 fd1b 	bl	800b438 <iprintf>
  iprh = (struct ip_reass_helper *)ipr->p->payload;
 800aa02:	f8d8 6004 	ldr.w	r6, [r8, #4]
 800aa06:	6873      	ldr	r3, [r6, #4]
  if (iprh->start == 0) {
 800aa08:	889a      	ldrh	r2, [r3, #4]
 800aa0a:	b162      	cbz	r2, 800aa26 <ip_reass_free_complete_datagram+0x4a>
  u16_t pbufs_freed = 0;
 800aa0c:	2400      	movs	r4, #0
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 800aa0e:	f8df b0b8 	ldr.w	fp, [pc, #184]	; 800aac8 <ip_reass_free_complete_datagram+0xec>
 800aa12:	f8df a0cc 	ldr.w	sl, [pc, #204]	; 800aae0 <ip_reass_free_complete_datagram+0x104>
 800aa16:	e03e      	b.n	800aa96 <ip_reass_free_complete_datagram+0xba>
  LWIP_ASSERT("prev != ipr", prev != ipr);
 800aa18:	4b2b      	ldr	r3, [pc, #172]	; (800aac8 <ip_reass_free_complete_datagram+0xec>)
 800aa1a:	22ab      	movs	r2, #171	; 0xab
 800aa1c:	492d      	ldr	r1, [pc, #180]	; (800aad4 <ip_reass_free_complete_datagram+0xf8>)
 800aa1e:	482c      	ldr	r0, [pc, #176]	; (800aad0 <ip_reass_free_complete_datagram+0xf4>)
 800aa20:	f000 fd0a 	bl	800b438 <iprintf>
 800aa24:	e7e0      	b.n	800a9e8 <ip_reass_free_complete_datagram+0xc>
    ipr->p = iprh->next_pbuf;
 800aa26:	681b      	ldr	r3, [r3, #0]
 800aa28:	f8c8 3004 	str.w	r3, [r8, #4]
    SMEMCPY(p->payload, &ipr->iphdr, IP_HLEN);
 800aa2c:	6873      	ldr	r3, [r6, #4]
 800aa2e:	f8d8 2008 	ldr.w	r2, [r8, #8]
 800aa32:	f8d8 400c 	ldr.w	r4, [r8, #12]
 800aa36:	f8d8 0010 	ldr.w	r0, [r8, #16]
 800aa3a:	f8d8 1014 	ldr.w	r1, [r8, #20]
 800aa3e:	601a      	str	r2, [r3, #0]
 800aa40:	605c      	str	r4, [r3, #4]
 800aa42:	6098      	str	r0, [r3, #8]
 800aa44:	60d9      	str	r1, [r3, #12]
 800aa46:	f8d8 2018 	ldr.w	r2, [r8, #24]
 800aa4a:	611a      	str	r2, [r3, #16]
    icmp_time_exceeded(p, ICMP_TE_FRAG);
 800aa4c:	2101      	movs	r1, #1
 800aa4e:	4630      	mov	r0, r6
 800aa50:	f7ff fdbe 	bl	800a5d0 <icmp_time_exceeded>
    clen = pbuf_clen(p);
 800aa54:	4630      	mov	r0, r6
 800aa56:	f7fa fd01 	bl	800545c <pbuf_clen>
 800aa5a:	4604      	mov	r4, r0
    pbuf_free(p);
 800aa5c:	4630      	mov	r0, r6
 800aa5e:	f7fa fba3 	bl	80051a8 <pbuf_free>
  p = ipr->p;
 800aa62:	f8d8 6004 	ldr.w	r6, [r8, #4]
  while (p != NULL) {
 800aa66:	2e00      	cmp	r6, #0
 800aa68:	d1d1      	bne.n	800aa0e <ip_reass_free_complete_datagram+0x32>
  ip_reass_dequeue_datagram(ipr, prev);
 800aa6a:	4649      	mov	r1, r9
 800aa6c:	4640      	mov	r0, r8
 800aa6e:	f7ff ff91 	bl	800a994 <ip_reass_dequeue_datagram>
  LWIP_ASSERT("ip_reass_pbufcount >= pbufs_freed", ip_reass_pbufcount >= pbufs_freed);
 800aa72:	4b19      	ldr	r3, [pc, #100]	; (800aad8 <ip_reass_free_complete_datagram+0xfc>)
 800aa74:	881b      	ldrh	r3, [r3, #0]
 800aa76:	42a3      	cmp	r3, r4
 800aa78:	d31f      	bcc.n	800aaba <ip_reass_free_complete_datagram+0xde>
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - pbufs_freed);
 800aa7a:	4a17      	ldr	r2, [pc, #92]	; (800aad8 <ip_reass_free_complete_datagram+0xfc>)
 800aa7c:	8813      	ldrh	r3, [r2, #0]
 800aa7e:	1b1b      	subs	r3, r3, r4
 800aa80:	8013      	strh	r3, [r2, #0]
}
 800aa82:	4620      	mov	r0, r4
 800aa84:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 800aa88:	4425      	add	r5, r4
 800aa8a:	b2ac      	uxth	r4, r5
    pbuf_free(pcur);
 800aa8c:	4638      	mov	r0, r7
 800aa8e:	f7fa fb8b 	bl	80051a8 <pbuf_free>
  while (p != NULL) {
 800aa92:	2e00      	cmp	r6, #0
 800aa94:	d0e9      	beq.n	800aa6a <ip_reass_free_complete_datagram+0x8e>
    iprh = (struct ip_reass_helper *)p->payload;
 800aa96:	6873      	ldr	r3, [r6, #4]
    p = iprh->next_pbuf;
 800aa98:	4637      	mov	r7, r6
 800aa9a:	681e      	ldr	r6, [r3, #0]
    clen = pbuf_clen(pcur);
 800aa9c:	4638      	mov	r0, r7
 800aa9e:	f7fa fcdd 	bl	800545c <pbuf_clen>
 800aaa2:	4605      	mov	r5, r0
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 800aaa4:	1823      	adds	r3, r4, r0
 800aaa6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800aaaa:	dbed      	blt.n	800aa88 <ip_reass_free_complete_datagram+0xac>
 800aaac:	465b      	mov	r3, fp
 800aaae:	22cc      	movs	r2, #204	; 0xcc
 800aab0:	4651      	mov	r1, sl
 800aab2:	4807      	ldr	r0, [pc, #28]	; (800aad0 <ip_reass_free_complete_datagram+0xf4>)
 800aab4:	f000 fcc0 	bl	800b438 <iprintf>
 800aab8:	e7e6      	b.n	800aa88 <ip_reass_free_complete_datagram+0xac>
  LWIP_ASSERT("ip_reass_pbufcount >= pbufs_freed", ip_reass_pbufcount >= pbufs_freed);
 800aaba:	4b03      	ldr	r3, [pc, #12]	; (800aac8 <ip_reass_free_complete_datagram+0xec>)
 800aabc:	22d2      	movs	r2, #210	; 0xd2
 800aabe:	4907      	ldr	r1, [pc, #28]	; (800aadc <ip_reass_free_complete_datagram+0x100>)
 800aac0:	4803      	ldr	r0, [pc, #12]	; (800aad0 <ip_reass_free_complete_datagram+0xf4>)
 800aac2:	f000 fcb9 	bl	800b438 <iprintf>
 800aac6:	e7d8      	b.n	800aa7a <ip_reass_free_complete_datagram+0x9e>
 800aac8:	08012438 	.word	0x08012438
 800aacc:	0801249c 	.word	0x0801249c
 800aad0:	0800cb24 	.word	0x0800cb24
 800aad4:	08012490 	.word	0x08012490
 800aad8:	2000afb8 	.word	0x2000afb8
 800aadc:	080124d0 	.word	0x080124d0
 800aae0:	080124b0 	.word	0x080124b0

0800aae4 <ip_reass_remove_oldest_datagram>:
{
 800aae4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800aae8:	4605      	mov	r5, r0
 800aaea:	460f      	mov	r7, r1
  int pbufs_freed = 0, pbufs_freed_current;
 800aaec:	2600      	movs	r6, #0
    r = reassdatagrams;
 800aaee:	f8df 8070 	ldr.w	r8, [pc, #112]	; 800ab60 <ip_reass_remove_oldest_datagram+0x7c>
 800aaf2:	e027      	b.n	800ab44 <ip_reass_remove_oldest_datagram+0x60>
        other_datagrams++;
 800aaf4:	3401      	adds	r4, #1
        if (oldest == NULL) {
 800aaf6:	b1d0      	cbz	r0, 800ab2e <ip_reass_remove_oldest_datagram+0x4a>
        } else if (r->timer <= oldest->timer) {
 800aaf8:	f893 901f 	ldrb.w	r9, [r3, #31]
 800aafc:	7fc2      	ldrb	r2, [r0, #31]
 800aafe:	4591      	cmp	r9, r2
 800ab00:	bf98      	it	ls
 800ab02:	4661      	movls	r1, ip
 800ab04:	4591      	cmp	r9, r2
 800ab06:	bf98      	it	ls
 800ab08:	4618      	movls	r0, r3
      if (r->next != NULL) {
 800ab0a:	681a      	ldr	r2, [r3, #0]
 800ab0c:	469c      	mov	ip, r3
 800ab0e:	b18a      	cbz	r2, 800ab34 <ip_reass_remove_oldest_datagram+0x50>
 800ab10:	4613      	mov	r3, r2
      if (!IP_ADDRESSES_AND_ID_MATCH(&r->iphdr, fraghdr)) {
 800ab12:	695a      	ldr	r2, [r3, #20]
 800ab14:	4572      	cmp	r2, lr
 800ab16:	d1ed      	bne.n	800aaf4 <ip_reass_remove_oldest_datagram+0x10>
 800ab18:	f8d5 9010 	ldr.w	r9, [r5, #16]
 800ab1c:	699a      	ldr	r2, [r3, #24]
 800ab1e:	454a      	cmp	r2, r9
 800ab20:	d1e8      	bne.n	800aaf4 <ip_reass_remove_oldest_datagram+0x10>
 800ab22:	f8b3 900c 	ldrh.w	r9, [r3, #12]
 800ab26:	88aa      	ldrh	r2, [r5, #4]
 800ab28:	4591      	cmp	r9, r2
 800ab2a:	d1e3      	bne.n	800aaf4 <ip_reass_remove_oldest_datagram+0x10>
 800ab2c:	e7ed      	b.n	800ab0a <ip_reass_remove_oldest_datagram+0x26>
 800ab2e:	4661      	mov	r1, ip
 800ab30:	4618      	mov	r0, r3
 800ab32:	e7ea      	b.n	800ab0a <ip_reass_remove_oldest_datagram+0x26>
    if (oldest != NULL) {
 800ab34:	b110      	cbz	r0, 800ab3c <ip_reass_remove_oldest_datagram+0x58>
      pbufs_freed_current = ip_reass_free_complete_datagram(oldest, oldest_prev);
 800ab36:	f7ff ff51 	bl	800a9dc <ip_reass_free_complete_datagram>
      pbufs_freed += pbufs_freed_current;
 800ab3a:	4406      	add	r6, r0
  } while ((pbufs_freed < pbufs_needed) && (other_datagrams > 1));
 800ab3c:	42be      	cmp	r6, r7
 800ab3e:	da0b      	bge.n	800ab58 <ip_reass_remove_oldest_datagram+0x74>
 800ab40:	2c01      	cmp	r4, #1
 800ab42:	dd09      	ble.n	800ab58 <ip_reass_remove_oldest_datagram+0x74>
    r = reassdatagrams;
 800ab44:	f8d8 3000 	ldr.w	r3, [r8]
    while (r != NULL) {
 800ab48:	b133      	cbz	r3, 800ab58 <ip_reass_remove_oldest_datagram+0x74>
      if (!IP_ADDRESSES_AND_ID_MATCH(&r->iphdr, fraghdr)) {
 800ab4a:	f8d5 e00c 	ldr.w	lr, [r5, #12]
    other_datagrams = 0;
 800ab4e:	2400      	movs	r4, #0
    oldest_prev = NULL;
 800ab50:	4621      	mov	r1, r4
    prev = NULL;
 800ab52:	46a4      	mov	ip, r4
    oldest = NULL;
 800ab54:	4620      	mov	r0, r4
 800ab56:	e7dc      	b.n	800ab12 <ip_reass_remove_oldest_datagram+0x2e>
}
 800ab58:	4630      	mov	r0, r6
 800ab5a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ab5e:	bf00      	nop
 800ab60:	2000afbc 	.word	0x2000afbc

0800ab64 <ip_frag_free_pbuf_custom_ref>:
}

/** Free a struct pbuf_custom_ref */
static void
ip_frag_free_pbuf_custom_ref(struct pbuf_custom_ref *p)
{
 800ab64:	b510      	push	{r4, lr}
  LWIP_ASSERT("p != NULL", p != NULL);
 800ab66:	4604      	mov	r4, r0
 800ab68:	b120      	cbz	r0, 800ab74 <ip_frag_free_pbuf_custom_ref+0x10>
  memp_free(MEMP_FRAG_PBUF, p);
 800ab6a:	4621      	mov	r1, r4
 800ab6c:	2005      	movs	r0, #5
 800ab6e:	f7fa f85d 	bl	8004c2c <memp_free>
}
 800ab72:	bd10      	pop	{r4, pc}
  LWIP_ASSERT("p != NULL", p != NULL);
 800ab74:	4b03      	ldr	r3, [pc, #12]	; (800ab84 <ip_frag_free_pbuf_custom_ref+0x20>)
 800ab76:	f44f 7231 	mov.w	r2, #708	; 0x2c4
 800ab7a:	4903      	ldr	r1, [pc, #12]	; (800ab88 <ip_frag_free_pbuf_custom_ref+0x24>)
 800ab7c:	4803      	ldr	r0, [pc, #12]	; (800ab8c <ip_frag_free_pbuf_custom_ref+0x28>)
 800ab7e:	f000 fc5b 	bl	800b438 <iprintf>
 800ab82:	e7f2      	b.n	800ab6a <ip_frag_free_pbuf_custom_ref+0x6>
 800ab84:	08012438 	.word	0x08012438
 800ab88:	08010b68 	.word	0x08010b68
 800ab8c:	0800cb24 	.word	0x0800cb24

0800ab90 <ipfrag_free_pbuf_custom>:

/** Free-callback function to free a 'struct pbuf_custom_ref', called by
 * pbuf_free. */
static void
ipfrag_free_pbuf_custom(struct pbuf *p)
{
 800ab90:	b510      	push	{r4, lr}
  struct pbuf_custom_ref *pcr = (struct pbuf_custom_ref *)p;
  LWIP_ASSERT("pcr != NULL", pcr != NULL);
 800ab92:	4604      	mov	r4, r0
 800ab94:	b138      	cbz	r0, 800aba6 <ipfrag_free_pbuf_custom+0x16>
  LWIP_ASSERT("pcr == p", (void *)pcr == (void *)p);
  if (pcr->original != NULL) {
 800ab96:	6960      	ldr	r0, [r4, #20]
 800ab98:	b108      	cbz	r0, 800ab9e <ipfrag_free_pbuf_custom+0xe>
    pbuf_free(pcr->original);
 800ab9a:	f7fa fb05 	bl	80051a8 <pbuf_free>
  }
  ip_frag_free_pbuf_custom_ref(pcr);
 800ab9e:	4620      	mov	r0, r4
 800aba0:	f7ff ffe0 	bl	800ab64 <ip_frag_free_pbuf_custom_ref>
}
 800aba4:	bd10      	pop	{r4, pc}
  LWIP_ASSERT("pcr != NULL", pcr != NULL);
 800aba6:	4b04      	ldr	r3, [pc, #16]	; (800abb8 <ipfrag_free_pbuf_custom+0x28>)
 800aba8:	f240 22ce 	movw	r2, #718	; 0x2ce
 800abac:	4903      	ldr	r1, [pc, #12]	; (800abbc <ipfrag_free_pbuf_custom+0x2c>)
 800abae:	4804      	ldr	r0, [pc, #16]	; (800abc0 <ipfrag_free_pbuf_custom+0x30>)
 800abb0:	f000 fc42 	bl	800b438 <iprintf>
 800abb4:	e7ef      	b.n	800ab96 <ipfrag_free_pbuf_custom+0x6>
 800abb6:	bf00      	nop
 800abb8:	08012438 	.word	0x08012438
 800abbc:	080124f4 	.word	0x080124f4
 800abc0:	0800cb24 	.word	0x0800cb24

0800abc4 <ip_reass_tmr>:
{
 800abc4:	b538      	push	{r3, r4, r5, lr}
  r = reassdatagrams;
 800abc6:	4b0a      	ldr	r3, [pc, #40]	; (800abf0 <ip_reass_tmr+0x2c>)
 800abc8:	6818      	ldr	r0, [r3, #0]
  while (r != NULL) {
 800abca:	b178      	cbz	r0, 800abec <ip_reass_tmr+0x28>
  struct ip_reassdata *r, *prev = NULL;
 800abcc:	2400      	movs	r4, #0
 800abce:	e004      	b.n	800abda <ip_reass_tmr+0x16>
      r->timer--;
 800abd0:	3b01      	subs	r3, #1
 800abd2:	77c3      	strb	r3, [r0, #31]
      r = r->next;
 800abd4:	4604      	mov	r4, r0
 800abd6:	6800      	ldr	r0, [r0, #0]
  while (r != NULL) {
 800abd8:	b140      	cbz	r0, 800abec <ip_reass_tmr+0x28>
    if (r->timer > 0) {
 800abda:	7fc3      	ldrb	r3, [r0, #31]
 800abdc:	2b00      	cmp	r3, #0
 800abde:	d1f7      	bne.n	800abd0 <ip_reass_tmr+0xc>
      r = r->next;
 800abe0:	6805      	ldr	r5, [r0, #0]
      ip_reass_free_complete_datagram(tmp, prev);
 800abe2:	4621      	mov	r1, r4
 800abe4:	f7ff fefa 	bl	800a9dc <ip_reass_free_complete_datagram>
      r = r->next;
 800abe8:	4628      	mov	r0, r5
 800abea:	e7f5      	b.n	800abd8 <ip_reass_tmr+0x14>
}
 800abec:	bd38      	pop	{r3, r4, r5, pc}
 800abee:	bf00      	nop
 800abf0:	2000afbc 	.word	0x2000afbc

0800abf4 <ip4_reass>:
{
 800abf4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800abf8:	b083      	sub	sp, #12
 800abfa:	4605      	mov	r5, r0
  fraghdr = (struct ip_hdr *)p->payload;
 800abfc:	f8d0 9004 	ldr.w	r9, [r0, #4]
  if (IPH_HL_BYTES(fraghdr) != IP_HLEN) {
 800ac00:	f899 3000 	ldrb.w	r3, [r9]
 800ac04:	f003 030f 	and.w	r3, r3, #15
 800ac08:	2b05      	cmp	r3, #5
 800ac0a:	d16e      	bne.n	800acea <ip4_reass+0xf6>
  offset = IPH_OFFSET_BYTES(fraghdr);
 800ac0c:	f8b9 0006 	ldrh.w	r0, [r9, #6]
 800ac10:	f7f9 fca6 	bl	8004560 <lwip_htons>
 800ac14:	4607      	mov	r7, r0
  len = lwip_ntohs(IPH_LEN(fraghdr));
 800ac16:	f8b9 0002 	ldrh.w	r0, [r9, #2]
 800ac1a:	f7f9 fca1 	bl	8004560 <lwip_htons>
  hlen = IPH_HL_BYTES(fraghdr);
 800ac1e:	f899 3000 	ldrb.w	r3, [r9]
 800ac22:	f003 030f 	and.w	r3, r3, #15
  if (hlen > len) {
 800ac26:	009e      	lsls	r6, r3, #2
 800ac28:	ebb0 0f83 	cmp.w	r0, r3, lsl #2
 800ac2c:	d35d      	bcc.n	800acea <ip4_reass+0xf6>
  len = (u16_t)(len - hlen);
 800ac2e:	1b80      	subs	r0, r0, r6
 800ac30:	b286      	uxth	r6, r0
  clen = pbuf_clen(p);
 800ac32:	4628      	mov	r0, r5
 800ac34:	f7fa fc12 	bl	800545c <pbuf_clen>
 800ac38:	4680      	mov	r8, r0
  if ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS) {
 800ac3a:	4ba4      	ldr	r3, [pc, #656]	; (800aecc <ip4_reass+0x2d8>)
 800ac3c:	881b      	ldrh	r3, [r3, #0]
 800ac3e:	4403      	add	r3, r0
 800ac40:	2b0a      	cmp	r3, #10
 800ac42:	dc07      	bgt.n	800ac54 <ip4_reass+0x60>
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 800ac44:	4ba2      	ldr	r3, [pc, #648]	; (800aed0 <ip4_reass+0x2dc>)
 800ac46:	681c      	ldr	r4, [r3, #0]
 800ac48:	2c00      	cmp	r4, #0
 800ac4a:	f000 81c7 	beq.w	800afdc <ip4_reass+0x3e8>
    if (IP_ADDRESSES_AND_ID_MATCH(&ipr->iphdr, fraghdr)) {
 800ac4e:	f8d9 200c 	ldr.w	r2, [r9, #12]
 800ac52:	e00f      	b.n	800ac74 <ip4_reass+0x80>
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 800ac54:	4601      	mov	r1, r0
 800ac56:	4648      	mov	r0, r9
 800ac58:	f7ff ff44 	bl	800aae4 <ip_reass_remove_oldest_datagram>
 800ac5c:	2800      	cmp	r0, #0
 800ac5e:	d044      	beq.n	800acea <ip4_reass+0xf6>
        ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS))
 800ac60:	4b9a      	ldr	r3, [pc, #616]	; (800aecc <ip4_reass+0x2d8>)
 800ac62:	881b      	ldrh	r3, [r3, #0]
 800ac64:	4443      	add	r3, r8
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 800ac66:	2b0a      	cmp	r3, #10
 800ac68:	ddec      	ble.n	800ac44 <ip4_reass+0x50>
 800ac6a:	e03e      	b.n	800acea <ip4_reass+0xf6>
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 800ac6c:	6824      	ldr	r4, [r4, #0]
 800ac6e:	2c00      	cmp	r4, #0
 800ac70:	f000 81b4 	beq.w	800afdc <ip4_reass+0x3e8>
    if (IP_ADDRESSES_AND_ID_MATCH(&ipr->iphdr, fraghdr)) {
 800ac74:	6963      	ldr	r3, [r4, #20]
 800ac76:	4293      	cmp	r3, r2
 800ac78:	d1f8      	bne.n	800ac6c <ip4_reass+0x78>
 800ac7a:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800ac7e:	69a1      	ldr	r1, [r4, #24]
 800ac80:	4299      	cmp	r1, r3
 800ac82:	d1f3      	bne.n	800ac6c <ip4_reass+0x78>
 800ac84:	89a1      	ldrh	r1, [r4, #12]
 800ac86:	f8b9 3004 	ldrh.w	r3, [r9, #4]
 800ac8a:	4299      	cmp	r1, r3
 800ac8c:	d1ee      	bne.n	800ac6c <ip4_reass+0x78>
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 800ac8e:	f8b9 0006 	ldrh.w	r0, [r9, #6]
 800ac92:	f7f9 fc65 	bl	8004560 <lwip_htons>
 800ac96:	f3c0 000c 	ubfx	r0, r0, #0, #13
 800ac9a:	2800      	cmp	r0, #0
 800ac9c:	d03b      	beq.n	800ad16 <ip4_reass+0x122>
  offset = IPH_OFFSET_BYTES(fraghdr);
 800ac9e:	f3c7 070c 	ubfx	r7, r7, #0, #13
 800aca2:	00ff      	lsls	r7, r7, #3
  is_last = (IPH_OFFSET(fraghdr) & PP_NTOHS(IP_MF)) == 0;
 800aca4:	f8b9 9006 	ldrh.w	r9, [r9, #6]
  if (is_last) {
 800aca8:	f019 0920 	ands.w	r9, r9, #32
 800acac:	d107      	bne.n	800acbe <ip4_reass+0xca>
    u16_t datagram_len = (u16_t)(offset + len);
 800acae:	19bb      	adds	r3, r7, r6
 800acb0:	b29b      	uxth	r3, r3
    if ((datagram_len < offset) || (datagram_len > (0xFFFF - IP_HLEN))) {
 800acb2:	429f      	cmp	r7, r3
 800acb4:	d812      	bhi.n	800acdc <ip4_reass+0xe8>
 800acb6:	f64f 72eb 	movw	r2, #65515	; 0xffeb
 800acba:	4293      	cmp	r3, r2
 800acbc:	d80e      	bhi.n	800acdc <ip4_reass+0xe8>
  fraghdr = (struct ip_hdr *)new_p->payload;
 800acbe:	f8d5 a004 	ldr.w	sl, [r5, #4]
  len = lwip_ntohs(IPH_LEN(fraghdr));
 800acc2:	f8ba 0002 	ldrh.w	r0, [sl, #2]
 800acc6:	f7f9 fc4b 	bl	8004560 <lwip_htons>
  hlen = IPH_HL_BYTES(fraghdr);
 800acca:	f89a 3000 	ldrb.w	r3, [sl]
 800acce:	f003 030f 	and.w	r3, r3, #15
  if (hlen > len) {
 800acd2:	ea4f 0b83 	mov.w	fp, r3, lsl #2
 800acd6:	ebb0 0f83 	cmp.w	r0, r3, lsl #2
 800acda:	d233      	bcs.n	800ad44 <ip4_reass+0x150>
  LWIP_ASSERT("ipr != NULL", ipr != NULL);
 800acdc:	2c00      	cmp	r4, #0
 800acde:	f000 814c 	beq.w	800af7a <ip4_reass+0x386>
  if (ipr->p == NULL) {
 800ace2:	6863      	ldr	r3, [r4, #4]
 800ace4:	2b00      	cmp	r3, #0
 800ace6:	f000 8150 	beq.w	800af8a <ip4_reass+0x396>
  pbuf_free(p);
 800acea:	4628      	mov	r0, r5
 800acec:	f7fa fa5c 	bl	80051a8 <pbuf_free>
  return NULL;
 800acf0:	2500      	movs	r5, #0
}
 800acf2:	4628      	mov	r0, r5
 800acf4:	b003      	add	sp, #12
 800acf6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if (ip_reass_remove_oldest_datagram(fraghdr, clen) >= clen) {
 800acfa:	4641      	mov	r1, r8
 800acfc:	4648      	mov	r0, r9
 800acfe:	f7ff fef1 	bl	800aae4 <ip_reass_remove_oldest_datagram>
 800ad02:	4580      	cmp	r8, r0
 800ad04:	dcf1      	bgt.n	800acea <ip4_reass+0xf6>
      ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 800ad06:	2004      	movs	r0, #4
 800ad08:	f7f9 ff60 	bl	8004bcc <memp_malloc>
    if (ipr == NULL)
 800ad0c:	4604      	mov	r4, r0
 800ad0e:	2800      	cmp	r0, #0
 800ad10:	f040 816b 	bne.w	800afea <ip4_reass+0x3f6>
 800ad14:	e7e9      	b.n	800acea <ip4_reass+0xf6>
        ((lwip_ntohs(IPH_OFFSET(&ipr->iphdr)) & IP_OFFMASK) != 0)) {
 800ad16:	89e0      	ldrh	r0, [r4, #14]
 800ad18:	f7f9 fc22 	bl	8004560 <lwip_htons>
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 800ad1c:	f3c0 000c 	ubfx	r0, r0, #0, #13
 800ad20:	2800      	cmp	r0, #0
 800ad22:	d0bc      	beq.n	800ac9e <ip4_reass+0xaa>
      SMEMCPY(&ipr->iphdr, fraghdr, IP_HLEN);
 800ad24:	f8d9 3000 	ldr.w	r3, [r9]
 800ad28:	f8d9 0004 	ldr.w	r0, [r9, #4]
 800ad2c:	f8d9 1008 	ldr.w	r1, [r9, #8]
 800ad30:	f8d9 200c 	ldr.w	r2, [r9, #12]
 800ad34:	60a3      	str	r3, [r4, #8]
 800ad36:	60e0      	str	r0, [r4, #12]
 800ad38:	6121      	str	r1, [r4, #16]
 800ad3a:	6162      	str	r2, [r4, #20]
 800ad3c:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800ad40:	61a3      	str	r3, [r4, #24]
 800ad42:	e7ac      	b.n	800ac9e <ip4_reass+0xaa>
  len = (u16_t)(len - hlen);
 800ad44:	eba0 000b 	sub.w	r0, r0, fp
 800ad48:	fa1f fb80 	uxth.w	fp, r0
  offset = IPH_OFFSET_BYTES(fraghdr);
 800ad4c:	f8ba 0006 	ldrh.w	r0, [sl, #6]
 800ad50:	f7f9 fc06 	bl	8004560 <lwip_htons>
 800ad54:	f3c0 020c 	ubfx	r2, r0, #0, #13
 800ad58:	00d2      	lsls	r2, r2, #3
  iprh = (struct ip_reass_helper *)new_p->payload;
 800ad5a:	f8d5 a004 	ldr.w	sl, [r5, #4]
  iprh->next_pbuf = NULL;
 800ad5e:	2300      	movs	r3, #0
 800ad60:	f88a 3000 	strb.w	r3, [sl]
 800ad64:	f88a 3001 	strb.w	r3, [sl, #1]
 800ad68:	f88a 3002 	strb.w	r3, [sl, #2]
 800ad6c:	f88a 3003 	strb.w	r3, [sl, #3]
  iprh->start = offset;
 800ad70:	f8aa 2004 	strh.w	r2, [sl, #4]
  iprh->end = (u16_t)(offset + len);
 800ad74:	4493      	add	fp, r2
 800ad76:	fa1f f38b 	uxth.w	r3, fp
 800ad7a:	9301      	str	r3, [sp, #4]
 800ad7c:	f8aa b006 	strh.w	fp, [sl, #6]
  if (iprh->end < offset) {
 800ad80:	429a      	cmp	r2, r3
 800ad82:	d8ab      	bhi.n	800acdc <ip4_reass+0xe8>
  for (q = ipr->p; q != NULL;) {
 800ad84:	6860      	ldr	r0, [r4, #4]
 800ad86:	2800      	cmp	r0, #0
 800ad88:	f000 8120 	beq.w	800afcc <ip4_reass+0x3d8>
  int valid = 1;
 800ad8c:	f04f 0e01 	mov.w	lr, #1
  struct ip_reass_helper *iprh, *iprh_tmp, *iprh_prev = NULL;
 800ad90:	2300      	movs	r3, #0
 800ad92:	e030      	b.n	800adf6 <ip4_reass+0x202>
      iprh->next_pbuf = q;
 800ad94:	f8ca 0000 	str.w	r0, [sl]
      if (iprh_prev != NULL) {
 800ad98:	f1bc 0f00 	cmp.w	ip, #0
 800ad9c:	d020      	beq.n	800ade0 <ip4_reass+0x1ec>
        if ((iprh->start < iprh_prev->end) || (iprh->end > iprh_tmp->start)) {
 800ad9e:	f8bc 1006 	ldrh.w	r1, [ip, #6]
 800ada2:	428a      	cmp	r2, r1
 800ada4:	d39d      	bcc.n	800ace2 <ip4_reass+0xee>
 800ada6:	889b      	ldrh	r3, [r3, #4]
 800ada8:	9a01      	ldr	r2, [sp, #4]
 800adaa:	4293      	cmp	r3, r2
 800adac:	d399      	bcc.n	800ace2 <ip4_reass+0xee>
        iprh_prev->next_pbuf = new_p;
 800adae:	f8cc 5000 	str.w	r5, [ip]
        if (iprh_prev->end != iprh->start) {
 800adb2:	f8ba 3004 	ldrh.w	r3, [sl, #4]
          valid = 0;
 800adb6:	428b      	cmp	r3, r1
 800adb8:	bf18      	it	ne
 800adba:	f04f 0e00 	movne.w	lr, #0
  if (is_last || ((ipr->flags & IP_REASS_FLAG_LASTFRAG) != 0)) {
 800adbe:	f1b9 0f00 	cmp.w	r9, #0
 800adc2:	d02f      	beq.n	800ae24 <ip4_reass+0x230>
 800adc4:	7fa3      	ldrb	r3, [r4, #30]
 800adc6:	f013 0f01 	tst.w	r3, #1
 800adca:	d12b      	bne.n	800ae24 <ip4_reass+0x230>
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount + clen);
 800adcc:	4a3f      	ldr	r2, [pc, #252]	; (800aecc <ip4_reass+0x2d8>)
 800adce:	8813      	ldrh	r3, [r2, #0]
 800add0:	4498      	add	r8, r3
 800add2:	f8a2 8000 	strh.w	r8, [r2]
  if (is_last) {
 800add6:	f1b9 0f00 	cmp.w	r9, #0
 800adda:	d074      	beq.n	800aec6 <ip4_reass+0x2d2>
  return NULL;
 800addc:	2500      	movs	r5, #0
 800adde:	e788      	b.n	800acf2 <ip4_reass+0xfe>
        if (iprh->end > iprh_tmp->start) {
 800ade0:	889b      	ldrh	r3, [r3, #4]
 800ade2:	9a01      	ldr	r2, [sp, #4]
 800ade4:	4293      	cmp	r3, r2
 800ade6:	f4ff af7c 	bcc.w	800ace2 <ip4_reass+0xee>
        ipr->p = new_p;
 800adea:	6065      	str	r5, [r4, #4]
 800adec:	e7e7      	b.n	800adbe <ip4_reass+0x1ca>
    q = iprh_tmp->next_pbuf;
 800adee:	6818      	ldr	r0, [r3, #0]
  for (q = ipr->p; q != NULL;) {
 800adf0:	2800      	cmp	r0, #0
 800adf2:	f000 80da 	beq.w	800afaa <ip4_reass+0x3b6>
    iprh_tmp = (struct ip_reass_helper *)q->payload;
 800adf6:	469c      	mov	ip, r3
 800adf8:	6843      	ldr	r3, [r0, #4]
    if (iprh->start < iprh_tmp->start) {
 800adfa:	8899      	ldrh	r1, [r3, #4]
 800adfc:	428a      	cmp	r2, r1
 800adfe:	d3c9      	bcc.n	800ad94 <ip4_reass+0x1a0>
    } else if (iprh->start == iprh_tmp->start) {
 800ae00:	428a      	cmp	r2, r1
 800ae02:	f43f af6e 	beq.w	800ace2 <ip4_reass+0xee>
    } else if (iprh->start < iprh_tmp->end) {
 800ae06:	f8b3 b006 	ldrh.w	fp, [r3, #6]
 800ae0a:	455a      	cmp	r2, fp
 800ae0c:	f4ff af69 	bcc.w	800ace2 <ip4_reass+0xee>
      if (iprh_prev != NULL) {
 800ae10:	f1bc 0f00 	cmp.w	ip, #0
 800ae14:	d0eb      	beq.n	800adee <ip4_reass+0x1fa>
        if (iprh_prev->end != iprh_tmp->start) {
 800ae16:	f8bc 0006 	ldrh.w	r0, [ip, #6]
          valid = 0;
 800ae1a:	4288      	cmp	r0, r1
 800ae1c:	bf18      	it	ne
 800ae1e:	f04f 0e00 	movne.w	lr, #0
 800ae22:	e7e4      	b.n	800adee <ip4_reass+0x1fa>
    if (valid) {
 800ae24:	f1be 0f00 	cmp.w	lr, #0
 800ae28:	d02f      	beq.n	800ae8a <ip4_reass+0x296>
      if ((ipr->p == NULL) || (((struct ip_reass_helper *)ipr->p->payload)->start != 0)) {
 800ae2a:	6863      	ldr	r3, [r4, #4]
 800ae2c:	b343      	cbz	r3, 800ae80 <ip4_reass+0x28c>
 800ae2e:	6859      	ldr	r1, [r3, #4]
 800ae30:	888b      	ldrh	r3, [r1, #4]
 800ae32:	bb43      	cbnz	r3, 800ae86 <ip4_reass+0x292>
        q = iprh->next_pbuf;
 800ae34:	f8da 3000 	ldr.w	r3, [sl]
        while (q != NULL) {
 800ae38:	b15b      	cbz	r3, 800ae52 <ip4_reass+0x25e>
          iprh = (struct ip_reass_helper *)q->payload;
 800ae3a:	4652      	mov	r2, sl
 800ae3c:	f8d3 a004 	ldr.w	sl, [r3, #4]
          if (iprh_prev->end != iprh->start) {
 800ae40:	88d2      	ldrh	r2, [r2, #6]
 800ae42:	f8ba 3004 	ldrh.w	r3, [sl, #4]
 800ae46:	429a      	cmp	r2, r3
 800ae48:	d134      	bne.n	800aeb4 <ip4_reass+0x2c0>
          q = iprh->next_pbuf;
 800ae4a:	f8da 3000 	ldr.w	r3, [sl]
        while (q != NULL) {
 800ae4e:	2b00      	cmp	r3, #0
 800ae50:	d1f3      	bne.n	800ae3a <ip4_reass+0x246>
          LWIP_ASSERT("sanity check",
 800ae52:	458a      	cmp	sl, r1
 800ae54:	f040 80e7 	bne.w	800b026 <ip4_reass+0x432>
 800ae58:	4b1e      	ldr	r3, [pc, #120]	; (800aed4 <ip4_reass+0x2e0>)
 800ae5a:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 800ae5e:	491e      	ldr	r1, [pc, #120]	; (800aed8 <ip4_reass+0x2e4>)
 800ae60:	481e      	ldr	r0, [pc, #120]	; (800aedc <ip4_reass+0x2e8>)
 800ae62:	f000 fae9 	bl	800b438 <iprintf>
          LWIP_ASSERT("validate_datagram:next_pbuf!=NULL",
 800ae66:	f8da 3000 	ldr.w	r3, [sl]
 800ae6a:	b333      	cbz	r3, 800aeba <ip4_reass+0x2c6>
 800ae6c:	4b19      	ldr	r3, [pc, #100]	; (800aed4 <ip4_reass+0x2e0>)
 800ae6e:	f44f 72f1 	mov.w	r2, #482	; 0x1e2
 800ae72:	491b      	ldr	r1, [pc, #108]	; (800aee0 <ip4_reass+0x2ec>)
 800ae74:	4819      	ldr	r0, [pc, #100]	; (800aedc <ip4_reass+0x2e8>)
 800ae76:	f000 fadf 	bl	800b438 <iprintf>
 800ae7a:	f04f 0e01 	mov.w	lr, #1
 800ae7e:	e004      	b.n	800ae8a <ip4_reass+0x296>
        valid = 0;
 800ae80:	f04f 0e00 	mov.w	lr, #0
 800ae84:	e001      	b.n	800ae8a <ip4_reass+0x296>
 800ae86:	f04f 0e00 	mov.w	lr, #0
    return valid ? IP_REASS_VALIDATE_TELEGRAM_FINISHED : IP_REASS_VALIDATE_PBUF_QUEUED;
 800ae8a:	f1be 0100 	subs.w	r1, lr, #0
 800ae8e:	bf18      	it	ne
 800ae90:	2101      	movne	r1, #1
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount + clen);
 800ae92:	4a0e      	ldr	r2, [pc, #56]	; (800aecc <ip4_reass+0x2d8>)
 800ae94:	8813      	ldrh	r3, [r2, #0]
 800ae96:	4498      	add	r8, r3
 800ae98:	f8a2 8000 	strh.w	r8, [r2]
  if (is_last) {
 800ae9c:	f1b9 0f00 	cmp.w	r9, #0
 800aea0:	d105      	bne.n	800aeae <ip4_reass+0x2ba>
    u16_t datagram_len = (u16_t)(offset + len);
 800aea2:	443e      	add	r6, r7
    ipr->datagram_len = datagram_len;
 800aea4:	83a6      	strh	r6, [r4, #28]
    ipr->flags |= IP_REASS_FLAG_LASTFRAG;
 800aea6:	7fa3      	ldrb	r3, [r4, #30]
 800aea8:	f043 0301 	orr.w	r3, r3, #1
 800aeac:	77a3      	strb	r3, [r4, #30]
  if (valid == IP_REASS_VALIDATE_TELEGRAM_FINISHED) {
 800aeae:	b9c9      	cbnz	r1, 800aee4 <ip4_reass+0x2f0>
  return NULL;
 800aeb0:	2500      	movs	r5, #0
 800aeb2:	e71e      	b.n	800acf2 <ip4_reass+0xfe>
 800aeb4:	f04f 0e00 	mov.w	lr, #0
 800aeb8:	e7e7      	b.n	800ae8a <ip4_reass+0x296>
 800aeba:	f04f 0e01 	mov.w	lr, #1
 800aebe:	e7e4      	b.n	800ae8a <ip4_reass+0x296>
  if (is_last || ((ipr->flags & IP_REASS_FLAG_LASTFRAG) != 0)) {
 800aec0:	f04f 0e00 	mov.w	lr, #0
 800aec4:	e7e1      	b.n	800ae8a <ip4_reass+0x296>
  if (is_last) {
 800aec6:	2100      	movs	r1, #0
 800aec8:	e7eb      	b.n	800aea2 <ip4_reass+0x2ae>
 800aeca:	bf00      	nop
 800aecc:	2000afb8 	.word	0x2000afb8
 800aed0:	2000afbc 	.word	0x2000afbc
 800aed4:	08012438 	.word	0x08012438
 800aed8:	08012500 	.word	0x08012500
 800aedc:	0800cb24 	.word	0x0800cb24
 800aee0:	08012510 	.word	0x08012510
    u16_t datagram_len = (u16_t)(ipr->datagram_len + IP_HLEN);
 800aee4:	8ba0      	ldrh	r0, [r4, #28]
 800aee6:	3014      	adds	r0, #20
    r = ((struct ip_reass_helper *)ipr->p->payload)->next_pbuf;
 800aee8:	6863      	ldr	r3, [r4, #4]
 800aeea:	685d      	ldr	r5, [r3, #4]
 800aeec:	682e      	ldr	r6, [r5, #0]
    SMEMCPY(fraghdr, &ipr->iphdr, IP_HLEN);
 800aeee:	68a3      	ldr	r3, [r4, #8]
 800aef0:	68e7      	ldr	r7, [r4, #12]
 800aef2:	6921      	ldr	r1, [r4, #16]
 800aef4:	6962      	ldr	r2, [r4, #20]
 800aef6:	602b      	str	r3, [r5, #0]
 800aef8:	606f      	str	r7, [r5, #4]
 800aefa:	60a9      	str	r1, [r5, #8]
 800aefc:	60ea      	str	r2, [r5, #12]
 800aefe:	69a3      	ldr	r3, [r4, #24]
 800af00:	612b      	str	r3, [r5, #16]
    IPH_LEN_SET(fraghdr, lwip_htons(datagram_len));
 800af02:	b280      	uxth	r0, r0
 800af04:	f7f9 fb2c 	bl	8004560 <lwip_htons>
 800af08:	8068      	strh	r0, [r5, #2]
    IPH_OFFSET_SET(fraghdr, 0);
 800af0a:	2300      	movs	r3, #0
 800af0c:	71ab      	strb	r3, [r5, #6]
 800af0e:	71eb      	strb	r3, [r5, #7]
    IPH_CHKSUM_SET(fraghdr, 0);
 800af10:	72ab      	strb	r3, [r5, #10]
 800af12:	72eb      	strb	r3, [r5, #11]
    p = ipr->p;
 800af14:	6865      	ldr	r5, [r4, #4]
    while (r != NULL) {
 800af16:	b16e      	cbz	r6, 800af34 <ip4_reass+0x340>
      pbuf_remove_header(r, IP_HLEN);
 800af18:	f04f 0814 	mov.w	r8, #20
      iprh = (struct ip_reass_helper *)r->payload;
 800af1c:	6877      	ldr	r7, [r6, #4]
      pbuf_remove_header(r, IP_HLEN);
 800af1e:	4641      	mov	r1, r8
 800af20:	4630      	mov	r0, r6
 800af22:	f7fa f901 	bl	8005128 <pbuf_remove_header>
      pbuf_cat(p, r);
 800af26:	4631      	mov	r1, r6
 800af28:	4628      	mov	r0, r5
 800af2a:	f7fa fabb 	bl	80054a4 <pbuf_cat>
      r = iprh->next_pbuf;
 800af2e:	683e      	ldr	r6, [r7, #0]
    while (r != NULL) {
 800af30:	2e00      	cmp	r6, #0
 800af32:	d1f3      	bne.n	800af1c <ip4_reass+0x328>
    if (ipr == reassdatagrams) {
 800af34:	4b3d      	ldr	r3, [pc, #244]	; (800b02c <ip4_reass+0x438>)
 800af36:	6819      	ldr	r1, [r3, #0]
 800af38:	42a1      	cmp	r1, r4
 800af3a:	d005      	beq.n	800af48 <ip4_reass+0x354>
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 800af3c:	b129      	cbz	r1, 800af4a <ip4_reass+0x356>
        if (ipr_prev->next == ipr) {
 800af3e:	680b      	ldr	r3, [r1, #0]
 800af40:	42a3      	cmp	r3, r4
 800af42:	d002      	beq.n	800af4a <ip4_reass+0x356>
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 800af44:	4619      	mov	r1, r3
 800af46:	e7f9      	b.n	800af3c <ip4_reass+0x348>
      ipr_prev = NULL;
 800af48:	2100      	movs	r1, #0
    ip_reass_dequeue_datagram(ipr, ipr_prev);
 800af4a:	4620      	mov	r0, r4
 800af4c:	f7ff fd22 	bl	800a994 <ip_reass_dequeue_datagram>
    clen = pbuf_clen(p);
 800af50:	4628      	mov	r0, r5
 800af52:	f7fa fa83 	bl	800545c <pbuf_clen>
 800af56:	4604      	mov	r4, r0
    LWIP_ASSERT("ip_reass_pbufcount >= clen", ip_reass_pbufcount >= clen);
 800af58:	4b35      	ldr	r3, [pc, #212]	; (800b030 <ip4_reass+0x43c>)
 800af5a:	881b      	ldrh	r3, [r3, #0]
 800af5c:	4283      	cmp	r3, r0
 800af5e:	d304      	bcc.n	800af6a <ip4_reass+0x376>
    ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - clen);
 800af60:	4a33      	ldr	r2, [pc, #204]	; (800b030 <ip4_reass+0x43c>)
 800af62:	8813      	ldrh	r3, [r2, #0]
 800af64:	1b1c      	subs	r4, r3, r4
 800af66:	8014      	strh	r4, [r2, #0]
    return p;
 800af68:	e6c3      	b.n	800acf2 <ip4_reass+0xfe>
    LWIP_ASSERT("ip_reass_pbufcount >= clen", ip_reass_pbufcount >= clen);
 800af6a:	4b32      	ldr	r3, [pc, #200]	; (800b034 <ip4_reass+0x440>)
 800af6c:	f240 229b 	movw	r2, #667	; 0x29b
 800af70:	4931      	ldr	r1, [pc, #196]	; (800b038 <ip4_reass+0x444>)
 800af72:	4832      	ldr	r0, [pc, #200]	; (800b03c <ip4_reass+0x448>)
 800af74:	f000 fa60 	bl	800b438 <iprintf>
 800af78:	e7f2      	b.n	800af60 <ip4_reass+0x36c>
  LWIP_ASSERT("ipr != NULL", ipr != NULL);
 800af7a:	4b2e      	ldr	r3, [pc, #184]	; (800b034 <ip4_reass+0x440>)
 800af7c:	f44f 722a 	mov.w	r2, #680	; 0x2a8
 800af80:	492f      	ldr	r1, [pc, #188]	; (800b040 <ip4_reass+0x44c>)
 800af82:	482e      	ldr	r0, [pc, #184]	; (800b03c <ip4_reass+0x448>)
 800af84:	f000 fa58 	bl	800b438 <iprintf>
 800af88:	e6ab      	b.n	800ace2 <ip4_reass+0xee>
    LWIP_ASSERT("not firstalthough just enqueued", ipr == reassdatagrams);
 800af8a:	4b28      	ldr	r3, [pc, #160]	; (800b02c <ip4_reass+0x438>)
 800af8c:	681b      	ldr	r3, [r3, #0]
 800af8e:	42a3      	cmp	r3, r4
 800af90:	d006      	beq.n	800afa0 <ip4_reass+0x3ac>
 800af92:	4b28      	ldr	r3, [pc, #160]	; (800b034 <ip4_reass+0x440>)
 800af94:	f240 22ab 	movw	r2, #683	; 0x2ab
 800af98:	492a      	ldr	r1, [pc, #168]	; (800b044 <ip4_reass+0x450>)
 800af9a:	4828      	ldr	r0, [pc, #160]	; (800b03c <ip4_reass+0x448>)
 800af9c:	f000 fa4c 	bl	800b438 <iprintf>
    ip_reass_dequeue_datagram(ipr, NULL);
 800afa0:	2100      	movs	r1, #0
 800afa2:	4620      	mov	r0, r4
 800afa4:	f7ff fcf6 	bl	800a994 <ip_reass_dequeue_datagram>
 800afa8:	e69f      	b.n	800acea <ip4_reass+0xf6>
      iprh_prev->next_pbuf = new_p;
 800afaa:	601d      	str	r5, [r3, #0]
      if (iprh_prev->end != iprh->start) {
 800afac:	f8ba 3004 	ldrh.w	r3, [sl, #4]
 800afb0:	455b      	cmp	r3, fp
 800afb2:	f43f af04 	beq.w	800adbe <ip4_reass+0x1ca>
  if (is_last || ((ipr->flags & IP_REASS_FLAG_LASTFRAG) != 0)) {
 800afb6:	f1b9 0f00 	cmp.w	r9, #0
 800afba:	d081      	beq.n	800aec0 <ip4_reass+0x2cc>
 800afbc:	7fa3      	ldrb	r3, [r4, #30]
 800afbe:	f013 0f01 	tst.w	r3, #1
 800afc2:	f43f af03 	beq.w	800adcc <ip4_reass+0x1d8>
 800afc6:	f04f 0e00 	mov.w	lr, #0
 800afca:	e75e      	b.n	800ae8a <ip4_reass+0x296>
      ipr->p = new_p;
 800afcc:	6065      	str	r5, [r4, #4]
  if (is_last || ((ipr->flags & IP_REASS_FLAG_LASTFRAG) != 0)) {
 800afce:	f1b9 0f00 	cmp.w	r9, #0
 800afd2:	f43f af2a 	beq.w	800ae2a <ip4_reass+0x236>
  int valid = 1;
 800afd6:	f04f 0e01 	mov.w	lr, #1
 800afda:	e6f3      	b.n	800adc4 <ip4_reass+0x1d0>
  ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 800afdc:	2004      	movs	r0, #4
 800afde:	f7f9 fdf5 	bl	8004bcc <memp_malloc>
  if (ipr == NULL) {
 800afe2:	4604      	mov	r4, r0
 800afe4:	2800      	cmp	r0, #0
 800afe6:	f43f ae88 	beq.w	800acfa <ip4_reass+0x106>
  memset(ipr, 0, sizeof(struct ip_reassdata));
 800afea:	2300      	movs	r3, #0
 800afec:	6063      	str	r3, [r4, #4]
 800afee:	60a3      	str	r3, [r4, #8]
 800aff0:	60e3      	str	r3, [r4, #12]
 800aff2:	6123      	str	r3, [r4, #16]
 800aff4:	6163      	str	r3, [r4, #20]
 800aff6:	61a3      	str	r3, [r4, #24]
 800aff8:	61e3      	str	r3, [r4, #28]
  ipr->timer = IP_REASS_MAXAGE;
 800affa:	230f      	movs	r3, #15
 800affc:	77e3      	strb	r3, [r4, #31]
  ipr->next = reassdatagrams;
 800affe:	4b0b      	ldr	r3, [pc, #44]	; (800b02c <ip4_reass+0x438>)
 800b000:	681a      	ldr	r2, [r3, #0]
 800b002:	6022      	str	r2, [r4, #0]
  reassdatagrams = ipr;
 800b004:	601c      	str	r4, [r3, #0]
  SMEMCPY(&(ipr->iphdr), fraghdr, IP_HLEN);
 800b006:	f8d9 3000 	ldr.w	r3, [r9]
 800b00a:	f8d9 0004 	ldr.w	r0, [r9, #4]
 800b00e:	f8d9 1008 	ldr.w	r1, [r9, #8]
 800b012:	f8d9 200c 	ldr.w	r2, [r9, #12]
 800b016:	60a3      	str	r3, [r4, #8]
 800b018:	60e0      	str	r0, [r4, #12]
 800b01a:	6121      	str	r1, [r4, #16]
 800b01c:	6162      	str	r2, [r4, #20]
 800b01e:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800b022:	61a3      	str	r3, [r4, #24]
    if (ipr == NULL) {
 800b024:	e63b      	b.n	800ac9e <ip4_reass+0xaa>
          LWIP_ASSERT("sanity check",
 800b026:	f04f 0e01 	mov.w	lr, #1
 800b02a:	e72e      	b.n	800ae8a <ip4_reass+0x296>
 800b02c:	2000afbc 	.word	0x2000afbc
 800b030:	2000afb8 	.word	0x2000afb8
 800b034:	08012438 	.word	0x08012438
 800b038:	08012534 	.word	0x08012534
 800b03c:	0800cb24 	.word	0x0800cb24
 800b040:	08012550 	.word	0x08012550
 800b044:	0801255c 	.word	0x0801255c

0800b048 <ip4_frag>:
 *
 * @return ERR_OK if sent successfully, err_t otherwise
 */
err_t
ip4_frag(struct pbuf *p, struct netif *netif, const ip4_addr_t *dest)
{
 800b048:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b04c:	b08d      	sub	sp, #52	; 0x34
 800b04e:	4605      	mov	r5, r0
 800b050:	9107      	str	r1, [sp, #28]
 800b052:	920a      	str	r2, [sp, #40]	; 0x28
  u16_t newpbuflen = 0;
  u16_t left_to_copy;
#endif
  struct ip_hdr *original_iphdr;
  struct ip_hdr *iphdr;
  const u16_t nfb = (u16_t)((netif->mtu - IP_HLEN) / 8);
 800b054:	8c8b      	ldrh	r3, [r1, #36]	; 0x24
 800b056:	3b14      	subs	r3, #20
 800b058:	bf48      	it	mi
 800b05a:	3307      	addmi	r3, #7
 800b05c:	f3c3 03cf 	ubfx	r3, r3, #3, #16
 800b060:	9306      	str	r3, [sp, #24]
  int last;
  u16_t poff = IP_HLEN;
  u16_t tmp;
  int mf_set;

  original_iphdr = (struct ip_hdr *)p->payload;
 800b062:	f8d0 a004 	ldr.w	sl, [r0, #4]
  iphdr = original_iphdr;
  if (IPH_HL_BYTES(iphdr) != IP_HLEN) {
 800b066:	f89a 3000 	ldrb.w	r3, [sl]
 800b06a:	f003 030f 	and.w	r3, r3, #15
 800b06e:	2b05      	cmp	r3, #5
 800b070:	f040 80d9 	bne.w	800b226 <ip4_frag+0x1de>
    /* ip4_frag() does not support IP options */
    return ERR_VAL;
  }
  LWIP_ERROR("ip4_frag(): pbuf too short", p->len >= IP_HLEN, return ERR_VAL);
 800b074:	8943      	ldrh	r3, [r0, #10]
 800b076:	2b13      	cmp	r3, #19
 800b078:	d943      	bls.n	800b102 <ip4_frag+0xba>

  /* Save original offset */
  tmp = lwip_ntohs(IPH_OFFSET(iphdr));
 800b07a:	f8ba 0006 	ldrh.w	r0, [sl, #6]
 800b07e:	f7f9 fa6f 	bl	8004560 <lwip_htons>
  ofo = tmp & IP_OFFMASK;
 800b082:	f3c0 030c 	ubfx	r3, r0, #0, #13
 800b086:	9305      	str	r3, [sp, #20]
  /* already fragmented? if so, the last fragment we create must have MF, too */
  mf_set = tmp & IP_MF;
 800b088:	f400 5300 	and.w	r3, r0, #8192	; 0x2000
 800b08c:	930b      	str	r3, [sp, #44]	; 0x2c

  left = (u16_t)(p->tot_len - IP_HLEN);
 800b08e:	892b      	ldrh	r3, [r5, #8]
 800b090:	3b14      	subs	r3, #20
 800b092:	b29b      	uxth	r3, r3
 800b094:	9303      	str	r3, [sp, #12]

  while (left) {
 800b096:	2b00      	cmp	r3, #0
 800b098:	f000 80c8 	beq.w	800b22c <ip4_frag+0x1e4>
    /* Fill this fragment */
    fragsize = LWIP_MIN(left, (u16_t)(nfb * 8));
 800b09c:	9b06      	ldr	r3, [sp, #24]
 800b09e:	00db      	lsls	r3, r3, #3
 800b0a0:	b29b      	uxth	r3, r3
 800b0a2:	9308      	str	r3, [sp, #32]
  u16_t poff = IP_HLEN;
 800b0a4:	f04f 0914 	mov.w	r9, #20
  u16_t newpbuflen = 0;
 800b0a8:	2400      	movs	r4, #0
    fragsize = LWIP_MIN(left, (u16_t)(nfb * 8));
 800b0aa:	9b08      	ldr	r3, [sp, #32]
 800b0ac:	9a03      	ldr	r2, [sp, #12]
 800b0ae:	4293      	cmp	r3, r2
 800b0b0:	bf28      	it	cs
 800b0b2:	4613      	movcs	r3, r2
 800b0b4:	9304      	str	r3, [sp, #16]
    /* When not using a static buffer, create a chain of pbufs.
     * The first will be a PBUF_RAM holding the link and IP header.
     * The rest will be PBUF_REFs mirroring the pbuf chain to be fragged,
     * but limited to the size of an mtu.
     */
    rambuf = pbuf_alloc(PBUF_LINK, IP_HLEN, PBUF_RAM);
 800b0b6:	f44f 7220 	mov.w	r2, #640	; 0x280
 800b0ba:	2114      	movs	r1, #20
 800b0bc:	200e      	movs	r0, #14
 800b0be:	f7fa f8dd 	bl	800527c <pbuf_alloc>
    if (rambuf == NULL) {
 800b0c2:	4683      	mov	fp, r0
 800b0c4:	2800      	cmp	r0, #0
 800b0c6:	f000 80b3 	beq.w	800b230 <ip4_frag+0x1e8>
      goto memerr;
    }
    LWIP_ASSERT("this needs a pbuf in one piece!",
 800b0ca:	8943      	ldrh	r3, [r0, #10]
 800b0cc:	2b13      	cmp	r3, #19
 800b0ce:	d922      	bls.n	800b116 <ip4_frag+0xce>
                (rambuf->len >= (IP_HLEN)));
    SMEMCPY(rambuf->payload, original_iphdr, IP_HLEN);
 800b0d0:	f8db 3004 	ldr.w	r3, [fp, #4]
 800b0d4:	f8da 2000 	ldr.w	r2, [sl]
 800b0d8:	f8da 6004 	ldr.w	r6, [sl, #4]
 800b0dc:	f8da 0008 	ldr.w	r0, [sl, #8]
 800b0e0:	f8da 100c 	ldr.w	r1, [sl, #12]
 800b0e4:	601a      	str	r2, [r3, #0]
 800b0e6:	605e      	str	r6, [r3, #4]
 800b0e8:	6098      	str	r0, [r3, #8]
 800b0ea:	60d9      	str	r1, [r3, #12]
 800b0ec:	f8da 2010 	ldr.w	r2, [sl, #16]
 800b0f0:	611a      	str	r2, [r3, #16]
    iphdr = (struct ip_hdr *)rambuf->payload;
 800b0f2:	f8db 3004 	ldr.w	r3, [fp, #4]
 800b0f6:	9309      	str	r3, [sp, #36]	; 0x24

    left_to_copy = fragsize;
    while (left_to_copy) {
 800b0f8:	9b04      	ldr	r3, [sp, #16]
 800b0fa:	2b00      	cmp	r3, #0
 800b0fc:	d04e      	beq.n	800b19c <ip4_frag+0x154>
    left_to_copy = fragsize;
 800b0fe:	461e      	mov	r6, r3
 800b100:	e01d      	b.n	800b13e <ip4_frag+0xf6>
  LWIP_ERROR("ip4_frag(): pbuf too short", p->len >= IP_HLEN, return ERR_VAL);
 800b102:	4b4d      	ldr	r3, [pc, #308]	; (800b238 <ip4_frag+0x1f0>)
 800b104:	f44f 723f 	mov.w	r2, #764	; 0x2fc
 800b108:	494c      	ldr	r1, [pc, #304]	; (800b23c <ip4_frag+0x1f4>)
 800b10a:	484d      	ldr	r0, [pc, #308]	; (800b240 <ip4_frag+0x1f8>)
 800b10c:	f000 f994 	bl	800b438 <iprintf>
 800b110:	f06f 0005 	mvn.w	r0, #5
 800b114:	e07b      	b.n	800b20e <ip4_frag+0x1c6>
    LWIP_ASSERT("this needs a pbuf in one piece!",
 800b116:	4b48      	ldr	r3, [pc, #288]	; (800b238 <ip4_frag+0x1f0>)
 800b118:	f44f 7249 	mov.w	r2, #804	; 0x324
 800b11c:	4949      	ldr	r1, [pc, #292]	; (800b244 <ip4_frag+0x1fc>)
 800b11e:	4848      	ldr	r0, [pc, #288]	; (800b240 <ip4_frag+0x1f8>)
 800b120:	f000 f98a 	bl	800b438 <iprintf>
 800b124:	e7d4      	b.n	800b0d0 <ip4_frag+0x88>
      struct pbuf_custom_ref *pcr;
      u16_t plen = (u16_t)(p->len - poff);
      LWIP_ASSERT("p->len >= poff", p->len >= poff);
 800b126:	4b44      	ldr	r3, [pc, #272]	; (800b238 <ip4_frag+0x1f0>)
 800b128:	f240 322d 	movw	r2, #813	; 0x32d
 800b12c:	4946      	ldr	r1, [pc, #280]	; (800b248 <ip4_frag+0x200>)
 800b12e:	4844      	ldr	r0, [pc, #272]	; (800b240 <ip4_frag+0x1f8>)
 800b130:	f000 f982 	bl	800b438 <iprintf>
 800b134:	e009      	b.n	800b14a <ip4_frag+0x102>
      newpbuflen = LWIP_MIN(left_to_copy, plen);
      /* Is this pbuf already empty? */
      if (!newpbuflen) {
        poff = 0;
        p = p->next;
 800b136:	682d      	ldr	r5, [r5, #0]
    while (left_to_copy) {
 800b138:	b376      	cbz	r6, 800b198 <ip4_frag+0x150>
  u16_t newpbuflen = 0;
 800b13a:	f04f 0900 	mov.w	r9, #0
      u16_t plen = (u16_t)(p->len - poff);
 800b13e:	896b      	ldrh	r3, [r5, #10]
 800b140:	eba3 0409 	sub.w	r4, r3, r9
 800b144:	b2a4      	uxth	r4, r4
      LWIP_ASSERT("p->len >= poff", p->len >= poff);
 800b146:	454b      	cmp	r3, r9
 800b148:	d3ed      	bcc.n	800b126 <ip4_frag+0xde>
      newpbuflen = LWIP_MIN(left_to_copy, plen);
 800b14a:	42b4      	cmp	r4, r6
 800b14c:	bf28      	it	cs
 800b14e:	4634      	movcs	r4, r6
      if (!newpbuflen) {
 800b150:	2c00      	cmp	r4, #0
 800b152:	d0f0      	beq.n	800b136 <ip4_frag+0xee>
  return (struct pbuf_custom_ref *)memp_malloc(MEMP_FRAG_PBUF);
 800b154:	2005      	movs	r0, #5
 800b156:	f7f9 fd39 	bl	8004bcc <memp_malloc>
        continue;
      }
      pcr = ip_frag_alloc_pbuf_custom_ref();
      if (pcr == NULL) {
 800b15a:	4607      	mov	r7, r0
 800b15c:	2800      	cmp	r0, #0
 800b15e:	d051      	beq.n	800b204 <ip4_frag+0x1bc>
        pbuf_free(rambuf);
        goto memerr;
      }
      /* Mirror this pbuf, although we might not need all of it. */
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 800b160:	9401      	str	r4, [sp, #4]
 800b162:	686b      	ldr	r3, [r5, #4]
 800b164:	444b      	add	r3, r9
 800b166:	9300      	str	r3, [sp, #0]
 800b168:	4603      	mov	r3, r0
 800b16a:	2241      	movs	r2, #65	; 0x41
 800b16c:	4621      	mov	r1, r4
 800b16e:	2000      	movs	r0, #0
 800b170:	f7f9 ffb8 	bl	80050e4 <pbuf_alloced_custom>
                                    (u8_t *)p->payload + poff, newpbuflen);
      if (newpbuf == NULL) {
 800b174:	4680      	mov	r8, r0
 800b176:	2800      	cmp	r0, #0
 800b178:	d04c      	beq.n	800b214 <ip4_frag+0x1cc>
        ip_frag_free_pbuf_custom_ref(pcr);
        pbuf_free(rambuf);
        goto memerr;
      }
      pbuf_ref(p);
 800b17a:	4628      	mov	r0, r5
 800b17c:	f7fa f97a 	bl	8005474 <pbuf_ref>
      pcr->original = p;
 800b180:	617d      	str	r5, [r7, #20]
      pcr->pc.custom_free_function = ipfrag_free_pbuf_custom;
 800b182:	4b32      	ldr	r3, [pc, #200]	; (800b24c <ip4_frag+0x204>)
 800b184:	613b      	str	r3, [r7, #16]

      /* Add it to end of rambuf's chain, but using pbuf_cat, not pbuf_chain
       * so that it is removed when pbuf_dechain is later called on rambuf.
       */
      pbuf_cat(rambuf, newpbuf);
 800b186:	4641      	mov	r1, r8
 800b188:	4658      	mov	r0, fp
 800b18a:	f7fa f98b 	bl	80054a4 <pbuf_cat>
      left_to_copy = (u16_t)(left_to_copy - newpbuflen);
 800b18e:	1b36      	subs	r6, r6, r4
 800b190:	b2b6      	uxth	r6, r6
      if (left_to_copy) {
 800b192:	b11e      	cbz	r6, 800b19c <ip4_frag+0x154>
        poff = 0;
        p = p->next;
 800b194:	682d      	ldr	r5, [r5, #0]
    while (left_to_copy) {
 800b196:	e7d0      	b.n	800b13a <ip4_frag+0xf2>
        poff = 0;
 800b198:	46b1      	mov	r9, r6
 800b19a:	4634      	mov	r4, r6
      }
    }
    poff = (u16_t)(poff + newpbuflen);
 800b19c:	44a1      	add	r9, r4
 800b19e:	fa1f f989 	uxth.w	r9, r9

    /* Correct header */
    last = (left <= netif->mtu - IP_HLEN);

    /* Set new offset and MF flag */
    tmp = (IP_OFFMASK & (ofo));
 800b1a2:	9b05      	ldr	r3, [sp, #20]
 800b1a4:	f3c3 000c 	ubfx	r0, r3, #0, #13
    last = (left <= netif->mtu - IP_HLEN);
 800b1a8:	9b07      	ldr	r3, [sp, #28]
 800b1aa:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800b1ac:	3b13      	subs	r3, #19
    if (!last || mf_set) {
 800b1ae:	9a03      	ldr	r2, [sp, #12]
 800b1b0:	4293      	cmp	r3, r2
 800b1b2:	dd01      	ble.n	800b1b8 <ip4_frag+0x170>
 800b1b4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b1b6:	b10b      	cbz	r3, 800b1bc <ip4_frag+0x174>
      /* the last fragment has MF set if the input frame had it */
      tmp = tmp | IP_MF;
 800b1b8:	f440 5000 	orr.w	r0, r0, #8192	; 0x2000
    }
    IPH_OFFSET_SET(iphdr, lwip_htons(tmp));
 800b1bc:	f7f9 f9d0 	bl	8004560 <lwip_htons>
 800b1c0:	9e09      	ldr	r6, [sp, #36]	; 0x24
 800b1c2:	80f0      	strh	r0, [r6, #6]
    IPH_LEN_SET(iphdr, lwip_htons((u16_t)(fragsize + IP_HLEN)));
 800b1c4:	9f04      	ldr	r7, [sp, #16]
 800b1c6:	f107 0014 	add.w	r0, r7, #20
 800b1ca:	b280      	uxth	r0, r0
 800b1cc:	f7f9 f9c8 	bl	8004560 <lwip_htons>
 800b1d0:	8070      	strh	r0, [r6, #2]
    IPH_CHKSUM_SET(iphdr, 0);
 800b1d2:	2300      	movs	r3, #0
 800b1d4:	72b3      	strb	r3, [r6, #10]
 800b1d6:	72f3      	strb	r3, [r6, #11]
#endif /* CHECKSUM_GEN_IP */

    /* No need for separate header pbuf - we allowed room for it in rambuf
     * when allocated.
     */
    netif->output(netif, rambuf, dest);
 800b1d8:	9807      	ldr	r0, [sp, #28]
 800b1da:	6943      	ldr	r3, [r0, #20]
 800b1dc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800b1de:	4659      	mov	r1, fp
 800b1e0:	4798      	blx	r3
     * recreate it next time round the loop. If we're lucky the hardware
     * will have already sent the packet, the free will really free, and
     * there will be zero memory penalty.
     */

    pbuf_free(rambuf);
 800b1e2:	4658      	mov	r0, fp
 800b1e4:	f7f9 ffe0 	bl	80051a8 <pbuf_free>
    left = (u16_t)(left - fragsize);
 800b1e8:	9b03      	ldr	r3, [sp, #12]
 800b1ea:	1bdb      	subs	r3, r3, r7
 800b1ec:	b29a      	uxth	r2, r3
 800b1ee:	9203      	str	r2, [sp, #12]
    ofo = (u16_t)(ofo + nfb);
 800b1f0:	9b05      	ldr	r3, [sp, #20]
 800b1f2:	9906      	ldr	r1, [sp, #24]
 800b1f4:	440b      	add	r3, r1
 800b1f6:	b29b      	uxth	r3, r3
 800b1f8:	9305      	str	r3, [sp, #20]
  while (left) {
 800b1fa:	2a00      	cmp	r2, #0
 800b1fc:	f47f af55 	bne.w	800b0aa <ip4_frag+0x62>
  }
  MIB2_STATS_INC(mib2.ipfragoks);
  return ERR_OK;
 800b200:	2000      	movs	r0, #0
 800b202:	e004      	b.n	800b20e <ip4_frag+0x1c6>
        pbuf_free(rambuf);
 800b204:	4658      	mov	r0, fp
 800b206:	f7f9 ffcf 	bl	80051a8 <pbuf_free>
memerr:
  MIB2_STATS_INC(mib2.ipfragfails);
  return ERR_MEM;
 800b20a:	f04f 30ff 	mov.w	r0, #4294967295
}
 800b20e:	b00d      	add	sp, #52	; 0x34
 800b210:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        ip_frag_free_pbuf_custom_ref(pcr);
 800b214:	4638      	mov	r0, r7
 800b216:	f7ff fca5 	bl	800ab64 <ip_frag_free_pbuf_custom_ref>
        pbuf_free(rambuf);
 800b21a:	4658      	mov	r0, fp
 800b21c:	f7f9 ffc4 	bl	80051a8 <pbuf_free>
  return ERR_MEM;
 800b220:	f04f 30ff 	mov.w	r0, #4294967295
        goto memerr;
 800b224:	e7f3      	b.n	800b20e <ip4_frag+0x1c6>
    return ERR_VAL;
 800b226:	f06f 0005 	mvn.w	r0, #5
 800b22a:	e7f0      	b.n	800b20e <ip4_frag+0x1c6>
  return ERR_OK;
 800b22c:	2000      	movs	r0, #0
 800b22e:	e7ee      	b.n	800b20e <ip4_frag+0x1c6>
  return ERR_MEM;
 800b230:	f04f 30ff 	mov.w	r0, #4294967295
 800b234:	e7eb      	b.n	800b20e <ip4_frag+0x1c6>
 800b236:	bf00      	nop
 800b238:	08012438 	.word	0x08012438
 800b23c:	0801257c 	.word	0x0801257c
 800b240:	0800cb24 	.word	0x0800cb24
 800b244:	08012598 	.word	0x08012598
 800b248:	080125b8 	.word	0x080125b8
 800b24c:	0800ab91 	.word	0x0800ab91

0800b250 <ethernet_input>:
 * @see ETHARP_SUPPORT_VLAN
 * @see LWIP_HOOK_VLAN_CHECK
 */
err_t
ethernet_input(struct pbuf *p, struct netif *netif)
{
 800b250:	b570      	push	{r4, r5, r6, lr}
 800b252:	4604      	mov	r4, r0
  u16_t next_hdr_offset = SIZEOF_ETH_HDR;
#endif /* LWIP_ARP || ETHARP_SUPPORT_VLAN */

  LWIP_ASSERT_CORE_LOCKED();

  if (p->len <= SIZEOF_ETH_HDR) {
 800b254:	8943      	ldrh	r3, [r0, #10]
 800b256:	2b0e      	cmp	r3, #14
 800b258:	d91c      	bls.n	800b294 <ethernet_input+0x44>
 800b25a:	460d      	mov	r5, r1
    ETHARP_STATS_INC(etharp.drop);
    MIB2_STATS_NETIF_INC(netif, ifinerrors);
    goto free_and_return;
  }

  if (p->if_idx == NETIF_NO_INDEX) {
 800b25c:	7bc3      	ldrb	r3, [r0, #15]
 800b25e:	b91b      	cbnz	r3, 800b268 <ethernet_input+0x18>
    p->if_idx = netif_get_index(netif);
 800b260:	f891 3030 	ldrb.w	r3, [r1, #48]	; 0x30
 800b264:	3301      	adds	r3, #1
 800b266:	73c3      	strb	r3, [r0, #15]
  }

  /* points to packet payload, which starts with an Ethernet header */
  ethhdr = (struct eth_hdr *)p->payload;
 800b268:	6860      	ldr	r0, [r4, #4]
               (unsigned char)ethhdr->dest.addr[3], (unsigned char)ethhdr->dest.addr[4], (unsigned char)ethhdr->dest.addr[5],
               (unsigned char)ethhdr->src.addr[0],  (unsigned char)ethhdr->src.addr[1],  (unsigned char)ethhdr->src.addr[2],
               (unsigned char)ethhdr->src.addr[3],  (unsigned char)ethhdr->src.addr[4],  (unsigned char)ethhdr->src.addr[5],
               lwip_htons(ethhdr->type)));

  type = ethhdr->type;
 800b26a:	8986      	ldrh	r6, [r0, #12]

#if LWIP_ARP_FILTER_NETIF
  netif = LWIP_ARP_FILTER_NETIF_FN(p, netif, lwip_htons(type));
#endif /* LWIP_ARP_FILTER_NETIF*/

  if (ethhdr->dest.addr[0] & 1) {
 800b26c:	7803      	ldrb	r3, [r0, #0]
 800b26e:	f013 0f01 	tst.w	r3, #1
 800b272:	d00a      	beq.n	800b28a <ethernet_input+0x3a>
    /* this might be a multicast or broadcast packet */
    if (ethhdr->dest.addr[0] == LL_IP4_MULTICAST_ADDR_0) {
 800b274:	2b01      	cmp	r3, #1
 800b276:	d012      	beq.n	800b29e <ethernet_input+0x4e>
             (ethhdr->dest.addr[1] == LL_IP6_MULTICAST_ADDR_1)) {
      /* mark the pbuf as link-layer multicast */
      p->flags |= PBUF_FLAG_LLMCAST;
    }
#endif /* LWIP_IPV6 */
    else if (eth_addr_cmp(&ethhdr->dest, &ethbroadcast)) {
 800b278:	2206      	movs	r2, #6
 800b27a:	491e      	ldr	r1, [pc, #120]	; (800b2f4 <ethernet_input+0xa4>)
 800b27c:	f000 f89c 	bl	800b3b8 <memcmp>
 800b280:	b918      	cbnz	r0, 800b28a <ethernet_input+0x3a>
      /* mark the pbuf as link-layer broadcast */
      p->flags |= PBUF_FLAG_LLBCAST;
 800b282:	7b63      	ldrb	r3, [r4, #13]
 800b284:	f043 0308 	orr.w	r3, r3, #8
 800b288:	7363      	strb	r3, [r4, #13]
    }
  }

  switch (type) {
 800b28a:	2e08      	cmp	r6, #8
 800b28c:	d012      	beq.n	800b2b4 <ethernet_input+0x64>
 800b28e:	f5b6 6fc1 	cmp.w	r6, #1544	; 0x608
 800b292:	d01f      	beq.n	800b2d4 <ethernet_input+0x84>
  /* This means the pbuf is freed or consumed,
     so the caller doesn't have to free it again */
  return ERR_OK;

free_and_return:
  pbuf_free(p);
 800b294:	4620      	mov	r0, r4
 800b296:	f7f9 ff87 	bl	80051a8 <pbuf_free>
  return ERR_OK;
}
 800b29a:	2000      	movs	r0, #0
 800b29c:	bd70      	pop	{r4, r5, r6, pc}
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 800b29e:	7843      	ldrb	r3, [r0, #1]
 800b2a0:	2b00      	cmp	r3, #0
 800b2a2:	d1f2      	bne.n	800b28a <ethernet_input+0x3a>
 800b2a4:	7883      	ldrb	r3, [r0, #2]
 800b2a6:	2b5e      	cmp	r3, #94	; 0x5e
 800b2a8:	d1ef      	bne.n	800b28a <ethernet_input+0x3a>
        p->flags |= PBUF_FLAG_LLMCAST;
 800b2aa:	7b63      	ldrb	r3, [r4, #13]
 800b2ac:	f043 0310 	orr.w	r3, r3, #16
 800b2b0:	7363      	strb	r3, [r4, #13]
 800b2b2:	e7ea      	b.n	800b28a <ethernet_input+0x3a>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 800b2b4:	f895 302d 	ldrb.w	r3, [r5, #45]	; 0x2d
 800b2b8:	f013 0f08 	tst.w	r3, #8
 800b2bc:	d0ea      	beq.n	800b294 <ethernet_input+0x44>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 800b2be:	210e      	movs	r1, #14
 800b2c0:	4620      	mov	r0, r4
 800b2c2:	f7f9 ff31 	bl	8005128 <pbuf_remove_header>
 800b2c6:	2800      	cmp	r0, #0
 800b2c8:	d1e4      	bne.n	800b294 <ethernet_input+0x44>
        ip4_input(p, netif);
 800b2ca:	4629      	mov	r1, r5
 800b2cc:	4620      	mov	r0, r4
 800b2ce:	f7ff f9dd 	bl	800a68c <ip4_input>
      break;
 800b2d2:	e7e2      	b.n	800b29a <ethernet_input+0x4a>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 800b2d4:	f895 302d 	ldrb.w	r3, [r5, #45]	; 0x2d
 800b2d8:	f013 0f08 	tst.w	r3, #8
 800b2dc:	d0da      	beq.n	800b294 <ethernet_input+0x44>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 800b2de:	210e      	movs	r1, #14
 800b2e0:	4620      	mov	r0, r4
 800b2e2:	f7f9 ff21 	bl	8005128 <pbuf_remove_header>
 800b2e6:	2800      	cmp	r0, #0
 800b2e8:	d1d4      	bne.n	800b294 <ethernet_input+0x44>
        etharp_input(p, netif);
 800b2ea:	4629      	mov	r1, r5
 800b2ec:	4620      	mov	r0, r4
 800b2ee:	f7fe fd9d 	bl	8009e2c <etharp_input>
      break;
 800b2f2:	e7d2      	b.n	800b29a <ethernet_input+0x4a>
 800b2f4:	08012634 	.word	0x08012634

0800b2f8 <ethernet_output>:
 * @return ERR_OK if the packet was sent, any other err_t on failure
 */
err_t
ethernet_output(struct netif * netif, struct pbuf * p,
                const struct eth_addr * src, const struct eth_addr * dst,
                u16_t eth_type) {
 800b2f8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b2fc:	4605      	mov	r5, r0
 800b2fe:	460c      	mov	r4, r1
 800b300:	4616      	mov	r6, r2
 800b302:	461f      	mov	r7, r3
  struct eth_hdr *ethhdr;
  u16_t eth_type_be = lwip_htons(eth_type);
 800b304:	f8bd 0018 	ldrh.w	r0, [sp, #24]
 800b308:	f7f9 f92a 	bl	8004560 <lwip_htons>
 800b30c:	4680      	mov	r8, r0

    eth_type_be = PP_HTONS(ETHTYPE_VLAN);
  } else
#endif /* ETHARP_SUPPORT_VLAN && defined(LWIP_HOOK_VLAN_SET) */
  {
    if (pbuf_add_header(p, SIZEOF_ETH_HDR) != 0) {
 800b30e:	210e      	movs	r1, #14
 800b310:	4620      	mov	r0, r4
 800b312:	f7f9 ff04 	bl	800511e <pbuf_add_header>
 800b316:	b9e8      	cbnz	r0, 800b354 <ethernet_output+0x5c>
    }
  }

  LWIP_ASSERT_CORE_LOCKED();

  ethhdr = (struct eth_hdr *)p->payload;
 800b318:	6861      	ldr	r1, [r4, #4]
  ethhdr->type = eth_type_be;
 800b31a:	f8a1 800c 	strh.w	r8, [r1, #12]
  SMEMCPY(&ethhdr->dest, dst, ETH_HWADDR_LEN);
 800b31e:	683b      	ldr	r3, [r7, #0]
 800b320:	600b      	str	r3, [r1, #0]
 800b322:	88bb      	ldrh	r3, [r7, #4]
 800b324:	808b      	strh	r3, [r1, #4]
  SMEMCPY(&ethhdr->src,  src, ETH_HWADDR_LEN);
 800b326:	6833      	ldr	r3, [r6, #0]
 800b328:	f8c1 3006 	str.w	r3, [r1, #6]
 800b32c:	88b3      	ldrh	r3, [r6, #4]
 800b32e:	814b      	strh	r3, [r1, #10]

  LWIP_ASSERT("netif->hwaddr_len must be 6 for ethernet_output!",
 800b330:	f895 302c 	ldrb.w	r3, [r5, #44]	; 0x2c
 800b334:	2b06      	cmp	r3, #6
 800b336:	d105      	bne.n	800b344 <ethernet_output+0x4c>
              (netif->hwaddr_len == ETH_HWADDR_LEN));
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE,
              ("ethernet_output: sending packet %p\n", (void *)p));

  /* send the packet */
  return netif->linkoutput(netif, p);
 800b338:	69ab      	ldr	r3, [r5, #24]
 800b33a:	4621      	mov	r1, r4
 800b33c:	4628      	mov	r0, r5
 800b33e:	4798      	blx	r3
pbuf_header_failed:
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
              ("ethernet_output: could not allocate room for header.\n"));
  LINK_STATS_INC(link.lenerr);
  return ERR_BUF;
}
 800b340:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  LWIP_ASSERT("netif->hwaddr_len must be 6 for ethernet_output!",
 800b344:	4b05      	ldr	r3, [pc, #20]	; (800b35c <ethernet_output+0x64>)
 800b346:	f44f 7299 	mov.w	r2, #306	; 0x132
 800b34a:	4905      	ldr	r1, [pc, #20]	; (800b360 <ethernet_output+0x68>)
 800b34c:	4805      	ldr	r0, [pc, #20]	; (800b364 <ethernet_output+0x6c>)
 800b34e:	f000 f873 	bl	800b438 <iprintf>
 800b352:	e7f1      	b.n	800b338 <ethernet_output+0x40>
  return ERR_BUF;
 800b354:	f06f 0001 	mvn.w	r0, #1
 800b358:	e7f2      	b.n	800b340 <ethernet_output+0x48>
 800b35a:	bf00      	nop
 800b35c:	080125c8 	.word	0x080125c8
 800b360:	08012600 	.word	0x08012600
 800b364:	0800cb24 	.word	0x0800cb24

0800b368 <atoi>:
 800b368:	220a      	movs	r2, #10
 800b36a:	2100      	movs	r1, #0
 800b36c:	f000 b994 	b.w	800b698 <strtol>

0800b370 <__libc_init_array>:
 800b370:	b570      	push	{r4, r5, r6, lr}
 800b372:	4d0d      	ldr	r5, [pc, #52]	; (800b3a8 <__libc_init_array+0x38>)
 800b374:	4c0d      	ldr	r4, [pc, #52]	; (800b3ac <__libc_init_array+0x3c>)
 800b376:	1b64      	subs	r4, r4, r5
 800b378:	10a4      	asrs	r4, r4, #2
 800b37a:	2600      	movs	r6, #0
 800b37c:	42a6      	cmp	r6, r4
 800b37e:	d109      	bne.n	800b394 <__libc_init_array+0x24>
 800b380:	4d0b      	ldr	r5, [pc, #44]	; (800b3b0 <__libc_init_array+0x40>)
 800b382:	4c0c      	ldr	r4, [pc, #48]	; (800b3b4 <__libc_init_array+0x44>)
 800b384:	f001 fb26 	bl	800c9d4 <_init>
 800b388:	1b64      	subs	r4, r4, r5
 800b38a:	10a4      	asrs	r4, r4, #2
 800b38c:	2600      	movs	r6, #0
 800b38e:	42a6      	cmp	r6, r4
 800b390:	d105      	bne.n	800b39e <__libc_init_array+0x2e>
 800b392:	bd70      	pop	{r4, r5, r6, pc}
 800b394:	f855 3b04 	ldr.w	r3, [r5], #4
 800b398:	4798      	blx	r3
 800b39a:	3601      	adds	r6, #1
 800b39c:	e7ee      	b.n	800b37c <__libc_init_array+0xc>
 800b39e:	f855 3b04 	ldr.w	r3, [r5], #4
 800b3a2:	4798      	blx	r3
 800b3a4:	3601      	adds	r6, #1
 800b3a6:	e7f2      	b.n	800b38e <__libc_init_array+0x1e>
 800b3a8:	08012894 	.word	0x08012894
 800b3ac:	08012894 	.word	0x08012894
 800b3b0:	08012894 	.word	0x08012894
 800b3b4:	08012898 	.word	0x08012898

0800b3b8 <memcmp>:
 800b3b8:	b510      	push	{r4, lr}
 800b3ba:	3901      	subs	r1, #1
 800b3bc:	4402      	add	r2, r0
 800b3be:	4290      	cmp	r0, r2
 800b3c0:	d101      	bne.n	800b3c6 <memcmp+0xe>
 800b3c2:	2000      	movs	r0, #0
 800b3c4:	e005      	b.n	800b3d2 <memcmp+0x1a>
 800b3c6:	7803      	ldrb	r3, [r0, #0]
 800b3c8:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 800b3cc:	42a3      	cmp	r3, r4
 800b3ce:	d001      	beq.n	800b3d4 <memcmp+0x1c>
 800b3d0:	1b18      	subs	r0, r3, r4
 800b3d2:	bd10      	pop	{r4, pc}
 800b3d4:	3001      	adds	r0, #1
 800b3d6:	e7f2      	b.n	800b3be <memcmp+0x6>

0800b3d8 <memcpy>:
 800b3d8:	440a      	add	r2, r1
 800b3da:	4291      	cmp	r1, r2
 800b3dc:	f100 33ff 	add.w	r3, r0, #4294967295
 800b3e0:	d100      	bne.n	800b3e4 <memcpy+0xc>
 800b3e2:	4770      	bx	lr
 800b3e4:	b510      	push	{r4, lr}
 800b3e6:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b3ea:	f803 4f01 	strb.w	r4, [r3, #1]!
 800b3ee:	4291      	cmp	r1, r2
 800b3f0:	d1f9      	bne.n	800b3e6 <memcpy+0xe>
 800b3f2:	bd10      	pop	{r4, pc}

0800b3f4 <memmove>:
 800b3f4:	4288      	cmp	r0, r1
 800b3f6:	b510      	push	{r4, lr}
 800b3f8:	eb01 0402 	add.w	r4, r1, r2
 800b3fc:	d902      	bls.n	800b404 <memmove+0x10>
 800b3fe:	4284      	cmp	r4, r0
 800b400:	4623      	mov	r3, r4
 800b402:	d807      	bhi.n	800b414 <memmove+0x20>
 800b404:	1e43      	subs	r3, r0, #1
 800b406:	42a1      	cmp	r1, r4
 800b408:	d008      	beq.n	800b41c <memmove+0x28>
 800b40a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800b40e:	f803 2f01 	strb.w	r2, [r3, #1]!
 800b412:	e7f8      	b.n	800b406 <memmove+0x12>
 800b414:	4402      	add	r2, r0
 800b416:	4601      	mov	r1, r0
 800b418:	428a      	cmp	r2, r1
 800b41a:	d100      	bne.n	800b41e <memmove+0x2a>
 800b41c:	bd10      	pop	{r4, pc}
 800b41e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800b422:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800b426:	e7f7      	b.n	800b418 <memmove+0x24>

0800b428 <memset>:
 800b428:	4402      	add	r2, r0
 800b42a:	4603      	mov	r3, r0
 800b42c:	4293      	cmp	r3, r2
 800b42e:	d100      	bne.n	800b432 <memset+0xa>
 800b430:	4770      	bx	lr
 800b432:	f803 1b01 	strb.w	r1, [r3], #1
 800b436:	e7f9      	b.n	800b42c <memset+0x4>

0800b438 <iprintf>:
 800b438:	b40f      	push	{r0, r1, r2, r3}
 800b43a:	4b0a      	ldr	r3, [pc, #40]	; (800b464 <iprintf+0x2c>)
 800b43c:	b513      	push	{r0, r1, r4, lr}
 800b43e:	681c      	ldr	r4, [r3, #0]
 800b440:	b124      	cbz	r4, 800b44c <iprintf+0x14>
 800b442:	69a3      	ldr	r3, [r4, #24]
 800b444:	b913      	cbnz	r3, 800b44c <iprintf+0x14>
 800b446:	4620      	mov	r0, r4
 800b448:	f000 f9ac 	bl	800b7a4 <__sinit>
 800b44c:	ab05      	add	r3, sp, #20
 800b44e:	9a04      	ldr	r2, [sp, #16]
 800b450:	68a1      	ldr	r1, [r4, #8]
 800b452:	9301      	str	r3, [sp, #4]
 800b454:	4620      	mov	r0, r4
 800b456:	f000 fcc5 	bl	800bde4 <_vfiprintf_r>
 800b45a:	b002      	add	sp, #8
 800b45c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b460:	b004      	add	sp, #16
 800b462:	4770      	bx	lr
 800b464:	20000038 	.word	0x20000038

0800b468 <rand>:
 800b468:	4b16      	ldr	r3, [pc, #88]	; (800b4c4 <rand+0x5c>)
 800b46a:	b510      	push	{r4, lr}
 800b46c:	681c      	ldr	r4, [r3, #0]
 800b46e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800b470:	b9b3      	cbnz	r3, 800b4a0 <rand+0x38>
 800b472:	2018      	movs	r0, #24
 800b474:	f000 fa48 	bl	800b908 <malloc>
 800b478:	63a0      	str	r0, [r4, #56]	; 0x38
 800b47a:	b928      	cbnz	r0, 800b488 <rand+0x20>
 800b47c:	4602      	mov	r2, r0
 800b47e:	4b12      	ldr	r3, [pc, #72]	; (800b4c8 <rand+0x60>)
 800b480:	4812      	ldr	r0, [pc, #72]	; (800b4cc <rand+0x64>)
 800b482:	214e      	movs	r1, #78	; 0x4e
 800b484:	f000 f912 	bl	800b6ac <__assert_func>
 800b488:	4a11      	ldr	r2, [pc, #68]	; (800b4d0 <rand+0x68>)
 800b48a:	4b12      	ldr	r3, [pc, #72]	; (800b4d4 <rand+0x6c>)
 800b48c:	e9c0 2300 	strd	r2, r3, [r0]
 800b490:	4b11      	ldr	r3, [pc, #68]	; (800b4d8 <rand+0x70>)
 800b492:	6083      	str	r3, [r0, #8]
 800b494:	230b      	movs	r3, #11
 800b496:	8183      	strh	r3, [r0, #12]
 800b498:	2201      	movs	r2, #1
 800b49a:	2300      	movs	r3, #0
 800b49c:	e9c0 2304 	strd	r2, r3, [r0, #16]
 800b4a0:	6ba4      	ldr	r4, [r4, #56]	; 0x38
 800b4a2:	4a0e      	ldr	r2, [pc, #56]	; (800b4dc <rand+0x74>)
 800b4a4:	6920      	ldr	r0, [r4, #16]
 800b4a6:	6963      	ldr	r3, [r4, #20]
 800b4a8:	490d      	ldr	r1, [pc, #52]	; (800b4e0 <rand+0x78>)
 800b4aa:	4342      	muls	r2, r0
 800b4ac:	fb01 2203 	mla	r2, r1, r3, r2
 800b4b0:	fba0 0101 	umull	r0, r1, r0, r1
 800b4b4:	1c43      	adds	r3, r0, #1
 800b4b6:	eb42 0001 	adc.w	r0, r2, r1
 800b4ba:	e9c4 3004 	strd	r3, r0, [r4, #16]
 800b4be:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 800b4c2:	bd10      	pop	{r4, pc}
 800b4c4:	20000038 	.word	0x20000038
 800b4c8:	08012748 	.word	0x08012748
 800b4cc:	0801275f 	.word	0x0801275f
 800b4d0:	abcd330e 	.word	0xabcd330e
 800b4d4:	e66d1234 	.word	0xe66d1234
 800b4d8:	0005deec 	.word	0x0005deec
 800b4dc:	5851f42d 	.word	0x5851f42d
 800b4e0:	4c957f2d 	.word	0x4c957f2d

0800b4e4 <siprintf>:
 800b4e4:	b40e      	push	{r1, r2, r3}
 800b4e6:	b500      	push	{lr}
 800b4e8:	b09c      	sub	sp, #112	; 0x70
 800b4ea:	ab1d      	add	r3, sp, #116	; 0x74
 800b4ec:	9002      	str	r0, [sp, #8]
 800b4ee:	9006      	str	r0, [sp, #24]
 800b4f0:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800b4f4:	4809      	ldr	r0, [pc, #36]	; (800b51c <siprintf+0x38>)
 800b4f6:	9107      	str	r1, [sp, #28]
 800b4f8:	9104      	str	r1, [sp, #16]
 800b4fa:	4909      	ldr	r1, [pc, #36]	; (800b520 <siprintf+0x3c>)
 800b4fc:	f853 2b04 	ldr.w	r2, [r3], #4
 800b500:	9105      	str	r1, [sp, #20]
 800b502:	6800      	ldr	r0, [r0, #0]
 800b504:	9301      	str	r3, [sp, #4]
 800b506:	a902      	add	r1, sp, #8
 800b508:	f000 fb42 	bl	800bb90 <_svfiprintf_r>
 800b50c:	9b02      	ldr	r3, [sp, #8]
 800b50e:	2200      	movs	r2, #0
 800b510:	701a      	strb	r2, [r3, #0]
 800b512:	b01c      	add	sp, #112	; 0x70
 800b514:	f85d eb04 	ldr.w	lr, [sp], #4
 800b518:	b003      	add	sp, #12
 800b51a:	4770      	bx	lr
 800b51c:	20000038 	.word	0x20000038
 800b520:	ffff0208 	.word	0xffff0208

0800b524 <strcat>:
 800b524:	b510      	push	{r4, lr}
 800b526:	4602      	mov	r2, r0
 800b528:	7814      	ldrb	r4, [r2, #0]
 800b52a:	4613      	mov	r3, r2
 800b52c:	3201      	adds	r2, #1
 800b52e:	2c00      	cmp	r4, #0
 800b530:	d1fa      	bne.n	800b528 <strcat+0x4>
 800b532:	3b01      	subs	r3, #1
 800b534:	f811 2b01 	ldrb.w	r2, [r1], #1
 800b538:	f803 2f01 	strb.w	r2, [r3, #1]!
 800b53c:	2a00      	cmp	r2, #0
 800b53e:	d1f9      	bne.n	800b534 <strcat+0x10>
 800b540:	bd10      	pop	{r4, pc}

0800b542 <strchr>:
 800b542:	b2c9      	uxtb	r1, r1
 800b544:	4603      	mov	r3, r0
 800b546:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b54a:	b11a      	cbz	r2, 800b554 <strchr+0x12>
 800b54c:	428a      	cmp	r2, r1
 800b54e:	d1f9      	bne.n	800b544 <strchr+0x2>
 800b550:	4618      	mov	r0, r3
 800b552:	4770      	bx	lr
 800b554:	2900      	cmp	r1, #0
 800b556:	bf18      	it	ne
 800b558:	2300      	movne	r3, #0
 800b55a:	e7f9      	b.n	800b550 <strchr+0xe>

0800b55c <strcpy>:
 800b55c:	4603      	mov	r3, r0
 800b55e:	f811 2b01 	ldrb.w	r2, [r1], #1
 800b562:	f803 2b01 	strb.w	r2, [r3], #1
 800b566:	2a00      	cmp	r2, #0
 800b568:	d1f9      	bne.n	800b55e <strcpy+0x2>
 800b56a:	4770      	bx	lr

0800b56c <strncmp>:
 800b56c:	b510      	push	{r4, lr}
 800b56e:	b17a      	cbz	r2, 800b590 <strncmp+0x24>
 800b570:	4603      	mov	r3, r0
 800b572:	3901      	subs	r1, #1
 800b574:	1884      	adds	r4, r0, r2
 800b576:	f813 0b01 	ldrb.w	r0, [r3], #1
 800b57a:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800b57e:	4290      	cmp	r0, r2
 800b580:	d101      	bne.n	800b586 <strncmp+0x1a>
 800b582:	42a3      	cmp	r3, r4
 800b584:	d101      	bne.n	800b58a <strncmp+0x1e>
 800b586:	1a80      	subs	r0, r0, r2
 800b588:	bd10      	pop	{r4, pc}
 800b58a:	2800      	cmp	r0, #0
 800b58c:	d1f3      	bne.n	800b576 <strncmp+0xa>
 800b58e:	e7fa      	b.n	800b586 <strncmp+0x1a>
 800b590:	4610      	mov	r0, r2
 800b592:	e7f9      	b.n	800b588 <strncmp+0x1c>

0800b594 <_strtol_l.constprop.0>:
 800b594:	2b01      	cmp	r3, #1
 800b596:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b59a:	d001      	beq.n	800b5a0 <_strtol_l.constprop.0+0xc>
 800b59c:	2b24      	cmp	r3, #36	; 0x24
 800b59e:	d906      	bls.n	800b5ae <_strtol_l.constprop.0+0x1a>
 800b5a0:	f000 f8a2 	bl	800b6e8 <__errno>
 800b5a4:	2316      	movs	r3, #22
 800b5a6:	6003      	str	r3, [r0, #0]
 800b5a8:	2000      	movs	r0, #0
 800b5aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b5ae:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 800b694 <_strtol_l.constprop.0+0x100>
 800b5b2:	460d      	mov	r5, r1
 800b5b4:	462e      	mov	r6, r5
 800b5b6:	f815 4b01 	ldrb.w	r4, [r5], #1
 800b5ba:	f814 700c 	ldrb.w	r7, [r4, ip]
 800b5be:	f017 0708 	ands.w	r7, r7, #8
 800b5c2:	d1f7      	bne.n	800b5b4 <_strtol_l.constprop.0+0x20>
 800b5c4:	2c2d      	cmp	r4, #45	; 0x2d
 800b5c6:	d132      	bne.n	800b62e <_strtol_l.constprop.0+0x9a>
 800b5c8:	782c      	ldrb	r4, [r5, #0]
 800b5ca:	2701      	movs	r7, #1
 800b5cc:	1cb5      	adds	r5, r6, #2
 800b5ce:	2b00      	cmp	r3, #0
 800b5d0:	d05b      	beq.n	800b68a <_strtol_l.constprop.0+0xf6>
 800b5d2:	2b10      	cmp	r3, #16
 800b5d4:	d109      	bne.n	800b5ea <_strtol_l.constprop.0+0x56>
 800b5d6:	2c30      	cmp	r4, #48	; 0x30
 800b5d8:	d107      	bne.n	800b5ea <_strtol_l.constprop.0+0x56>
 800b5da:	782c      	ldrb	r4, [r5, #0]
 800b5dc:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 800b5e0:	2c58      	cmp	r4, #88	; 0x58
 800b5e2:	d14d      	bne.n	800b680 <_strtol_l.constprop.0+0xec>
 800b5e4:	786c      	ldrb	r4, [r5, #1]
 800b5e6:	2310      	movs	r3, #16
 800b5e8:	3502      	adds	r5, #2
 800b5ea:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 800b5ee:	f108 38ff 	add.w	r8, r8, #4294967295
 800b5f2:	f04f 0c00 	mov.w	ip, #0
 800b5f6:	fbb8 f9f3 	udiv	r9, r8, r3
 800b5fa:	4666      	mov	r6, ip
 800b5fc:	fb03 8a19 	mls	sl, r3, r9, r8
 800b600:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 800b604:	f1be 0f09 	cmp.w	lr, #9
 800b608:	d816      	bhi.n	800b638 <_strtol_l.constprop.0+0xa4>
 800b60a:	4674      	mov	r4, lr
 800b60c:	42a3      	cmp	r3, r4
 800b60e:	dd24      	ble.n	800b65a <_strtol_l.constprop.0+0xc6>
 800b610:	f1bc 0f00 	cmp.w	ip, #0
 800b614:	db1e      	blt.n	800b654 <_strtol_l.constprop.0+0xc0>
 800b616:	45b1      	cmp	r9, r6
 800b618:	d31c      	bcc.n	800b654 <_strtol_l.constprop.0+0xc0>
 800b61a:	d101      	bne.n	800b620 <_strtol_l.constprop.0+0x8c>
 800b61c:	45a2      	cmp	sl, r4
 800b61e:	db19      	blt.n	800b654 <_strtol_l.constprop.0+0xc0>
 800b620:	fb06 4603 	mla	r6, r6, r3, r4
 800b624:	f04f 0c01 	mov.w	ip, #1
 800b628:	f815 4b01 	ldrb.w	r4, [r5], #1
 800b62c:	e7e8      	b.n	800b600 <_strtol_l.constprop.0+0x6c>
 800b62e:	2c2b      	cmp	r4, #43	; 0x2b
 800b630:	bf04      	itt	eq
 800b632:	782c      	ldrbeq	r4, [r5, #0]
 800b634:	1cb5      	addeq	r5, r6, #2
 800b636:	e7ca      	b.n	800b5ce <_strtol_l.constprop.0+0x3a>
 800b638:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 800b63c:	f1be 0f19 	cmp.w	lr, #25
 800b640:	d801      	bhi.n	800b646 <_strtol_l.constprop.0+0xb2>
 800b642:	3c37      	subs	r4, #55	; 0x37
 800b644:	e7e2      	b.n	800b60c <_strtol_l.constprop.0+0x78>
 800b646:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 800b64a:	f1be 0f19 	cmp.w	lr, #25
 800b64e:	d804      	bhi.n	800b65a <_strtol_l.constprop.0+0xc6>
 800b650:	3c57      	subs	r4, #87	; 0x57
 800b652:	e7db      	b.n	800b60c <_strtol_l.constprop.0+0x78>
 800b654:	f04f 3cff 	mov.w	ip, #4294967295
 800b658:	e7e6      	b.n	800b628 <_strtol_l.constprop.0+0x94>
 800b65a:	f1bc 0f00 	cmp.w	ip, #0
 800b65e:	da05      	bge.n	800b66c <_strtol_l.constprop.0+0xd8>
 800b660:	2322      	movs	r3, #34	; 0x22
 800b662:	6003      	str	r3, [r0, #0]
 800b664:	4646      	mov	r6, r8
 800b666:	b942      	cbnz	r2, 800b67a <_strtol_l.constprop.0+0xe6>
 800b668:	4630      	mov	r0, r6
 800b66a:	e79e      	b.n	800b5aa <_strtol_l.constprop.0+0x16>
 800b66c:	b107      	cbz	r7, 800b670 <_strtol_l.constprop.0+0xdc>
 800b66e:	4276      	negs	r6, r6
 800b670:	2a00      	cmp	r2, #0
 800b672:	d0f9      	beq.n	800b668 <_strtol_l.constprop.0+0xd4>
 800b674:	f1bc 0f00 	cmp.w	ip, #0
 800b678:	d000      	beq.n	800b67c <_strtol_l.constprop.0+0xe8>
 800b67a:	1e69      	subs	r1, r5, #1
 800b67c:	6011      	str	r1, [r2, #0]
 800b67e:	e7f3      	b.n	800b668 <_strtol_l.constprop.0+0xd4>
 800b680:	2430      	movs	r4, #48	; 0x30
 800b682:	2b00      	cmp	r3, #0
 800b684:	d1b1      	bne.n	800b5ea <_strtol_l.constprop.0+0x56>
 800b686:	2308      	movs	r3, #8
 800b688:	e7af      	b.n	800b5ea <_strtol_l.constprop.0+0x56>
 800b68a:	2c30      	cmp	r4, #48	; 0x30
 800b68c:	d0a5      	beq.n	800b5da <_strtol_l.constprop.0+0x46>
 800b68e:	230a      	movs	r3, #10
 800b690:	e7ab      	b.n	800b5ea <_strtol_l.constprop.0+0x56>
 800b692:	bf00      	nop
 800b694:	08012643 	.word	0x08012643

0800b698 <strtol>:
 800b698:	4613      	mov	r3, r2
 800b69a:	460a      	mov	r2, r1
 800b69c:	4601      	mov	r1, r0
 800b69e:	4802      	ldr	r0, [pc, #8]	; (800b6a8 <strtol+0x10>)
 800b6a0:	6800      	ldr	r0, [r0, #0]
 800b6a2:	f7ff bf77 	b.w	800b594 <_strtol_l.constprop.0>
 800b6a6:	bf00      	nop
 800b6a8:	20000038 	.word	0x20000038

0800b6ac <__assert_func>:
 800b6ac:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800b6ae:	4614      	mov	r4, r2
 800b6b0:	461a      	mov	r2, r3
 800b6b2:	4b09      	ldr	r3, [pc, #36]	; (800b6d8 <__assert_func+0x2c>)
 800b6b4:	681b      	ldr	r3, [r3, #0]
 800b6b6:	4605      	mov	r5, r0
 800b6b8:	68d8      	ldr	r0, [r3, #12]
 800b6ba:	b14c      	cbz	r4, 800b6d0 <__assert_func+0x24>
 800b6bc:	4b07      	ldr	r3, [pc, #28]	; (800b6dc <__assert_func+0x30>)
 800b6be:	9100      	str	r1, [sp, #0]
 800b6c0:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800b6c4:	4906      	ldr	r1, [pc, #24]	; (800b6e0 <__assert_func+0x34>)
 800b6c6:	462b      	mov	r3, r5
 800b6c8:	f000 f8ea 	bl	800b8a0 <fiprintf>
 800b6cc:	f000 ff74 	bl	800c5b8 <abort>
 800b6d0:	4b04      	ldr	r3, [pc, #16]	; (800b6e4 <__assert_func+0x38>)
 800b6d2:	461c      	mov	r4, r3
 800b6d4:	e7f3      	b.n	800b6be <__assert_func+0x12>
 800b6d6:	bf00      	nop
 800b6d8:	20000038 	.word	0x20000038
 800b6dc:	080127ba 	.word	0x080127ba
 800b6e0:	080127c7 	.word	0x080127c7
 800b6e4:	080127f5 	.word	0x080127f5

0800b6e8 <__errno>:
 800b6e8:	4b01      	ldr	r3, [pc, #4]	; (800b6f0 <__errno+0x8>)
 800b6ea:	6818      	ldr	r0, [r3, #0]
 800b6ec:	4770      	bx	lr
 800b6ee:	bf00      	nop
 800b6f0:	20000038 	.word	0x20000038

0800b6f4 <std>:
 800b6f4:	2300      	movs	r3, #0
 800b6f6:	b510      	push	{r4, lr}
 800b6f8:	4604      	mov	r4, r0
 800b6fa:	e9c0 3300 	strd	r3, r3, [r0]
 800b6fe:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800b702:	6083      	str	r3, [r0, #8]
 800b704:	8181      	strh	r1, [r0, #12]
 800b706:	6643      	str	r3, [r0, #100]	; 0x64
 800b708:	81c2      	strh	r2, [r0, #14]
 800b70a:	6183      	str	r3, [r0, #24]
 800b70c:	4619      	mov	r1, r3
 800b70e:	2208      	movs	r2, #8
 800b710:	305c      	adds	r0, #92	; 0x5c
 800b712:	f7ff fe89 	bl	800b428 <memset>
 800b716:	4b05      	ldr	r3, [pc, #20]	; (800b72c <std+0x38>)
 800b718:	6263      	str	r3, [r4, #36]	; 0x24
 800b71a:	4b05      	ldr	r3, [pc, #20]	; (800b730 <std+0x3c>)
 800b71c:	62a3      	str	r3, [r4, #40]	; 0x28
 800b71e:	4b05      	ldr	r3, [pc, #20]	; (800b734 <std+0x40>)
 800b720:	62e3      	str	r3, [r4, #44]	; 0x2c
 800b722:	4b05      	ldr	r3, [pc, #20]	; (800b738 <std+0x44>)
 800b724:	6224      	str	r4, [r4, #32]
 800b726:	6323      	str	r3, [r4, #48]	; 0x30
 800b728:	bd10      	pop	{r4, pc}
 800b72a:	bf00      	nop
 800b72c:	0800c38d 	.word	0x0800c38d
 800b730:	0800c3af 	.word	0x0800c3af
 800b734:	0800c3e7 	.word	0x0800c3e7
 800b738:	0800c40b 	.word	0x0800c40b

0800b73c <_cleanup_r>:
 800b73c:	4901      	ldr	r1, [pc, #4]	; (800b744 <_cleanup_r+0x8>)
 800b73e:	f000 b8c1 	b.w	800b8c4 <_fwalk_reent>
 800b742:	bf00      	nop
 800b744:	0800c6f5 	.word	0x0800c6f5

0800b748 <__sfmoreglue>:
 800b748:	b570      	push	{r4, r5, r6, lr}
 800b74a:	2268      	movs	r2, #104	; 0x68
 800b74c:	1e4d      	subs	r5, r1, #1
 800b74e:	4355      	muls	r5, r2
 800b750:	460e      	mov	r6, r1
 800b752:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800b756:	f000 f94b 	bl	800b9f0 <_malloc_r>
 800b75a:	4604      	mov	r4, r0
 800b75c:	b140      	cbz	r0, 800b770 <__sfmoreglue+0x28>
 800b75e:	2100      	movs	r1, #0
 800b760:	e9c0 1600 	strd	r1, r6, [r0]
 800b764:	300c      	adds	r0, #12
 800b766:	60a0      	str	r0, [r4, #8]
 800b768:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800b76c:	f7ff fe5c 	bl	800b428 <memset>
 800b770:	4620      	mov	r0, r4
 800b772:	bd70      	pop	{r4, r5, r6, pc}

0800b774 <__sfp_lock_acquire>:
 800b774:	4801      	ldr	r0, [pc, #4]	; (800b77c <__sfp_lock_acquire+0x8>)
 800b776:	f000 b8c5 	b.w	800b904 <__retarget_lock_acquire_recursive>
 800b77a:	bf00      	nop
 800b77c:	2000afc5 	.word	0x2000afc5

0800b780 <__sfp_lock_release>:
 800b780:	4801      	ldr	r0, [pc, #4]	; (800b788 <__sfp_lock_release+0x8>)
 800b782:	f000 b8c0 	b.w	800b906 <__retarget_lock_release_recursive>
 800b786:	bf00      	nop
 800b788:	2000afc5 	.word	0x2000afc5

0800b78c <__sinit_lock_acquire>:
 800b78c:	4801      	ldr	r0, [pc, #4]	; (800b794 <__sinit_lock_acquire+0x8>)
 800b78e:	f000 b8b9 	b.w	800b904 <__retarget_lock_acquire_recursive>
 800b792:	bf00      	nop
 800b794:	2000afc6 	.word	0x2000afc6

0800b798 <__sinit_lock_release>:
 800b798:	4801      	ldr	r0, [pc, #4]	; (800b7a0 <__sinit_lock_release+0x8>)
 800b79a:	f000 b8b4 	b.w	800b906 <__retarget_lock_release_recursive>
 800b79e:	bf00      	nop
 800b7a0:	2000afc6 	.word	0x2000afc6

0800b7a4 <__sinit>:
 800b7a4:	b510      	push	{r4, lr}
 800b7a6:	4604      	mov	r4, r0
 800b7a8:	f7ff fff0 	bl	800b78c <__sinit_lock_acquire>
 800b7ac:	69a3      	ldr	r3, [r4, #24]
 800b7ae:	b11b      	cbz	r3, 800b7b8 <__sinit+0x14>
 800b7b0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b7b4:	f7ff bff0 	b.w	800b798 <__sinit_lock_release>
 800b7b8:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800b7bc:	6523      	str	r3, [r4, #80]	; 0x50
 800b7be:	4b13      	ldr	r3, [pc, #76]	; (800b80c <__sinit+0x68>)
 800b7c0:	4a13      	ldr	r2, [pc, #76]	; (800b810 <__sinit+0x6c>)
 800b7c2:	681b      	ldr	r3, [r3, #0]
 800b7c4:	62a2      	str	r2, [r4, #40]	; 0x28
 800b7c6:	42a3      	cmp	r3, r4
 800b7c8:	bf04      	itt	eq
 800b7ca:	2301      	moveq	r3, #1
 800b7cc:	61a3      	streq	r3, [r4, #24]
 800b7ce:	4620      	mov	r0, r4
 800b7d0:	f000 f820 	bl	800b814 <__sfp>
 800b7d4:	6060      	str	r0, [r4, #4]
 800b7d6:	4620      	mov	r0, r4
 800b7d8:	f000 f81c 	bl	800b814 <__sfp>
 800b7dc:	60a0      	str	r0, [r4, #8]
 800b7de:	4620      	mov	r0, r4
 800b7e0:	f000 f818 	bl	800b814 <__sfp>
 800b7e4:	2200      	movs	r2, #0
 800b7e6:	60e0      	str	r0, [r4, #12]
 800b7e8:	2104      	movs	r1, #4
 800b7ea:	6860      	ldr	r0, [r4, #4]
 800b7ec:	f7ff ff82 	bl	800b6f4 <std>
 800b7f0:	68a0      	ldr	r0, [r4, #8]
 800b7f2:	2201      	movs	r2, #1
 800b7f4:	2109      	movs	r1, #9
 800b7f6:	f7ff ff7d 	bl	800b6f4 <std>
 800b7fa:	68e0      	ldr	r0, [r4, #12]
 800b7fc:	2202      	movs	r2, #2
 800b7fe:	2112      	movs	r1, #18
 800b800:	f7ff ff78 	bl	800b6f4 <std>
 800b804:	2301      	movs	r3, #1
 800b806:	61a3      	str	r3, [r4, #24]
 800b808:	e7d2      	b.n	800b7b0 <__sinit+0xc>
 800b80a:	bf00      	nop
 800b80c:	08012744 	.word	0x08012744
 800b810:	0800b73d 	.word	0x0800b73d

0800b814 <__sfp>:
 800b814:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b816:	4607      	mov	r7, r0
 800b818:	f7ff ffac 	bl	800b774 <__sfp_lock_acquire>
 800b81c:	4b1e      	ldr	r3, [pc, #120]	; (800b898 <__sfp+0x84>)
 800b81e:	681e      	ldr	r6, [r3, #0]
 800b820:	69b3      	ldr	r3, [r6, #24]
 800b822:	b913      	cbnz	r3, 800b82a <__sfp+0x16>
 800b824:	4630      	mov	r0, r6
 800b826:	f7ff ffbd 	bl	800b7a4 <__sinit>
 800b82a:	3648      	adds	r6, #72	; 0x48
 800b82c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800b830:	3b01      	subs	r3, #1
 800b832:	d503      	bpl.n	800b83c <__sfp+0x28>
 800b834:	6833      	ldr	r3, [r6, #0]
 800b836:	b30b      	cbz	r3, 800b87c <__sfp+0x68>
 800b838:	6836      	ldr	r6, [r6, #0]
 800b83a:	e7f7      	b.n	800b82c <__sfp+0x18>
 800b83c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800b840:	b9d5      	cbnz	r5, 800b878 <__sfp+0x64>
 800b842:	4b16      	ldr	r3, [pc, #88]	; (800b89c <__sfp+0x88>)
 800b844:	60e3      	str	r3, [r4, #12]
 800b846:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800b84a:	6665      	str	r5, [r4, #100]	; 0x64
 800b84c:	f000 f859 	bl	800b902 <__retarget_lock_init_recursive>
 800b850:	f7ff ff96 	bl	800b780 <__sfp_lock_release>
 800b854:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800b858:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800b85c:	6025      	str	r5, [r4, #0]
 800b85e:	61a5      	str	r5, [r4, #24]
 800b860:	2208      	movs	r2, #8
 800b862:	4629      	mov	r1, r5
 800b864:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800b868:	f7ff fdde 	bl	800b428 <memset>
 800b86c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800b870:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800b874:	4620      	mov	r0, r4
 800b876:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b878:	3468      	adds	r4, #104	; 0x68
 800b87a:	e7d9      	b.n	800b830 <__sfp+0x1c>
 800b87c:	2104      	movs	r1, #4
 800b87e:	4638      	mov	r0, r7
 800b880:	f7ff ff62 	bl	800b748 <__sfmoreglue>
 800b884:	4604      	mov	r4, r0
 800b886:	6030      	str	r0, [r6, #0]
 800b888:	2800      	cmp	r0, #0
 800b88a:	d1d5      	bne.n	800b838 <__sfp+0x24>
 800b88c:	f7ff ff78 	bl	800b780 <__sfp_lock_release>
 800b890:	230c      	movs	r3, #12
 800b892:	603b      	str	r3, [r7, #0]
 800b894:	e7ee      	b.n	800b874 <__sfp+0x60>
 800b896:	bf00      	nop
 800b898:	08012744 	.word	0x08012744
 800b89c:	ffff0001 	.word	0xffff0001

0800b8a0 <fiprintf>:
 800b8a0:	b40e      	push	{r1, r2, r3}
 800b8a2:	b503      	push	{r0, r1, lr}
 800b8a4:	4601      	mov	r1, r0
 800b8a6:	ab03      	add	r3, sp, #12
 800b8a8:	4805      	ldr	r0, [pc, #20]	; (800b8c0 <fiprintf+0x20>)
 800b8aa:	f853 2b04 	ldr.w	r2, [r3], #4
 800b8ae:	6800      	ldr	r0, [r0, #0]
 800b8b0:	9301      	str	r3, [sp, #4]
 800b8b2:	f000 fa97 	bl	800bde4 <_vfiprintf_r>
 800b8b6:	b002      	add	sp, #8
 800b8b8:	f85d eb04 	ldr.w	lr, [sp], #4
 800b8bc:	b003      	add	sp, #12
 800b8be:	4770      	bx	lr
 800b8c0:	20000038 	.word	0x20000038

0800b8c4 <_fwalk_reent>:
 800b8c4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b8c8:	4606      	mov	r6, r0
 800b8ca:	4688      	mov	r8, r1
 800b8cc:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800b8d0:	2700      	movs	r7, #0
 800b8d2:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800b8d6:	f1b9 0901 	subs.w	r9, r9, #1
 800b8da:	d505      	bpl.n	800b8e8 <_fwalk_reent+0x24>
 800b8dc:	6824      	ldr	r4, [r4, #0]
 800b8de:	2c00      	cmp	r4, #0
 800b8e0:	d1f7      	bne.n	800b8d2 <_fwalk_reent+0xe>
 800b8e2:	4638      	mov	r0, r7
 800b8e4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b8e8:	89ab      	ldrh	r3, [r5, #12]
 800b8ea:	2b01      	cmp	r3, #1
 800b8ec:	d907      	bls.n	800b8fe <_fwalk_reent+0x3a>
 800b8ee:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800b8f2:	3301      	adds	r3, #1
 800b8f4:	d003      	beq.n	800b8fe <_fwalk_reent+0x3a>
 800b8f6:	4629      	mov	r1, r5
 800b8f8:	4630      	mov	r0, r6
 800b8fa:	47c0      	blx	r8
 800b8fc:	4307      	orrs	r7, r0
 800b8fe:	3568      	adds	r5, #104	; 0x68
 800b900:	e7e9      	b.n	800b8d6 <_fwalk_reent+0x12>

0800b902 <__retarget_lock_init_recursive>:
 800b902:	4770      	bx	lr

0800b904 <__retarget_lock_acquire_recursive>:
 800b904:	4770      	bx	lr

0800b906 <__retarget_lock_release_recursive>:
 800b906:	4770      	bx	lr

0800b908 <malloc>:
 800b908:	4b02      	ldr	r3, [pc, #8]	; (800b914 <malloc+0xc>)
 800b90a:	4601      	mov	r1, r0
 800b90c:	6818      	ldr	r0, [r3, #0]
 800b90e:	f000 b86f 	b.w	800b9f0 <_malloc_r>
 800b912:	bf00      	nop
 800b914:	20000038 	.word	0x20000038

0800b918 <_free_r>:
 800b918:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800b91a:	2900      	cmp	r1, #0
 800b91c:	d044      	beq.n	800b9a8 <_free_r+0x90>
 800b91e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b922:	9001      	str	r0, [sp, #4]
 800b924:	2b00      	cmp	r3, #0
 800b926:	f1a1 0404 	sub.w	r4, r1, #4
 800b92a:	bfb8      	it	lt
 800b92c:	18e4      	addlt	r4, r4, r3
 800b92e:	f000 ff95 	bl	800c85c <__malloc_lock>
 800b932:	4a1e      	ldr	r2, [pc, #120]	; (800b9ac <_free_r+0x94>)
 800b934:	9801      	ldr	r0, [sp, #4]
 800b936:	6813      	ldr	r3, [r2, #0]
 800b938:	b933      	cbnz	r3, 800b948 <_free_r+0x30>
 800b93a:	6063      	str	r3, [r4, #4]
 800b93c:	6014      	str	r4, [r2, #0]
 800b93e:	b003      	add	sp, #12
 800b940:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800b944:	f000 bf90 	b.w	800c868 <__malloc_unlock>
 800b948:	42a3      	cmp	r3, r4
 800b94a:	d908      	bls.n	800b95e <_free_r+0x46>
 800b94c:	6825      	ldr	r5, [r4, #0]
 800b94e:	1961      	adds	r1, r4, r5
 800b950:	428b      	cmp	r3, r1
 800b952:	bf01      	itttt	eq
 800b954:	6819      	ldreq	r1, [r3, #0]
 800b956:	685b      	ldreq	r3, [r3, #4]
 800b958:	1949      	addeq	r1, r1, r5
 800b95a:	6021      	streq	r1, [r4, #0]
 800b95c:	e7ed      	b.n	800b93a <_free_r+0x22>
 800b95e:	461a      	mov	r2, r3
 800b960:	685b      	ldr	r3, [r3, #4]
 800b962:	b10b      	cbz	r3, 800b968 <_free_r+0x50>
 800b964:	42a3      	cmp	r3, r4
 800b966:	d9fa      	bls.n	800b95e <_free_r+0x46>
 800b968:	6811      	ldr	r1, [r2, #0]
 800b96a:	1855      	adds	r5, r2, r1
 800b96c:	42a5      	cmp	r5, r4
 800b96e:	d10b      	bne.n	800b988 <_free_r+0x70>
 800b970:	6824      	ldr	r4, [r4, #0]
 800b972:	4421      	add	r1, r4
 800b974:	1854      	adds	r4, r2, r1
 800b976:	42a3      	cmp	r3, r4
 800b978:	6011      	str	r1, [r2, #0]
 800b97a:	d1e0      	bne.n	800b93e <_free_r+0x26>
 800b97c:	681c      	ldr	r4, [r3, #0]
 800b97e:	685b      	ldr	r3, [r3, #4]
 800b980:	6053      	str	r3, [r2, #4]
 800b982:	4421      	add	r1, r4
 800b984:	6011      	str	r1, [r2, #0]
 800b986:	e7da      	b.n	800b93e <_free_r+0x26>
 800b988:	d902      	bls.n	800b990 <_free_r+0x78>
 800b98a:	230c      	movs	r3, #12
 800b98c:	6003      	str	r3, [r0, #0]
 800b98e:	e7d6      	b.n	800b93e <_free_r+0x26>
 800b990:	6825      	ldr	r5, [r4, #0]
 800b992:	1961      	adds	r1, r4, r5
 800b994:	428b      	cmp	r3, r1
 800b996:	bf04      	itt	eq
 800b998:	6819      	ldreq	r1, [r3, #0]
 800b99a:	685b      	ldreq	r3, [r3, #4]
 800b99c:	6063      	str	r3, [r4, #4]
 800b99e:	bf04      	itt	eq
 800b9a0:	1949      	addeq	r1, r1, r5
 800b9a2:	6021      	streq	r1, [r4, #0]
 800b9a4:	6054      	str	r4, [r2, #4]
 800b9a6:	e7ca      	b.n	800b93e <_free_r+0x26>
 800b9a8:	b003      	add	sp, #12
 800b9aa:	bd30      	pop	{r4, r5, pc}
 800b9ac:	2000afc8 	.word	0x2000afc8

0800b9b0 <sbrk_aligned>:
 800b9b0:	b570      	push	{r4, r5, r6, lr}
 800b9b2:	4e0e      	ldr	r6, [pc, #56]	; (800b9ec <sbrk_aligned+0x3c>)
 800b9b4:	460c      	mov	r4, r1
 800b9b6:	6831      	ldr	r1, [r6, #0]
 800b9b8:	4605      	mov	r5, r0
 800b9ba:	b911      	cbnz	r1, 800b9c2 <sbrk_aligned+0x12>
 800b9bc:	f000 fcd6 	bl	800c36c <_sbrk_r>
 800b9c0:	6030      	str	r0, [r6, #0]
 800b9c2:	4621      	mov	r1, r4
 800b9c4:	4628      	mov	r0, r5
 800b9c6:	f000 fcd1 	bl	800c36c <_sbrk_r>
 800b9ca:	1c43      	adds	r3, r0, #1
 800b9cc:	d00a      	beq.n	800b9e4 <sbrk_aligned+0x34>
 800b9ce:	1cc4      	adds	r4, r0, #3
 800b9d0:	f024 0403 	bic.w	r4, r4, #3
 800b9d4:	42a0      	cmp	r0, r4
 800b9d6:	d007      	beq.n	800b9e8 <sbrk_aligned+0x38>
 800b9d8:	1a21      	subs	r1, r4, r0
 800b9da:	4628      	mov	r0, r5
 800b9dc:	f000 fcc6 	bl	800c36c <_sbrk_r>
 800b9e0:	3001      	adds	r0, #1
 800b9e2:	d101      	bne.n	800b9e8 <sbrk_aligned+0x38>
 800b9e4:	f04f 34ff 	mov.w	r4, #4294967295
 800b9e8:	4620      	mov	r0, r4
 800b9ea:	bd70      	pop	{r4, r5, r6, pc}
 800b9ec:	2000afcc 	.word	0x2000afcc

0800b9f0 <_malloc_r>:
 800b9f0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b9f4:	1ccd      	adds	r5, r1, #3
 800b9f6:	f025 0503 	bic.w	r5, r5, #3
 800b9fa:	3508      	adds	r5, #8
 800b9fc:	2d0c      	cmp	r5, #12
 800b9fe:	bf38      	it	cc
 800ba00:	250c      	movcc	r5, #12
 800ba02:	2d00      	cmp	r5, #0
 800ba04:	4607      	mov	r7, r0
 800ba06:	db01      	blt.n	800ba0c <_malloc_r+0x1c>
 800ba08:	42a9      	cmp	r1, r5
 800ba0a:	d905      	bls.n	800ba18 <_malloc_r+0x28>
 800ba0c:	230c      	movs	r3, #12
 800ba0e:	603b      	str	r3, [r7, #0]
 800ba10:	2600      	movs	r6, #0
 800ba12:	4630      	mov	r0, r6
 800ba14:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ba18:	4e2e      	ldr	r6, [pc, #184]	; (800bad4 <_malloc_r+0xe4>)
 800ba1a:	f000 ff1f 	bl	800c85c <__malloc_lock>
 800ba1e:	6833      	ldr	r3, [r6, #0]
 800ba20:	461c      	mov	r4, r3
 800ba22:	bb34      	cbnz	r4, 800ba72 <_malloc_r+0x82>
 800ba24:	4629      	mov	r1, r5
 800ba26:	4638      	mov	r0, r7
 800ba28:	f7ff ffc2 	bl	800b9b0 <sbrk_aligned>
 800ba2c:	1c43      	adds	r3, r0, #1
 800ba2e:	4604      	mov	r4, r0
 800ba30:	d14d      	bne.n	800bace <_malloc_r+0xde>
 800ba32:	6834      	ldr	r4, [r6, #0]
 800ba34:	4626      	mov	r6, r4
 800ba36:	2e00      	cmp	r6, #0
 800ba38:	d140      	bne.n	800babc <_malloc_r+0xcc>
 800ba3a:	6823      	ldr	r3, [r4, #0]
 800ba3c:	4631      	mov	r1, r6
 800ba3e:	4638      	mov	r0, r7
 800ba40:	eb04 0803 	add.w	r8, r4, r3
 800ba44:	f000 fc92 	bl	800c36c <_sbrk_r>
 800ba48:	4580      	cmp	r8, r0
 800ba4a:	d13a      	bne.n	800bac2 <_malloc_r+0xd2>
 800ba4c:	6821      	ldr	r1, [r4, #0]
 800ba4e:	3503      	adds	r5, #3
 800ba50:	1a6d      	subs	r5, r5, r1
 800ba52:	f025 0503 	bic.w	r5, r5, #3
 800ba56:	3508      	adds	r5, #8
 800ba58:	2d0c      	cmp	r5, #12
 800ba5a:	bf38      	it	cc
 800ba5c:	250c      	movcc	r5, #12
 800ba5e:	4629      	mov	r1, r5
 800ba60:	4638      	mov	r0, r7
 800ba62:	f7ff ffa5 	bl	800b9b0 <sbrk_aligned>
 800ba66:	3001      	adds	r0, #1
 800ba68:	d02b      	beq.n	800bac2 <_malloc_r+0xd2>
 800ba6a:	6823      	ldr	r3, [r4, #0]
 800ba6c:	442b      	add	r3, r5
 800ba6e:	6023      	str	r3, [r4, #0]
 800ba70:	e00e      	b.n	800ba90 <_malloc_r+0xa0>
 800ba72:	6822      	ldr	r2, [r4, #0]
 800ba74:	1b52      	subs	r2, r2, r5
 800ba76:	d41e      	bmi.n	800bab6 <_malloc_r+0xc6>
 800ba78:	2a0b      	cmp	r2, #11
 800ba7a:	d916      	bls.n	800baaa <_malloc_r+0xba>
 800ba7c:	1961      	adds	r1, r4, r5
 800ba7e:	42a3      	cmp	r3, r4
 800ba80:	6025      	str	r5, [r4, #0]
 800ba82:	bf18      	it	ne
 800ba84:	6059      	strne	r1, [r3, #4]
 800ba86:	6863      	ldr	r3, [r4, #4]
 800ba88:	bf08      	it	eq
 800ba8a:	6031      	streq	r1, [r6, #0]
 800ba8c:	5162      	str	r2, [r4, r5]
 800ba8e:	604b      	str	r3, [r1, #4]
 800ba90:	4638      	mov	r0, r7
 800ba92:	f104 060b 	add.w	r6, r4, #11
 800ba96:	f000 fee7 	bl	800c868 <__malloc_unlock>
 800ba9a:	f026 0607 	bic.w	r6, r6, #7
 800ba9e:	1d23      	adds	r3, r4, #4
 800baa0:	1af2      	subs	r2, r6, r3
 800baa2:	d0b6      	beq.n	800ba12 <_malloc_r+0x22>
 800baa4:	1b9b      	subs	r3, r3, r6
 800baa6:	50a3      	str	r3, [r4, r2]
 800baa8:	e7b3      	b.n	800ba12 <_malloc_r+0x22>
 800baaa:	6862      	ldr	r2, [r4, #4]
 800baac:	42a3      	cmp	r3, r4
 800baae:	bf0c      	ite	eq
 800bab0:	6032      	streq	r2, [r6, #0]
 800bab2:	605a      	strne	r2, [r3, #4]
 800bab4:	e7ec      	b.n	800ba90 <_malloc_r+0xa0>
 800bab6:	4623      	mov	r3, r4
 800bab8:	6864      	ldr	r4, [r4, #4]
 800baba:	e7b2      	b.n	800ba22 <_malloc_r+0x32>
 800babc:	4634      	mov	r4, r6
 800babe:	6876      	ldr	r6, [r6, #4]
 800bac0:	e7b9      	b.n	800ba36 <_malloc_r+0x46>
 800bac2:	230c      	movs	r3, #12
 800bac4:	603b      	str	r3, [r7, #0]
 800bac6:	4638      	mov	r0, r7
 800bac8:	f000 fece 	bl	800c868 <__malloc_unlock>
 800bacc:	e7a1      	b.n	800ba12 <_malloc_r+0x22>
 800bace:	6025      	str	r5, [r4, #0]
 800bad0:	e7de      	b.n	800ba90 <_malloc_r+0xa0>
 800bad2:	bf00      	nop
 800bad4:	2000afc8 	.word	0x2000afc8

0800bad8 <__ssputs_r>:
 800bad8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800badc:	688e      	ldr	r6, [r1, #8]
 800bade:	429e      	cmp	r6, r3
 800bae0:	4682      	mov	sl, r0
 800bae2:	460c      	mov	r4, r1
 800bae4:	4690      	mov	r8, r2
 800bae6:	461f      	mov	r7, r3
 800bae8:	d838      	bhi.n	800bb5c <__ssputs_r+0x84>
 800baea:	898a      	ldrh	r2, [r1, #12]
 800baec:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800baf0:	d032      	beq.n	800bb58 <__ssputs_r+0x80>
 800baf2:	6825      	ldr	r5, [r4, #0]
 800baf4:	6909      	ldr	r1, [r1, #16]
 800baf6:	eba5 0901 	sub.w	r9, r5, r1
 800bafa:	6965      	ldr	r5, [r4, #20]
 800bafc:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800bb00:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800bb04:	3301      	adds	r3, #1
 800bb06:	444b      	add	r3, r9
 800bb08:	106d      	asrs	r5, r5, #1
 800bb0a:	429d      	cmp	r5, r3
 800bb0c:	bf38      	it	cc
 800bb0e:	461d      	movcc	r5, r3
 800bb10:	0553      	lsls	r3, r2, #21
 800bb12:	d531      	bpl.n	800bb78 <__ssputs_r+0xa0>
 800bb14:	4629      	mov	r1, r5
 800bb16:	f7ff ff6b 	bl	800b9f0 <_malloc_r>
 800bb1a:	4606      	mov	r6, r0
 800bb1c:	b950      	cbnz	r0, 800bb34 <__ssputs_r+0x5c>
 800bb1e:	230c      	movs	r3, #12
 800bb20:	f8ca 3000 	str.w	r3, [sl]
 800bb24:	89a3      	ldrh	r3, [r4, #12]
 800bb26:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800bb2a:	81a3      	strh	r3, [r4, #12]
 800bb2c:	f04f 30ff 	mov.w	r0, #4294967295
 800bb30:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bb34:	6921      	ldr	r1, [r4, #16]
 800bb36:	464a      	mov	r2, r9
 800bb38:	f7ff fc4e 	bl	800b3d8 <memcpy>
 800bb3c:	89a3      	ldrh	r3, [r4, #12]
 800bb3e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800bb42:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800bb46:	81a3      	strh	r3, [r4, #12]
 800bb48:	6126      	str	r6, [r4, #16]
 800bb4a:	6165      	str	r5, [r4, #20]
 800bb4c:	444e      	add	r6, r9
 800bb4e:	eba5 0509 	sub.w	r5, r5, r9
 800bb52:	6026      	str	r6, [r4, #0]
 800bb54:	60a5      	str	r5, [r4, #8]
 800bb56:	463e      	mov	r6, r7
 800bb58:	42be      	cmp	r6, r7
 800bb5a:	d900      	bls.n	800bb5e <__ssputs_r+0x86>
 800bb5c:	463e      	mov	r6, r7
 800bb5e:	6820      	ldr	r0, [r4, #0]
 800bb60:	4632      	mov	r2, r6
 800bb62:	4641      	mov	r1, r8
 800bb64:	f7ff fc46 	bl	800b3f4 <memmove>
 800bb68:	68a3      	ldr	r3, [r4, #8]
 800bb6a:	1b9b      	subs	r3, r3, r6
 800bb6c:	60a3      	str	r3, [r4, #8]
 800bb6e:	6823      	ldr	r3, [r4, #0]
 800bb70:	4433      	add	r3, r6
 800bb72:	6023      	str	r3, [r4, #0]
 800bb74:	2000      	movs	r0, #0
 800bb76:	e7db      	b.n	800bb30 <__ssputs_r+0x58>
 800bb78:	462a      	mov	r2, r5
 800bb7a:	f000 fe7b 	bl	800c874 <_realloc_r>
 800bb7e:	4606      	mov	r6, r0
 800bb80:	2800      	cmp	r0, #0
 800bb82:	d1e1      	bne.n	800bb48 <__ssputs_r+0x70>
 800bb84:	6921      	ldr	r1, [r4, #16]
 800bb86:	4650      	mov	r0, sl
 800bb88:	f7ff fec6 	bl	800b918 <_free_r>
 800bb8c:	e7c7      	b.n	800bb1e <__ssputs_r+0x46>
	...

0800bb90 <_svfiprintf_r>:
 800bb90:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bb94:	4698      	mov	r8, r3
 800bb96:	898b      	ldrh	r3, [r1, #12]
 800bb98:	061b      	lsls	r3, r3, #24
 800bb9a:	b09d      	sub	sp, #116	; 0x74
 800bb9c:	4607      	mov	r7, r0
 800bb9e:	460d      	mov	r5, r1
 800bba0:	4614      	mov	r4, r2
 800bba2:	d50e      	bpl.n	800bbc2 <_svfiprintf_r+0x32>
 800bba4:	690b      	ldr	r3, [r1, #16]
 800bba6:	b963      	cbnz	r3, 800bbc2 <_svfiprintf_r+0x32>
 800bba8:	2140      	movs	r1, #64	; 0x40
 800bbaa:	f7ff ff21 	bl	800b9f0 <_malloc_r>
 800bbae:	6028      	str	r0, [r5, #0]
 800bbb0:	6128      	str	r0, [r5, #16]
 800bbb2:	b920      	cbnz	r0, 800bbbe <_svfiprintf_r+0x2e>
 800bbb4:	230c      	movs	r3, #12
 800bbb6:	603b      	str	r3, [r7, #0]
 800bbb8:	f04f 30ff 	mov.w	r0, #4294967295
 800bbbc:	e0d1      	b.n	800bd62 <_svfiprintf_r+0x1d2>
 800bbbe:	2340      	movs	r3, #64	; 0x40
 800bbc0:	616b      	str	r3, [r5, #20]
 800bbc2:	2300      	movs	r3, #0
 800bbc4:	9309      	str	r3, [sp, #36]	; 0x24
 800bbc6:	2320      	movs	r3, #32
 800bbc8:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800bbcc:	f8cd 800c 	str.w	r8, [sp, #12]
 800bbd0:	2330      	movs	r3, #48	; 0x30
 800bbd2:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800bd7c <_svfiprintf_r+0x1ec>
 800bbd6:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800bbda:	f04f 0901 	mov.w	r9, #1
 800bbde:	4623      	mov	r3, r4
 800bbe0:	469a      	mov	sl, r3
 800bbe2:	f813 2b01 	ldrb.w	r2, [r3], #1
 800bbe6:	b10a      	cbz	r2, 800bbec <_svfiprintf_r+0x5c>
 800bbe8:	2a25      	cmp	r2, #37	; 0x25
 800bbea:	d1f9      	bne.n	800bbe0 <_svfiprintf_r+0x50>
 800bbec:	ebba 0b04 	subs.w	fp, sl, r4
 800bbf0:	d00b      	beq.n	800bc0a <_svfiprintf_r+0x7a>
 800bbf2:	465b      	mov	r3, fp
 800bbf4:	4622      	mov	r2, r4
 800bbf6:	4629      	mov	r1, r5
 800bbf8:	4638      	mov	r0, r7
 800bbfa:	f7ff ff6d 	bl	800bad8 <__ssputs_r>
 800bbfe:	3001      	adds	r0, #1
 800bc00:	f000 80aa 	beq.w	800bd58 <_svfiprintf_r+0x1c8>
 800bc04:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800bc06:	445a      	add	r2, fp
 800bc08:	9209      	str	r2, [sp, #36]	; 0x24
 800bc0a:	f89a 3000 	ldrb.w	r3, [sl]
 800bc0e:	2b00      	cmp	r3, #0
 800bc10:	f000 80a2 	beq.w	800bd58 <_svfiprintf_r+0x1c8>
 800bc14:	2300      	movs	r3, #0
 800bc16:	f04f 32ff 	mov.w	r2, #4294967295
 800bc1a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800bc1e:	f10a 0a01 	add.w	sl, sl, #1
 800bc22:	9304      	str	r3, [sp, #16]
 800bc24:	9307      	str	r3, [sp, #28]
 800bc26:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800bc2a:	931a      	str	r3, [sp, #104]	; 0x68
 800bc2c:	4654      	mov	r4, sl
 800bc2e:	2205      	movs	r2, #5
 800bc30:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bc34:	4851      	ldr	r0, [pc, #324]	; (800bd7c <_svfiprintf_r+0x1ec>)
 800bc36:	f7f4 faf3 	bl	8000220 <memchr>
 800bc3a:	9a04      	ldr	r2, [sp, #16]
 800bc3c:	b9d8      	cbnz	r0, 800bc76 <_svfiprintf_r+0xe6>
 800bc3e:	06d0      	lsls	r0, r2, #27
 800bc40:	bf44      	itt	mi
 800bc42:	2320      	movmi	r3, #32
 800bc44:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800bc48:	0711      	lsls	r1, r2, #28
 800bc4a:	bf44      	itt	mi
 800bc4c:	232b      	movmi	r3, #43	; 0x2b
 800bc4e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800bc52:	f89a 3000 	ldrb.w	r3, [sl]
 800bc56:	2b2a      	cmp	r3, #42	; 0x2a
 800bc58:	d015      	beq.n	800bc86 <_svfiprintf_r+0xf6>
 800bc5a:	9a07      	ldr	r2, [sp, #28]
 800bc5c:	4654      	mov	r4, sl
 800bc5e:	2000      	movs	r0, #0
 800bc60:	f04f 0c0a 	mov.w	ip, #10
 800bc64:	4621      	mov	r1, r4
 800bc66:	f811 3b01 	ldrb.w	r3, [r1], #1
 800bc6a:	3b30      	subs	r3, #48	; 0x30
 800bc6c:	2b09      	cmp	r3, #9
 800bc6e:	d94e      	bls.n	800bd0e <_svfiprintf_r+0x17e>
 800bc70:	b1b0      	cbz	r0, 800bca0 <_svfiprintf_r+0x110>
 800bc72:	9207      	str	r2, [sp, #28]
 800bc74:	e014      	b.n	800bca0 <_svfiprintf_r+0x110>
 800bc76:	eba0 0308 	sub.w	r3, r0, r8
 800bc7a:	fa09 f303 	lsl.w	r3, r9, r3
 800bc7e:	4313      	orrs	r3, r2
 800bc80:	9304      	str	r3, [sp, #16]
 800bc82:	46a2      	mov	sl, r4
 800bc84:	e7d2      	b.n	800bc2c <_svfiprintf_r+0x9c>
 800bc86:	9b03      	ldr	r3, [sp, #12]
 800bc88:	1d19      	adds	r1, r3, #4
 800bc8a:	681b      	ldr	r3, [r3, #0]
 800bc8c:	9103      	str	r1, [sp, #12]
 800bc8e:	2b00      	cmp	r3, #0
 800bc90:	bfbb      	ittet	lt
 800bc92:	425b      	neglt	r3, r3
 800bc94:	f042 0202 	orrlt.w	r2, r2, #2
 800bc98:	9307      	strge	r3, [sp, #28]
 800bc9a:	9307      	strlt	r3, [sp, #28]
 800bc9c:	bfb8      	it	lt
 800bc9e:	9204      	strlt	r2, [sp, #16]
 800bca0:	7823      	ldrb	r3, [r4, #0]
 800bca2:	2b2e      	cmp	r3, #46	; 0x2e
 800bca4:	d10c      	bne.n	800bcc0 <_svfiprintf_r+0x130>
 800bca6:	7863      	ldrb	r3, [r4, #1]
 800bca8:	2b2a      	cmp	r3, #42	; 0x2a
 800bcaa:	d135      	bne.n	800bd18 <_svfiprintf_r+0x188>
 800bcac:	9b03      	ldr	r3, [sp, #12]
 800bcae:	1d1a      	adds	r2, r3, #4
 800bcb0:	681b      	ldr	r3, [r3, #0]
 800bcb2:	9203      	str	r2, [sp, #12]
 800bcb4:	2b00      	cmp	r3, #0
 800bcb6:	bfb8      	it	lt
 800bcb8:	f04f 33ff 	movlt.w	r3, #4294967295
 800bcbc:	3402      	adds	r4, #2
 800bcbe:	9305      	str	r3, [sp, #20]
 800bcc0:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800bd8c <_svfiprintf_r+0x1fc>
 800bcc4:	7821      	ldrb	r1, [r4, #0]
 800bcc6:	2203      	movs	r2, #3
 800bcc8:	4650      	mov	r0, sl
 800bcca:	f7f4 faa9 	bl	8000220 <memchr>
 800bcce:	b140      	cbz	r0, 800bce2 <_svfiprintf_r+0x152>
 800bcd0:	2340      	movs	r3, #64	; 0x40
 800bcd2:	eba0 000a 	sub.w	r0, r0, sl
 800bcd6:	fa03 f000 	lsl.w	r0, r3, r0
 800bcda:	9b04      	ldr	r3, [sp, #16]
 800bcdc:	4303      	orrs	r3, r0
 800bcde:	3401      	adds	r4, #1
 800bce0:	9304      	str	r3, [sp, #16]
 800bce2:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bce6:	4826      	ldr	r0, [pc, #152]	; (800bd80 <_svfiprintf_r+0x1f0>)
 800bce8:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800bcec:	2206      	movs	r2, #6
 800bcee:	f7f4 fa97 	bl	8000220 <memchr>
 800bcf2:	2800      	cmp	r0, #0
 800bcf4:	d038      	beq.n	800bd68 <_svfiprintf_r+0x1d8>
 800bcf6:	4b23      	ldr	r3, [pc, #140]	; (800bd84 <_svfiprintf_r+0x1f4>)
 800bcf8:	bb1b      	cbnz	r3, 800bd42 <_svfiprintf_r+0x1b2>
 800bcfa:	9b03      	ldr	r3, [sp, #12]
 800bcfc:	3307      	adds	r3, #7
 800bcfe:	f023 0307 	bic.w	r3, r3, #7
 800bd02:	3308      	adds	r3, #8
 800bd04:	9303      	str	r3, [sp, #12]
 800bd06:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bd08:	4433      	add	r3, r6
 800bd0a:	9309      	str	r3, [sp, #36]	; 0x24
 800bd0c:	e767      	b.n	800bbde <_svfiprintf_r+0x4e>
 800bd0e:	fb0c 3202 	mla	r2, ip, r2, r3
 800bd12:	460c      	mov	r4, r1
 800bd14:	2001      	movs	r0, #1
 800bd16:	e7a5      	b.n	800bc64 <_svfiprintf_r+0xd4>
 800bd18:	2300      	movs	r3, #0
 800bd1a:	3401      	adds	r4, #1
 800bd1c:	9305      	str	r3, [sp, #20]
 800bd1e:	4619      	mov	r1, r3
 800bd20:	f04f 0c0a 	mov.w	ip, #10
 800bd24:	4620      	mov	r0, r4
 800bd26:	f810 2b01 	ldrb.w	r2, [r0], #1
 800bd2a:	3a30      	subs	r2, #48	; 0x30
 800bd2c:	2a09      	cmp	r2, #9
 800bd2e:	d903      	bls.n	800bd38 <_svfiprintf_r+0x1a8>
 800bd30:	2b00      	cmp	r3, #0
 800bd32:	d0c5      	beq.n	800bcc0 <_svfiprintf_r+0x130>
 800bd34:	9105      	str	r1, [sp, #20]
 800bd36:	e7c3      	b.n	800bcc0 <_svfiprintf_r+0x130>
 800bd38:	fb0c 2101 	mla	r1, ip, r1, r2
 800bd3c:	4604      	mov	r4, r0
 800bd3e:	2301      	movs	r3, #1
 800bd40:	e7f0      	b.n	800bd24 <_svfiprintf_r+0x194>
 800bd42:	ab03      	add	r3, sp, #12
 800bd44:	9300      	str	r3, [sp, #0]
 800bd46:	462a      	mov	r2, r5
 800bd48:	4b0f      	ldr	r3, [pc, #60]	; (800bd88 <_svfiprintf_r+0x1f8>)
 800bd4a:	a904      	add	r1, sp, #16
 800bd4c:	4638      	mov	r0, r7
 800bd4e:	f3af 8000 	nop.w
 800bd52:	1c42      	adds	r2, r0, #1
 800bd54:	4606      	mov	r6, r0
 800bd56:	d1d6      	bne.n	800bd06 <_svfiprintf_r+0x176>
 800bd58:	89ab      	ldrh	r3, [r5, #12]
 800bd5a:	065b      	lsls	r3, r3, #25
 800bd5c:	f53f af2c 	bmi.w	800bbb8 <_svfiprintf_r+0x28>
 800bd60:	9809      	ldr	r0, [sp, #36]	; 0x24
 800bd62:	b01d      	add	sp, #116	; 0x74
 800bd64:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bd68:	ab03      	add	r3, sp, #12
 800bd6a:	9300      	str	r3, [sp, #0]
 800bd6c:	462a      	mov	r2, r5
 800bd6e:	4b06      	ldr	r3, [pc, #24]	; (800bd88 <_svfiprintf_r+0x1f8>)
 800bd70:	a904      	add	r1, sp, #16
 800bd72:	4638      	mov	r0, r7
 800bd74:	f000 f9d4 	bl	800c120 <_printf_i>
 800bd78:	e7eb      	b.n	800bd52 <_svfiprintf_r+0x1c2>
 800bd7a:	bf00      	nop
 800bd7c:	08012858 	.word	0x08012858
 800bd80:	08012862 	.word	0x08012862
 800bd84:	00000000 	.word	0x00000000
 800bd88:	0800bad9 	.word	0x0800bad9
 800bd8c:	0801285e 	.word	0x0801285e

0800bd90 <__sfputc_r>:
 800bd90:	6893      	ldr	r3, [r2, #8]
 800bd92:	3b01      	subs	r3, #1
 800bd94:	2b00      	cmp	r3, #0
 800bd96:	b410      	push	{r4}
 800bd98:	6093      	str	r3, [r2, #8]
 800bd9a:	da08      	bge.n	800bdae <__sfputc_r+0x1e>
 800bd9c:	6994      	ldr	r4, [r2, #24]
 800bd9e:	42a3      	cmp	r3, r4
 800bda0:	db01      	blt.n	800bda6 <__sfputc_r+0x16>
 800bda2:	290a      	cmp	r1, #10
 800bda4:	d103      	bne.n	800bdae <__sfputc_r+0x1e>
 800bda6:	f85d 4b04 	ldr.w	r4, [sp], #4
 800bdaa:	f000 bb33 	b.w	800c414 <__swbuf_r>
 800bdae:	6813      	ldr	r3, [r2, #0]
 800bdb0:	1c58      	adds	r0, r3, #1
 800bdb2:	6010      	str	r0, [r2, #0]
 800bdb4:	7019      	strb	r1, [r3, #0]
 800bdb6:	4608      	mov	r0, r1
 800bdb8:	f85d 4b04 	ldr.w	r4, [sp], #4
 800bdbc:	4770      	bx	lr

0800bdbe <__sfputs_r>:
 800bdbe:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bdc0:	4606      	mov	r6, r0
 800bdc2:	460f      	mov	r7, r1
 800bdc4:	4614      	mov	r4, r2
 800bdc6:	18d5      	adds	r5, r2, r3
 800bdc8:	42ac      	cmp	r4, r5
 800bdca:	d101      	bne.n	800bdd0 <__sfputs_r+0x12>
 800bdcc:	2000      	movs	r0, #0
 800bdce:	e007      	b.n	800bde0 <__sfputs_r+0x22>
 800bdd0:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bdd4:	463a      	mov	r2, r7
 800bdd6:	4630      	mov	r0, r6
 800bdd8:	f7ff ffda 	bl	800bd90 <__sfputc_r>
 800bddc:	1c43      	adds	r3, r0, #1
 800bdde:	d1f3      	bne.n	800bdc8 <__sfputs_r+0xa>
 800bde0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800bde4 <_vfiprintf_r>:
 800bde4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bde8:	460d      	mov	r5, r1
 800bdea:	b09d      	sub	sp, #116	; 0x74
 800bdec:	4614      	mov	r4, r2
 800bdee:	4698      	mov	r8, r3
 800bdf0:	4606      	mov	r6, r0
 800bdf2:	b118      	cbz	r0, 800bdfc <_vfiprintf_r+0x18>
 800bdf4:	6983      	ldr	r3, [r0, #24]
 800bdf6:	b90b      	cbnz	r3, 800bdfc <_vfiprintf_r+0x18>
 800bdf8:	f7ff fcd4 	bl	800b7a4 <__sinit>
 800bdfc:	4b89      	ldr	r3, [pc, #548]	; (800c024 <_vfiprintf_r+0x240>)
 800bdfe:	429d      	cmp	r5, r3
 800be00:	d11b      	bne.n	800be3a <_vfiprintf_r+0x56>
 800be02:	6875      	ldr	r5, [r6, #4]
 800be04:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800be06:	07d9      	lsls	r1, r3, #31
 800be08:	d405      	bmi.n	800be16 <_vfiprintf_r+0x32>
 800be0a:	89ab      	ldrh	r3, [r5, #12]
 800be0c:	059a      	lsls	r2, r3, #22
 800be0e:	d402      	bmi.n	800be16 <_vfiprintf_r+0x32>
 800be10:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800be12:	f7ff fd77 	bl	800b904 <__retarget_lock_acquire_recursive>
 800be16:	89ab      	ldrh	r3, [r5, #12]
 800be18:	071b      	lsls	r3, r3, #28
 800be1a:	d501      	bpl.n	800be20 <_vfiprintf_r+0x3c>
 800be1c:	692b      	ldr	r3, [r5, #16]
 800be1e:	b9eb      	cbnz	r3, 800be5c <_vfiprintf_r+0x78>
 800be20:	4629      	mov	r1, r5
 800be22:	4630      	mov	r0, r6
 800be24:	f000 fb5a 	bl	800c4dc <__swsetup_r>
 800be28:	b1c0      	cbz	r0, 800be5c <_vfiprintf_r+0x78>
 800be2a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800be2c:	07dc      	lsls	r4, r3, #31
 800be2e:	d50e      	bpl.n	800be4e <_vfiprintf_r+0x6a>
 800be30:	f04f 30ff 	mov.w	r0, #4294967295
 800be34:	b01d      	add	sp, #116	; 0x74
 800be36:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800be3a:	4b7b      	ldr	r3, [pc, #492]	; (800c028 <_vfiprintf_r+0x244>)
 800be3c:	429d      	cmp	r5, r3
 800be3e:	d101      	bne.n	800be44 <_vfiprintf_r+0x60>
 800be40:	68b5      	ldr	r5, [r6, #8]
 800be42:	e7df      	b.n	800be04 <_vfiprintf_r+0x20>
 800be44:	4b79      	ldr	r3, [pc, #484]	; (800c02c <_vfiprintf_r+0x248>)
 800be46:	429d      	cmp	r5, r3
 800be48:	bf08      	it	eq
 800be4a:	68f5      	ldreq	r5, [r6, #12]
 800be4c:	e7da      	b.n	800be04 <_vfiprintf_r+0x20>
 800be4e:	89ab      	ldrh	r3, [r5, #12]
 800be50:	0598      	lsls	r0, r3, #22
 800be52:	d4ed      	bmi.n	800be30 <_vfiprintf_r+0x4c>
 800be54:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800be56:	f7ff fd56 	bl	800b906 <__retarget_lock_release_recursive>
 800be5a:	e7e9      	b.n	800be30 <_vfiprintf_r+0x4c>
 800be5c:	2300      	movs	r3, #0
 800be5e:	9309      	str	r3, [sp, #36]	; 0x24
 800be60:	2320      	movs	r3, #32
 800be62:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800be66:	f8cd 800c 	str.w	r8, [sp, #12]
 800be6a:	2330      	movs	r3, #48	; 0x30
 800be6c:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800c030 <_vfiprintf_r+0x24c>
 800be70:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800be74:	f04f 0901 	mov.w	r9, #1
 800be78:	4623      	mov	r3, r4
 800be7a:	469a      	mov	sl, r3
 800be7c:	f813 2b01 	ldrb.w	r2, [r3], #1
 800be80:	b10a      	cbz	r2, 800be86 <_vfiprintf_r+0xa2>
 800be82:	2a25      	cmp	r2, #37	; 0x25
 800be84:	d1f9      	bne.n	800be7a <_vfiprintf_r+0x96>
 800be86:	ebba 0b04 	subs.w	fp, sl, r4
 800be8a:	d00b      	beq.n	800bea4 <_vfiprintf_r+0xc0>
 800be8c:	465b      	mov	r3, fp
 800be8e:	4622      	mov	r2, r4
 800be90:	4629      	mov	r1, r5
 800be92:	4630      	mov	r0, r6
 800be94:	f7ff ff93 	bl	800bdbe <__sfputs_r>
 800be98:	3001      	adds	r0, #1
 800be9a:	f000 80aa 	beq.w	800bff2 <_vfiprintf_r+0x20e>
 800be9e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800bea0:	445a      	add	r2, fp
 800bea2:	9209      	str	r2, [sp, #36]	; 0x24
 800bea4:	f89a 3000 	ldrb.w	r3, [sl]
 800bea8:	2b00      	cmp	r3, #0
 800beaa:	f000 80a2 	beq.w	800bff2 <_vfiprintf_r+0x20e>
 800beae:	2300      	movs	r3, #0
 800beb0:	f04f 32ff 	mov.w	r2, #4294967295
 800beb4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800beb8:	f10a 0a01 	add.w	sl, sl, #1
 800bebc:	9304      	str	r3, [sp, #16]
 800bebe:	9307      	str	r3, [sp, #28]
 800bec0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800bec4:	931a      	str	r3, [sp, #104]	; 0x68
 800bec6:	4654      	mov	r4, sl
 800bec8:	2205      	movs	r2, #5
 800beca:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bece:	4858      	ldr	r0, [pc, #352]	; (800c030 <_vfiprintf_r+0x24c>)
 800bed0:	f7f4 f9a6 	bl	8000220 <memchr>
 800bed4:	9a04      	ldr	r2, [sp, #16]
 800bed6:	b9d8      	cbnz	r0, 800bf10 <_vfiprintf_r+0x12c>
 800bed8:	06d1      	lsls	r1, r2, #27
 800beda:	bf44      	itt	mi
 800bedc:	2320      	movmi	r3, #32
 800bede:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800bee2:	0713      	lsls	r3, r2, #28
 800bee4:	bf44      	itt	mi
 800bee6:	232b      	movmi	r3, #43	; 0x2b
 800bee8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800beec:	f89a 3000 	ldrb.w	r3, [sl]
 800bef0:	2b2a      	cmp	r3, #42	; 0x2a
 800bef2:	d015      	beq.n	800bf20 <_vfiprintf_r+0x13c>
 800bef4:	9a07      	ldr	r2, [sp, #28]
 800bef6:	4654      	mov	r4, sl
 800bef8:	2000      	movs	r0, #0
 800befa:	f04f 0c0a 	mov.w	ip, #10
 800befe:	4621      	mov	r1, r4
 800bf00:	f811 3b01 	ldrb.w	r3, [r1], #1
 800bf04:	3b30      	subs	r3, #48	; 0x30
 800bf06:	2b09      	cmp	r3, #9
 800bf08:	d94e      	bls.n	800bfa8 <_vfiprintf_r+0x1c4>
 800bf0a:	b1b0      	cbz	r0, 800bf3a <_vfiprintf_r+0x156>
 800bf0c:	9207      	str	r2, [sp, #28]
 800bf0e:	e014      	b.n	800bf3a <_vfiprintf_r+0x156>
 800bf10:	eba0 0308 	sub.w	r3, r0, r8
 800bf14:	fa09 f303 	lsl.w	r3, r9, r3
 800bf18:	4313      	orrs	r3, r2
 800bf1a:	9304      	str	r3, [sp, #16]
 800bf1c:	46a2      	mov	sl, r4
 800bf1e:	e7d2      	b.n	800bec6 <_vfiprintf_r+0xe2>
 800bf20:	9b03      	ldr	r3, [sp, #12]
 800bf22:	1d19      	adds	r1, r3, #4
 800bf24:	681b      	ldr	r3, [r3, #0]
 800bf26:	9103      	str	r1, [sp, #12]
 800bf28:	2b00      	cmp	r3, #0
 800bf2a:	bfbb      	ittet	lt
 800bf2c:	425b      	neglt	r3, r3
 800bf2e:	f042 0202 	orrlt.w	r2, r2, #2
 800bf32:	9307      	strge	r3, [sp, #28]
 800bf34:	9307      	strlt	r3, [sp, #28]
 800bf36:	bfb8      	it	lt
 800bf38:	9204      	strlt	r2, [sp, #16]
 800bf3a:	7823      	ldrb	r3, [r4, #0]
 800bf3c:	2b2e      	cmp	r3, #46	; 0x2e
 800bf3e:	d10c      	bne.n	800bf5a <_vfiprintf_r+0x176>
 800bf40:	7863      	ldrb	r3, [r4, #1]
 800bf42:	2b2a      	cmp	r3, #42	; 0x2a
 800bf44:	d135      	bne.n	800bfb2 <_vfiprintf_r+0x1ce>
 800bf46:	9b03      	ldr	r3, [sp, #12]
 800bf48:	1d1a      	adds	r2, r3, #4
 800bf4a:	681b      	ldr	r3, [r3, #0]
 800bf4c:	9203      	str	r2, [sp, #12]
 800bf4e:	2b00      	cmp	r3, #0
 800bf50:	bfb8      	it	lt
 800bf52:	f04f 33ff 	movlt.w	r3, #4294967295
 800bf56:	3402      	adds	r4, #2
 800bf58:	9305      	str	r3, [sp, #20]
 800bf5a:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800c040 <_vfiprintf_r+0x25c>
 800bf5e:	7821      	ldrb	r1, [r4, #0]
 800bf60:	2203      	movs	r2, #3
 800bf62:	4650      	mov	r0, sl
 800bf64:	f7f4 f95c 	bl	8000220 <memchr>
 800bf68:	b140      	cbz	r0, 800bf7c <_vfiprintf_r+0x198>
 800bf6a:	2340      	movs	r3, #64	; 0x40
 800bf6c:	eba0 000a 	sub.w	r0, r0, sl
 800bf70:	fa03 f000 	lsl.w	r0, r3, r0
 800bf74:	9b04      	ldr	r3, [sp, #16]
 800bf76:	4303      	orrs	r3, r0
 800bf78:	3401      	adds	r4, #1
 800bf7a:	9304      	str	r3, [sp, #16]
 800bf7c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bf80:	482c      	ldr	r0, [pc, #176]	; (800c034 <_vfiprintf_r+0x250>)
 800bf82:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800bf86:	2206      	movs	r2, #6
 800bf88:	f7f4 f94a 	bl	8000220 <memchr>
 800bf8c:	2800      	cmp	r0, #0
 800bf8e:	d03f      	beq.n	800c010 <_vfiprintf_r+0x22c>
 800bf90:	4b29      	ldr	r3, [pc, #164]	; (800c038 <_vfiprintf_r+0x254>)
 800bf92:	bb1b      	cbnz	r3, 800bfdc <_vfiprintf_r+0x1f8>
 800bf94:	9b03      	ldr	r3, [sp, #12]
 800bf96:	3307      	adds	r3, #7
 800bf98:	f023 0307 	bic.w	r3, r3, #7
 800bf9c:	3308      	adds	r3, #8
 800bf9e:	9303      	str	r3, [sp, #12]
 800bfa0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bfa2:	443b      	add	r3, r7
 800bfa4:	9309      	str	r3, [sp, #36]	; 0x24
 800bfa6:	e767      	b.n	800be78 <_vfiprintf_r+0x94>
 800bfa8:	fb0c 3202 	mla	r2, ip, r2, r3
 800bfac:	460c      	mov	r4, r1
 800bfae:	2001      	movs	r0, #1
 800bfb0:	e7a5      	b.n	800befe <_vfiprintf_r+0x11a>
 800bfb2:	2300      	movs	r3, #0
 800bfb4:	3401      	adds	r4, #1
 800bfb6:	9305      	str	r3, [sp, #20]
 800bfb8:	4619      	mov	r1, r3
 800bfba:	f04f 0c0a 	mov.w	ip, #10
 800bfbe:	4620      	mov	r0, r4
 800bfc0:	f810 2b01 	ldrb.w	r2, [r0], #1
 800bfc4:	3a30      	subs	r2, #48	; 0x30
 800bfc6:	2a09      	cmp	r2, #9
 800bfc8:	d903      	bls.n	800bfd2 <_vfiprintf_r+0x1ee>
 800bfca:	2b00      	cmp	r3, #0
 800bfcc:	d0c5      	beq.n	800bf5a <_vfiprintf_r+0x176>
 800bfce:	9105      	str	r1, [sp, #20]
 800bfd0:	e7c3      	b.n	800bf5a <_vfiprintf_r+0x176>
 800bfd2:	fb0c 2101 	mla	r1, ip, r1, r2
 800bfd6:	4604      	mov	r4, r0
 800bfd8:	2301      	movs	r3, #1
 800bfda:	e7f0      	b.n	800bfbe <_vfiprintf_r+0x1da>
 800bfdc:	ab03      	add	r3, sp, #12
 800bfde:	9300      	str	r3, [sp, #0]
 800bfe0:	462a      	mov	r2, r5
 800bfe2:	4b16      	ldr	r3, [pc, #88]	; (800c03c <_vfiprintf_r+0x258>)
 800bfe4:	a904      	add	r1, sp, #16
 800bfe6:	4630      	mov	r0, r6
 800bfe8:	f3af 8000 	nop.w
 800bfec:	4607      	mov	r7, r0
 800bfee:	1c78      	adds	r0, r7, #1
 800bff0:	d1d6      	bne.n	800bfa0 <_vfiprintf_r+0x1bc>
 800bff2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800bff4:	07d9      	lsls	r1, r3, #31
 800bff6:	d405      	bmi.n	800c004 <_vfiprintf_r+0x220>
 800bff8:	89ab      	ldrh	r3, [r5, #12]
 800bffa:	059a      	lsls	r2, r3, #22
 800bffc:	d402      	bmi.n	800c004 <_vfiprintf_r+0x220>
 800bffe:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800c000:	f7ff fc81 	bl	800b906 <__retarget_lock_release_recursive>
 800c004:	89ab      	ldrh	r3, [r5, #12]
 800c006:	065b      	lsls	r3, r3, #25
 800c008:	f53f af12 	bmi.w	800be30 <_vfiprintf_r+0x4c>
 800c00c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800c00e:	e711      	b.n	800be34 <_vfiprintf_r+0x50>
 800c010:	ab03      	add	r3, sp, #12
 800c012:	9300      	str	r3, [sp, #0]
 800c014:	462a      	mov	r2, r5
 800c016:	4b09      	ldr	r3, [pc, #36]	; (800c03c <_vfiprintf_r+0x258>)
 800c018:	a904      	add	r1, sp, #16
 800c01a:	4630      	mov	r0, r6
 800c01c:	f000 f880 	bl	800c120 <_printf_i>
 800c020:	e7e4      	b.n	800bfec <_vfiprintf_r+0x208>
 800c022:	bf00      	nop
 800c024:	08012818 	.word	0x08012818
 800c028:	08012838 	.word	0x08012838
 800c02c:	080127f8 	.word	0x080127f8
 800c030:	08012858 	.word	0x08012858
 800c034:	08012862 	.word	0x08012862
 800c038:	00000000 	.word	0x00000000
 800c03c:	0800bdbf 	.word	0x0800bdbf
 800c040:	0801285e 	.word	0x0801285e

0800c044 <_printf_common>:
 800c044:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c048:	4616      	mov	r6, r2
 800c04a:	4699      	mov	r9, r3
 800c04c:	688a      	ldr	r2, [r1, #8]
 800c04e:	690b      	ldr	r3, [r1, #16]
 800c050:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800c054:	4293      	cmp	r3, r2
 800c056:	bfb8      	it	lt
 800c058:	4613      	movlt	r3, r2
 800c05a:	6033      	str	r3, [r6, #0]
 800c05c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800c060:	4607      	mov	r7, r0
 800c062:	460c      	mov	r4, r1
 800c064:	b10a      	cbz	r2, 800c06a <_printf_common+0x26>
 800c066:	3301      	adds	r3, #1
 800c068:	6033      	str	r3, [r6, #0]
 800c06a:	6823      	ldr	r3, [r4, #0]
 800c06c:	0699      	lsls	r1, r3, #26
 800c06e:	bf42      	ittt	mi
 800c070:	6833      	ldrmi	r3, [r6, #0]
 800c072:	3302      	addmi	r3, #2
 800c074:	6033      	strmi	r3, [r6, #0]
 800c076:	6825      	ldr	r5, [r4, #0]
 800c078:	f015 0506 	ands.w	r5, r5, #6
 800c07c:	d106      	bne.n	800c08c <_printf_common+0x48>
 800c07e:	f104 0a19 	add.w	sl, r4, #25
 800c082:	68e3      	ldr	r3, [r4, #12]
 800c084:	6832      	ldr	r2, [r6, #0]
 800c086:	1a9b      	subs	r3, r3, r2
 800c088:	42ab      	cmp	r3, r5
 800c08a:	dc26      	bgt.n	800c0da <_printf_common+0x96>
 800c08c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800c090:	1e13      	subs	r3, r2, #0
 800c092:	6822      	ldr	r2, [r4, #0]
 800c094:	bf18      	it	ne
 800c096:	2301      	movne	r3, #1
 800c098:	0692      	lsls	r2, r2, #26
 800c09a:	d42b      	bmi.n	800c0f4 <_printf_common+0xb0>
 800c09c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800c0a0:	4649      	mov	r1, r9
 800c0a2:	4638      	mov	r0, r7
 800c0a4:	47c0      	blx	r8
 800c0a6:	3001      	adds	r0, #1
 800c0a8:	d01e      	beq.n	800c0e8 <_printf_common+0xa4>
 800c0aa:	6823      	ldr	r3, [r4, #0]
 800c0ac:	68e5      	ldr	r5, [r4, #12]
 800c0ae:	6832      	ldr	r2, [r6, #0]
 800c0b0:	f003 0306 	and.w	r3, r3, #6
 800c0b4:	2b04      	cmp	r3, #4
 800c0b6:	bf08      	it	eq
 800c0b8:	1aad      	subeq	r5, r5, r2
 800c0ba:	68a3      	ldr	r3, [r4, #8]
 800c0bc:	6922      	ldr	r2, [r4, #16]
 800c0be:	bf0c      	ite	eq
 800c0c0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800c0c4:	2500      	movne	r5, #0
 800c0c6:	4293      	cmp	r3, r2
 800c0c8:	bfc4      	itt	gt
 800c0ca:	1a9b      	subgt	r3, r3, r2
 800c0cc:	18ed      	addgt	r5, r5, r3
 800c0ce:	2600      	movs	r6, #0
 800c0d0:	341a      	adds	r4, #26
 800c0d2:	42b5      	cmp	r5, r6
 800c0d4:	d11a      	bne.n	800c10c <_printf_common+0xc8>
 800c0d6:	2000      	movs	r0, #0
 800c0d8:	e008      	b.n	800c0ec <_printf_common+0xa8>
 800c0da:	2301      	movs	r3, #1
 800c0dc:	4652      	mov	r2, sl
 800c0de:	4649      	mov	r1, r9
 800c0e0:	4638      	mov	r0, r7
 800c0e2:	47c0      	blx	r8
 800c0e4:	3001      	adds	r0, #1
 800c0e6:	d103      	bne.n	800c0f0 <_printf_common+0xac>
 800c0e8:	f04f 30ff 	mov.w	r0, #4294967295
 800c0ec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c0f0:	3501      	adds	r5, #1
 800c0f2:	e7c6      	b.n	800c082 <_printf_common+0x3e>
 800c0f4:	18e1      	adds	r1, r4, r3
 800c0f6:	1c5a      	adds	r2, r3, #1
 800c0f8:	2030      	movs	r0, #48	; 0x30
 800c0fa:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800c0fe:	4422      	add	r2, r4
 800c100:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800c104:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800c108:	3302      	adds	r3, #2
 800c10a:	e7c7      	b.n	800c09c <_printf_common+0x58>
 800c10c:	2301      	movs	r3, #1
 800c10e:	4622      	mov	r2, r4
 800c110:	4649      	mov	r1, r9
 800c112:	4638      	mov	r0, r7
 800c114:	47c0      	blx	r8
 800c116:	3001      	adds	r0, #1
 800c118:	d0e6      	beq.n	800c0e8 <_printf_common+0xa4>
 800c11a:	3601      	adds	r6, #1
 800c11c:	e7d9      	b.n	800c0d2 <_printf_common+0x8e>
	...

0800c120 <_printf_i>:
 800c120:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800c124:	7e0f      	ldrb	r7, [r1, #24]
 800c126:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800c128:	2f78      	cmp	r7, #120	; 0x78
 800c12a:	4691      	mov	r9, r2
 800c12c:	4680      	mov	r8, r0
 800c12e:	460c      	mov	r4, r1
 800c130:	469a      	mov	sl, r3
 800c132:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800c136:	d807      	bhi.n	800c148 <_printf_i+0x28>
 800c138:	2f62      	cmp	r7, #98	; 0x62
 800c13a:	d80a      	bhi.n	800c152 <_printf_i+0x32>
 800c13c:	2f00      	cmp	r7, #0
 800c13e:	f000 80d8 	beq.w	800c2f2 <_printf_i+0x1d2>
 800c142:	2f58      	cmp	r7, #88	; 0x58
 800c144:	f000 80a3 	beq.w	800c28e <_printf_i+0x16e>
 800c148:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800c14c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800c150:	e03a      	b.n	800c1c8 <_printf_i+0xa8>
 800c152:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800c156:	2b15      	cmp	r3, #21
 800c158:	d8f6      	bhi.n	800c148 <_printf_i+0x28>
 800c15a:	a101      	add	r1, pc, #4	; (adr r1, 800c160 <_printf_i+0x40>)
 800c15c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800c160:	0800c1b9 	.word	0x0800c1b9
 800c164:	0800c1cd 	.word	0x0800c1cd
 800c168:	0800c149 	.word	0x0800c149
 800c16c:	0800c149 	.word	0x0800c149
 800c170:	0800c149 	.word	0x0800c149
 800c174:	0800c149 	.word	0x0800c149
 800c178:	0800c1cd 	.word	0x0800c1cd
 800c17c:	0800c149 	.word	0x0800c149
 800c180:	0800c149 	.word	0x0800c149
 800c184:	0800c149 	.word	0x0800c149
 800c188:	0800c149 	.word	0x0800c149
 800c18c:	0800c2d9 	.word	0x0800c2d9
 800c190:	0800c1fd 	.word	0x0800c1fd
 800c194:	0800c2bb 	.word	0x0800c2bb
 800c198:	0800c149 	.word	0x0800c149
 800c19c:	0800c149 	.word	0x0800c149
 800c1a0:	0800c2fb 	.word	0x0800c2fb
 800c1a4:	0800c149 	.word	0x0800c149
 800c1a8:	0800c1fd 	.word	0x0800c1fd
 800c1ac:	0800c149 	.word	0x0800c149
 800c1b0:	0800c149 	.word	0x0800c149
 800c1b4:	0800c2c3 	.word	0x0800c2c3
 800c1b8:	682b      	ldr	r3, [r5, #0]
 800c1ba:	1d1a      	adds	r2, r3, #4
 800c1bc:	681b      	ldr	r3, [r3, #0]
 800c1be:	602a      	str	r2, [r5, #0]
 800c1c0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800c1c4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800c1c8:	2301      	movs	r3, #1
 800c1ca:	e0a3      	b.n	800c314 <_printf_i+0x1f4>
 800c1cc:	6820      	ldr	r0, [r4, #0]
 800c1ce:	6829      	ldr	r1, [r5, #0]
 800c1d0:	0606      	lsls	r6, r0, #24
 800c1d2:	f101 0304 	add.w	r3, r1, #4
 800c1d6:	d50a      	bpl.n	800c1ee <_printf_i+0xce>
 800c1d8:	680e      	ldr	r6, [r1, #0]
 800c1da:	602b      	str	r3, [r5, #0]
 800c1dc:	2e00      	cmp	r6, #0
 800c1de:	da03      	bge.n	800c1e8 <_printf_i+0xc8>
 800c1e0:	232d      	movs	r3, #45	; 0x2d
 800c1e2:	4276      	negs	r6, r6
 800c1e4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800c1e8:	485e      	ldr	r0, [pc, #376]	; (800c364 <_printf_i+0x244>)
 800c1ea:	230a      	movs	r3, #10
 800c1ec:	e019      	b.n	800c222 <_printf_i+0x102>
 800c1ee:	680e      	ldr	r6, [r1, #0]
 800c1f0:	602b      	str	r3, [r5, #0]
 800c1f2:	f010 0f40 	tst.w	r0, #64	; 0x40
 800c1f6:	bf18      	it	ne
 800c1f8:	b236      	sxthne	r6, r6
 800c1fa:	e7ef      	b.n	800c1dc <_printf_i+0xbc>
 800c1fc:	682b      	ldr	r3, [r5, #0]
 800c1fe:	6820      	ldr	r0, [r4, #0]
 800c200:	1d19      	adds	r1, r3, #4
 800c202:	6029      	str	r1, [r5, #0]
 800c204:	0601      	lsls	r1, r0, #24
 800c206:	d501      	bpl.n	800c20c <_printf_i+0xec>
 800c208:	681e      	ldr	r6, [r3, #0]
 800c20a:	e002      	b.n	800c212 <_printf_i+0xf2>
 800c20c:	0646      	lsls	r6, r0, #25
 800c20e:	d5fb      	bpl.n	800c208 <_printf_i+0xe8>
 800c210:	881e      	ldrh	r6, [r3, #0]
 800c212:	4854      	ldr	r0, [pc, #336]	; (800c364 <_printf_i+0x244>)
 800c214:	2f6f      	cmp	r7, #111	; 0x6f
 800c216:	bf0c      	ite	eq
 800c218:	2308      	moveq	r3, #8
 800c21a:	230a      	movne	r3, #10
 800c21c:	2100      	movs	r1, #0
 800c21e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800c222:	6865      	ldr	r5, [r4, #4]
 800c224:	60a5      	str	r5, [r4, #8]
 800c226:	2d00      	cmp	r5, #0
 800c228:	bfa2      	ittt	ge
 800c22a:	6821      	ldrge	r1, [r4, #0]
 800c22c:	f021 0104 	bicge.w	r1, r1, #4
 800c230:	6021      	strge	r1, [r4, #0]
 800c232:	b90e      	cbnz	r6, 800c238 <_printf_i+0x118>
 800c234:	2d00      	cmp	r5, #0
 800c236:	d04d      	beq.n	800c2d4 <_printf_i+0x1b4>
 800c238:	4615      	mov	r5, r2
 800c23a:	fbb6 f1f3 	udiv	r1, r6, r3
 800c23e:	fb03 6711 	mls	r7, r3, r1, r6
 800c242:	5dc7      	ldrb	r7, [r0, r7]
 800c244:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800c248:	4637      	mov	r7, r6
 800c24a:	42bb      	cmp	r3, r7
 800c24c:	460e      	mov	r6, r1
 800c24e:	d9f4      	bls.n	800c23a <_printf_i+0x11a>
 800c250:	2b08      	cmp	r3, #8
 800c252:	d10b      	bne.n	800c26c <_printf_i+0x14c>
 800c254:	6823      	ldr	r3, [r4, #0]
 800c256:	07de      	lsls	r6, r3, #31
 800c258:	d508      	bpl.n	800c26c <_printf_i+0x14c>
 800c25a:	6923      	ldr	r3, [r4, #16]
 800c25c:	6861      	ldr	r1, [r4, #4]
 800c25e:	4299      	cmp	r1, r3
 800c260:	bfde      	ittt	le
 800c262:	2330      	movle	r3, #48	; 0x30
 800c264:	f805 3c01 	strble.w	r3, [r5, #-1]
 800c268:	f105 35ff 	addle.w	r5, r5, #4294967295
 800c26c:	1b52      	subs	r2, r2, r5
 800c26e:	6122      	str	r2, [r4, #16]
 800c270:	f8cd a000 	str.w	sl, [sp]
 800c274:	464b      	mov	r3, r9
 800c276:	aa03      	add	r2, sp, #12
 800c278:	4621      	mov	r1, r4
 800c27a:	4640      	mov	r0, r8
 800c27c:	f7ff fee2 	bl	800c044 <_printf_common>
 800c280:	3001      	adds	r0, #1
 800c282:	d14c      	bne.n	800c31e <_printf_i+0x1fe>
 800c284:	f04f 30ff 	mov.w	r0, #4294967295
 800c288:	b004      	add	sp, #16
 800c28a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c28e:	4835      	ldr	r0, [pc, #212]	; (800c364 <_printf_i+0x244>)
 800c290:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800c294:	6829      	ldr	r1, [r5, #0]
 800c296:	6823      	ldr	r3, [r4, #0]
 800c298:	f851 6b04 	ldr.w	r6, [r1], #4
 800c29c:	6029      	str	r1, [r5, #0]
 800c29e:	061d      	lsls	r5, r3, #24
 800c2a0:	d514      	bpl.n	800c2cc <_printf_i+0x1ac>
 800c2a2:	07df      	lsls	r7, r3, #31
 800c2a4:	bf44      	itt	mi
 800c2a6:	f043 0320 	orrmi.w	r3, r3, #32
 800c2aa:	6023      	strmi	r3, [r4, #0]
 800c2ac:	b91e      	cbnz	r6, 800c2b6 <_printf_i+0x196>
 800c2ae:	6823      	ldr	r3, [r4, #0]
 800c2b0:	f023 0320 	bic.w	r3, r3, #32
 800c2b4:	6023      	str	r3, [r4, #0]
 800c2b6:	2310      	movs	r3, #16
 800c2b8:	e7b0      	b.n	800c21c <_printf_i+0xfc>
 800c2ba:	6823      	ldr	r3, [r4, #0]
 800c2bc:	f043 0320 	orr.w	r3, r3, #32
 800c2c0:	6023      	str	r3, [r4, #0]
 800c2c2:	2378      	movs	r3, #120	; 0x78
 800c2c4:	4828      	ldr	r0, [pc, #160]	; (800c368 <_printf_i+0x248>)
 800c2c6:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800c2ca:	e7e3      	b.n	800c294 <_printf_i+0x174>
 800c2cc:	0659      	lsls	r1, r3, #25
 800c2ce:	bf48      	it	mi
 800c2d0:	b2b6      	uxthmi	r6, r6
 800c2d2:	e7e6      	b.n	800c2a2 <_printf_i+0x182>
 800c2d4:	4615      	mov	r5, r2
 800c2d6:	e7bb      	b.n	800c250 <_printf_i+0x130>
 800c2d8:	682b      	ldr	r3, [r5, #0]
 800c2da:	6826      	ldr	r6, [r4, #0]
 800c2dc:	6961      	ldr	r1, [r4, #20]
 800c2de:	1d18      	adds	r0, r3, #4
 800c2e0:	6028      	str	r0, [r5, #0]
 800c2e2:	0635      	lsls	r5, r6, #24
 800c2e4:	681b      	ldr	r3, [r3, #0]
 800c2e6:	d501      	bpl.n	800c2ec <_printf_i+0x1cc>
 800c2e8:	6019      	str	r1, [r3, #0]
 800c2ea:	e002      	b.n	800c2f2 <_printf_i+0x1d2>
 800c2ec:	0670      	lsls	r0, r6, #25
 800c2ee:	d5fb      	bpl.n	800c2e8 <_printf_i+0x1c8>
 800c2f0:	8019      	strh	r1, [r3, #0]
 800c2f2:	2300      	movs	r3, #0
 800c2f4:	6123      	str	r3, [r4, #16]
 800c2f6:	4615      	mov	r5, r2
 800c2f8:	e7ba      	b.n	800c270 <_printf_i+0x150>
 800c2fa:	682b      	ldr	r3, [r5, #0]
 800c2fc:	1d1a      	adds	r2, r3, #4
 800c2fe:	602a      	str	r2, [r5, #0]
 800c300:	681d      	ldr	r5, [r3, #0]
 800c302:	6862      	ldr	r2, [r4, #4]
 800c304:	2100      	movs	r1, #0
 800c306:	4628      	mov	r0, r5
 800c308:	f7f3 ff8a 	bl	8000220 <memchr>
 800c30c:	b108      	cbz	r0, 800c312 <_printf_i+0x1f2>
 800c30e:	1b40      	subs	r0, r0, r5
 800c310:	6060      	str	r0, [r4, #4]
 800c312:	6863      	ldr	r3, [r4, #4]
 800c314:	6123      	str	r3, [r4, #16]
 800c316:	2300      	movs	r3, #0
 800c318:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800c31c:	e7a8      	b.n	800c270 <_printf_i+0x150>
 800c31e:	6923      	ldr	r3, [r4, #16]
 800c320:	462a      	mov	r2, r5
 800c322:	4649      	mov	r1, r9
 800c324:	4640      	mov	r0, r8
 800c326:	47d0      	blx	sl
 800c328:	3001      	adds	r0, #1
 800c32a:	d0ab      	beq.n	800c284 <_printf_i+0x164>
 800c32c:	6823      	ldr	r3, [r4, #0]
 800c32e:	079b      	lsls	r3, r3, #30
 800c330:	d413      	bmi.n	800c35a <_printf_i+0x23a>
 800c332:	68e0      	ldr	r0, [r4, #12]
 800c334:	9b03      	ldr	r3, [sp, #12]
 800c336:	4298      	cmp	r0, r3
 800c338:	bfb8      	it	lt
 800c33a:	4618      	movlt	r0, r3
 800c33c:	e7a4      	b.n	800c288 <_printf_i+0x168>
 800c33e:	2301      	movs	r3, #1
 800c340:	4632      	mov	r2, r6
 800c342:	4649      	mov	r1, r9
 800c344:	4640      	mov	r0, r8
 800c346:	47d0      	blx	sl
 800c348:	3001      	adds	r0, #1
 800c34a:	d09b      	beq.n	800c284 <_printf_i+0x164>
 800c34c:	3501      	adds	r5, #1
 800c34e:	68e3      	ldr	r3, [r4, #12]
 800c350:	9903      	ldr	r1, [sp, #12]
 800c352:	1a5b      	subs	r3, r3, r1
 800c354:	42ab      	cmp	r3, r5
 800c356:	dcf2      	bgt.n	800c33e <_printf_i+0x21e>
 800c358:	e7eb      	b.n	800c332 <_printf_i+0x212>
 800c35a:	2500      	movs	r5, #0
 800c35c:	f104 0619 	add.w	r6, r4, #25
 800c360:	e7f5      	b.n	800c34e <_printf_i+0x22e>
 800c362:	bf00      	nop
 800c364:	08012869 	.word	0x08012869
 800c368:	0801287a 	.word	0x0801287a

0800c36c <_sbrk_r>:
 800c36c:	b538      	push	{r3, r4, r5, lr}
 800c36e:	4d06      	ldr	r5, [pc, #24]	; (800c388 <_sbrk_r+0x1c>)
 800c370:	2300      	movs	r3, #0
 800c372:	4604      	mov	r4, r0
 800c374:	4608      	mov	r0, r1
 800c376:	602b      	str	r3, [r5, #0]
 800c378:	f7f4 fd62 	bl	8000e40 <_sbrk>
 800c37c:	1c43      	adds	r3, r0, #1
 800c37e:	d102      	bne.n	800c386 <_sbrk_r+0x1a>
 800c380:	682b      	ldr	r3, [r5, #0]
 800c382:	b103      	cbz	r3, 800c386 <_sbrk_r+0x1a>
 800c384:	6023      	str	r3, [r4, #0]
 800c386:	bd38      	pop	{r3, r4, r5, pc}
 800c388:	2000afc0 	.word	0x2000afc0

0800c38c <__sread>:
 800c38c:	b510      	push	{r4, lr}
 800c38e:	460c      	mov	r4, r1
 800c390:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c394:	f000 fa9e 	bl	800c8d4 <_read_r>
 800c398:	2800      	cmp	r0, #0
 800c39a:	bfab      	itete	ge
 800c39c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800c39e:	89a3      	ldrhlt	r3, [r4, #12]
 800c3a0:	181b      	addge	r3, r3, r0
 800c3a2:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800c3a6:	bfac      	ite	ge
 800c3a8:	6563      	strge	r3, [r4, #84]	; 0x54
 800c3aa:	81a3      	strhlt	r3, [r4, #12]
 800c3ac:	bd10      	pop	{r4, pc}

0800c3ae <__swrite>:
 800c3ae:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c3b2:	461f      	mov	r7, r3
 800c3b4:	898b      	ldrh	r3, [r1, #12]
 800c3b6:	05db      	lsls	r3, r3, #23
 800c3b8:	4605      	mov	r5, r0
 800c3ba:	460c      	mov	r4, r1
 800c3bc:	4616      	mov	r6, r2
 800c3be:	d505      	bpl.n	800c3cc <__swrite+0x1e>
 800c3c0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c3c4:	2302      	movs	r3, #2
 800c3c6:	2200      	movs	r2, #0
 800c3c8:	f000 f9d0 	bl	800c76c <_lseek_r>
 800c3cc:	89a3      	ldrh	r3, [r4, #12]
 800c3ce:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800c3d2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800c3d6:	81a3      	strh	r3, [r4, #12]
 800c3d8:	4632      	mov	r2, r6
 800c3da:	463b      	mov	r3, r7
 800c3dc:	4628      	mov	r0, r5
 800c3de:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800c3e2:	f000 b869 	b.w	800c4b8 <_write_r>

0800c3e6 <__sseek>:
 800c3e6:	b510      	push	{r4, lr}
 800c3e8:	460c      	mov	r4, r1
 800c3ea:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c3ee:	f000 f9bd 	bl	800c76c <_lseek_r>
 800c3f2:	1c43      	adds	r3, r0, #1
 800c3f4:	89a3      	ldrh	r3, [r4, #12]
 800c3f6:	bf15      	itete	ne
 800c3f8:	6560      	strne	r0, [r4, #84]	; 0x54
 800c3fa:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800c3fe:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800c402:	81a3      	strheq	r3, [r4, #12]
 800c404:	bf18      	it	ne
 800c406:	81a3      	strhne	r3, [r4, #12]
 800c408:	bd10      	pop	{r4, pc}

0800c40a <__sclose>:
 800c40a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c40e:	f000 b8db 	b.w	800c5c8 <_close_r>
	...

0800c414 <__swbuf_r>:
 800c414:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c416:	460e      	mov	r6, r1
 800c418:	4614      	mov	r4, r2
 800c41a:	4605      	mov	r5, r0
 800c41c:	b118      	cbz	r0, 800c426 <__swbuf_r+0x12>
 800c41e:	6983      	ldr	r3, [r0, #24]
 800c420:	b90b      	cbnz	r3, 800c426 <__swbuf_r+0x12>
 800c422:	f7ff f9bf 	bl	800b7a4 <__sinit>
 800c426:	4b21      	ldr	r3, [pc, #132]	; (800c4ac <__swbuf_r+0x98>)
 800c428:	429c      	cmp	r4, r3
 800c42a:	d12b      	bne.n	800c484 <__swbuf_r+0x70>
 800c42c:	686c      	ldr	r4, [r5, #4]
 800c42e:	69a3      	ldr	r3, [r4, #24]
 800c430:	60a3      	str	r3, [r4, #8]
 800c432:	89a3      	ldrh	r3, [r4, #12]
 800c434:	071a      	lsls	r2, r3, #28
 800c436:	d52f      	bpl.n	800c498 <__swbuf_r+0x84>
 800c438:	6923      	ldr	r3, [r4, #16]
 800c43a:	b36b      	cbz	r3, 800c498 <__swbuf_r+0x84>
 800c43c:	6923      	ldr	r3, [r4, #16]
 800c43e:	6820      	ldr	r0, [r4, #0]
 800c440:	1ac0      	subs	r0, r0, r3
 800c442:	6963      	ldr	r3, [r4, #20]
 800c444:	b2f6      	uxtb	r6, r6
 800c446:	4283      	cmp	r3, r0
 800c448:	4637      	mov	r7, r6
 800c44a:	dc04      	bgt.n	800c456 <__swbuf_r+0x42>
 800c44c:	4621      	mov	r1, r4
 800c44e:	4628      	mov	r0, r5
 800c450:	f000 f950 	bl	800c6f4 <_fflush_r>
 800c454:	bb30      	cbnz	r0, 800c4a4 <__swbuf_r+0x90>
 800c456:	68a3      	ldr	r3, [r4, #8]
 800c458:	3b01      	subs	r3, #1
 800c45a:	60a3      	str	r3, [r4, #8]
 800c45c:	6823      	ldr	r3, [r4, #0]
 800c45e:	1c5a      	adds	r2, r3, #1
 800c460:	6022      	str	r2, [r4, #0]
 800c462:	701e      	strb	r6, [r3, #0]
 800c464:	6963      	ldr	r3, [r4, #20]
 800c466:	3001      	adds	r0, #1
 800c468:	4283      	cmp	r3, r0
 800c46a:	d004      	beq.n	800c476 <__swbuf_r+0x62>
 800c46c:	89a3      	ldrh	r3, [r4, #12]
 800c46e:	07db      	lsls	r3, r3, #31
 800c470:	d506      	bpl.n	800c480 <__swbuf_r+0x6c>
 800c472:	2e0a      	cmp	r6, #10
 800c474:	d104      	bne.n	800c480 <__swbuf_r+0x6c>
 800c476:	4621      	mov	r1, r4
 800c478:	4628      	mov	r0, r5
 800c47a:	f000 f93b 	bl	800c6f4 <_fflush_r>
 800c47e:	b988      	cbnz	r0, 800c4a4 <__swbuf_r+0x90>
 800c480:	4638      	mov	r0, r7
 800c482:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c484:	4b0a      	ldr	r3, [pc, #40]	; (800c4b0 <__swbuf_r+0x9c>)
 800c486:	429c      	cmp	r4, r3
 800c488:	d101      	bne.n	800c48e <__swbuf_r+0x7a>
 800c48a:	68ac      	ldr	r4, [r5, #8]
 800c48c:	e7cf      	b.n	800c42e <__swbuf_r+0x1a>
 800c48e:	4b09      	ldr	r3, [pc, #36]	; (800c4b4 <__swbuf_r+0xa0>)
 800c490:	429c      	cmp	r4, r3
 800c492:	bf08      	it	eq
 800c494:	68ec      	ldreq	r4, [r5, #12]
 800c496:	e7ca      	b.n	800c42e <__swbuf_r+0x1a>
 800c498:	4621      	mov	r1, r4
 800c49a:	4628      	mov	r0, r5
 800c49c:	f000 f81e 	bl	800c4dc <__swsetup_r>
 800c4a0:	2800      	cmp	r0, #0
 800c4a2:	d0cb      	beq.n	800c43c <__swbuf_r+0x28>
 800c4a4:	f04f 37ff 	mov.w	r7, #4294967295
 800c4a8:	e7ea      	b.n	800c480 <__swbuf_r+0x6c>
 800c4aa:	bf00      	nop
 800c4ac:	08012818 	.word	0x08012818
 800c4b0:	08012838 	.word	0x08012838
 800c4b4:	080127f8 	.word	0x080127f8

0800c4b8 <_write_r>:
 800c4b8:	b538      	push	{r3, r4, r5, lr}
 800c4ba:	4d07      	ldr	r5, [pc, #28]	; (800c4d8 <_write_r+0x20>)
 800c4bc:	4604      	mov	r4, r0
 800c4be:	4608      	mov	r0, r1
 800c4c0:	4611      	mov	r1, r2
 800c4c2:	2200      	movs	r2, #0
 800c4c4:	602a      	str	r2, [r5, #0]
 800c4c6:	461a      	mov	r2, r3
 800c4c8:	f7f4 fca1 	bl	8000e0e <_write>
 800c4cc:	1c43      	adds	r3, r0, #1
 800c4ce:	d102      	bne.n	800c4d6 <_write_r+0x1e>
 800c4d0:	682b      	ldr	r3, [r5, #0]
 800c4d2:	b103      	cbz	r3, 800c4d6 <_write_r+0x1e>
 800c4d4:	6023      	str	r3, [r4, #0]
 800c4d6:	bd38      	pop	{r3, r4, r5, pc}
 800c4d8:	2000afc0 	.word	0x2000afc0

0800c4dc <__swsetup_r>:
 800c4dc:	4b32      	ldr	r3, [pc, #200]	; (800c5a8 <__swsetup_r+0xcc>)
 800c4de:	b570      	push	{r4, r5, r6, lr}
 800c4e0:	681d      	ldr	r5, [r3, #0]
 800c4e2:	4606      	mov	r6, r0
 800c4e4:	460c      	mov	r4, r1
 800c4e6:	b125      	cbz	r5, 800c4f2 <__swsetup_r+0x16>
 800c4e8:	69ab      	ldr	r3, [r5, #24]
 800c4ea:	b913      	cbnz	r3, 800c4f2 <__swsetup_r+0x16>
 800c4ec:	4628      	mov	r0, r5
 800c4ee:	f7ff f959 	bl	800b7a4 <__sinit>
 800c4f2:	4b2e      	ldr	r3, [pc, #184]	; (800c5ac <__swsetup_r+0xd0>)
 800c4f4:	429c      	cmp	r4, r3
 800c4f6:	d10f      	bne.n	800c518 <__swsetup_r+0x3c>
 800c4f8:	686c      	ldr	r4, [r5, #4]
 800c4fa:	89a3      	ldrh	r3, [r4, #12]
 800c4fc:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800c500:	0719      	lsls	r1, r3, #28
 800c502:	d42c      	bmi.n	800c55e <__swsetup_r+0x82>
 800c504:	06dd      	lsls	r5, r3, #27
 800c506:	d411      	bmi.n	800c52c <__swsetup_r+0x50>
 800c508:	2309      	movs	r3, #9
 800c50a:	6033      	str	r3, [r6, #0]
 800c50c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800c510:	81a3      	strh	r3, [r4, #12]
 800c512:	f04f 30ff 	mov.w	r0, #4294967295
 800c516:	e03e      	b.n	800c596 <__swsetup_r+0xba>
 800c518:	4b25      	ldr	r3, [pc, #148]	; (800c5b0 <__swsetup_r+0xd4>)
 800c51a:	429c      	cmp	r4, r3
 800c51c:	d101      	bne.n	800c522 <__swsetup_r+0x46>
 800c51e:	68ac      	ldr	r4, [r5, #8]
 800c520:	e7eb      	b.n	800c4fa <__swsetup_r+0x1e>
 800c522:	4b24      	ldr	r3, [pc, #144]	; (800c5b4 <__swsetup_r+0xd8>)
 800c524:	429c      	cmp	r4, r3
 800c526:	bf08      	it	eq
 800c528:	68ec      	ldreq	r4, [r5, #12]
 800c52a:	e7e6      	b.n	800c4fa <__swsetup_r+0x1e>
 800c52c:	0758      	lsls	r0, r3, #29
 800c52e:	d512      	bpl.n	800c556 <__swsetup_r+0x7a>
 800c530:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800c532:	b141      	cbz	r1, 800c546 <__swsetup_r+0x6a>
 800c534:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800c538:	4299      	cmp	r1, r3
 800c53a:	d002      	beq.n	800c542 <__swsetup_r+0x66>
 800c53c:	4630      	mov	r0, r6
 800c53e:	f7ff f9eb 	bl	800b918 <_free_r>
 800c542:	2300      	movs	r3, #0
 800c544:	6363      	str	r3, [r4, #52]	; 0x34
 800c546:	89a3      	ldrh	r3, [r4, #12]
 800c548:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800c54c:	81a3      	strh	r3, [r4, #12]
 800c54e:	2300      	movs	r3, #0
 800c550:	6063      	str	r3, [r4, #4]
 800c552:	6923      	ldr	r3, [r4, #16]
 800c554:	6023      	str	r3, [r4, #0]
 800c556:	89a3      	ldrh	r3, [r4, #12]
 800c558:	f043 0308 	orr.w	r3, r3, #8
 800c55c:	81a3      	strh	r3, [r4, #12]
 800c55e:	6923      	ldr	r3, [r4, #16]
 800c560:	b94b      	cbnz	r3, 800c576 <__swsetup_r+0x9a>
 800c562:	89a3      	ldrh	r3, [r4, #12]
 800c564:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800c568:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800c56c:	d003      	beq.n	800c576 <__swsetup_r+0x9a>
 800c56e:	4621      	mov	r1, r4
 800c570:	4630      	mov	r0, r6
 800c572:	f000 f933 	bl	800c7dc <__smakebuf_r>
 800c576:	89a0      	ldrh	r0, [r4, #12]
 800c578:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800c57c:	f010 0301 	ands.w	r3, r0, #1
 800c580:	d00a      	beq.n	800c598 <__swsetup_r+0xbc>
 800c582:	2300      	movs	r3, #0
 800c584:	60a3      	str	r3, [r4, #8]
 800c586:	6963      	ldr	r3, [r4, #20]
 800c588:	425b      	negs	r3, r3
 800c58a:	61a3      	str	r3, [r4, #24]
 800c58c:	6923      	ldr	r3, [r4, #16]
 800c58e:	b943      	cbnz	r3, 800c5a2 <__swsetup_r+0xc6>
 800c590:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800c594:	d1ba      	bne.n	800c50c <__swsetup_r+0x30>
 800c596:	bd70      	pop	{r4, r5, r6, pc}
 800c598:	0781      	lsls	r1, r0, #30
 800c59a:	bf58      	it	pl
 800c59c:	6963      	ldrpl	r3, [r4, #20]
 800c59e:	60a3      	str	r3, [r4, #8]
 800c5a0:	e7f4      	b.n	800c58c <__swsetup_r+0xb0>
 800c5a2:	2000      	movs	r0, #0
 800c5a4:	e7f7      	b.n	800c596 <__swsetup_r+0xba>
 800c5a6:	bf00      	nop
 800c5a8:	20000038 	.word	0x20000038
 800c5ac:	08012818 	.word	0x08012818
 800c5b0:	08012838 	.word	0x08012838
 800c5b4:	080127f8 	.word	0x080127f8

0800c5b8 <abort>:
 800c5b8:	b508      	push	{r3, lr}
 800c5ba:	2006      	movs	r0, #6
 800c5bc:	f000 f9c4 	bl	800c948 <raise>
 800c5c0:	2001      	movs	r0, #1
 800c5c2:	f7f4 fc11 	bl	8000de8 <_exit>
	...

0800c5c8 <_close_r>:
 800c5c8:	b538      	push	{r3, r4, r5, lr}
 800c5ca:	4d06      	ldr	r5, [pc, #24]	; (800c5e4 <_close_r+0x1c>)
 800c5cc:	2300      	movs	r3, #0
 800c5ce:	4604      	mov	r4, r0
 800c5d0:	4608      	mov	r0, r1
 800c5d2:	602b      	str	r3, [r5, #0]
 800c5d4:	f7f4 fc28 	bl	8000e28 <_close>
 800c5d8:	1c43      	adds	r3, r0, #1
 800c5da:	d102      	bne.n	800c5e2 <_close_r+0x1a>
 800c5dc:	682b      	ldr	r3, [r5, #0]
 800c5de:	b103      	cbz	r3, 800c5e2 <_close_r+0x1a>
 800c5e0:	6023      	str	r3, [r4, #0]
 800c5e2:	bd38      	pop	{r3, r4, r5, pc}
 800c5e4:	2000afc0 	.word	0x2000afc0

0800c5e8 <__sflush_r>:
 800c5e8:	898a      	ldrh	r2, [r1, #12]
 800c5ea:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c5ee:	4605      	mov	r5, r0
 800c5f0:	0710      	lsls	r0, r2, #28
 800c5f2:	460c      	mov	r4, r1
 800c5f4:	d458      	bmi.n	800c6a8 <__sflush_r+0xc0>
 800c5f6:	684b      	ldr	r3, [r1, #4]
 800c5f8:	2b00      	cmp	r3, #0
 800c5fa:	dc05      	bgt.n	800c608 <__sflush_r+0x20>
 800c5fc:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800c5fe:	2b00      	cmp	r3, #0
 800c600:	dc02      	bgt.n	800c608 <__sflush_r+0x20>
 800c602:	2000      	movs	r0, #0
 800c604:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c608:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800c60a:	2e00      	cmp	r6, #0
 800c60c:	d0f9      	beq.n	800c602 <__sflush_r+0x1a>
 800c60e:	2300      	movs	r3, #0
 800c610:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800c614:	682f      	ldr	r7, [r5, #0]
 800c616:	602b      	str	r3, [r5, #0]
 800c618:	d032      	beq.n	800c680 <__sflush_r+0x98>
 800c61a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800c61c:	89a3      	ldrh	r3, [r4, #12]
 800c61e:	075a      	lsls	r2, r3, #29
 800c620:	d505      	bpl.n	800c62e <__sflush_r+0x46>
 800c622:	6863      	ldr	r3, [r4, #4]
 800c624:	1ac0      	subs	r0, r0, r3
 800c626:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800c628:	b10b      	cbz	r3, 800c62e <__sflush_r+0x46>
 800c62a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800c62c:	1ac0      	subs	r0, r0, r3
 800c62e:	2300      	movs	r3, #0
 800c630:	4602      	mov	r2, r0
 800c632:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800c634:	6a21      	ldr	r1, [r4, #32]
 800c636:	4628      	mov	r0, r5
 800c638:	47b0      	blx	r6
 800c63a:	1c43      	adds	r3, r0, #1
 800c63c:	89a3      	ldrh	r3, [r4, #12]
 800c63e:	d106      	bne.n	800c64e <__sflush_r+0x66>
 800c640:	6829      	ldr	r1, [r5, #0]
 800c642:	291d      	cmp	r1, #29
 800c644:	d82c      	bhi.n	800c6a0 <__sflush_r+0xb8>
 800c646:	4a2a      	ldr	r2, [pc, #168]	; (800c6f0 <__sflush_r+0x108>)
 800c648:	40ca      	lsrs	r2, r1
 800c64a:	07d6      	lsls	r6, r2, #31
 800c64c:	d528      	bpl.n	800c6a0 <__sflush_r+0xb8>
 800c64e:	2200      	movs	r2, #0
 800c650:	6062      	str	r2, [r4, #4]
 800c652:	04d9      	lsls	r1, r3, #19
 800c654:	6922      	ldr	r2, [r4, #16]
 800c656:	6022      	str	r2, [r4, #0]
 800c658:	d504      	bpl.n	800c664 <__sflush_r+0x7c>
 800c65a:	1c42      	adds	r2, r0, #1
 800c65c:	d101      	bne.n	800c662 <__sflush_r+0x7a>
 800c65e:	682b      	ldr	r3, [r5, #0]
 800c660:	b903      	cbnz	r3, 800c664 <__sflush_r+0x7c>
 800c662:	6560      	str	r0, [r4, #84]	; 0x54
 800c664:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800c666:	602f      	str	r7, [r5, #0]
 800c668:	2900      	cmp	r1, #0
 800c66a:	d0ca      	beq.n	800c602 <__sflush_r+0x1a>
 800c66c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800c670:	4299      	cmp	r1, r3
 800c672:	d002      	beq.n	800c67a <__sflush_r+0x92>
 800c674:	4628      	mov	r0, r5
 800c676:	f7ff f94f 	bl	800b918 <_free_r>
 800c67a:	2000      	movs	r0, #0
 800c67c:	6360      	str	r0, [r4, #52]	; 0x34
 800c67e:	e7c1      	b.n	800c604 <__sflush_r+0x1c>
 800c680:	6a21      	ldr	r1, [r4, #32]
 800c682:	2301      	movs	r3, #1
 800c684:	4628      	mov	r0, r5
 800c686:	47b0      	blx	r6
 800c688:	1c41      	adds	r1, r0, #1
 800c68a:	d1c7      	bne.n	800c61c <__sflush_r+0x34>
 800c68c:	682b      	ldr	r3, [r5, #0]
 800c68e:	2b00      	cmp	r3, #0
 800c690:	d0c4      	beq.n	800c61c <__sflush_r+0x34>
 800c692:	2b1d      	cmp	r3, #29
 800c694:	d001      	beq.n	800c69a <__sflush_r+0xb2>
 800c696:	2b16      	cmp	r3, #22
 800c698:	d101      	bne.n	800c69e <__sflush_r+0xb6>
 800c69a:	602f      	str	r7, [r5, #0]
 800c69c:	e7b1      	b.n	800c602 <__sflush_r+0x1a>
 800c69e:	89a3      	ldrh	r3, [r4, #12]
 800c6a0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c6a4:	81a3      	strh	r3, [r4, #12]
 800c6a6:	e7ad      	b.n	800c604 <__sflush_r+0x1c>
 800c6a8:	690f      	ldr	r7, [r1, #16]
 800c6aa:	2f00      	cmp	r7, #0
 800c6ac:	d0a9      	beq.n	800c602 <__sflush_r+0x1a>
 800c6ae:	0793      	lsls	r3, r2, #30
 800c6b0:	680e      	ldr	r6, [r1, #0]
 800c6b2:	bf08      	it	eq
 800c6b4:	694b      	ldreq	r3, [r1, #20]
 800c6b6:	600f      	str	r7, [r1, #0]
 800c6b8:	bf18      	it	ne
 800c6ba:	2300      	movne	r3, #0
 800c6bc:	eba6 0807 	sub.w	r8, r6, r7
 800c6c0:	608b      	str	r3, [r1, #8]
 800c6c2:	f1b8 0f00 	cmp.w	r8, #0
 800c6c6:	dd9c      	ble.n	800c602 <__sflush_r+0x1a>
 800c6c8:	6a21      	ldr	r1, [r4, #32]
 800c6ca:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800c6cc:	4643      	mov	r3, r8
 800c6ce:	463a      	mov	r2, r7
 800c6d0:	4628      	mov	r0, r5
 800c6d2:	47b0      	blx	r6
 800c6d4:	2800      	cmp	r0, #0
 800c6d6:	dc06      	bgt.n	800c6e6 <__sflush_r+0xfe>
 800c6d8:	89a3      	ldrh	r3, [r4, #12]
 800c6da:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c6de:	81a3      	strh	r3, [r4, #12]
 800c6e0:	f04f 30ff 	mov.w	r0, #4294967295
 800c6e4:	e78e      	b.n	800c604 <__sflush_r+0x1c>
 800c6e6:	4407      	add	r7, r0
 800c6e8:	eba8 0800 	sub.w	r8, r8, r0
 800c6ec:	e7e9      	b.n	800c6c2 <__sflush_r+0xda>
 800c6ee:	bf00      	nop
 800c6f0:	20400001 	.word	0x20400001

0800c6f4 <_fflush_r>:
 800c6f4:	b538      	push	{r3, r4, r5, lr}
 800c6f6:	690b      	ldr	r3, [r1, #16]
 800c6f8:	4605      	mov	r5, r0
 800c6fa:	460c      	mov	r4, r1
 800c6fc:	b913      	cbnz	r3, 800c704 <_fflush_r+0x10>
 800c6fe:	2500      	movs	r5, #0
 800c700:	4628      	mov	r0, r5
 800c702:	bd38      	pop	{r3, r4, r5, pc}
 800c704:	b118      	cbz	r0, 800c70e <_fflush_r+0x1a>
 800c706:	6983      	ldr	r3, [r0, #24]
 800c708:	b90b      	cbnz	r3, 800c70e <_fflush_r+0x1a>
 800c70a:	f7ff f84b 	bl	800b7a4 <__sinit>
 800c70e:	4b14      	ldr	r3, [pc, #80]	; (800c760 <_fflush_r+0x6c>)
 800c710:	429c      	cmp	r4, r3
 800c712:	d11b      	bne.n	800c74c <_fflush_r+0x58>
 800c714:	686c      	ldr	r4, [r5, #4]
 800c716:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c71a:	2b00      	cmp	r3, #0
 800c71c:	d0ef      	beq.n	800c6fe <_fflush_r+0xa>
 800c71e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800c720:	07d0      	lsls	r0, r2, #31
 800c722:	d404      	bmi.n	800c72e <_fflush_r+0x3a>
 800c724:	0599      	lsls	r1, r3, #22
 800c726:	d402      	bmi.n	800c72e <_fflush_r+0x3a>
 800c728:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800c72a:	f7ff f8eb 	bl	800b904 <__retarget_lock_acquire_recursive>
 800c72e:	4628      	mov	r0, r5
 800c730:	4621      	mov	r1, r4
 800c732:	f7ff ff59 	bl	800c5e8 <__sflush_r>
 800c736:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800c738:	07da      	lsls	r2, r3, #31
 800c73a:	4605      	mov	r5, r0
 800c73c:	d4e0      	bmi.n	800c700 <_fflush_r+0xc>
 800c73e:	89a3      	ldrh	r3, [r4, #12]
 800c740:	059b      	lsls	r3, r3, #22
 800c742:	d4dd      	bmi.n	800c700 <_fflush_r+0xc>
 800c744:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800c746:	f7ff f8de 	bl	800b906 <__retarget_lock_release_recursive>
 800c74a:	e7d9      	b.n	800c700 <_fflush_r+0xc>
 800c74c:	4b05      	ldr	r3, [pc, #20]	; (800c764 <_fflush_r+0x70>)
 800c74e:	429c      	cmp	r4, r3
 800c750:	d101      	bne.n	800c756 <_fflush_r+0x62>
 800c752:	68ac      	ldr	r4, [r5, #8]
 800c754:	e7df      	b.n	800c716 <_fflush_r+0x22>
 800c756:	4b04      	ldr	r3, [pc, #16]	; (800c768 <_fflush_r+0x74>)
 800c758:	429c      	cmp	r4, r3
 800c75a:	bf08      	it	eq
 800c75c:	68ec      	ldreq	r4, [r5, #12]
 800c75e:	e7da      	b.n	800c716 <_fflush_r+0x22>
 800c760:	08012818 	.word	0x08012818
 800c764:	08012838 	.word	0x08012838
 800c768:	080127f8 	.word	0x080127f8

0800c76c <_lseek_r>:
 800c76c:	b538      	push	{r3, r4, r5, lr}
 800c76e:	4d07      	ldr	r5, [pc, #28]	; (800c78c <_lseek_r+0x20>)
 800c770:	4604      	mov	r4, r0
 800c772:	4608      	mov	r0, r1
 800c774:	4611      	mov	r1, r2
 800c776:	2200      	movs	r2, #0
 800c778:	602a      	str	r2, [r5, #0]
 800c77a:	461a      	mov	r2, r3
 800c77c:	f7f4 fb5e 	bl	8000e3c <_lseek>
 800c780:	1c43      	adds	r3, r0, #1
 800c782:	d102      	bne.n	800c78a <_lseek_r+0x1e>
 800c784:	682b      	ldr	r3, [r5, #0]
 800c786:	b103      	cbz	r3, 800c78a <_lseek_r+0x1e>
 800c788:	6023      	str	r3, [r4, #0]
 800c78a:	bd38      	pop	{r3, r4, r5, pc}
 800c78c:	2000afc0 	.word	0x2000afc0

0800c790 <__swhatbuf_r>:
 800c790:	b570      	push	{r4, r5, r6, lr}
 800c792:	460e      	mov	r6, r1
 800c794:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c798:	2900      	cmp	r1, #0
 800c79a:	b096      	sub	sp, #88	; 0x58
 800c79c:	4614      	mov	r4, r2
 800c79e:	461d      	mov	r5, r3
 800c7a0:	da08      	bge.n	800c7b4 <__swhatbuf_r+0x24>
 800c7a2:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800c7a6:	2200      	movs	r2, #0
 800c7a8:	602a      	str	r2, [r5, #0]
 800c7aa:	061a      	lsls	r2, r3, #24
 800c7ac:	d410      	bmi.n	800c7d0 <__swhatbuf_r+0x40>
 800c7ae:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c7b2:	e00e      	b.n	800c7d2 <__swhatbuf_r+0x42>
 800c7b4:	466a      	mov	r2, sp
 800c7b6:	f000 f8e3 	bl	800c980 <_fstat_r>
 800c7ba:	2800      	cmp	r0, #0
 800c7bc:	dbf1      	blt.n	800c7a2 <__swhatbuf_r+0x12>
 800c7be:	9a01      	ldr	r2, [sp, #4]
 800c7c0:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800c7c4:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800c7c8:	425a      	negs	r2, r3
 800c7ca:	415a      	adcs	r2, r3
 800c7cc:	602a      	str	r2, [r5, #0]
 800c7ce:	e7ee      	b.n	800c7ae <__swhatbuf_r+0x1e>
 800c7d0:	2340      	movs	r3, #64	; 0x40
 800c7d2:	2000      	movs	r0, #0
 800c7d4:	6023      	str	r3, [r4, #0]
 800c7d6:	b016      	add	sp, #88	; 0x58
 800c7d8:	bd70      	pop	{r4, r5, r6, pc}
	...

0800c7dc <__smakebuf_r>:
 800c7dc:	898b      	ldrh	r3, [r1, #12]
 800c7de:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800c7e0:	079d      	lsls	r5, r3, #30
 800c7e2:	4606      	mov	r6, r0
 800c7e4:	460c      	mov	r4, r1
 800c7e6:	d507      	bpl.n	800c7f8 <__smakebuf_r+0x1c>
 800c7e8:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800c7ec:	6023      	str	r3, [r4, #0]
 800c7ee:	6123      	str	r3, [r4, #16]
 800c7f0:	2301      	movs	r3, #1
 800c7f2:	6163      	str	r3, [r4, #20]
 800c7f4:	b002      	add	sp, #8
 800c7f6:	bd70      	pop	{r4, r5, r6, pc}
 800c7f8:	ab01      	add	r3, sp, #4
 800c7fa:	466a      	mov	r2, sp
 800c7fc:	f7ff ffc8 	bl	800c790 <__swhatbuf_r>
 800c800:	9900      	ldr	r1, [sp, #0]
 800c802:	4605      	mov	r5, r0
 800c804:	4630      	mov	r0, r6
 800c806:	f7ff f8f3 	bl	800b9f0 <_malloc_r>
 800c80a:	b948      	cbnz	r0, 800c820 <__smakebuf_r+0x44>
 800c80c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c810:	059a      	lsls	r2, r3, #22
 800c812:	d4ef      	bmi.n	800c7f4 <__smakebuf_r+0x18>
 800c814:	f023 0303 	bic.w	r3, r3, #3
 800c818:	f043 0302 	orr.w	r3, r3, #2
 800c81c:	81a3      	strh	r3, [r4, #12]
 800c81e:	e7e3      	b.n	800c7e8 <__smakebuf_r+0xc>
 800c820:	4b0d      	ldr	r3, [pc, #52]	; (800c858 <__smakebuf_r+0x7c>)
 800c822:	62b3      	str	r3, [r6, #40]	; 0x28
 800c824:	89a3      	ldrh	r3, [r4, #12]
 800c826:	6020      	str	r0, [r4, #0]
 800c828:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c82c:	81a3      	strh	r3, [r4, #12]
 800c82e:	9b00      	ldr	r3, [sp, #0]
 800c830:	6163      	str	r3, [r4, #20]
 800c832:	9b01      	ldr	r3, [sp, #4]
 800c834:	6120      	str	r0, [r4, #16]
 800c836:	b15b      	cbz	r3, 800c850 <__smakebuf_r+0x74>
 800c838:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800c83c:	4630      	mov	r0, r6
 800c83e:	f000 f8b1 	bl	800c9a4 <_isatty_r>
 800c842:	b128      	cbz	r0, 800c850 <__smakebuf_r+0x74>
 800c844:	89a3      	ldrh	r3, [r4, #12]
 800c846:	f023 0303 	bic.w	r3, r3, #3
 800c84a:	f043 0301 	orr.w	r3, r3, #1
 800c84e:	81a3      	strh	r3, [r4, #12]
 800c850:	89a0      	ldrh	r0, [r4, #12]
 800c852:	4305      	orrs	r5, r0
 800c854:	81a5      	strh	r5, [r4, #12]
 800c856:	e7cd      	b.n	800c7f4 <__smakebuf_r+0x18>
 800c858:	0800b73d 	.word	0x0800b73d

0800c85c <__malloc_lock>:
 800c85c:	4801      	ldr	r0, [pc, #4]	; (800c864 <__malloc_lock+0x8>)
 800c85e:	f7ff b851 	b.w	800b904 <__retarget_lock_acquire_recursive>
 800c862:	bf00      	nop
 800c864:	2000afc4 	.word	0x2000afc4

0800c868 <__malloc_unlock>:
 800c868:	4801      	ldr	r0, [pc, #4]	; (800c870 <__malloc_unlock+0x8>)
 800c86a:	f7ff b84c 	b.w	800b906 <__retarget_lock_release_recursive>
 800c86e:	bf00      	nop
 800c870:	2000afc4 	.word	0x2000afc4

0800c874 <_realloc_r>:
 800c874:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c878:	4680      	mov	r8, r0
 800c87a:	4614      	mov	r4, r2
 800c87c:	460e      	mov	r6, r1
 800c87e:	b921      	cbnz	r1, 800c88a <_realloc_r+0x16>
 800c880:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800c884:	4611      	mov	r1, r2
 800c886:	f7ff b8b3 	b.w	800b9f0 <_malloc_r>
 800c88a:	b92a      	cbnz	r2, 800c898 <_realloc_r+0x24>
 800c88c:	f7ff f844 	bl	800b918 <_free_r>
 800c890:	4625      	mov	r5, r4
 800c892:	4628      	mov	r0, r5
 800c894:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c898:	f000 f894 	bl	800c9c4 <_malloc_usable_size_r>
 800c89c:	4284      	cmp	r4, r0
 800c89e:	4607      	mov	r7, r0
 800c8a0:	d802      	bhi.n	800c8a8 <_realloc_r+0x34>
 800c8a2:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800c8a6:	d812      	bhi.n	800c8ce <_realloc_r+0x5a>
 800c8a8:	4621      	mov	r1, r4
 800c8aa:	4640      	mov	r0, r8
 800c8ac:	f7ff f8a0 	bl	800b9f0 <_malloc_r>
 800c8b0:	4605      	mov	r5, r0
 800c8b2:	2800      	cmp	r0, #0
 800c8b4:	d0ed      	beq.n	800c892 <_realloc_r+0x1e>
 800c8b6:	42bc      	cmp	r4, r7
 800c8b8:	4622      	mov	r2, r4
 800c8ba:	4631      	mov	r1, r6
 800c8bc:	bf28      	it	cs
 800c8be:	463a      	movcs	r2, r7
 800c8c0:	f7fe fd8a 	bl	800b3d8 <memcpy>
 800c8c4:	4631      	mov	r1, r6
 800c8c6:	4640      	mov	r0, r8
 800c8c8:	f7ff f826 	bl	800b918 <_free_r>
 800c8cc:	e7e1      	b.n	800c892 <_realloc_r+0x1e>
 800c8ce:	4635      	mov	r5, r6
 800c8d0:	e7df      	b.n	800c892 <_realloc_r+0x1e>
	...

0800c8d4 <_read_r>:
 800c8d4:	b538      	push	{r3, r4, r5, lr}
 800c8d6:	4d07      	ldr	r5, [pc, #28]	; (800c8f4 <_read_r+0x20>)
 800c8d8:	4604      	mov	r4, r0
 800c8da:	4608      	mov	r0, r1
 800c8dc:	4611      	mov	r1, r2
 800c8de:	2200      	movs	r2, #0
 800c8e0:	602a      	str	r2, [r5, #0]
 800c8e2:	461a      	mov	r2, r3
 800c8e4:	f7f4 fa86 	bl	8000df4 <_read>
 800c8e8:	1c43      	adds	r3, r0, #1
 800c8ea:	d102      	bne.n	800c8f2 <_read_r+0x1e>
 800c8ec:	682b      	ldr	r3, [r5, #0]
 800c8ee:	b103      	cbz	r3, 800c8f2 <_read_r+0x1e>
 800c8f0:	6023      	str	r3, [r4, #0]
 800c8f2:	bd38      	pop	{r3, r4, r5, pc}
 800c8f4:	2000afc0 	.word	0x2000afc0

0800c8f8 <_raise_r>:
 800c8f8:	291f      	cmp	r1, #31
 800c8fa:	b538      	push	{r3, r4, r5, lr}
 800c8fc:	4604      	mov	r4, r0
 800c8fe:	460d      	mov	r5, r1
 800c900:	d904      	bls.n	800c90c <_raise_r+0x14>
 800c902:	2316      	movs	r3, #22
 800c904:	6003      	str	r3, [r0, #0]
 800c906:	f04f 30ff 	mov.w	r0, #4294967295
 800c90a:	bd38      	pop	{r3, r4, r5, pc}
 800c90c:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800c90e:	b112      	cbz	r2, 800c916 <_raise_r+0x1e>
 800c910:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800c914:	b94b      	cbnz	r3, 800c92a <_raise_r+0x32>
 800c916:	4620      	mov	r0, r4
 800c918:	f000 f830 	bl	800c97c <_getpid_r>
 800c91c:	462a      	mov	r2, r5
 800c91e:	4601      	mov	r1, r0
 800c920:	4620      	mov	r0, r4
 800c922:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c926:	f000 b817 	b.w	800c958 <_kill_r>
 800c92a:	2b01      	cmp	r3, #1
 800c92c:	d00a      	beq.n	800c944 <_raise_r+0x4c>
 800c92e:	1c59      	adds	r1, r3, #1
 800c930:	d103      	bne.n	800c93a <_raise_r+0x42>
 800c932:	2316      	movs	r3, #22
 800c934:	6003      	str	r3, [r0, #0]
 800c936:	2001      	movs	r0, #1
 800c938:	e7e7      	b.n	800c90a <_raise_r+0x12>
 800c93a:	2400      	movs	r4, #0
 800c93c:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800c940:	4628      	mov	r0, r5
 800c942:	4798      	blx	r3
 800c944:	2000      	movs	r0, #0
 800c946:	e7e0      	b.n	800c90a <_raise_r+0x12>

0800c948 <raise>:
 800c948:	4b02      	ldr	r3, [pc, #8]	; (800c954 <raise+0xc>)
 800c94a:	4601      	mov	r1, r0
 800c94c:	6818      	ldr	r0, [r3, #0]
 800c94e:	f7ff bfd3 	b.w	800c8f8 <_raise_r>
 800c952:	bf00      	nop
 800c954:	20000038 	.word	0x20000038

0800c958 <_kill_r>:
 800c958:	b538      	push	{r3, r4, r5, lr}
 800c95a:	4d07      	ldr	r5, [pc, #28]	; (800c978 <_kill_r+0x20>)
 800c95c:	2300      	movs	r3, #0
 800c95e:	4604      	mov	r4, r0
 800c960:	4608      	mov	r0, r1
 800c962:	4611      	mov	r1, r2
 800c964:	602b      	str	r3, [r5, #0]
 800c966:	f7f4 fa37 	bl	8000dd8 <_kill>
 800c96a:	1c43      	adds	r3, r0, #1
 800c96c:	d102      	bne.n	800c974 <_kill_r+0x1c>
 800c96e:	682b      	ldr	r3, [r5, #0]
 800c970:	b103      	cbz	r3, 800c974 <_kill_r+0x1c>
 800c972:	6023      	str	r3, [r4, #0]
 800c974:	bd38      	pop	{r3, r4, r5, pc}
 800c976:	bf00      	nop
 800c978:	2000afc0 	.word	0x2000afc0

0800c97c <_getpid_r>:
 800c97c:	f7f4 ba2a 	b.w	8000dd4 <_getpid>

0800c980 <_fstat_r>:
 800c980:	b538      	push	{r3, r4, r5, lr}
 800c982:	4d07      	ldr	r5, [pc, #28]	; (800c9a0 <_fstat_r+0x20>)
 800c984:	2300      	movs	r3, #0
 800c986:	4604      	mov	r4, r0
 800c988:	4608      	mov	r0, r1
 800c98a:	4611      	mov	r1, r2
 800c98c:	602b      	str	r3, [r5, #0]
 800c98e:	f7f4 fa4e 	bl	8000e2e <_fstat>
 800c992:	1c43      	adds	r3, r0, #1
 800c994:	d102      	bne.n	800c99c <_fstat_r+0x1c>
 800c996:	682b      	ldr	r3, [r5, #0]
 800c998:	b103      	cbz	r3, 800c99c <_fstat_r+0x1c>
 800c99a:	6023      	str	r3, [r4, #0]
 800c99c:	bd38      	pop	{r3, r4, r5, pc}
 800c99e:	bf00      	nop
 800c9a0:	2000afc0 	.word	0x2000afc0

0800c9a4 <_isatty_r>:
 800c9a4:	b538      	push	{r3, r4, r5, lr}
 800c9a6:	4d06      	ldr	r5, [pc, #24]	; (800c9c0 <_isatty_r+0x1c>)
 800c9a8:	2300      	movs	r3, #0
 800c9aa:	4604      	mov	r4, r0
 800c9ac:	4608      	mov	r0, r1
 800c9ae:	602b      	str	r3, [r5, #0]
 800c9b0:	f7f4 fa42 	bl	8000e38 <_isatty>
 800c9b4:	1c43      	adds	r3, r0, #1
 800c9b6:	d102      	bne.n	800c9be <_isatty_r+0x1a>
 800c9b8:	682b      	ldr	r3, [r5, #0]
 800c9ba:	b103      	cbz	r3, 800c9be <_isatty_r+0x1a>
 800c9bc:	6023      	str	r3, [r4, #0]
 800c9be:	bd38      	pop	{r3, r4, r5, pc}
 800c9c0:	2000afc0 	.word	0x2000afc0

0800c9c4 <_malloc_usable_size_r>:
 800c9c4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c9c8:	1f18      	subs	r0, r3, #4
 800c9ca:	2b00      	cmp	r3, #0
 800c9cc:	bfbc      	itt	lt
 800c9ce:	580b      	ldrlt	r3, [r1, r0]
 800c9d0:	18c0      	addlt	r0, r0, r3
 800c9d2:	4770      	bx	lr

0800c9d4 <_init>:
 800c9d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c9d6:	bf00      	nop
 800c9d8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c9da:	bc08      	pop	{r3}
 800c9dc:	469e      	mov	lr, r3
 800c9de:	4770      	bx	lr

0800c9e0 <_fini>:
 800c9e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c9e2:	bf00      	nop
 800c9e4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c9e6:	bc08      	pop	{r3}
 800c9e8:	469e      	mov	lr, r3
 800c9ea:	4770      	bx	lr
