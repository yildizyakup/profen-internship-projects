
blinky-rgb-f429zi.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004ffc  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000008c  080051ac  080051ac  000151ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005238  08005238  00020010  2**0
                  CONTENTS
  4 .ARM          00000008  08005238  08005238  00015238  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005240  08005240  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005240  08005240  00015240  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005244  08005244  00015244  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  08005248  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020010  2**0
                  CONTENTS
 10 .bss          000047bc  20000010  20000010  00020010  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  200047cc  200047cc  00020010  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 13 .debug_info   000183d9  00000000  00000000  00020040  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002e15  00000000  00000000  00038419  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001540  00000000  00000000  0003b230  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00001428  00000000  00000000  0003c770  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00026448  00000000  00000000  0003db98  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000163d3  00000000  00000000  00063fe0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000eac3e  00000000  00000000  0007a3b3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  00164ff1  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00005b34  00000000  00000000  00165044  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20000010 	.word	0x20000010
 80001cc:	00000000 	.word	0x00000000
 80001d0:	08005194 	.word	0x08005194

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	20000014 	.word	0x20000014
 80001ec:	08005194 	.word	0x08005194

080001f0 <strcmp>:
 80001f0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001f4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001f8:	2a01      	cmp	r2, #1
 80001fa:	bf28      	it	cs
 80001fc:	429a      	cmpcs	r2, r3
 80001fe:	d0f7      	beq.n	80001f0 <strcmp>
 8000200:	1ad0      	subs	r0, r2, r3
 8000202:	4770      	bx	lr

08000204 <__aeabi_uldivmod>:
 8000204:	b953      	cbnz	r3, 800021c <__aeabi_uldivmod+0x18>
 8000206:	b94a      	cbnz	r2, 800021c <__aeabi_uldivmod+0x18>
 8000208:	2900      	cmp	r1, #0
 800020a:	bf08      	it	eq
 800020c:	2800      	cmpeq	r0, #0
 800020e:	bf1c      	itt	ne
 8000210:	f04f 31ff 	movne.w	r1, #4294967295
 8000214:	f04f 30ff 	movne.w	r0, #4294967295
 8000218:	f000 b974 	b.w	8000504 <__aeabi_idiv0>
 800021c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000220:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000224:	f000 f806 	bl	8000234 <__udivmoddi4>
 8000228:	f8dd e004 	ldr.w	lr, [sp, #4]
 800022c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000230:	b004      	add	sp, #16
 8000232:	4770      	bx	lr

08000234 <__udivmoddi4>:
 8000234:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000238:	9d08      	ldr	r5, [sp, #32]
 800023a:	4604      	mov	r4, r0
 800023c:	468e      	mov	lr, r1
 800023e:	2b00      	cmp	r3, #0
 8000240:	d14d      	bne.n	80002de <__udivmoddi4+0xaa>
 8000242:	428a      	cmp	r2, r1
 8000244:	4694      	mov	ip, r2
 8000246:	d969      	bls.n	800031c <__udivmoddi4+0xe8>
 8000248:	fab2 f282 	clz	r2, r2
 800024c:	b152      	cbz	r2, 8000264 <__udivmoddi4+0x30>
 800024e:	fa01 f302 	lsl.w	r3, r1, r2
 8000252:	f1c2 0120 	rsb	r1, r2, #32
 8000256:	fa20 f101 	lsr.w	r1, r0, r1
 800025a:	fa0c fc02 	lsl.w	ip, ip, r2
 800025e:	ea41 0e03 	orr.w	lr, r1, r3
 8000262:	4094      	lsls	r4, r2
 8000264:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000268:	0c21      	lsrs	r1, r4, #16
 800026a:	fbbe f6f8 	udiv	r6, lr, r8
 800026e:	fa1f f78c 	uxth.w	r7, ip
 8000272:	fb08 e316 	mls	r3, r8, r6, lr
 8000276:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800027a:	fb06 f107 	mul.w	r1, r6, r7
 800027e:	4299      	cmp	r1, r3
 8000280:	d90a      	bls.n	8000298 <__udivmoddi4+0x64>
 8000282:	eb1c 0303 	adds.w	r3, ip, r3
 8000286:	f106 30ff 	add.w	r0, r6, #4294967295
 800028a:	f080 811f 	bcs.w	80004cc <__udivmoddi4+0x298>
 800028e:	4299      	cmp	r1, r3
 8000290:	f240 811c 	bls.w	80004cc <__udivmoddi4+0x298>
 8000294:	3e02      	subs	r6, #2
 8000296:	4463      	add	r3, ip
 8000298:	1a5b      	subs	r3, r3, r1
 800029a:	b2a4      	uxth	r4, r4
 800029c:	fbb3 f0f8 	udiv	r0, r3, r8
 80002a0:	fb08 3310 	mls	r3, r8, r0, r3
 80002a4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002a8:	fb00 f707 	mul.w	r7, r0, r7
 80002ac:	42a7      	cmp	r7, r4
 80002ae:	d90a      	bls.n	80002c6 <__udivmoddi4+0x92>
 80002b0:	eb1c 0404 	adds.w	r4, ip, r4
 80002b4:	f100 33ff 	add.w	r3, r0, #4294967295
 80002b8:	f080 810a 	bcs.w	80004d0 <__udivmoddi4+0x29c>
 80002bc:	42a7      	cmp	r7, r4
 80002be:	f240 8107 	bls.w	80004d0 <__udivmoddi4+0x29c>
 80002c2:	4464      	add	r4, ip
 80002c4:	3802      	subs	r0, #2
 80002c6:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002ca:	1be4      	subs	r4, r4, r7
 80002cc:	2600      	movs	r6, #0
 80002ce:	b11d      	cbz	r5, 80002d8 <__udivmoddi4+0xa4>
 80002d0:	40d4      	lsrs	r4, r2
 80002d2:	2300      	movs	r3, #0
 80002d4:	e9c5 4300 	strd	r4, r3, [r5]
 80002d8:	4631      	mov	r1, r6
 80002da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002de:	428b      	cmp	r3, r1
 80002e0:	d909      	bls.n	80002f6 <__udivmoddi4+0xc2>
 80002e2:	2d00      	cmp	r5, #0
 80002e4:	f000 80ef 	beq.w	80004c6 <__udivmoddi4+0x292>
 80002e8:	2600      	movs	r6, #0
 80002ea:	e9c5 0100 	strd	r0, r1, [r5]
 80002ee:	4630      	mov	r0, r6
 80002f0:	4631      	mov	r1, r6
 80002f2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002f6:	fab3 f683 	clz	r6, r3
 80002fa:	2e00      	cmp	r6, #0
 80002fc:	d14a      	bne.n	8000394 <__udivmoddi4+0x160>
 80002fe:	428b      	cmp	r3, r1
 8000300:	d302      	bcc.n	8000308 <__udivmoddi4+0xd4>
 8000302:	4282      	cmp	r2, r0
 8000304:	f200 80f9 	bhi.w	80004fa <__udivmoddi4+0x2c6>
 8000308:	1a84      	subs	r4, r0, r2
 800030a:	eb61 0303 	sbc.w	r3, r1, r3
 800030e:	2001      	movs	r0, #1
 8000310:	469e      	mov	lr, r3
 8000312:	2d00      	cmp	r5, #0
 8000314:	d0e0      	beq.n	80002d8 <__udivmoddi4+0xa4>
 8000316:	e9c5 4e00 	strd	r4, lr, [r5]
 800031a:	e7dd      	b.n	80002d8 <__udivmoddi4+0xa4>
 800031c:	b902      	cbnz	r2, 8000320 <__udivmoddi4+0xec>
 800031e:	deff      	udf	#255	; 0xff
 8000320:	fab2 f282 	clz	r2, r2
 8000324:	2a00      	cmp	r2, #0
 8000326:	f040 8092 	bne.w	800044e <__udivmoddi4+0x21a>
 800032a:	eba1 010c 	sub.w	r1, r1, ip
 800032e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000332:	fa1f fe8c 	uxth.w	lr, ip
 8000336:	2601      	movs	r6, #1
 8000338:	0c20      	lsrs	r0, r4, #16
 800033a:	fbb1 f3f7 	udiv	r3, r1, r7
 800033e:	fb07 1113 	mls	r1, r7, r3, r1
 8000342:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000346:	fb0e f003 	mul.w	r0, lr, r3
 800034a:	4288      	cmp	r0, r1
 800034c:	d908      	bls.n	8000360 <__udivmoddi4+0x12c>
 800034e:	eb1c 0101 	adds.w	r1, ip, r1
 8000352:	f103 38ff 	add.w	r8, r3, #4294967295
 8000356:	d202      	bcs.n	800035e <__udivmoddi4+0x12a>
 8000358:	4288      	cmp	r0, r1
 800035a:	f200 80cb 	bhi.w	80004f4 <__udivmoddi4+0x2c0>
 800035e:	4643      	mov	r3, r8
 8000360:	1a09      	subs	r1, r1, r0
 8000362:	b2a4      	uxth	r4, r4
 8000364:	fbb1 f0f7 	udiv	r0, r1, r7
 8000368:	fb07 1110 	mls	r1, r7, r0, r1
 800036c:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000370:	fb0e fe00 	mul.w	lr, lr, r0
 8000374:	45a6      	cmp	lr, r4
 8000376:	d908      	bls.n	800038a <__udivmoddi4+0x156>
 8000378:	eb1c 0404 	adds.w	r4, ip, r4
 800037c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000380:	d202      	bcs.n	8000388 <__udivmoddi4+0x154>
 8000382:	45a6      	cmp	lr, r4
 8000384:	f200 80bb 	bhi.w	80004fe <__udivmoddi4+0x2ca>
 8000388:	4608      	mov	r0, r1
 800038a:	eba4 040e 	sub.w	r4, r4, lr
 800038e:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000392:	e79c      	b.n	80002ce <__udivmoddi4+0x9a>
 8000394:	f1c6 0720 	rsb	r7, r6, #32
 8000398:	40b3      	lsls	r3, r6
 800039a:	fa22 fc07 	lsr.w	ip, r2, r7
 800039e:	ea4c 0c03 	orr.w	ip, ip, r3
 80003a2:	fa20 f407 	lsr.w	r4, r0, r7
 80003a6:	fa01 f306 	lsl.w	r3, r1, r6
 80003aa:	431c      	orrs	r4, r3
 80003ac:	40f9      	lsrs	r1, r7
 80003ae:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003b2:	fa00 f306 	lsl.w	r3, r0, r6
 80003b6:	fbb1 f8f9 	udiv	r8, r1, r9
 80003ba:	0c20      	lsrs	r0, r4, #16
 80003bc:	fa1f fe8c 	uxth.w	lr, ip
 80003c0:	fb09 1118 	mls	r1, r9, r8, r1
 80003c4:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003c8:	fb08 f00e 	mul.w	r0, r8, lr
 80003cc:	4288      	cmp	r0, r1
 80003ce:	fa02 f206 	lsl.w	r2, r2, r6
 80003d2:	d90b      	bls.n	80003ec <__udivmoddi4+0x1b8>
 80003d4:	eb1c 0101 	adds.w	r1, ip, r1
 80003d8:	f108 3aff 	add.w	sl, r8, #4294967295
 80003dc:	f080 8088 	bcs.w	80004f0 <__udivmoddi4+0x2bc>
 80003e0:	4288      	cmp	r0, r1
 80003e2:	f240 8085 	bls.w	80004f0 <__udivmoddi4+0x2bc>
 80003e6:	f1a8 0802 	sub.w	r8, r8, #2
 80003ea:	4461      	add	r1, ip
 80003ec:	1a09      	subs	r1, r1, r0
 80003ee:	b2a4      	uxth	r4, r4
 80003f0:	fbb1 f0f9 	udiv	r0, r1, r9
 80003f4:	fb09 1110 	mls	r1, r9, r0, r1
 80003f8:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003fc:	fb00 fe0e 	mul.w	lr, r0, lr
 8000400:	458e      	cmp	lr, r1
 8000402:	d908      	bls.n	8000416 <__udivmoddi4+0x1e2>
 8000404:	eb1c 0101 	adds.w	r1, ip, r1
 8000408:	f100 34ff 	add.w	r4, r0, #4294967295
 800040c:	d26c      	bcs.n	80004e8 <__udivmoddi4+0x2b4>
 800040e:	458e      	cmp	lr, r1
 8000410:	d96a      	bls.n	80004e8 <__udivmoddi4+0x2b4>
 8000412:	3802      	subs	r0, #2
 8000414:	4461      	add	r1, ip
 8000416:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 800041a:	fba0 9402 	umull	r9, r4, r0, r2
 800041e:	eba1 010e 	sub.w	r1, r1, lr
 8000422:	42a1      	cmp	r1, r4
 8000424:	46c8      	mov	r8, r9
 8000426:	46a6      	mov	lr, r4
 8000428:	d356      	bcc.n	80004d8 <__udivmoddi4+0x2a4>
 800042a:	d053      	beq.n	80004d4 <__udivmoddi4+0x2a0>
 800042c:	b15d      	cbz	r5, 8000446 <__udivmoddi4+0x212>
 800042e:	ebb3 0208 	subs.w	r2, r3, r8
 8000432:	eb61 010e 	sbc.w	r1, r1, lr
 8000436:	fa01 f707 	lsl.w	r7, r1, r7
 800043a:	fa22 f306 	lsr.w	r3, r2, r6
 800043e:	40f1      	lsrs	r1, r6
 8000440:	431f      	orrs	r7, r3
 8000442:	e9c5 7100 	strd	r7, r1, [r5]
 8000446:	2600      	movs	r6, #0
 8000448:	4631      	mov	r1, r6
 800044a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800044e:	f1c2 0320 	rsb	r3, r2, #32
 8000452:	40d8      	lsrs	r0, r3
 8000454:	fa0c fc02 	lsl.w	ip, ip, r2
 8000458:	fa21 f303 	lsr.w	r3, r1, r3
 800045c:	4091      	lsls	r1, r2
 800045e:	4301      	orrs	r1, r0
 8000460:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000464:	fa1f fe8c 	uxth.w	lr, ip
 8000468:	fbb3 f0f7 	udiv	r0, r3, r7
 800046c:	fb07 3610 	mls	r6, r7, r0, r3
 8000470:	0c0b      	lsrs	r3, r1, #16
 8000472:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000476:	fb00 f60e 	mul.w	r6, r0, lr
 800047a:	429e      	cmp	r6, r3
 800047c:	fa04 f402 	lsl.w	r4, r4, r2
 8000480:	d908      	bls.n	8000494 <__udivmoddi4+0x260>
 8000482:	eb1c 0303 	adds.w	r3, ip, r3
 8000486:	f100 38ff 	add.w	r8, r0, #4294967295
 800048a:	d22f      	bcs.n	80004ec <__udivmoddi4+0x2b8>
 800048c:	429e      	cmp	r6, r3
 800048e:	d92d      	bls.n	80004ec <__udivmoddi4+0x2b8>
 8000490:	3802      	subs	r0, #2
 8000492:	4463      	add	r3, ip
 8000494:	1b9b      	subs	r3, r3, r6
 8000496:	b289      	uxth	r1, r1
 8000498:	fbb3 f6f7 	udiv	r6, r3, r7
 800049c:	fb07 3316 	mls	r3, r7, r6, r3
 80004a0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004a4:	fb06 f30e 	mul.w	r3, r6, lr
 80004a8:	428b      	cmp	r3, r1
 80004aa:	d908      	bls.n	80004be <__udivmoddi4+0x28a>
 80004ac:	eb1c 0101 	adds.w	r1, ip, r1
 80004b0:	f106 38ff 	add.w	r8, r6, #4294967295
 80004b4:	d216      	bcs.n	80004e4 <__udivmoddi4+0x2b0>
 80004b6:	428b      	cmp	r3, r1
 80004b8:	d914      	bls.n	80004e4 <__udivmoddi4+0x2b0>
 80004ba:	3e02      	subs	r6, #2
 80004bc:	4461      	add	r1, ip
 80004be:	1ac9      	subs	r1, r1, r3
 80004c0:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80004c4:	e738      	b.n	8000338 <__udivmoddi4+0x104>
 80004c6:	462e      	mov	r6, r5
 80004c8:	4628      	mov	r0, r5
 80004ca:	e705      	b.n	80002d8 <__udivmoddi4+0xa4>
 80004cc:	4606      	mov	r6, r0
 80004ce:	e6e3      	b.n	8000298 <__udivmoddi4+0x64>
 80004d0:	4618      	mov	r0, r3
 80004d2:	e6f8      	b.n	80002c6 <__udivmoddi4+0x92>
 80004d4:	454b      	cmp	r3, r9
 80004d6:	d2a9      	bcs.n	800042c <__udivmoddi4+0x1f8>
 80004d8:	ebb9 0802 	subs.w	r8, r9, r2
 80004dc:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004e0:	3801      	subs	r0, #1
 80004e2:	e7a3      	b.n	800042c <__udivmoddi4+0x1f8>
 80004e4:	4646      	mov	r6, r8
 80004e6:	e7ea      	b.n	80004be <__udivmoddi4+0x28a>
 80004e8:	4620      	mov	r0, r4
 80004ea:	e794      	b.n	8000416 <__udivmoddi4+0x1e2>
 80004ec:	4640      	mov	r0, r8
 80004ee:	e7d1      	b.n	8000494 <__udivmoddi4+0x260>
 80004f0:	46d0      	mov	r8, sl
 80004f2:	e77b      	b.n	80003ec <__udivmoddi4+0x1b8>
 80004f4:	3b02      	subs	r3, #2
 80004f6:	4461      	add	r1, ip
 80004f8:	e732      	b.n	8000360 <__udivmoddi4+0x12c>
 80004fa:	4630      	mov	r0, r6
 80004fc:	e709      	b.n	8000312 <__udivmoddi4+0xde>
 80004fe:	4464      	add	r4, ip
 8000500:	3802      	subs	r0, #2
 8000502:	e742      	b.n	800038a <__udivmoddi4+0x156>

08000504 <__aeabi_idiv0>:
 8000504:	4770      	bx	lr
 8000506:	bf00      	nop

08000508 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8000508:	b480      	push	{r7}
 800050a:	b085      	sub	sp, #20
 800050c:	af00      	add	r7, sp, #0
 800050e:	60f8      	str	r0, [r7, #12]
 8000510:	60b9      	str	r1, [r7, #8]
 8000512:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8000514:	68fb      	ldr	r3, [r7, #12]
 8000516:	4a07      	ldr	r2, [pc, #28]	; (8000534 <vApplicationGetIdleTaskMemory+0x2c>)
 8000518:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 800051a:	68bb      	ldr	r3, [r7, #8]
 800051c:	4a06      	ldr	r2, [pc, #24]	; (8000538 <vApplicationGetIdleTaskMemory+0x30>)
 800051e:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8000520:	687b      	ldr	r3, [r7, #4]
 8000522:	2280      	movs	r2, #128	; 0x80
 8000524:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 8000526:	bf00      	nop
 8000528:	3714      	adds	r7, #20
 800052a:	46bd      	mov	sp, r7
 800052c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000530:	4770      	bx	lr
 8000532:	bf00      	nop
 8000534:	2000002c 	.word	0x2000002c
 8000538:	20000080 	.word	0x20000080

0800053c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800053c:	b5b0      	push	{r4, r5, r7, lr}
 800053e:	b08e      	sub	sp, #56	; 0x38
 8000540:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000542:	f000 fd0f 	bl	8000f64 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000546:	f000 f839 	bl	80005bc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800054a:	f000 f997 	bl	800087c <MX_GPIO_Init>
  MX_ETH_Init();
 800054e:	f000 f89f 	bl	8000690 <MX_ETH_Init>
  MX_USART3_UART_Init();
 8000552:	f000 f93b 	bl	80007cc <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 8000556:	f000 f963 	bl	8000820 <MX_USB_OTG_FS_PCD_Init>
  MX_TIM1_Init();
 800055a:	f000 f8e7 	bl	800072c <MX_TIM1_Init>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of WaitTask */
  osThreadDef(WaitTask, StartWaitTask, osPriorityAboveNormal, 0, 128);
 800055e:	4b13      	ldr	r3, [pc, #76]	; (80005ac <main+0x70>)
 8000560:	f107 041c 	add.w	r4, r7, #28
 8000564:	461d      	mov	r5, r3
 8000566:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000568:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800056a:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800056e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  WaitTaskHandle = osThreadCreate(osThread(WaitTask), NULL);
 8000572:	f107 031c 	add.w	r3, r7, #28
 8000576:	2100      	movs	r1, #0
 8000578:	4618      	mov	r0, r3
 800057a:	f003 fb94 	bl	8003ca6 <osThreadCreate>
 800057e:	4603      	mov	r3, r0
 8000580:	4a0b      	ldr	r2, [pc, #44]	; (80005b0 <main+0x74>)
 8000582:	6013      	str	r3, [r2, #0]

  /* definition and creation of WriteTask */
  osThreadDef(WriteTask, StartWriteTask, osPriorityNormal, 0, 128);
 8000584:	4b0b      	ldr	r3, [pc, #44]	; (80005b4 <main+0x78>)
 8000586:	463c      	mov	r4, r7
 8000588:	461d      	mov	r5, r3
 800058a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800058c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800058e:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000592:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  WriteTaskHandle = osThreadCreate(osThread(WriteTask), NULL);
 8000596:	463b      	mov	r3, r7
 8000598:	2100      	movs	r1, #0
 800059a:	4618      	mov	r0, r3
 800059c:	f003 fb83 	bl	8003ca6 <osThreadCreate>
 80005a0:	4603      	mov	r3, r0
 80005a2:	4a05      	ldr	r2, [pc, #20]	; (80005b8 <main+0x7c>)
 80005a4:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 80005a6:	f003 fb77 	bl	8003c98 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80005aa:	e7fe      	b.n	80005aa <main+0x6e>
 80005ac:	080051c4 	.word	0x080051c4
 80005b0:	20000a40 	.word	0x20000a40
 80005b4:	080051e0 	.word	0x080051e0
 80005b8:	20000a44 	.word	0x20000a44

080005bc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005bc:	b580      	push	{r7, lr}
 80005be:	b094      	sub	sp, #80	; 0x50
 80005c0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005c2:	f107 0320 	add.w	r3, r7, #32
 80005c6:	2230      	movs	r2, #48	; 0x30
 80005c8:	2100      	movs	r1, #0
 80005ca:	4618      	mov	r0, r3
 80005cc:	f004 fdda 	bl	8005184 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005d0:	f107 030c 	add.w	r3, r7, #12
 80005d4:	2200      	movs	r2, #0
 80005d6:	601a      	str	r2, [r3, #0]
 80005d8:	605a      	str	r2, [r3, #4]
 80005da:	609a      	str	r2, [r3, #8]
 80005dc:	60da      	str	r2, [r3, #12]
 80005de:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80005e0:	2300      	movs	r3, #0
 80005e2:	60bb      	str	r3, [r7, #8]
 80005e4:	4b28      	ldr	r3, [pc, #160]	; (8000688 <SystemClock_Config+0xcc>)
 80005e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005e8:	4a27      	ldr	r2, [pc, #156]	; (8000688 <SystemClock_Config+0xcc>)
 80005ea:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80005ee:	6413      	str	r3, [r2, #64]	; 0x40
 80005f0:	4b25      	ldr	r3, [pc, #148]	; (8000688 <SystemClock_Config+0xcc>)
 80005f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005f4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80005f8:	60bb      	str	r3, [r7, #8]
 80005fa:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80005fc:	2300      	movs	r3, #0
 80005fe:	607b      	str	r3, [r7, #4]
 8000600:	4b22      	ldr	r3, [pc, #136]	; (800068c <SystemClock_Config+0xd0>)
 8000602:	681b      	ldr	r3, [r3, #0]
 8000604:	4a21      	ldr	r2, [pc, #132]	; (800068c <SystemClock_Config+0xd0>)
 8000606:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800060a:	6013      	str	r3, [r2, #0]
 800060c:	4b1f      	ldr	r3, [pc, #124]	; (800068c <SystemClock_Config+0xd0>)
 800060e:	681b      	ldr	r3, [r3, #0]
 8000610:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000614:	607b      	str	r3, [r7, #4]
 8000616:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000618:	2301      	movs	r3, #1
 800061a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 800061c:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8000620:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000622:	2302      	movs	r3, #2
 8000624:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000626:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800062a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 800062c:	2304      	movs	r3, #4
 800062e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8000630:	23a8      	movs	r3, #168	; 0xa8
 8000632:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000634:	2302      	movs	r3, #2
 8000636:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000638:	2307      	movs	r3, #7
 800063a:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800063c:	f107 0320 	add.w	r3, r7, #32
 8000640:	4618      	mov	r0, r3
 8000642:	f001 fc47 	bl	8001ed4 <HAL_RCC_OscConfig>
 8000646:	4603      	mov	r3, r0
 8000648:	2b00      	cmp	r3, #0
 800064a:	d001      	beq.n	8000650 <SystemClock_Config+0x94>
  {
    Error_Handler();
 800064c:	f000 fa66 	bl	8000b1c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000650:	230f      	movs	r3, #15
 8000652:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000654:	2302      	movs	r3, #2
 8000656:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000658:	2300      	movs	r3, #0
 800065a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800065c:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000660:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000662:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000666:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000668:	f107 030c 	add.w	r3, r7, #12
 800066c:	2105      	movs	r1, #5
 800066e:	4618      	mov	r0, r3
 8000670:	f001 fea8 	bl	80023c4 <HAL_RCC_ClockConfig>
 8000674:	4603      	mov	r3, r0
 8000676:	2b00      	cmp	r3, #0
 8000678:	d001      	beq.n	800067e <SystemClock_Config+0xc2>
  {
    Error_Handler();
 800067a:	f000 fa4f 	bl	8000b1c <Error_Handler>
  }
}
 800067e:	bf00      	nop
 8000680:	3750      	adds	r7, #80	; 0x50
 8000682:	46bd      	mov	sp, r7
 8000684:	bd80      	pop	{r7, pc}
 8000686:	bf00      	nop
 8000688:	40023800 	.word	0x40023800
 800068c:	40007000 	.word	0x40007000

08000690 <MX_ETH_Init>:
  * @brief ETH Initialization Function
  * @param None
  * @retval None
  */
static void MX_ETH_Init(void)
{
 8000690:	b580      	push	{r7, lr}
 8000692:	af00      	add	r7, sp, #0
   static uint8_t MACAddr[6];

  /* USER CODE BEGIN ETH_Init 1 */

  /* USER CODE END ETH_Init 1 */
  heth.Instance = ETH;
 8000694:	4b1f      	ldr	r3, [pc, #124]	; (8000714 <MX_ETH_Init+0x84>)
 8000696:	4a20      	ldr	r2, [pc, #128]	; (8000718 <MX_ETH_Init+0x88>)
 8000698:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 800069a:	4b20      	ldr	r3, [pc, #128]	; (800071c <MX_ETH_Init+0x8c>)
 800069c:	2200      	movs	r2, #0
 800069e:	701a      	strb	r2, [r3, #0]
  MACAddr[1] = 0x80;
 80006a0:	4b1e      	ldr	r3, [pc, #120]	; (800071c <MX_ETH_Init+0x8c>)
 80006a2:	2280      	movs	r2, #128	; 0x80
 80006a4:	705a      	strb	r2, [r3, #1]
  MACAddr[2] = 0xE1;
 80006a6:	4b1d      	ldr	r3, [pc, #116]	; (800071c <MX_ETH_Init+0x8c>)
 80006a8:	22e1      	movs	r2, #225	; 0xe1
 80006aa:	709a      	strb	r2, [r3, #2]
  MACAddr[3] = 0x00;
 80006ac:	4b1b      	ldr	r3, [pc, #108]	; (800071c <MX_ETH_Init+0x8c>)
 80006ae:	2200      	movs	r2, #0
 80006b0:	70da      	strb	r2, [r3, #3]
  MACAddr[4] = 0x00;
 80006b2:	4b1a      	ldr	r3, [pc, #104]	; (800071c <MX_ETH_Init+0x8c>)
 80006b4:	2200      	movs	r2, #0
 80006b6:	711a      	strb	r2, [r3, #4]
  MACAddr[5] = 0x00;
 80006b8:	4b18      	ldr	r3, [pc, #96]	; (800071c <MX_ETH_Init+0x8c>)
 80006ba:	2200      	movs	r2, #0
 80006bc:	715a      	strb	r2, [r3, #5]
  heth.Init.MACAddr = &MACAddr[0];
 80006be:	4b15      	ldr	r3, [pc, #84]	; (8000714 <MX_ETH_Init+0x84>)
 80006c0:	4a16      	ldr	r2, [pc, #88]	; (800071c <MX_ETH_Init+0x8c>)
 80006c2:	605a      	str	r2, [r3, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 80006c4:	4b13      	ldr	r3, [pc, #76]	; (8000714 <MX_ETH_Init+0x84>)
 80006c6:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 80006ca:	609a      	str	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 80006cc:	4b11      	ldr	r3, [pc, #68]	; (8000714 <MX_ETH_Init+0x84>)
 80006ce:	4a14      	ldr	r2, [pc, #80]	; (8000720 <MX_ETH_Init+0x90>)
 80006d0:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 80006d2:	4b10      	ldr	r3, [pc, #64]	; (8000714 <MX_ETH_Init+0x84>)
 80006d4:	4a13      	ldr	r2, [pc, #76]	; (8000724 <MX_ETH_Init+0x94>)
 80006d6:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1524;
 80006d8:	4b0e      	ldr	r3, [pc, #56]	; (8000714 <MX_ETH_Init+0x84>)
 80006da:	f240 52f4 	movw	r2, #1524	; 0x5f4
 80006de:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  if (HAL_ETH_Init(&heth) != HAL_OK)
 80006e0:	480c      	ldr	r0, [pc, #48]	; (8000714 <MX_ETH_Init+0x84>)
 80006e2:	f000 fde7 	bl	80012b4 <HAL_ETH_Init>
 80006e6:	4603      	mov	r3, r0
 80006e8:	2b00      	cmp	r3, #0
 80006ea:	d001      	beq.n	80006f0 <MX_ETH_Init+0x60>
  {
    Error_Handler();
 80006ec:	f000 fa16 	bl	8000b1c <Error_Handler>
  }

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 80006f0:	2238      	movs	r2, #56	; 0x38
 80006f2:	2100      	movs	r1, #0
 80006f4:	480c      	ldr	r0, [pc, #48]	; (8000728 <MX_ETH_Init+0x98>)
 80006f6:	f004 fd45 	bl	8005184 <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 80006fa:	4b0b      	ldr	r3, [pc, #44]	; (8000728 <MX_ETH_Init+0x98>)
 80006fc:	2221      	movs	r2, #33	; 0x21
 80006fe:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 8000700:	4b09      	ldr	r3, [pc, #36]	; (8000728 <MX_ETH_Init+0x98>)
 8000702:	f44f 0240 	mov.w	r2, #12582912	; 0xc00000
 8000706:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 8000708:	4b07      	ldr	r3, [pc, #28]	; (8000728 <MX_ETH_Init+0x98>)
 800070a:	2200      	movs	r2, #0
 800070c:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN ETH_Init 2 */

  /* USER CODE END ETH_Init 2 */

}
 800070e:	bf00      	nop
 8000710:	bd80      	pop	{r7, pc}
 8000712:	bf00      	nop
 8000714:	200003f8 	.word	0x200003f8
 8000718:	40028000 	.word	0x40028000
 800071c:	20000a6c 	.word	0x20000a6c
 8000720:	20000358 	.word	0x20000358
 8000724:	200002b8 	.word	0x200002b8
 8000728:	20000280 	.word	0x20000280

0800072c <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 800072c:	b580      	push	{r7, lr}
 800072e:	b086      	sub	sp, #24
 8000730:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000732:	f107 0308 	add.w	r3, r7, #8
 8000736:	2200      	movs	r2, #0
 8000738:	601a      	str	r2, [r3, #0]
 800073a:	605a      	str	r2, [r3, #4]
 800073c:	609a      	str	r2, [r3, #8]
 800073e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000740:	463b      	mov	r3, r7
 8000742:	2200      	movs	r2, #0
 8000744:	601a      	str	r2, [r3, #0]
 8000746:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000748:	4b1e      	ldr	r3, [pc, #120]	; (80007c4 <MX_TIM1_Init+0x98>)
 800074a:	4a1f      	ldr	r2, [pc, #124]	; (80007c8 <MX_TIM1_Init+0x9c>)
 800074c:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 800074e:	4b1d      	ldr	r3, [pc, #116]	; (80007c4 <MX_TIM1_Init+0x98>)
 8000750:	2200      	movs	r2, #0
 8000752:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000754:	4b1b      	ldr	r3, [pc, #108]	; (80007c4 <MX_TIM1_Init+0x98>)
 8000756:	2200      	movs	r2, #0
 8000758:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 800075a:	4b1a      	ldr	r3, [pc, #104]	; (80007c4 <MX_TIM1_Init+0x98>)
 800075c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000760:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000762:	4b18      	ldr	r3, [pc, #96]	; (80007c4 <MX_TIM1_Init+0x98>)
 8000764:	2200      	movs	r2, #0
 8000766:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000768:	4b16      	ldr	r3, [pc, #88]	; (80007c4 <MX_TIM1_Init+0x98>)
 800076a:	2200      	movs	r2, #0
 800076c:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800076e:	4b15      	ldr	r3, [pc, #84]	; (80007c4 <MX_TIM1_Init+0x98>)
 8000770:	2200      	movs	r2, #0
 8000772:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000774:	4813      	ldr	r0, [pc, #76]	; (80007c4 <MX_TIM1_Init+0x98>)
 8000776:	f002 f845 	bl	8002804 <HAL_TIM_Base_Init>
 800077a:	4603      	mov	r3, r0
 800077c:	2b00      	cmp	r3, #0
 800077e:	d001      	beq.n	8000784 <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 8000780:	f000 f9cc 	bl	8000b1c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000784:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000788:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800078a:	f107 0308 	add.w	r3, r7, #8
 800078e:	4619      	mov	r1, r3
 8000790:	480c      	ldr	r0, [pc, #48]	; (80007c4 <MX_TIM1_Init+0x98>)
 8000792:	f002 f886 	bl	80028a2 <HAL_TIM_ConfigClockSource>
 8000796:	4603      	mov	r3, r0
 8000798:	2b00      	cmp	r3, #0
 800079a:	d001      	beq.n	80007a0 <MX_TIM1_Init+0x74>
  {
    Error_Handler();
 800079c:	f000 f9be 	bl	8000b1c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80007a0:	2300      	movs	r3, #0
 80007a2:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80007a4:	2300      	movs	r3, #0
 80007a6:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80007a8:	463b      	mov	r3, r7
 80007aa:	4619      	mov	r1, r3
 80007ac:	4805      	ldr	r0, [pc, #20]	; (80007c4 <MX_TIM1_Init+0x98>)
 80007ae:	f002 fa79 	bl	8002ca4 <HAL_TIMEx_MasterConfigSynchronization>
 80007b2:	4603      	mov	r3, r0
 80007b4:	2b00      	cmp	r3, #0
 80007b6:	d001      	beq.n	80007bc <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 80007b8:	f000 f9b0 	bl	8000b1c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 80007bc:	bf00      	nop
 80007be:	3718      	adds	r7, #24
 80007c0:	46bd      	mov	sp, r7
 80007c2:	bd80      	pop	{r7, pc}
 80007c4:	200004a8 	.word	0x200004a8
 80007c8:	40010000 	.word	0x40010000

080007cc <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 80007cc:	b580      	push	{r7, lr}
 80007ce:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80007d0:	4b11      	ldr	r3, [pc, #68]	; (8000818 <MX_USART3_UART_Init+0x4c>)
 80007d2:	4a12      	ldr	r2, [pc, #72]	; (800081c <MX_USART3_UART_Init+0x50>)
 80007d4:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80007d6:	4b10      	ldr	r3, [pc, #64]	; (8000818 <MX_USART3_UART_Init+0x4c>)
 80007d8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80007dc:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80007de:	4b0e      	ldr	r3, [pc, #56]	; (8000818 <MX_USART3_UART_Init+0x4c>)
 80007e0:	2200      	movs	r2, #0
 80007e2:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80007e4:	4b0c      	ldr	r3, [pc, #48]	; (8000818 <MX_USART3_UART_Init+0x4c>)
 80007e6:	2200      	movs	r2, #0
 80007e8:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80007ea:	4b0b      	ldr	r3, [pc, #44]	; (8000818 <MX_USART3_UART_Init+0x4c>)
 80007ec:	2200      	movs	r2, #0
 80007ee:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80007f0:	4b09      	ldr	r3, [pc, #36]	; (8000818 <MX_USART3_UART_Init+0x4c>)
 80007f2:	220c      	movs	r2, #12
 80007f4:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80007f6:	4b08      	ldr	r3, [pc, #32]	; (8000818 <MX_USART3_UART_Init+0x4c>)
 80007f8:	2200      	movs	r2, #0
 80007fa:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80007fc:	4b06      	ldr	r3, [pc, #24]	; (8000818 <MX_USART3_UART_Init+0x4c>)
 80007fe:	2200      	movs	r2, #0
 8000800:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000802:	4805      	ldr	r0, [pc, #20]	; (8000818 <MX_USART3_UART_Init+0x4c>)
 8000804:	f002 faca 	bl	8002d9c <HAL_UART_Init>
 8000808:	4603      	mov	r3, r0
 800080a:	2b00      	cmp	r3, #0
 800080c:	d001      	beq.n	8000812 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 800080e:	f000 f985 	bl	8000b1c <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000812:	bf00      	nop
 8000814:	bd80      	pop	{r7, pc}
 8000816:	bf00      	nop
 8000818:	200004f0 	.word	0x200004f0
 800081c:	40004800 	.word	0x40004800

08000820 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 8000820:	b580      	push	{r7, lr}
 8000822:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8000824:	4b14      	ldr	r3, [pc, #80]	; (8000878 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000826:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800082a:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 800082c:	4b12      	ldr	r3, [pc, #72]	; (8000878 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800082e:	2204      	movs	r2, #4
 8000830:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8000832:	4b11      	ldr	r3, [pc, #68]	; (8000878 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000834:	2202      	movs	r2, #2
 8000836:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8000838:	4b0f      	ldr	r3, [pc, #60]	; (8000878 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800083a:	2200      	movs	r2, #0
 800083c:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800083e:	4b0e      	ldr	r3, [pc, #56]	; (8000878 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000840:	2202      	movs	r2, #2
 8000842:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 8000844:	4b0c      	ldr	r3, [pc, #48]	; (8000878 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000846:	2201      	movs	r2, #1
 8000848:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800084a:	4b0b      	ldr	r3, [pc, #44]	; (8000878 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800084c:	2200      	movs	r2, #0
 800084e:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8000850:	4b09      	ldr	r3, [pc, #36]	; (8000878 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000852:	2200      	movs	r2, #0
 8000854:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8000856:	4b08      	ldr	r3, [pc, #32]	; (8000878 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000858:	2201      	movs	r2, #1
 800085a:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800085c:	4b06      	ldr	r3, [pc, #24]	; (8000878 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800085e:	2200      	movs	r2, #0
 8000860:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8000862:	4805      	ldr	r0, [pc, #20]	; (8000878 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000864:	f001 fa19 	bl	8001c9a <HAL_PCD_Init>
 8000868:	4603      	mov	r3, r0
 800086a:	2b00      	cmp	r3, #0
 800086c:	d001      	beq.n	8000872 <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 800086e:	f000 f955 	bl	8000b1c <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8000872:	bf00      	nop
 8000874:	bd80      	pop	{r7, pc}
 8000876:	bf00      	nop
 8000878:	20000534 	.word	0x20000534

0800087c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800087c:	b580      	push	{r7, lr}
 800087e:	b08c      	sub	sp, #48	; 0x30
 8000880:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000882:	f107 031c 	add.w	r3, r7, #28
 8000886:	2200      	movs	r2, #0
 8000888:	601a      	str	r2, [r3, #0]
 800088a:	605a      	str	r2, [r3, #4]
 800088c:	609a      	str	r2, [r3, #8]
 800088e:	60da      	str	r2, [r3, #12]
 8000890:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000892:	2300      	movs	r3, #0
 8000894:	61bb      	str	r3, [r7, #24]
 8000896:	4b4c      	ldr	r3, [pc, #304]	; (80009c8 <MX_GPIO_Init+0x14c>)
 8000898:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800089a:	4a4b      	ldr	r2, [pc, #300]	; (80009c8 <MX_GPIO_Init+0x14c>)
 800089c:	f043 0304 	orr.w	r3, r3, #4
 80008a0:	6313      	str	r3, [r2, #48]	; 0x30
 80008a2:	4b49      	ldr	r3, [pc, #292]	; (80009c8 <MX_GPIO_Init+0x14c>)
 80008a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008a6:	f003 0304 	and.w	r3, r3, #4
 80008aa:	61bb      	str	r3, [r7, #24]
 80008ac:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80008ae:	2300      	movs	r3, #0
 80008b0:	617b      	str	r3, [r7, #20]
 80008b2:	4b45      	ldr	r3, [pc, #276]	; (80009c8 <MX_GPIO_Init+0x14c>)
 80008b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008b6:	4a44      	ldr	r2, [pc, #272]	; (80009c8 <MX_GPIO_Init+0x14c>)
 80008b8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80008bc:	6313      	str	r3, [r2, #48]	; 0x30
 80008be:	4b42      	ldr	r3, [pc, #264]	; (80009c8 <MX_GPIO_Init+0x14c>)
 80008c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008c2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80008c6:	617b      	str	r3, [r7, #20]
 80008c8:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80008ca:	2300      	movs	r3, #0
 80008cc:	613b      	str	r3, [r7, #16]
 80008ce:	4b3e      	ldr	r3, [pc, #248]	; (80009c8 <MX_GPIO_Init+0x14c>)
 80008d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008d2:	4a3d      	ldr	r2, [pc, #244]	; (80009c8 <MX_GPIO_Init+0x14c>)
 80008d4:	f043 0301 	orr.w	r3, r3, #1
 80008d8:	6313      	str	r3, [r2, #48]	; 0x30
 80008da:	4b3b      	ldr	r3, [pc, #236]	; (80009c8 <MX_GPIO_Init+0x14c>)
 80008dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008de:	f003 0301 	and.w	r3, r3, #1
 80008e2:	613b      	str	r3, [r7, #16]
 80008e4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80008e6:	2300      	movs	r3, #0
 80008e8:	60fb      	str	r3, [r7, #12]
 80008ea:	4b37      	ldr	r3, [pc, #220]	; (80009c8 <MX_GPIO_Init+0x14c>)
 80008ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008ee:	4a36      	ldr	r2, [pc, #216]	; (80009c8 <MX_GPIO_Init+0x14c>)
 80008f0:	f043 0302 	orr.w	r3, r3, #2
 80008f4:	6313      	str	r3, [r2, #48]	; 0x30
 80008f6:	4b34      	ldr	r3, [pc, #208]	; (80009c8 <MX_GPIO_Init+0x14c>)
 80008f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008fa:	f003 0302 	and.w	r3, r3, #2
 80008fe:	60fb      	str	r3, [r7, #12]
 8000900:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000902:	2300      	movs	r3, #0
 8000904:	60bb      	str	r3, [r7, #8]
 8000906:	4b30      	ldr	r3, [pc, #192]	; (80009c8 <MX_GPIO_Init+0x14c>)
 8000908:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800090a:	4a2f      	ldr	r2, [pc, #188]	; (80009c8 <MX_GPIO_Init+0x14c>)
 800090c:	f043 0308 	orr.w	r3, r3, #8
 8000910:	6313      	str	r3, [r2, #48]	; 0x30
 8000912:	4b2d      	ldr	r3, [pc, #180]	; (80009c8 <MX_GPIO_Init+0x14c>)
 8000914:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000916:	f003 0308 	and.w	r3, r3, #8
 800091a:	60bb      	str	r3, [r7, #8]
 800091c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800091e:	2300      	movs	r3, #0
 8000920:	607b      	str	r3, [r7, #4]
 8000922:	4b29      	ldr	r3, [pc, #164]	; (80009c8 <MX_GPIO_Init+0x14c>)
 8000924:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000926:	4a28      	ldr	r2, [pc, #160]	; (80009c8 <MX_GPIO_Init+0x14c>)
 8000928:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800092c:	6313      	str	r3, [r2, #48]	; 0x30
 800092e:	4b26      	ldr	r3, [pc, #152]	; (80009c8 <MX_GPIO_Init+0x14c>)
 8000930:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000932:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000936:	607b      	str	r3, [r7, #4]
 8000938:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 800093a:	2200      	movs	r2, #0
 800093c:	f244 0181 	movw	r1, #16513	; 0x4081
 8000940:	4822      	ldr	r0, [pc, #136]	; (80009cc <MX_GPIO_Init+0x150>)
 8000942:	f001 f977 	bl	8001c34 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8000946:	2200      	movs	r2, #0
 8000948:	2140      	movs	r1, #64	; 0x40
 800094a:	4821      	ldr	r0, [pc, #132]	; (80009d0 <MX_GPIO_Init+0x154>)
 800094c:	f001 f972 	bl	8001c34 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 8000950:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000954:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000956:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 800095a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800095c:	2300      	movs	r3, #0
 800095e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8000960:	f107 031c 	add.w	r3, r7, #28
 8000964:	4619      	mov	r1, r3
 8000966:	481b      	ldr	r0, [pc, #108]	; (80009d4 <MX_GPIO_Init+0x158>)
 8000968:	f000 ffb8 	bl	80018dc <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 800096c:	f244 0381 	movw	r3, #16513	; 0x4081
 8000970:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000972:	2301      	movs	r3, #1
 8000974:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000976:	2300      	movs	r3, #0
 8000978:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800097a:	2300      	movs	r3, #0
 800097c:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800097e:	f107 031c 	add.w	r3, r7, #28
 8000982:	4619      	mov	r1, r3
 8000984:	4811      	ldr	r0, [pc, #68]	; (80009cc <MX_GPIO_Init+0x150>)
 8000986:	f000 ffa9 	bl	80018dc <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 800098a:	2340      	movs	r3, #64	; 0x40
 800098c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800098e:	2301      	movs	r3, #1
 8000990:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000992:	2300      	movs	r3, #0
 8000994:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000996:	2300      	movs	r3, #0
 8000998:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 800099a:	f107 031c 	add.w	r3, r7, #28
 800099e:	4619      	mov	r1, r3
 80009a0:	480b      	ldr	r0, [pc, #44]	; (80009d0 <MX_GPIO_Init+0x154>)
 80009a2:	f000 ff9b 	bl	80018dc <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 80009a6:	2380      	movs	r3, #128	; 0x80
 80009a8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80009aa:	2300      	movs	r3, #0
 80009ac:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009ae:	2300      	movs	r3, #0
 80009b0:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 80009b2:	f107 031c 	add.w	r3, r7, #28
 80009b6:	4619      	mov	r1, r3
 80009b8:	4805      	ldr	r0, [pc, #20]	; (80009d0 <MX_GPIO_Init+0x154>)
 80009ba:	f000 ff8f 	bl	80018dc <HAL_GPIO_Init>

}
 80009be:	bf00      	nop
 80009c0:	3730      	adds	r7, #48	; 0x30
 80009c2:	46bd      	mov	sp, r7
 80009c4:	bd80      	pop	{r7, pc}
 80009c6:	bf00      	nop
 80009c8:	40023800 	.word	0x40023800
 80009cc:	40020400 	.word	0x40020400
 80009d0:	40021800 	.word	0x40021800
 80009d4:	40020800 	.word	0x40020800

080009d8 <StartWaitTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartWaitTask */
void StartWaitTask(void const * argument)
{
 80009d8:	b580      	push	{r7, lr}
 80009da:	b086      	sub	sp, #24
 80009dc:	af00      	add	r7, sp, #0
 80009de:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  int i = 0;
 80009e0:	2300      	movs	r3, #0
 80009e2:	617b      	str	r3, [r7, #20]
  int dummy = 0;
 80009e4:	2300      	movs	r3, #0
 80009e6:	613b      	str	r3, [r7, #16]

  /* Infinite loop */
  for(;;)
  {
	  HAL_StatusTypeDef stat = HAL_UART_Receive(&huart3, testReceiveData, 1, 5000);
 80009e8:	f241 3388 	movw	r3, #5000	; 0x1388
 80009ec:	2201      	movs	r2, #1
 80009ee:	4928      	ldr	r1, [pc, #160]	; (8000a90 <StartWaitTask+0xb8>)
 80009f0:	4828      	ldr	r0, [pc, #160]	; (8000a94 <StartWaitTask+0xbc>)
 80009f2:	f002 fab2 	bl	8002f5a <HAL_UART_Receive>
 80009f6:	4603      	mov	r3, r0
 80009f8:	73fb      	strb	r3, [r7, #15]
	  if(stat == HAL_OK)
 80009fa:	7bfb      	ldrb	r3, [r7, #15]
 80009fc:	2b00      	cmp	r3, #0
 80009fe:	d142      	bne.n	8000a86 <StartWaitTask+0xae>
	  {
		Rx_data[i++] = testReceiveData[0]; //AT+LED
 8000a00:	697b      	ldr	r3, [r7, #20]
 8000a02:	1c5a      	adds	r2, r3, #1
 8000a04:	617a      	str	r2, [r7, #20]
 8000a06:	4a22      	ldr	r2, [pc, #136]	; (8000a90 <StartWaitTask+0xb8>)
 8000a08:	7811      	ldrb	r1, [r2, #0]
 8000a0a:	4a23      	ldr	r2, [pc, #140]	; (8000a98 <StartWaitTask+0xc0>)
 8000a0c:	54d1      	strb	r1, [r2, r3]
		HAL_UART_Transmit(&huart3, testReceiveData, 1, 1000);
 8000a0e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000a12:	2201      	movs	r2, #1
 8000a14:	491e      	ldr	r1, [pc, #120]	; (8000a90 <StartWaitTask+0xb8>)
 8000a16:	481f      	ldr	r0, [pc, #124]	; (8000a94 <StartWaitTask+0xbc>)
 8000a18:	f002 fa0d 	bl	8002e36 <HAL_UART_Transmit>

	  	if(!strncmp(Rx_data,"AT+GREEN",sizeof(Rx_data)))
 8000a1c:	491f      	ldr	r1, [pc, #124]	; (8000a9c <StartWaitTask+0xc4>)
 8000a1e:	481e      	ldr	r0, [pc, #120]	; (8000a98 <StartWaitTask+0xc0>)
 8000a20:	f7ff fbe6 	bl	80001f0 <strcmp>
 8000a24:	4603      	mov	r3, r0
 8000a26:	2b00      	cmp	r3, #0
 8000a28:	d10a      	bne.n	8000a40 <StartWaitTask+0x68>
	  	{
	  		memset(Rx_data, 0, sizeof(Rx_data));
 8000a2a:	220a      	movs	r2, #10
 8000a2c:	2100      	movs	r1, #0
 8000a2e:	481a      	ldr	r0, [pc, #104]	; (8000a98 <StartWaitTask+0xc0>)
 8000a30:	f004 fba8 	bl	8005184 <memset>
	  		i = 0;
 8000a34:	2300      	movs	r3, #0
 8000a36:	617b      	str	r3, [r7, #20]
	  		green_flag = 1;
 8000a38:	4b19      	ldr	r3, [pc, #100]	; (8000aa0 <StartWaitTask+0xc8>)
 8000a3a:	2201      	movs	r2, #1
 8000a3c:	601a      	str	r2, [r3, #0]
 8000a3e:	e022      	b.n	8000a86 <StartWaitTask+0xae>
	  	}

	  	else if(!strncmp(Rx_data,"AT+RED",sizeof(Rx_data)))
 8000a40:	4918      	ldr	r1, [pc, #96]	; (8000aa4 <StartWaitTask+0xcc>)
 8000a42:	4815      	ldr	r0, [pc, #84]	; (8000a98 <StartWaitTask+0xc0>)
 8000a44:	f7ff fbd4 	bl	80001f0 <strcmp>
 8000a48:	4603      	mov	r3, r0
 8000a4a:	2b00      	cmp	r3, #0
 8000a4c:	d10a      	bne.n	8000a64 <StartWaitTask+0x8c>
	  	{
	  		memset(Rx_data, 0, sizeof(Rx_data));
 8000a4e:	220a      	movs	r2, #10
 8000a50:	2100      	movs	r1, #0
 8000a52:	4811      	ldr	r0, [pc, #68]	; (8000a98 <StartWaitTask+0xc0>)
 8000a54:	f004 fb96 	bl	8005184 <memset>
	  		i = 0;
 8000a58:	2300      	movs	r3, #0
 8000a5a:	617b      	str	r3, [r7, #20]
	  		red_flag = 1;
 8000a5c:	4b12      	ldr	r3, [pc, #72]	; (8000aa8 <StartWaitTask+0xd0>)
 8000a5e:	2201      	movs	r2, #1
 8000a60:	601a      	str	r2, [r3, #0]
 8000a62:	e010      	b.n	8000a86 <StartWaitTask+0xae>
	  	}

	  	else if(!strncmp(Rx_data,"AT+BLUE",sizeof(Rx_data)))
 8000a64:	4911      	ldr	r1, [pc, #68]	; (8000aac <StartWaitTask+0xd4>)
 8000a66:	480c      	ldr	r0, [pc, #48]	; (8000a98 <StartWaitTask+0xc0>)
 8000a68:	f7ff fbc2 	bl	80001f0 <strcmp>
 8000a6c:	4603      	mov	r3, r0
 8000a6e:	2b00      	cmp	r3, #0
 8000a70:	d109      	bne.n	8000a86 <StartWaitTask+0xae>
	  	{
	  		memset(Rx_data, 0, sizeof(Rx_data));
 8000a72:	220a      	movs	r2, #10
 8000a74:	2100      	movs	r1, #0
 8000a76:	4808      	ldr	r0, [pc, #32]	; (8000a98 <StartWaitTask+0xc0>)
 8000a78:	f004 fb84 	bl	8005184 <memset>
	  		i = 0;
 8000a7c:	2300      	movs	r3, #0
 8000a7e:	617b      	str	r3, [r7, #20]
	  		blue_flag = 1;
 8000a80:	4b0b      	ldr	r3, [pc, #44]	; (8000ab0 <StartWaitTask+0xd8>)
 8000a82:	2201      	movs	r2, #1
 8000a84:	601a      	str	r2, [r3, #0]
	  	}
	  }
    osDelay(1);
 8000a86:	2001      	movs	r0, #1
 8000a88:	f003 f959 	bl	8003d3e <osDelay>
  {
 8000a8c:	e7ac      	b.n	80009e8 <StartWaitTask+0x10>
 8000a8e:	bf00      	nop
 8000a90:	20000a54 	.word	0x20000a54
 8000a94:	200004f0 	.word	0x200004f0
 8000a98:	20000a48 	.word	0x20000a48
 8000a9c:	080051fc 	.word	0x080051fc
 8000aa0:	20000a64 	.word	0x20000a64
 8000aa4:	08005208 	.word	0x08005208
 8000aa8:	20000a60 	.word	0x20000a60
 8000aac:	08005210 	.word	0x08005210
 8000ab0:	20000a68 	.word	0x20000a68

08000ab4 <StartWriteTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartWriteTask */
void StartWriteTask(void const * argument)
{
 8000ab4:	b580      	push	{r7, lr}
 8000ab6:	b082      	sub	sp, #8
 8000ab8:	af00      	add	r7, sp, #0
 8000aba:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartWriteTask */
  /* Infinite loop */
  for(;;)
  {
	if(red_flag)
 8000abc:	4b13      	ldr	r3, [pc, #76]	; (8000b0c <StartWriteTask+0x58>)
 8000abe:	681b      	ldr	r3, [r3, #0]
 8000ac0:	2b00      	cmp	r3, #0
 8000ac2:	d008      	beq.n	8000ad6 <StartWriteTask+0x22>
	{
		HAL_GPIO_TogglePin(LD3_GPIO_Port, LD3_Pin); //RED
 8000ac4:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000ac8:	4811      	ldr	r0, [pc, #68]	; (8000b10 <StartWriteTask+0x5c>)
 8000aca:	f001 f8cc 	bl	8001c66 <HAL_GPIO_TogglePin>
		red_flag = 0;
 8000ace:	4b0f      	ldr	r3, [pc, #60]	; (8000b0c <StartWriteTask+0x58>)
 8000ad0:	2200      	movs	r2, #0
 8000ad2:	601a      	str	r2, [r3, #0]
 8000ad4:	e016      	b.n	8000b04 <StartWriteTask+0x50>
	}
	else if(green_flag)
 8000ad6:	4b0f      	ldr	r3, [pc, #60]	; (8000b14 <StartWriteTask+0x60>)
 8000ad8:	681b      	ldr	r3, [r3, #0]
 8000ada:	2b00      	cmp	r3, #0
 8000adc:	d007      	beq.n	8000aee <StartWriteTask+0x3a>
	{
		HAL_GPIO_TogglePin(LD1_GPIO_Port, LD1_Pin); //GREEN
 8000ade:	2101      	movs	r1, #1
 8000ae0:	480b      	ldr	r0, [pc, #44]	; (8000b10 <StartWriteTask+0x5c>)
 8000ae2:	f001 f8c0 	bl	8001c66 <HAL_GPIO_TogglePin>
		green_flag = 0;
 8000ae6:	4b0b      	ldr	r3, [pc, #44]	; (8000b14 <StartWriteTask+0x60>)
 8000ae8:	2200      	movs	r2, #0
 8000aea:	601a      	str	r2, [r3, #0]
 8000aec:	e00a      	b.n	8000b04 <StartWriteTask+0x50>
	}
	else if(blue_flag)
 8000aee:	4b0a      	ldr	r3, [pc, #40]	; (8000b18 <StartWriteTask+0x64>)
 8000af0:	681b      	ldr	r3, [r3, #0]
 8000af2:	2b00      	cmp	r3, #0
 8000af4:	d006      	beq.n	8000b04 <StartWriteTask+0x50>
	{
		HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin); //BLUE
 8000af6:	2180      	movs	r1, #128	; 0x80
 8000af8:	4805      	ldr	r0, [pc, #20]	; (8000b10 <StartWriteTask+0x5c>)
 8000afa:	f001 f8b4 	bl	8001c66 <HAL_GPIO_TogglePin>
		blue_flag = 0;
 8000afe:	4b06      	ldr	r3, [pc, #24]	; (8000b18 <StartWriteTask+0x64>)
 8000b00:	2200      	movs	r2, #0
 8000b02:	601a      	str	r2, [r3, #0]
	}
    osDelay(1);
 8000b04:	2001      	movs	r0, #1
 8000b06:	f003 f91a 	bl	8003d3e <osDelay>
	if(red_flag)
 8000b0a:	e7d7      	b.n	8000abc <StartWriteTask+0x8>
 8000b0c:	20000a60 	.word	0x20000a60
 8000b10:	40020400 	.word	0x40020400
 8000b14:	20000a64 	.word	0x20000a64
 8000b18:	20000a68 	.word	0x20000a68

08000b1c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000b1c:	b480      	push	{r7}
 8000b1e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000b20:	b672      	cpsid	i
}
 8000b22:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000b24:	e7fe      	b.n	8000b24 <Error_Handler+0x8>
	...

08000b28 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000b28:	b580      	push	{r7, lr}
 8000b2a:	b082      	sub	sp, #8
 8000b2c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b2e:	2300      	movs	r3, #0
 8000b30:	607b      	str	r3, [r7, #4]
 8000b32:	4b12      	ldr	r3, [pc, #72]	; (8000b7c <HAL_MspInit+0x54>)
 8000b34:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b36:	4a11      	ldr	r2, [pc, #68]	; (8000b7c <HAL_MspInit+0x54>)
 8000b38:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000b3c:	6453      	str	r3, [r2, #68]	; 0x44
 8000b3e:	4b0f      	ldr	r3, [pc, #60]	; (8000b7c <HAL_MspInit+0x54>)
 8000b40:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b42:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000b46:	607b      	str	r3, [r7, #4]
 8000b48:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b4a:	2300      	movs	r3, #0
 8000b4c:	603b      	str	r3, [r7, #0]
 8000b4e:	4b0b      	ldr	r3, [pc, #44]	; (8000b7c <HAL_MspInit+0x54>)
 8000b50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b52:	4a0a      	ldr	r2, [pc, #40]	; (8000b7c <HAL_MspInit+0x54>)
 8000b54:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000b58:	6413      	str	r3, [r2, #64]	; 0x40
 8000b5a:	4b08      	ldr	r3, [pc, #32]	; (8000b7c <HAL_MspInit+0x54>)
 8000b5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b5e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000b62:	603b      	str	r3, [r7, #0]
 8000b64:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000b66:	2200      	movs	r2, #0
 8000b68:	210f      	movs	r1, #15
 8000b6a:	f06f 0001 	mvn.w	r0, #1
 8000b6e:	f000 fb6a 	bl	8001246 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000b72:	bf00      	nop
 8000b74:	3708      	adds	r7, #8
 8000b76:	46bd      	mov	sp, r7
 8000b78:	bd80      	pop	{r7, pc}
 8000b7a:	bf00      	nop
 8000b7c:	40023800 	.word	0x40023800

08000b80 <HAL_ETH_MspInit>:
* This function configures the hardware resources used in this example
* @param heth: ETH handle pointer
* @retval None
*/
void HAL_ETH_MspInit(ETH_HandleTypeDef* heth)
{
 8000b80:	b580      	push	{r7, lr}
 8000b82:	b08e      	sub	sp, #56	; 0x38
 8000b84:	af00      	add	r7, sp, #0
 8000b86:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b88:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b8c:	2200      	movs	r2, #0
 8000b8e:	601a      	str	r2, [r3, #0]
 8000b90:	605a      	str	r2, [r3, #4]
 8000b92:	609a      	str	r2, [r3, #8]
 8000b94:	60da      	str	r2, [r3, #12]
 8000b96:	611a      	str	r2, [r3, #16]
  if(heth->Instance==ETH)
 8000b98:	687b      	ldr	r3, [r7, #4]
 8000b9a:	681b      	ldr	r3, [r3, #0]
 8000b9c:	4a55      	ldr	r2, [pc, #340]	; (8000cf4 <HAL_ETH_MspInit+0x174>)
 8000b9e:	4293      	cmp	r3, r2
 8000ba0:	f040 80a4 	bne.w	8000cec <HAL_ETH_MspInit+0x16c>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ETH_CLK_ENABLE();
 8000ba4:	2300      	movs	r3, #0
 8000ba6:	623b      	str	r3, [r7, #32]
 8000ba8:	4b53      	ldr	r3, [pc, #332]	; (8000cf8 <HAL_ETH_MspInit+0x178>)
 8000baa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bac:	4a52      	ldr	r2, [pc, #328]	; (8000cf8 <HAL_ETH_MspInit+0x178>)
 8000bae:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000bb2:	6313      	str	r3, [r2, #48]	; 0x30
 8000bb4:	4b50      	ldr	r3, [pc, #320]	; (8000cf8 <HAL_ETH_MspInit+0x178>)
 8000bb6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bb8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000bbc:	623b      	str	r3, [r7, #32]
 8000bbe:	6a3b      	ldr	r3, [r7, #32]
 8000bc0:	2300      	movs	r3, #0
 8000bc2:	61fb      	str	r3, [r7, #28]
 8000bc4:	4b4c      	ldr	r3, [pc, #304]	; (8000cf8 <HAL_ETH_MspInit+0x178>)
 8000bc6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bc8:	4a4b      	ldr	r2, [pc, #300]	; (8000cf8 <HAL_ETH_MspInit+0x178>)
 8000bca:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8000bce:	6313      	str	r3, [r2, #48]	; 0x30
 8000bd0:	4b49      	ldr	r3, [pc, #292]	; (8000cf8 <HAL_ETH_MspInit+0x178>)
 8000bd2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bd4:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8000bd8:	61fb      	str	r3, [r7, #28]
 8000bda:	69fb      	ldr	r3, [r7, #28]
 8000bdc:	2300      	movs	r3, #0
 8000bde:	61bb      	str	r3, [r7, #24]
 8000be0:	4b45      	ldr	r3, [pc, #276]	; (8000cf8 <HAL_ETH_MspInit+0x178>)
 8000be2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000be4:	4a44      	ldr	r2, [pc, #272]	; (8000cf8 <HAL_ETH_MspInit+0x178>)
 8000be6:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8000bea:	6313      	str	r3, [r2, #48]	; 0x30
 8000bec:	4b42      	ldr	r3, [pc, #264]	; (8000cf8 <HAL_ETH_MspInit+0x178>)
 8000bee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bf0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8000bf4:	61bb      	str	r3, [r7, #24]
 8000bf6:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000bf8:	2300      	movs	r3, #0
 8000bfa:	617b      	str	r3, [r7, #20]
 8000bfc:	4b3e      	ldr	r3, [pc, #248]	; (8000cf8 <HAL_ETH_MspInit+0x178>)
 8000bfe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c00:	4a3d      	ldr	r2, [pc, #244]	; (8000cf8 <HAL_ETH_MspInit+0x178>)
 8000c02:	f043 0304 	orr.w	r3, r3, #4
 8000c06:	6313      	str	r3, [r2, #48]	; 0x30
 8000c08:	4b3b      	ldr	r3, [pc, #236]	; (8000cf8 <HAL_ETH_MspInit+0x178>)
 8000c0a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c0c:	f003 0304 	and.w	r3, r3, #4
 8000c10:	617b      	str	r3, [r7, #20]
 8000c12:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c14:	2300      	movs	r3, #0
 8000c16:	613b      	str	r3, [r7, #16]
 8000c18:	4b37      	ldr	r3, [pc, #220]	; (8000cf8 <HAL_ETH_MspInit+0x178>)
 8000c1a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c1c:	4a36      	ldr	r2, [pc, #216]	; (8000cf8 <HAL_ETH_MspInit+0x178>)
 8000c1e:	f043 0301 	orr.w	r3, r3, #1
 8000c22:	6313      	str	r3, [r2, #48]	; 0x30
 8000c24:	4b34      	ldr	r3, [pc, #208]	; (8000cf8 <HAL_ETH_MspInit+0x178>)
 8000c26:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c28:	f003 0301 	and.w	r3, r3, #1
 8000c2c:	613b      	str	r3, [r7, #16]
 8000c2e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c30:	2300      	movs	r3, #0
 8000c32:	60fb      	str	r3, [r7, #12]
 8000c34:	4b30      	ldr	r3, [pc, #192]	; (8000cf8 <HAL_ETH_MspInit+0x178>)
 8000c36:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c38:	4a2f      	ldr	r2, [pc, #188]	; (8000cf8 <HAL_ETH_MspInit+0x178>)
 8000c3a:	f043 0302 	orr.w	r3, r3, #2
 8000c3e:	6313      	str	r3, [r2, #48]	; 0x30
 8000c40:	4b2d      	ldr	r3, [pc, #180]	; (8000cf8 <HAL_ETH_MspInit+0x178>)
 8000c42:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c44:	f003 0302 	and.w	r3, r3, #2
 8000c48:	60fb      	str	r3, [r7, #12]
 8000c4a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8000c4c:	2300      	movs	r3, #0
 8000c4e:	60bb      	str	r3, [r7, #8]
 8000c50:	4b29      	ldr	r3, [pc, #164]	; (8000cf8 <HAL_ETH_MspInit+0x178>)
 8000c52:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c54:	4a28      	ldr	r2, [pc, #160]	; (8000cf8 <HAL_ETH_MspInit+0x178>)
 8000c56:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000c5a:	6313      	str	r3, [r2, #48]	; 0x30
 8000c5c:	4b26      	ldr	r3, [pc, #152]	; (8000cf8 <HAL_ETH_MspInit+0x178>)
 8000c5e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c60:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000c64:	60bb      	str	r3, [r7, #8]
 8000c66:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8000c68:	2332      	movs	r3, #50	; 0x32
 8000c6a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c6c:	2302      	movs	r3, #2
 8000c6e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c70:	2300      	movs	r3, #0
 8000c72:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c74:	2303      	movs	r3, #3
 8000c76:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000c78:	230b      	movs	r3, #11
 8000c7a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000c7c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c80:	4619      	mov	r1, r3
 8000c82:	481e      	ldr	r0, [pc, #120]	; (8000cfc <HAL_ETH_MspInit+0x17c>)
 8000c84:	f000 fe2a 	bl	80018dc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8000c88:	2386      	movs	r3, #134	; 0x86
 8000c8a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c8c:	2302      	movs	r3, #2
 8000c8e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c90:	2300      	movs	r3, #0
 8000c92:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c94:	2303      	movs	r3, #3
 8000c96:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000c98:	230b      	movs	r3, #11
 8000c9a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c9c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000ca0:	4619      	mov	r1, r3
 8000ca2:	4817      	ldr	r0, [pc, #92]	; (8000d00 <HAL_ETH_MspInit+0x180>)
 8000ca4:	f000 fe1a 	bl	80018dc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8000ca8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000cac:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cae:	2302      	movs	r3, #2
 8000cb0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cb2:	2300      	movs	r3, #0
 8000cb4:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000cb6:	2303      	movs	r3, #3
 8000cb8:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000cba:	230b      	movs	r3, #11
 8000cbc:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 8000cbe:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000cc2:	4619      	mov	r1, r3
 8000cc4:	480f      	ldr	r0, [pc, #60]	; (8000d04 <HAL_ETH_MspInit+0x184>)
 8000cc6:	f000 fe09 	bl	80018dc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 8000cca:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8000cce:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cd0:	2302      	movs	r3, #2
 8000cd2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cd4:	2300      	movs	r3, #0
 8000cd6:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000cd8:	2303      	movs	r3, #3
 8000cda:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000cdc:	230b      	movs	r3, #11
 8000cde:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000ce0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000ce4:	4619      	mov	r1, r3
 8000ce6:	4808      	ldr	r0, [pc, #32]	; (8000d08 <HAL_ETH_MspInit+0x188>)
 8000ce8:	f000 fdf8 	bl	80018dc <HAL_GPIO_Init>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }

}
 8000cec:	bf00      	nop
 8000cee:	3738      	adds	r7, #56	; 0x38
 8000cf0:	46bd      	mov	sp, r7
 8000cf2:	bd80      	pop	{r7, pc}
 8000cf4:	40028000 	.word	0x40028000
 8000cf8:	40023800 	.word	0x40023800
 8000cfc:	40020800 	.word	0x40020800
 8000d00:	40020000 	.word	0x40020000
 8000d04:	40020400 	.word	0x40020400
 8000d08:	40021800 	.word	0x40021800

08000d0c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000d0c:	b480      	push	{r7}
 8000d0e:	b085      	sub	sp, #20
 8000d10:	af00      	add	r7, sp, #0
 8000d12:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8000d14:	687b      	ldr	r3, [r7, #4]
 8000d16:	681b      	ldr	r3, [r3, #0]
 8000d18:	4a0b      	ldr	r2, [pc, #44]	; (8000d48 <HAL_TIM_Base_MspInit+0x3c>)
 8000d1a:	4293      	cmp	r3, r2
 8000d1c:	d10d      	bne.n	8000d3a <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000d1e:	2300      	movs	r3, #0
 8000d20:	60fb      	str	r3, [r7, #12]
 8000d22:	4b0a      	ldr	r3, [pc, #40]	; (8000d4c <HAL_TIM_Base_MspInit+0x40>)
 8000d24:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d26:	4a09      	ldr	r2, [pc, #36]	; (8000d4c <HAL_TIM_Base_MspInit+0x40>)
 8000d28:	f043 0301 	orr.w	r3, r3, #1
 8000d2c:	6453      	str	r3, [r2, #68]	; 0x44
 8000d2e:	4b07      	ldr	r3, [pc, #28]	; (8000d4c <HAL_TIM_Base_MspInit+0x40>)
 8000d30:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d32:	f003 0301 	and.w	r3, r3, #1
 8000d36:	60fb      	str	r3, [r7, #12]
 8000d38:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8000d3a:	bf00      	nop
 8000d3c:	3714      	adds	r7, #20
 8000d3e:	46bd      	mov	sp, r7
 8000d40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d44:	4770      	bx	lr
 8000d46:	bf00      	nop
 8000d48:	40010000 	.word	0x40010000
 8000d4c:	40023800 	.word	0x40023800

08000d50 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000d50:	b580      	push	{r7, lr}
 8000d52:	b08a      	sub	sp, #40	; 0x28
 8000d54:	af00      	add	r7, sp, #0
 8000d56:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d58:	f107 0314 	add.w	r3, r7, #20
 8000d5c:	2200      	movs	r2, #0
 8000d5e:	601a      	str	r2, [r3, #0]
 8000d60:	605a      	str	r2, [r3, #4]
 8000d62:	609a      	str	r2, [r3, #8]
 8000d64:	60da      	str	r2, [r3, #12]
 8000d66:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 8000d68:	687b      	ldr	r3, [r7, #4]
 8000d6a:	681b      	ldr	r3, [r3, #0]
 8000d6c:	4a1d      	ldr	r2, [pc, #116]	; (8000de4 <HAL_UART_MspInit+0x94>)
 8000d6e:	4293      	cmp	r3, r2
 8000d70:	d134      	bne.n	8000ddc <HAL_UART_MspInit+0x8c>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8000d72:	2300      	movs	r3, #0
 8000d74:	613b      	str	r3, [r7, #16]
 8000d76:	4b1c      	ldr	r3, [pc, #112]	; (8000de8 <HAL_UART_MspInit+0x98>)
 8000d78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d7a:	4a1b      	ldr	r2, [pc, #108]	; (8000de8 <HAL_UART_MspInit+0x98>)
 8000d7c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000d80:	6413      	str	r3, [r2, #64]	; 0x40
 8000d82:	4b19      	ldr	r3, [pc, #100]	; (8000de8 <HAL_UART_MspInit+0x98>)
 8000d84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d86:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000d8a:	613b      	str	r3, [r7, #16]
 8000d8c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000d8e:	2300      	movs	r3, #0
 8000d90:	60fb      	str	r3, [r7, #12]
 8000d92:	4b15      	ldr	r3, [pc, #84]	; (8000de8 <HAL_UART_MspInit+0x98>)
 8000d94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d96:	4a14      	ldr	r2, [pc, #80]	; (8000de8 <HAL_UART_MspInit+0x98>)
 8000d98:	f043 0308 	orr.w	r3, r3, #8
 8000d9c:	6313      	str	r3, [r2, #48]	; 0x30
 8000d9e:	4b12      	ldr	r3, [pc, #72]	; (8000de8 <HAL_UART_MspInit+0x98>)
 8000da0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000da2:	f003 0308 	and.w	r3, r3, #8
 8000da6:	60fb      	str	r3, [r7, #12]
 8000da8:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8000daa:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000dae:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000db0:	2302      	movs	r3, #2
 8000db2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000db4:	2300      	movs	r3, #0
 8000db6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000db8:	2303      	movs	r3, #3
 8000dba:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000dbc:	2307      	movs	r3, #7
 8000dbe:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000dc0:	f107 0314 	add.w	r3, r7, #20
 8000dc4:	4619      	mov	r1, r3
 8000dc6:	4809      	ldr	r0, [pc, #36]	; (8000dec <HAL_UART_MspInit+0x9c>)
 8000dc8:	f000 fd88 	bl	80018dc <HAL_GPIO_Init>

  /* USER CODE BEGIN USART3_MspInit 1 */
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8000dcc:	2200      	movs	r2, #0
 8000dce:	2100      	movs	r1, #0
 8000dd0:	2027      	movs	r0, #39	; 0x27
 8000dd2:	f000 fa38 	bl	8001246 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8000dd6:	2027      	movs	r0, #39	; 0x27
 8000dd8:	f000 fa51 	bl	800127e <HAL_NVIC_EnableIRQ>
  /* USER CODE END USART3_MspInit 1 */
  }

}
 8000ddc:	bf00      	nop
 8000dde:	3728      	adds	r7, #40	; 0x28
 8000de0:	46bd      	mov	sp, r7
 8000de2:	bd80      	pop	{r7, pc}
 8000de4:	40004800 	.word	0x40004800
 8000de8:	40023800 	.word	0x40023800
 8000dec:	40020c00 	.word	0x40020c00

08000df0 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8000df0:	b580      	push	{r7, lr}
 8000df2:	b08a      	sub	sp, #40	; 0x28
 8000df4:	af00      	add	r7, sp, #0
 8000df6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000df8:	f107 0314 	add.w	r3, r7, #20
 8000dfc:	2200      	movs	r2, #0
 8000dfe:	601a      	str	r2, [r3, #0]
 8000e00:	605a      	str	r2, [r3, #4]
 8000e02:	609a      	str	r2, [r3, #8]
 8000e04:	60da      	str	r2, [r3, #12]
 8000e06:	611a      	str	r2, [r3, #16]
  if(hpcd->Instance==USB_OTG_FS)
 8000e08:	687b      	ldr	r3, [r7, #4]
 8000e0a:	681b      	ldr	r3, [r3, #0]
 8000e0c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8000e10:	d13f      	bne.n	8000e92 <HAL_PCD_MspInit+0xa2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e12:	2300      	movs	r3, #0
 8000e14:	613b      	str	r3, [r7, #16]
 8000e16:	4b21      	ldr	r3, [pc, #132]	; (8000e9c <HAL_PCD_MspInit+0xac>)
 8000e18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e1a:	4a20      	ldr	r2, [pc, #128]	; (8000e9c <HAL_PCD_MspInit+0xac>)
 8000e1c:	f043 0301 	orr.w	r3, r3, #1
 8000e20:	6313      	str	r3, [r2, #48]	; 0x30
 8000e22:	4b1e      	ldr	r3, [pc, #120]	; (8000e9c <HAL_PCD_MspInit+0xac>)
 8000e24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e26:	f003 0301 	and.w	r3, r3, #1
 8000e2a:	613b      	str	r3, [r7, #16]
 8000e2c:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8000e2e:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 8000e32:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e34:	2302      	movs	r3, #2
 8000e36:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e38:	2300      	movs	r3, #0
 8000e3a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e3c:	2303      	movs	r3, #3
 8000e3e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8000e40:	230a      	movs	r3, #10
 8000e42:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e44:	f107 0314 	add.w	r3, r7, #20
 8000e48:	4619      	mov	r1, r3
 8000e4a:	4815      	ldr	r0, [pc, #84]	; (8000ea0 <HAL_PCD_MspInit+0xb0>)
 8000e4c:	f000 fd46 	bl	80018dc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8000e50:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000e54:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000e56:	2300      	movs	r3, #0
 8000e58:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e5a:	2300      	movs	r3, #0
 8000e5c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8000e5e:	f107 0314 	add.w	r3, r7, #20
 8000e62:	4619      	mov	r1, r3
 8000e64:	480e      	ldr	r0, [pc, #56]	; (8000ea0 <HAL_PCD_MspInit+0xb0>)
 8000e66:	f000 fd39 	bl	80018dc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8000e6a:	4b0c      	ldr	r3, [pc, #48]	; (8000e9c <HAL_PCD_MspInit+0xac>)
 8000e6c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000e6e:	4a0b      	ldr	r2, [pc, #44]	; (8000e9c <HAL_PCD_MspInit+0xac>)
 8000e70:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000e74:	6353      	str	r3, [r2, #52]	; 0x34
 8000e76:	2300      	movs	r3, #0
 8000e78:	60fb      	str	r3, [r7, #12]
 8000e7a:	4b08      	ldr	r3, [pc, #32]	; (8000e9c <HAL_PCD_MspInit+0xac>)
 8000e7c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e7e:	4a07      	ldr	r2, [pc, #28]	; (8000e9c <HAL_PCD_MspInit+0xac>)
 8000e80:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000e84:	6453      	str	r3, [r2, #68]	; 0x44
 8000e86:	4b05      	ldr	r3, [pc, #20]	; (8000e9c <HAL_PCD_MspInit+0xac>)
 8000e88:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e8a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000e8e:	60fb      	str	r3, [r7, #12]
 8000e90:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 8000e92:	bf00      	nop
 8000e94:	3728      	adds	r7, #40	; 0x28
 8000e96:	46bd      	mov	sp, r7
 8000e98:	bd80      	pop	{r7, pc}
 8000e9a:	bf00      	nop
 8000e9c:	40023800 	.word	0x40023800
 8000ea0:	40020000 	.word	0x40020000

08000ea4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000ea4:	b480      	push	{r7}
 8000ea6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000ea8:	e7fe      	b.n	8000ea8 <NMI_Handler+0x4>

08000eaa <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000eaa:	b480      	push	{r7}
 8000eac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000eae:	e7fe      	b.n	8000eae <HardFault_Handler+0x4>

08000eb0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000eb0:	b480      	push	{r7}
 8000eb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000eb4:	e7fe      	b.n	8000eb4 <MemManage_Handler+0x4>

08000eb6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000eb6:	b480      	push	{r7}
 8000eb8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000eba:	e7fe      	b.n	8000eba <BusFault_Handler+0x4>

08000ebc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000ebc:	b480      	push	{r7}
 8000ebe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000ec0:	e7fe      	b.n	8000ec0 <UsageFault_Handler+0x4>

08000ec2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000ec2:	b480      	push	{r7}
 8000ec4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000ec6:	bf00      	nop
 8000ec8:	46bd      	mov	sp, r7
 8000eca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ece:	4770      	bx	lr

08000ed0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000ed0:	b580      	push	{r7, lr}
 8000ed2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000ed4:	f000 f898 	bl	8001008 <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 8000ed8:	f003 fcb4 	bl	8004844 <xTaskGetSchedulerState>
 8000edc:	4603      	mov	r3, r0
 8000ede:	2b01      	cmp	r3, #1
 8000ee0:	d001      	beq.n	8000ee6 <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 8000ee2:	f003 fef1 	bl	8004cc8 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000ee6:	bf00      	nop
 8000ee8:	bd80      	pop	{r7, pc}
	...

08000eec <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000eec:	b480      	push	{r7}
 8000eee:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000ef0:	4b06      	ldr	r3, [pc, #24]	; (8000f0c <SystemInit+0x20>)
 8000ef2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000ef6:	4a05      	ldr	r2, [pc, #20]	; (8000f0c <SystemInit+0x20>)
 8000ef8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000efc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000f00:	bf00      	nop
 8000f02:	46bd      	mov	sp, r7
 8000f04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f08:	4770      	bx	lr
 8000f0a:	bf00      	nop
 8000f0c:	e000ed00 	.word	0xe000ed00

08000f10 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 8000f10:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000f48 <LoopFillZerobss+0x12>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000f14:	480d      	ldr	r0, [pc, #52]	; (8000f4c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000f16:	490e      	ldr	r1, [pc, #56]	; (8000f50 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000f18:	4a0e      	ldr	r2, [pc, #56]	; (8000f54 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000f1a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000f1c:	e002      	b.n	8000f24 <LoopCopyDataInit>

08000f1e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000f1e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000f20:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000f22:	3304      	adds	r3, #4

08000f24 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000f24:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000f26:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000f28:	d3f9      	bcc.n	8000f1e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000f2a:	4a0b      	ldr	r2, [pc, #44]	; (8000f58 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000f2c:	4c0b      	ldr	r4, [pc, #44]	; (8000f5c <LoopFillZerobss+0x26>)
  movs r3, #0
 8000f2e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000f30:	e001      	b.n	8000f36 <LoopFillZerobss>

08000f32 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000f32:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000f34:	3204      	adds	r2, #4

08000f36 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000f36:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000f38:	d3fb      	bcc.n	8000f32 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000f3a:	f7ff ffd7 	bl	8000eec <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000f3e:	f004 f8fd 	bl	800513c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000f42:	f7ff fafb 	bl	800053c <main>
  bx  lr    
 8000f46:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8000f48:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 8000f4c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000f50:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 8000f54:	08005248 	.word	0x08005248
  ldr r2, =_sbss
 8000f58:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 8000f5c:	200047cc 	.word	0x200047cc

08000f60 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000f60:	e7fe      	b.n	8000f60 <ADC_IRQHandler>
	...

08000f64 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000f64:	b580      	push	{r7, lr}
 8000f66:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000f68:	4b0e      	ldr	r3, [pc, #56]	; (8000fa4 <HAL_Init+0x40>)
 8000f6a:	681b      	ldr	r3, [r3, #0]
 8000f6c:	4a0d      	ldr	r2, [pc, #52]	; (8000fa4 <HAL_Init+0x40>)
 8000f6e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000f72:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000f74:	4b0b      	ldr	r3, [pc, #44]	; (8000fa4 <HAL_Init+0x40>)
 8000f76:	681b      	ldr	r3, [r3, #0]
 8000f78:	4a0a      	ldr	r2, [pc, #40]	; (8000fa4 <HAL_Init+0x40>)
 8000f7a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000f7e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000f80:	4b08      	ldr	r3, [pc, #32]	; (8000fa4 <HAL_Init+0x40>)
 8000f82:	681b      	ldr	r3, [r3, #0]
 8000f84:	4a07      	ldr	r2, [pc, #28]	; (8000fa4 <HAL_Init+0x40>)
 8000f86:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000f8a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000f8c:	2003      	movs	r0, #3
 8000f8e:	f000 f94f 	bl	8001230 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000f92:	200f      	movs	r0, #15
 8000f94:	f000 f808 	bl	8000fa8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000f98:	f7ff fdc6 	bl	8000b28 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000f9c:	2300      	movs	r3, #0
}
 8000f9e:	4618      	mov	r0, r3
 8000fa0:	bd80      	pop	{r7, pc}
 8000fa2:	bf00      	nop
 8000fa4:	40023c00 	.word	0x40023c00

08000fa8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000fa8:	b580      	push	{r7, lr}
 8000faa:	b082      	sub	sp, #8
 8000fac:	af00      	add	r7, sp, #0
 8000fae:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000fb0:	4b12      	ldr	r3, [pc, #72]	; (8000ffc <HAL_InitTick+0x54>)
 8000fb2:	681a      	ldr	r2, [r3, #0]
 8000fb4:	4b12      	ldr	r3, [pc, #72]	; (8001000 <HAL_InitTick+0x58>)
 8000fb6:	781b      	ldrb	r3, [r3, #0]
 8000fb8:	4619      	mov	r1, r3
 8000fba:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000fbe:	fbb3 f3f1 	udiv	r3, r3, r1
 8000fc2:	fbb2 f3f3 	udiv	r3, r2, r3
 8000fc6:	4618      	mov	r0, r3
 8000fc8:	f000 f967 	bl	800129a <HAL_SYSTICK_Config>
 8000fcc:	4603      	mov	r3, r0
 8000fce:	2b00      	cmp	r3, #0
 8000fd0:	d001      	beq.n	8000fd6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000fd2:	2301      	movs	r3, #1
 8000fd4:	e00e      	b.n	8000ff4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000fd6:	687b      	ldr	r3, [r7, #4]
 8000fd8:	2b0f      	cmp	r3, #15
 8000fda:	d80a      	bhi.n	8000ff2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000fdc:	2200      	movs	r2, #0
 8000fde:	6879      	ldr	r1, [r7, #4]
 8000fe0:	f04f 30ff 	mov.w	r0, #4294967295
 8000fe4:	f000 f92f 	bl	8001246 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000fe8:	4a06      	ldr	r2, [pc, #24]	; (8001004 <HAL_InitTick+0x5c>)
 8000fea:	687b      	ldr	r3, [r7, #4]
 8000fec:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000fee:	2300      	movs	r3, #0
 8000ff0:	e000      	b.n	8000ff4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000ff2:	2301      	movs	r3, #1
}
 8000ff4:	4618      	mov	r0, r3
 8000ff6:	3708      	adds	r7, #8
 8000ff8:	46bd      	mov	sp, r7
 8000ffa:	bd80      	pop	{r7, pc}
 8000ffc:	20000000 	.word	0x20000000
 8001000:	20000008 	.word	0x20000008
 8001004:	20000004 	.word	0x20000004

08001008 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001008:	b480      	push	{r7}
 800100a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800100c:	4b06      	ldr	r3, [pc, #24]	; (8001028 <HAL_IncTick+0x20>)
 800100e:	781b      	ldrb	r3, [r3, #0]
 8001010:	461a      	mov	r2, r3
 8001012:	4b06      	ldr	r3, [pc, #24]	; (800102c <HAL_IncTick+0x24>)
 8001014:	681b      	ldr	r3, [r3, #0]
 8001016:	4413      	add	r3, r2
 8001018:	4a04      	ldr	r2, [pc, #16]	; (800102c <HAL_IncTick+0x24>)
 800101a:	6013      	str	r3, [r2, #0]
}
 800101c:	bf00      	nop
 800101e:	46bd      	mov	sp, r7
 8001020:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001024:	4770      	bx	lr
 8001026:	bf00      	nop
 8001028:	20000008 	.word	0x20000008
 800102c:	20000a74 	.word	0x20000a74

08001030 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001030:	b480      	push	{r7}
 8001032:	af00      	add	r7, sp, #0
  return uwTick;
 8001034:	4b03      	ldr	r3, [pc, #12]	; (8001044 <HAL_GetTick+0x14>)
 8001036:	681b      	ldr	r3, [r3, #0]
}
 8001038:	4618      	mov	r0, r3
 800103a:	46bd      	mov	sp, r7
 800103c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001040:	4770      	bx	lr
 8001042:	bf00      	nop
 8001044:	20000a74 	.word	0x20000a74

08001048 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001048:	b580      	push	{r7, lr}
 800104a:	b084      	sub	sp, #16
 800104c:	af00      	add	r7, sp, #0
 800104e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001050:	f7ff ffee 	bl	8001030 <HAL_GetTick>
 8001054:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001056:	687b      	ldr	r3, [r7, #4]
 8001058:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800105a:	68fb      	ldr	r3, [r7, #12]
 800105c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001060:	d005      	beq.n	800106e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001062:	4b0a      	ldr	r3, [pc, #40]	; (800108c <HAL_Delay+0x44>)
 8001064:	781b      	ldrb	r3, [r3, #0]
 8001066:	461a      	mov	r2, r3
 8001068:	68fb      	ldr	r3, [r7, #12]
 800106a:	4413      	add	r3, r2
 800106c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800106e:	bf00      	nop
 8001070:	f7ff ffde 	bl	8001030 <HAL_GetTick>
 8001074:	4602      	mov	r2, r0
 8001076:	68bb      	ldr	r3, [r7, #8]
 8001078:	1ad3      	subs	r3, r2, r3
 800107a:	68fa      	ldr	r2, [r7, #12]
 800107c:	429a      	cmp	r2, r3
 800107e:	d8f7      	bhi.n	8001070 <HAL_Delay+0x28>
  {
  }
}
 8001080:	bf00      	nop
 8001082:	bf00      	nop
 8001084:	3710      	adds	r7, #16
 8001086:	46bd      	mov	sp, r7
 8001088:	bd80      	pop	{r7, pc}
 800108a:	bf00      	nop
 800108c:	20000008 	.word	0x20000008

08001090 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001090:	b480      	push	{r7}
 8001092:	b085      	sub	sp, #20
 8001094:	af00      	add	r7, sp, #0
 8001096:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	f003 0307 	and.w	r3, r3, #7
 800109e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80010a0:	4b0c      	ldr	r3, [pc, #48]	; (80010d4 <__NVIC_SetPriorityGrouping+0x44>)
 80010a2:	68db      	ldr	r3, [r3, #12]
 80010a4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80010a6:	68ba      	ldr	r2, [r7, #8]
 80010a8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80010ac:	4013      	ands	r3, r2
 80010ae:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80010b0:	68fb      	ldr	r3, [r7, #12]
 80010b2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80010b4:	68bb      	ldr	r3, [r7, #8]
 80010b6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80010b8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80010bc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80010c0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80010c2:	4a04      	ldr	r2, [pc, #16]	; (80010d4 <__NVIC_SetPriorityGrouping+0x44>)
 80010c4:	68bb      	ldr	r3, [r7, #8]
 80010c6:	60d3      	str	r3, [r2, #12]
}
 80010c8:	bf00      	nop
 80010ca:	3714      	adds	r7, #20
 80010cc:	46bd      	mov	sp, r7
 80010ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010d2:	4770      	bx	lr
 80010d4:	e000ed00 	.word	0xe000ed00

080010d8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80010d8:	b480      	push	{r7}
 80010da:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80010dc:	4b04      	ldr	r3, [pc, #16]	; (80010f0 <__NVIC_GetPriorityGrouping+0x18>)
 80010de:	68db      	ldr	r3, [r3, #12]
 80010e0:	0a1b      	lsrs	r3, r3, #8
 80010e2:	f003 0307 	and.w	r3, r3, #7
}
 80010e6:	4618      	mov	r0, r3
 80010e8:	46bd      	mov	sp, r7
 80010ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ee:	4770      	bx	lr
 80010f0:	e000ed00 	.word	0xe000ed00

080010f4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80010f4:	b480      	push	{r7}
 80010f6:	b083      	sub	sp, #12
 80010f8:	af00      	add	r7, sp, #0
 80010fa:	4603      	mov	r3, r0
 80010fc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80010fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001102:	2b00      	cmp	r3, #0
 8001104:	db0b      	blt.n	800111e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001106:	79fb      	ldrb	r3, [r7, #7]
 8001108:	f003 021f 	and.w	r2, r3, #31
 800110c:	4907      	ldr	r1, [pc, #28]	; (800112c <__NVIC_EnableIRQ+0x38>)
 800110e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001112:	095b      	lsrs	r3, r3, #5
 8001114:	2001      	movs	r0, #1
 8001116:	fa00 f202 	lsl.w	r2, r0, r2
 800111a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800111e:	bf00      	nop
 8001120:	370c      	adds	r7, #12
 8001122:	46bd      	mov	sp, r7
 8001124:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001128:	4770      	bx	lr
 800112a:	bf00      	nop
 800112c:	e000e100 	.word	0xe000e100

08001130 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001130:	b480      	push	{r7}
 8001132:	b083      	sub	sp, #12
 8001134:	af00      	add	r7, sp, #0
 8001136:	4603      	mov	r3, r0
 8001138:	6039      	str	r1, [r7, #0]
 800113a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800113c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001140:	2b00      	cmp	r3, #0
 8001142:	db0a      	blt.n	800115a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001144:	683b      	ldr	r3, [r7, #0]
 8001146:	b2da      	uxtb	r2, r3
 8001148:	490c      	ldr	r1, [pc, #48]	; (800117c <__NVIC_SetPriority+0x4c>)
 800114a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800114e:	0112      	lsls	r2, r2, #4
 8001150:	b2d2      	uxtb	r2, r2
 8001152:	440b      	add	r3, r1
 8001154:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001158:	e00a      	b.n	8001170 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800115a:	683b      	ldr	r3, [r7, #0]
 800115c:	b2da      	uxtb	r2, r3
 800115e:	4908      	ldr	r1, [pc, #32]	; (8001180 <__NVIC_SetPriority+0x50>)
 8001160:	79fb      	ldrb	r3, [r7, #7]
 8001162:	f003 030f 	and.w	r3, r3, #15
 8001166:	3b04      	subs	r3, #4
 8001168:	0112      	lsls	r2, r2, #4
 800116a:	b2d2      	uxtb	r2, r2
 800116c:	440b      	add	r3, r1
 800116e:	761a      	strb	r2, [r3, #24]
}
 8001170:	bf00      	nop
 8001172:	370c      	adds	r7, #12
 8001174:	46bd      	mov	sp, r7
 8001176:	f85d 7b04 	ldr.w	r7, [sp], #4
 800117a:	4770      	bx	lr
 800117c:	e000e100 	.word	0xe000e100
 8001180:	e000ed00 	.word	0xe000ed00

08001184 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001184:	b480      	push	{r7}
 8001186:	b089      	sub	sp, #36	; 0x24
 8001188:	af00      	add	r7, sp, #0
 800118a:	60f8      	str	r0, [r7, #12]
 800118c:	60b9      	str	r1, [r7, #8]
 800118e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001190:	68fb      	ldr	r3, [r7, #12]
 8001192:	f003 0307 	and.w	r3, r3, #7
 8001196:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001198:	69fb      	ldr	r3, [r7, #28]
 800119a:	f1c3 0307 	rsb	r3, r3, #7
 800119e:	2b04      	cmp	r3, #4
 80011a0:	bf28      	it	cs
 80011a2:	2304      	movcs	r3, #4
 80011a4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80011a6:	69fb      	ldr	r3, [r7, #28]
 80011a8:	3304      	adds	r3, #4
 80011aa:	2b06      	cmp	r3, #6
 80011ac:	d902      	bls.n	80011b4 <NVIC_EncodePriority+0x30>
 80011ae:	69fb      	ldr	r3, [r7, #28]
 80011b0:	3b03      	subs	r3, #3
 80011b2:	e000      	b.n	80011b6 <NVIC_EncodePriority+0x32>
 80011b4:	2300      	movs	r3, #0
 80011b6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80011b8:	f04f 32ff 	mov.w	r2, #4294967295
 80011bc:	69bb      	ldr	r3, [r7, #24]
 80011be:	fa02 f303 	lsl.w	r3, r2, r3
 80011c2:	43da      	mvns	r2, r3
 80011c4:	68bb      	ldr	r3, [r7, #8]
 80011c6:	401a      	ands	r2, r3
 80011c8:	697b      	ldr	r3, [r7, #20]
 80011ca:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80011cc:	f04f 31ff 	mov.w	r1, #4294967295
 80011d0:	697b      	ldr	r3, [r7, #20]
 80011d2:	fa01 f303 	lsl.w	r3, r1, r3
 80011d6:	43d9      	mvns	r1, r3
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80011dc:	4313      	orrs	r3, r2
         );
}
 80011de:	4618      	mov	r0, r3
 80011e0:	3724      	adds	r7, #36	; 0x24
 80011e2:	46bd      	mov	sp, r7
 80011e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011e8:	4770      	bx	lr
	...

080011ec <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80011ec:	b580      	push	{r7, lr}
 80011ee:	b082      	sub	sp, #8
 80011f0:	af00      	add	r7, sp, #0
 80011f2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	3b01      	subs	r3, #1
 80011f8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80011fc:	d301      	bcc.n	8001202 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80011fe:	2301      	movs	r3, #1
 8001200:	e00f      	b.n	8001222 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001202:	4a0a      	ldr	r2, [pc, #40]	; (800122c <SysTick_Config+0x40>)
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	3b01      	subs	r3, #1
 8001208:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800120a:	210f      	movs	r1, #15
 800120c:	f04f 30ff 	mov.w	r0, #4294967295
 8001210:	f7ff ff8e 	bl	8001130 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001214:	4b05      	ldr	r3, [pc, #20]	; (800122c <SysTick_Config+0x40>)
 8001216:	2200      	movs	r2, #0
 8001218:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800121a:	4b04      	ldr	r3, [pc, #16]	; (800122c <SysTick_Config+0x40>)
 800121c:	2207      	movs	r2, #7
 800121e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001220:	2300      	movs	r3, #0
}
 8001222:	4618      	mov	r0, r3
 8001224:	3708      	adds	r7, #8
 8001226:	46bd      	mov	sp, r7
 8001228:	bd80      	pop	{r7, pc}
 800122a:	bf00      	nop
 800122c:	e000e010 	.word	0xe000e010

08001230 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001230:	b580      	push	{r7, lr}
 8001232:	b082      	sub	sp, #8
 8001234:	af00      	add	r7, sp, #0
 8001236:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001238:	6878      	ldr	r0, [r7, #4]
 800123a:	f7ff ff29 	bl	8001090 <__NVIC_SetPriorityGrouping>
}
 800123e:	bf00      	nop
 8001240:	3708      	adds	r7, #8
 8001242:	46bd      	mov	sp, r7
 8001244:	bd80      	pop	{r7, pc}

08001246 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001246:	b580      	push	{r7, lr}
 8001248:	b086      	sub	sp, #24
 800124a:	af00      	add	r7, sp, #0
 800124c:	4603      	mov	r3, r0
 800124e:	60b9      	str	r1, [r7, #8]
 8001250:	607a      	str	r2, [r7, #4]
 8001252:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001254:	2300      	movs	r3, #0
 8001256:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001258:	f7ff ff3e 	bl	80010d8 <__NVIC_GetPriorityGrouping>
 800125c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800125e:	687a      	ldr	r2, [r7, #4]
 8001260:	68b9      	ldr	r1, [r7, #8]
 8001262:	6978      	ldr	r0, [r7, #20]
 8001264:	f7ff ff8e 	bl	8001184 <NVIC_EncodePriority>
 8001268:	4602      	mov	r2, r0
 800126a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800126e:	4611      	mov	r1, r2
 8001270:	4618      	mov	r0, r3
 8001272:	f7ff ff5d 	bl	8001130 <__NVIC_SetPriority>
}
 8001276:	bf00      	nop
 8001278:	3718      	adds	r7, #24
 800127a:	46bd      	mov	sp, r7
 800127c:	bd80      	pop	{r7, pc}

0800127e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800127e:	b580      	push	{r7, lr}
 8001280:	b082      	sub	sp, #8
 8001282:	af00      	add	r7, sp, #0
 8001284:	4603      	mov	r3, r0
 8001286:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001288:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800128c:	4618      	mov	r0, r3
 800128e:	f7ff ff31 	bl	80010f4 <__NVIC_EnableIRQ>
}
 8001292:	bf00      	nop
 8001294:	3708      	adds	r7, #8
 8001296:	46bd      	mov	sp, r7
 8001298:	bd80      	pop	{r7, pc}

0800129a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800129a:	b580      	push	{r7, lr}
 800129c:	b082      	sub	sp, #8
 800129e:	af00      	add	r7, sp, #0
 80012a0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80012a2:	6878      	ldr	r0, [r7, #4]
 80012a4:	f7ff ffa2 	bl	80011ec <SysTick_Config>
 80012a8:	4603      	mov	r3, r0
}
 80012aa:	4618      	mov	r0, r3
 80012ac:	3708      	adds	r7, #8
 80012ae:	46bd      	mov	sp, r7
 80012b0:	bd80      	pop	{r7, pc}
	...

080012b4 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 80012b4:	b580      	push	{r7, lr}
 80012b6:	b084      	sub	sp, #16
 80012b8:	af00      	add	r7, sp, #0
 80012ba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	2b00      	cmp	r3, #0
 80012c0:	d101      	bne.n	80012c6 <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 80012c2:	2301      	movs	r3, #1
 80012c4:	e06c      	b.n	80013a0 <HAL_ETH_Init+0xec>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80012cc:	2b00      	cmp	r3, #0
 80012ce:	d106      	bne.n	80012de <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	2223      	movs	r2, #35	; 0x23
 80012d4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 80012d8:	6878      	ldr	r0, [r7, #4]
 80012da:	f7ff fc51 	bl	8000b80 <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80012de:	2300      	movs	r3, #0
 80012e0:	60bb      	str	r3, [r7, #8]
 80012e2:	4b31      	ldr	r3, [pc, #196]	; (80013a8 <HAL_ETH_Init+0xf4>)
 80012e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012e6:	4a30      	ldr	r2, [pc, #192]	; (80013a8 <HAL_ETH_Init+0xf4>)
 80012e8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80012ec:	6453      	str	r3, [r2, #68]	; 0x44
 80012ee:	4b2e      	ldr	r3, [pc, #184]	; (80013a8 <HAL_ETH_Init+0xf4>)
 80012f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012f2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80012f6:	60bb      	str	r3, [r7, #8]
 80012f8:	68bb      	ldr	r3, [r7, #8]

  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 80012fa:	4b2c      	ldr	r3, [pc, #176]	; (80013ac <HAL_ETH_Init+0xf8>)
 80012fc:	685b      	ldr	r3, [r3, #4]
 80012fe:	4a2b      	ldr	r2, [pc, #172]	; (80013ac <HAL_ETH_Init+0xf8>)
 8001300:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8001304:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 8001306:	4b29      	ldr	r3, [pc, #164]	; (80013ac <HAL_ETH_Init+0xf8>)
 8001308:	685a      	ldr	r2, [r3, #4]
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	689b      	ldr	r3, [r3, #8]
 800130e:	4927      	ldr	r1, [pc, #156]	; (80013ac <HAL_ETH_Init+0xf8>)
 8001310:	4313      	orrs	r3, r2
 8001312:	604b      	str	r3, [r1, #4]
  /* Dummy read to sync SYSCFG with ETH */
  (void)SYSCFG->PMC;
 8001314:	4b25      	ldr	r3, [pc, #148]	; (80013ac <HAL_ETH_Init+0xf8>)
 8001316:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR);
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	681b      	ldr	r3, [r3, #0]
 800131c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001320:	681b      	ldr	r3, [r3, #0]
 8001322:	687a      	ldr	r2, [r7, #4]
 8001324:	6812      	ldr	r2, [r2, #0]
 8001326:	f043 0301 	orr.w	r3, r3, #1
 800132a:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800132e:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001330:	f7ff fe7e 	bl	8001030 <HAL_GetTick>
 8001334:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 8001336:	e011      	b.n	800135c <HAL_ETH_Init+0xa8>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 8001338:	f7ff fe7a 	bl	8001030 <HAL_GetTick>
 800133c:	4602      	mov	r2, r0
 800133e:	68fb      	ldr	r3, [r7, #12]
 8001340:	1ad3      	subs	r3, r2, r3
 8001342:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8001346:	d909      	bls.n	800135c <HAL_ETH_Init+0xa8>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	2204      	movs	r2, #4
 800134c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	22e0      	movs	r2, #224	; 0xe0
 8001354:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      /* Return Error */
      return HAL_ERROR;
 8001358:	2301      	movs	r3, #1
 800135a:	e021      	b.n	80013a0 <HAL_ETH_Init+0xec>
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	681b      	ldr	r3, [r3, #0]
 8001360:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001364:	681b      	ldr	r3, [r3, #0]
 8001366:	f003 0301 	and.w	r3, r3, #1
 800136a:	2b00      	cmp	r3, #0
 800136c:	d1e4      	bne.n	8001338 <HAL_ETH_Init+0x84>
    }
  }


  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 800136e:	6878      	ldr	r0, [r7, #4]
 8001370:	f000 f944 	bl	80015fc <ETH_MACDMAConfig>


  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 8001374:	6878      	ldr	r0, [r7, #4]
 8001376:	f000 f9eb 	bl	8001750 <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 800137a:	6878      	ldr	r0, [r7, #4]
 800137c:	f000 fa41 	bl	8001802 <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	685b      	ldr	r3, [r3, #4]
 8001384:	461a      	mov	r2, r3
 8001386:	2100      	movs	r1, #0
 8001388:	6878      	ldr	r0, [r7, #4]
 800138a:	f000 f9a9 	bl	80016e0 <ETH_MACAddressConfig>

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	2200      	movs	r2, #0
 8001392:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  heth->gState = HAL_ETH_STATE_READY;
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	2210      	movs	r2, #16
 800139a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800139e:	2300      	movs	r3, #0
}
 80013a0:	4618      	mov	r0, r3
 80013a2:	3710      	adds	r7, #16
 80013a4:	46bd      	mov	sp, r7
 80013a6:	bd80      	pop	{r7, pc}
 80013a8:	40023800 	.word	0x40023800
 80013ac:	40013800 	.word	0x40013800

080013b0 <ETH_SetMACConfig>:
  HAL_Delay(ETH_REG_WRITE_DELAY);
  (heth->Instance)->DMAOMR = tmpreg;
}

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 80013b0:	b580      	push	{r7, lr}
 80013b2:	b084      	sub	sp, #16
 80013b4:	af00      	add	r7, sp, #0
 80013b6:	6078      	str	r0, [r7, #4]
 80013b8:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg1 = (heth->Instance)->MACCR;
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	681b      	ldr	r3, [r3, #0]
 80013be:	681b      	ldr	r3, [r3, #0]
 80013c0:	60fb      	str	r3, [r7, #12]
  /* Clear WD, PCE, PS, TE and RE bits */
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 80013c2:	68fa      	ldr	r2, [r7, #12]
 80013c4:	4b47      	ldr	r3, [pc, #284]	; (80014e4 <ETH_SetMACConfig+0x134>)
 80013c6:	4013      	ands	r3, r2
 80013c8:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 80013ca:	683b      	ldr	r3, [r7, #0]
 80013cc:	7c1b      	ldrb	r3, [r3, #16]
 80013ce:	2b00      	cmp	r3, #0
 80013d0:	d102      	bne.n	80013d8 <ETH_SetMACConfig+0x28>
 80013d2:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 80013d6:	e000      	b.n	80013da <ETH_SetMACConfig+0x2a>
 80013d8:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 80013da:	683b      	ldr	r3, [r7, #0]
 80013dc:	7c5b      	ldrb	r3, [r3, #17]
 80013de:	2b00      	cmp	r3, #0
 80013e0:	d102      	bne.n	80013e8 <ETH_SetMACConfig+0x38>
 80013e2:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80013e6:	e000      	b.n	80013ea <ETH_SetMACConfig+0x3a>
 80013e8:	2300      	movs	r3, #0
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 80013ea:	431a      	orrs	r2, r3
                        (uint32_t)macconf->InterPacketGapVal |
 80013ec:	683b      	ldr	r3, [r7, #0]
 80013ee:	689b      	ldr	r3, [r3, #8]
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 80013f0:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 80013f2:	683b      	ldr	r3, [r7, #0]
 80013f4:	7fdb      	ldrb	r3, [r3, #31]
 80013f6:	041b      	lsls	r3, r3, #16
                        (uint32_t)macconf->InterPacketGapVal |
 80013f8:	431a      	orrs	r2, r3
                        macconf->Speed |
 80013fa:	683b      	ldr	r3, [r7, #0]
 80013fc:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 80013fe:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 8001400:	683a      	ldr	r2, [r7, #0]
 8001402:	7f92      	ldrb	r2, [r2, #30]
 8001404:	2a00      	cmp	r2, #0
 8001406:	d102      	bne.n	800140e <ETH_SetMACConfig+0x5e>
 8001408:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800140c:	e000      	b.n	8001410 <ETH_SetMACConfig+0x60>
 800140e:	2200      	movs	r2, #0
                        macconf->Speed |
 8001410:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 8001412:	683b      	ldr	r3, [r7, #0]
 8001414:	7f1b      	ldrb	r3, [r3, #28]
 8001416:	031b      	lsls	r3, r3, #12
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 8001418:	431a      	orrs	r2, r3
                        macconf->DuplexMode |
 800141a:	683b      	ldr	r3, [r7, #0]
 800141c:	699b      	ldr	r3, [r3, #24]
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 800141e:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 8001420:	683b      	ldr	r3, [r7, #0]
 8001422:	791b      	ldrb	r3, [r3, #4]
 8001424:	029b      	lsls	r3, r3, #10
                        macconf->DuplexMode |
 8001426:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 8001428:	683a      	ldr	r2, [r7, #0]
 800142a:	f892 2020 	ldrb.w	r2, [r2, #32]
 800142e:	2a00      	cmp	r2, #0
 8001430:	d102      	bne.n	8001438 <ETH_SetMACConfig+0x88>
 8001432:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001436:	e000      	b.n	800143a <ETH_SetMACConfig+0x8a>
 8001438:	2200      	movs	r2, #0
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 800143a:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 800143c:	683b      	ldr	r3, [r7, #0]
 800143e:	7bdb      	ldrb	r3, [r3, #15]
 8001440:	01db      	lsls	r3, r3, #7
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 8001442:	431a      	orrs	r2, r3
                        macconf->BackOffLimit |
 8001444:	683b      	ldr	r3, [r7, #0]
 8001446:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8001448:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->DeferralCheck << 4U));
 800144a:	683b      	ldr	r3, [r7, #0]
 800144c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8001450:	011b      	lsls	r3, r3, #4
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8001452:	4313      	orrs	r3, r2
 8001454:	68fa      	ldr	r2, [r7, #12]
 8001456:	4313      	orrs	r3, r2
 8001458:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	681b      	ldr	r3, [r3, #0]
 800145e:	68fa      	ldr	r2, [r7, #12]
 8001460:	601a      	str	r2, [r3, #0]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	681b      	ldr	r3, [r3, #0]
 8001466:	681b      	ldr	r3, [r3, #0]
 8001468:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 800146a:	2001      	movs	r0, #1
 800146c:	f7ff fdec 	bl	8001048 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	681b      	ldr	r3, [r3, #0]
 8001474:	68fa      	ldr	r2, [r7, #12]
 8001476:	601a      	str	r2, [r3, #0]

  /*----------------------- ETHERNET MACFCR Configuration --------------------*/

  /* Get the ETHERNET MACFCR value */
  tmpreg1 = (heth->Instance)->MACFCR;
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	681b      	ldr	r3, [r3, #0]
 800147c:	699b      	ldr	r3, [r3, #24]
 800147e:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 8001480:	68fa      	ldr	r2, [r7, #12]
 8001482:	f64f 7341 	movw	r3, #65345	; 0xff41
 8001486:	4013      	ands	r3, r2
 8001488:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 800148a:	683b      	ldr	r3, [r7, #0]
 800148c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800148e:	041b      	lsls	r3, r3, #16
                        (uint32_t)macconf->ZeroQuantaPause |
 8001490:	683a      	ldr	r2, [r7, #0]
 8001492:	f892 204c 	ldrb.w	r2, [r2, #76]	; 0x4c
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8001496:	431a      	orrs	r2, r3
                        macconf->PauseLowThreshold |
 8001498:	683b      	ldr	r3, [r7, #0]
 800149a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
                        (uint32_t)macconf->ZeroQuantaPause |
 800149c:	4313      	orrs	r3, r2
                        (uint32_t)macconf->UnicastSlowProtocolPacketDetect |
 800149e:	683a      	ldr	r2, [r7, #0]
 80014a0:	f892 2030 	ldrb.w	r2, [r2, #48]	; 0x30
                        macconf->PauseLowThreshold |
 80014a4:	4313      	orrs	r3, r2
                        (uint32_t)macconf->ReceiveFlowControl |
 80014a6:	683a      	ldr	r2, [r7, #0]
 80014a8:	f892 2056 	ldrb.w	r2, [r2, #86]	; 0x56
                        (uint32_t)macconf->UnicastSlowProtocolPacketDetect |
 80014ac:	4313      	orrs	r3, r2
                        (uint32_t)macconf->TransmitFlowControl);
 80014ae:	683a      	ldr	r2, [r7, #0]
 80014b0:	f892 2054 	ldrb.w	r2, [r2, #84]	; 0x54
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 80014b4:	4313      	orrs	r3, r2
 80014b6:	68fa      	ldr	r2, [r7, #12]
 80014b8:	4313      	orrs	r3, r2
 80014ba:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACFCR */
  (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	681b      	ldr	r3, [r3, #0]
 80014c0:	68fa      	ldr	r2, [r7, #12]
 80014c2:	619a      	str	r2, [r3, #24]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACFCR;
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	681b      	ldr	r3, [r3, #0]
 80014c8:	699b      	ldr	r3, [r3, #24]
 80014ca:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80014cc:	2001      	movs	r0, #1
 80014ce:	f7ff fdbb 	bl	8001048 <HAL_Delay>
  (heth->Instance)->MACFCR = tmpreg1;
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	681b      	ldr	r3, [r3, #0]
 80014d6:	68fa      	ldr	r2, [r7, #12]
 80014d8:	619a      	str	r2, [r3, #24]
}
 80014da:	bf00      	nop
 80014dc:	3710      	adds	r7, #16
 80014de:	46bd      	mov	sp, r7
 80014e0:	bd80      	pop	{r7, pc}
 80014e2:	bf00      	nop
 80014e4:	ff20810f 	.word	0xff20810f

080014e8 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth,  ETH_DMAConfigTypeDef *dmaconf)
{
 80014e8:	b580      	push	{r7, lr}
 80014ea:	b084      	sub	sp, #16
 80014ec:	af00      	add	r7, sp, #0
 80014ee:	6078      	str	r0, [r7, #4]
 80014f0:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*----------------------- ETHERNET DMAOMR Configuration --------------------*/
  /* Get the ETHERNET DMAOMR value */
  tmpreg1 = (heth->Instance)->DMAOMR;
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	681b      	ldr	r3, [r3, #0]
 80014f6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80014fa:	699b      	ldr	r3, [r3, #24]
 80014fc:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 80014fe:	68fa      	ldr	r2, [r7, #12]
 8001500:	4b3d      	ldr	r3, [pc, #244]	; (80015f8 <ETH_SetDMAConfig+0x110>)
 8001502:	4013      	ands	r3, r2
 8001504:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8001506:	683b      	ldr	r3, [r7, #0]
 8001508:	7b1b      	ldrb	r3, [r3, #12]
 800150a:	2b00      	cmp	r3, #0
 800150c:	d102      	bne.n	8001514 <ETH_SetDMAConfig+0x2c>
 800150e:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8001512:	e000      	b.n	8001516 <ETH_SetDMAConfig+0x2e>
 8001514:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 8001516:	683b      	ldr	r3, [r7, #0]
 8001518:	7b5b      	ldrb	r3, [r3, #13]
 800151a:	065b      	lsls	r3, r3, #25
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 800151c:	4313      	orrs	r3, r2
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 800151e:	683a      	ldr	r2, [r7, #0]
 8001520:	7f52      	ldrb	r2, [r2, #29]
 8001522:	2a00      	cmp	r2, #0
 8001524:	d102      	bne.n	800152c <ETH_SetDMAConfig+0x44>
 8001526:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800152a:	e000      	b.n	800152e <ETH_SetDMAConfig+0x46>
 800152c:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 800152e:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8001530:	683b      	ldr	r3, [r7, #0]
 8001532:	7b9b      	ldrb	r3, [r3, #14]
 8001534:	055b      	lsls	r3, r3, #21
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 8001536:	431a      	orrs	r2, r3
                        dmaconf->TransmitThresholdControl |
 8001538:	683b      	ldr	r3, [r7, #0]
 800153a:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 800153c:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 800153e:	683b      	ldr	r3, [r7, #0]
 8001540:	7f1b      	ldrb	r3, [r3, #28]
 8001542:	01db      	lsls	r3, r3, #7
                        dmaconf->TransmitThresholdControl |
 8001544:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 8001546:	683b      	ldr	r3, [r7, #0]
 8001548:	7f9b      	ldrb	r3, [r3, #30]
 800154a:	019b      	lsls	r3, r3, #6
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 800154c:	431a      	orrs	r2, r3
                        dmaconf->ReceiveThresholdControl |
 800154e:	683b      	ldr	r3, [r7, #0]
 8001550:	6a1b      	ldr	r3, [r3, #32]
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 8001552:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->SecondFrameOperate << 2U));
 8001554:	683b      	ldr	r3, [r7, #0]
 8001556:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800155a:	009b      	lsls	r3, r3, #2
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 800155c:	4313      	orrs	r3, r2
 800155e:	68fa      	ldr	r2, [r7, #12]
 8001560:	4313      	orrs	r3, r2
 8001562:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET DMAOMR */
  (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	681b      	ldr	r3, [r3, #0]
 8001568:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800156c:	461a      	mov	r2, r3
 800156e:	68fb      	ldr	r3, [r7, #12]
 8001570:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMAOMR;
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	681b      	ldr	r3, [r3, #0]
 8001576:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800157a:	699b      	ldr	r3, [r3, #24]
 800157c:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 800157e:	2001      	movs	r0, #1
 8001580:	f7ff fd62 	bl	8001048 <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	681b      	ldr	r3, [r3, #0]
 8001588:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800158c:	461a      	mov	r2, r3
 800158e:	68fb      	ldr	r3, [r7, #12]
 8001590:	6193      	str	r3, [r2, #24]

  /*----------------------- ETHERNET DMABMR Configuration --------------------*/
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8001592:	683b      	ldr	r3, [r7, #0]
 8001594:	791b      	ldrb	r3, [r3, #4]
 8001596:	065a      	lsls	r2, r3, #25
                                        dmaconf->BurstMode |
 8001598:	683b      	ldr	r3, [r7, #0]
 800159a:	689b      	ldr	r3, [r3, #8]
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 800159c:	431a      	orrs	r2, r3
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 800159e:	683b      	ldr	r3, [r7, #0]
 80015a0:	699b      	ldr	r3, [r3, #24]
                                        dmaconf->BurstMode |
 80015a2:	431a      	orrs	r2, r3
                                                                       Rx it is applied for the other */
                                        dmaconf->TxDMABurstLength |
 80015a4:	683b      	ldr	r3, [r7, #0]
 80015a6:	691b      	ldr	r3, [r3, #16]
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 80015a8:	431a      	orrs	r2, r3
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 80015aa:	683b      	ldr	r3, [r7, #0]
 80015ac:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80015b0:	01db      	lsls	r3, r3, #7
                                        dmaconf->TxDMABurstLength |
 80015b2:	431a      	orrs	r2, r3
                                        (dmaconf->DescriptorSkipLength << 2U) |
 80015b4:	683b      	ldr	r3, [r7, #0]
 80015b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80015b8:	009b      	lsls	r3, r3, #2
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 80015ba:	431a      	orrs	r2, r3
                                        dmaconf->DMAArbitration |
 80015bc:	683b      	ldr	r3, [r7, #0]
 80015be:	681b      	ldr	r3, [r3, #0]
                                        (dmaconf->DescriptorSkipLength << 2U) |
 80015c0:	4313      	orrs	r3, r2
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 80015c2:	687a      	ldr	r2, [r7, #4]
 80015c4:	6812      	ldr	r2, [r2, #0]
 80015c6:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80015ca:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80015ce:	6013      	str	r3, [r2, #0]
                                        ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMABMR;
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	681b      	ldr	r3, [r3, #0]
 80015d4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80015d8:	681b      	ldr	r3, [r3, #0]
 80015da:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80015dc:	2001      	movs	r0, #1
 80015de:	f7ff fd33 	bl	8001048 <HAL_Delay>
  (heth->Instance)->DMABMR = tmpreg1;
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	681b      	ldr	r3, [r3, #0]
 80015e6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80015ea:	461a      	mov	r2, r3
 80015ec:	68fb      	ldr	r3, [r7, #12]
 80015ee:	6013      	str	r3, [r2, #0]
}
 80015f0:	bf00      	nop
 80015f2:	3710      	adds	r7, #16
 80015f4:	46bd      	mov	sp, r7
 80015f6:	bd80      	pop	{r7, pc}
 80015f8:	f8de3f23 	.word	0xf8de3f23

080015fc <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 80015fc:	b580      	push	{r7, lr}
 80015fe:	b0a6      	sub	sp, #152	; 0x98
 8001600:	af00      	add	r7, sp, #0
 8001602:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.Watchdog = ENABLE;
 8001604:	2301      	movs	r3, #1
 8001606:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44
  macDefaultConf.Jabber = ENABLE;
 800160a:	2301      	movs	r3, #1
 800160c:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
  macDefaultConf.InterPacketGapVal = ETH_INTERFRAMEGAP_96BIT;
 8001610:	2300      	movs	r3, #0
 8001612:	63fb      	str	r3, [r7, #60]	; 0x3c
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 8001614:	2300      	movs	r3, #0
 8001616:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
  macDefaultConf.ReceiveOwn = ENABLE;
 800161a:	2301      	movs	r3, #1
 800161c:	f887 3052 	strb.w	r3, [r7, #82]	; 0x52
  macDefaultConf.LoopbackMode = DISABLE;
 8001620:	2300      	movs	r3, #0
 8001622:	f887 3050 	strb.w	r3, [r7, #80]	; 0x50
  macDefaultConf.ChecksumOffload = ENABLE;
 8001626:	2301      	movs	r3, #1
 8001628:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  macDefaultConf.RetryTransmission = DISABLE;
 800162c:	2300      	movs	r3, #0
 800162e:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
  macDefaultConf.AutomaticPadCRCStrip = DISABLE;
 8001632:	2300      	movs	r3, #0
 8001634:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8001638:	2300      	movs	r3, #0
 800163a:	65bb      	str	r3, [r7, #88]	; 0x58
  macDefaultConf.DeferralCheck = DISABLE;
 800163c:	2300      	movs	r3, #0
 800163e:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
  macDefaultConf.PauseTime = 0x0U;
 8001642:	2300      	movs	r3, #0
 8001644:	67fb      	str	r3, [r7, #124]	; 0x7c
  macDefaultConf.ZeroQuantaPause = DISABLE;
 8001646:	2300      	movs	r3, #0
 8001648:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 800164c:	2300      	movs	r3, #0
 800164e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macDefaultConf.ReceiveFlowControl = DISABLE;
 8001652:	2300      	movs	r3, #0
 8001654:	f887 308a 	strb.w	r3, [r7, #138]	; 0x8a
  macDefaultConf.TransmitFlowControl = DISABLE;
 8001658:	2300      	movs	r3, #0
 800165a:	f887 3088 	strb.w	r3, [r7, #136]	; 0x88
  macDefaultConf.Speed = ETH_SPEED_100M;
 800165e:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001662:	64bb      	str	r3, [r7, #72]	; 0x48
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 8001664:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001668:	64fb      	str	r3, [r7, #76]	; 0x4c
  macDefaultConf.UnicastSlowProtocolPacketDetect = DISABLE;
 800166a:	2300      	movs	r3, #0
 800166c:	f887 3064 	strb.w	r3, [r7, #100]	; 0x64

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 8001670:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001674:	4619      	mov	r1, r3
 8001676:	6878      	ldr	r0, [r7, #4]
 8001678:	f7ff fe9a 	bl	80013b0 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.DropTCPIPChecksumErrorFrame = ENABLE;
 800167c:	2301      	movs	r3, #1
 800167e:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.ReceiveStoreForward = ENABLE;
 8001680:	2301      	movs	r3, #1
 8001682:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.FlushRxPacket = ENABLE;
 8001684:	2301      	movs	r3, #1
 8001686:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  dmaDefaultConf.TransmitStoreForward = ENABLE;
 800168a:	2301      	movs	r3, #1
 800168c:	75bb      	strb	r3, [r7, #22]
  dmaDefaultConf.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 800168e:	2300      	movs	r3, #0
 8001690:	61fb      	str	r3, [r7, #28]
  dmaDefaultConf.ForwardErrorFrames = DISABLE;
 8001692:	2300      	movs	r3, #0
 8001694:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  dmaDefaultConf.ForwardUndersizedGoodFrames = DISABLE;
 8001698:	2300      	movs	r3, #0
 800169a:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  dmaDefaultConf.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 800169e:	2300      	movs	r3, #0
 80016a0:	62bb      	str	r3, [r7, #40]	; 0x28
  dmaDefaultConf.SecondFrameOperate = ENABLE;
 80016a2:	2301      	movs	r3, #1
 80016a4:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 80016a8:	2301      	movs	r3, #1
 80016aa:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 80016ac:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80016b0:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 80016b2:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80016b6:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 80016b8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80016bc:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.EnhancedDescriptorFormat = ENABLE;
 80016be:	2301      	movs	r3, #1
 80016c0:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
  dmaDefaultConf.DescriptorSkipLength = 0x0U;
 80016c4:	2300      	movs	r3, #0
 80016c6:	633b      	str	r3, [r7, #48]	; 0x30
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 80016c8:	2300      	movs	r3, #0
 80016ca:	60bb      	str	r3, [r7, #8]

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 80016cc:	f107 0308 	add.w	r3, r7, #8
 80016d0:	4619      	mov	r1, r3
 80016d2:	6878      	ldr	r0, [r7, #4]
 80016d4:	f7ff ff08 	bl	80014e8 <ETH_SetDMAConfig>
}
 80016d8:	bf00      	nop
 80016da:	3798      	adds	r7, #152	; 0x98
 80016dc:	46bd      	mov	sp, r7
 80016de:	bd80      	pop	{r7, pc}

080016e0 <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 80016e0:	b480      	push	{r7}
 80016e2:	b087      	sub	sp, #28
 80016e4:	af00      	add	r7, sp, #0
 80016e6:	60f8      	str	r0, [r7, #12]
 80016e8:	60b9      	str	r1, [r7, #8]
 80016ea:	607a      	str	r2, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);

  /* Calculate the selected MAC address high register */
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	3305      	adds	r3, #5
 80016f0:	781b      	ldrb	r3, [r3, #0]
 80016f2:	021b      	lsls	r3, r3, #8
 80016f4:	687a      	ldr	r2, [r7, #4]
 80016f6:	3204      	adds	r2, #4
 80016f8:	7812      	ldrb	r2, [r2, #0]
 80016fa:	4313      	orrs	r3, r2
 80016fc:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 80016fe:	68ba      	ldr	r2, [r7, #8]
 8001700:	4b11      	ldr	r3, [pc, #68]	; (8001748 <ETH_MACAddressConfig+0x68>)
 8001702:	4413      	add	r3, r2
 8001704:	461a      	mov	r2, r3
 8001706:	697b      	ldr	r3, [r7, #20]
 8001708:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	3303      	adds	r3, #3
 800170e:	781b      	ldrb	r3, [r3, #0]
 8001710:	061a      	lsls	r2, r3, #24
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	3302      	adds	r3, #2
 8001716:	781b      	ldrb	r3, [r3, #0]
 8001718:	041b      	lsls	r3, r3, #16
 800171a:	431a      	orrs	r2, r3
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	3301      	adds	r3, #1
 8001720:	781b      	ldrb	r3, [r3, #0]
 8001722:	021b      	lsls	r3, r3, #8
 8001724:	4313      	orrs	r3, r2
 8001726:	687a      	ldr	r2, [r7, #4]
 8001728:	7812      	ldrb	r2, [r2, #0]
 800172a:	4313      	orrs	r3, r2
 800172c:	617b      	str	r3, [r7, #20]

  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 800172e:	68ba      	ldr	r2, [r7, #8]
 8001730:	4b06      	ldr	r3, [pc, #24]	; (800174c <ETH_MACAddressConfig+0x6c>)
 8001732:	4413      	add	r3, r2
 8001734:	461a      	mov	r2, r3
 8001736:	697b      	ldr	r3, [r7, #20]
 8001738:	6013      	str	r3, [r2, #0]
}
 800173a:	bf00      	nop
 800173c:	371c      	adds	r7, #28
 800173e:	46bd      	mov	sp, r7
 8001740:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001744:	4770      	bx	lr
 8001746:	bf00      	nop
 8001748:	40028040 	.word	0x40028040
 800174c:	40028044 	.word	0x40028044

08001750 <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 8001750:	b480      	push	{r7}
 8001752:	b085      	sub	sp, #20
 8001754:	af00      	add	r7, sp, #0
 8001756:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8001758:	2300      	movs	r3, #0
 800175a:	60fb      	str	r3, [r7, #12]
 800175c:	e03e      	b.n	80017dc <ETH_DMATxDescListInit+0x8c>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	68d9      	ldr	r1, [r3, #12]
 8001762:	68fa      	ldr	r2, [r7, #12]
 8001764:	4613      	mov	r3, r2
 8001766:	009b      	lsls	r3, r3, #2
 8001768:	4413      	add	r3, r2
 800176a:	00db      	lsls	r3, r3, #3
 800176c:	440b      	add	r3, r1
 800176e:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0);
 8001770:	68bb      	ldr	r3, [r7, #8]
 8001772:	2200      	movs	r2, #0
 8001774:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0);
 8001776:	68bb      	ldr	r3, [r7, #8]
 8001778:	2200      	movs	r2, #0
 800177a:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0);
 800177c:	68bb      	ldr	r3, [r7, #8]
 800177e:	2200      	movs	r2, #0
 8001780:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0);
 8001782:	68bb      	ldr	r3, [r7, #8]
 8001784:	2200      	movs	r2, #0
 8001786:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 8001788:	68b9      	ldr	r1, [r7, #8]
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	68fa      	ldr	r2, [r7, #12]
 800178e:	3206      	adds	r2, #6
 8001790:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    /* Set Second Address Chained bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_TCH);
 8001794:	68bb      	ldr	r3, [r7, #8]
 8001796:	681b      	ldr	r3, [r3, #0]
 8001798:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800179c:	68bb      	ldr	r3, [r7, #8]
 800179e:	601a      	str	r2, [r3, #0]

    if (i < ((uint32_t)ETH_TX_DESC_CNT - 1U))
 80017a0:	68fb      	ldr	r3, [r7, #12]
 80017a2:	2b02      	cmp	r3, #2
 80017a4:	d80c      	bhi.n	80017c0 <ETH_DMATxDescListInit+0x70>
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc + i + 1U));
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	68d9      	ldr	r1, [r3, #12]
 80017aa:	68fb      	ldr	r3, [r7, #12]
 80017ac:	1c5a      	adds	r2, r3, #1
 80017ae:	4613      	mov	r3, r2
 80017b0:	009b      	lsls	r3, r3, #2
 80017b2:	4413      	add	r3, r2
 80017b4:	00db      	lsls	r3, r3, #3
 80017b6:	440b      	add	r3, r1
 80017b8:	461a      	mov	r2, r3
 80017ba:	68bb      	ldr	r3, [r7, #8]
 80017bc:	60da      	str	r2, [r3, #12]
 80017be:	e004      	b.n	80017ca <ETH_DMATxDescListInit+0x7a>
    }
    else
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc));
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	68db      	ldr	r3, [r3, #12]
 80017c4:	461a      	mov	r2, r3
 80017c6:	68bb      	ldr	r3, [r7, #8]
 80017c8:	60da      	str	r2, [r3, #12]
    }

    /* Set the DMA Tx descriptors checksum insertion */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL);
 80017ca:	68bb      	ldr	r3, [r7, #8]
 80017cc:	681b      	ldr	r3, [r3, #0]
 80017ce:	f443 0240 	orr.w	r2, r3, #12582912	; 0xc00000
 80017d2:	68bb      	ldr	r3, [r7, #8]
 80017d4:	601a      	str	r2, [r3, #0]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 80017d6:	68fb      	ldr	r3, [r7, #12]
 80017d8:	3301      	adds	r3, #1
 80017da:	60fb      	str	r3, [r7, #12]
 80017dc:	68fb      	ldr	r3, [r7, #12]
 80017de:	2b03      	cmp	r3, #3
 80017e0:	d9bd      	bls.n	800175e <ETH_DMATxDescListInit+0xe>
  }

  heth->TxDescList.CurTxDesc = 0;
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	2200      	movs	r2, #0
 80017e6:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMATDLAR, (uint32_t) heth->Init.TxDesc);
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	68da      	ldr	r2, [r3, #12]
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	681b      	ldr	r3, [r3, #0]
 80017f0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80017f4:	611a      	str	r2, [r3, #16]
}
 80017f6:	bf00      	nop
 80017f8:	3714      	adds	r7, #20
 80017fa:	46bd      	mov	sp, r7
 80017fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001800:	4770      	bx	lr

08001802 <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 8001802:	b480      	push	{r7}
 8001804:	b085      	sub	sp, #20
 8001806:	af00      	add	r7, sp, #0
 8001808:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 800180a:	2300      	movs	r3, #0
 800180c:	60fb      	str	r3, [r7, #12]
 800180e:	e046      	b.n	800189e <ETH_DMARxDescListInit+0x9c>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	6919      	ldr	r1, [r3, #16]
 8001814:	68fa      	ldr	r2, [r7, #12]
 8001816:	4613      	mov	r3, r2
 8001818:	009b      	lsls	r3, r3, #2
 800181a:	4413      	add	r3, r2
 800181c:	00db      	lsls	r3, r3, #3
 800181e:	440b      	add	r3, r1
 8001820:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0);
 8001822:	68bb      	ldr	r3, [r7, #8]
 8001824:	2200      	movs	r2, #0
 8001826:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0);
 8001828:	68bb      	ldr	r3, [r7, #8]
 800182a:	2200      	movs	r2, #0
 800182c:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0);
 800182e:	68bb      	ldr	r3, [r7, #8]
 8001830:	2200      	movs	r2, #0
 8001832:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0);
 8001834:	68bb      	ldr	r3, [r7, #8]
 8001836:	2200      	movs	r2, #0
 8001838:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0);
 800183a:	68bb      	ldr	r3, [r7, #8]
 800183c:	2200      	movs	r2, #0
 800183e:	621a      	str	r2, [r3, #32]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0);
 8001840:	68bb      	ldr	r3, [r7, #8]
 8001842:	2200      	movs	r2, #0
 8001844:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set Own bit of the Rx descriptor Status */
    dmarxdesc->DESC0 = ETH_DMARXDESC_OWN;
 8001846:	68bb      	ldr	r3, [r7, #8]
 8001848:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800184c:	601a      	str	r2, [r3, #0]

    /* Set Buffer1 size and Second Address Chained bit */
    dmarxdesc->DESC1 = ETH_DMARXDESC_RCH | ETH_RX_BUF_SIZE;
 800184e:	68bb      	ldr	r3, [r7, #8]
 8001850:	f244 52f8 	movw	r2, #17912	; 0x45f8
 8001854:	605a      	str	r2, [r3, #4]

    /* Enable Ethernet DMA Rx Descriptor interrupt */
    dmarxdesc->DESC1 &= ~ETH_DMARXDESC_DIC;
 8001856:	68bb      	ldr	r3, [r7, #8]
 8001858:	685b      	ldr	r3, [r3, #4]
 800185a:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800185e:	68bb      	ldr	r3, [r7, #8]
 8001860:	605a      	str	r2, [r3, #4]

    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 8001862:	68b9      	ldr	r1, [r7, #8]
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	68fa      	ldr	r2, [r7, #12]
 8001868:	3212      	adds	r2, #18
 800186a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    if (i < ((uint32_t)ETH_RX_DESC_CNT - 1U))
 800186e:	68fb      	ldr	r3, [r7, #12]
 8001870:	2b02      	cmp	r3, #2
 8001872:	d80c      	bhi.n	800188e <ETH_DMARxDescListInit+0x8c>
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc + i + 1U));
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	6919      	ldr	r1, [r3, #16]
 8001878:	68fb      	ldr	r3, [r7, #12]
 800187a:	1c5a      	adds	r2, r3, #1
 800187c:	4613      	mov	r3, r2
 800187e:	009b      	lsls	r3, r3, #2
 8001880:	4413      	add	r3, r2
 8001882:	00db      	lsls	r3, r3, #3
 8001884:	440b      	add	r3, r1
 8001886:	461a      	mov	r2, r3
 8001888:	68bb      	ldr	r3, [r7, #8]
 800188a:	60da      	str	r2, [r3, #12]
 800188c:	e004      	b.n	8001898 <ETH_DMARxDescListInit+0x96>
    }
    else
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc));
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	691b      	ldr	r3, [r3, #16]
 8001892:	461a      	mov	r2, r3
 8001894:	68bb      	ldr	r3, [r7, #8]
 8001896:	60da      	str	r2, [r3, #12]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8001898:	68fb      	ldr	r3, [r7, #12]
 800189a:	3301      	adds	r3, #1
 800189c:	60fb      	str	r3, [r7, #12]
 800189e:	68fb      	ldr	r3, [r7, #12]
 80018a0:	2b03      	cmp	r3, #3
 80018a2:	d9b5      	bls.n	8001810 <ETH_DMARxDescListInit+0xe>
    }
  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0);
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	2200      	movs	r2, #0
 80018a8:	65da      	str	r2, [r3, #92]	; 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0);
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	2200      	movs	r2, #0
 80018ae:	661a      	str	r2, [r3, #96]	; 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0);
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	2200      	movs	r2, #0
 80018b4:	669a      	str	r2, [r3, #104]	; 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0);
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	2200      	movs	r2, #0
 80018ba:	66da      	str	r2, [r3, #108]	; 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0);
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	2200      	movs	r2, #0
 80018c0:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMARDLAR, (uint32_t) heth->Init.RxDesc);
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	691a      	ldr	r2, [r3, #16]
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	681b      	ldr	r3, [r3, #0]
 80018ca:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80018ce:	60da      	str	r2, [r3, #12]
}
 80018d0:	bf00      	nop
 80018d2:	3714      	adds	r7, #20
 80018d4:	46bd      	mov	sp, r7
 80018d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018da:	4770      	bx	lr

080018dc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80018dc:	b480      	push	{r7}
 80018de:	b089      	sub	sp, #36	; 0x24
 80018e0:	af00      	add	r7, sp, #0
 80018e2:	6078      	str	r0, [r7, #4]
 80018e4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80018e6:	2300      	movs	r3, #0
 80018e8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80018ea:	2300      	movs	r3, #0
 80018ec:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80018ee:	2300      	movs	r3, #0
 80018f0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80018f2:	2300      	movs	r3, #0
 80018f4:	61fb      	str	r3, [r7, #28]
 80018f6:	e177      	b.n	8001be8 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80018f8:	2201      	movs	r2, #1
 80018fa:	69fb      	ldr	r3, [r7, #28]
 80018fc:	fa02 f303 	lsl.w	r3, r2, r3
 8001900:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001902:	683b      	ldr	r3, [r7, #0]
 8001904:	681b      	ldr	r3, [r3, #0]
 8001906:	697a      	ldr	r2, [r7, #20]
 8001908:	4013      	ands	r3, r2
 800190a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800190c:	693a      	ldr	r2, [r7, #16]
 800190e:	697b      	ldr	r3, [r7, #20]
 8001910:	429a      	cmp	r2, r3
 8001912:	f040 8166 	bne.w	8001be2 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001916:	683b      	ldr	r3, [r7, #0]
 8001918:	685b      	ldr	r3, [r3, #4]
 800191a:	f003 0303 	and.w	r3, r3, #3
 800191e:	2b01      	cmp	r3, #1
 8001920:	d005      	beq.n	800192e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001922:	683b      	ldr	r3, [r7, #0]
 8001924:	685b      	ldr	r3, [r3, #4]
 8001926:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800192a:	2b02      	cmp	r3, #2
 800192c:	d130      	bne.n	8001990 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	689b      	ldr	r3, [r3, #8]
 8001932:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001934:	69fb      	ldr	r3, [r7, #28]
 8001936:	005b      	lsls	r3, r3, #1
 8001938:	2203      	movs	r2, #3
 800193a:	fa02 f303 	lsl.w	r3, r2, r3
 800193e:	43db      	mvns	r3, r3
 8001940:	69ba      	ldr	r2, [r7, #24]
 8001942:	4013      	ands	r3, r2
 8001944:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001946:	683b      	ldr	r3, [r7, #0]
 8001948:	68da      	ldr	r2, [r3, #12]
 800194a:	69fb      	ldr	r3, [r7, #28]
 800194c:	005b      	lsls	r3, r3, #1
 800194e:	fa02 f303 	lsl.w	r3, r2, r3
 8001952:	69ba      	ldr	r2, [r7, #24]
 8001954:	4313      	orrs	r3, r2
 8001956:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	69ba      	ldr	r2, [r7, #24]
 800195c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	685b      	ldr	r3, [r3, #4]
 8001962:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001964:	2201      	movs	r2, #1
 8001966:	69fb      	ldr	r3, [r7, #28]
 8001968:	fa02 f303 	lsl.w	r3, r2, r3
 800196c:	43db      	mvns	r3, r3
 800196e:	69ba      	ldr	r2, [r7, #24]
 8001970:	4013      	ands	r3, r2
 8001972:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001974:	683b      	ldr	r3, [r7, #0]
 8001976:	685b      	ldr	r3, [r3, #4]
 8001978:	091b      	lsrs	r3, r3, #4
 800197a:	f003 0201 	and.w	r2, r3, #1
 800197e:	69fb      	ldr	r3, [r7, #28]
 8001980:	fa02 f303 	lsl.w	r3, r2, r3
 8001984:	69ba      	ldr	r2, [r7, #24]
 8001986:	4313      	orrs	r3, r2
 8001988:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	69ba      	ldr	r2, [r7, #24]
 800198e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001990:	683b      	ldr	r3, [r7, #0]
 8001992:	685b      	ldr	r3, [r3, #4]
 8001994:	f003 0303 	and.w	r3, r3, #3
 8001998:	2b03      	cmp	r3, #3
 800199a:	d017      	beq.n	80019cc <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	68db      	ldr	r3, [r3, #12]
 80019a0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80019a2:	69fb      	ldr	r3, [r7, #28]
 80019a4:	005b      	lsls	r3, r3, #1
 80019a6:	2203      	movs	r2, #3
 80019a8:	fa02 f303 	lsl.w	r3, r2, r3
 80019ac:	43db      	mvns	r3, r3
 80019ae:	69ba      	ldr	r2, [r7, #24]
 80019b0:	4013      	ands	r3, r2
 80019b2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80019b4:	683b      	ldr	r3, [r7, #0]
 80019b6:	689a      	ldr	r2, [r3, #8]
 80019b8:	69fb      	ldr	r3, [r7, #28]
 80019ba:	005b      	lsls	r3, r3, #1
 80019bc:	fa02 f303 	lsl.w	r3, r2, r3
 80019c0:	69ba      	ldr	r2, [r7, #24]
 80019c2:	4313      	orrs	r3, r2
 80019c4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	69ba      	ldr	r2, [r7, #24]
 80019ca:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80019cc:	683b      	ldr	r3, [r7, #0]
 80019ce:	685b      	ldr	r3, [r3, #4]
 80019d0:	f003 0303 	and.w	r3, r3, #3
 80019d4:	2b02      	cmp	r3, #2
 80019d6:	d123      	bne.n	8001a20 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80019d8:	69fb      	ldr	r3, [r7, #28]
 80019da:	08da      	lsrs	r2, r3, #3
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	3208      	adds	r2, #8
 80019e0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80019e4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80019e6:	69fb      	ldr	r3, [r7, #28]
 80019e8:	f003 0307 	and.w	r3, r3, #7
 80019ec:	009b      	lsls	r3, r3, #2
 80019ee:	220f      	movs	r2, #15
 80019f0:	fa02 f303 	lsl.w	r3, r2, r3
 80019f4:	43db      	mvns	r3, r3
 80019f6:	69ba      	ldr	r2, [r7, #24]
 80019f8:	4013      	ands	r3, r2
 80019fa:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80019fc:	683b      	ldr	r3, [r7, #0]
 80019fe:	691a      	ldr	r2, [r3, #16]
 8001a00:	69fb      	ldr	r3, [r7, #28]
 8001a02:	f003 0307 	and.w	r3, r3, #7
 8001a06:	009b      	lsls	r3, r3, #2
 8001a08:	fa02 f303 	lsl.w	r3, r2, r3
 8001a0c:	69ba      	ldr	r2, [r7, #24]
 8001a0e:	4313      	orrs	r3, r2
 8001a10:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001a12:	69fb      	ldr	r3, [r7, #28]
 8001a14:	08da      	lsrs	r2, r3, #3
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	3208      	adds	r2, #8
 8001a1a:	69b9      	ldr	r1, [r7, #24]
 8001a1c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	681b      	ldr	r3, [r3, #0]
 8001a24:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001a26:	69fb      	ldr	r3, [r7, #28]
 8001a28:	005b      	lsls	r3, r3, #1
 8001a2a:	2203      	movs	r2, #3
 8001a2c:	fa02 f303 	lsl.w	r3, r2, r3
 8001a30:	43db      	mvns	r3, r3
 8001a32:	69ba      	ldr	r2, [r7, #24]
 8001a34:	4013      	ands	r3, r2
 8001a36:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001a38:	683b      	ldr	r3, [r7, #0]
 8001a3a:	685b      	ldr	r3, [r3, #4]
 8001a3c:	f003 0203 	and.w	r2, r3, #3
 8001a40:	69fb      	ldr	r3, [r7, #28]
 8001a42:	005b      	lsls	r3, r3, #1
 8001a44:	fa02 f303 	lsl.w	r3, r2, r3
 8001a48:	69ba      	ldr	r2, [r7, #24]
 8001a4a:	4313      	orrs	r3, r2
 8001a4c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	69ba      	ldr	r2, [r7, #24]
 8001a52:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001a54:	683b      	ldr	r3, [r7, #0]
 8001a56:	685b      	ldr	r3, [r3, #4]
 8001a58:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001a5c:	2b00      	cmp	r3, #0
 8001a5e:	f000 80c0 	beq.w	8001be2 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001a62:	2300      	movs	r3, #0
 8001a64:	60fb      	str	r3, [r7, #12]
 8001a66:	4b66      	ldr	r3, [pc, #408]	; (8001c00 <HAL_GPIO_Init+0x324>)
 8001a68:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a6a:	4a65      	ldr	r2, [pc, #404]	; (8001c00 <HAL_GPIO_Init+0x324>)
 8001a6c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001a70:	6453      	str	r3, [r2, #68]	; 0x44
 8001a72:	4b63      	ldr	r3, [pc, #396]	; (8001c00 <HAL_GPIO_Init+0x324>)
 8001a74:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a76:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001a7a:	60fb      	str	r3, [r7, #12]
 8001a7c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001a7e:	4a61      	ldr	r2, [pc, #388]	; (8001c04 <HAL_GPIO_Init+0x328>)
 8001a80:	69fb      	ldr	r3, [r7, #28]
 8001a82:	089b      	lsrs	r3, r3, #2
 8001a84:	3302      	adds	r3, #2
 8001a86:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001a8a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001a8c:	69fb      	ldr	r3, [r7, #28]
 8001a8e:	f003 0303 	and.w	r3, r3, #3
 8001a92:	009b      	lsls	r3, r3, #2
 8001a94:	220f      	movs	r2, #15
 8001a96:	fa02 f303 	lsl.w	r3, r2, r3
 8001a9a:	43db      	mvns	r3, r3
 8001a9c:	69ba      	ldr	r2, [r7, #24]
 8001a9e:	4013      	ands	r3, r2
 8001aa0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	4a58      	ldr	r2, [pc, #352]	; (8001c08 <HAL_GPIO_Init+0x32c>)
 8001aa6:	4293      	cmp	r3, r2
 8001aa8:	d037      	beq.n	8001b1a <HAL_GPIO_Init+0x23e>
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	4a57      	ldr	r2, [pc, #348]	; (8001c0c <HAL_GPIO_Init+0x330>)
 8001aae:	4293      	cmp	r3, r2
 8001ab0:	d031      	beq.n	8001b16 <HAL_GPIO_Init+0x23a>
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	4a56      	ldr	r2, [pc, #344]	; (8001c10 <HAL_GPIO_Init+0x334>)
 8001ab6:	4293      	cmp	r3, r2
 8001ab8:	d02b      	beq.n	8001b12 <HAL_GPIO_Init+0x236>
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	4a55      	ldr	r2, [pc, #340]	; (8001c14 <HAL_GPIO_Init+0x338>)
 8001abe:	4293      	cmp	r3, r2
 8001ac0:	d025      	beq.n	8001b0e <HAL_GPIO_Init+0x232>
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	4a54      	ldr	r2, [pc, #336]	; (8001c18 <HAL_GPIO_Init+0x33c>)
 8001ac6:	4293      	cmp	r3, r2
 8001ac8:	d01f      	beq.n	8001b0a <HAL_GPIO_Init+0x22e>
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	4a53      	ldr	r2, [pc, #332]	; (8001c1c <HAL_GPIO_Init+0x340>)
 8001ace:	4293      	cmp	r3, r2
 8001ad0:	d019      	beq.n	8001b06 <HAL_GPIO_Init+0x22a>
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	4a52      	ldr	r2, [pc, #328]	; (8001c20 <HAL_GPIO_Init+0x344>)
 8001ad6:	4293      	cmp	r3, r2
 8001ad8:	d013      	beq.n	8001b02 <HAL_GPIO_Init+0x226>
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	4a51      	ldr	r2, [pc, #324]	; (8001c24 <HAL_GPIO_Init+0x348>)
 8001ade:	4293      	cmp	r3, r2
 8001ae0:	d00d      	beq.n	8001afe <HAL_GPIO_Init+0x222>
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	4a50      	ldr	r2, [pc, #320]	; (8001c28 <HAL_GPIO_Init+0x34c>)
 8001ae6:	4293      	cmp	r3, r2
 8001ae8:	d007      	beq.n	8001afa <HAL_GPIO_Init+0x21e>
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	4a4f      	ldr	r2, [pc, #316]	; (8001c2c <HAL_GPIO_Init+0x350>)
 8001aee:	4293      	cmp	r3, r2
 8001af0:	d101      	bne.n	8001af6 <HAL_GPIO_Init+0x21a>
 8001af2:	2309      	movs	r3, #9
 8001af4:	e012      	b.n	8001b1c <HAL_GPIO_Init+0x240>
 8001af6:	230a      	movs	r3, #10
 8001af8:	e010      	b.n	8001b1c <HAL_GPIO_Init+0x240>
 8001afa:	2308      	movs	r3, #8
 8001afc:	e00e      	b.n	8001b1c <HAL_GPIO_Init+0x240>
 8001afe:	2307      	movs	r3, #7
 8001b00:	e00c      	b.n	8001b1c <HAL_GPIO_Init+0x240>
 8001b02:	2306      	movs	r3, #6
 8001b04:	e00a      	b.n	8001b1c <HAL_GPIO_Init+0x240>
 8001b06:	2305      	movs	r3, #5
 8001b08:	e008      	b.n	8001b1c <HAL_GPIO_Init+0x240>
 8001b0a:	2304      	movs	r3, #4
 8001b0c:	e006      	b.n	8001b1c <HAL_GPIO_Init+0x240>
 8001b0e:	2303      	movs	r3, #3
 8001b10:	e004      	b.n	8001b1c <HAL_GPIO_Init+0x240>
 8001b12:	2302      	movs	r3, #2
 8001b14:	e002      	b.n	8001b1c <HAL_GPIO_Init+0x240>
 8001b16:	2301      	movs	r3, #1
 8001b18:	e000      	b.n	8001b1c <HAL_GPIO_Init+0x240>
 8001b1a:	2300      	movs	r3, #0
 8001b1c:	69fa      	ldr	r2, [r7, #28]
 8001b1e:	f002 0203 	and.w	r2, r2, #3
 8001b22:	0092      	lsls	r2, r2, #2
 8001b24:	4093      	lsls	r3, r2
 8001b26:	69ba      	ldr	r2, [r7, #24]
 8001b28:	4313      	orrs	r3, r2
 8001b2a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001b2c:	4935      	ldr	r1, [pc, #212]	; (8001c04 <HAL_GPIO_Init+0x328>)
 8001b2e:	69fb      	ldr	r3, [r7, #28]
 8001b30:	089b      	lsrs	r3, r3, #2
 8001b32:	3302      	adds	r3, #2
 8001b34:	69ba      	ldr	r2, [r7, #24]
 8001b36:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001b3a:	4b3d      	ldr	r3, [pc, #244]	; (8001c30 <HAL_GPIO_Init+0x354>)
 8001b3c:	689b      	ldr	r3, [r3, #8]
 8001b3e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001b40:	693b      	ldr	r3, [r7, #16]
 8001b42:	43db      	mvns	r3, r3
 8001b44:	69ba      	ldr	r2, [r7, #24]
 8001b46:	4013      	ands	r3, r2
 8001b48:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001b4a:	683b      	ldr	r3, [r7, #0]
 8001b4c:	685b      	ldr	r3, [r3, #4]
 8001b4e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001b52:	2b00      	cmp	r3, #0
 8001b54:	d003      	beq.n	8001b5e <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8001b56:	69ba      	ldr	r2, [r7, #24]
 8001b58:	693b      	ldr	r3, [r7, #16]
 8001b5a:	4313      	orrs	r3, r2
 8001b5c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001b5e:	4a34      	ldr	r2, [pc, #208]	; (8001c30 <HAL_GPIO_Init+0x354>)
 8001b60:	69bb      	ldr	r3, [r7, #24]
 8001b62:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001b64:	4b32      	ldr	r3, [pc, #200]	; (8001c30 <HAL_GPIO_Init+0x354>)
 8001b66:	68db      	ldr	r3, [r3, #12]
 8001b68:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001b6a:	693b      	ldr	r3, [r7, #16]
 8001b6c:	43db      	mvns	r3, r3
 8001b6e:	69ba      	ldr	r2, [r7, #24]
 8001b70:	4013      	ands	r3, r2
 8001b72:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001b74:	683b      	ldr	r3, [r7, #0]
 8001b76:	685b      	ldr	r3, [r3, #4]
 8001b78:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001b7c:	2b00      	cmp	r3, #0
 8001b7e:	d003      	beq.n	8001b88 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8001b80:	69ba      	ldr	r2, [r7, #24]
 8001b82:	693b      	ldr	r3, [r7, #16]
 8001b84:	4313      	orrs	r3, r2
 8001b86:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001b88:	4a29      	ldr	r2, [pc, #164]	; (8001c30 <HAL_GPIO_Init+0x354>)
 8001b8a:	69bb      	ldr	r3, [r7, #24]
 8001b8c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001b8e:	4b28      	ldr	r3, [pc, #160]	; (8001c30 <HAL_GPIO_Init+0x354>)
 8001b90:	685b      	ldr	r3, [r3, #4]
 8001b92:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001b94:	693b      	ldr	r3, [r7, #16]
 8001b96:	43db      	mvns	r3, r3
 8001b98:	69ba      	ldr	r2, [r7, #24]
 8001b9a:	4013      	ands	r3, r2
 8001b9c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001b9e:	683b      	ldr	r3, [r7, #0]
 8001ba0:	685b      	ldr	r3, [r3, #4]
 8001ba2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ba6:	2b00      	cmp	r3, #0
 8001ba8:	d003      	beq.n	8001bb2 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8001baa:	69ba      	ldr	r2, [r7, #24]
 8001bac:	693b      	ldr	r3, [r7, #16]
 8001bae:	4313      	orrs	r3, r2
 8001bb0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001bb2:	4a1f      	ldr	r2, [pc, #124]	; (8001c30 <HAL_GPIO_Init+0x354>)
 8001bb4:	69bb      	ldr	r3, [r7, #24]
 8001bb6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001bb8:	4b1d      	ldr	r3, [pc, #116]	; (8001c30 <HAL_GPIO_Init+0x354>)
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001bbe:	693b      	ldr	r3, [r7, #16]
 8001bc0:	43db      	mvns	r3, r3
 8001bc2:	69ba      	ldr	r2, [r7, #24]
 8001bc4:	4013      	ands	r3, r2
 8001bc6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001bc8:	683b      	ldr	r3, [r7, #0]
 8001bca:	685b      	ldr	r3, [r3, #4]
 8001bcc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001bd0:	2b00      	cmp	r3, #0
 8001bd2:	d003      	beq.n	8001bdc <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8001bd4:	69ba      	ldr	r2, [r7, #24]
 8001bd6:	693b      	ldr	r3, [r7, #16]
 8001bd8:	4313      	orrs	r3, r2
 8001bda:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001bdc:	4a14      	ldr	r2, [pc, #80]	; (8001c30 <HAL_GPIO_Init+0x354>)
 8001bde:	69bb      	ldr	r3, [r7, #24]
 8001be0:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001be2:	69fb      	ldr	r3, [r7, #28]
 8001be4:	3301      	adds	r3, #1
 8001be6:	61fb      	str	r3, [r7, #28]
 8001be8:	69fb      	ldr	r3, [r7, #28]
 8001bea:	2b0f      	cmp	r3, #15
 8001bec:	f67f ae84 	bls.w	80018f8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001bf0:	bf00      	nop
 8001bf2:	bf00      	nop
 8001bf4:	3724      	adds	r7, #36	; 0x24
 8001bf6:	46bd      	mov	sp, r7
 8001bf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bfc:	4770      	bx	lr
 8001bfe:	bf00      	nop
 8001c00:	40023800 	.word	0x40023800
 8001c04:	40013800 	.word	0x40013800
 8001c08:	40020000 	.word	0x40020000
 8001c0c:	40020400 	.word	0x40020400
 8001c10:	40020800 	.word	0x40020800
 8001c14:	40020c00 	.word	0x40020c00
 8001c18:	40021000 	.word	0x40021000
 8001c1c:	40021400 	.word	0x40021400
 8001c20:	40021800 	.word	0x40021800
 8001c24:	40021c00 	.word	0x40021c00
 8001c28:	40022000 	.word	0x40022000
 8001c2c:	40022400 	.word	0x40022400
 8001c30:	40013c00 	.word	0x40013c00

08001c34 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001c34:	b480      	push	{r7}
 8001c36:	b083      	sub	sp, #12
 8001c38:	af00      	add	r7, sp, #0
 8001c3a:	6078      	str	r0, [r7, #4]
 8001c3c:	460b      	mov	r3, r1
 8001c3e:	807b      	strh	r3, [r7, #2]
 8001c40:	4613      	mov	r3, r2
 8001c42:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001c44:	787b      	ldrb	r3, [r7, #1]
 8001c46:	2b00      	cmp	r3, #0
 8001c48:	d003      	beq.n	8001c52 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001c4a:	887a      	ldrh	r2, [r7, #2]
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001c50:	e003      	b.n	8001c5a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001c52:	887b      	ldrh	r3, [r7, #2]
 8001c54:	041a      	lsls	r2, r3, #16
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	619a      	str	r2, [r3, #24]
}
 8001c5a:	bf00      	nop
 8001c5c:	370c      	adds	r7, #12
 8001c5e:	46bd      	mov	sp, r7
 8001c60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c64:	4770      	bx	lr

08001c66 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001c66:	b480      	push	{r7}
 8001c68:	b085      	sub	sp, #20
 8001c6a:	af00      	add	r7, sp, #0
 8001c6c:	6078      	str	r0, [r7, #4]
 8001c6e:	460b      	mov	r3, r1
 8001c70:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	695b      	ldr	r3, [r3, #20]
 8001c76:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001c78:	887a      	ldrh	r2, [r7, #2]
 8001c7a:	68fb      	ldr	r3, [r7, #12]
 8001c7c:	4013      	ands	r3, r2
 8001c7e:	041a      	lsls	r2, r3, #16
 8001c80:	68fb      	ldr	r3, [r7, #12]
 8001c82:	43d9      	mvns	r1, r3
 8001c84:	887b      	ldrh	r3, [r7, #2]
 8001c86:	400b      	ands	r3, r1
 8001c88:	431a      	orrs	r2, r3
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	619a      	str	r2, [r3, #24]
}
 8001c8e:	bf00      	nop
 8001c90:	3714      	adds	r7, #20
 8001c92:	46bd      	mov	sp, r7
 8001c94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c98:	4770      	bx	lr

08001c9a <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8001c9a:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001c9c:	b08f      	sub	sp, #60	; 0x3c
 8001c9e:	af0a      	add	r7, sp, #40	; 0x28
 8001ca0:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	2b00      	cmp	r3, #0
 8001ca6:	d101      	bne.n	8001cac <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8001ca8:	2301      	movs	r3, #1
 8001caa:	e10f      	b.n	8001ecc <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8001cb8:	b2db      	uxtb	r3, r3
 8001cba:	2b00      	cmp	r3, #0
 8001cbc:	d106      	bne.n	8001ccc <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	2200      	movs	r2, #0
 8001cc2:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8001cc6:	6878      	ldr	r0, [r7, #4]
 8001cc8:	f7ff f892 	bl	8000df0 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	2203      	movs	r2, #3
 8001cd0:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8001cd4:	68bb      	ldr	r3, [r7, #8]
 8001cd6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001cd8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001cdc:	2b00      	cmp	r3, #0
 8001cde:	d102      	bne.n	8001ce6 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	2200      	movs	r2, #0
 8001ce4:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	681b      	ldr	r3, [r3, #0]
 8001cea:	4618      	mov	r0, r3
 8001cec:	f001 fd1b 	bl	8003726 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	603b      	str	r3, [r7, #0]
 8001cf6:	687e      	ldr	r6, [r7, #4]
 8001cf8:	466d      	mov	r5, sp
 8001cfa:	f106 0410 	add.w	r4, r6, #16
 8001cfe:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001d00:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001d02:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001d04:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001d06:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001d0a:	e885 0003 	stmia.w	r5, {r0, r1}
 8001d0e:	1d33      	adds	r3, r6, #4
 8001d10:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001d12:	6838      	ldr	r0, [r7, #0]
 8001d14:	f001 fca6 	bl	8003664 <USB_CoreInit>
 8001d18:	4603      	mov	r3, r0
 8001d1a:	2b00      	cmp	r3, #0
 8001d1c:	d005      	beq.n	8001d2a <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	2202      	movs	r2, #2
 8001d22:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8001d26:	2301      	movs	r3, #1
 8001d28:	e0d0      	b.n	8001ecc <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	681b      	ldr	r3, [r3, #0]
 8001d2e:	2100      	movs	r1, #0
 8001d30:	4618      	mov	r0, r3
 8001d32:	f001 fd09 	bl	8003748 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001d36:	2300      	movs	r3, #0
 8001d38:	73fb      	strb	r3, [r7, #15]
 8001d3a:	e04a      	b.n	8001dd2 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8001d3c:	7bfa      	ldrb	r2, [r7, #15]
 8001d3e:	6879      	ldr	r1, [r7, #4]
 8001d40:	4613      	mov	r3, r2
 8001d42:	00db      	lsls	r3, r3, #3
 8001d44:	4413      	add	r3, r2
 8001d46:	009b      	lsls	r3, r3, #2
 8001d48:	440b      	add	r3, r1
 8001d4a:	333d      	adds	r3, #61	; 0x3d
 8001d4c:	2201      	movs	r2, #1
 8001d4e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8001d50:	7bfa      	ldrb	r2, [r7, #15]
 8001d52:	6879      	ldr	r1, [r7, #4]
 8001d54:	4613      	mov	r3, r2
 8001d56:	00db      	lsls	r3, r3, #3
 8001d58:	4413      	add	r3, r2
 8001d5a:	009b      	lsls	r3, r3, #2
 8001d5c:	440b      	add	r3, r1
 8001d5e:	333c      	adds	r3, #60	; 0x3c
 8001d60:	7bfa      	ldrb	r2, [r7, #15]
 8001d62:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8001d64:	7bfa      	ldrb	r2, [r7, #15]
 8001d66:	7bfb      	ldrb	r3, [r7, #15]
 8001d68:	b298      	uxth	r0, r3
 8001d6a:	6879      	ldr	r1, [r7, #4]
 8001d6c:	4613      	mov	r3, r2
 8001d6e:	00db      	lsls	r3, r3, #3
 8001d70:	4413      	add	r3, r2
 8001d72:	009b      	lsls	r3, r3, #2
 8001d74:	440b      	add	r3, r1
 8001d76:	3344      	adds	r3, #68	; 0x44
 8001d78:	4602      	mov	r2, r0
 8001d7a:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8001d7c:	7bfa      	ldrb	r2, [r7, #15]
 8001d7e:	6879      	ldr	r1, [r7, #4]
 8001d80:	4613      	mov	r3, r2
 8001d82:	00db      	lsls	r3, r3, #3
 8001d84:	4413      	add	r3, r2
 8001d86:	009b      	lsls	r3, r3, #2
 8001d88:	440b      	add	r3, r1
 8001d8a:	3340      	adds	r3, #64	; 0x40
 8001d8c:	2200      	movs	r2, #0
 8001d8e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8001d90:	7bfa      	ldrb	r2, [r7, #15]
 8001d92:	6879      	ldr	r1, [r7, #4]
 8001d94:	4613      	mov	r3, r2
 8001d96:	00db      	lsls	r3, r3, #3
 8001d98:	4413      	add	r3, r2
 8001d9a:	009b      	lsls	r3, r3, #2
 8001d9c:	440b      	add	r3, r1
 8001d9e:	3348      	adds	r3, #72	; 0x48
 8001da0:	2200      	movs	r2, #0
 8001da2:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8001da4:	7bfa      	ldrb	r2, [r7, #15]
 8001da6:	6879      	ldr	r1, [r7, #4]
 8001da8:	4613      	mov	r3, r2
 8001daa:	00db      	lsls	r3, r3, #3
 8001dac:	4413      	add	r3, r2
 8001dae:	009b      	lsls	r3, r3, #2
 8001db0:	440b      	add	r3, r1
 8001db2:	334c      	adds	r3, #76	; 0x4c
 8001db4:	2200      	movs	r2, #0
 8001db6:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8001db8:	7bfa      	ldrb	r2, [r7, #15]
 8001dba:	6879      	ldr	r1, [r7, #4]
 8001dbc:	4613      	mov	r3, r2
 8001dbe:	00db      	lsls	r3, r3, #3
 8001dc0:	4413      	add	r3, r2
 8001dc2:	009b      	lsls	r3, r3, #2
 8001dc4:	440b      	add	r3, r1
 8001dc6:	3354      	adds	r3, #84	; 0x54
 8001dc8:	2200      	movs	r2, #0
 8001dca:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001dcc:	7bfb      	ldrb	r3, [r7, #15]
 8001dce:	3301      	adds	r3, #1
 8001dd0:	73fb      	strb	r3, [r7, #15]
 8001dd2:	7bfa      	ldrb	r2, [r7, #15]
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	685b      	ldr	r3, [r3, #4]
 8001dd8:	429a      	cmp	r2, r3
 8001dda:	d3af      	bcc.n	8001d3c <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001ddc:	2300      	movs	r3, #0
 8001dde:	73fb      	strb	r3, [r7, #15]
 8001de0:	e044      	b.n	8001e6c <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8001de2:	7bfa      	ldrb	r2, [r7, #15]
 8001de4:	6879      	ldr	r1, [r7, #4]
 8001de6:	4613      	mov	r3, r2
 8001de8:	00db      	lsls	r3, r3, #3
 8001dea:	4413      	add	r3, r2
 8001dec:	009b      	lsls	r3, r3, #2
 8001dee:	440b      	add	r3, r1
 8001df0:	f203 237d 	addw	r3, r3, #637	; 0x27d
 8001df4:	2200      	movs	r2, #0
 8001df6:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8001df8:	7bfa      	ldrb	r2, [r7, #15]
 8001dfa:	6879      	ldr	r1, [r7, #4]
 8001dfc:	4613      	mov	r3, r2
 8001dfe:	00db      	lsls	r3, r3, #3
 8001e00:	4413      	add	r3, r2
 8001e02:	009b      	lsls	r3, r3, #2
 8001e04:	440b      	add	r3, r1
 8001e06:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 8001e0a:	7bfa      	ldrb	r2, [r7, #15]
 8001e0c:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8001e0e:	7bfa      	ldrb	r2, [r7, #15]
 8001e10:	6879      	ldr	r1, [r7, #4]
 8001e12:	4613      	mov	r3, r2
 8001e14:	00db      	lsls	r3, r3, #3
 8001e16:	4413      	add	r3, r2
 8001e18:	009b      	lsls	r3, r3, #2
 8001e1a:	440b      	add	r3, r1
 8001e1c:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8001e20:	2200      	movs	r2, #0
 8001e22:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8001e24:	7bfa      	ldrb	r2, [r7, #15]
 8001e26:	6879      	ldr	r1, [r7, #4]
 8001e28:	4613      	mov	r3, r2
 8001e2a:	00db      	lsls	r3, r3, #3
 8001e2c:	4413      	add	r3, r2
 8001e2e:	009b      	lsls	r3, r3, #2
 8001e30:	440b      	add	r3, r1
 8001e32:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8001e36:	2200      	movs	r2, #0
 8001e38:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8001e3a:	7bfa      	ldrb	r2, [r7, #15]
 8001e3c:	6879      	ldr	r1, [r7, #4]
 8001e3e:	4613      	mov	r3, r2
 8001e40:	00db      	lsls	r3, r3, #3
 8001e42:	4413      	add	r3, r2
 8001e44:	009b      	lsls	r3, r3, #2
 8001e46:	440b      	add	r3, r1
 8001e48:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8001e4c:	2200      	movs	r2, #0
 8001e4e:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8001e50:	7bfa      	ldrb	r2, [r7, #15]
 8001e52:	6879      	ldr	r1, [r7, #4]
 8001e54:	4613      	mov	r3, r2
 8001e56:	00db      	lsls	r3, r3, #3
 8001e58:	4413      	add	r3, r2
 8001e5a:	009b      	lsls	r3, r3, #2
 8001e5c:	440b      	add	r3, r1
 8001e5e:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8001e62:	2200      	movs	r2, #0
 8001e64:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001e66:	7bfb      	ldrb	r3, [r7, #15]
 8001e68:	3301      	adds	r3, #1
 8001e6a:	73fb      	strb	r3, [r7, #15]
 8001e6c:	7bfa      	ldrb	r2, [r7, #15]
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	685b      	ldr	r3, [r3, #4]
 8001e72:	429a      	cmp	r2, r3
 8001e74:	d3b5      	bcc.n	8001de2 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	603b      	str	r3, [r7, #0]
 8001e7c:	687e      	ldr	r6, [r7, #4]
 8001e7e:	466d      	mov	r5, sp
 8001e80:	f106 0410 	add.w	r4, r6, #16
 8001e84:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001e86:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001e88:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001e8a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001e8c:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001e90:	e885 0003 	stmia.w	r5, {r0, r1}
 8001e94:	1d33      	adds	r3, r6, #4
 8001e96:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001e98:	6838      	ldr	r0, [r7, #0]
 8001e9a:	f001 fca1 	bl	80037e0 <USB_DevInit>
 8001e9e:	4603      	mov	r3, r0
 8001ea0:	2b00      	cmp	r3, #0
 8001ea2:	d005      	beq.n	8001eb0 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	2202      	movs	r2, #2
 8001ea8:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8001eac:	2301      	movs	r3, #1
 8001eae:	e00d      	b.n	8001ecc <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	2200      	movs	r2, #0
 8001eb4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	2201      	movs	r2, #1
 8001ebc:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	4618      	mov	r0, r3
 8001ec6:	f001 fe6c 	bl	8003ba2 <USB_DevDisconnect>

  return HAL_OK;
 8001eca:	2300      	movs	r3, #0
}
 8001ecc:	4618      	mov	r0, r3
 8001ece:	3714      	adds	r7, #20
 8001ed0:	46bd      	mov	sp, r7
 8001ed2:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001ed4 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001ed4:	b580      	push	{r7, lr}
 8001ed6:	b086      	sub	sp, #24
 8001ed8:	af00      	add	r7, sp, #0
 8001eda:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	2b00      	cmp	r3, #0
 8001ee0:	d101      	bne.n	8001ee6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001ee2:	2301      	movs	r3, #1
 8001ee4:	e267      	b.n	80023b6 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	f003 0301 	and.w	r3, r3, #1
 8001eee:	2b00      	cmp	r3, #0
 8001ef0:	d075      	beq.n	8001fde <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001ef2:	4b88      	ldr	r3, [pc, #544]	; (8002114 <HAL_RCC_OscConfig+0x240>)
 8001ef4:	689b      	ldr	r3, [r3, #8]
 8001ef6:	f003 030c 	and.w	r3, r3, #12
 8001efa:	2b04      	cmp	r3, #4
 8001efc:	d00c      	beq.n	8001f18 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001efe:	4b85      	ldr	r3, [pc, #532]	; (8002114 <HAL_RCC_OscConfig+0x240>)
 8001f00:	689b      	ldr	r3, [r3, #8]
 8001f02:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001f06:	2b08      	cmp	r3, #8
 8001f08:	d112      	bne.n	8001f30 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001f0a:	4b82      	ldr	r3, [pc, #520]	; (8002114 <HAL_RCC_OscConfig+0x240>)
 8001f0c:	685b      	ldr	r3, [r3, #4]
 8001f0e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001f12:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001f16:	d10b      	bne.n	8001f30 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001f18:	4b7e      	ldr	r3, [pc, #504]	; (8002114 <HAL_RCC_OscConfig+0x240>)
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f20:	2b00      	cmp	r3, #0
 8001f22:	d05b      	beq.n	8001fdc <HAL_RCC_OscConfig+0x108>
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	685b      	ldr	r3, [r3, #4]
 8001f28:	2b00      	cmp	r3, #0
 8001f2a:	d157      	bne.n	8001fdc <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001f2c:	2301      	movs	r3, #1
 8001f2e:	e242      	b.n	80023b6 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	685b      	ldr	r3, [r3, #4]
 8001f34:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001f38:	d106      	bne.n	8001f48 <HAL_RCC_OscConfig+0x74>
 8001f3a:	4b76      	ldr	r3, [pc, #472]	; (8002114 <HAL_RCC_OscConfig+0x240>)
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	4a75      	ldr	r2, [pc, #468]	; (8002114 <HAL_RCC_OscConfig+0x240>)
 8001f40:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001f44:	6013      	str	r3, [r2, #0]
 8001f46:	e01d      	b.n	8001f84 <HAL_RCC_OscConfig+0xb0>
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	685b      	ldr	r3, [r3, #4]
 8001f4c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001f50:	d10c      	bne.n	8001f6c <HAL_RCC_OscConfig+0x98>
 8001f52:	4b70      	ldr	r3, [pc, #448]	; (8002114 <HAL_RCC_OscConfig+0x240>)
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	4a6f      	ldr	r2, [pc, #444]	; (8002114 <HAL_RCC_OscConfig+0x240>)
 8001f58:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001f5c:	6013      	str	r3, [r2, #0]
 8001f5e:	4b6d      	ldr	r3, [pc, #436]	; (8002114 <HAL_RCC_OscConfig+0x240>)
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	4a6c      	ldr	r2, [pc, #432]	; (8002114 <HAL_RCC_OscConfig+0x240>)
 8001f64:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001f68:	6013      	str	r3, [r2, #0]
 8001f6a:	e00b      	b.n	8001f84 <HAL_RCC_OscConfig+0xb0>
 8001f6c:	4b69      	ldr	r3, [pc, #420]	; (8002114 <HAL_RCC_OscConfig+0x240>)
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	4a68      	ldr	r2, [pc, #416]	; (8002114 <HAL_RCC_OscConfig+0x240>)
 8001f72:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001f76:	6013      	str	r3, [r2, #0]
 8001f78:	4b66      	ldr	r3, [pc, #408]	; (8002114 <HAL_RCC_OscConfig+0x240>)
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	4a65      	ldr	r2, [pc, #404]	; (8002114 <HAL_RCC_OscConfig+0x240>)
 8001f7e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001f82:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	685b      	ldr	r3, [r3, #4]
 8001f88:	2b00      	cmp	r3, #0
 8001f8a:	d013      	beq.n	8001fb4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f8c:	f7ff f850 	bl	8001030 <HAL_GetTick>
 8001f90:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001f92:	e008      	b.n	8001fa6 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001f94:	f7ff f84c 	bl	8001030 <HAL_GetTick>
 8001f98:	4602      	mov	r2, r0
 8001f9a:	693b      	ldr	r3, [r7, #16]
 8001f9c:	1ad3      	subs	r3, r2, r3
 8001f9e:	2b64      	cmp	r3, #100	; 0x64
 8001fa0:	d901      	bls.n	8001fa6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001fa2:	2303      	movs	r3, #3
 8001fa4:	e207      	b.n	80023b6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001fa6:	4b5b      	ldr	r3, [pc, #364]	; (8002114 <HAL_RCC_OscConfig+0x240>)
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001fae:	2b00      	cmp	r3, #0
 8001fb0:	d0f0      	beq.n	8001f94 <HAL_RCC_OscConfig+0xc0>
 8001fb2:	e014      	b.n	8001fde <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001fb4:	f7ff f83c 	bl	8001030 <HAL_GetTick>
 8001fb8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001fba:	e008      	b.n	8001fce <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001fbc:	f7ff f838 	bl	8001030 <HAL_GetTick>
 8001fc0:	4602      	mov	r2, r0
 8001fc2:	693b      	ldr	r3, [r7, #16]
 8001fc4:	1ad3      	subs	r3, r2, r3
 8001fc6:	2b64      	cmp	r3, #100	; 0x64
 8001fc8:	d901      	bls.n	8001fce <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001fca:	2303      	movs	r3, #3
 8001fcc:	e1f3      	b.n	80023b6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001fce:	4b51      	ldr	r3, [pc, #324]	; (8002114 <HAL_RCC_OscConfig+0x240>)
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001fd6:	2b00      	cmp	r3, #0
 8001fd8:	d1f0      	bne.n	8001fbc <HAL_RCC_OscConfig+0xe8>
 8001fda:	e000      	b.n	8001fde <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001fdc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	f003 0302 	and.w	r3, r3, #2
 8001fe6:	2b00      	cmp	r3, #0
 8001fe8:	d063      	beq.n	80020b2 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001fea:	4b4a      	ldr	r3, [pc, #296]	; (8002114 <HAL_RCC_OscConfig+0x240>)
 8001fec:	689b      	ldr	r3, [r3, #8]
 8001fee:	f003 030c 	and.w	r3, r3, #12
 8001ff2:	2b00      	cmp	r3, #0
 8001ff4:	d00b      	beq.n	800200e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001ff6:	4b47      	ldr	r3, [pc, #284]	; (8002114 <HAL_RCC_OscConfig+0x240>)
 8001ff8:	689b      	ldr	r3, [r3, #8]
 8001ffa:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001ffe:	2b08      	cmp	r3, #8
 8002000:	d11c      	bne.n	800203c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002002:	4b44      	ldr	r3, [pc, #272]	; (8002114 <HAL_RCC_OscConfig+0x240>)
 8002004:	685b      	ldr	r3, [r3, #4]
 8002006:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800200a:	2b00      	cmp	r3, #0
 800200c:	d116      	bne.n	800203c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800200e:	4b41      	ldr	r3, [pc, #260]	; (8002114 <HAL_RCC_OscConfig+0x240>)
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	f003 0302 	and.w	r3, r3, #2
 8002016:	2b00      	cmp	r3, #0
 8002018:	d005      	beq.n	8002026 <HAL_RCC_OscConfig+0x152>
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	68db      	ldr	r3, [r3, #12]
 800201e:	2b01      	cmp	r3, #1
 8002020:	d001      	beq.n	8002026 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002022:	2301      	movs	r3, #1
 8002024:	e1c7      	b.n	80023b6 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002026:	4b3b      	ldr	r3, [pc, #236]	; (8002114 <HAL_RCC_OscConfig+0x240>)
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	691b      	ldr	r3, [r3, #16]
 8002032:	00db      	lsls	r3, r3, #3
 8002034:	4937      	ldr	r1, [pc, #220]	; (8002114 <HAL_RCC_OscConfig+0x240>)
 8002036:	4313      	orrs	r3, r2
 8002038:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800203a:	e03a      	b.n	80020b2 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	68db      	ldr	r3, [r3, #12]
 8002040:	2b00      	cmp	r3, #0
 8002042:	d020      	beq.n	8002086 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002044:	4b34      	ldr	r3, [pc, #208]	; (8002118 <HAL_RCC_OscConfig+0x244>)
 8002046:	2201      	movs	r2, #1
 8002048:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800204a:	f7fe fff1 	bl	8001030 <HAL_GetTick>
 800204e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002050:	e008      	b.n	8002064 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002052:	f7fe ffed 	bl	8001030 <HAL_GetTick>
 8002056:	4602      	mov	r2, r0
 8002058:	693b      	ldr	r3, [r7, #16]
 800205a:	1ad3      	subs	r3, r2, r3
 800205c:	2b02      	cmp	r3, #2
 800205e:	d901      	bls.n	8002064 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002060:	2303      	movs	r3, #3
 8002062:	e1a8      	b.n	80023b6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002064:	4b2b      	ldr	r3, [pc, #172]	; (8002114 <HAL_RCC_OscConfig+0x240>)
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	f003 0302 	and.w	r3, r3, #2
 800206c:	2b00      	cmp	r3, #0
 800206e:	d0f0      	beq.n	8002052 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002070:	4b28      	ldr	r3, [pc, #160]	; (8002114 <HAL_RCC_OscConfig+0x240>)
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	691b      	ldr	r3, [r3, #16]
 800207c:	00db      	lsls	r3, r3, #3
 800207e:	4925      	ldr	r1, [pc, #148]	; (8002114 <HAL_RCC_OscConfig+0x240>)
 8002080:	4313      	orrs	r3, r2
 8002082:	600b      	str	r3, [r1, #0]
 8002084:	e015      	b.n	80020b2 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002086:	4b24      	ldr	r3, [pc, #144]	; (8002118 <HAL_RCC_OscConfig+0x244>)
 8002088:	2200      	movs	r2, #0
 800208a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800208c:	f7fe ffd0 	bl	8001030 <HAL_GetTick>
 8002090:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002092:	e008      	b.n	80020a6 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002094:	f7fe ffcc 	bl	8001030 <HAL_GetTick>
 8002098:	4602      	mov	r2, r0
 800209a:	693b      	ldr	r3, [r7, #16]
 800209c:	1ad3      	subs	r3, r2, r3
 800209e:	2b02      	cmp	r3, #2
 80020a0:	d901      	bls.n	80020a6 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80020a2:	2303      	movs	r3, #3
 80020a4:	e187      	b.n	80023b6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80020a6:	4b1b      	ldr	r3, [pc, #108]	; (8002114 <HAL_RCC_OscConfig+0x240>)
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	f003 0302 	and.w	r3, r3, #2
 80020ae:	2b00      	cmp	r3, #0
 80020b0:	d1f0      	bne.n	8002094 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	f003 0308 	and.w	r3, r3, #8
 80020ba:	2b00      	cmp	r3, #0
 80020bc:	d036      	beq.n	800212c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	695b      	ldr	r3, [r3, #20]
 80020c2:	2b00      	cmp	r3, #0
 80020c4:	d016      	beq.n	80020f4 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80020c6:	4b15      	ldr	r3, [pc, #84]	; (800211c <HAL_RCC_OscConfig+0x248>)
 80020c8:	2201      	movs	r2, #1
 80020ca:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80020cc:	f7fe ffb0 	bl	8001030 <HAL_GetTick>
 80020d0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80020d2:	e008      	b.n	80020e6 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80020d4:	f7fe ffac 	bl	8001030 <HAL_GetTick>
 80020d8:	4602      	mov	r2, r0
 80020da:	693b      	ldr	r3, [r7, #16]
 80020dc:	1ad3      	subs	r3, r2, r3
 80020de:	2b02      	cmp	r3, #2
 80020e0:	d901      	bls.n	80020e6 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80020e2:	2303      	movs	r3, #3
 80020e4:	e167      	b.n	80023b6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80020e6:	4b0b      	ldr	r3, [pc, #44]	; (8002114 <HAL_RCC_OscConfig+0x240>)
 80020e8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80020ea:	f003 0302 	and.w	r3, r3, #2
 80020ee:	2b00      	cmp	r3, #0
 80020f0:	d0f0      	beq.n	80020d4 <HAL_RCC_OscConfig+0x200>
 80020f2:	e01b      	b.n	800212c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80020f4:	4b09      	ldr	r3, [pc, #36]	; (800211c <HAL_RCC_OscConfig+0x248>)
 80020f6:	2200      	movs	r2, #0
 80020f8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80020fa:	f7fe ff99 	bl	8001030 <HAL_GetTick>
 80020fe:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002100:	e00e      	b.n	8002120 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002102:	f7fe ff95 	bl	8001030 <HAL_GetTick>
 8002106:	4602      	mov	r2, r0
 8002108:	693b      	ldr	r3, [r7, #16]
 800210a:	1ad3      	subs	r3, r2, r3
 800210c:	2b02      	cmp	r3, #2
 800210e:	d907      	bls.n	8002120 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002110:	2303      	movs	r3, #3
 8002112:	e150      	b.n	80023b6 <HAL_RCC_OscConfig+0x4e2>
 8002114:	40023800 	.word	0x40023800
 8002118:	42470000 	.word	0x42470000
 800211c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002120:	4b88      	ldr	r3, [pc, #544]	; (8002344 <HAL_RCC_OscConfig+0x470>)
 8002122:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002124:	f003 0302 	and.w	r3, r3, #2
 8002128:	2b00      	cmp	r3, #0
 800212a:	d1ea      	bne.n	8002102 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	f003 0304 	and.w	r3, r3, #4
 8002134:	2b00      	cmp	r3, #0
 8002136:	f000 8097 	beq.w	8002268 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800213a:	2300      	movs	r3, #0
 800213c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800213e:	4b81      	ldr	r3, [pc, #516]	; (8002344 <HAL_RCC_OscConfig+0x470>)
 8002140:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002142:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002146:	2b00      	cmp	r3, #0
 8002148:	d10f      	bne.n	800216a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800214a:	2300      	movs	r3, #0
 800214c:	60bb      	str	r3, [r7, #8]
 800214e:	4b7d      	ldr	r3, [pc, #500]	; (8002344 <HAL_RCC_OscConfig+0x470>)
 8002150:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002152:	4a7c      	ldr	r2, [pc, #496]	; (8002344 <HAL_RCC_OscConfig+0x470>)
 8002154:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002158:	6413      	str	r3, [r2, #64]	; 0x40
 800215a:	4b7a      	ldr	r3, [pc, #488]	; (8002344 <HAL_RCC_OscConfig+0x470>)
 800215c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800215e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002162:	60bb      	str	r3, [r7, #8]
 8002164:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002166:	2301      	movs	r3, #1
 8002168:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800216a:	4b77      	ldr	r3, [pc, #476]	; (8002348 <HAL_RCC_OscConfig+0x474>)
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002172:	2b00      	cmp	r3, #0
 8002174:	d118      	bne.n	80021a8 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002176:	4b74      	ldr	r3, [pc, #464]	; (8002348 <HAL_RCC_OscConfig+0x474>)
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	4a73      	ldr	r2, [pc, #460]	; (8002348 <HAL_RCC_OscConfig+0x474>)
 800217c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002180:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002182:	f7fe ff55 	bl	8001030 <HAL_GetTick>
 8002186:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002188:	e008      	b.n	800219c <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800218a:	f7fe ff51 	bl	8001030 <HAL_GetTick>
 800218e:	4602      	mov	r2, r0
 8002190:	693b      	ldr	r3, [r7, #16]
 8002192:	1ad3      	subs	r3, r2, r3
 8002194:	2b02      	cmp	r3, #2
 8002196:	d901      	bls.n	800219c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002198:	2303      	movs	r3, #3
 800219a:	e10c      	b.n	80023b6 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800219c:	4b6a      	ldr	r3, [pc, #424]	; (8002348 <HAL_RCC_OscConfig+0x474>)
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80021a4:	2b00      	cmp	r3, #0
 80021a6:	d0f0      	beq.n	800218a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	689b      	ldr	r3, [r3, #8]
 80021ac:	2b01      	cmp	r3, #1
 80021ae:	d106      	bne.n	80021be <HAL_RCC_OscConfig+0x2ea>
 80021b0:	4b64      	ldr	r3, [pc, #400]	; (8002344 <HAL_RCC_OscConfig+0x470>)
 80021b2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80021b4:	4a63      	ldr	r2, [pc, #396]	; (8002344 <HAL_RCC_OscConfig+0x470>)
 80021b6:	f043 0301 	orr.w	r3, r3, #1
 80021ba:	6713      	str	r3, [r2, #112]	; 0x70
 80021bc:	e01c      	b.n	80021f8 <HAL_RCC_OscConfig+0x324>
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	689b      	ldr	r3, [r3, #8]
 80021c2:	2b05      	cmp	r3, #5
 80021c4:	d10c      	bne.n	80021e0 <HAL_RCC_OscConfig+0x30c>
 80021c6:	4b5f      	ldr	r3, [pc, #380]	; (8002344 <HAL_RCC_OscConfig+0x470>)
 80021c8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80021ca:	4a5e      	ldr	r2, [pc, #376]	; (8002344 <HAL_RCC_OscConfig+0x470>)
 80021cc:	f043 0304 	orr.w	r3, r3, #4
 80021d0:	6713      	str	r3, [r2, #112]	; 0x70
 80021d2:	4b5c      	ldr	r3, [pc, #368]	; (8002344 <HAL_RCC_OscConfig+0x470>)
 80021d4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80021d6:	4a5b      	ldr	r2, [pc, #364]	; (8002344 <HAL_RCC_OscConfig+0x470>)
 80021d8:	f043 0301 	orr.w	r3, r3, #1
 80021dc:	6713      	str	r3, [r2, #112]	; 0x70
 80021de:	e00b      	b.n	80021f8 <HAL_RCC_OscConfig+0x324>
 80021e0:	4b58      	ldr	r3, [pc, #352]	; (8002344 <HAL_RCC_OscConfig+0x470>)
 80021e2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80021e4:	4a57      	ldr	r2, [pc, #348]	; (8002344 <HAL_RCC_OscConfig+0x470>)
 80021e6:	f023 0301 	bic.w	r3, r3, #1
 80021ea:	6713      	str	r3, [r2, #112]	; 0x70
 80021ec:	4b55      	ldr	r3, [pc, #340]	; (8002344 <HAL_RCC_OscConfig+0x470>)
 80021ee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80021f0:	4a54      	ldr	r2, [pc, #336]	; (8002344 <HAL_RCC_OscConfig+0x470>)
 80021f2:	f023 0304 	bic.w	r3, r3, #4
 80021f6:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	689b      	ldr	r3, [r3, #8]
 80021fc:	2b00      	cmp	r3, #0
 80021fe:	d015      	beq.n	800222c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002200:	f7fe ff16 	bl	8001030 <HAL_GetTick>
 8002204:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002206:	e00a      	b.n	800221e <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002208:	f7fe ff12 	bl	8001030 <HAL_GetTick>
 800220c:	4602      	mov	r2, r0
 800220e:	693b      	ldr	r3, [r7, #16]
 8002210:	1ad3      	subs	r3, r2, r3
 8002212:	f241 3288 	movw	r2, #5000	; 0x1388
 8002216:	4293      	cmp	r3, r2
 8002218:	d901      	bls.n	800221e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800221a:	2303      	movs	r3, #3
 800221c:	e0cb      	b.n	80023b6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800221e:	4b49      	ldr	r3, [pc, #292]	; (8002344 <HAL_RCC_OscConfig+0x470>)
 8002220:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002222:	f003 0302 	and.w	r3, r3, #2
 8002226:	2b00      	cmp	r3, #0
 8002228:	d0ee      	beq.n	8002208 <HAL_RCC_OscConfig+0x334>
 800222a:	e014      	b.n	8002256 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800222c:	f7fe ff00 	bl	8001030 <HAL_GetTick>
 8002230:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002232:	e00a      	b.n	800224a <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002234:	f7fe fefc 	bl	8001030 <HAL_GetTick>
 8002238:	4602      	mov	r2, r0
 800223a:	693b      	ldr	r3, [r7, #16]
 800223c:	1ad3      	subs	r3, r2, r3
 800223e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002242:	4293      	cmp	r3, r2
 8002244:	d901      	bls.n	800224a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8002246:	2303      	movs	r3, #3
 8002248:	e0b5      	b.n	80023b6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800224a:	4b3e      	ldr	r3, [pc, #248]	; (8002344 <HAL_RCC_OscConfig+0x470>)
 800224c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800224e:	f003 0302 	and.w	r3, r3, #2
 8002252:	2b00      	cmp	r3, #0
 8002254:	d1ee      	bne.n	8002234 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002256:	7dfb      	ldrb	r3, [r7, #23]
 8002258:	2b01      	cmp	r3, #1
 800225a:	d105      	bne.n	8002268 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800225c:	4b39      	ldr	r3, [pc, #228]	; (8002344 <HAL_RCC_OscConfig+0x470>)
 800225e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002260:	4a38      	ldr	r2, [pc, #224]	; (8002344 <HAL_RCC_OscConfig+0x470>)
 8002262:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002266:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	699b      	ldr	r3, [r3, #24]
 800226c:	2b00      	cmp	r3, #0
 800226e:	f000 80a1 	beq.w	80023b4 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002272:	4b34      	ldr	r3, [pc, #208]	; (8002344 <HAL_RCC_OscConfig+0x470>)
 8002274:	689b      	ldr	r3, [r3, #8]
 8002276:	f003 030c 	and.w	r3, r3, #12
 800227a:	2b08      	cmp	r3, #8
 800227c:	d05c      	beq.n	8002338 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	699b      	ldr	r3, [r3, #24]
 8002282:	2b02      	cmp	r3, #2
 8002284:	d141      	bne.n	800230a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002286:	4b31      	ldr	r3, [pc, #196]	; (800234c <HAL_RCC_OscConfig+0x478>)
 8002288:	2200      	movs	r2, #0
 800228a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800228c:	f7fe fed0 	bl	8001030 <HAL_GetTick>
 8002290:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002292:	e008      	b.n	80022a6 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002294:	f7fe fecc 	bl	8001030 <HAL_GetTick>
 8002298:	4602      	mov	r2, r0
 800229a:	693b      	ldr	r3, [r7, #16]
 800229c:	1ad3      	subs	r3, r2, r3
 800229e:	2b02      	cmp	r3, #2
 80022a0:	d901      	bls.n	80022a6 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80022a2:	2303      	movs	r3, #3
 80022a4:	e087      	b.n	80023b6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80022a6:	4b27      	ldr	r3, [pc, #156]	; (8002344 <HAL_RCC_OscConfig+0x470>)
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80022ae:	2b00      	cmp	r3, #0
 80022b0:	d1f0      	bne.n	8002294 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	69da      	ldr	r2, [r3, #28]
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	6a1b      	ldr	r3, [r3, #32]
 80022ba:	431a      	orrs	r2, r3
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022c0:	019b      	lsls	r3, r3, #6
 80022c2:	431a      	orrs	r2, r3
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80022c8:	085b      	lsrs	r3, r3, #1
 80022ca:	3b01      	subs	r3, #1
 80022cc:	041b      	lsls	r3, r3, #16
 80022ce:	431a      	orrs	r2, r3
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80022d4:	061b      	lsls	r3, r3, #24
 80022d6:	491b      	ldr	r1, [pc, #108]	; (8002344 <HAL_RCC_OscConfig+0x470>)
 80022d8:	4313      	orrs	r3, r2
 80022da:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80022dc:	4b1b      	ldr	r3, [pc, #108]	; (800234c <HAL_RCC_OscConfig+0x478>)
 80022de:	2201      	movs	r2, #1
 80022e0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80022e2:	f7fe fea5 	bl	8001030 <HAL_GetTick>
 80022e6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80022e8:	e008      	b.n	80022fc <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80022ea:	f7fe fea1 	bl	8001030 <HAL_GetTick>
 80022ee:	4602      	mov	r2, r0
 80022f0:	693b      	ldr	r3, [r7, #16]
 80022f2:	1ad3      	subs	r3, r2, r3
 80022f4:	2b02      	cmp	r3, #2
 80022f6:	d901      	bls.n	80022fc <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80022f8:	2303      	movs	r3, #3
 80022fa:	e05c      	b.n	80023b6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80022fc:	4b11      	ldr	r3, [pc, #68]	; (8002344 <HAL_RCC_OscConfig+0x470>)
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002304:	2b00      	cmp	r3, #0
 8002306:	d0f0      	beq.n	80022ea <HAL_RCC_OscConfig+0x416>
 8002308:	e054      	b.n	80023b4 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800230a:	4b10      	ldr	r3, [pc, #64]	; (800234c <HAL_RCC_OscConfig+0x478>)
 800230c:	2200      	movs	r2, #0
 800230e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002310:	f7fe fe8e 	bl	8001030 <HAL_GetTick>
 8002314:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002316:	e008      	b.n	800232a <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002318:	f7fe fe8a 	bl	8001030 <HAL_GetTick>
 800231c:	4602      	mov	r2, r0
 800231e:	693b      	ldr	r3, [r7, #16]
 8002320:	1ad3      	subs	r3, r2, r3
 8002322:	2b02      	cmp	r3, #2
 8002324:	d901      	bls.n	800232a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8002326:	2303      	movs	r3, #3
 8002328:	e045      	b.n	80023b6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800232a:	4b06      	ldr	r3, [pc, #24]	; (8002344 <HAL_RCC_OscConfig+0x470>)
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002332:	2b00      	cmp	r3, #0
 8002334:	d1f0      	bne.n	8002318 <HAL_RCC_OscConfig+0x444>
 8002336:	e03d      	b.n	80023b4 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	699b      	ldr	r3, [r3, #24]
 800233c:	2b01      	cmp	r3, #1
 800233e:	d107      	bne.n	8002350 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8002340:	2301      	movs	r3, #1
 8002342:	e038      	b.n	80023b6 <HAL_RCC_OscConfig+0x4e2>
 8002344:	40023800 	.word	0x40023800
 8002348:	40007000 	.word	0x40007000
 800234c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002350:	4b1b      	ldr	r3, [pc, #108]	; (80023c0 <HAL_RCC_OscConfig+0x4ec>)
 8002352:	685b      	ldr	r3, [r3, #4]
 8002354:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	699b      	ldr	r3, [r3, #24]
 800235a:	2b01      	cmp	r3, #1
 800235c:	d028      	beq.n	80023b0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800235e:	68fb      	ldr	r3, [r7, #12]
 8002360:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002368:	429a      	cmp	r2, r3
 800236a:	d121      	bne.n	80023b0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800236c:	68fb      	ldr	r3, [r7, #12]
 800236e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002376:	429a      	cmp	r2, r3
 8002378:	d11a      	bne.n	80023b0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800237a:	68fa      	ldr	r2, [r7, #12]
 800237c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002380:	4013      	ands	r3, r2
 8002382:	687a      	ldr	r2, [r7, #4]
 8002384:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002386:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002388:	4293      	cmp	r3, r2
 800238a:	d111      	bne.n	80023b0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800238c:	68fb      	ldr	r3, [r7, #12]
 800238e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002396:	085b      	lsrs	r3, r3, #1
 8002398:	3b01      	subs	r3, #1
 800239a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800239c:	429a      	cmp	r2, r3
 800239e:	d107      	bne.n	80023b0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80023a0:	68fb      	ldr	r3, [r7, #12]
 80023a2:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80023aa:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80023ac:	429a      	cmp	r2, r3
 80023ae:	d001      	beq.n	80023b4 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80023b0:	2301      	movs	r3, #1
 80023b2:	e000      	b.n	80023b6 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80023b4:	2300      	movs	r3, #0
}
 80023b6:	4618      	mov	r0, r3
 80023b8:	3718      	adds	r7, #24
 80023ba:	46bd      	mov	sp, r7
 80023bc:	bd80      	pop	{r7, pc}
 80023be:	bf00      	nop
 80023c0:	40023800 	.word	0x40023800

080023c4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80023c4:	b580      	push	{r7, lr}
 80023c6:	b084      	sub	sp, #16
 80023c8:	af00      	add	r7, sp, #0
 80023ca:	6078      	str	r0, [r7, #4]
 80023cc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	2b00      	cmp	r3, #0
 80023d2:	d101      	bne.n	80023d8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80023d4:	2301      	movs	r3, #1
 80023d6:	e0cc      	b.n	8002572 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80023d8:	4b68      	ldr	r3, [pc, #416]	; (800257c <HAL_RCC_ClockConfig+0x1b8>)
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	f003 030f 	and.w	r3, r3, #15
 80023e0:	683a      	ldr	r2, [r7, #0]
 80023e2:	429a      	cmp	r2, r3
 80023e4:	d90c      	bls.n	8002400 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80023e6:	4b65      	ldr	r3, [pc, #404]	; (800257c <HAL_RCC_ClockConfig+0x1b8>)
 80023e8:	683a      	ldr	r2, [r7, #0]
 80023ea:	b2d2      	uxtb	r2, r2
 80023ec:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80023ee:	4b63      	ldr	r3, [pc, #396]	; (800257c <HAL_RCC_ClockConfig+0x1b8>)
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	f003 030f 	and.w	r3, r3, #15
 80023f6:	683a      	ldr	r2, [r7, #0]
 80023f8:	429a      	cmp	r2, r3
 80023fa:	d001      	beq.n	8002400 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80023fc:	2301      	movs	r3, #1
 80023fe:	e0b8      	b.n	8002572 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	f003 0302 	and.w	r3, r3, #2
 8002408:	2b00      	cmp	r3, #0
 800240a:	d020      	beq.n	800244e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	f003 0304 	and.w	r3, r3, #4
 8002414:	2b00      	cmp	r3, #0
 8002416:	d005      	beq.n	8002424 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002418:	4b59      	ldr	r3, [pc, #356]	; (8002580 <HAL_RCC_ClockConfig+0x1bc>)
 800241a:	689b      	ldr	r3, [r3, #8]
 800241c:	4a58      	ldr	r2, [pc, #352]	; (8002580 <HAL_RCC_ClockConfig+0x1bc>)
 800241e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002422:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	f003 0308 	and.w	r3, r3, #8
 800242c:	2b00      	cmp	r3, #0
 800242e:	d005      	beq.n	800243c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002430:	4b53      	ldr	r3, [pc, #332]	; (8002580 <HAL_RCC_ClockConfig+0x1bc>)
 8002432:	689b      	ldr	r3, [r3, #8]
 8002434:	4a52      	ldr	r2, [pc, #328]	; (8002580 <HAL_RCC_ClockConfig+0x1bc>)
 8002436:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800243a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800243c:	4b50      	ldr	r3, [pc, #320]	; (8002580 <HAL_RCC_ClockConfig+0x1bc>)
 800243e:	689b      	ldr	r3, [r3, #8]
 8002440:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	689b      	ldr	r3, [r3, #8]
 8002448:	494d      	ldr	r1, [pc, #308]	; (8002580 <HAL_RCC_ClockConfig+0x1bc>)
 800244a:	4313      	orrs	r3, r2
 800244c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	f003 0301 	and.w	r3, r3, #1
 8002456:	2b00      	cmp	r3, #0
 8002458:	d044      	beq.n	80024e4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	685b      	ldr	r3, [r3, #4]
 800245e:	2b01      	cmp	r3, #1
 8002460:	d107      	bne.n	8002472 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002462:	4b47      	ldr	r3, [pc, #284]	; (8002580 <HAL_RCC_ClockConfig+0x1bc>)
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800246a:	2b00      	cmp	r3, #0
 800246c:	d119      	bne.n	80024a2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800246e:	2301      	movs	r3, #1
 8002470:	e07f      	b.n	8002572 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	685b      	ldr	r3, [r3, #4]
 8002476:	2b02      	cmp	r3, #2
 8002478:	d003      	beq.n	8002482 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800247e:	2b03      	cmp	r3, #3
 8002480:	d107      	bne.n	8002492 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002482:	4b3f      	ldr	r3, [pc, #252]	; (8002580 <HAL_RCC_ClockConfig+0x1bc>)
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800248a:	2b00      	cmp	r3, #0
 800248c:	d109      	bne.n	80024a2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800248e:	2301      	movs	r3, #1
 8002490:	e06f      	b.n	8002572 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002492:	4b3b      	ldr	r3, [pc, #236]	; (8002580 <HAL_RCC_ClockConfig+0x1bc>)
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	f003 0302 	and.w	r3, r3, #2
 800249a:	2b00      	cmp	r3, #0
 800249c:	d101      	bne.n	80024a2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800249e:	2301      	movs	r3, #1
 80024a0:	e067      	b.n	8002572 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80024a2:	4b37      	ldr	r3, [pc, #220]	; (8002580 <HAL_RCC_ClockConfig+0x1bc>)
 80024a4:	689b      	ldr	r3, [r3, #8]
 80024a6:	f023 0203 	bic.w	r2, r3, #3
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	685b      	ldr	r3, [r3, #4]
 80024ae:	4934      	ldr	r1, [pc, #208]	; (8002580 <HAL_RCC_ClockConfig+0x1bc>)
 80024b0:	4313      	orrs	r3, r2
 80024b2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80024b4:	f7fe fdbc 	bl	8001030 <HAL_GetTick>
 80024b8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80024ba:	e00a      	b.n	80024d2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80024bc:	f7fe fdb8 	bl	8001030 <HAL_GetTick>
 80024c0:	4602      	mov	r2, r0
 80024c2:	68fb      	ldr	r3, [r7, #12]
 80024c4:	1ad3      	subs	r3, r2, r3
 80024c6:	f241 3288 	movw	r2, #5000	; 0x1388
 80024ca:	4293      	cmp	r3, r2
 80024cc:	d901      	bls.n	80024d2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80024ce:	2303      	movs	r3, #3
 80024d0:	e04f      	b.n	8002572 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80024d2:	4b2b      	ldr	r3, [pc, #172]	; (8002580 <HAL_RCC_ClockConfig+0x1bc>)
 80024d4:	689b      	ldr	r3, [r3, #8]
 80024d6:	f003 020c 	and.w	r2, r3, #12
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	685b      	ldr	r3, [r3, #4]
 80024de:	009b      	lsls	r3, r3, #2
 80024e0:	429a      	cmp	r2, r3
 80024e2:	d1eb      	bne.n	80024bc <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80024e4:	4b25      	ldr	r3, [pc, #148]	; (800257c <HAL_RCC_ClockConfig+0x1b8>)
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	f003 030f 	and.w	r3, r3, #15
 80024ec:	683a      	ldr	r2, [r7, #0]
 80024ee:	429a      	cmp	r2, r3
 80024f0:	d20c      	bcs.n	800250c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80024f2:	4b22      	ldr	r3, [pc, #136]	; (800257c <HAL_RCC_ClockConfig+0x1b8>)
 80024f4:	683a      	ldr	r2, [r7, #0]
 80024f6:	b2d2      	uxtb	r2, r2
 80024f8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80024fa:	4b20      	ldr	r3, [pc, #128]	; (800257c <HAL_RCC_ClockConfig+0x1b8>)
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	f003 030f 	and.w	r3, r3, #15
 8002502:	683a      	ldr	r2, [r7, #0]
 8002504:	429a      	cmp	r2, r3
 8002506:	d001      	beq.n	800250c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002508:	2301      	movs	r3, #1
 800250a:	e032      	b.n	8002572 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	f003 0304 	and.w	r3, r3, #4
 8002514:	2b00      	cmp	r3, #0
 8002516:	d008      	beq.n	800252a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002518:	4b19      	ldr	r3, [pc, #100]	; (8002580 <HAL_RCC_ClockConfig+0x1bc>)
 800251a:	689b      	ldr	r3, [r3, #8]
 800251c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	68db      	ldr	r3, [r3, #12]
 8002524:	4916      	ldr	r1, [pc, #88]	; (8002580 <HAL_RCC_ClockConfig+0x1bc>)
 8002526:	4313      	orrs	r3, r2
 8002528:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	f003 0308 	and.w	r3, r3, #8
 8002532:	2b00      	cmp	r3, #0
 8002534:	d009      	beq.n	800254a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002536:	4b12      	ldr	r3, [pc, #72]	; (8002580 <HAL_RCC_ClockConfig+0x1bc>)
 8002538:	689b      	ldr	r3, [r3, #8]
 800253a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	691b      	ldr	r3, [r3, #16]
 8002542:	00db      	lsls	r3, r3, #3
 8002544:	490e      	ldr	r1, [pc, #56]	; (8002580 <HAL_RCC_ClockConfig+0x1bc>)
 8002546:	4313      	orrs	r3, r2
 8002548:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800254a:	f000 f821 	bl	8002590 <HAL_RCC_GetSysClockFreq>
 800254e:	4602      	mov	r2, r0
 8002550:	4b0b      	ldr	r3, [pc, #44]	; (8002580 <HAL_RCC_ClockConfig+0x1bc>)
 8002552:	689b      	ldr	r3, [r3, #8]
 8002554:	091b      	lsrs	r3, r3, #4
 8002556:	f003 030f 	and.w	r3, r3, #15
 800255a:	490a      	ldr	r1, [pc, #40]	; (8002584 <HAL_RCC_ClockConfig+0x1c0>)
 800255c:	5ccb      	ldrb	r3, [r1, r3]
 800255e:	fa22 f303 	lsr.w	r3, r2, r3
 8002562:	4a09      	ldr	r2, [pc, #36]	; (8002588 <HAL_RCC_ClockConfig+0x1c4>)
 8002564:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002566:	4b09      	ldr	r3, [pc, #36]	; (800258c <HAL_RCC_ClockConfig+0x1c8>)
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	4618      	mov	r0, r3
 800256c:	f7fe fd1c 	bl	8000fa8 <HAL_InitTick>

  return HAL_OK;
 8002570:	2300      	movs	r3, #0
}
 8002572:	4618      	mov	r0, r3
 8002574:	3710      	adds	r7, #16
 8002576:	46bd      	mov	sp, r7
 8002578:	bd80      	pop	{r7, pc}
 800257a:	bf00      	nop
 800257c:	40023c00 	.word	0x40023c00
 8002580:	40023800 	.word	0x40023800
 8002584:	08005220 	.word	0x08005220
 8002588:	20000000 	.word	0x20000000
 800258c:	20000004 	.word	0x20000004

08002590 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002590:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002594:	b094      	sub	sp, #80	; 0x50
 8002596:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002598:	2300      	movs	r3, #0
 800259a:	647b      	str	r3, [r7, #68]	; 0x44
 800259c:	2300      	movs	r3, #0
 800259e:	64fb      	str	r3, [r7, #76]	; 0x4c
 80025a0:	2300      	movs	r3, #0
 80025a2:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 80025a4:	2300      	movs	r3, #0
 80025a6:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80025a8:	4b79      	ldr	r3, [pc, #484]	; (8002790 <HAL_RCC_GetSysClockFreq+0x200>)
 80025aa:	689b      	ldr	r3, [r3, #8]
 80025ac:	f003 030c 	and.w	r3, r3, #12
 80025b0:	2b08      	cmp	r3, #8
 80025b2:	d00d      	beq.n	80025d0 <HAL_RCC_GetSysClockFreq+0x40>
 80025b4:	2b08      	cmp	r3, #8
 80025b6:	f200 80e1 	bhi.w	800277c <HAL_RCC_GetSysClockFreq+0x1ec>
 80025ba:	2b00      	cmp	r3, #0
 80025bc:	d002      	beq.n	80025c4 <HAL_RCC_GetSysClockFreq+0x34>
 80025be:	2b04      	cmp	r3, #4
 80025c0:	d003      	beq.n	80025ca <HAL_RCC_GetSysClockFreq+0x3a>
 80025c2:	e0db      	b.n	800277c <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80025c4:	4b73      	ldr	r3, [pc, #460]	; (8002794 <HAL_RCC_GetSysClockFreq+0x204>)
 80025c6:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 80025c8:	e0db      	b.n	8002782 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80025ca:	4b73      	ldr	r3, [pc, #460]	; (8002798 <HAL_RCC_GetSysClockFreq+0x208>)
 80025cc:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80025ce:	e0d8      	b.n	8002782 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80025d0:	4b6f      	ldr	r3, [pc, #444]	; (8002790 <HAL_RCC_GetSysClockFreq+0x200>)
 80025d2:	685b      	ldr	r3, [r3, #4]
 80025d4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80025d8:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80025da:	4b6d      	ldr	r3, [pc, #436]	; (8002790 <HAL_RCC_GetSysClockFreq+0x200>)
 80025dc:	685b      	ldr	r3, [r3, #4]
 80025de:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80025e2:	2b00      	cmp	r3, #0
 80025e4:	d063      	beq.n	80026ae <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80025e6:	4b6a      	ldr	r3, [pc, #424]	; (8002790 <HAL_RCC_GetSysClockFreq+0x200>)
 80025e8:	685b      	ldr	r3, [r3, #4]
 80025ea:	099b      	lsrs	r3, r3, #6
 80025ec:	2200      	movs	r2, #0
 80025ee:	63bb      	str	r3, [r7, #56]	; 0x38
 80025f0:	63fa      	str	r2, [r7, #60]	; 0x3c
 80025f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80025f4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80025f8:	633b      	str	r3, [r7, #48]	; 0x30
 80025fa:	2300      	movs	r3, #0
 80025fc:	637b      	str	r3, [r7, #52]	; 0x34
 80025fe:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8002602:	4622      	mov	r2, r4
 8002604:	462b      	mov	r3, r5
 8002606:	f04f 0000 	mov.w	r0, #0
 800260a:	f04f 0100 	mov.w	r1, #0
 800260e:	0159      	lsls	r1, r3, #5
 8002610:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002614:	0150      	lsls	r0, r2, #5
 8002616:	4602      	mov	r2, r0
 8002618:	460b      	mov	r3, r1
 800261a:	4621      	mov	r1, r4
 800261c:	1a51      	subs	r1, r2, r1
 800261e:	6139      	str	r1, [r7, #16]
 8002620:	4629      	mov	r1, r5
 8002622:	eb63 0301 	sbc.w	r3, r3, r1
 8002626:	617b      	str	r3, [r7, #20]
 8002628:	f04f 0200 	mov.w	r2, #0
 800262c:	f04f 0300 	mov.w	r3, #0
 8002630:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002634:	4659      	mov	r1, fp
 8002636:	018b      	lsls	r3, r1, #6
 8002638:	4651      	mov	r1, sl
 800263a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800263e:	4651      	mov	r1, sl
 8002640:	018a      	lsls	r2, r1, #6
 8002642:	4651      	mov	r1, sl
 8002644:	ebb2 0801 	subs.w	r8, r2, r1
 8002648:	4659      	mov	r1, fp
 800264a:	eb63 0901 	sbc.w	r9, r3, r1
 800264e:	f04f 0200 	mov.w	r2, #0
 8002652:	f04f 0300 	mov.w	r3, #0
 8002656:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800265a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800265e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002662:	4690      	mov	r8, r2
 8002664:	4699      	mov	r9, r3
 8002666:	4623      	mov	r3, r4
 8002668:	eb18 0303 	adds.w	r3, r8, r3
 800266c:	60bb      	str	r3, [r7, #8]
 800266e:	462b      	mov	r3, r5
 8002670:	eb49 0303 	adc.w	r3, r9, r3
 8002674:	60fb      	str	r3, [r7, #12]
 8002676:	f04f 0200 	mov.w	r2, #0
 800267a:	f04f 0300 	mov.w	r3, #0
 800267e:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8002682:	4629      	mov	r1, r5
 8002684:	024b      	lsls	r3, r1, #9
 8002686:	4621      	mov	r1, r4
 8002688:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800268c:	4621      	mov	r1, r4
 800268e:	024a      	lsls	r2, r1, #9
 8002690:	4610      	mov	r0, r2
 8002692:	4619      	mov	r1, r3
 8002694:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002696:	2200      	movs	r2, #0
 8002698:	62bb      	str	r3, [r7, #40]	; 0x28
 800269a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800269c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80026a0:	f7fd fdb0 	bl	8000204 <__aeabi_uldivmod>
 80026a4:	4602      	mov	r2, r0
 80026a6:	460b      	mov	r3, r1
 80026a8:	4613      	mov	r3, r2
 80026aa:	64fb      	str	r3, [r7, #76]	; 0x4c
 80026ac:	e058      	b.n	8002760 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80026ae:	4b38      	ldr	r3, [pc, #224]	; (8002790 <HAL_RCC_GetSysClockFreq+0x200>)
 80026b0:	685b      	ldr	r3, [r3, #4]
 80026b2:	099b      	lsrs	r3, r3, #6
 80026b4:	2200      	movs	r2, #0
 80026b6:	4618      	mov	r0, r3
 80026b8:	4611      	mov	r1, r2
 80026ba:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80026be:	623b      	str	r3, [r7, #32]
 80026c0:	2300      	movs	r3, #0
 80026c2:	627b      	str	r3, [r7, #36]	; 0x24
 80026c4:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80026c8:	4642      	mov	r2, r8
 80026ca:	464b      	mov	r3, r9
 80026cc:	f04f 0000 	mov.w	r0, #0
 80026d0:	f04f 0100 	mov.w	r1, #0
 80026d4:	0159      	lsls	r1, r3, #5
 80026d6:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80026da:	0150      	lsls	r0, r2, #5
 80026dc:	4602      	mov	r2, r0
 80026de:	460b      	mov	r3, r1
 80026e0:	4641      	mov	r1, r8
 80026e2:	ebb2 0a01 	subs.w	sl, r2, r1
 80026e6:	4649      	mov	r1, r9
 80026e8:	eb63 0b01 	sbc.w	fp, r3, r1
 80026ec:	f04f 0200 	mov.w	r2, #0
 80026f0:	f04f 0300 	mov.w	r3, #0
 80026f4:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80026f8:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80026fc:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8002700:	ebb2 040a 	subs.w	r4, r2, sl
 8002704:	eb63 050b 	sbc.w	r5, r3, fp
 8002708:	f04f 0200 	mov.w	r2, #0
 800270c:	f04f 0300 	mov.w	r3, #0
 8002710:	00eb      	lsls	r3, r5, #3
 8002712:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002716:	00e2      	lsls	r2, r4, #3
 8002718:	4614      	mov	r4, r2
 800271a:	461d      	mov	r5, r3
 800271c:	4643      	mov	r3, r8
 800271e:	18e3      	adds	r3, r4, r3
 8002720:	603b      	str	r3, [r7, #0]
 8002722:	464b      	mov	r3, r9
 8002724:	eb45 0303 	adc.w	r3, r5, r3
 8002728:	607b      	str	r3, [r7, #4]
 800272a:	f04f 0200 	mov.w	r2, #0
 800272e:	f04f 0300 	mov.w	r3, #0
 8002732:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002736:	4629      	mov	r1, r5
 8002738:	028b      	lsls	r3, r1, #10
 800273a:	4621      	mov	r1, r4
 800273c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002740:	4621      	mov	r1, r4
 8002742:	028a      	lsls	r2, r1, #10
 8002744:	4610      	mov	r0, r2
 8002746:	4619      	mov	r1, r3
 8002748:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800274a:	2200      	movs	r2, #0
 800274c:	61bb      	str	r3, [r7, #24]
 800274e:	61fa      	str	r2, [r7, #28]
 8002750:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002754:	f7fd fd56 	bl	8000204 <__aeabi_uldivmod>
 8002758:	4602      	mov	r2, r0
 800275a:	460b      	mov	r3, r1
 800275c:	4613      	mov	r3, r2
 800275e:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002760:	4b0b      	ldr	r3, [pc, #44]	; (8002790 <HAL_RCC_GetSysClockFreq+0x200>)
 8002762:	685b      	ldr	r3, [r3, #4]
 8002764:	0c1b      	lsrs	r3, r3, #16
 8002766:	f003 0303 	and.w	r3, r3, #3
 800276a:	3301      	adds	r3, #1
 800276c:	005b      	lsls	r3, r3, #1
 800276e:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8002770:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002772:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002774:	fbb2 f3f3 	udiv	r3, r2, r3
 8002778:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800277a:	e002      	b.n	8002782 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800277c:	4b05      	ldr	r3, [pc, #20]	; (8002794 <HAL_RCC_GetSysClockFreq+0x204>)
 800277e:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002780:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002782:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8002784:	4618      	mov	r0, r3
 8002786:	3750      	adds	r7, #80	; 0x50
 8002788:	46bd      	mov	sp, r7
 800278a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800278e:	bf00      	nop
 8002790:	40023800 	.word	0x40023800
 8002794:	00f42400 	.word	0x00f42400
 8002798:	007a1200 	.word	0x007a1200

0800279c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800279c:	b480      	push	{r7}
 800279e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80027a0:	4b03      	ldr	r3, [pc, #12]	; (80027b0 <HAL_RCC_GetHCLKFreq+0x14>)
 80027a2:	681b      	ldr	r3, [r3, #0]
}
 80027a4:	4618      	mov	r0, r3
 80027a6:	46bd      	mov	sp, r7
 80027a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027ac:	4770      	bx	lr
 80027ae:	bf00      	nop
 80027b0:	20000000 	.word	0x20000000

080027b4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80027b4:	b580      	push	{r7, lr}
 80027b6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80027b8:	f7ff fff0 	bl	800279c <HAL_RCC_GetHCLKFreq>
 80027bc:	4602      	mov	r2, r0
 80027be:	4b05      	ldr	r3, [pc, #20]	; (80027d4 <HAL_RCC_GetPCLK1Freq+0x20>)
 80027c0:	689b      	ldr	r3, [r3, #8]
 80027c2:	0a9b      	lsrs	r3, r3, #10
 80027c4:	f003 0307 	and.w	r3, r3, #7
 80027c8:	4903      	ldr	r1, [pc, #12]	; (80027d8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80027ca:	5ccb      	ldrb	r3, [r1, r3]
 80027cc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80027d0:	4618      	mov	r0, r3
 80027d2:	bd80      	pop	{r7, pc}
 80027d4:	40023800 	.word	0x40023800
 80027d8:	08005230 	.word	0x08005230

080027dc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80027dc:	b580      	push	{r7, lr}
 80027de:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80027e0:	f7ff ffdc 	bl	800279c <HAL_RCC_GetHCLKFreq>
 80027e4:	4602      	mov	r2, r0
 80027e6:	4b05      	ldr	r3, [pc, #20]	; (80027fc <HAL_RCC_GetPCLK2Freq+0x20>)
 80027e8:	689b      	ldr	r3, [r3, #8]
 80027ea:	0b5b      	lsrs	r3, r3, #13
 80027ec:	f003 0307 	and.w	r3, r3, #7
 80027f0:	4903      	ldr	r1, [pc, #12]	; (8002800 <HAL_RCC_GetPCLK2Freq+0x24>)
 80027f2:	5ccb      	ldrb	r3, [r1, r3]
 80027f4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80027f8:	4618      	mov	r0, r3
 80027fa:	bd80      	pop	{r7, pc}
 80027fc:	40023800 	.word	0x40023800
 8002800:	08005230 	.word	0x08005230

08002804 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002804:	b580      	push	{r7, lr}
 8002806:	b082      	sub	sp, #8
 8002808:	af00      	add	r7, sp, #0
 800280a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	2b00      	cmp	r3, #0
 8002810:	d101      	bne.n	8002816 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002812:	2301      	movs	r3, #1
 8002814:	e041      	b.n	800289a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800281c:	b2db      	uxtb	r3, r3
 800281e:	2b00      	cmp	r3, #0
 8002820:	d106      	bne.n	8002830 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	2200      	movs	r2, #0
 8002826:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800282a:	6878      	ldr	r0, [r7, #4]
 800282c:	f7fe fa6e 	bl	8000d0c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	2202      	movs	r2, #2
 8002834:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	681a      	ldr	r2, [r3, #0]
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	3304      	adds	r3, #4
 8002840:	4619      	mov	r1, r3
 8002842:	4610      	mov	r0, r2
 8002844:	f000 f8f4 	bl	8002a30 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	2201      	movs	r2, #1
 800284c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	2201      	movs	r2, #1
 8002854:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	2201      	movs	r2, #1
 800285c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	2201      	movs	r2, #1
 8002864:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	2201      	movs	r2, #1
 800286c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	2201      	movs	r2, #1
 8002874:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	2201      	movs	r2, #1
 800287c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	2201      	movs	r2, #1
 8002884:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	2201      	movs	r2, #1
 800288c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	2201      	movs	r2, #1
 8002894:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002898:	2300      	movs	r3, #0
}
 800289a:	4618      	mov	r0, r3
 800289c:	3708      	adds	r7, #8
 800289e:	46bd      	mov	sp, r7
 80028a0:	bd80      	pop	{r7, pc}

080028a2 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80028a2:	b580      	push	{r7, lr}
 80028a4:	b084      	sub	sp, #16
 80028a6:	af00      	add	r7, sp, #0
 80028a8:	6078      	str	r0, [r7, #4]
 80028aa:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80028ac:	2300      	movs	r3, #0
 80028ae:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80028b6:	2b01      	cmp	r3, #1
 80028b8:	d101      	bne.n	80028be <HAL_TIM_ConfigClockSource+0x1c>
 80028ba:	2302      	movs	r3, #2
 80028bc:	e0b4      	b.n	8002a28 <HAL_TIM_ConfigClockSource+0x186>
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	2201      	movs	r2, #1
 80028c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	2202      	movs	r2, #2
 80028ca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	689b      	ldr	r3, [r3, #8]
 80028d4:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80028d6:	68bb      	ldr	r3, [r7, #8]
 80028d8:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80028dc:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80028de:	68bb      	ldr	r3, [r7, #8]
 80028e0:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80028e4:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	68ba      	ldr	r2, [r7, #8]
 80028ec:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80028ee:	683b      	ldr	r3, [r7, #0]
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80028f6:	d03e      	beq.n	8002976 <HAL_TIM_ConfigClockSource+0xd4>
 80028f8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80028fc:	f200 8087 	bhi.w	8002a0e <HAL_TIM_ConfigClockSource+0x16c>
 8002900:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002904:	f000 8086 	beq.w	8002a14 <HAL_TIM_ConfigClockSource+0x172>
 8002908:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800290c:	d87f      	bhi.n	8002a0e <HAL_TIM_ConfigClockSource+0x16c>
 800290e:	2b70      	cmp	r3, #112	; 0x70
 8002910:	d01a      	beq.n	8002948 <HAL_TIM_ConfigClockSource+0xa6>
 8002912:	2b70      	cmp	r3, #112	; 0x70
 8002914:	d87b      	bhi.n	8002a0e <HAL_TIM_ConfigClockSource+0x16c>
 8002916:	2b60      	cmp	r3, #96	; 0x60
 8002918:	d050      	beq.n	80029bc <HAL_TIM_ConfigClockSource+0x11a>
 800291a:	2b60      	cmp	r3, #96	; 0x60
 800291c:	d877      	bhi.n	8002a0e <HAL_TIM_ConfigClockSource+0x16c>
 800291e:	2b50      	cmp	r3, #80	; 0x50
 8002920:	d03c      	beq.n	800299c <HAL_TIM_ConfigClockSource+0xfa>
 8002922:	2b50      	cmp	r3, #80	; 0x50
 8002924:	d873      	bhi.n	8002a0e <HAL_TIM_ConfigClockSource+0x16c>
 8002926:	2b40      	cmp	r3, #64	; 0x40
 8002928:	d058      	beq.n	80029dc <HAL_TIM_ConfigClockSource+0x13a>
 800292a:	2b40      	cmp	r3, #64	; 0x40
 800292c:	d86f      	bhi.n	8002a0e <HAL_TIM_ConfigClockSource+0x16c>
 800292e:	2b30      	cmp	r3, #48	; 0x30
 8002930:	d064      	beq.n	80029fc <HAL_TIM_ConfigClockSource+0x15a>
 8002932:	2b30      	cmp	r3, #48	; 0x30
 8002934:	d86b      	bhi.n	8002a0e <HAL_TIM_ConfigClockSource+0x16c>
 8002936:	2b20      	cmp	r3, #32
 8002938:	d060      	beq.n	80029fc <HAL_TIM_ConfigClockSource+0x15a>
 800293a:	2b20      	cmp	r3, #32
 800293c:	d867      	bhi.n	8002a0e <HAL_TIM_ConfigClockSource+0x16c>
 800293e:	2b00      	cmp	r3, #0
 8002940:	d05c      	beq.n	80029fc <HAL_TIM_ConfigClockSource+0x15a>
 8002942:	2b10      	cmp	r3, #16
 8002944:	d05a      	beq.n	80029fc <HAL_TIM_ConfigClockSource+0x15a>
 8002946:	e062      	b.n	8002a0e <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	6818      	ldr	r0, [r3, #0]
 800294c:	683b      	ldr	r3, [r7, #0]
 800294e:	6899      	ldr	r1, [r3, #8]
 8002950:	683b      	ldr	r3, [r7, #0]
 8002952:	685a      	ldr	r2, [r3, #4]
 8002954:	683b      	ldr	r3, [r7, #0]
 8002956:	68db      	ldr	r3, [r3, #12]
 8002958:	f000 f984 	bl	8002c64 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	689b      	ldr	r3, [r3, #8]
 8002962:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002964:	68bb      	ldr	r3, [r7, #8]
 8002966:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800296a:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	68ba      	ldr	r2, [r7, #8]
 8002972:	609a      	str	r2, [r3, #8]
      break;
 8002974:	e04f      	b.n	8002a16 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	6818      	ldr	r0, [r3, #0]
 800297a:	683b      	ldr	r3, [r7, #0]
 800297c:	6899      	ldr	r1, [r3, #8]
 800297e:	683b      	ldr	r3, [r7, #0]
 8002980:	685a      	ldr	r2, [r3, #4]
 8002982:	683b      	ldr	r3, [r7, #0]
 8002984:	68db      	ldr	r3, [r3, #12]
 8002986:	f000 f96d 	bl	8002c64 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	689a      	ldr	r2, [r3, #8]
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002998:	609a      	str	r2, [r3, #8]
      break;
 800299a:	e03c      	b.n	8002a16 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	6818      	ldr	r0, [r3, #0]
 80029a0:	683b      	ldr	r3, [r7, #0]
 80029a2:	6859      	ldr	r1, [r3, #4]
 80029a4:	683b      	ldr	r3, [r7, #0]
 80029a6:	68db      	ldr	r3, [r3, #12]
 80029a8:	461a      	mov	r2, r3
 80029aa:	f000 f8e1 	bl	8002b70 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	2150      	movs	r1, #80	; 0x50
 80029b4:	4618      	mov	r0, r3
 80029b6:	f000 f93a 	bl	8002c2e <TIM_ITRx_SetConfig>
      break;
 80029ba:	e02c      	b.n	8002a16 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	6818      	ldr	r0, [r3, #0]
 80029c0:	683b      	ldr	r3, [r7, #0]
 80029c2:	6859      	ldr	r1, [r3, #4]
 80029c4:	683b      	ldr	r3, [r7, #0]
 80029c6:	68db      	ldr	r3, [r3, #12]
 80029c8:	461a      	mov	r2, r3
 80029ca:	f000 f900 	bl	8002bce <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	2160      	movs	r1, #96	; 0x60
 80029d4:	4618      	mov	r0, r3
 80029d6:	f000 f92a 	bl	8002c2e <TIM_ITRx_SetConfig>
      break;
 80029da:	e01c      	b.n	8002a16 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	6818      	ldr	r0, [r3, #0]
 80029e0:	683b      	ldr	r3, [r7, #0]
 80029e2:	6859      	ldr	r1, [r3, #4]
 80029e4:	683b      	ldr	r3, [r7, #0]
 80029e6:	68db      	ldr	r3, [r3, #12]
 80029e8:	461a      	mov	r2, r3
 80029ea:	f000 f8c1 	bl	8002b70 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	2140      	movs	r1, #64	; 0x40
 80029f4:	4618      	mov	r0, r3
 80029f6:	f000 f91a 	bl	8002c2e <TIM_ITRx_SetConfig>
      break;
 80029fa:	e00c      	b.n	8002a16 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	681a      	ldr	r2, [r3, #0]
 8002a00:	683b      	ldr	r3, [r7, #0]
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	4619      	mov	r1, r3
 8002a06:	4610      	mov	r0, r2
 8002a08:	f000 f911 	bl	8002c2e <TIM_ITRx_SetConfig>
      break;
 8002a0c:	e003      	b.n	8002a16 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8002a0e:	2301      	movs	r3, #1
 8002a10:	73fb      	strb	r3, [r7, #15]
      break;
 8002a12:	e000      	b.n	8002a16 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8002a14:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	2201      	movs	r2, #1
 8002a1a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	2200      	movs	r2, #0
 8002a22:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8002a26:	7bfb      	ldrb	r3, [r7, #15]
}
 8002a28:	4618      	mov	r0, r3
 8002a2a:	3710      	adds	r7, #16
 8002a2c:	46bd      	mov	sp, r7
 8002a2e:	bd80      	pop	{r7, pc}

08002a30 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002a30:	b480      	push	{r7}
 8002a32:	b085      	sub	sp, #20
 8002a34:	af00      	add	r7, sp, #0
 8002a36:	6078      	str	r0, [r7, #4]
 8002a38:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	4a40      	ldr	r2, [pc, #256]	; (8002b44 <TIM_Base_SetConfig+0x114>)
 8002a44:	4293      	cmp	r3, r2
 8002a46:	d013      	beq.n	8002a70 <TIM_Base_SetConfig+0x40>
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002a4e:	d00f      	beq.n	8002a70 <TIM_Base_SetConfig+0x40>
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	4a3d      	ldr	r2, [pc, #244]	; (8002b48 <TIM_Base_SetConfig+0x118>)
 8002a54:	4293      	cmp	r3, r2
 8002a56:	d00b      	beq.n	8002a70 <TIM_Base_SetConfig+0x40>
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	4a3c      	ldr	r2, [pc, #240]	; (8002b4c <TIM_Base_SetConfig+0x11c>)
 8002a5c:	4293      	cmp	r3, r2
 8002a5e:	d007      	beq.n	8002a70 <TIM_Base_SetConfig+0x40>
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	4a3b      	ldr	r2, [pc, #236]	; (8002b50 <TIM_Base_SetConfig+0x120>)
 8002a64:	4293      	cmp	r3, r2
 8002a66:	d003      	beq.n	8002a70 <TIM_Base_SetConfig+0x40>
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	4a3a      	ldr	r2, [pc, #232]	; (8002b54 <TIM_Base_SetConfig+0x124>)
 8002a6c:	4293      	cmp	r3, r2
 8002a6e:	d108      	bne.n	8002a82 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002a70:	68fb      	ldr	r3, [r7, #12]
 8002a72:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002a76:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002a78:	683b      	ldr	r3, [r7, #0]
 8002a7a:	685b      	ldr	r3, [r3, #4]
 8002a7c:	68fa      	ldr	r2, [r7, #12]
 8002a7e:	4313      	orrs	r3, r2
 8002a80:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	4a2f      	ldr	r2, [pc, #188]	; (8002b44 <TIM_Base_SetConfig+0x114>)
 8002a86:	4293      	cmp	r3, r2
 8002a88:	d02b      	beq.n	8002ae2 <TIM_Base_SetConfig+0xb2>
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002a90:	d027      	beq.n	8002ae2 <TIM_Base_SetConfig+0xb2>
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	4a2c      	ldr	r2, [pc, #176]	; (8002b48 <TIM_Base_SetConfig+0x118>)
 8002a96:	4293      	cmp	r3, r2
 8002a98:	d023      	beq.n	8002ae2 <TIM_Base_SetConfig+0xb2>
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	4a2b      	ldr	r2, [pc, #172]	; (8002b4c <TIM_Base_SetConfig+0x11c>)
 8002a9e:	4293      	cmp	r3, r2
 8002aa0:	d01f      	beq.n	8002ae2 <TIM_Base_SetConfig+0xb2>
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	4a2a      	ldr	r2, [pc, #168]	; (8002b50 <TIM_Base_SetConfig+0x120>)
 8002aa6:	4293      	cmp	r3, r2
 8002aa8:	d01b      	beq.n	8002ae2 <TIM_Base_SetConfig+0xb2>
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	4a29      	ldr	r2, [pc, #164]	; (8002b54 <TIM_Base_SetConfig+0x124>)
 8002aae:	4293      	cmp	r3, r2
 8002ab0:	d017      	beq.n	8002ae2 <TIM_Base_SetConfig+0xb2>
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	4a28      	ldr	r2, [pc, #160]	; (8002b58 <TIM_Base_SetConfig+0x128>)
 8002ab6:	4293      	cmp	r3, r2
 8002ab8:	d013      	beq.n	8002ae2 <TIM_Base_SetConfig+0xb2>
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	4a27      	ldr	r2, [pc, #156]	; (8002b5c <TIM_Base_SetConfig+0x12c>)
 8002abe:	4293      	cmp	r3, r2
 8002ac0:	d00f      	beq.n	8002ae2 <TIM_Base_SetConfig+0xb2>
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	4a26      	ldr	r2, [pc, #152]	; (8002b60 <TIM_Base_SetConfig+0x130>)
 8002ac6:	4293      	cmp	r3, r2
 8002ac8:	d00b      	beq.n	8002ae2 <TIM_Base_SetConfig+0xb2>
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	4a25      	ldr	r2, [pc, #148]	; (8002b64 <TIM_Base_SetConfig+0x134>)
 8002ace:	4293      	cmp	r3, r2
 8002ad0:	d007      	beq.n	8002ae2 <TIM_Base_SetConfig+0xb2>
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	4a24      	ldr	r2, [pc, #144]	; (8002b68 <TIM_Base_SetConfig+0x138>)
 8002ad6:	4293      	cmp	r3, r2
 8002ad8:	d003      	beq.n	8002ae2 <TIM_Base_SetConfig+0xb2>
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	4a23      	ldr	r2, [pc, #140]	; (8002b6c <TIM_Base_SetConfig+0x13c>)
 8002ade:	4293      	cmp	r3, r2
 8002ae0:	d108      	bne.n	8002af4 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002ae2:	68fb      	ldr	r3, [r7, #12]
 8002ae4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002ae8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002aea:	683b      	ldr	r3, [r7, #0]
 8002aec:	68db      	ldr	r3, [r3, #12]
 8002aee:	68fa      	ldr	r2, [r7, #12]
 8002af0:	4313      	orrs	r3, r2
 8002af2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002af4:	68fb      	ldr	r3, [r7, #12]
 8002af6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002afa:	683b      	ldr	r3, [r7, #0]
 8002afc:	695b      	ldr	r3, [r3, #20]
 8002afe:	4313      	orrs	r3, r2
 8002b00:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	68fa      	ldr	r2, [r7, #12]
 8002b06:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002b08:	683b      	ldr	r3, [r7, #0]
 8002b0a:	689a      	ldr	r2, [r3, #8]
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002b10:	683b      	ldr	r3, [r7, #0]
 8002b12:	681a      	ldr	r2, [r3, #0]
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	4a0a      	ldr	r2, [pc, #40]	; (8002b44 <TIM_Base_SetConfig+0x114>)
 8002b1c:	4293      	cmp	r3, r2
 8002b1e:	d003      	beq.n	8002b28 <TIM_Base_SetConfig+0xf8>
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	4a0c      	ldr	r2, [pc, #48]	; (8002b54 <TIM_Base_SetConfig+0x124>)
 8002b24:	4293      	cmp	r3, r2
 8002b26:	d103      	bne.n	8002b30 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002b28:	683b      	ldr	r3, [r7, #0]
 8002b2a:	691a      	ldr	r2, [r3, #16]
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	2201      	movs	r2, #1
 8002b34:	615a      	str	r2, [r3, #20]
}
 8002b36:	bf00      	nop
 8002b38:	3714      	adds	r7, #20
 8002b3a:	46bd      	mov	sp, r7
 8002b3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b40:	4770      	bx	lr
 8002b42:	bf00      	nop
 8002b44:	40010000 	.word	0x40010000
 8002b48:	40000400 	.word	0x40000400
 8002b4c:	40000800 	.word	0x40000800
 8002b50:	40000c00 	.word	0x40000c00
 8002b54:	40010400 	.word	0x40010400
 8002b58:	40014000 	.word	0x40014000
 8002b5c:	40014400 	.word	0x40014400
 8002b60:	40014800 	.word	0x40014800
 8002b64:	40001800 	.word	0x40001800
 8002b68:	40001c00 	.word	0x40001c00
 8002b6c:	40002000 	.word	0x40002000

08002b70 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002b70:	b480      	push	{r7}
 8002b72:	b087      	sub	sp, #28
 8002b74:	af00      	add	r7, sp, #0
 8002b76:	60f8      	str	r0, [r7, #12]
 8002b78:	60b9      	str	r1, [r7, #8]
 8002b7a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002b7c:	68fb      	ldr	r3, [r7, #12]
 8002b7e:	6a1b      	ldr	r3, [r3, #32]
 8002b80:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002b82:	68fb      	ldr	r3, [r7, #12]
 8002b84:	6a1b      	ldr	r3, [r3, #32]
 8002b86:	f023 0201 	bic.w	r2, r3, #1
 8002b8a:	68fb      	ldr	r3, [r7, #12]
 8002b8c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002b8e:	68fb      	ldr	r3, [r7, #12]
 8002b90:	699b      	ldr	r3, [r3, #24]
 8002b92:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002b94:	693b      	ldr	r3, [r7, #16]
 8002b96:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002b9a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	011b      	lsls	r3, r3, #4
 8002ba0:	693a      	ldr	r2, [r7, #16]
 8002ba2:	4313      	orrs	r3, r2
 8002ba4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002ba6:	697b      	ldr	r3, [r7, #20]
 8002ba8:	f023 030a 	bic.w	r3, r3, #10
 8002bac:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002bae:	697a      	ldr	r2, [r7, #20]
 8002bb0:	68bb      	ldr	r3, [r7, #8]
 8002bb2:	4313      	orrs	r3, r2
 8002bb4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002bb6:	68fb      	ldr	r3, [r7, #12]
 8002bb8:	693a      	ldr	r2, [r7, #16]
 8002bba:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002bbc:	68fb      	ldr	r3, [r7, #12]
 8002bbe:	697a      	ldr	r2, [r7, #20]
 8002bc0:	621a      	str	r2, [r3, #32]
}
 8002bc2:	bf00      	nop
 8002bc4:	371c      	adds	r7, #28
 8002bc6:	46bd      	mov	sp, r7
 8002bc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bcc:	4770      	bx	lr

08002bce <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002bce:	b480      	push	{r7}
 8002bd0:	b087      	sub	sp, #28
 8002bd2:	af00      	add	r7, sp, #0
 8002bd4:	60f8      	str	r0, [r7, #12]
 8002bd6:	60b9      	str	r1, [r7, #8]
 8002bd8:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002bda:	68fb      	ldr	r3, [r7, #12]
 8002bdc:	6a1b      	ldr	r3, [r3, #32]
 8002bde:	f023 0210 	bic.w	r2, r3, #16
 8002be2:	68fb      	ldr	r3, [r7, #12]
 8002be4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002be6:	68fb      	ldr	r3, [r7, #12]
 8002be8:	699b      	ldr	r3, [r3, #24]
 8002bea:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8002bec:	68fb      	ldr	r3, [r7, #12]
 8002bee:	6a1b      	ldr	r3, [r3, #32]
 8002bf0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002bf2:	697b      	ldr	r3, [r7, #20]
 8002bf4:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8002bf8:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	031b      	lsls	r3, r3, #12
 8002bfe:	697a      	ldr	r2, [r7, #20]
 8002c00:	4313      	orrs	r3, r2
 8002c02:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002c04:	693b      	ldr	r3, [r7, #16]
 8002c06:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8002c0a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002c0c:	68bb      	ldr	r3, [r7, #8]
 8002c0e:	011b      	lsls	r3, r3, #4
 8002c10:	693a      	ldr	r2, [r7, #16]
 8002c12:	4313      	orrs	r3, r2
 8002c14:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002c16:	68fb      	ldr	r3, [r7, #12]
 8002c18:	697a      	ldr	r2, [r7, #20]
 8002c1a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002c1c:	68fb      	ldr	r3, [r7, #12]
 8002c1e:	693a      	ldr	r2, [r7, #16]
 8002c20:	621a      	str	r2, [r3, #32]
}
 8002c22:	bf00      	nop
 8002c24:	371c      	adds	r7, #28
 8002c26:	46bd      	mov	sp, r7
 8002c28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c2c:	4770      	bx	lr

08002c2e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002c2e:	b480      	push	{r7}
 8002c30:	b085      	sub	sp, #20
 8002c32:	af00      	add	r7, sp, #0
 8002c34:	6078      	str	r0, [r7, #4]
 8002c36:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	689b      	ldr	r3, [r3, #8]
 8002c3c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002c3e:	68fb      	ldr	r3, [r7, #12]
 8002c40:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002c44:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002c46:	683a      	ldr	r2, [r7, #0]
 8002c48:	68fb      	ldr	r3, [r7, #12]
 8002c4a:	4313      	orrs	r3, r2
 8002c4c:	f043 0307 	orr.w	r3, r3, #7
 8002c50:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	68fa      	ldr	r2, [r7, #12]
 8002c56:	609a      	str	r2, [r3, #8]
}
 8002c58:	bf00      	nop
 8002c5a:	3714      	adds	r7, #20
 8002c5c:	46bd      	mov	sp, r7
 8002c5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c62:	4770      	bx	lr

08002c64 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002c64:	b480      	push	{r7}
 8002c66:	b087      	sub	sp, #28
 8002c68:	af00      	add	r7, sp, #0
 8002c6a:	60f8      	str	r0, [r7, #12]
 8002c6c:	60b9      	str	r1, [r7, #8]
 8002c6e:	607a      	str	r2, [r7, #4]
 8002c70:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002c72:	68fb      	ldr	r3, [r7, #12]
 8002c74:	689b      	ldr	r3, [r3, #8]
 8002c76:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002c78:	697b      	ldr	r3, [r7, #20]
 8002c7a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002c7e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002c80:	683b      	ldr	r3, [r7, #0]
 8002c82:	021a      	lsls	r2, r3, #8
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	431a      	orrs	r2, r3
 8002c88:	68bb      	ldr	r3, [r7, #8]
 8002c8a:	4313      	orrs	r3, r2
 8002c8c:	697a      	ldr	r2, [r7, #20]
 8002c8e:	4313      	orrs	r3, r2
 8002c90:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002c92:	68fb      	ldr	r3, [r7, #12]
 8002c94:	697a      	ldr	r2, [r7, #20]
 8002c96:	609a      	str	r2, [r3, #8]
}
 8002c98:	bf00      	nop
 8002c9a:	371c      	adds	r7, #28
 8002c9c:	46bd      	mov	sp, r7
 8002c9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ca2:	4770      	bx	lr

08002ca4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002ca4:	b480      	push	{r7}
 8002ca6:	b085      	sub	sp, #20
 8002ca8:	af00      	add	r7, sp, #0
 8002caa:	6078      	str	r0, [r7, #4]
 8002cac:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002cb4:	2b01      	cmp	r3, #1
 8002cb6:	d101      	bne.n	8002cbc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002cb8:	2302      	movs	r3, #2
 8002cba:	e05a      	b.n	8002d72 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	2201      	movs	r2, #1
 8002cc0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	2202      	movs	r2, #2
 8002cc8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	685b      	ldr	r3, [r3, #4]
 8002cd2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	689b      	ldr	r3, [r3, #8]
 8002cda:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002cdc:	68fb      	ldr	r3, [r7, #12]
 8002cde:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002ce2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002ce4:	683b      	ldr	r3, [r7, #0]
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	68fa      	ldr	r2, [r7, #12]
 8002cea:	4313      	orrs	r3, r2
 8002cec:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	68fa      	ldr	r2, [r7, #12]
 8002cf4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	4a21      	ldr	r2, [pc, #132]	; (8002d80 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8002cfc:	4293      	cmp	r3, r2
 8002cfe:	d022      	beq.n	8002d46 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002d08:	d01d      	beq.n	8002d46 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	4a1d      	ldr	r2, [pc, #116]	; (8002d84 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8002d10:	4293      	cmp	r3, r2
 8002d12:	d018      	beq.n	8002d46 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	4a1b      	ldr	r2, [pc, #108]	; (8002d88 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8002d1a:	4293      	cmp	r3, r2
 8002d1c:	d013      	beq.n	8002d46 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	4a1a      	ldr	r2, [pc, #104]	; (8002d8c <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8002d24:	4293      	cmp	r3, r2
 8002d26:	d00e      	beq.n	8002d46 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	4a18      	ldr	r2, [pc, #96]	; (8002d90 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8002d2e:	4293      	cmp	r3, r2
 8002d30:	d009      	beq.n	8002d46 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	4a17      	ldr	r2, [pc, #92]	; (8002d94 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8002d38:	4293      	cmp	r3, r2
 8002d3a:	d004      	beq.n	8002d46 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	4a15      	ldr	r2, [pc, #84]	; (8002d98 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8002d42:	4293      	cmp	r3, r2
 8002d44:	d10c      	bne.n	8002d60 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002d46:	68bb      	ldr	r3, [r7, #8]
 8002d48:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002d4c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002d4e:	683b      	ldr	r3, [r7, #0]
 8002d50:	685b      	ldr	r3, [r3, #4]
 8002d52:	68ba      	ldr	r2, [r7, #8]
 8002d54:	4313      	orrs	r3, r2
 8002d56:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	68ba      	ldr	r2, [r7, #8]
 8002d5e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	2201      	movs	r2, #1
 8002d64:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	2200      	movs	r2, #0
 8002d6c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002d70:	2300      	movs	r3, #0
}
 8002d72:	4618      	mov	r0, r3
 8002d74:	3714      	adds	r7, #20
 8002d76:	46bd      	mov	sp, r7
 8002d78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d7c:	4770      	bx	lr
 8002d7e:	bf00      	nop
 8002d80:	40010000 	.word	0x40010000
 8002d84:	40000400 	.word	0x40000400
 8002d88:	40000800 	.word	0x40000800
 8002d8c:	40000c00 	.word	0x40000c00
 8002d90:	40010400 	.word	0x40010400
 8002d94:	40014000 	.word	0x40014000
 8002d98:	40001800 	.word	0x40001800

08002d9c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002d9c:	b580      	push	{r7, lr}
 8002d9e:	b082      	sub	sp, #8
 8002da0:	af00      	add	r7, sp, #0
 8002da2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	2b00      	cmp	r3, #0
 8002da8:	d101      	bne.n	8002dae <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002daa:	2301      	movs	r3, #1
 8002dac:	e03f      	b.n	8002e2e <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002db4:	b2db      	uxtb	r3, r3
 8002db6:	2b00      	cmp	r3, #0
 8002db8:	d106      	bne.n	8002dc8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	2200      	movs	r2, #0
 8002dbe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002dc2:	6878      	ldr	r0, [r7, #4]
 8002dc4:	f7fd ffc4 	bl	8000d50 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	2224      	movs	r2, #36	; 0x24
 8002dcc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	68da      	ldr	r2, [r3, #12]
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002dde:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002de0:	6878      	ldr	r0, [r7, #4]
 8002de2:	f000 f9cb 	bl	800317c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	691a      	ldr	r2, [r3, #16]
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002df4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	695a      	ldr	r2, [r3, #20]
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002e04:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	68da      	ldr	r2, [r3, #12]
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002e14:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	2200      	movs	r2, #0
 8002e1a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	2220      	movs	r2, #32
 8002e20:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	2220      	movs	r2, #32
 8002e28:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002e2c:	2300      	movs	r3, #0
}
 8002e2e:	4618      	mov	r0, r3
 8002e30:	3708      	adds	r7, #8
 8002e32:	46bd      	mov	sp, r7
 8002e34:	bd80      	pop	{r7, pc}

08002e36 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002e36:	b580      	push	{r7, lr}
 8002e38:	b08a      	sub	sp, #40	; 0x28
 8002e3a:	af02      	add	r7, sp, #8
 8002e3c:	60f8      	str	r0, [r7, #12]
 8002e3e:	60b9      	str	r1, [r7, #8]
 8002e40:	603b      	str	r3, [r7, #0]
 8002e42:	4613      	mov	r3, r2
 8002e44:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8002e46:	2300      	movs	r3, #0
 8002e48:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002e4a:	68fb      	ldr	r3, [r7, #12]
 8002e4c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002e50:	b2db      	uxtb	r3, r3
 8002e52:	2b20      	cmp	r3, #32
 8002e54:	d17c      	bne.n	8002f50 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8002e56:	68bb      	ldr	r3, [r7, #8]
 8002e58:	2b00      	cmp	r3, #0
 8002e5a:	d002      	beq.n	8002e62 <HAL_UART_Transmit+0x2c>
 8002e5c:	88fb      	ldrh	r3, [r7, #6]
 8002e5e:	2b00      	cmp	r3, #0
 8002e60:	d101      	bne.n	8002e66 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8002e62:	2301      	movs	r3, #1
 8002e64:	e075      	b.n	8002f52 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8002e66:	68fb      	ldr	r3, [r7, #12]
 8002e68:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002e6c:	2b01      	cmp	r3, #1
 8002e6e:	d101      	bne.n	8002e74 <HAL_UART_Transmit+0x3e>
 8002e70:	2302      	movs	r3, #2
 8002e72:	e06e      	b.n	8002f52 <HAL_UART_Transmit+0x11c>
 8002e74:	68fb      	ldr	r3, [r7, #12]
 8002e76:	2201      	movs	r2, #1
 8002e78:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002e7c:	68fb      	ldr	r3, [r7, #12]
 8002e7e:	2200      	movs	r2, #0
 8002e80:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002e82:	68fb      	ldr	r3, [r7, #12]
 8002e84:	2221      	movs	r2, #33	; 0x21
 8002e86:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002e8a:	f7fe f8d1 	bl	8001030 <HAL_GetTick>
 8002e8e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8002e90:	68fb      	ldr	r3, [r7, #12]
 8002e92:	88fa      	ldrh	r2, [r7, #6]
 8002e94:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8002e96:	68fb      	ldr	r3, [r7, #12]
 8002e98:	88fa      	ldrh	r2, [r7, #6]
 8002e9a:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002e9c:	68fb      	ldr	r3, [r7, #12]
 8002e9e:	689b      	ldr	r3, [r3, #8]
 8002ea0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002ea4:	d108      	bne.n	8002eb8 <HAL_UART_Transmit+0x82>
 8002ea6:	68fb      	ldr	r3, [r7, #12]
 8002ea8:	691b      	ldr	r3, [r3, #16]
 8002eaa:	2b00      	cmp	r3, #0
 8002eac:	d104      	bne.n	8002eb8 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8002eae:	2300      	movs	r3, #0
 8002eb0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8002eb2:	68bb      	ldr	r3, [r7, #8]
 8002eb4:	61bb      	str	r3, [r7, #24]
 8002eb6:	e003      	b.n	8002ec0 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8002eb8:	68bb      	ldr	r3, [r7, #8]
 8002eba:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002ebc:	2300      	movs	r3, #0
 8002ebe:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8002ec0:	68fb      	ldr	r3, [r7, #12]
 8002ec2:	2200      	movs	r2, #0
 8002ec4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8002ec8:	e02a      	b.n	8002f20 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002eca:	683b      	ldr	r3, [r7, #0]
 8002ecc:	9300      	str	r3, [sp, #0]
 8002ece:	697b      	ldr	r3, [r7, #20]
 8002ed0:	2200      	movs	r2, #0
 8002ed2:	2180      	movs	r1, #128	; 0x80
 8002ed4:	68f8      	ldr	r0, [r7, #12]
 8002ed6:	f000 f8e2 	bl	800309e <UART_WaitOnFlagUntilTimeout>
 8002eda:	4603      	mov	r3, r0
 8002edc:	2b00      	cmp	r3, #0
 8002ede:	d001      	beq.n	8002ee4 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8002ee0:	2303      	movs	r3, #3
 8002ee2:	e036      	b.n	8002f52 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8002ee4:	69fb      	ldr	r3, [r7, #28]
 8002ee6:	2b00      	cmp	r3, #0
 8002ee8:	d10b      	bne.n	8002f02 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002eea:	69bb      	ldr	r3, [r7, #24]
 8002eec:	881b      	ldrh	r3, [r3, #0]
 8002eee:	461a      	mov	r2, r3
 8002ef0:	68fb      	ldr	r3, [r7, #12]
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002ef8:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8002efa:	69bb      	ldr	r3, [r7, #24]
 8002efc:	3302      	adds	r3, #2
 8002efe:	61bb      	str	r3, [r7, #24]
 8002f00:	e007      	b.n	8002f12 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8002f02:	69fb      	ldr	r3, [r7, #28]
 8002f04:	781a      	ldrb	r2, [r3, #0]
 8002f06:	68fb      	ldr	r3, [r7, #12]
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8002f0c:	69fb      	ldr	r3, [r7, #28]
 8002f0e:	3301      	adds	r3, #1
 8002f10:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002f12:	68fb      	ldr	r3, [r7, #12]
 8002f14:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002f16:	b29b      	uxth	r3, r3
 8002f18:	3b01      	subs	r3, #1
 8002f1a:	b29a      	uxth	r2, r3
 8002f1c:	68fb      	ldr	r3, [r7, #12]
 8002f1e:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8002f20:	68fb      	ldr	r3, [r7, #12]
 8002f22:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002f24:	b29b      	uxth	r3, r3
 8002f26:	2b00      	cmp	r3, #0
 8002f28:	d1cf      	bne.n	8002eca <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002f2a:	683b      	ldr	r3, [r7, #0]
 8002f2c:	9300      	str	r3, [sp, #0]
 8002f2e:	697b      	ldr	r3, [r7, #20]
 8002f30:	2200      	movs	r2, #0
 8002f32:	2140      	movs	r1, #64	; 0x40
 8002f34:	68f8      	ldr	r0, [r7, #12]
 8002f36:	f000 f8b2 	bl	800309e <UART_WaitOnFlagUntilTimeout>
 8002f3a:	4603      	mov	r3, r0
 8002f3c:	2b00      	cmp	r3, #0
 8002f3e:	d001      	beq.n	8002f44 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8002f40:	2303      	movs	r3, #3
 8002f42:	e006      	b.n	8002f52 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002f44:	68fb      	ldr	r3, [r7, #12]
 8002f46:	2220      	movs	r2, #32
 8002f48:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8002f4c:	2300      	movs	r3, #0
 8002f4e:	e000      	b.n	8002f52 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8002f50:	2302      	movs	r3, #2
  }
}
 8002f52:	4618      	mov	r0, r3
 8002f54:	3720      	adds	r7, #32
 8002f56:	46bd      	mov	sp, r7
 8002f58:	bd80      	pop	{r7, pc}

08002f5a <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002f5a:	b580      	push	{r7, lr}
 8002f5c:	b08a      	sub	sp, #40	; 0x28
 8002f5e:	af02      	add	r7, sp, #8
 8002f60:	60f8      	str	r0, [r7, #12]
 8002f62:	60b9      	str	r1, [r7, #8]
 8002f64:	603b      	str	r3, [r7, #0]
 8002f66:	4613      	mov	r3, r2
 8002f68:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8002f6a:	2300      	movs	r3, #0
 8002f6c:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8002f6e:	68fb      	ldr	r3, [r7, #12]
 8002f70:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002f74:	b2db      	uxtb	r3, r3
 8002f76:	2b20      	cmp	r3, #32
 8002f78:	f040 808c 	bne.w	8003094 <HAL_UART_Receive+0x13a>
  {
    if ((pData == NULL) || (Size == 0U))
 8002f7c:	68bb      	ldr	r3, [r7, #8]
 8002f7e:	2b00      	cmp	r3, #0
 8002f80:	d002      	beq.n	8002f88 <HAL_UART_Receive+0x2e>
 8002f82:	88fb      	ldrh	r3, [r7, #6]
 8002f84:	2b00      	cmp	r3, #0
 8002f86:	d101      	bne.n	8002f8c <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 8002f88:	2301      	movs	r3, #1
 8002f8a:	e084      	b.n	8003096 <HAL_UART_Receive+0x13c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8002f8c:	68fb      	ldr	r3, [r7, #12]
 8002f8e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002f92:	2b01      	cmp	r3, #1
 8002f94:	d101      	bne.n	8002f9a <HAL_UART_Receive+0x40>
 8002f96:	2302      	movs	r3, #2
 8002f98:	e07d      	b.n	8003096 <HAL_UART_Receive+0x13c>
 8002f9a:	68fb      	ldr	r3, [r7, #12]
 8002f9c:	2201      	movs	r2, #1
 8002f9e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002fa2:	68fb      	ldr	r3, [r7, #12]
 8002fa4:	2200      	movs	r2, #0
 8002fa6:	641a      	str	r2, [r3, #64]	; 0x40
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8002fa8:	68fb      	ldr	r3, [r7, #12]
 8002faa:	2222      	movs	r2, #34	; 0x22
 8002fac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002fb0:	68fb      	ldr	r3, [r7, #12]
 8002fb2:	2200      	movs	r2, #0
 8002fb4:	631a      	str	r2, [r3, #48]	; 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002fb6:	f7fe f83b 	bl	8001030 <HAL_GetTick>
 8002fba:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 8002fbc:	68fb      	ldr	r3, [r7, #12]
 8002fbe:	88fa      	ldrh	r2, [r7, #6]
 8002fc0:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 8002fc2:	68fb      	ldr	r3, [r7, #12]
 8002fc4:	88fa      	ldrh	r2, [r7, #6]
 8002fc6:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002fc8:	68fb      	ldr	r3, [r7, #12]
 8002fca:	689b      	ldr	r3, [r3, #8]
 8002fcc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002fd0:	d108      	bne.n	8002fe4 <HAL_UART_Receive+0x8a>
 8002fd2:	68fb      	ldr	r3, [r7, #12]
 8002fd4:	691b      	ldr	r3, [r3, #16]
 8002fd6:	2b00      	cmp	r3, #0
 8002fd8:	d104      	bne.n	8002fe4 <HAL_UART_Receive+0x8a>
    {
      pdata8bits  = NULL;
 8002fda:	2300      	movs	r3, #0
 8002fdc:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8002fde:	68bb      	ldr	r3, [r7, #8]
 8002fe0:	61bb      	str	r3, [r7, #24]
 8002fe2:	e003      	b.n	8002fec <HAL_UART_Receive+0x92>
    }
    else
    {
      pdata8bits  = pData;
 8002fe4:	68bb      	ldr	r3, [r7, #8]
 8002fe6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002fe8:	2300      	movs	r3, #0
 8002fea:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8002fec:	68fb      	ldr	r3, [r7, #12]
 8002fee:	2200      	movs	r2, #0
 8002ff0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 8002ff4:	e043      	b.n	800307e <HAL_UART_Receive+0x124>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8002ff6:	683b      	ldr	r3, [r7, #0]
 8002ff8:	9300      	str	r3, [sp, #0]
 8002ffa:	697b      	ldr	r3, [r7, #20]
 8002ffc:	2200      	movs	r2, #0
 8002ffe:	2120      	movs	r1, #32
 8003000:	68f8      	ldr	r0, [r7, #12]
 8003002:	f000 f84c 	bl	800309e <UART_WaitOnFlagUntilTimeout>
 8003006:	4603      	mov	r3, r0
 8003008:	2b00      	cmp	r3, #0
 800300a:	d001      	beq.n	8003010 <HAL_UART_Receive+0xb6>
      {
        return HAL_TIMEOUT;
 800300c:	2303      	movs	r3, #3
 800300e:	e042      	b.n	8003096 <HAL_UART_Receive+0x13c>
      }
      if (pdata8bits == NULL)
 8003010:	69fb      	ldr	r3, [r7, #28]
 8003012:	2b00      	cmp	r3, #0
 8003014:	d10c      	bne.n	8003030 <HAL_UART_Receive+0xd6>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 8003016:	68fb      	ldr	r3, [r7, #12]
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	685b      	ldr	r3, [r3, #4]
 800301c:	b29b      	uxth	r3, r3
 800301e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003022:	b29a      	uxth	r2, r3
 8003024:	69bb      	ldr	r3, [r7, #24]
 8003026:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8003028:	69bb      	ldr	r3, [r7, #24]
 800302a:	3302      	adds	r3, #2
 800302c:	61bb      	str	r3, [r7, #24]
 800302e:	e01f      	b.n	8003070 <HAL_UART_Receive+0x116>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8003030:	68fb      	ldr	r3, [r7, #12]
 8003032:	689b      	ldr	r3, [r3, #8]
 8003034:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003038:	d007      	beq.n	800304a <HAL_UART_Receive+0xf0>
 800303a:	68fb      	ldr	r3, [r7, #12]
 800303c:	689b      	ldr	r3, [r3, #8]
 800303e:	2b00      	cmp	r3, #0
 8003040:	d10a      	bne.n	8003058 <HAL_UART_Receive+0xfe>
 8003042:	68fb      	ldr	r3, [r7, #12]
 8003044:	691b      	ldr	r3, [r3, #16]
 8003046:	2b00      	cmp	r3, #0
 8003048:	d106      	bne.n	8003058 <HAL_UART_Receive+0xfe>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800304a:	68fb      	ldr	r3, [r7, #12]
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	685b      	ldr	r3, [r3, #4]
 8003050:	b2da      	uxtb	r2, r3
 8003052:	69fb      	ldr	r3, [r7, #28]
 8003054:	701a      	strb	r2, [r3, #0]
 8003056:	e008      	b.n	800306a <HAL_UART_Receive+0x110>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8003058:	68fb      	ldr	r3, [r7, #12]
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	685b      	ldr	r3, [r3, #4]
 800305e:	b2db      	uxtb	r3, r3
 8003060:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003064:	b2da      	uxtb	r2, r3
 8003066:	69fb      	ldr	r3, [r7, #28]
 8003068:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 800306a:	69fb      	ldr	r3, [r7, #28]
 800306c:	3301      	adds	r3, #1
 800306e:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8003070:	68fb      	ldr	r3, [r7, #12]
 8003072:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003074:	b29b      	uxth	r3, r3
 8003076:	3b01      	subs	r3, #1
 8003078:	b29a      	uxth	r2, r3
 800307a:	68fb      	ldr	r3, [r7, #12]
 800307c:	85da      	strh	r2, [r3, #46]	; 0x2e
    while (huart->RxXferCount > 0U)
 800307e:	68fb      	ldr	r3, [r7, #12]
 8003080:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003082:	b29b      	uxth	r3, r3
 8003084:	2b00      	cmp	r3, #0
 8003086:	d1b6      	bne.n	8002ff6 <HAL_UART_Receive+0x9c>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8003088:	68fb      	ldr	r3, [r7, #12]
 800308a:	2220      	movs	r2, #32
 800308c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    return HAL_OK;
 8003090:	2300      	movs	r3, #0
 8003092:	e000      	b.n	8003096 <HAL_UART_Receive+0x13c>
  }
  else
  {
    return HAL_BUSY;
 8003094:	2302      	movs	r3, #2
  }
}
 8003096:	4618      	mov	r0, r3
 8003098:	3720      	adds	r7, #32
 800309a:	46bd      	mov	sp, r7
 800309c:	bd80      	pop	{r7, pc}

0800309e <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800309e:	b580      	push	{r7, lr}
 80030a0:	b090      	sub	sp, #64	; 0x40
 80030a2:	af00      	add	r7, sp, #0
 80030a4:	60f8      	str	r0, [r7, #12]
 80030a6:	60b9      	str	r1, [r7, #8]
 80030a8:	603b      	str	r3, [r7, #0]
 80030aa:	4613      	mov	r3, r2
 80030ac:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80030ae:	e050      	b.n	8003152 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80030b0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80030b2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80030b6:	d04c      	beq.n	8003152 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80030b8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80030ba:	2b00      	cmp	r3, #0
 80030bc:	d007      	beq.n	80030ce <UART_WaitOnFlagUntilTimeout+0x30>
 80030be:	f7fd ffb7 	bl	8001030 <HAL_GetTick>
 80030c2:	4602      	mov	r2, r0
 80030c4:	683b      	ldr	r3, [r7, #0]
 80030c6:	1ad3      	subs	r3, r2, r3
 80030c8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80030ca:	429a      	cmp	r2, r3
 80030cc:	d241      	bcs.n	8003152 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80030ce:	68fb      	ldr	r3, [r7, #12]
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	330c      	adds	r3, #12
 80030d4:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80030d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80030d8:	e853 3f00 	ldrex	r3, [r3]
 80030dc:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80030de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030e0:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80030e4:	63fb      	str	r3, [r7, #60]	; 0x3c
 80030e6:	68fb      	ldr	r3, [r7, #12]
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	330c      	adds	r3, #12
 80030ec:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80030ee:	637a      	str	r2, [r7, #52]	; 0x34
 80030f0:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80030f2:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80030f4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80030f6:	e841 2300 	strex	r3, r2, [r1]
 80030fa:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80030fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80030fe:	2b00      	cmp	r3, #0
 8003100:	d1e5      	bne.n	80030ce <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003102:	68fb      	ldr	r3, [r7, #12]
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	3314      	adds	r3, #20
 8003108:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800310a:	697b      	ldr	r3, [r7, #20]
 800310c:	e853 3f00 	ldrex	r3, [r3]
 8003110:	613b      	str	r3, [r7, #16]
   return(result);
 8003112:	693b      	ldr	r3, [r7, #16]
 8003114:	f023 0301 	bic.w	r3, r3, #1
 8003118:	63bb      	str	r3, [r7, #56]	; 0x38
 800311a:	68fb      	ldr	r3, [r7, #12]
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	3314      	adds	r3, #20
 8003120:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003122:	623a      	str	r2, [r7, #32]
 8003124:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003126:	69f9      	ldr	r1, [r7, #28]
 8003128:	6a3a      	ldr	r2, [r7, #32]
 800312a:	e841 2300 	strex	r3, r2, [r1]
 800312e:	61bb      	str	r3, [r7, #24]
   return(result);
 8003130:	69bb      	ldr	r3, [r7, #24]
 8003132:	2b00      	cmp	r3, #0
 8003134:	d1e5      	bne.n	8003102 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8003136:	68fb      	ldr	r3, [r7, #12]
 8003138:	2220      	movs	r2, #32
 800313a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 800313e:	68fb      	ldr	r3, [r7, #12]
 8003140:	2220      	movs	r2, #32
 8003142:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8003146:	68fb      	ldr	r3, [r7, #12]
 8003148:	2200      	movs	r2, #0
 800314a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 800314e:	2303      	movs	r3, #3
 8003150:	e00f      	b.n	8003172 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003152:	68fb      	ldr	r3, [r7, #12]
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	681a      	ldr	r2, [r3, #0]
 8003158:	68bb      	ldr	r3, [r7, #8]
 800315a:	4013      	ands	r3, r2
 800315c:	68ba      	ldr	r2, [r7, #8]
 800315e:	429a      	cmp	r2, r3
 8003160:	bf0c      	ite	eq
 8003162:	2301      	moveq	r3, #1
 8003164:	2300      	movne	r3, #0
 8003166:	b2db      	uxtb	r3, r3
 8003168:	461a      	mov	r2, r3
 800316a:	79fb      	ldrb	r3, [r7, #7]
 800316c:	429a      	cmp	r2, r3
 800316e:	d09f      	beq.n	80030b0 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003170:	2300      	movs	r3, #0
}
 8003172:	4618      	mov	r0, r3
 8003174:	3740      	adds	r7, #64	; 0x40
 8003176:	46bd      	mov	sp, r7
 8003178:	bd80      	pop	{r7, pc}
	...

0800317c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800317c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003180:	b0c0      	sub	sp, #256	; 0x100
 8003182:	af00      	add	r7, sp, #0
 8003184:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003188:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	691b      	ldr	r3, [r3, #16]
 8003190:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8003194:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003198:	68d9      	ldr	r1, [r3, #12]
 800319a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800319e:	681a      	ldr	r2, [r3, #0]
 80031a0:	ea40 0301 	orr.w	r3, r0, r1
 80031a4:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80031a6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80031aa:	689a      	ldr	r2, [r3, #8]
 80031ac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80031b0:	691b      	ldr	r3, [r3, #16]
 80031b2:	431a      	orrs	r2, r3
 80031b4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80031b8:	695b      	ldr	r3, [r3, #20]
 80031ba:	431a      	orrs	r2, r3
 80031bc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80031c0:	69db      	ldr	r3, [r3, #28]
 80031c2:	4313      	orrs	r3, r2
 80031c4:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80031c8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	68db      	ldr	r3, [r3, #12]
 80031d0:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80031d4:	f021 010c 	bic.w	r1, r1, #12
 80031d8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80031dc:	681a      	ldr	r2, [r3, #0]
 80031de:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80031e2:	430b      	orrs	r3, r1
 80031e4:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80031e6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	695b      	ldr	r3, [r3, #20]
 80031ee:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80031f2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80031f6:	6999      	ldr	r1, [r3, #24]
 80031f8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80031fc:	681a      	ldr	r2, [r3, #0]
 80031fe:	ea40 0301 	orr.w	r3, r0, r1
 8003202:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003204:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003208:	681a      	ldr	r2, [r3, #0]
 800320a:	4b8f      	ldr	r3, [pc, #572]	; (8003448 <UART_SetConfig+0x2cc>)
 800320c:	429a      	cmp	r2, r3
 800320e:	d005      	beq.n	800321c <UART_SetConfig+0xa0>
 8003210:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003214:	681a      	ldr	r2, [r3, #0]
 8003216:	4b8d      	ldr	r3, [pc, #564]	; (800344c <UART_SetConfig+0x2d0>)
 8003218:	429a      	cmp	r2, r3
 800321a:	d104      	bne.n	8003226 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800321c:	f7ff fade 	bl	80027dc <HAL_RCC_GetPCLK2Freq>
 8003220:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8003224:	e003      	b.n	800322e <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8003226:	f7ff fac5 	bl	80027b4 <HAL_RCC_GetPCLK1Freq>
 800322a:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800322e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003232:	69db      	ldr	r3, [r3, #28]
 8003234:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003238:	f040 810c 	bne.w	8003454 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800323c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003240:	2200      	movs	r2, #0
 8003242:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8003246:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800324a:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 800324e:	4622      	mov	r2, r4
 8003250:	462b      	mov	r3, r5
 8003252:	1891      	adds	r1, r2, r2
 8003254:	65b9      	str	r1, [r7, #88]	; 0x58
 8003256:	415b      	adcs	r3, r3
 8003258:	65fb      	str	r3, [r7, #92]	; 0x5c
 800325a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800325e:	4621      	mov	r1, r4
 8003260:	eb12 0801 	adds.w	r8, r2, r1
 8003264:	4629      	mov	r1, r5
 8003266:	eb43 0901 	adc.w	r9, r3, r1
 800326a:	f04f 0200 	mov.w	r2, #0
 800326e:	f04f 0300 	mov.w	r3, #0
 8003272:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003276:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800327a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800327e:	4690      	mov	r8, r2
 8003280:	4699      	mov	r9, r3
 8003282:	4623      	mov	r3, r4
 8003284:	eb18 0303 	adds.w	r3, r8, r3
 8003288:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800328c:	462b      	mov	r3, r5
 800328e:	eb49 0303 	adc.w	r3, r9, r3
 8003292:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8003296:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800329a:	685b      	ldr	r3, [r3, #4]
 800329c:	2200      	movs	r2, #0
 800329e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80032a2:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 80032a6:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 80032aa:	460b      	mov	r3, r1
 80032ac:	18db      	adds	r3, r3, r3
 80032ae:	653b      	str	r3, [r7, #80]	; 0x50
 80032b0:	4613      	mov	r3, r2
 80032b2:	eb42 0303 	adc.w	r3, r2, r3
 80032b6:	657b      	str	r3, [r7, #84]	; 0x54
 80032b8:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80032bc:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 80032c0:	f7fc ffa0 	bl	8000204 <__aeabi_uldivmod>
 80032c4:	4602      	mov	r2, r0
 80032c6:	460b      	mov	r3, r1
 80032c8:	4b61      	ldr	r3, [pc, #388]	; (8003450 <UART_SetConfig+0x2d4>)
 80032ca:	fba3 2302 	umull	r2, r3, r3, r2
 80032ce:	095b      	lsrs	r3, r3, #5
 80032d0:	011c      	lsls	r4, r3, #4
 80032d2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80032d6:	2200      	movs	r2, #0
 80032d8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80032dc:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 80032e0:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 80032e4:	4642      	mov	r2, r8
 80032e6:	464b      	mov	r3, r9
 80032e8:	1891      	adds	r1, r2, r2
 80032ea:	64b9      	str	r1, [r7, #72]	; 0x48
 80032ec:	415b      	adcs	r3, r3
 80032ee:	64fb      	str	r3, [r7, #76]	; 0x4c
 80032f0:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80032f4:	4641      	mov	r1, r8
 80032f6:	eb12 0a01 	adds.w	sl, r2, r1
 80032fa:	4649      	mov	r1, r9
 80032fc:	eb43 0b01 	adc.w	fp, r3, r1
 8003300:	f04f 0200 	mov.w	r2, #0
 8003304:	f04f 0300 	mov.w	r3, #0
 8003308:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800330c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8003310:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003314:	4692      	mov	sl, r2
 8003316:	469b      	mov	fp, r3
 8003318:	4643      	mov	r3, r8
 800331a:	eb1a 0303 	adds.w	r3, sl, r3
 800331e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8003322:	464b      	mov	r3, r9
 8003324:	eb4b 0303 	adc.w	r3, fp, r3
 8003328:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800332c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003330:	685b      	ldr	r3, [r3, #4]
 8003332:	2200      	movs	r2, #0
 8003334:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8003338:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 800333c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8003340:	460b      	mov	r3, r1
 8003342:	18db      	adds	r3, r3, r3
 8003344:	643b      	str	r3, [r7, #64]	; 0x40
 8003346:	4613      	mov	r3, r2
 8003348:	eb42 0303 	adc.w	r3, r2, r3
 800334c:	647b      	str	r3, [r7, #68]	; 0x44
 800334e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8003352:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8003356:	f7fc ff55 	bl	8000204 <__aeabi_uldivmod>
 800335a:	4602      	mov	r2, r0
 800335c:	460b      	mov	r3, r1
 800335e:	4611      	mov	r1, r2
 8003360:	4b3b      	ldr	r3, [pc, #236]	; (8003450 <UART_SetConfig+0x2d4>)
 8003362:	fba3 2301 	umull	r2, r3, r3, r1
 8003366:	095b      	lsrs	r3, r3, #5
 8003368:	2264      	movs	r2, #100	; 0x64
 800336a:	fb02 f303 	mul.w	r3, r2, r3
 800336e:	1acb      	subs	r3, r1, r3
 8003370:	00db      	lsls	r3, r3, #3
 8003372:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8003376:	4b36      	ldr	r3, [pc, #216]	; (8003450 <UART_SetConfig+0x2d4>)
 8003378:	fba3 2302 	umull	r2, r3, r3, r2
 800337c:	095b      	lsrs	r3, r3, #5
 800337e:	005b      	lsls	r3, r3, #1
 8003380:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8003384:	441c      	add	r4, r3
 8003386:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800338a:	2200      	movs	r2, #0
 800338c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003390:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8003394:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8003398:	4642      	mov	r2, r8
 800339a:	464b      	mov	r3, r9
 800339c:	1891      	adds	r1, r2, r2
 800339e:	63b9      	str	r1, [r7, #56]	; 0x38
 80033a0:	415b      	adcs	r3, r3
 80033a2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80033a4:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80033a8:	4641      	mov	r1, r8
 80033aa:	1851      	adds	r1, r2, r1
 80033ac:	6339      	str	r1, [r7, #48]	; 0x30
 80033ae:	4649      	mov	r1, r9
 80033b0:	414b      	adcs	r3, r1
 80033b2:	637b      	str	r3, [r7, #52]	; 0x34
 80033b4:	f04f 0200 	mov.w	r2, #0
 80033b8:	f04f 0300 	mov.w	r3, #0
 80033bc:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 80033c0:	4659      	mov	r1, fp
 80033c2:	00cb      	lsls	r3, r1, #3
 80033c4:	4651      	mov	r1, sl
 80033c6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80033ca:	4651      	mov	r1, sl
 80033cc:	00ca      	lsls	r2, r1, #3
 80033ce:	4610      	mov	r0, r2
 80033d0:	4619      	mov	r1, r3
 80033d2:	4603      	mov	r3, r0
 80033d4:	4642      	mov	r2, r8
 80033d6:	189b      	adds	r3, r3, r2
 80033d8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80033dc:	464b      	mov	r3, r9
 80033de:	460a      	mov	r2, r1
 80033e0:	eb42 0303 	adc.w	r3, r2, r3
 80033e4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80033e8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80033ec:	685b      	ldr	r3, [r3, #4]
 80033ee:	2200      	movs	r2, #0
 80033f0:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80033f4:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 80033f8:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 80033fc:	460b      	mov	r3, r1
 80033fe:	18db      	adds	r3, r3, r3
 8003400:	62bb      	str	r3, [r7, #40]	; 0x28
 8003402:	4613      	mov	r3, r2
 8003404:	eb42 0303 	adc.w	r3, r2, r3
 8003408:	62fb      	str	r3, [r7, #44]	; 0x2c
 800340a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800340e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8003412:	f7fc fef7 	bl	8000204 <__aeabi_uldivmod>
 8003416:	4602      	mov	r2, r0
 8003418:	460b      	mov	r3, r1
 800341a:	4b0d      	ldr	r3, [pc, #52]	; (8003450 <UART_SetConfig+0x2d4>)
 800341c:	fba3 1302 	umull	r1, r3, r3, r2
 8003420:	095b      	lsrs	r3, r3, #5
 8003422:	2164      	movs	r1, #100	; 0x64
 8003424:	fb01 f303 	mul.w	r3, r1, r3
 8003428:	1ad3      	subs	r3, r2, r3
 800342a:	00db      	lsls	r3, r3, #3
 800342c:	3332      	adds	r3, #50	; 0x32
 800342e:	4a08      	ldr	r2, [pc, #32]	; (8003450 <UART_SetConfig+0x2d4>)
 8003430:	fba2 2303 	umull	r2, r3, r2, r3
 8003434:	095b      	lsrs	r3, r3, #5
 8003436:	f003 0207 	and.w	r2, r3, #7
 800343a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	4422      	add	r2, r4
 8003442:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8003444:	e105      	b.n	8003652 <UART_SetConfig+0x4d6>
 8003446:	bf00      	nop
 8003448:	40011000 	.word	0x40011000
 800344c:	40011400 	.word	0x40011400
 8003450:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003454:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003458:	2200      	movs	r2, #0
 800345a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800345e:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8003462:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8003466:	4642      	mov	r2, r8
 8003468:	464b      	mov	r3, r9
 800346a:	1891      	adds	r1, r2, r2
 800346c:	6239      	str	r1, [r7, #32]
 800346e:	415b      	adcs	r3, r3
 8003470:	627b      	str	r3, [r7, #36]	; 0x24
 8003472:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8003476:	4641      	mov	r1, r8
 8003478:	1854      	adds	r4, r2, r1
 800347a:	4649      	mov	r1, r9
 800347c:	eb43 0501 	adc.w	r5, r3, r1
 8003480:	f04f 0200 	mov.w	r2, #0
 8003484:	f04f 0300 	mov.w	r3, #0
 8003488:	00eb      	lsls	r3, r5, #3
 800348a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800348e:	00e2      	lsls	r2, r4, #3
 8003490:	4614      	mov	r4, r2
 8003492:	461d      	mov	r5, r3
 8003494:	4643      	mov	r3, r8
 8003496:	18e3      	adds	r3, r4, r3
 8003498:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800349c:	464b      	mov	r3, r9
 800349e:	eb45 0303 	adc.w	r3, r5, r3
 80034a2:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80034a6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80034aa:	685b      	ldr	r3, [r3, #4]
 80034ac:	2200      	movs	r2, #0
 80034ae:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80034b2:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80034b6:	f04f 0200 	mov.w	r2, #0
 80034ba:	f04f 0300 	mov.w	r3, #0
 80034be:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 80034c2:	4629      	mov	r1, r5
 80034c4:	008b      	lsls	r3, r1, #2
 80034c6:	4621      	mov	r1, r4
 80034c8:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80034cc:	4621      	mov	r1, r4
 80034ce:	008a      	lsls	r2, r1, #2
 80034d0:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 80034d4:	f7fc fe96 	bl	8000204 <__aeabi_uldivmod>
 80034d8:	4602      	mov	r2, r0
 80034da:	460b      	mov	r3, r1
 80034dc:	4b60      	ldr	r3, [pc, #384]	; (8003660 <UART_SetConfig+0x4e4>)
 80034de:	fba3 2302 	umull	r2, r3, r3, r2
 80034e2:	095b      	lsrs	r3, r3, #5
 80034e4:	011c      	lsls	r4, r3, #4
 80034e6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80034ea:	2200      	movs	r2, #0
 80034ec:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80034f0:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80034f4:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 80034f8:	4642      	mov	r2, r8
 80034fa:	464b      	mov	r3, r9
 80034fc:	1891      	adds	r1, r2, r2
 80034fe:	61b9      	str	r1, [r7, #24]
 8003500:	415b      	adcs	r3, r3
 8003502:	61fb      	str	r3, [r7, #28]
 8003504:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003508:	4641      	mov	r1, r8
 800350a:	1851      	adds	r1, r2, r1
 800350c:	6139      	str	r1, [r7, #16]
 800350e:	4649      	mov	r1, r9
 8003510:	414b      	adcs	r3, r1
 8003512:	617b      	str	r3, [r7, #20]
 8003514:	f04f 0200 	mov.w	r2, #0
 8003518:	f04f 0300 	mov.w	r3, #0
 800351c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003520:	4659      	mov	r1, fp
 8003522:	00cb      	lsls	r3, r1, #3
 8003524:	4651      	mov	r1, sl
 8003526:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800352a:	4651      	mov	r1, sl
 800352c:	00ca      	lsls	r2, r1, #3
 800352e:	4610      	mov	r0, r2
 8003530:	4619      	mov	r1, r3
 8003532:	4603      	mov	r3, r0
 8003534:	4642      	mov	r2, r8
 8003536:	189b      	adds	r3, r3, r2
 8003538:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800353c:	464b      	mov	r3, r9
 800353e:	460a      	mov	r2, r1
 8003540:	eb42 0303 	adc.w	r3, r2, r3
 8003544:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8003548:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800354c:	685b      	ldr	r3, [r3, #4]
 800354e:	2200      	movs	r2, #0
 8003550:	67bb      	str	r3, [r7, #120]	; 0x78
 8003552:	67fa      	str	r2, [r7, #124]	; 0x7c
 8003554:	f04f 0200 	mov.w	r2, #0
 8003558:	f04f 0300 	mov.w	r3, #0
 800355c:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8003560:	4649      	mov	r1, r9
 8003562:	008b      	lsls	r3, r1, #2
 8003564:	4641      	mov	r1, r8
 8003566:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800356a:	4641      	mov	r1, r8
 800356c:	008a      	lsls	r2, r1, #2
 800356e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8003572:	f7fc fe47 	bl	8000204 <__aeabi_uldivmod>
 8003576:	4602      	mov	r2, r0
 8003578:	460b      	mov	r3, r1
 800357a:	4b39      	ldr	r3, [pc, #228]	; (8003660 <UART_SetConfig+0x4e4>)
 800357c:	fba3 1302 	umull	r1, r3, r3, r2
 8003580:	095b      	lsrs	r3, r3, #5
 8003582:	2164      	movs	r1, #100	; 0x64
 8003584:	fb01 f303 	mul.w	r3, r1, r3
 8003588:	1ad3      	subs	r3, r2, r3
 800358a:	011b      	lsls	r3, r3, #4
 800358c:	3332      	adds	r3, #50	; 0x32
 800358e:	4a34      	ldr	r2, [pc, #208]	; (8003660 <UART_SetConfig+0x4e4>)
 8003590:	fba2 2303 	umull	r2, r3, r2, r3
 8003594:	095b      	lsrs	r3, r3, #5
 8003596:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800359a:	441c      	add	r4, r3
 800359c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80035a0:	2200      	movs	r2, #0
 80035a2:	673b      	str	r3, [r7, #112]	; 0x70
 80035a4:	677a      	str	r2, [r7, #116]	; 0x74
 80035a6:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 80035aa:	4642      	mov	r2, r8
 80035ac:	464b      	mov	r3, r9
 80035ae:	1891      	adds	r1, r2, r2
 80035b0:	60b9      	str	r1, [r7, #8]
 80035b2:	415b      	adcs	r3, r3
 80035b4:	60fb      	str	r3, [r7, #12]
 80035b6:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80035ba:	4641      	mov	r1, r8
 80035bc:	1851      	adds	r1, r2, r1
 80035be:	6039      	str	r1, [r7, #0]
 80035c0:	4649      	mov	r1, r9
 80035c2:	414b      	adcs	r3, r1
 80035c4:	607b      	str	r3, [r7, #4]
 80035c6:	f04f 0200 	mov.w	r2, #0
 80035ca:	f04f 0300 	mov.w	r3, #0
 80035ce:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80035d2:	4659      	mov	r1, fp
 80035d4:	00cb      	lsls	r3, r1, #3
 80035d6:	4651      	mov	r1, sl
 80035d8:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80035dc:	4651      	mov	r1, sl
 80035de:	00ca      	lsls	r2, r1, #3
 80035e0:	4610      	mov	r0, r2
 80035e2:	4619      	mov	r1, r3
 80035e4:	4603      	mov	r3, r0
 80035e6:	4642      	mov	r2, r8
 80035e8:	189b      	adds	r3, r3, r2
 80035ea:	66bb      	str	r3, [r7, #104]	; 0x68
 80035ec:	464b      	mov	r3, r9
 80035ee:	460a      	mov	r2, r1
 80035f0:	eb42 0303 	adc.w	r3, r2, r3
 80035f4:	66fb      	str	r3, [r7, #108]	; 0x6c
 80035f6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80035fa:	685b      	ldr	r3, [r3, #4]
 80035fc:	2200      	movs	r2, #0
 80035fe:	663b      	str	r3, [r7, #96]	; 0x60
 8003600:	667a      	str	r2, [r7, #100]	; 0x64
 8003602:	f04f 0200 	mov.w	r2, #0
 8003606:	f04f 0300 	mov.w	r3, #0
 800360a:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 800360e:	4649      	mov	r1, r9
 8003610:	008b      	lsls	r3, r1, #2
 8003612:	4641      	mov	r1, r8
 8003614:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003618:	4641      	mov	r1, r8
 800361a:	008a      	lsls	r2, r1, #2
 800361c:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8003620:	f7fc fdf0 	bl	8000204 <__aeabi_uldivmod>
 8003624:	4602      	mov	r2, r0
 8003626:	460b      	mov	r3, r1
 8003628:	4b0d      	ldr	r3, [pc, #52]	; (8003660 <UART_SetConfig+0x4e4>)
 800362a:	fba3 1302 	umull	r1, r3, r3, r2
 800362e:	095b      	lsrs	r3, r3, #5
 8003630:	2164      	movs	r1, #100	; 0x64
 8003632:	fb01 f303 	mul.w	r3, r1, r3
 8003636:	1ad3      	subs	r3, r2, r3
 8003638:	011b      	lsls	r3, r3, #4
 800363a:	3332      	adds	r3, #50	; 0x32
 800363c:	4a08      	ldr	r2, [pc, #32]	; (8003660 <UART_SetConfig+0x4e4>)
 800363e:	fba2 2303 	umull	r2, r3, r2, r3
 8003642:	095b      	lsrs	r3, r3, #5
 8003644:	f003 020f 	and.w	r2, r3, #15
 8003648:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	4422      	add	r2, r4
 8003650:	609a      	str	r2, [r3, #8]
}
 8003652:	bf00      	nop
 8003654:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8003658:	46bd      	mov	sp, r7
 800365a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800365e:	bf00      	nop
 8003660:	51eb851f 	.word	0x51eb851f

08003664 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8003664:	b084      	sub	sp, #16
 8003666:	b580      	push	{r7, lr}
 8003668:	b084      	sub	sp, #16
 800366a:	af00      	add	r7, sp, #0
 800366c:	6078      	str	r0, [r7, #4]
 800366e:	f107 001c 	add.w	r0, r7, #28
 8003672:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8003676:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003678:	2b01      	cmp	r3, #1
 800367a:	d122      	bne.n	80036c2 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003680:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	68db      	ldr	r3, [r3, #12]
 800368c:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8003690:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003694:	687a      	ldr	r2, [r7, #4]
 8003696:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	68db      	ldr	r3, [r3, #12]
 800369c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 80036a4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80036a6:	2b01      	cmp	r3, #1
 80036a8:	d105      	bne.n	80036b6 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	68db      	ldr	r3, [r3, #12]
 80036ae:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80036b6:	6878      	ldr	r0, [r7, #4]
 80036b8:	f000 faa2 	bl	8003c00 <USB_CoreReset>
 80036bc:	4603      	mov	r3, r0
 80036be:	73fb      	strb	r3, [r7, #15]
 80036c0:	e01a      	b.n	80036f8 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	68db      	ldr	r3, [r3, #12]
 80036c6:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80036ce:	6878      	ldr	r0, [r7, #4]
 80036d0:	f000 fa96 	bl	8003c00 <USB_CoreReset>
 80036d4:	4603      	mov	r3, r0
 80036d6:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 80036d8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80036da:	2b00      	cmp	r3, #0
 80036dc:	d106      	bne.n	80036ec <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80036e2:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	639a      	str	r2, [r3, #56]	; 0x38
 80036ea:	e005      	b.n	80036f8 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80036f0:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 80036f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80036fa:	2b01      	cmp	r3, #1
 80036fc:	d10b      	bne.n	8003716 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	689b      	ldr	r3, [r3, #8]
 8003702:	f043 0206 	orr.w	r2, r3, #6
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	689b      	ldr	r3, [r3, #8]
 800370e:	f043 0220 	orr.w	r2, r3, #32
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8003716:	7bfb      	ldrb	r3, [r7, #15]
}
 8003718:	4618      	mov	r0, r3
 800371a:	3710      	adds	r7, #16
 800371c:	46bd      	mov	sp, r7
 800371e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8003722:	b004      	add	sp, #16
 8003724:	4770      	bx	lr

08003726 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8003726:	b480      	push	{r7}
 8003728:	b083      	sub	sp, #12
 800372a:	af00      	add	r7, sp, #0
 800372c:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	689b      	ldr	r3, [r3, #8]
 8003732:	f023 0201 	bic.w	r2, r3, #1
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800373a:	2300      	movs	r3, #0
}
 800373c:	4618      	mov	r0, r3
 800373e:	370c      	adds	r7, #12
 8003740:	46bd      	mov	sp, r7
 8003742:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003746:	4770      	bx	lr

08003748 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8003748:	b580      	push	{r7, lr}
 800374a:	b084      	sub	sp, #16
 800374c:	af00      	add	r7, sp, #0
 800374e:	6078      	str	r0, [r7, #4]
 8003750:	460b      	mov	r3, r1
 8003752:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8003754:	2300      	movs	r3, #0
 8003756:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	68db      	ldr	r3, [r3, #12]
 800375c:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8003764:	78fb      	ldrb	r3, [r7, #3]
 8003766:	2b01      	cmp	r3, #1
 8003768:	d115      	bne.n	8003796 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	68db      	ldr	r3, [r3, #12]
 800376e:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8003776:	2001      	movs	r0, #1
 8003778:	f7fd fc66 	bl	8001048 <HAL_Delay>
      ms++;
 800377c:	68fb      	ldr	r3, [r7, #12]
 800377e:	3301      	adds	r3, #1
 8003780:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8003782:	6878      	ldr	r0, [r7, #4]
 8003784:	f000 fa2e 	bl	8003be4 <USB_GetMode>
 8003788:	4603      	mov	r3, r0
 800378a:	2b01      	cmp	r3, #1
 800378c:	d01e      	beq.n	80037cc <USB_SetCurrentMode+0x84>
 800378e:	68fb      	ldr	r3, [r7, #12]
 8003790:	2b31      	cmp	r3, #49	; 0x31
 8003792:	d9f0      	bls.n	8003776 <USB_SetCurrentMode+0x2e>
 8003794:	e01a      	b.n	80037cc <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8003796:	78fb      	ldrb	r3, [r7, #3]
 8003798:	2b00      	cmp	r3, #0
 800379a:	d115      	bne.n	80037c8 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	68db      	ldr	r3, [r3, #12]
 80037a0:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80037a8:	2001      	movs	r0, #1
 80037aa:	f7fd fc4d 	bl	8001048 <HAL_Delay>
      ms++;
 80037ae:	68fb      	ldr	r3, [r7, #12]
 80037b0:	3301      	adds	r3, #1
 80037b2:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 80037b4:	6878      	ldr	r0, [r7, #4]
 80037b6:	f000 fa15 	bl	8003be4 <USB_GetMode>
 80037ba:	4603      	mov	r3, r0
 80037bc:	2b00      	cmp	r3, #0
 80037be:	d005      	beq.n	80037cc <USB_SetCurrentMode+0x84>
 80037c0:	68fb      	ldr	r3, [r7, #12]
 80037c2:	2b31      	cmp	r3, #49	; 0x31
 80037c4:	d9f0      	bls.n	80037a8 <USB_SetCurrentMode+0x60>
 80037c6:	e001      	b.n	80037cc <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 80037c8:	2301      	movs	r3, #1
 80037ca:	e005      	b.n	80037d8 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 80037cc:	68fb      	ldr	r3, [r7, #12]
 80037ce:	2b32      	cmp	r3, #50	; 0x32
 80037d0:	d101      	bne.n	80037d6 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 80037d2:	2301      	movs	r3, #1
 80037d4:	e000      	b.n	80037d8 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 80037d6:	2300      	movs	r3, #0
}
 80037d8:	4618      	mov	r0, r3
 80037da:	3710      	adds	r7, #16
 80037dc:	46bd      	mov	sp, r7
 80037de:	bd80      	pop	{r7, pc}

080037e0 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80037e0:	b084      	sub	sp, #16
 80037e2:	b580      	push	{r7, lr}
 80037e4:	b086      	sub	sp, #24
 80037e6:	af00      	add	r7, sp, #0
 80037e8:	6078      	str	r0, [r7, #4]
 80037ea:	f107 0024 	add.w	r0, r7, #36	; 0x24
 80037ee:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 80037f2:	2300      	movs	r3, #0
 80037f4:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 80037fa:	2300      	movs	r3, #0
 80037fc:	613b      	str	r3, [r7, #16]
 80037fe:	e009      	b.n	8003814 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8003800:	687a      	ldr	r2, [r7, #4]
 8003802:	693b      	ldr	r3, [r7, #16]
 8003804:	3340      	adds	r3, #64	; 0x40
 8003806:	009b      	lsls	r3, r3, #2
 8003808:	4413      	add	r3, r2
 800380a:	2200      	movs	r2, #0
 800380c:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800380e:	693b      	ldr	r3, [r7, #16]
 8003810:	3301      	adds	r3, #1
 8003812:	613b      	str	r3, [r7, #16]
 8003814:	693b      	ldr	r3, [r7, #16]
 8003816:	2b0e      	cmp	r3, #14
 8003818:	d9f2      	bls.n	8003800 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800381a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800381c:	2b00      	cmp	r3, #0
 800381e:	d11c      	bne.n	800385a <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8003820:	68fb      	ldr	r3, [r7, #12]
 8003822:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003826:	685b      	ldr	r3, [r3, #4]
 8003828:	68fa      	ldr	r2, [r7, #12]
 800382a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800382e:	f043 0302 	orr.w	r3, r3, #2
 8003832:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003838:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003844:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003850:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	639a      	str	r2, [r3, #56]	; 0x38
 8003858:	e00b      	b.n	8003872 <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800385e:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800386a:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8003872:	68fb      	ldr	r3, [r7, #12]
 8003874:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8003878:	461a      	mov	r2, r3
 800387a:	2300      	movs	r3, #0
 800387c:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 800387e:	68fb      	ldr	r3, [r7, #12]
 8003880:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003884:	4619      	mov	r1, r3
 8003886:	68fb      	ldr	r3, [r7, #12]
 8003888:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800388c:	461a      	mov	r2, r3
 800388e:	680b      	ldr	r3, [r1, #0]
 8003890:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8003892:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003894:	2b01      	cmp	r3, #1
 8003896:	d10c      	bne.n	80038b2 <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8003898:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800389a:	2b00      	cmp	r3, #0
 800389c:	d104      	bne.n	80038a8 <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800389e:	2100      	movs	r1, #0
 80038a0:	6878      	ldr	r0, [r7, #4]
 80038a2:	f000 f965 	bl	8003b70 <USB_SetDevSpeed>
 80038a6:	e008      	b.n	80038ba <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 80038a8:	2101      	movs	r1, #1
 80038aa:	6878      	ldr	r0, [r7, #4]
 80038ac:	f000 f960 	bl	8003b70 <USB_SetDevSpeed>
 80038b0:	e003      	b.n	80038ba <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 80038b2:	2103      	movs	r1, #3
 80038b4:	6878      	ldr	r0, [r7, #4]
 80038b6:	f000 f95b 	bl	8003b70 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80038ba:	2110      	movs	r1, #16
 80038bc:	6878      	ldr	r0, [r7, #4]
 80038be:	f000 f8f3 	bl	8003aa8 <USB_FlushTxFifo>
 80038c2:	4603      	mov	r3, r0
 80038c4:	2b00      	cmp	r3, #0
 80038c6:	d001      	beq.n	80038cc <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 80038c8:	2301      	movs	r3, #1
 80038ca:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80038cc:	6878      	ldr	r0, [r7, #4]
 80038ce:	f000 f91f 	bl	8003b10 <USB_FlushRxFifo>
 80038d2:	4603      	mov	r3, r0
 80038d4:	2b00      	cmp	r3, #0
 80038d6:	d001      	beq.n	80038dc <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 80038d8:	2301      	movs	r3, #1
 80038da:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 80038dc:	68fb      	ldr	r3, [r7, #12]
 80038de:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80038e2:	461a      	mov	r2, r3
 80038e4:	2300      	movs	r3, #0
 80038e6:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 80038e8:	68fb      	ldr	r3, [r7, #12]
 80038ea:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80038ee:	461a      	mov	r2, r3
 80038f0:	2300      	movs	r3, #0
 80038f2:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 80038f4:	68fb      	ldr	r3, [r7, #12]
 80038f6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80038fa:	461a      	mov	r2, r3
 80038fc:	2300      	movs	r3, #0
 80038fe:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003900:	2300      	movs	r3, #0
 8003902:	613b      	str	r3, [r7, #16]
 8003904:	e043      	b.n	800398e <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8003906:	693b      	ldr	r3, [r7, #16]
 8003908:	015a      	lsls	r2, r3, #5
 800390a:	68fb      	ldr	r3, [r7, #12]
 800390c:	4413      	add	r3, r2
 800390e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003918:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800391c:	d118      	bne.n	8003950 <USB_DevInit+0x170>
    {
      if (i == 0U)
 800391e:	693b      	ldr	r3, [r7, #16]
 8003920:	2b00      	cmp	r3, #0
 8003922:	d10a      	bne.n	800393a <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8003924:	693b      	ldr	r3, [r7, #16]
 8003926:	015a      	lsls	r2, r3, #5
 8003928:	68fb      	ldr	r3, [r7, #12]
 800392a:	4413      	add	r3, r2
 800392c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003930:	461a      	mov	r2, r3
 8003932:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8003936:	6013      	str	r3, [r2, #0]
 8003938:	e013      	b.n	8003962 <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800393a:	693b      	ldr	r3, [r7, #16]
 800393c:	015a      	lsls	r2, r3, #5
 800393e:	68fb      	ldr	r3, [r7, #12]
 8003940:	4413      	add	r3, r2
 8003942:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003946:	461a      	mov	r2, r3
 8003948:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800394c:	6013      	str	r3, [r2, #0]
 800394e:	e008      	b.n	8003962 <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8003950:	693b      	ldr	r3, [r7, #16]
 8003952:	015a      	lsls	r2, r3, #5
 8003954:	68fb      	ldr	r3, [r7, #12]
 8003956:	4413      	add	r3, r2
 8003958:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800395c:	461a      	mov	r2, r3
 800395e:	2300      	movs	r3, #0
 8003960:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8003962:	693b      	ldr	r3, [r7, #16]
 8003964:	015a      	lsls	r2, r3, #5
 8003966:	68fb      	ldr	r3, [r7, #12]
 8003968:	4413      	add	r3, r2
 800396a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800396e:	461a      	mov	r2, r3
 8003970:	2300      	movs	r3, #0
 8003972:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8003974:	693b      	ldr	r3, [r7, #16]
 8003976:	015a      	lsls	r2, r3, #5
 8003978:	68fb      	ldr	r3, [r7, #12]
 800397a:	4413      	add	r3, r2
 800397c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003980:	461a      	mov	r2, r3
 8003982:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8003986:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003988:	693b      	ldr	r3, [r7, #16]
 800398a:	3301      	adds	r3, #1
 800398c:	613b      	str	r3, [r7, #16]
 800398e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003990:	693a      	ldr	r2, [r7, #16]
 8003992:	429a      	cmp	r2, r3
 8003994:	d3b7      	bcc.n	8003906 <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003996:	2300      	movs	r3, #0
 8003998:	613b      	str	r3, [r7, #16]
 800399a:	e043      	b.n	8003a24 <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800399c:	693b      	ldr	r3, [r7, #16]
 800399e:	015a      	lsls	r2, r3, #5
 80039a0:	68fb      	ldr	r3, [r7, #12]
 80039a2:	4413      	add	r3, r2
 80039a4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80039ae:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80039b2:	d118      	bne.n	80039e6 <USB_DevInit+0x206>
    {
      if (i == 0U)
 80039b4:	693b      	ldr	r3, [r7, #16]
 80039b6:	2b00      	cmp	r3, #0
 80039b8:	d10a      	bne.n	80039d0 <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 80039ba:	693b      	ldr	r3, [r7, #16]
 80039bc:	015a      	lsls	r2, r3, #5
 80039be:	68fb      	ldr	r3, [r7, #12]
 80039c0:	4413      	add	r3, r2
 80039c2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80039c6:	461a      	mov	r2, r3
 80039c8:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80039cc:	6013      	str	r3, [r2, #0]
 80039ce:	e013      	b.n	80039f8 <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 80039d0:	693b      	ldr	r3, [r7, #16]
 80039d2:	015a      	lsls	r2, r3, #5
 80039d4:	68fb      	ldr	r3, [r7, #12]
 80039d6:	4413      	add	r3, r2
 80039d8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80039dc:	461a      	mov	r2, r3
 80039de:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80039e2:	6013      	str	r3, [r2, #0]
 80039e4:	e008      	b.n	80039f8 <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 80039e6:	693b      	ldr	r3, [r7, #16]
 80039e8:	015a      	lsls	r2, r3, #5
 80039ea:	68fb      	ldr	r3, [r7, #12]
 80039ec:	4413      	add	r3, r2
 80039ee:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80039f2:	461a      	mov	r2, r3
 80039f4:	2300      	movs	r3, #0
 80039f6:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 80039f8:	693b      	ldr	r3, [r7, #16]
 80039fa:	015a      	lsls	r2, r3, #5
 80039fc:	68fb      	ldr	r3, [r7, #12]
 80039fe:	4413      	add	r3, r2
 8003a00:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003a04:	461a      	mov	r2, r3
 8003a06:	2300      	movs	r3, #0
 8003a08:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8003a0a:	693b      	ldr	r3, [r7, #16]
 8003a0c:	015a      	lsls	r2, r3, #5
 8003a0e:	68fb      	ldr	r3, [r7, #12]
 8003a10:	4413      	add	r3, r2
 8003a12:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003a16:	461a      	mov	r2, r3
 8003a18:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8003a1c:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003a1e:	693b      	ldr	r3, [r7, #16]
 8003a20:	3301      	adds	r3, #1
 8003a22:	613b      	str	r3, [r7, #16]
 8003a24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a26:	693a      	ldr	r2, [r7, #16]
 8003a28:	429a      	cmp	r2, r3
 8003a2a:	d3b7      	bcc.n	800399c <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8003a2c:	68fb      	ldr	r3, [r7, #12]
 8003a2e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003a32:	691b      	ldr	r3, [r3, #16]
 8003a34:	68fa      	ldr	r2, [r7, #12]
 8003a36:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003a3a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003a3e:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	2200      	movs	r2, #0
 8003a44:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8003a4c:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8003a4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a50:	2b00      	cmp	r3, #0
 8003a52:	d105      	bne.n	8003a60 <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	699b      	ldr	r3, [r3, #24]
 8003a58:	f043 0210 	orr.w	r2, r3, #16
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	699a      	ldr	r2, [r3, #24]
 8003a64:	4b0f      	ldr	r3, [pc, #60]	; (8003aa4 <USB_DevInit+0x2c4>)
 8003a66:	4313      	orrs	r3, r2
 8003a68:	687a      	ldr	r2, [r7, #4]
 8003a6a:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8003a6c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003a6e:	2b00      	cmp	r3, #0
 8003a70:	d005      	beq.n	8003a7e <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	699b      	ldr	r3, [r3, #24]
 8003a76:	f043 0208 	orr.w	r2, r3, #8
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8003a7e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003a80:	2b01      	cmp	r3, #1
 8003a82:	d107      	bne.n	8003a94 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	699b      	ldr	r3, [r3, #24]
 8003a88:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8003a8c:	f043 0304 	orr.w	r3, r3, #4
 8003a90:	687a      	ldr	r2, [r7, #4]
 8003a92:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8003a94:	7dfb      	ldrb	r3, [r7, #23]
}
 8003a96:	4618      	mov	r0, r3
 8003a98:	3718      	adds	r7, #24
 8003a9a:	46bd      	mov	sp, r7
 8003a9c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8003aa0:	b004      	add	sp, #16
 8003aa2:	4770      	bx	lr
 8003aa4:	803c3800 	.word	0x803c3800

08003aa8 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8003aa8:	b480      	push	{r7}
 8003aaa:	b085      	sub	sp, #20
 8003aac:	af00      	add	r7, sp, #0
 8003aae:	6078      	str	r0, [r7, #4]
 8003ab0:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8003ab2:	2300      	movs	r3, #0
 8003ab4:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8003ab6:	68fb      	ldr	r3, [r7, #12]
 8003ab8:	3301      	adds	r3, #1
 8003aba:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8003abc:	68fb      	ldr	r3, [r7, #12]
 8003abe:	4a13      	ldr	r2, [pc, #76]	; (8003b0c <USB_FlushTxFifo+0x64>)
 8003ac0:	4293      	cmp	r3, r2
 8003ac2:	d901      	bls.n	8003ac8 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8003ac4:	2303      	movs	r3, #3
 8003ac6:	e01b      	b.n	8003b00 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	691b      	ldr	r3, [r3, #16]
 8003acc:	2b00      	cmp	r3, #0
 8003ace:	daf2      	bge.n	8003ab6 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8003ad0:	2300      	movs	r3, #0
 8003ad2:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8003ad4:	683b      	ldr	r3, [r7, #0]
 8003ad6:	019b      	lsls	r3, r3, #6
 8003ad8:	f043 0220 	orr.w	r2, r3, #32
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8003ae0:	68fb      	ldr	r3, [r7, #12]
 8003ae2:	3301      	adds	r3, #1
 8003ae4:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8003ae6:	68fb      	ldr	r3, [r7, #12]
 8003ae8:	4a08      	ldr	r2, [pc, #32]	; (8003b0c <USB_FlushTxFifo+0x64>)
 8003aea:	4293      	cmp	r3, r2
 8003aec:	d901      	bls.n	8003af2 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8003aee:	2303      	movs	r3, #3
 8003af0:	e006      	b.n	8003b00 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	691b      	ldr	r3, [r3, #16]
 8003af6:	f003 0320 	and.w	r3, r3, #32
 8003afa:	2b20      	cmp	r3, #32
 8003afc:	d0f0      	beq.n	8003ae0 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8003afe:	2300      	movs	r3, #0
}
 8003b00:	4618      	mov	r0, r3
 8003b02:	3714      	adds	r7, #20
 8003b04:	46bd      	mov	sp, r7
 8003b06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b0a:	4770      	bx	lr
 8003b0c:	00030d40 	.word	0x00030d40

08003b10 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8003b10:	b480      	push	{r7}
 8003b12:	b085      	sub	sp, #20
 8003b14:	af00      	add	r7, sp, #0
 8003b16:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8003b18:	2300      	movs	r3, #0
 8003b1a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8003b1c:	68fb      	ldr	r3, [r7, #12]
 8003b1e:	3301      	adds	r3, #1
 8003b20:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8003b22:	68fb      	ldr	r3, [r7, #12]
 8003b24:	4a11      	ldr	r2, [pc, #68]	; (8003b6c <USB_FlushRxFifo+0x5c>)
 8003b26:	4293      	cmp	r3, r2
 8003b28:	d901      	bls.n	8003b2e <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8003b2a:	2303      	movs	r3, #3
 8003b2c:	e018      	b.n	8003b60 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	691b      	ldr	r3, [r3, #16]
 8003b32:	2b00      	cmp	r3, #0
 8003b34:	daf2      	bge.n	8003b1c <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8003b36:	2300      	movs	r3, #0
 8003b38:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	2210      	movs	r2, #16
 8003b3e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8003b40:	68fb      	ldr	r3, [r7, #12]
 8003b42:	3301      	adds	r3, #1
 8003b44:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8003b46:	68fb      	ldr	r3, [r7, #12]
 8003b48:	4a08      	ldr	r2, [pc, #32]	; (8003b6c <USB_FlushRxFifo+0x5c>)
 8003b4a:	4293      	cmp	r3, r2
 8003b4c:	d901      	bls.n	8003b52 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8003b4e:	2303      	movs	r3, #3
 8003b50:	e006      	b.n	8003b60 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	691b      	ldr	r3, [r3, #16]
 8003b56:	f003 0310 	and.w	r3, r3, #16
 8003b5a:	2b10      	cmp	r3, #16
 8003b5c:	d0f0      	beq.n	8003b40 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8003b5e:	2300      	movs	r3, #0
}
 8003b60:	4618      	mov	r0, r3
 8003b62:	3714      	adds	r7, #20
 8003b64:	46bd      	mov	sp, r7
 8003b66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b6a:	4770      	bx	lr
 8003b6c:	00030d40 	.word	0x00030d40

08003b70 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8003b70:	b480      	push	{r7}
 8003b72:	b085      	sub	sp, #20
 8003b74:	af00      	add	r7, sp, #0
 8003b76:	6078      	str	r0, [r7, #4]
 8003b78:	460b      	mov	r3, r1
 8003b7a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8003b80:	68fb      	ldr	r3, [r7, #12]
 8003b82:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003b86:	681a      	ldr	r2, [r3, #0]
 8003b88:	78fb      	ldrb	r3, [r7, #3]
 8003b8a:	68f9      	ldr	r1, [r7, #12]
 8003b8c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003b90:	4313      	orrs	r3, r2
 8003b92:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8003b94:	2300      	movs	r3, #0
}
 8003b96:	4618      	mov	r0, r3
 8003b98:	3714      	adds	r7, #20
 8003b9a:	46bd      	mov	sp, r7
 8003b9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ba0:	4770      	bx	lr

08003ba2 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8003ba2:	b480      	push	{r7}
 8003ba4:	b085      	sub	sp, #20
 8003ba6:	af00      	add	r7, sp, #0
 8003ba8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8003bae:	68fb      	ldr	r3, [r7, #12]
 8003bb0:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	68fa      	ldr	r2, [r7, #12]
 8003bb8:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8003bbc:	f023 0303 	bic.w	r3, r3, #3
 8003bc0:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8003bc2:	68fb      	ldr	r3, [r7, #12]
 8003bc4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003bc8:	685b      	ldr	r3, [r3, #4]
 8003bca:	68fa      	ldr	r2, [r7, #12]
 8003bcc:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003bd0:	f043 0302 	orr.w	r3, r3, #2
 8003bd4:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8003bd6:	2300      	movs	r3, #0
}
 8003bd8:	4618      	mov	r0, r3
 8003bda:	3714      	adds	r7, #20
 8003bdc:	46bd      	mov	sp, r7
 8003bde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003be2:	4770      	bx	lr

08003be4 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8003be4:	b480      	push	{r7}
 8003be6:	b083      	sub	sp, #12
 8003be8:	af00      	add	r7, sp, #0
 8003bea:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	695b      	ldr	r3, [r3, #20]
 8003bf0:	f003 0301 	and.w	r3, r3, #1
}
 8003bf4:	4618      	mov	r0, r3
 8003bf6:	370c      	adds	r7, #12
 8003bf8:	46bd      	mov	sp, r7
 8003bfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bfe:	4770      	bx	lr

08003c00 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8003c00:	b480      	push	{r7}
 8003c02:	b085      	sub	sp, #20
 8003c04:	af00      	add	r7, sp, #0
 8003c06:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8003c08:	2300      	movs	r3, #0
 8003c0a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8003c0c:	68fb      	ldr	r3, [r7, #12]
 8003c0e:	3301      	adds	r3, #1
 8003c10:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8003c12:	68fb      	ldr	r3, [r7, #12]
 8003c14:	4a13      	ldr	r2, [pc, #76]	; (8003c64 <USB_CoreReset+0x64>)
 8003c16:	4293      	cmp	r3, r2
 8003c18:	d901      	bls.n	8003c1e <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8003c1a:	2303      	movs	r3, #3
 8003c1c:	e01b      	b.n	8003c56 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	691b      	ldr	r3, [r3, #16]
 8003c22:	2b00      	cmp	r3, #0
 8003c24:	daf2      	bge.n	8003c0c <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8003c26:	2300      	movs	r3, #0
 8003c28:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	691b      	ldr	r3, [r3, #16]
 8003c2e:	f043 0201 	orr.w	r2, r3, #1
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8003c36:	68fb      	ldr	r3, [r7, #12]
 8003c38:	3301      	adds	r3, #1
 8003c3a:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8003c3c:	68fb      	ldr	r3, [r7, #12]
 8003c3e:	4a09      	ldr	r2, [pc, #36]	; (8003c64 <USB_CoreReset+0x64>)
 8003c40:	4293      	cmp	r3, r2
 8003c42:	d901      	bls.n	8003c48 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8003c44:	2303      	movs	r3, #3
 8003c46:	e006      	b.n	8003c56 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	691b      	ldr	r3, [r3, #16]
 8003c4c:	f003 0301 	and.w	r3, r3, #1
 8003c50:	2b01      	cmp	r3, #1
 8003c52:	d0f0      	beq.n	8003c36 <USB_CoreReset+0x36>

  return HAL_OK;
 8003c54:	2300      	movs	r3, #0
}
 8003c56:	4618      	mov	r0, r3
 8003c58:	3714      	adds	r7, #20
 8003c5a:	46bd      	mov	sp, r7
 8003c5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c60:	4770      	bx	lr
 8003c62:	bf00      	nop
 8003c64:	00030d40 	.word	0x00030d40

08003c68 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8003c68:	b480      	push	{r7}
 8003c6a:	b085      	sub	sp, #20
 8003c6c:	af00      	add	r7, sp, #0
 8003c6e:	4603      	mov	r3, r0
 8003c70:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8003c72:	2300      	movs	r3, #0
 8003c74:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8003c76:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003c7a:	2b84      	cmp	r3, #132	; 0x84
 8003c7c:	d005      	beq.n	8003c8a <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8003c7e:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8003c82:	68fb      	ldr	r3, [r7, #12]
 8003c84:	4413      	add	r3, r2
 8003c86:	3303      	adds	r3, #3
 8003c88:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8003c8a:	68fb      	ldr	r3, [r7, #12]
}
 8003c8c:	4618      	mov	r0, r3
 8003c8e:	3714      	adds	r7, #20
 8003c90:	46bd      	mov	sp, r7
 8003c92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c96:	4770      	bx	lr

08003c98 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8003c98:	b580      	push	{r7, lr}
 8003c9a:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8003c9c:	f000 fade 	bl	800425c <vTaskStartScheduler>
  
  return osOK;
 8003ca0:	2300      	movs	r3, #0
}
 8003ca2:	4618      	mov	r0, r3
 8003ca4:	bd80      	pop	{r7, pc}

08003ca6 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8003ca6:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003ca8:	b089      	sub	sp, #36	; 0x24
 8003caa:	af04      	add	r7, sp, #16
 8003cac:	6078      	str	r0, [r7, #4]
 8003cae:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	695b      	ldr	r3, [r3, #20]
 8003cb4:	2b00      	cmp	r3, #0
 8003cb6:	d020      	beq.n	8003cfa <osThreadCreate+0x54>
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	699b      	ldr	r3, [r3, #24]
 8003cbc:	2b00      	cmp	r3, #0
 8003cbe:	d01c      	beq.n	8003cfa <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	685c      	ldr	r4, [r3, #4]
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	681d      	ldr	r5, [r3, #0]
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	691e      	ldr	r6, [r3, #16]
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8003cd2:	4618      	mov	r0, r3
 8003cd4:	f7ff ffc8 	bl	8003c68 <makeFreeRtosPriority>
 8003cd8:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	695b      	ldr	r3, [r3, #20]
 8003cde:	687a      	ldr	r2, [r7, #4]
 8003ce0:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8003ce2:	9202      	str	r2, [sp, #8]
 8003ce4:	9301      	str	r3, [sp, #4]
 8003ce6:	9100      	str	r1, [sp, #0]
 8003ce8:	683b      	ldr	r3, [r7, #0]
 8003cea:	4632      	mov	r2, r6
 8003cec:	4629      	mov	r1, r5
 8003cee:	4620      	mov	r0, r4
 8003cf0:	f000 f8ed 	bl	8003ece <xTaskCreateStatic>
 8003cf4:	4603      	mov	r3, r0
 8003cf6:	60fb      	str	r3, [r7, #12]
 8003cf8:	e01c      	b.n	8003d34 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	685c      	ldr	r4, [r3, #4]
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8003d06:	b29e      	uxth	r6, r3
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8003d0e:	4618      	mov	r0, r3
 8003d10:	f7ff ffaa 	bl	8003c68 <makeFreeRtosPriority>
 8003d14:	4602      	mov	r2, r0
 8003d16:	f107 030c 	add.w	r3, r7, #12
 8003d1a:	9301      	str	r3, [sp, #4]
 8003d1c:	9200      	str	r2, [sp, #0]
 8003d1e:	683b      	ldr	r3, [r7, #0]
 8003d20:	4632      	mov	r2, r6
 8003d22:	4629      	mov	r1, r5
 8003d24:	4620      	mov	r0, r4
 8003d26:	f000 f92f 	bl	8003f88 <xTaskCreate>
 8003d2a:	4603      	mov	r3, r0
 8003d2c:	2b01      	cmp	r3, #1
 8003d2e:	d001      	beq.n	8003d34 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8003d30:	2300      	movs	r3, #0
 8003d32:	e000      	b.n	8003d36 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8003d34:	68fb      	ldr	r3, [r7, #12]
}
 8003d36:	4618      	mov	r0, r3
 8003d38:	3714      	adds	r7, #20
 8003d3a:	46bd      	mov	sp, r7
 8003d3c:	bdf0      	pop	{r4, r5, r6, r7, pc}

08003d3e <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8003d3e:	b580      	push	{r7, lr}
 8003d40:	b084      	sub	sp, #16
 8003d42:	af00      	add	r7, sp, #0
 8003d44:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8003d4a:	68fb      	ldr	r3, [r7, #12]
 8003d4c:	2b00      	cmp	r3, #0
 8003d4e:	d001      	beq.n	8003d54 <osDelay+0x16>
 8003d50:	68fb      	ldr	r3, [r7, #12]
 8003d52:	e000      	b.n	8003d56 <osDelay+0x18>
 8003d54:	2301      	movs	r3, #1
 8003d56:	4618      	mov	r0, r3
 8003d58:	f000 fa4c 	bl	80041f4 <vTaskDelay>
  
  return osOK;
 8003d5c:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8003d5e:	4618      	mov	r0, r3
 8003d60:	3710      	adds	r7, #16
 8003d62:	46bd      	mov	sp, r7
 8003d64:	bd80      	pop	{r7, pc}

08003d66 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8003d66:	b480      	push	{r7}
 8003d68:	b083      	sub	sp, #12
 8003d6a:	af00      	add	r7, sp, #0
 8003d6c:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	f103 0208 	add.w	r2, r3, #8
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	f04f 32ff 	mov.w	r2, #4294967295
 8003d7e:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	f103 0208 	add.w	r2, r3, #8
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	f103 0208 	add.w	r2, r3, #8
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	2200      	movs	r2, #0
 8003d98:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8003d9a:	bf00      	nop
 8003d9c:	370c      	adds	r7, #12
 8003d9e:	46bd      	mov	sp, r7
 8003da0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003da4:	4770      	bx	lr

08003da6 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8003da6:	b480      	push	{r7}
 8003da8:	b083      	sub	sp, #12
 8003daa:	af00      	add	r7, sp, #0
 8003dac:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	2200      	movs	r2, #0
 8003db2:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8003db4:	bf00      	nop
 8003db6:	370c      	adds	r7, #12
 8003db8:	46bd      	mov	sp, r7
 8003dba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dbe:	4770      	bx	lr

08003dc0 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8003dc0:	b480      	push	{r7}
 8003dc2:	b085      	sub	sp, #20
 8003dc4:	af00      	add	r7, sp, #0
 8003dc6:	6078      	str	r0, [r7, #4]
 8003dc8:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	685b      	ldr	r3, [r3, #4]
 8003dce:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8003dd0:	683b      	ldr	r3, [r7, #0]
 8003dd2:	68fa      	ldr	r2, [r7, #12]
 8003dd4:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8003dd6:	68fb      	ldr	r3, [r7, #12]
 8003dd8:	689a      	ldr	r2, [r3, #8]
 8003dda:	683b      	ldr	r3, [r7, #0]
 8003ddc:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8003dde:	68fb      	ldr	r3, [r7, #12]
 8003de0:	689b      	ldr	r3, [r3, #8]
 8003de2:	683a      	ldr	r2, [r7, #0]
 8003de4:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8003de6:	68fb      	ldr	r3, [r7, #12]
 8003de8:	683a      	ldr	r2, [r7, #0]
 8003dea:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8003dec:	683b      	ldr	r3, [r7, #0]
 8003dee:	687a      	ldr	r2, [r7, #4]
 8003df0:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	1c5a      	adds	r2, r3, #1
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	601a      	str	r2, [r3, #0]
}
 8003dfc:	bf00      	nop
 8003dfe:	3714      	adds	r7, #20
 8003e00:	46bd      	mov	sp, r7
 8003e02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e06:	4770      	bx	lr

08003e08 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8003e08:	b480      	push	{r7}
 8003e0a:	b085      	sub	sp, #20
 8003e0c:	af00      	add	r7, sp, #0
 8003e0e:	6078      	str	r0, [r7, #4]
 8003e10:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8003e12:	683b      	ldr	r3, [r7, #0]
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8003e18:	68bb      	ldr	r3, [r7, #8]
 8003e1a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003e1e:	d103      	bne.n	8003e28 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	691b      	ldr	r3, [r3, #16]
 8003e24:	60fb      	str	r3, [r7, #12]
 8003e26:	e00c      	b.n	8003e42 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	3308      	adds	r3, #8
 8003e2c:	60fb      	str	r3, [r7, #12]
 8003e2e:	e002      	b.n	8003e36 <vListInsert+0x2e>
 8003e30:	68fb      	ldr	r3, [r7, #12]
 8003e32:	685b      	ldr	r3, [r3, #4]
 8003e34:	60fb      	str	r3, [r7, #12]
 8003e36:	68fb      	ldr	r3, [r7, #12]
 8003e38:	685b      	ldr	r3, [r3, #4]
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	68ba      	ldr	r2, [r7, #8]
 8003e3e:	429a      	cmp	r2, r3
 8003e40:	d2f6      	bcs.n	8003e30 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8003e42:	68fb      	ldr	r3, [r7, #12]
 8003e44:	685a      	ldr	r2, [r3, #4]
 8003e46:	683b      	ldr	r3, [r7, #0]
 8003e48:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8003e4a:	683b      	ldr	r3, [r7, #0]
 8003e4c:	685b      	ldr	r3, [r3, #4]
 8003e4e:	683a      	ldr	r2, [r7, #0]
 8003e50:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8003e52:	683b      	ldr	r3, [r7, #0]
 8003e54:	68fa      	ldr	r2, [r7, #12]
 8003e56:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8003e58:	68fb      	ldr	r3, [r7, #12]
 8003e5a:	683a      	ldr	r2, [r7, #0]
 8003e5c:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8003e5e:	683b      	ldr	r3, [r7, #0]
 8003e60:	687a      	ldr	r2, [r7, #4]
 8003e62:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	1c5a      	adds	r2, r3, #1
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	601a      	str	r2, [r3, #0]
}
 8003e6e:	bf00      	nop
 8003e70:	3714      	adds	r7, #20
 8003e72:	46bd      	mov	sp, r7
 8003e74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e78:	4770      	bx	lr

08003e7a <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8003e7a:	b480      	push	{r7}
 8003e7c:	b085      	sub	sp, #20
 8003e7e:	af00      	add	r7, sp, #0
 8003e80:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	691b      	ldr	r3, [r3, #16]
 8003e86:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	685b      	ldr	r3, [r3, #4]
 8003e8c:	687a      	ldr	r2, [r7, #4]
 8003e8e:	6892      	ldr	r2, [r2, #8]
 8003e90:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	689b      	ldr	r3, [r3, #8]
 8003e96:	687a      	ldr	r2, [r7, #4]
 8003e98:	6852      	ldr	r2, [r2, #4]
 8003e9a:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8003e9c:	68fb      	ldr	r3, [r7, #12]
 8003e9e:	685b      	ldr	r3, [r3, #4]
 8003ea0:	687a      	ldr	r2, [r7, #4]
 8003ea2:	429a      	cmp	r2, r3
 8003ea4:	d103      	bne.n	8003eae <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	689a      	ldr	r2, [r3, #8]
 8003eaa:	68fb      	ldr	r3, [r7, #12]
 8003eac:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	2200      	movs	r2, #0
 8003eb2:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8003eb4:	68fb      	ldr	r3, [r7, #12]
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	1e5a      	subs	r2, r3, #1
 8003eba:	68fb      	ldr	r3, [r7, #12]
 8003ebc:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8003ebe:	68fb      	ldr	r3, [r7, #12]
 8003ec0:	681b      	ldr	r3, [r3, #0]
}
 8003ec2:	4618      	mov	r0, r3
 8003ec4:	3714      	adds	r7, #20
 8003ec6:	46bd      	mov	sp, r7
 8003ec8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ecc:	4770      	bx	lr

08003ece <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8003ece:	b580      	push	{r7, lr}
 8003ed0:	b08e      	sub	sp, #56	; 0x38
 8003ed2:	af04      	add	r7, sp, #16
 8003ed4:	60f8      	str	r0, [r7, #12]
 8003ed6:	60b9      	str	r1, [r7, #8]
 8003ed8:	607a      	str	r2, [r7, #4]
 8003eda:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8003edc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003ede:	2b00      	cmp	r3, #0
 8003ee0:	d10a      	bne.n	8003ef8 <xTaskCreateStatic+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8003ee2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003ee6:	f383 8811 	msr	BASEPRI, r3
 8003eea:	f3bf 8f6f 	isb	sy
 8003eee:	f3bf 8f4f 	dsb	sy
 8003ef2:	623b      	str	r3, [r7, #32]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8003ef4:	bf00      	nop
 8003ef6:	e7fe      	b.n	8003ef6 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8003ef8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003efa:	2b00      	cmp	r3, #0
 8003efc:	d10a      	bne.n	8003f14 <xTaskCreateStatic+0x46>
	__asm volatile
 8003efe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f02:	f383 8811 	msr	BASEPRI, r3
 8003f06:	f3bf 8f6f 	isb	sy
 8003f0a:	f3bf 8f4f 	dsb	sy
 8003f0e:	61fb      	str	r3, [r7, #28]
}
 8003f10:	bf00      	nop
 8003f12:	e7fe      	b.n	8003f12 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8003f14:	2354      	movs	r3, #84	; 0x54
 8003f16:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8003f18:	693b      	ldr	r3, [r7, #16]
 8003f1a:	2b54      	cmp	r3, #84	; 0x54
 8003f1c:	d00a      	beq.n	8003f34 <xTaskCreateStatic+0x66>
	__asm volatile
 8003f1e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f22:	f383 8811 	msr	BASEPRI, r3
 8003f26:	f3bf 8f6f 	isb	sy
 8003f2a:	f3bf 8f4f 	dsb	sy
 8003f2e:	61bb      	str	r3, [r7, #24]
}
 8003f30:	bf00      	nop
 8003f32:	e7fe      	b.n	8003f32 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8003f34:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8003f36:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003f38:	2b00      	cmp	r3, #0
 8003f3a:	d01e      	beq.n	8003f7a <xTaskCreateStatic+0xac>
 8003f3c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003f3e:	2b00      	cmp	r3, #0
 8003f40:	d01b      	beq.n	8003f7a <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8003f42:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003f44:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8003f46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f48:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003f4a:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8003f4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f4e:	2202      	movs	r2, #2
 8003f50:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8003f54:	2300      	movs	r3, #0
 8003f56:	9303      	str	r3, [sp, #12]
 8003f58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f5a:	9302      	str	r3, [sp, #8]
 8003f5c:	f107 0314 	add.w	r3, r7, #20
 8003f60:	9301      	str	r3, [sp, #4]
 8003f62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f64:	9300      	str	r3, [sp, #0]
 8003f66:	683b      	ldr	r3, [r7, #0]
 8003f68:	687a      	ldr	r2, [r7, #4]
 8003f6a:	68b9      	ldr	r1, [r7, #8]
 8003f6c:	68f8      	ldr	r0, [r7, #12]
 8003f6e:	f000 f850 	bl	8004012 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8003f72:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8003f74:	f000 f8d4 	bl	8004120 <prvAddNewTaskToReadyList>
 8003f78:	e001      	b.n	8003f7e <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8003f7a:	2300      	movs	r3, #0
 8003f7c:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8003f7e:	697b      	ldr	r3, [r7, #20]
	}
 8003f80:	4618      	mov	r0, r3
 8003f82:	3728      	adds	r7, #40	; 0x28
 8003f84:	46bd      	mov	sp, r7
 8003f86:	bd80      	pop	{r7, pc}

08003f88 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8003f88:	b580      	push	{r7, lr}
 8003f8a:	b08c      	sub	sp, #48	; 0x30
 8003f8c:	af04      	add	r7, sp, #16
 8003f8e:	60f8      	str	r0, [r7, #12]
 8003f90:	60b9      	str	r1, [r7, #8]
 8003f92:	603b      	str	r3, [r7, #0]
 8003f94:	4613      	mov	r3, r2
 8003f96:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8003f98:	88fb      	ldrh	r3, [r7, #6]
 8003f9a:	009b      	lsls	r3, r3, #2
 8003f9c:	4618      	mov	r0, r3
 8003f9e:	f000 fee3 	bl	8004d68 <pvPortMalloc>
 8003fa2:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8003fa4:	697b      	ldr	r3, [r7, #20]
 8003fa6:	2b00      	cmp	r3, #0
 8003fa8:	d00e      	beq.n	8003fc8 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8003faa:	2054      	movs	r0, #84	; 0x54
 8003fac:	f000 fedc 	bl	8004d68 <pvPortMalloc>
 8003fb0:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8003fb2:	69fb      	ldr	r3, [r7, #28]
 8003fb4:	2b00      	cmp	r3, #0
 8003fb6:	d003      	beq.n	8003fc0 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8003fb8:	69fb      	ldr	r3, [r7, #28]
 8003fba:	697a      	ldr	r2, [r7, #20]
 8003fbc:	631a      	str	r2, [r3, #48]	; 0x30
 8003fbe:	e005      	b.n	8003fcc <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8003fc0:	6978      	ldr	r0, [r7, #20]
 8003fc2:	f000 ff9d 	bl	8004f00 <vPortFree>
 8003fc6:	e001      	b.n	8003fcc <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8003fc8:	2300      	movs	r3, #0
 8003fca:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8003fcc:	69fb      	ldr	r3, [r7, #28]
 8003fce:	2b00      	cmp	r3, #0
 8003fd0:	d017      	beq.n	8004002 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8003fd2:	69fb      	ldr	r3, [r7, #28]
 8003fd4:	2200      	movs	r2, #0
 8003fd6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8003fda:	88fa      	ldrh	r2, [r7, #6]
 8003fdc:	2300      	movs	r3, #0
 8003fde:	9303      	str	r3, [sp, #12]
 8003fe0:	69fb      	ldr	r3, [r7, #28]
 8003fe2:	9302      	str	r3, [sp, #8]
 8003fe4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003fe6:	9301      	str	r3, [sp, #4]
 8003fe8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003fea:	9300      	str	r3, [sp, #0]
 8003fec:	683b      	ldr	r3, [r7, #0]
 8003fee:	68b9      	ldr	r1, [r7, #8]
 8003ff0:	68f8      	ldr	r0, [r7, #12]
 8003ff2:	f000 f80e 	bl	8004012 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8003ff6:	69f8      	ldr	r0, [r7, #28]
 8003ff8:	f000 f892 	bl	8004120 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8003ffc:	2301      	movs	r3, #1
 8003ffe:	61bb      	str	r3, [r7, #24]
 8004000:	e002      	b.n	8004008 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8004002:	f04f 33ff 	mov.w	r3, #4294967295
 8004006:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8004008:	69bb      	ldr	r3, [r7, #24]
	}
 800400a:	4618      	mov	r0, r3
 800400c:	3720      	adds	r7, #32
 800400e:	46bd      	mov	sp, r7
 8004010:	bd80      	pop	{r7, pc}

08004012 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8004012:	b580      	push	{r7, lr}
 8004014:	b088      	sub	sp, #32
 8004016:	af00      	add	r7, sp, #0
 8004018:	60f8      	str	r0, [r7, #12]
 800401a:	60b9      	str	r1, [r7, #8]
 800401c:	607a      	str	r2, [r7, #4]
 800401e:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8004020:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004022:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800402a:	3b01      	subs	r3, #1
 800402c:	009b      	lsls	r3, r3, #2
 800402e:	4413      	add	r3, r2
 8004030:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8004032:	69bb      	ldr	r3, [r7, #24]
 8004034:	f023 0307 	bic.w	r3, r3, #7
 8004038:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800403a:	69bb      	ldr	r3, [r7, #24]
 800403c:	f003 0307 	and.w	r3, r3, #7
 8004040:	2b00      	cmp	r3, #0
 8004042:	d00a      	beq.n	800405a <prvInitialiseNewTask+0x48>
	__asm volatile
 8004044:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004048:	f383 8811 	msr	BASEPRI, r3
 800404c:	f3bf 8f6f 	isb	sy
 8004050:	f3bf 8f4f 	dsb	sy
 8004054:	617b      	str	r3, [r7, #20]
}
 8004056:	bf00      	nop
 8004058:	e7fe      	b.n	8004058 <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800405a:	68bb      	ldr	r3, [r7, #8]
 800405c:	2b00      	cmp	r3, #0
 800405e:	d01f      	beq.n	80040a0 <prvInitialiseNewTask+0x8e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8004060:	2300      	movs	r3, #0
 8004062:	61fb      	str	r3, [r7, #28]
 8004064:	e012      	b.n	800408c <prvInitialiseNewTask+0x7a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8004066:	68ba      	ldr	r2, [r7, #8]
 8004068:	69fb      	ldr	r3, [r7, #28]
 800406a:	4413      	add	r3, r2
 800406c:	7819      	ldrb	r1, [r3, #0]
 800406e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004070:	69fb      	ldr	r3, [r7, #28]
 8004072:	4413      	add	r3, r2
 8004074:	3334      	adds	r3, #52	; 0x34
 8004076:	460a      	mov	r2, r1
 8004078:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800407a:	68ba      	ldr	r2, [r7, #8]
 800407c:	69fb      	ldr	r3, [r7, #28]
 800407e:	4413      	add	r3, r2
 8004080:	781b      	ldrb	r3, [r3, #0]
 8004082:	2b00      	cmp	r3, #0
 8004084:	d006      	beq.n	8004094 <prvInitialiseNewTask+0x82>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8004086:	69fb      	ldr	r3, [r7, #28]
 8004088:	3301      	adds	r3, #1
 800408a:	61fb      	str	r3, [r7, #28]
 800408c:	69fb      	ldr	r3, [r7, #28]
 800408e:	2b0f      	cmp	r3, #15
 8004090:	d9e9      	bls.n	8004066 <prvInitialiseNewTask+0x54>
 8004092:	e000      	b.n	8004096 <prvInitialiseNewTask+0x84>
			{
				break;
 8004094:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8004096:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004098:	2200      	movs	r2, #0
 800409a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800409e:	e003      	b.n	80040a8 <prvInitialiseNewTask+0x96>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80040a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80040a2:	2200      	movs	r2, #0
 80040a4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80040a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80040aa:	2b06      	cmp	r3, #6
 80040ac:	d901      	bls.n	80040b2 <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80040ae:	2306      	movs	r3, #6
 80040b0:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80040b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80040b4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80040b6:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80040b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80040ba:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80040bc:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 80040be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80040c0:	2200      	movs	r2, #0
 80040c2:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80040c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80040c6:	3304      	adds	r3, #4
 80040c8:	4618      	mov	r0, r3
 80040ca:	f7ff fe6c 	bl	8003da6 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80040ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80040d0:	3318      	adds	r3, #24
 80040d2:	4618      	mov	r0, r3
 80040d4:	f7ff fe67 	bl	8003da6 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80040d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80040da:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80040dc:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80040de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80040e0:	f1c3 0207 	rsb	r2, r3, #7
 80040e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80040e6:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80040e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80040ea:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80040ec:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80040ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80040f0:	2200      	movs	r2, #0
 80040f2:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80040f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80040f6:	2200      	movs	r2, #0
 80040f8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80040fc:	683a      	ldr	r2, [r7, #0]
 80040fe:	68f9      	ldr	r1, [r7, #12]
 8004100:	69b8      	ldr	r0, [r7, #24]
 8004102:	f000 fc23 	bl	800494c <pxPortInitialiseStack>
 8004106:	4602      	mov	r2, r0
 8004108:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800410a:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800410c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800410e:	2b00      	cmp	r3, #0
 8004110:	d002      	beq.n	8004118 <prvInitialiseNewTask+0x106>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8004112:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004114:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004116:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004118:	bf00      	nop
 800411a:	3720      	adds	r7, #32
 800411c:	46bd      	mov	sp, r7
 800411e:	bd80      	pop	{r7, pc}

08004120 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8004120:	b580      	push	{r7, lr}
 8004122:	b082      	sub	sp, #8
 8004124:	af00      	add	r7, sp, #0
 8004126:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8004128:	f000 fd3c 	bl	8004ba4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800412c:	4b2a      	ldr	r3, [pc, #168]	; (80041d8 <prvAddNewTaskToReadyList+0xb8>)
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	3301      	adds	r3, #1
 8004132:	4a29      	ldr	r2, [pc, #164]	; (80041d8 <prvAddNewTaskToReadyList+0xb8>)
 8004134:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8004136:	4b29      	ldr	r3, [pc, #164]	; (80041dc <prvAddNewTaskToReadyList+0xbc>)
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	2b00      	cmp	r3, #0
 800413c:	d109      	bne.n	8004152 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800413e:	4a27      	ldr	r2, [pc, #156]	; (80041dc <prvAddNewTaskToReadyList+0xbc>)
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8004144:	4b24      	ldr	r3, [pc, #144]	; (80041d8 <prvAddNewTaskToReadyList+0xb8>)
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	2b01      	cmp	r3, #1
 800414a:	d110      	bne.n	800416e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800414c:	f000 fabc 	bl	80046c8 <prvInitialiseTaskLists>
 8004150:	e00d      	b.n	800416e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8004152:	4b23      	ldr	r3, [pc, #140]	; (80041e0 <prvAddNewTaskToReadyList+0xc0>)
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	2b00      	cmp	r3, #0
 8004158:	d109      	bne.n	800416e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800415a:	4b20      	ldr	r3, [pc, #128]	; (80041dc <prvAddNewTaskToReadyList+0xbc>)
 800415c:	681b      	ldr	r3, [r3, #0]
 800415e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004164:	429a      	cmp	r2, r3
 8004166:	d802      	bhi.n	800416e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8004168:	4a1c      	ldr	r2, [pc, #112]	; (80041dc <prvAddNewTaskToReadyList+0xbc>)
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800416e:	4b1d      	ldr	r3, [pc, #116]	; (80041e4 <prvAddNewTaskToReadyList+0xc4>)
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	3301      	adds	r3, #1
 8004174:	4a1b      	ldr	r2, [pc, #108]	; (80041e4 <prvAddNewTaskToReadyList+0xc4>)
 8004176:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800417c:	2201      	movs	r2, #1
 800417e:	409a      	lsls	r2, r3
 8004180:	4b19      	ldr	r3, [pc, #100]	; (80041e8 <prvAddNewTaskToReadyList+0xc8>)
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	4313      	orrs	r3, r2
 8004186:	4a18      	ldr	r2, [pc, #96]	; (80041e8 <prvAddNewTaskToReadyList+0xc8>)
 8004188:	6013      	str	r3, [r2, #0]
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800418e:	4613      	mov	r3, r2
 8004190:	009b      	lsls	r3, r3, #2
 8004192:	4413      	add	r3, r2
 8004194:	009b      	lsls	r3, r3, #2
 8004196:	4a15      	ldr	r2, [pc, #84]	; (80041ec <prvAddNewTaskToReadyList+0xcc>)
 8004198:	441a      	add	r2, r3
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	3304      	adds	r3, #4
 800419e:	4619      	mov	r1, r3
 80041a0:	4610      	mov	r0, r2
 80041a2:	f7ff fe0d 	bl	8003dc0 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80041a6:	f000 fd2d 	bl	8004c04 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80041aa:	4b0d      	ldr	r3, [pc, #52]	; (80041e0 <prvAddNewTaskToReadyList+0xc0>)
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	2b00      	cmp	r3, #0
 80041b0:	d00e      	beq.n	80041d0 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80041b2:	4b0a      	ldr	r3, [pc, #40]	; (80041dc <prvAddNewTaskToReadyList+0xbc>)
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80041bc:	429a      	cmp	r2, r3
 80041be:	d207      	bcs.n	80041d0 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80041c0:	4b0b      	ldr	r3, [pc, #44]	; (80041f0 <prvAddNewTaskToReadyList+0xd0>)
 80041c2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80041c6:	601a      	str	r2, [r3, #0]
 80041c8:	f3bf 8f4f 	dsb	sy
 80041cc:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80041d0:	bf00      	nop
 80041d2:	3708      	adds	r7, #8
 80041d4:	46bd      	mov	sp, r7
 80041d6:	bd80      	pop	{r7, pc}
 80041d8:	20000b78 	.word	0x20000b78
 80041dc:	20000a78 	.word	0x20000a78
 80041e0:	20000b84 	.word	0x20000b84
 80041e4:	20000b94 	.word	0x20000b94
 80041e8:	20000b80 	.word	0x20000b80
 80041ec:	20000a7c 	.word	0x20000a7c
 80041f0:	e000ed04 	.word	0xe000ed04

080041f4 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80041f4:	b580      	push	{r7, lr}
 80041f6:	b084      	sub	sp, #16
 80041f8:	af00      	add	r7, sp, #0
 80041fa:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80041fc:	2300      	movs	r3, #0
 80041fe:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	2b00      	cmp	r3, #0
 8004204:	d017      	beq.n	8004236 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8004206:	4b13      	ldr	r3, [pc, #76]	; (8004254 <vTaskDelay+0x60>)
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	2b00      	cmp	r3, #0
 800420c:	d00a      	beq.n	8004224 <vTaskDelay+0x30>
	__asm volatile
 800420e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004212:	f383 8811 	msr	BASEPRI, r3
 8004216:	f3bf 8f6f 	isb	sy
 800421a:	f3bf 8f4f 	dsb	sy
 800421e:	60bb      	str	r3, [r7, #8]
}
 8004220:	bf00      	nop
 8004222:	e7fe      	b.n	8004222 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8004224:	f000 f87a 	bl	800431c <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8004228:	2100      	movs	r1, #0
 800422a:	6878      	ldr	r0, [r7, #4]
 800422c:	f000 fb28 	bl	8004880 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8004230:	f000 f882 	bl	8004338 <xTaskResumeAll>
 8004234:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8004236:	68fb      	ldr	r3, [r7, #12]
 8004238:	2b00      	cmp	r3, #0
 800423a:	d107      	bne.n	800424c <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 800423c:	4b06      	ldr	r3, [pc, #24]	; (8004258 <vTaskDelay+0x64>)
 800423e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004242:	601a      	str	r2, [r3, #0]
 8004244:	f3bf 8f4f 	dsb	sy
 8004248:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800424c:	bf00      	nop
 800424e:	3710      	adds	r7, #16
 8004250:	46bd      	mov	sp, r7
 8004252:	bd80      	pop	{r7, pc}
 8004254:	20000ba0 	.word	0x20000ba0
 8004258:	e000ed04 	.word	0xe000ed04

0800425c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800425c:	b580      	push	{r7, lr}
 800425e:	b08a      	sub	sp, #40	; 0x28
 8004260:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8004262:	2300      	movs	r3, #0
 8004264:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8004266:	2300      	movs	r3, #0
 8004268:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800426a:	463a      	mov	r2, r7
 800426c:	1d39      	adds	r1, r7, #4
 800426e:	f107 0308 	add.w	r3, r7, #8
 8004272:	4618      	mov	r0, r3
 8004274:	f7fc f948 	bl	8000508 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8004278:	6839      	ldr	r1, [r7, #0]
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	68ba      	ldr	r2, [r7, #8]
 800427e:	9202      	str	r2, [sp, #8]
 8004280:	9301      	str	r3, [sp, #4]
 8004282:	2300      	movs	r3, #0
 8004284:	9300      	str	r3, [sp, #0]
 8004286:	2300      	movs	r3, #0
 8004288:	460a      	mov	r2, r1
 800428a:	491e      	ldr	r1, [pc, #120]	; (8004304 <vTaskStartScheduler+0xa8>)
 800428c:	481e      	ldr	r0, [pc, #120]	; (8004308 <vTaskStartScheduler+0xac>)
 800428e:	f7ff fe1e 	bl	8003ece <xTaskCreateStatic>
 8004292:	4603      	mov	r3, r0
 8004294:	4a1d      	ldr	r2, [pc, #116]	; (800430c <vTaskStartScheduler+0xb0>)
 8004296:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8004298:	4b1c      	ldr	r3, [pc, #112]	; (800430c <vTaskStartScheduler+0xb0>)
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	2b00      	cmp	r3, #0
 800429e:	d002      	beq.n	80042a6 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80042a0:	2301      	movs	r3, #1
 80042a2:	617b      	str	r3, [r7, #20]
 80042a4:	e001      	b.n	80042aa <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80042a6:	2300      	movs	r3, #0
 80042a8:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80042aa:	697b      	ldr	r3, [r7, #20]
 80042ac:	2b01      	cmp	r3, #1
 80042ae:	d116      	bne.n	80042de <vTaskStartScheduler+0x82>
	__asm volatile
 80042b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80042b4:	f383 8811 	msr	BASEPRI, r3
 80042b8:	f3bf 8f6f 	isb	sy
 80042bc:	f3bf 8f4f 	dsb	sy
 80042c0:	613b      	str	r3, [r7, #16]
}
 80042c2:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80042c4:	4b12      	ldr	r3, [pc, #72]	; (8004310 <vTaskStartScheduler+0xb4>)
 80042c6:	f04f 32ff 	mov.w	r2, #4294967295
 80042ca:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80042cc:	4b11      	ldr	r3, [pc, #68]	; (8004314 <vTaskStartScheduler+0xb8>)
 80042ce:	2201      	movs	r2, #1
 80042d0:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80042d2:	4b11      	ldr	r3, [pc, #68]	; (8004318 <vTaskStartScheduler+0xbc>)
 80042d4:	2200      	movs	r2, #0
 80042d6:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80042d8:	f000 fbc2 	bl	8004a60 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80042dc:	e00e      	b.n	80042fc <vTaskStartScheduler+0xa0>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80042de:	697b      	ldr	r3, [r7, #20]
 80042e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80042e4:	d10a      	bne.n	80042fc <vTaskStartScheduler+0xa0>
	__asm volatile
 80042e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80042ea:	f383 8811 	msr	BASEPRI, r3
 80042ee:	f3bf 8f6f 	isb	sy
 80042f2:	f3bf 8f4f 	dsb	sy
 80042f6:	60fb      	str	r3, [r7, #12]
}
 80042f8:	bf00      	nop
 80042fa:	e7fe      	b.n	80042fa <vTaskStartScheduler+0x9e>
}
 80042fc:	bf00      	nop
 80042fe:	3718      	adds	r7, #24
 8004300:	46bd      	mov	sp, r7
 8004302:	bd80      	pop	{r7, pc}
 8004304:	08005218 	.word	0x08005218
 8004308:	08004699 	.word	0x08004699
 800430c:	20000b9c 	.word	0x20000b9c
 8004310:	20000b98 	.word	0x20000b98
 8004314:	20000b84 	.word	0x20000b84
 8004318:	20000b7c 	.word	0x20000b7c

0800431c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800431c:	b480      	push	{r7}
 800431e:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8004320:	4b04      	ldr	r3, [pc, #16]	; (8004334 <vTaskSuspendAll+0x18>)
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	3301      	adds	r3, #1
 8004326:	4a03      	ldr	r2, [pc, #12]	; (8004334 <vTaskSuspendAll+0x18>)
 8004328:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800432a:	bf00      	nop
 800432c:	46bd      	mov	sp, r7
 800432e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004332:	4770      	bx	lr
 8004334:	20000ba0 	.word	0x20000ba0

08004338 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8004338:	b580      	push	{r7, lr}
 800433a:	b084      	sub	sp, #16
 800433c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800433e:	2300      	movs	r3, #0
 8004340:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8004342:	2300      	movs	r3, #0
 8004344:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8004346:	4b41      	ldr	r3, [pc, #260]	; (800444c <xTaskResumeAll+0x114>)
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	2b00      	cmp	r3, #0
 800434c:	d10a      	bne.n	8004364 <xTaskResumeAll+0x2c>
	__asm volatile
 800434e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004352:	f383 8811 	msr	BASEPRI, r3
 8004356:	f3bf 8f6f 	isb	sy
 800435a:	f3bf 8f4f 	dsb	sy
 800435e:	603b      	str	r3, [r7, #0]
}
 8004360:	bf00      	nop
 8004362:	e7fe      	b.n	8004362 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8004364:	f000 fc1e 	bl	8004ba4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8004368:	4b38      	ldr	r3, [pc, #224]	; (800444c <xTaskResumeAll+0x114>)
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	3b01      	subs	r3, #1
 800436e:	4a37      	ldr	r2, [pc, #220]	; (800444c <xTaskResumeAll+0x114>)
 8004370:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004372:	4b36      	ldr	r3, [pc, #216]	; (800444c <xTaskResumeAll+0x114>)
 8004374:	681b      	ldr	r3, [r3, #0]
 8004376:	2b00      	cmp	r3, #0
 8004378:	d161      	bne.n	800443e <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800437a:	4b35      	ldr	r3, [pc, #212]	; (8004450 <xTaskResumeAll+0x118>)
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	2b00      	cmp	r3, #0
 8004380:	d05d      	beq.n	800443e <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8004382:	e02e      	b.n	80043e2 <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004384:	4b33      	ldr	r3, [pc, #204]	; (8004454 <xTaskResumeAll+0x11c>)
 8004386:	68db      	ldr	r3, [r3, #12]
 8004388:	68db      	ldr	r3, [r3, #12]
 800438a:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800438c:	68fb      	ldr	r3, [r7, #12]
 800438e:	3318      	adds	r3, #24
 8004390:	4618      	mov	r0, r3
 8004392:	f7ff fd72 	bl	8003e7a <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004396:	68fb      	ldr	r3, [r7, #12]
 8004398:	3304      	adds	r3, #4
 800439a:	4618      	mov	r0, r3
 800439c:	f7ff fd6d 	bl	8003e7a <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80043a0:	68fb      	ldr	r3, [r7, #12]
 80043a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80043a4:	2201      	movs	r2, #1
 80043a6:	409a      	lsls	r2, r3
 80043a8:	4b2b      	ldr	r3, [pc, #172]	; (8004458 <xTaskResumeAll+0x120>)
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	4313      	orrs	r3, r2
 80043ae:	4a2a      	ldr	r2, [pc, #168]	; (8004458 <xTaskResumeAll+0x120>)
 80043b0:	6013      	str	r3, [r2, #0]
 80043b2:	68fb      	ldr	r3, [r7, #12]
 80043b4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80043b6:	4613      	mov	r3, r2
 80043b8:	009b      	lsls	r3, r3, #2
 80043ba:	4413      	add	r3, r2
 80043bc:	009b      	lsls	r3, r3, #2
 80043be:	4a27      	ldr	r2, [pc, #156]	; (800445c <xTaskResumeAll+0x124>)
 80043c0:	441a      	add	r2, r3
 80043c2:	68fb      	ldr	r3, [r7, #12]
 80043c4:	3304      	adds	r3, #4
 80043c6:	4619      	mov	r1, r3
 80043c8:	4610      	mov	r0, r2
 80043ca:	f7ff fcf9 	bl	8003dc0 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80043ce:	68fb      	ldr	r3, [r7, #12]
 80043d0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80043d2:	4b23      	ldr	r3, [pc, #140]	; (8004460 <xTaskResumeAll+0x128>)
 80043d4:	681b      	ldr	r3, [r3, #0]
 80043d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80043d8:	429a      	cmp	r2, r3
 80043da:	d302      	bcc.n	80043e2 <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 80043dc:	4b21      	ldr	r3, [pc, #132]	; (8004464 <xTaskResumeAll+0x12c>)
 80043de:	2201      	movs	r2, #1
 80043e0:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80043e2:	4b1c      	ldr	r3, [pc, #112]	; (8004454 <xTaskResumeAll+0x11c>)
 80043e4:	681b      	ldr	r3, [r3, #0]
 80043e6:	2b00      	cmp	r3, #0
 80043e8:	d1cc      	bne.n	8004384 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80043ea:	68fb      	ldr	r3, [r7, #12]
 80043ec:	2b00      	cmp	r3, #0
 80043ee:	d001      	beq.n	80043f4 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80043f0:	f000 fa08 	bl	8004804 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 80043f4:	4b1c      	ldr	r3, [pc, #112]	; (8004468 <xTaskResumeAll+0x130>)
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	2b00      	cmp	r3, #0
 80043fe:	d010      	beq.n	8004422 <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8004400:	f000 f836 	bl	8004470 <xTaskIncrementTick>
 8004404:	4603      	mov	r3, r0
 8004406:	2b00      	cmp	r3, #0
 8004408:	d002      	beq.n	8004410 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 800440a:	4b16      	ldr	r3, [pc, #88]	; (8004464 <xTaskResumeAll+0x12c>)
 800440c:	2201      	movs	r2, #1
 800440e:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	3b01      	subs	r3, #1
 8004414:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	2b00      	cmp	r3, #0
 800441a:	d1f1      	bne.n	8004400 <xTaskResumeAll+0xc8>

						xPendedTicks = 0;
 800441c:	4b12      	ldr	r3, [pc, #72]	; (8004468 <xTaskResumeAll+0x130>)
 800441e:	2200      	movs	r2, #0
 8004420:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8004422:	4b10      	ldr	r3, [pc, #64]	; (8004464 <xTaskResumeAll+0x12c>)
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	2b00      	cmp	r3, #0
 8004428:	d009      	beq.n	800443e <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800442a:	2301      	movs	r3, #1
 800442c:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800442e:	4b0f      	ldr	r3, [pc, #60]	; (800446c <xTaskResumeAll+0x134>)
 8004430:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004434:	601a      	str	r2, [r3, #0]
 8004436:	f3bf 8f4f 	dsb	sy
 800443a:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800443e:	f000 fbe1 	bl	8004c04 <vPortExitCritical>

	return xAlreadyYielded;
 8004442:	68bb      	ldr	r3, [r7, #8]
}
 8004444:	4618      	mov	r0, r3
 8004446:	3710      	adds	r7, #16
 8004448:	46bd      	mov	sp, r7
 800444a:	bd80      	pop	{r7, pc}
 800444c:	20000ba0 	.word	0x20000ba0
 8004450:	20000b78 	.word	0x20000b78
 8004454:	20000b38 	.word	0x20000b38
 8004458:	20000b80 	.word	0x20000b80
 800445c:	20000a7c 	.word	0x20000a7c
 8004460:	20000a78 	.word	0x20000a78
 8004464:	20000b8c 	.word	0x20000b8c
 8004468:	20000b88 	.word	0x20000b88
 800446c:	e000ed04 	.word	0xe000ed04

08004470 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8004470:	b580      	push	{r7, lr}
 8004472:	b086      	sub	sp, #24
 8004474:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8004476:	2300      	movs	r3, #0
 8004478:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800447a:	4b4e      	ldr	r3, [pc, #312]	; (80045b4 <xTaskIncrementTick+0x144>)
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	2b00      	cmp	r3, #0
 8004480:	f040 808e 	bne.w	80045a0 <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8004484:	4b4c      	ldr	r3, [pc, #304]	; (80045b8 <xTaskIncrementTick+0x148>)
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	3301      	adds	r3, #1
 800448a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800448c:	4a4a      	ldr	r2, [pc, #296]	; (80045b8 <xTaskIncrementTick+0x148>)
 800448e:	693b      	ldr	r3, [r7, #16]
 8004490:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8004492:	693b      	ldr	r3, [r7, #16]
 8004494:	2b00      	cmp	r3, #0
 8004496:	d120      	bne.n	80044da <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8004498:	4b48      	ldr	r3, [pc, #288]	; (80045bc <xTaskIncrementTick+0x14c>)
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	681b      	ldr	r3, [r3, #0]
 800449e:	2b00      	cmp	r3, #0
 80044a0:	d00a      	beq.n	80044b8 <xTaskIncrementTick+0x48>
	__asm volatile
 80044a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80044a6:	f383 8811 	msr	BASEPRI, r3
 80044aa:	f3bf 8f6f 	isb	sy
 80044ae:	f3bf 8f4f 	dsb	sy
 80044b2:	603b      	str	r3, [r7, #0]
}
 80044b4:	bf00      	nop
 80044b6:	e7fe      	b.n	80044b6 <xTaskIncrementTick+0x46>
 80044b8:	4b40      	ldr	r3, [pc, #256]	; (80045bc <xTaskIncrementTick+0x14c>)
 80044ba:	681b      	ldr	r3, [r3, #0]
 80044bc:	60fb      	str	r3, [r7, #12]
 80044be:	4b40      	ldr	r3, [pc, #256]	; (80045c0 <xTaskIncrementTick+0x150>)
 80044c0:	681b      	ldr	r3, [r3, #0]
 80044c2:	4a3e      	ldr	r2, [pc, #248]	; (80045bc <xTaskIncrementTick+0x14c>)
 80044c4:	6013      	str	r3, [r2, #0]
 80044c6:	4a3e      	ldr	r2, [pc, #248]	; (80045c0 <xTaskIncrementTick+0x150>)
 80044c8:	68fb      	ldr	r3, [r7, #12]
 80044ca:	6013      	str	r3, [r2, #0]
 80044cc:	4b3d      	ldr	r3, [pc, #244]	; (80045c4 <xTaskIncrementTick+0x154>)
 80044ce:	681b      	ldr	r3, [r3, #0]
 80044d0:	3301      	adds	r3, #1
 80044d2:	4a3c      	ldr	r2, [pc, #240]	; (80045c4 <xTaskIncrementTick+0x154>)
 80044d4:	6013      	str	r3, [r2, #0]
 80044d6:	f000 f995 	bl	8004804 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80044da:	4b3b      	ldr	r3, [pc, #236]	; (80045c8 <xTaskIncrementTick+0x158>)
 80044dc:	681b      	ldr	r3, [r3, #0]
 80044de:	693a      	ldr	r2, [r7, #16]
 80044e0:	429a      	cmp	r2, r3
 80044e2:	d348      	bcc.n	8004576 <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80044e4:	4b35      	ldr	r3, [pc, #212]	; (80045bc <xTaskIncrementTick+0x14c>)
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	681b      	ldr	r3, [r3, #0]
 80044ea:	2b00      	cmp	r3, #0
 80044ec:	d104      	bne.n	80044f8 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80044ee:	4b36      	ldr	r3, [pc, #216]	; (80045c8 <xTaskIncrementTick+0x158>)
 80044f0:	f04f 32ff 	mov.w	r2, #4294967295
 80044f4:	601a      	str	r2, [r3, #0]
					break;
 80044f6:	e03e      	b.n	8004576 <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80044f8:	4b30      	ldr	r3, [pc, #192]	; (80045bc <xTaskIncrementTick+0x14c>)
 80044fa:	681b      	ldr	r3, [r3, #0]
 80044fc:	68db      	ldr	r3, [r3, #12]
 80044fe:	68db      	ldr	r3, [r3, #12]
 8004500:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8004502:	68bb      	ldr	r3, [r7, #8]
 8004504:	685b      	ldr	r3, [r3, #4]
 8004506:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8004508:	693a      	ldr	r2, [r7, #16]
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	429a      	cmp	r2, r3
 800450e:	d203      	bcs.n	8004518 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8004510:	4a2d      	ldr	r2, [pc, #180]	; (80045c8 <xTaskIncrementTick+0x158>)
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8004516:	e02e      	b.n	8004576 <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004518:	68bb      	ldr	r3, [r7, #8]
 800451a:	3304      	adds	r3, #4
 800451c:	4618      	mov	r0, r3
 800451e:	f7ff fcac 	bl	8003e7a <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8004522:	68bb      	ldr	r3, [r7, #8]
 8004524:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004526:	2b00      	cmp	r3, #0
 8004528:	d004      	beq.n	8004534 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800452a:	68bb      	ldr	r3, [r7, #8]
 800452c:	3318      	adds	r3, #24
 800452e:	4618      	mov	r0, r3
 8004530:	f7ff fca3 	bl	8003e7a <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8004534:	68bb      	ldr	r3, [r7, #8]
 8004536:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004538:	2201      	movs	r2, #1
 800453a:	409a      	lsls	r2, r3
 800453c:	4b23      	ldr	r3, [pc, #140]	; (80045cc <xTaskIncrementTick+0x15c>)
 800453e:	681b      	ldr	r3, [r3, #0]
 8004540:	4313      	orrs	r3, r2
 8004542:	4a22      	ldr	r2, [pc, #136]	; (80045cc <xTaskIncrementTick+0x15c>)
 8004544:	6013      	str	r3, [r2, #0]
 8004546:	68bb      	ldr	r3, [r7, #8]
 8004548:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800454a:	4613      	mov	r3, r2
 800454c:	009b      	lsls	r3, r3, #2
 800454e:	4413      	add	r3, r2
 8004550:	009b      	lsls	r3, r3, #2
 8004552:	4a1f      	ldr	r2, [pc, #124]	; (80045d0 <xTaskIncrementTick+0x160>)
 8004554:	441a      	add	r2, r3
 8004556:	68bb      	ldr	r3, [r7, #8]
 8004558:	3304      	adds	r3, #4
 800455a:	4619      	mov	r1, r3
 800455c:	4610      	mov	r0, r2
 800455e:	f7ff fc2f 	bl	8003dc0 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8004562:	68bb      	ldr	r3, [r7, #8]
 8004564:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004566:	4b1b      	ldr	r3, [pc, #108]	; (80045d4 <xTaskIncrementTick+0x164>)
 8004568:	681b      	ldr	r3, [r3, #0]
 800456a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800456c:	429a      	cmp	r2, r3
 800456e:	d3b9      	bcc.n	80044e4 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8004570:	2301      	movs	r3, #1
 8004572:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004574:	e7b6      	b.n	80044e4 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8004576:	4b17      	ldr	r3, [pc, #92]	; (80045d4 <xTaskIncrementTick+0x164>)
 8004578:	681b      	ldr	r3, [r3, #0]
 800457a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800457c:	4914      	ldr	r1, [pc, #80]	; (80045d0 <xTaskIncrementTick+0x160>)
 800457e:	4613      	mov	r3, r2
 8004580:	009b      	lsls	r3, r3, #2
 8004582:	4413      	add	r3, r2
 8004584:	009b      	lsls	r3, r3, #2
 8004586:	440b      	add	r3, r1
 8004588:	681b      	ldr	r3, [r3, #0]
 800458a:	2b01      	cmp	r3, #1
 800458c:	d901      	bls.n	8004592 <xTaskIncrementTick+0x122>
			{
				xSwitchRequired = pdTRUE;
 800458e:	2301      	movs	r3, #1
 8004590:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8004592:	4b11      	ldr	r3, [pc, #68]	; (80045d8 <xTaskIncrementTick+0x168>)
 8004594:	681b      	ldr	r3, [r3, #0]
 8004596:	2b00      	cmp	r3, #0
 8004598:	d007      	beq.n	80045aa <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 800459a:	2301      	movs	r3, #1
 800459c:	617b      	str	r3, [r7, #20]
 800459e:	e004      	b.n	80045aa <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 80045a0:	4b0e      	ldr	r3, [pc, #56]	; (80045dc <xTaskIncrementTick+0x16c>)
 80045a2:	681b      	ldr	r3, [r3, #0]
 80045a4:	3301      	adds	r3, #1
 80045a6:	4a0d      	ldr	r2, [pc, #52]	; (80045dc <xTaskIncrementTick+0x16c>)
 80045a8:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 80045aa:	697b      	ldr	r3, [r7, #20]
}
 80045ac:	4618      	mov	r0, r3
 80045ae:	3718      	adds	r7, #24
 80045b0:	46bd      	mov	sp, r7
 80045b2:	bd80      	pop	{r7, pc}
 80045b4:	20000ba0 	.word	0x20000ba0
 80045b8:	20000b7c 	.word	0x20000b7c
 80045bc:	20000b30 	.word	0x20000b30
 80045c0:	20000b34 	.word	0x20000b34
 80045c4:	20000b90 	.word	0x20000b90
 80045c8:	20000b98 	.word	0x20000b98
 80045cc:	20000b80 	.word	0x20000b80
 80045d0:	20000a7c 	.word	0x20000a7c
 80045d4:	20000a78 	.word	0x20000a78
 80045d8:	20000b8c 	.word	0x20000b8c
 80045dc:	20000b88 	.word	0x20000b88

080045e0 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80045e0:	b480      	push	{r7}
 80045e2:	b087      	sub	sp, #28
 80045e4:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80045e6:	4b27      	ldr	r3, [pc, #156]	; (8004684 <vTaskSwitchContext+0xa4>)
 80045e8:	681b      	ldr	r3, [r3, #0]
 80045ea:	2b00      	cmp	r3, #0
 80045ec:	d003      	beq.n	80045f6 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80045ee:	4b26      	ldr	r3, [pc, #152]	; (8004688 <vTaskSwitchContext+0xa8>)
 80045f0:	2201      	movs	r2, #1
 80045f2:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80045f4:	e03f      	b.n	8004676 <vTaskSwitchContext+0x96>
		xYieldPending = pdFALSE;
 80045f6:	4b24      	ldr	r3, [pc, #144]	; (8004688 <vTaskSwitchContext+0xa8>)
 80045f8:	2200      	movs	r2, #0
 80045fa:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80045fc:	4b23      	ldr	r3, [pc, #140]	; (800468c <vTaskSwitchContext+0xac>)
 80045fe:	681b      	ldr	r3, [r3, #0]
 8004600:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8004602:	68fb      	ldr	r3, [r7, #12]
 8004604:	fab3 f383 	clz	r3, r3
 8004608:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 800460a:	7afb      	ldrb	r3, [r7, #11]
 800460c:	f1c3 031f 	rsb	r3, r3, #31
 8004610:	617b      	str	r3, [r7, #20]
 8004612:	491f      	ldr	r1, [pc, #124]	; (8004690 <vTaskSwitchContext+0xb0>)
 8004614:	697a      	ldr	r2, [r7, #20]
 8004616:	4613      	mov	r3, r2
 8004618:	009b      	lsls	r3, r3, #2
 800461a:	4413      	add	r3, r2
 800461c:	009b      	lsls	r3, r3, #2
 800461e:	440b      	add	r3, r1
 8004620:	681b      	ldr	r3, [r3, #0]
 8004622:	2b00      	cmp	r3, #0
 8004624:	d10a      	bne.n	800463c <vTaskSwitchContext+0x5c>
	__asm volatile
 8004626:	f04f 0350 	mov.w	r3, #80	; 0x50
 800462a:	f383 8811 	msr	BASEPRI, r3
 800462e:	f3bf 8f6f 	isb	sy
 8004632:	f3bf 8f4f 	dsb	sy
 8004636:	607b      	str	r3, [r7, #4]
}
 8004638:	bf00      	nop
 800463a:	e7fe      	b.n	800463a <vTaskSwitchContext+0x5a>
 800463c:	697a      	ldr	r2, [r7, #20]
 800463e:	4613      	mov	r3, r2
 8004640:	009b      	lsls	r3, r3, #2
 8004642:	4413      	add	r3, r2
 8004644:	009b      	lsls	r3, r3, #2
 8004646:	4a12      	ldr	r2, [pc, #72]	; (8004690 <vTaskSwitchContext+0xb0>)
 8004648:	4413      	add	r3, r2
 800464a:	613b      	str	r3, [r7, #16]
 800464c:	693b      	ldr	r3, [r7, #16]
 800464e:	685b      	ldr	r3, [r3, #4]
 8004650:	685a      	ldr	r2, [r3, #4]
 8004652:	693b      	ldr	r3, [r7, #16]
 8004654:	605a      	str	r2, [r3, #4]
 8004656:	693b      	ldr	r3, [r7, #16]
 8004658:	685a      	ldr	r2, [r3, #4]
 800465a:	693b      	ldr	r3, [r7, #16]
 800465c:	3308      	adds	r3, #8
 800465e:	429a      	cmp	r2, r3
 8004660:	d104      	bne.n	800466c <vTaskSwitchContext+0x8c>
 8004662:	693b      	ldr	r3, [r7, #16]
 8004664:	685b      	ldr	r3, [r3, #4]
 8004666:	685a      	ldr	r2, [r3, #4]
 8004668:	693b      	ldr	r3, [r7, #16]
 800466a:	605a      	str	r2, [r3, #4]
 800466c:	693b      	ldr	r3, [r7, #16]
 800466e:	685b      	ldr	r3, [r3, #4]
 8004670:	68db      	ldr	r3, [r3, #12]
 8004672:	4a08      	ldr	r2, [pc, #32]	; (8004694 <vTaskSwitchContext+0xb4>)
 8004674:	6013      	str	r3, [r2, #0]
}
 8004676:	bf00      	nop
 8004678:	371c      	adds	r7, #28
 800467a:	46bd      	mov	sp, r7
 800467c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004680:	4770      	bx	lr
 8004682:	bf00      	nop
 8004684:	20000ba0 	.word	0x20000ba0
 8004688:	20000b8c 	.word	0x20000b8c
 800468c:	20000b80 	.word	0x20000b80
 8004690:	20000a7c 	.word	0x20000a7c
 8004694:	20000a78 	.word	0x20000a78

08004698 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8004698:	b580      	push	{r7, lr}
 800469a:	b082      	sub	sp, #8
 800469c:	af00      	add	r7, sp, #0
 800469e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80046a0:	f000 f852 	bl	8004748 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80046a4:	4b06      	ldr	r3, [pc, #24]	; (80046c0 <prvIdleTask+0x28>)
 80046a6:	681b      	ldr	r3, [r3, #0]
 80046a8:	2b01      	cmp	r3, #1
 80046aa:	d9f9      	bls.n	80046a0 <prvIdleTask+0x8>
			{
				taskYIELD();
 80046ac:	4b05      	ldr	r3, [pc, #20]	; (80046c4 <prvIdleTask+0x2c>)
 80046ae:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80046b2:	601a      	str	r2, [r3, #0]
 80046b4:	f3bf 8f4f 	dsb	sy
 80046b8:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80046bc:	e7f0      	b.n	80046a0 <prvIdleTask+0x8>
 80046be:	bf00      	nop
 80046c0:	20000a7c 	.word	0x20000a7c
 80046c4:	e000ed04 	.word	0xe000ed04

080046c8 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80046c8:	b580      	push	{r7, lr}
 80046ca:	b082      	sub	sp, #8
 80046cc:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80046ce:	2300      	movs	r3, #0
 80046d0:	607b      	str	r3, [r7, #4]
 80046d2:	e00c      	b.n	80046ee <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80046d4:	687a      	ldr	r2, [r7, #4]
 80046d6:	4613      	mov	r3, r2
 80046d8:	009b      	lsls	r3, r3, #2
 80046da:	4413      	add	r3, r2
 80046dc:	009b      	lsls	r3, r3, #2
 80046de:	4a12      	ldr	r2, [pc, #72]	; (8004728 <prvInitialiseTaskLists+0x60>)
 80046e0:	4413      	add	r3, r2
 80046e2:	4618      	mov	r0, r3
 80046e4:	f7ff fb3f 	bl	8003d66 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	3301      	adds	r3, #1
 80046ec:	607b      	str	r3, [r7, #4]
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	2b06      	cmp	r3, #6
 80046f2:	d9ef      	bls.n	80046d4 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80046f4:	480d      	ldr	r0, [pc, #52]	; (800472c <prvInitialiseTaskLists+0x64>)
 80046f6:	f7ff fb36 	bl	8003d66 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80046fa:	480d      	ldr	r0, [pc, #52]	; (8004730 <prvInitialiseTaskLists+0x68>)
 80046fc:	f7ff fb33 	bl	8003d66 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8004700:	480c      	ldr	r0, [pc, #48]	; (8004734 <prvInitialiseTaskLists+0x6c>)
 8004702:	f7ff fb30 	bl	8003d66 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8004706:	480c      	ldr	r0, [pc, #48]	; (8004738 <prvInitialiseTaskLists+0x70>)
 8004708:	f7ff fb2d 	bl	8003d66 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800470c:	480b      	ldr	r0, [pc, #44]	; (800473c <prvInitialiseTaskLists+0x74>)
 800470e:	f7ff fb2a 	bl	8003d66 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8004712:	4b0b      	ldr	r3, [pc, #44]	; (8004740 <prvInitialiseTaskLists+0x78>)
 8004714:	4a05      	ldr	r2, [pc, #20]	; (800472c <prvInitialiseTaskLists+0x64>)
 8004716:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8004718:	4b0a      	ldr	r3, [pc, #40]	; (8004744 <prvInitialiseTaskLists+0x7c>)
 800471a:	4a05      	ldr	r2, [pc, #20]	; (8004730 <prvInitialiseTaskLists+0x68>)
 800471c:	601a      	str	r2, [r3, #0]
}
 800471e:	bf00      	nop
 8004720:	3708      	adds	r7, #8
 8004722:	46bd      	mov	sp, r7
 8004724:	bd80      	pop	{r7, pc}
 8004726:	bf00      	nop
 8004728:	20000a7c 	.word	0x20000a7c
 800472c:	20000b08 	.word	0x20000b08
 8004730:	20000b1c 	.word	0x20000b1c
 8004734:	20000b38 	.word	0x20000b38
 8004738:	20000b4c 	.word	0x20000b4c
 800473c:	20000b64 	.word	0x20000b64
 8004740:	20000b30 	.word	0x20000b30
 8004744:	20000b34 	.word	0x20000b34

08004748 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8004748:	b580      	push	{r7, lr}
 800474a:	b082      	sub	sp, #8
 800474c:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800474e:	e019      	b.n	8004784 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8004750:	f000 fa28 	bl	8004ba4 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004754:	4b10      	ldr	r3, [pc, #64]	; (8004798 <prvCheckTasksWaitingTermination+0x50>)
 8004756:	68db      	ldr	r3, [r3, #12]
 8004758:	68db      	ldr	r3, [r3, #12]
 800475a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	3304      	adds	r3, #4
 8004760:	4618      	mov	r0, r3
 8004762:	f7ff fb8a 	bl	8003e7a <uxListRemove>
				--uxCurrentNumberOfTasks;
 8004766:	4b0d      	ldr	r3, [pc, #52]	; (800479c <prvCheckTasksWaitingTermination+0x54>)
 8004768:	681b      	ldr	r3, [r3, #0]
 800476a:	3b01      	subs	r3, #1
 800476c:	4a0b      	ldr	r2, [pc, #44]	; (800479c <prvCheckTasksWaitingTermination+0x54>)
 800476e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8004770:	4b0b      	ldr	r3, [pc, #44]	; (80047a0 <prvCheckTasksWaitingTermination+0x58>)
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	3b01      	subs	r3, #1
 8004776:	4a0a      	ldr	r2, [pc, #40]	; (80047a0 <prvCheckTasksWaitingTermination+0x58>)
 8004778:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800477a:	f000 fa43 	bl	8004c04 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800477e:	6878      	ldr	r0, [r7, #4]
 8004780:	f000 f810 	bl	80047a4 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004784:	4b06      	ldr	r3, [pc, #24]	; (80047a0 <prvCheckTasksWaitingTermination+0x58>)
 8004786:	681b      	ldr	r3, [r3, #0]
 8004788:	2b00      	cmp	r3, #0
 800478a:	d1e1      	bne.n	8004750 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800478c:	bf00      	nop
 800478e:	bf00      	nop
 8004790:	3708      	adds	r7, #8
 8004792:	46bd      	mov	sp, r7
 8004794:	bd80      	pop	{r7, pc}
 8004796:	bf00      	nop
 8004798:	20000b4c 	.word	0x20000b4c
 800479c:	20000b78 	.word	0x20000b78
 80047a0:	20000b60 	.word	0x20000b60

080047a4 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80047a4:	b580      	push	{r7, lr}
 80047a6:	b084      	sub	sp, #16
 80047a8:	af00      	add	r7, sp, #0
 80047aa:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80047b2:	2b00      	cmp	r3, #0
 80047b4:	d108      	bne.n	80047c8 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80047ba:	4618      	mov	r0, r3
 80047bc:	f000 fba0 	bl	8004f00 <vPortFree>
				vPortFree( pxTCB );
 80047c0:	6878      	ldr	r0, [r7, #4]
 80047c2:	f000 fb9d 	bl	8004f00 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80047c6:	e018      	b.n	80047fa <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80047ce:	2b01      	cmp	r3, #1
 80047d0:	d103      	bne.n	80047da <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 80047d2:	6878      	ldr	r0, [r7, #4]
 80047d4:	f000 fb94 	bl	8004f00 <vPortFree>
	}
 80047d8:	e00f      	b.n	80047fa <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80047e0:	2b02      	cmp	r3, #2
 80047e2:	d00a      	beq.n	80047fa <prvDeleteTCB+0x56>
	__asm volatile
 80047e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80047e8:	f383 8811 	msr	BASEPRI, r3
 80047ec:	f3bf 8f6f 	isb	sy
 80047f0:	f3bf 8f4f 	dsb	sy
 80047f4:	60fb      	str	r3, [r7, #12]
}
 80047f6:	bf00      	nop
 80047f8:	e7fe      	b.n	80047f8 <prvDeleteTCB+0x54>
	}
 80047fa:	bf00      	nop
 80047fc:	3710      	adds	r7, #16
 80047fe:	46bd      	mov	sp, r7
 8004800:	bd80      	pop	{r7, pc}
	...

08004804 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8004804:	b480      	push	{r7}
 8004806:	b083      	sub	sp, #12
 8004808:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800480a:	4b0c      	ldr	r3, [pc, #48]	; (800483c <prvResetNextTaskUnblockTime+0x38>)
 800480c:	681b      	ldr	r3, [r3, #0]
 800480e:	681b      	ldr	r3, [r3, #0]
 8004810:	2b00      	cmp	r3, #0
 8004812:	d104      	bne.n	800481e <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8004814:	4b0a      	ldr	r3, [pc, #40]	; (8004840 <prvResetNextTaskUnblockTime+0x3c>)
 8004816:	f04f 32ff 	mov.w	r2, #4294967295
 800481a:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800481c:	e008      	b.n	8004830 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800481e:	4b07      	ldr	r3, [pc, #28]	; (800483c <prvResetNextTaskUnblockTime+0x38>)
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	68db      	ldr	r3, [r3, #12]
 8004824:	68db      	ldr	r3, [r3, #12]
 8004826:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	685b      	ldr	r3, [r3, #4]
 800482c:	4a04      	ldr	r2, [pc, #16]	; (8004840 <prvResetNextTaskUnblockTime+0x3c>)
 800482e:	6013      	str	r3, [r2, #0]
}
 8004830:	bf00      	nop
 8004832:	370c      	adds	r7, #12
 8004834:	46bd      	mov	sp, r7
 8004836:	f85d 7b04 	ldr.w	r7, [sp], #4
 800483a:	4770      	bx	lr
 800483c:	20000b30 	.word	0x20000b30
 8004840:	20000b98 	.word	0x20000b98

08004844 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8004844:	b480      	push	{r7}
 8004846:	b083      	sub	sp, #12
 8004848:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800484a:	4b0b      	ldr	r3, [pc, #44]	; (8004878 <xTaskGetSchedulerState+0x34>)
 800484c:	681b      	ldr	r3, [r3, #0]
 800484e:	2b00      	cmp	r3, #0
 8004850:	d102      	bne.n	8004858 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8004852:	2301      	movs	r3, #1
 8004854:	607b      	str	r3, [r7, #4]
 8004856:	e008      	b.n	800486a <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004858:	4b08      	ldr	r3, [pc, #32]	; (800487c <xTaskGetSchedulerState+0x38>)
 800485a:	681b      	ldr	r3, [r3, #0]
 800485c:	2b00      	cmp	r3, #0
 800485e:	d102      	bne.n	8004866 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8004860:	2302      	movs	r3, #2
 8004862:	607b      	str	r3, [r7, #4]
 8004864:	e001      	b.n	800486a <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8004866:	2300      	movs	r3, #0
 8004868:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800486a:	687b      	ldr	r3, [r7, #4]
	}
 800486c:	4618      	mov	r0, r3
 800486e:	370c      	adds	r7, #12
 8004870:	46bd      	mov	sp, r7
 8004872:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004876:	4770      	bx	lr
 8004878:	20000b84 	.word	0x20000b84
 800487c:	20000ba0 	.word	0x20000ba0

08004880 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8004880:	b580      	push	{r7, lr}
 8004882:	b084      	sub	sp, #16
 8004884:	af00      	add	r7, sp, #0
 8004886:	6078      	str	r0, [r7, #4]
 8004888:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800488a:	4b29      	ldr	r3, [pc, #164]	; (8004930 <prvAddCurrentTaskToDelayedList+0xb0>)
 800488c:	681b      	ldr	r3, [r3, #0]
 800488e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004890:	4b28      	ldr	r3, [pc, #160]	; (8004934 <prvAddCurrentTaskToDelayedList+0xb4>)
 8004892:	681b      	ldr	r3, [r3, #0]
 8004894:	3304      	adds	r3, #4
 8004896:	4618      	mov	r0, r3
 8004898:	f7ff faef 	bl	8003e7a <uxListRemove>
 800489c:	4603      	mov	r3, r0
 800489e:	2b00      	cmp	r3, #0
 80048a0:	d10b      	bne.n	80048ba <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 80048a2:	4b24      	ldr	r3, [pc, #144]	; (8004934 <prvAddCurrentTaskToDelayedList+0xb4>)
 80048a4:	681b      	ldr	r3, [r3, #0]
 80048a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80048a8:	2201      	movs	r2, #1
 80048aa:	fa02 f303 	lsl.w	r3, r2, r3
 80048ae:	43da      	mvns	r2, r3
 80048b0:	4b21      	ldr	r3, [pc, #132]	; (8004938 <prvAddCurrentTaskToDelayedList+0xb8>)
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	4013      	ands	r3, r2
 80048b6:	4a20      	ldr	r2, [pc, #128]	; (8004938 <prvAddCurrentTaskToDelayedList+0xb8>)
 80048b8:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80048c0:	d10a      	bne.n	80048d8 <prvAddCurrentTaskToDelayedList+0x58>
 80048c2:	683b      	ldr	r3, [r7, #0]
 80048c4:	2b00      	cmp	r3, #0
 80048c6:	d007      	beq.n	80048d8 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80048c8:	4b1a      	ldr	r3, [pc, #104]	; (8004934 <prvAddCurrentTaskToDelayedList+0xb4>)
 80048ca:	681b      	ldr	r3, [r3, #0]
 80048cc:	3304      	adds	r3, #4
 80048ce:	4619      	mov	r1, r3
 80048d0:	481a      	ldr	r0, [pc, #104]	; (800493c <prvAddCurrentTaskToDelayedList+0xbc>)
 80048d2:	f7ff fa75 	bl	8003dc0 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80048d6:	e026      	b.n	8004926 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80048d8:	68fa      	ldr	r2, [r7, #12]
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	4413      	add	r3, r2
 80048de:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80048e0:	4b14      	ldr	r3, [pc, #80]	; (8004934 <prvAddCurrentTaskToDelayedList+0xb4>)
 80048e2:	681b      	ldr	r3, [r3, #0]
 80048e4:	68ba      	ldr	r2, [r7, #8]
 80048e6:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80048e8:	68ba      	ldr	r2, [r7, #8]
 80048ea:	68fb      	ldr	r3, [r7, #12]
 80048ec:	429a      	cmp	r2, r3
 80048ee:	d209      	bcs.n	8004904 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80048f0:	4b13      	ldr	r3, [pc, #76]	; (8004940 <prvAddCurrentTaskToDelayedList+0xc0>)
 80048f2:	681a      	ldr	r2, [r3, #0]
 80048f4:	4b0f      	ldr	r3, [pc, #60]	; (8004934 <prvAddCurrentTaskToDelayedList+0xb4>)
 80048f6:	681b      	ldr	r3, [r3, #0]
 80048f8:	3304      	adds	r3, #4
 80048fa:	4619      	mov	r1, r3
 80048fc:	4610      	mov	r0, r2
 80048fe:	f7ff fa83 	bl	8003e08 <vListInsert>
}
 8004902:	e010      	b.n	8004926 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004904:	4b0f      	ldr	r3, [pc, #60]	; (8004944 <prvAddCurrentTaskToDelayedList+0xc4>)
 8004906:	681a      	ldr	r2, [r3, #0]
 8004908:	4b0a      	ldr	r3, [pc, #40]	; (8004934 <prvAddCurrentTaskToDelayedList+0xb4>)
 800490a:	681b      	ldr	r3, [r3, #0]
 800490c:	3304      	adds	r3, #4
 800490e:	4619      	mov	r1, r3
 8004910:	4610      	mov	r0, r2
 8004912:	f7ff fa79 	bl	8003e08 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8004916:	4b0c      	ldr	r3, [pc, #48]	; (8004948 <prvAddCurrentTaskToDelayedList+0xc8>)
 8004918:	681b      	ldr	r3, [r3, #0]
 800491a:	68ba      	ldr	r2, [r7, #8]
 800491c:	429a      	cmp	r2, r3
 800491e:	d202      	bcs.n	8004926 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8004920:	4a09      	ldr	r2, [pc, #36]	; (8004948 <prvAddCurrentTaskToDelayedList+0xc8>)
 8004922:	68bb      	ldr	r3, [r7, #8]
 8004924:	6013      	str	r3, [r2, #0]
}
 8004926:	bf00      	nop
 8004928:	3710      	adds	r7, #16
 800492a:	46bd      	mov	sp, r7
 800492c:	bd80      	pop	{r7, pc}
 800492e:	bf00      	nop
 8004930:	20000b7c 	.word	0x20000b7c
 8004934:	20000a78 	.word	0x20000a78
 8004938:	20000b80 	.word	0x20000b80
 800493c:	20000b64 	.word	0x20000b64
 8004940:	20000b34 	.word	0x20000b34
 8004944:	20000b30 	.word	0x20000b30
 8004948:	20000b98 	.word	0x20000b98

0800494c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800494c:	b480      	push	{r7}
 800494e:	b085      	sub	sp, #20
 8004950:	af00      	add	r7, sp, #0
 8004952:	60f8      	str	r0, [r7, #12]
 8004954:	60b9      	str	r1, [r7, #8]
 8004956:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8004958:	68fb      	ldr	r3, [r7, #12]
 800495a:	3b04      	subs	r3, #4
 800495c:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800495e:	68fb      	ldr	r3, [r7, #12]
 8004960:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8004964:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8004966:	68fb      	ldr	r3, [r7, #12]
 8004968:	3b04      	subs	r3, #4
 800496a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800496c:	68bb      	ldr	r3, [r7, #8]
 800496e:	f023 0201 	bic.w	r2, r3, #1
 8004972:	68fb      	ldr	r3, [r7, #12]
 8004974:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8004976:	68fb      	ldr	r3, [r7, #12]
 8004978:	3b04      	subs	r3, #4
 800497a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800497c:	4a0c      	ldr	r2, [pc, #48]	; (80049b0 <pxPortInitialiseStack+0x64>)
 800497e:	68fb      	ldr	r3, [r7, #12]
 8004980:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8004982:	68fb      	ldr	r3, [r7, #12]
 8004984:	3b14      	subs	r3, #20
 8004986:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8004988:	687a      	ldr	r2, [r7, #4]
 800498a:	68fb      	ldr	r3, [r7, #12]
 800498c:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800498e:	68fb      	ldr	r3, [r7, #12]
 8004990:	3b04      	subs	r3, #4
 8004992:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8004994:	68fb      	ldr	r3, [r7, #12]
 8004996:	f06f 0202 	mvn.w	r2, #2
 800499a:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800499c:	68fb      	ldr	r3, [r7, #12]
 800499e:	3b20      	subs	r3, #32
 80049a0:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80049a2:	68fb      	ldr	r3, [r7, #12]
}
 80049a4:	4618      	mov	r0, r3
 80049a6:	3714      	adds	r7, #20
 80049a8:	46bd      	mov	sp, r7
 80049aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049ae:	4770      	bx	lr
 80049b0:	080049b5 	.word	0x080049b5

080049b4 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80049b4:	b480      	push	{r7}
 80049b6:	b085      	sub	sp, #20
 80049b8:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 80049ba:	2300      	movs	r3, #0
 80049bc:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80049be:	4b12      	ldr	r3, [pc, #72]	; (8004a08 <prvTaskExitError+0x54>)
 80049c0:	681b      	ldr	r3, [r3, #0]
 80049c2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80049c6:	d00a      	beq.n	80049de <prvTaskExitError+0x2a>
	__asm volatile
 80049c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80049cc:	f383 8811 	msr	BASEPRI, r3
 80049d0:	f3bf 8f6f 	isb	sy
 80049d4:	f3bf 8f4f 	dsb	sy
 80049d8:	60fb      	str	r3, [r7, #12]
}
 80049da:	bf00      	nop
 80049dc:	e7fe      	b.n	80049dc <prvTaskExitError+0x28>
	__asm volatile
 80049de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80049e2:	f383 8811 	msr	BASEPRI, r3
 80049e6:	f3bf 8f6f 	isb	sy
 80049ea:	f3bf 8f4f 	dsb	sy
 80049ee:	60bb      	str	r3, [r7, #8]
}
 80049f0:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80049f2:	bf00      	nop
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	2b00      	cmp	r3, #0
 80049f8:	d0fc      	beq.n	80049f4 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80049fa:	bf00      	nop
 80049fc:	bf00      	nop
 80049fe:	3714      	adds	r7, #20
 8004a00:	46bd      	mov	sp, r7
 8004a02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a06:	4770      	bx	lr
 8004a08:	2000000c 	.word	0x2000000c
 8004a0c:	00000000 	.word	0x00000000

08004a10 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8004a10:	4b07      	ldr	r3, [pc, #28]	; (8004a30 <pxCurrentTCBConst2>)
 8004a12:	6819      	ldr	r1, [r3, #0]
 8004a14:	6808      	ldr	r0, [r1, #0]
 8004a16:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004a1a:	f380 8809 	msr	PSP, r0
 8004a1e:	f3bf 8f6f 	isb	sy
 8004a22:	f04f 0000 	mov.w	r0, #0
 8004a26:	f380 8811 	msr	BASEPRI, r0
 8004a2a:	4770      	bx	lr
 8004a2c:	f3af 8000 	nop.w

08004a30 <pxCurrentTCBConst2>:
 8004a30:	20000a78 	.word	0x20000a78
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8004a34:	bf00      	nop
 8004a36:	bf00      	nop

08004a38 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8004a38:	4808      	ldr	r0, [pc, #32]	; (8004a5c <prvPortStartFirstTask+0x24>)
 8004a3a:	6800      	ldr	r0, [r0, #0]
 8004a3c:	6800      	ldr	r0, [r0, #0]
 8004a3e:	f380 8808 	msr	MSP, r0
 8004a42:	f04f 0000 	mov.w	r0, #0
 8004a46:	f380 8814 	msr	CONTROL, r0
 8004a4a:	b662      	cpsie	i
 8004a4c:	b661      	cpsie	f
 8004a4e:	f3bf 8f4f 	dsb	sy
 8004a52:	f3bf 8f6f 	isb	sy
 8004a56:	df00      	svc	0
 8004a58:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8004a5a:	bf00      	nop
 8004a5c:	e000ed08 	.word	0xe000ed08

08004a60 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8004a60:	b580      	push	{r7, lr}
 8004a62:	b086      	sub	sp, #24
 8004a64:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8004a66:	4b46      	ldr	r3, [pc, #280]	; (8004b80 <xPortStartScheduler+0x120>)
 8004a68:	681b      	ldr	r3, [r3, #0]
 8004a6a:	4a46      	ldr	r2, [pc, #280]	; (8004b84 <xPortStartScheduler+0x124>)
 8004a6c:	4293      	cmp	r3, r2
 8004a6e:	d10a      	bne.n	8004a86 <xPortStartScheduler+0x26>
	__asm volatile
 8004a70:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a74:	f383 8811 	msr	BASEPRI, r3
 8004a78:	f3bf 8f6f 	isb	sy
 8004a7c:	f3bf 8f4f 	dsb	sy
 8004a80:	613b      	str	r3, [r7, #16]
}
 8004a82:	bf00      	nop
 8004a84:	e7fe      	b.n	8004a84 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8004a86:	4b3e      	ldr	r3, [pc, #248]	; (8004b80 <xPortStartScheduler+0x120>)
 8004a88:	681b      	ldr	r3, [r3, #0]
 8004a8a:	4a3f      	ldr	r2, [pc, #252]	; (8004b88 <xPortStartScheduler+0x128>)
 8004a8c:	4293      	cmp	r3, r2
 8004a8e:	d10a      	bne.n	8004aa6 <xPortStartScheduler+0x46>
	__asm volatile
 8004a90:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a94:	f383 8811 	msr	BASEPRI, r3
 8004a98:	f3bf 8f6f 	isb	sy
 8004a9c:	f3bf 8f4f 	dsb	sy
 8004aa0:	60fb      	str	r3, [r7, #12]
}
 8004aa2:	bf00      	nop
 8004aa4:	e7fe      	b.n	8004aa4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8004aa6:	4b39      	ldr	r3, [pc, #228]	; (8004b8c <xPortStartScheduler+0x12c>)
 8004aa8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8004aaa:	697b      	ldr	r3, [r7, #20]
 8004aac:	781b      	ldrb	r3, [r3, #0]
 8004aae:	b2db      	uxtb	r3, r3
 8004ab0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8004ab2:	697b      	ldr	r3, [r7, #20]
 8004ab4:	22ff      	movs	r2, #255	; 0xff
 8004ab6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8004ab8:	697b      	ldr	r3, [r7, #20]
 8004aba:	781b      	ldrb	r3, [r3, #0]
 8004abc:	b2db      	uxtb	r3, r3
 8004abe:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8004ac0:	78fb      	ldrb	r3, [r7, #3]
 8004ac2:	b2db      	uxtb	r3, r3
 8004ac4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8004ac8:	b2da      	uxtb	r2, r3
 8004aca:	4b31      	ldr	r3, [pc, #196]	; (8004b90 <xPortStartScheduler+0x130>)
 8004acc:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8004ace:	4b31      	ldr	r3, [pc, #196]	; (8004b94 <xPortStartScheduler+0x134>)
 8004ad0:	2207      	movs	r2, #7
 8004ad2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004ad4:	e009      	b.n	8004aea <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8004ad6:	4b2f      	ldr	r3, [pc, #188]	; (8004b94 <xPortStartScheduler+0x134>)
 8004ad8:	681b      	ldr	r3, [r3, #0]
 8004ada:	3b01      	subs	r3, #1
 8004adc:	4a2d      	ldr	r2, [pc, #180]	; (8004b94 <xPortStartScheduler+0x134>)
 8004ade:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8004ae0:	78fb      	ldrb	r3, [r7, #3]
 8004ae2:	b2db      	uxtb	r3, r3
 8004ae4:	005b      	lsls	r3, r3, #1
 8004ae6:	b2db      	uxtb	r3, r3
 8004ae8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004aea:	78fb      	ldrb	r3, [r7, #3]
 8004aec:	b2db      	uxtb	r3, r3
 8004aee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004af2:	2b80      	cmp	r3, #128	; 0x80
 8004af4:	d0ef      	beq.n	8004ad6 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8004af6:	4b27      	ldr	r3, [pc, #156]	; (8004b94 <xPortStartScheduler+0x134>)
 8004af8:	681b      	ldr	r3, [r3, #0]
 8004afa:	f1c3 0307 	rsb	r3, r3, #7
 8004afe:	2b04      	cmp	r3, #4
 8004b00:	d00a      	beq.n	8004b18 <xPortStartScheduler+0xb8>
	__asm volatile
 8004b02:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b06:	f383 8811 	msr	BASEPRI, r3
 8004b0a:	f3bf 8f6f 	isb	sy
 8004b0e:	f3bf 8f4f 	dsb	sy
 8004b12:	60bb      	str	r3, [r7, #8]
}
 8004b14:	bf00      	nop
 8004b16:	e7fe      	b.n	8004b16 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8004b18:	4b1e      	ldr	r3, [pc, #120]	; (8004b94 <xPortStartScheduler+0x134>)
 8004b1a:	681b      	ldr	r3, [r3, #0]
 8004b1c:	021b      	lsls	r3, r3, #8
 8004b1e:	4a1d      	ldr	r2, [pc, #116]	; (8004b94 <xPortStartScheduler+0x134>)
 8004b20:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8004b22:	4b1c      	ldr	r3, [pc, #112]	; (8004b94 <xPortStartScheduler+0x134>)
 8004b24:	681b      	ldr	r3, [r3, #0]
 8004b26:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8004b2a:	4a1a      	ldr	r2, [pc, #104]	; (8004b94 <xPortStartScheduler+0x134>)
 8004b2c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	b2da      	uxtb	r2, r3
 8004b32:	697b      	ldr	r3, [r7, #20]
 8004b34:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8004b36:	4b18      	ldr	r3, [pc, #96]	; (8004b98 <xPortStartScheduler+0x138>)
 8004b38:	681b      	ldr	r3, [r3, #0]
 8004b3a:	4a17      	ldr	r2, [pc, #92]	; (8004b98 <xPortStartScheduler+0x138>)
 8004b3c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8004b40:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8004b42:	4b15      	ldr	r3, [pc, #84]	; (8004b98 <xPortStartScheduler+0x138>)
 8004b44:	681b      	ldr	r3, [r3, #0]
 8004b46:	4a14      	ldr	r2, [pc, #80]	; (8004b98 <xPortStartScheduler+0x138>)
 8004b48:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8004b4c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8004b4e:	f000 f8dd 	bl	8004d0c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8004b52:	4b12      	ldr	r3, [pc, #72]	; (8004b9c <xPortStartScheduler+0x13c>)
 8004b54:	2200      	movs	r2, #0
 8004b56:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8004b58:	f000 f8fc 	bl	8004d54 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8004b5c:	4b10      	ldr	r3, [pc, #64]	; (8004ba0 <xPortStartScheduler+0x140>)
 8004b5e:	681b      	ldr	r3, [r3, #0]
 8004b60:	4a0f      	ldr	r2, [pc, #60]	; (8004ba0 <xPortStartScheduler+0x140>)
 8004b62:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8004b66:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8004b68:	f7ff ff66 	bl	8004a38 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8004b6c:	f7ff fd38 	bl	80045e0 <vTaskSwitchContext>
	prvTaskExitError();
 8004b70:	f7ff ff20 	bl	80049b4 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8004b74:	2300      	movs	r3, #0
}
 8004b76:	4618      	mov	r0, r3
 8004b78:	3718      	adds	r7, #24
 8004b7a:	46bd      	mov	sp, r7
 8004b7c:	bd80      	pop	{r7, pc}
 8004b7e:	bf00      	nop
 8004b80:	e000ed00 	.word	0xe000ed00
 8004b84:	410fc271 	.word	0x410fc271
 8004b88:	410fc270 	.word	0x410fc270
 8004b8c:	e000e400 	.word	0xe000e400
 8004b90:	20000ba4 	.word	0x20000ba4
 8004b94:	20000ba8 	.word	0x20000ba8
 8004b98:	e000ed20 	.word	0xe000ed20
 8004b9c:	2000000c 	.word	0x2000000c
 8004ba0:	e000ef34 	.word	0xe000ef34

08004ba4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8004ba4:	b480      	push	{r7}
 8004ba6:	b083      	sub	sp, #12
 8004ba8:	af00      	add	r7, sp, #0
	__asm volatile
 8004baa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004bae:	f383 8811 	msr	BASEPRI, r3
 8004bb2:	f3bf 8f6f 	isb	sy
 8004bb6:	f3bf 8f4f 	dsb	sy
 8004bba:	607b      	str	r3, [r7, #4]
}
 8004bbc:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8004bbe:	4b0f      	ldr	r3, [pc, #60]	; (8004bfc <vPortEnterCritical+0x58>)
 8004bc0:	681b      	ldr	r3, [r3, #0]
 8004bc2:	3301      	adds	r3, #1
 8004bc4:	4a0d      	ldr	r2, [pc, #52]	; (8004bfc <vPortEnterCritical+0x58>)
 8004bc6:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8004bc8:	4b0c      	ldr	r3, [pc, #48]	; (8004bfc <vPortEnterCritical+0x58>)
 8004bca:	681b      	ldr	r3, [r3, #0]
 8004bcc:	2b01      	cmp	r3, #1
 8004bce:	d10f      	bne.n	8004bf0 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8004bd0:	4b0b      	ldr	r3, [pc, #44]	; (8004c00 <vPortEnterCritical+0x5c>)
 8004bd2:	681b      	ldr	r3, [r3, #0]
 8004bd4:	b2db      	uxtb	r3, r3
 8004bd6:	2b00      	cmp	r3, #0
 8004bd8:	d00a      	beq.n	8004bf0 <vPortEnterCritical+0x4c>
	__asm volatile
 8004bda:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004bde:	f383 8811 	msr	BASEPRI, r3
 8004be2:	f3bf 8f6f 	isb	sy
 8004be6:	f3bf 8f4f 	dsb	sy
 8004bea:	603b      	str	r3, [r7, #0]
}
 8004bec:	bf00      	nop
 8004bee:	e7fe      	b.n	8004bee <vPortEnterCritical+0x4a>
	}
}
 8004bf0:	bf00      	nop
 8004bf2:	370c      	adds	r7, #12
 8004bf4:	46bd      	mov	sp, r7
 8004bf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bfa:	4770      	bx	lr
 8004bfc:	2000000c 	.word	0x2000000c
 8004c00:	e000ed04 	.word	0xe000ed04

08004c04 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8004c04:	b480      	push	{r7}
 8004c06:	b083      	sub	sp, #12
 8004c08:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8004c0a:	4b12      	ldr	r3, [pc, #72]	; (8004c54 <vPortExitCritical+0x50>)
 8004c0c:	681b      	ldr	r3, [r3, #0]
 8004c0e:	2b00      	cmp	r3, #0
 8004c10:	d10a      	bne.n	8004c28 <vPortExitCritical+0x24>
	__asm volatile
 8004c12:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c16:	f383 8811 	msr	BASEPRI, r3
 8004c1a:	f3bf 8f6f 	isb	sy
 8004c1e:	f3bf 8f4f 	dsb	sy
 8004c22:	607b      	str	r3, [r7, #4]
}
 8004c24:	bf00      	nop
 8004c26:	e7fe      	b.n	8004c26 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8004c28:	4b0a      	ldr	r3, [pc, #40]	; (8004c54 <vPortExitCritical+0x50>)
 8004c2a:	681b      	ldr	r3, [r3, #0]
 8004c2c:	3b01      	subs	r3, #1
 8004c2e:	4a09      	ldr	r2, [pc, #36]	; (8004c54 <vPortExitCritical+0x50>)
 8004c30:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8004c32:	4b08      	ldr	r3, [pc, #32]	; (8004c54 <vPortExitCritical+0x50>)
 8004c34:	681b      	ldr	r3, [r3, #0]
 8004c36:	2b00      	cmp	r3, #0
 8004c38:	d105      	bne.n	8004c46 <vPortExitCritical+0x42>
 8004c3a:	2300      	movs	r3, #0
 8004c3c:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8004c3e:	683b      	ldr	r3, [r7, #0]
 8004c40:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8004c44:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8004c46:	bf00      	nop
 8004c48:	370c      	adds	r7, #12
 8004c4a:	46bd      	mov	sp, r7
 8004c4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c50:	4770      	bx	lr
 8004c52:	bf00      	nop
 8004c54:	2000000c 	.word	0x2000000c
	...

08004c60 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8004c60:	f3ef 8009 	mrs	r0, PSP
 8004c64:	f3bf 8f6f 	isb	sy
 8004c68:	4b15      	ldr	r3, [pc, #84]	; (8004cc0 <pxCurrentTCBConst>)
 8004c6a:	681a      	ldr	r2, [r3, #0]
 8004c6c:	f01e 0f10 	tst.w	lr, #16
 8004c70:	bf08      	it	eq
 8004c72:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8004c76:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004c7a:	6010      	str	r0, [r2, #0]
 8004c7c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8004c80:	f04f 0050 	mov.w	r0, #80	; 0x50
 8004c84:	f380 8811 	msr	BASEPRI, r0
 8004c88:	f3bf 8f4f 	dsb	sy
 8004c8c:	f3bf 8f6f 	isb	sy
 8004c90:	f7ff fca6 	bl	80045e0 <vTaskSwitchContext>
 8004c94:	f04f 0000 	mov.w	r0, #0
 8004c98:	f380 8811 	msr	BASEPRI, r0
 8004c9c:	bc09      	pop	{r0, r3}
 8004c9e:	6819      	ldr	r1, [r3, #0]
 8004ca0:	6808      	ldr	r0, [r1, #0]
 8004ca2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004ca6:	f01e 0f10 	tst.w	lr, #16
 8004caa:	bf08      	it	eq
 8004cac:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8004cb0:	f380 8809 	msr	PSP, r0
 8004cb4:	f3bf 8f6f 	isb	sy
 8004cb8:	4770      	bx	lr
 8004cba:	bf00      	nop
 8004cbc:	f3af 8000 	nop.w

08004cc0 <pxCurrentTCBConst>:
 8004cc0:	20000a78 	.word	0x20000a78
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8004cc4:	bf00      	nop
 8004cc6:	bf00      	nop

08004cc8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8004cc8:	b580      	push	{r7, lr}
 8004cca:	b082      	sub	sp, #8
 8004ccc:	af00      	add	r7, sp, #0
	__asm volatile
 8004cce:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004cd2:	f383 8811 	msr	BASEPRI, r3
 8004cd6:	f3bf 8f6f 	isb	sy
 8004cda:	f3bf 8f4f 	dsb	sy
 8004cde:	607b      	str	r3, [r7, #4]
}
 8004ce0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8004ce2:	f7ff fbc5 	bl	8004470 <xTaskIncrementTick>
 8004ce6:	4603      	mov	r3, r0
 8004ce8:	2b00      	cmp	r3, #0
 8004cea:	d003      	beq.n	8004cf4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8004cec:	4b06      	ldr	r3, [pc, #24]	; (8004d08 <xPortSysTickHandler+0x40>)
 8004cee:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004cf2:	601a      	str	r2, [r3, #0]
 8004cf4:	2300      	movs	r3, #0
 8004cf6:	603b      	str	r3, [r7, #0]
	__asm volatile
 8004cf8:	683b      	ldr	r3, [r7, #0]
 8004cfa:	f383 8811 	msr	BASEPRI, r3
}
 8004cfe:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8004d00:	bf00      	nop
 8004d02:	3708      	adds	r7, #8
 8004d04:	46bd      	mov	sp, r7
 8004d06:	bd80      	pop	{r7, pc}
 8004d08:	e000ed04 	.word	0xe000ed04

08004d0c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8004d0c:	b480      	push	{r7}
 8004d0e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8004d10:	4b0b      	ldr	r3, [pc, #44]	; (8004d40 <vPortSetupTimerInterrupt+0x34>)
 8004d12:	2200      	movs	r2, #0
 8004d14:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8004d16:	4b0b      	ldr	r3, [pc, #44]	; (8004d44 <vPortSetupTimerInterrupt+0x38>)
 8004d18:	2200      	movs	r2, #0
 8004d1a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8004d1c:	4b0a      	ldr	r3, [pc, #40]	; (8004d48 <vPortSetupTimerInterrupt+0x3c>)
 8004d1e:	681b      	ldr	r3, [r3, #0]
 8004d20:	4a0a      	ldr	r2, [pc, #40]	; (8004d4c <vPortSetupTimerInterrupt+0x40>)
 8004d22:	fba2 2303 	umull	r2, r3, r2, r3
 8004d26:	099b      	lsrs	r3, r3, #6
 8004d28:	4a09      	ldr	r2, [pc, #36]	; (8004d50 <vPortSetupTimerInterrupt+0x44>)
 8004d2a:	3b01      	subs	r3, #1
 8004d2c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8004d2e:	4b04      	ldr	r3, [pc, #16]	; (8004d40 <vPortSetupTimerInterrupt+0x34>)
 8004d30:	2207      	movs	r2, #7
 8004d32:	601a      	str	r2, [r3, #0]
}
 8004d34:	bf00      	nop
 8004d36:	46bd      	mov	sp, r7
 8004d38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d3c:	4770      	bx	lr
 8004d3e:	bf00      	nop
 8004d40:	e000e010 	.word	0xe000e010
 8004d44:	e000e018 	.word	0xe000e018
 8004d48:	20000000 	.word	0x20000000
 8004d4c:	10624dd3 	.word	0x10624dd3
 8004d50:	e000e014 	.word	0xe000e014

08004d54 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8004d54:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8004d64 <vPortEnableVFP+0x10>
 8004d58:	6801      	ldr	r1, [r0, #0]
 8004d5a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8004d5e:	6001      	str	r1, [r0, #0]
 8004d60:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8004d62:	bf00      	nop
 8004d64:	e000ed88 	.word	0xe000ed88

08004d68 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8004d68:	b580      	push	{r7, lr}
 8004d6a:	b08a      	sub	sp, #40	; 0x28
 8004d6c:	af00      	add	r7, sp, #0
 8004d6e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8004d70:	2300      	movs	r3, #0
 8004d72:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8004d74:	f7ff fad2 	bl	800431c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8004d78:	4b5b      	ldr	r3, [pc, #364]	; (8004ee8 <pvPortMalloc+0x180>)
 8004d7a:	681b      	ldr	r3, [r3, #0]
 8004d7c:	2b00      	cmp	r3, #0
 8004d7e:	d101      	bne.n	8004d84 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8004d80:	f000 f920 	bl	8004fc4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8004d84:	4b59      	ldr	r3, [pc, #356]	; (8004eec <pvPortMalloc+0x184>)
 8004d86:	681a      	ldr	r2, [r3, #0]
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	4013      	ands	r3, r2
 8004d8c:	2b00      	cmp	r3, #0
 8004d8e:	f040 8093 	bne.w	8004eb8 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	2b00      	cmp	r3, #0
 8004d96:	d01d      	beq.n	8004dd4 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8004d98:	2208      	movs	r2, #8
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	4413      	add	r3, r2
 8004d9e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	f003 0307 	and.w	r3, r3, #7
 8004da6:	2b00      	cmp	r3, #0
 8004da8:	d014      	beq.n	8004dd4 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	f023 0307 	bic.w	r3, r3, #7
 8004db0:	3308      	adds	r3, #8
 8004db2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	f003 0307 	and.w	r3, r3, #7
 8004dba:	2b00      	cmp	r3, #0
 8004dbc:	d00a      	beq.n	8004dd4 <pvPortMalloc+0x6c>
	__asm volatile
 8004dbe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004dc2:	f383 8811 	msr	BASEPRI, r3
 8004dc6:	f3bf 8f6f 	isb	sy
 8004dca:	f3bf 8f4f 	dsb	sy
 8004dce:	617b      	str	r3, [r7, #20]
}
 8004dd0:	bf00      	nop
 8004dd2:	e7fe      	b.n	8004dd2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	2b00      	cmp	r3, #0
 8004dd8:	d06e      	beq.n	8004eb8 <pvPortMalloc+0x150>
 8004dda:	4b45      	ldr	r3, [pc, #276]	; (8004ef0 <pvPortMalloc+0x188>)
 8004ddc:	681b      	ldr	r3, [r3, #0]
 8004dde:	687a      	ldr	r2, [r7, #4]
 8004de0:	429a      	cmp	r2, r3
 8004de2:	d869      	bhi.n	8004eb8 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8004de4:	4b43      	ldr	r3, [pc, #268]	; (8004ef4 <pvPortMalloc+0x18c>)
 8004de6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8004de8:	4b42      	ldr	r3, [pc, #264]	; (8004ef4 <pvPortMalloc+0x18c>)
 8004dea:	681b      	ldr	r3, [r3, #0]
 8004dec:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8004dee:	e004      	b.n	8004dfa <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8004df0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004df2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8004df4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004df6:	681b      	ldr	r3, [r3, #0]
 8004df8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8004dfa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004dfc:	685b      	ldr	r3, [r3, #4]
 8004dfe:	687a      	ldr	r2, [r7, #4]
 8004e00:	429a      	cmp	r2, r3
 8004e02:	d903      	bls.n	8004e0c <pvPortMalloc+0xa4>
 8004e04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e06:	681b      	ldr	r3, [r3, #0]
 8004e08:	2b00      	cmp	r3, #0
 8004e0a:	d1f1      	bne.n	8004df0 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8004e0c:	4b36      	ldr	r3, [pc, #216]	; (8004ee8 <pvPortMalloc+0x180>)
 8004e0e:	681b      	ldr	r3, [r3, #0]
 8004e10:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004e12:	429a      	cmp	r2, r3
 8004e14:	d050      	beq.n	8004eb8 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8004e16:	6a3b      	ldr	r3, [r7, #32]
 8004e18:	681b      	ldr	r3, [r3, #0]
 8004e1a:	2208      	movs	r2, #8
 8004e1c:	4413      	add	r3, r2
 8004e1e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8004e20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e22:	681a      	ldr	r2, [r3, #0]
 8004e24:	6a3b      	ldr	r3, [r7, #32]
 8004e26:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8004e28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e2a:	685a      	ldr	r2, [r3, #4]
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	1ad2      	subs	r2, r2, r3
 8004e30:	2308      	movs	r3, #8
 8004e32:	005b      	lsls	r3, r3, #1
 8004e34:	429a      	cmp	r2, r3
 8004e36:	d91f      	bls.n	8004e78 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8004e38:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	4413      	add	r3, r2
 8004e3e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8004e40:	69bb      	ldr	r3, [r7, #24]
 8004e42:	f003 0307 	and.w	r3, r3, #7
 8004e46:	2b00      	cmp	r3, #0
 8004e48:	d00a      	beq.n	8004e60 <pvPortMalloc+0xf8>
	__asm volatile
 8004e4a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e4e:	f383 8811 	msr	BASEPRI, r3
 8004e52:	f3bf 8f6f 	isb	sy
 8004e56:	f3bf 8f4f 	dsb	sy
 8004e5a:	613b      	str	r3, [r7, #16]
}
 8004e5c:	bf00      	nop
 8004e5e:	e7fe      	b.n	8004e5e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8004e60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e62:	685a      	ldr	r2, [r3, #4]
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	1ad2      	subs	r2, r2, r3
 8004e68:	69bb      	ldr	r3, [r7, #24]
 8004e6a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8004e6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e6e:	687a      	ldr	r2, [r7, #4]
 8004e70:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8004e72:	69b8      	ldr	r0, [r7, #24]
 8004e74:	f000 f908 	bl	8005088 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8004e78:	4b1d      	ldr	r3, [pc, #116]	; (8004ef0 <pvPortMalloc+0x188>)
 8004e7a:	681a      	ldr	r2, [r3, #0]
 8004e7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e7e:	685b      	ldr	r3, [r3, #4]
 8004e80:	1ad3      	subs	r3, r2, r3
 8004e82:	4a1b      	ldr	r2, [pc, #108]	; (8004ef0 <pvPortMalloc+0x188>)
 8004e84:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8004e86:	4b1a      	ldr	r3, [pc, #104]	; (8004ef0 <pvPortMalloc+0x188>)
 8004e88:	681a      	ldr	r2, [r3, #0]
 8004e8a:	4b1b      	ldr	r3, [pc, #108]	; (8004ef8 <pvPortMalloc+0x190>)
 8004e8c:	681b      	ldr	r3, [r3, #0]
 8004e8e:	429a      	cmp	r2, r3
 8004e90:	d203      	bcs.n	8004e9a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8004e92:	4b17      	ldr	r3, [pc, #92]	; (8004ef0 <pvPortMalloc+0x188>)
 8004e94:	681b      	ldr	r3, [r3, #0]
 8004e96:	4a18      	ldr	r2, [pc, #96]	; (8004ef8 <pvPortMalloc+0x190>)
 8004e98:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8004e9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e9c:	685a      	ldr	r2, [r3, #4]
 8004e9e:	4b13      	ldr	r3, [pc, #76]	; (8004eec <pvPortMalloc+0x184>)
 8004ea0:	681b      	ldr	r3, [r3, #0]
 8004ea2:	431a      	orrs	r2, r3
 8004ea4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ea6:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8004ea8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004eaa:	2200      	movs	r2, #0
 8004eac:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8004eae:	4b13      	ldr	r3, [pc, #76]	; (8004efc <pvPortMalloc+0x194>)
 8004eb0:	681b      	ldr	r3, [r3, #0]
 8004eb2:	3301      	adds	r3, #1
 8004eb4:	4a11      	ldr	r2, [pc, #68]	; (8004efc <pvPortMalloc+0x194>)
 8004eb6:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8004eb8:	f7ff fa3e 	bl	8004338 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8004ebc:	69fb      	ldr	r3, [r7, #28]
 8004ebe:	f003 0307 	and.w	r3, r3, #7
 8004ec2:	2b00      	cmp	r3, #0
 8004ec4:	d00a      	beq.n	8004edc <pvPortMalloc+0x174>
	__asm volatile
 8004ec6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004eca:	f383 8811 	msr	BASEPRI, r3
 8004ece:	f3bf 8f6f 	isb	sy
 8004ed2:	f3bf 8f4f 	dsb	sy
 8004ed6:	60fb      	str	r3, [r7, #12]
}
 8004ed8:	bf00      	nop
 8004eda:	e7fe      	b.n	8004eda <pvPortMalloc+0x172>
	return pvReturn;
 8004edc:	69fb      	ldr	r3, [r7, #28]
}
 8004ede:	4618      	mov	r0, r3
 8004ee0:	3728      	adds	r7, #40	; 0x28
 8004ee2:	46bd      	mov	sp, r7
 8004ee4:	bd80      	pop	{r7, pc}
 8004ee6:	bf00      	nop
 8004ee8:	200047b4 	.word	0x200047b4
 8004eec:	200047c8 	.word	0x200047c8
 8004ef0:	200047b8 	.word	0x200047b8
 8004ef4:	200047ac 	.word	0x200047ac
 8004ef8:	200047bc 	.word	0x200047bc
 8004efc:	200047c0 	.word	0x200047c0

08004f00 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8004f00:	b580      	push	{r7, lr}
 8004f02:	b086      	sub	sp, #24
 8004f04:	af00      	add	r7, sp, #0
 8004f06:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	2b00      	cmp	r3, #0
 8004f10:	d04d      	beq.n	8004fae <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8004f12:	2308      	movs	r3, #8
 8004f14:	425b      	negs	r3, r3
 8004f16:	697a      	ldr	r2, [r7, #20]
 8004f18:	4413      	add	r3, r2
 8004f1a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8004f1c:	697b      	ldr	r3, [r7, #20]
 8004f1e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8004f20:	693b      	ldr	r3, [r7, #16]
 8004f22:	685a      	ldr	r2, [r3, #4]
 8004f24:	4b24      	ldr	r3, [pc, #144]	; (8004fb8 <vPortFree+0xb8>)
 8004f26:	681b      	ldr	r3, [r3, #0]
 8004f28:	4013      	ands	r3, r2
 8004f2a:	2b00      	cmp	r3, #0
 8004f2c:	d10a      	bne.n	8004f44 <vPortFree+0x44>
	__asm volatile
 8004f2e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f32:	f383 8811 	msr	BASEPRI, r3
 8004f36:	f3bf 8f6f 	isb	sy
 8004f3a:	f3bf 8f4f 	dsb	sy
 8004f3e:	60fb      	str	r3, [r7, #12]
}
 8004f40:	bf00      	nop
 8004f42:	e7fe      	b.n	8004f42 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8004f44:	693b      	ldr	r3, [r7, #16]
 8004f46:	681b      	ldr	r3, [r3, #0]
 8004f48:	2b00      	cmp	r3, #0
 8004f4a:	d00a      	beq.n	8004f62 <vPortFree+0x62>
	__asm volatile
 8004f4c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f50:	f383 8811 	msr	BASEPRI, r3
 8004f54:	f3bf 8f6f 	isb	sy
 8004f58:	f3bf 8f4f 	dsb	sy
 8004f5c:	60bb      	str	r3, [r7, #8]
}
 8004f5e:	bf00      	nop
 8004f60:	e7fe      	b.n	8004f60 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8004f62:	693b      	ldr	r3, [r7, #16]
 8004f64:	685a      	ldr	r2, [r3, #4]
 8004f66:	4b14      	ldr	r3, [pc, #80]	; (8004fb8 <vPortFree+0xb8>)
 8004f68:	681b      	ldr	r3, [r3, #0]
 8004f6a:	4013      	ands	r3, r2
 8004f6c:	2b00      	cmp	r3, #0
 8004f6e:	d01e      	beq.n	8004fae <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8004f70:	693b      	ldr	r3, [r7, #16]
 8004f72:	681b      	ldr	r3, [r3, #0]
 8004f74:	2b00      	cmp	r3, #0
 8004f76:	d11a      	bne.n	8004fae <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8004f78:	693b      	ldr	r3, [r7, #16]
 8004f7a:	685a      	ldr	r2, [r3, #4]
 8004f7c:	4b0e      	ldr	r3, [pc, #56]	; (8004fb8 <vPortFree+0xb8>)
 8004f7e:	681b      	ldr	r3, [r3, #0]
 8004f80:	43db      	mvns	r3, r3
 8004f82:	401a      	ands	r2, r3
 8004f84:	693b      	ldr	r3, [r7, #16]
 8004f86:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8004f88:	f7ff f9c8 	bl	800431c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8004f8c:	693b      	ldr	r3, [r7, #16]
 8004f8e:	685a      	ldr	r2, [r3, #4]
 8004f90:	4b0a      	ldr	r3, [pc, #40]	; (8004fbc <vPortFree+0xbc>)
 8004f92:	681b      	ldr	r3, [r3, #0]
 8004f94:	4413      	add	r3, r2
 8004f96:	4a09      	ldr	r2, [pc, #36]	; (8004fbc <vPortFree+0xbc>)
 8004f98:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8004f9a:	6938      	ldr	r0, [r7, #16]
 8004f9c:	f000 f874 	bl	8005088 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8004fa0:	4b07      	ldr	r3, [pc, #28]	; (8004fc0 <vPortFree+0xc0>)
 8004fa2:	681b      	ldr	r3, [r3, #0]
 8004fa4:	3301      	adds	r3, #1
 8004fa6:	4a06      	ldr	r2, [pc, #24]	; (8004fc0 <vPortFree+0xc0>)
 8004fa8:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8004faa:	f7ff f9c5 	bl	8004338 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8004fae:	bf00      	nop
 8004fb0:	3718      	adds	r7, #24
 8004fb2:	46bd      	mov	sp, r7
 8004fb4:	bd80      	pop	{r7, pc}
 8004fb6:	bf00      	nop
 8004fb8:	200047c8 	.word	0x200047c8
 8004fbc:	200047b8 	.word	0x200047b8
 8004fc0:	200047c4 	.word	0x200047c4

08004fc4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8004fc4:	b480      	push	{r7}
 8004fc6:	b085      	sub	sp, #20
 8004fc8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8004fca:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8004fce:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8004fd0:	4b27      	ldr	r3, [pc, #156]	; (8005070 <prvHeapInit+0xac>)
 8004fd2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8004fd4:	68fb      	ldr	r3, [r7, #12]
 8004fd6:	f003 0307 	and.w	r3, r3, #7
 8004fda:	2b00      	cmp	r3, #0
 8004fdc:	d00c      	beq.n	8004ff8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8004fde:	68fb      	ldr	r3, [r7, #12]
 8004fe0:	3307      	adds	r3, #7
 8004fe2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8004fe4:	68fb      	ldr	r3, [r7, #12]
 8004fe6:	f023 0307 	bic.w	r3, r3, #7
 8004fea:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8004fec:	68ba      	ldr	r2, [r7, #8]
 8004fee:	68fb      	ldr	r3, [r7, #12]
 8004ff0:	1ad3      	subs	r3, r2, r3
 8004ff2:	4a1f      	ldr	r2, [pc, #124]	; (8005070 <prvHeapInit+0xac>)
 8004ff4:	4413      	add	r3, r2
 8004ff6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8004ff8:	68fb      	ldr	r3, [r7, #12]
 8004ffa:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8004ffc:	4a1d      	ldr	r2, [pc, #116]	; (8005074 <prvHeapInit+0xb0>)
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8005002:	4b1c      	ldr	r3, [pc, #112]	; (8005074 <prvHeapInit+0xb0>)
 8005004:	2200      	movs	r2, #0
 8005006:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	68ba      	ldr	r2, [r7, #8]
 800500c:	4413      	add	r3, r2
 800500e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8005010:	2208      	movs	r2, #8
 8005012:	68fb      	ldr	r3, [r7, #12]
 8005014:	1a9b      	subs	r3, r3, r2
 8005016:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005018:	68fb      	ldr	r3, [r7, #12]
 800501a:	f023 0307 	bic.w	r3, r3, #7
 800501e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8005020:	68fb      	ldr	r3, [r7, #12]
 8005022:	4a15      	ldr	r2, [pc, #84]	; (8005078 <prvHeapInit+0xb4>)
 8005024:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8005026:	4b14      	ldr	r3, [pc, #80]	; (8005078 <prvHeapInit+0xb4>)
 8005028:	681b      	ldr	r3, [r3, #0]
 800502a:	2200      	movs	r2, #0
 800502c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800502e:	4b12      	ldr	r3, [pc, #72]	; (8005078 <prvHeapInit+0xb4>)
 8005030:	681b      	ldr	r3, [r3, #0]
 8005032:	2200      	movs	r2, #0
 8005034:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800503a:	683b      	ldr	r3, [r7, #0]
 800503c:	68fa      	ldr	r2, [r7, #12]
 800503e:	1ad2      	subs	r2, r2, r3
 8005040:	683b      	ldr	r3, [r7, #0]
 8005042:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8005044:	4b0c      	ldr	r3, [pc, #48]	; (8005078 <prvHeapInit+0xb4>)
 8005046:	681a      	ldr	r2, [r3, #0]
 8005048:	683b      	ldr	r3, [r7, #0]
 800504a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800504c:	683b      	ldr	r3, [r7, #0]
 800504e:	685b      	ldr	r3, [r3, #4]
 8005050:	4a0a      	ldr	r2, [pc, #40]	; (800507c <prvHeapInit+0xb8>)
 8005052:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005054:	683b      	ldr	r3, [r7, #0]
 8005056:	685b      	ldr	r3, [r3, #4]
 8005058:	4a09      	ldr	r2, [pc, #36]	; (8005080 <prvHeapInit+0xbc>)
 800505a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800505c:	4b09      	ldr	r3, [pc, #36]	; (8005084 <prvHeapInit+0xc0>)
 800505e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8005062:	601a      	str	r2, [r3, #0]
}
 8005064:	bf00      	nop
 8005066:	3714      	adds	r7, #20
 8005068:	46bd      	mov	sp, r7
 800506a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800506e:	4770      	bx	lr
 8005070:	20000bac 	.word	0x20000bac
 8005074:	200047ac 	.word	0x200047ac
 8005078:	200047b4 	.word	0x200047b4
 800507c:	200047bc 	.word	0x200047bc
 8005080:	200047b8 	.word	0x200047b8
 8005084:	200047c8 	.word	0x200047c8

08005088 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8005088:	b480      	push	{r7}
 800508a:	b085      	sub	sp, #20
 800508c:	af00      	add	r7, sp, #0
 800508e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8005090:	4b28      	ldr	r3, [pc, #160]	; (8005134 <prvInsertBlockIntoFreeList+0xac>)
 8005092:	60fb      	str	r3, [r7, #12]
 8005094:	e002      	b.n	800509c <prvInsertBlockIntoFreeList+0x14>
 8005096:	68fb      	ldr	r3, [r7, #12]
 8005098:	681b      	ldr	r3, [r3, #0]
 800509a:	60fb      	str	r3, [r7, #12]
 800509c:	68fb      	ldr	r3, [r7, #12]
 800509e:	681b      	ldr	r3, [r3, #0]
 80050a0:	687a      	ldr	r2, [r7, #4]
 80050a2:	429a      	cmp	r2, r3
 80050a4:	d8f7      	bhi.n	8005096 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80050a6:	68fb      	ldr	r3, [r7, #12]
 80050a8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80050aa:	68fb      	ldr	r3, [r7, #12]
 80050ac:	685b      	ldr	r3, [r3, #4]
 80050ae:	68ba      	ldr	r2, [r7, #8]
 80050b0:	4413      	add	r3, r2
 80050b2:	687a      	ldr	r2, [r7, #4]
 80050b4:	429a      	cmp	r2, r3
 80050b6:	d108      	bne.n	80050ca <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80050b8:	68fb      	ldr	r3, [r7, #12]
 80050ba:	685a      	ldr	r2, [r3, #4]
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	685b      	ldr	r3, [r3, #4]
 80050c0:	441a      	add	r2, r3
 80050c2:	68fb      	ldr	r3, [r7, #12]
 80050c4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80050c6:	68fb      	ldr	r3, [r7, #12]
 80050c8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	685b      	ldr	r3, [r3, #4]
 80050d2:	68ba      	ldr	r2, [r7, #8]
 80050d4:	441a      	add	r2, r3
 80050d6:	68fb      	ldr	r3, [r7, #12]
 80050d8:	681b      	ldr	r3, [r3, #0]
 80050da:	429a      	cmp	r2, r3
 80050dc:	d118      	bne.n	8005110 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80050de:	68fb      	ldr	r3, [r7, #12]
 80050e0:	681a      	ldr	r2, [r3, #0]
 80050e2:	4b15      	ldr	r3, [pc, #84]	; (8005138 <prvInsertBlockIntoFreeList+0xb0>)
 80050e4:	681b      	ldr	r3, [r3, #0]
 80050e6:	429a      	cmp	r2, r3
 80050e8:	d00d      	beq.n	8005106 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	685a      	ldr	r2, [r3, #4]
 80050ee:	68fb      	ldr	r3, [r7, #12]
 80050f0:	681b      	ldr	r3, [r3, #0]
 80050f2:	685b      	ldr	r3, [r3, #4]
 80050f4:	441a      	add	r2, r3
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80050fa:	68fb      	ldr	r3, [r7, #12]
 80050fc:	681b      	ldr	r3, [r3, #0]
 80050fe:	681a      	ldr	r2, [r3, #0]
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	601a      	str	r2, [r3, #0]
 8005104:	e008      	b.n	8005118 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8005106:	4b0c      	ldr	r3, [pc, #48]	; (8005138 <prvInsertBlockIntoFreeList+0xb0>)
 8005108:	681a      	ldr	r2, [r3, #0]
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	601a      	str	r2, [r3, #0]
 800510e:	e003      	b.n	8005118 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8005110:	68fb      	ldr	r3, [r7, #12]
 8005112:	681a      	ldr	r2, [r3, #0]
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8005118:	68fa      	ldr	r2, [r7, #12]
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	429a      	cmp	r2, r3
 800511e:	d002      	beq.n	8005126 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8005120:	68fb      	ldr	r3, [r7, #12]
 8005122:	687a      	ldr	r2, [r7, #4]
 8005124:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005126:	bf00      	nop
 8005128:	3714      	adds	r7, #20
 800512a:	46bd      	mov	sp, r7
 800512c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005130:	4770      	bx	lr
 8005132:	bf00      	nop
 8005134:	200047ac 	.word	0x200047ac
 8005138:	200047b4 	.word	0x200047b4

0800513c <__libc_init_array>:
 800513c:	b570      	push	{r4, r5, r6, lr}
 800513e:	4d0d      	ldr	r5, [pc, #52]	; (8005174 <__libc_init_array+0x38>)
 8005140:	4c0d      	ldr	r4, [pc, #52]	; (8005178 <__libc_init_array+0x3c>)
 8005142:	1b64      	subs	r4, r4, r5
 8005144:	10a4      	asrs	r4, r4, #2
 8005146:	2600      	movs	r6, #0
 8005148:	42a6      	cmp	r6, r4
 800514a:	d109      	bne.n	8005160 <__libc_init_array+0x24>
 800514c:	4d0b      	ldr	r5, [pc, #44]	; (800517c <__libc_init_array+0x40>)
 800514e:	4c0c      	ldr	r4, [pc, #48]	; (8005180 <__libc_init_array+0x44>)
 8005150:	f000 f820 	bl	8005194 <_init>
 8005154:	1b64      	subs	r4, r4, r5
 8005156:	10a4      	asrs	r4, r4, #2
 8005158:	2600      	movs	r6, #0
 800515a:	42a6      	cmp	r6, r4
 800515c:	d105      	bne.n	800516a <__libc_init_array+0x2e>
 800515e:	bd70      	pop	{r4, r5, r6, pc}
 8005160:	f855 3b04 	ldr.w	r3, [r5], #4
 8005164:	4798      	blx	r3
 8005166:	3601      	adds	r6, #1
 8005168:	e7ee      	b.n	8005148 <__libc_init_array+0xc>
 800516a:	f855 3b04 	ldr.w	r3, [r5], #4
 800516e:	4798      	blx	r3
 8005170:	3601      	adds	r6, #1
 8005172:	e7f2      	b.n	800515a <__libc_init_array+0x1e>
 8005174:	08005240 	.word	0x08005240
 8005178:	08005240 	.word	0x08005240
 800517c:	08005240 	.word	0x08005240
 8005180:	08005244 	.word	0x08005244

08005184 <memset>:
 8005184:	4402      	add	r2, r0
 8005186:	4603      	mov	r3, r0
 8005188:	4293      	cmp	r3, r2
 800518a:	d100      	bne.n	800518e <memset+0xa>
 800518c:	4770      	bx	lr
 800518e:	f803 1b01 	strb.w	r1, [r3], #1
 8005192:	e7f9      	b.n	8005188 <memset+0x4>

08005194 <_init>:
 8005194:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005196:	bf00      	nop
 8005198:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800519a:	bc08      	pop	{r3}
 800519c:	469e      	mov	lr, r3
 800519e:	4770      	bx	lr

080051a0 <_fini>:
 80051a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80051a2:	bf00      	nop
 80051a4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80051a6:	bc08      	pop	{r3}
 80051a8:	469e      	mov	lr, r3
 80051aa:	4770      	bx	lr
