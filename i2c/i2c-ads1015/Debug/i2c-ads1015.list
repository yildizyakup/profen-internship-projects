
i2c-ads1015.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008628  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000003b0  080087d8  080087d8  000187d8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008b88  08008b88  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  08008b88  08008b88  00018b88  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008b90  08008b90  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008b90  08008b90  00018b90  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008b94  08008b94  00018b94  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08008b98  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020070  2**0
                  CONTENTS
 10 .bss          00000858  20000070  20000070  00020070  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  200008c8  200008c8  00020070  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001321b  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000234e  00000000  00000000  000332bb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000ea8  00000000  00000000  00035610  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000df8  00000000  00000000  000364b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00024568  00000000  00000000  000372b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000117c4  00000000  00000000  0005b818  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000dc58f  00000000  00000000  0006cfdc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  0014956b  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000050d8  00000000  00000000  001495bc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .stab         000000cc  00000000  00000000  0014e694  2**2
                  CONTENTS, READONLY, DEBUGGING
 23 .stabstr      000001b9  00000000  00000000  0014e760  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20000070 	.word	0x20000070
 80001cc:	00000000 	.word	0x00000000
 80001d0:	080087c0 	.word	0x080087c0

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	20000074 	.word	0x20000074
 80001ec:	080087c0 	.word	0x080087c0

080001f0 <strlen>:
 80001f0:	4603      	mov	r3, r0
 80001f2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001f6:	2a00      	cmp	r2, #0
 80001f8:	d1fb      	bne.n	80001f2 <strlen+0x2>
 80001fa:	1a18      	subs	r0, r3, r0
 80001fc:	3801      	subs	r0, #1
 80001fe:	4770      	bx	lr

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_drsub>:
 80002a0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002a4:	e002      	b.n	80002ac <__adddf3>
 80002a6:	bf00      	nop

080002a8 <__aeabi_dsub>:
 80002a8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002ac <__adddf3>:
 80002ac:	b530      	push	{r4, r5, lr}
 80002ae:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002b2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002b6:	ea94 0f05 	teq	r4, r5
 80002ba:	bf08      	it	eq
 80002bc:	ea90 0f02 	teqeq	r0, r2
 80002c0:	bf1f      	itttt	ne
 80002c2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002c6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ca:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ce:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002d2:	f000 80e2 	beq.w	800049a <__adddf3+0x1ee>
 80002d6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002da:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002de:	bfb8      	it	lt
 80002e0:	426d      	neglt	r5, r5
 80002e2:	dd0c      	ble.n	80002fe <__adddf3+0x52>
 80002e4:	442c      	add	r4, r5
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	ea82 0000 	eor.w	r0, r2, r0
 80002f2:	ea83 0101 	eor.w	r1, r3, r1
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	2d36      	cmp	r5, #54	; 0x36
 8000300:	bf88      	it	hi
 8000302:	bd30      	pophi	{r4, r5, pc}
 8000304:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000308:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800030c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000310:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000314:	d002      	beq.n	800031c <__adddf3+0x70>
 8000316:	4240      	negs	r0, r0
 8000318:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800031c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000320:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000324:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000328:	d002      	beq.n	8000330 <__adddf3+0x84>
 800032a:	4252      	negs	r2, r2
 800032c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000330:	ea94 0f05 	teq	r4, r5
 8000334:	f000 80a7 	beq.w	8000486 <__adddf3+0x1da>
 8000338:	f1a4 0401 	sub.w	r4, r4, #1
 800033c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000340:	db0d      	blt.n	800035e <__adddf3+0xb2>
 8000342:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000346:	fa22 f205 	lsr.w	r2, r2, r5
 800034a:	1880      	adds	r0, r0, r2
 800034c:	f141 0100 	adc.w	r1, r1, #0
 8000350:	fa03 f20e 	lsl.w	r2, r3, lr
 8000354:	1880      	adds	r0, r0, r2
 8000356:	fa43 f305 	asr.w	r3, r3, r5
 800035a:	4159      	adcs	r1, r3
 800035c:	e00e      	b.n	800037c <__adddf3+0xd0>
 800035e:	f1a5 0520 	sub.w	r5, r5, #32
 8000362:	f10e 0e20 	add.w	lr, lr, #32
 8000366:	2a01      	cmp	r2, #1
 8000368:	fa03 fc0e 	lsl.w	ip, r3, lr
 800036c:	bf28      	it	cs
 800036e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000372:	fa43 f305 	asr.w	r3, r3, r5
 8000376:	18c0      	adds	r0, r0, r3
 8000378:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800037c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000380:	d507      	bpl.n	8000392 <__adddf3+0xe6>
 8000382:	f04f 0e00 	mov.w	lr, #0
 8000386:	f1dc 0c00 	rsbs	ip, ip, #0
 800038a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800038e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000392:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000396:	d31b      	bcc.n	80003d0 <__adddf3+0x124>
 8000398:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800039c:	d30c      	bcc.n	80003b8 <__adddf3+0x10c>
 800039e:	0849      	lsrs	r1, r1, #1
 80003a0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003a4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003a8:	f104 0401 	add.w	r4, r4, #1
 80003ac:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003b0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003b4:	f080 809a 	bcs.w	80004ec <__adddf3+0x240>
 80003b8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003bc:	bf08      	it	eq
 80003be:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003c2:	f150 0000 	adcs.w	r0, r0, #0
 80003c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ca:	ea41 0105 	orr.w	r1, r1, r5
 80003ce:	bd30      	pop	{r4, r5, pc}
 80003d0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003d4:	4140      	adcs	r0, r0
 80003d6:	eb41 0101 	adc.w	r1, r1, r1
 80003da:	3c01      	subs	r4, #1
 80003dc:	bf28      	it	cs
 80003de:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003e2:	d2e9      	bcs.n	80003b8 <__adddf3+0x10c>
 80003e4:	f091 0f00 	teq	r1, #0
 80003e8:	bf04      	itt	eq
 80003ea:	4601      	moveq	r1, r0
 80003ec:	2000      	moveq	r0, #0
 80003ee:	fab1 f381 	clz	r3, r1
 80003f2:	bf08      	it	eq
 80003f4:	3320      	addeq	r3, #32
 80003f6:	f1a3 030b 	sub.w	r3, r3, #11
 80003fa:	f1b3 0220 	subs.w	r2, r3, #32
 80003fe:	da0c      	bge.n	800041a <__adddf3+0x16e>
 8000400:	320c      	adds	r2, #12
 8000402:	dd08      	ble.n	8000416 <__adddf3+0x16a>
 8000404:	f102 0c14 	add.w	ip, r2, #20
 8000408:	f1c2 020c 	rsb	r2, r2, #12
 800040c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000410:	fa21 f102 	lsr.w	r1, r1, r2
 8000414:	e00c      	b.n	8000430 <__adddf3+0x184>
 8000416:	f102 0214 	add.w	r2, r2, #20
 800041a:	bfd8      	it	le
 800041c:	f1c2 0c20 	rsble	ip, r2, #32
 8000420:	fa01 f102 	lsl.w	r1, r1, r2
 8000424:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000428:	bfdc      	itt	le
 800042a:	ea41 010c 	orrle.w	r1, r1, ip
 800042e:	4090      	lslle	r0, r2
 8000430:	1ae4      	subs	r4, r4, r3
 8000432:	bfa2      	ittt	ge
 8000434:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000438:	4329      	orrge	r1, r5
 800043a:	bd30      	popge	{r4, r5, pc}
 800043c:	ea6f 0404 	mvn.w	r4, r4
 8000440:	3c1f      	subs	r4, #31
 8000442:	da1c      	bge.n	800047e <__adddf3+0x1d2>
 8000444:	340c      	adds	r4, #12
 8000446:	dc0e      	bgt.n	8000466 <__adddf3+0x1ba>
 8000448:	f104 0414 	add.w	r4, r4, #20
 800044c:	f1c4 0220 	rsb	r2, r4, #32
 8000450:	fa20 f004 	lsr.w	r0, r0, r4
 8000454:	fa01 f302 	lsl.w	r3, r1, r2
 8000458:	ea40 0003 	orr.w	r0, r0, r3
 800045c:	fa21 f304 	lsr.w	r3, r1, r4
 8000460:	ea45 0103 	orr.w	r1, r5, r3
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f1c4 040c 	rsb	r4, r4, #12
 800046a:	f1c4 0220 	rsb	r2, r4, #32
 800046e:	fa20 f002 	lsr.w	r0, r0, r2
 8000472:	fa01 f304 	lsl.w	r3, r1, r4
 8000476:	ea40 0003 	orr.w	r0, r0, r3
 800047a:	4629      	mov	r1, r5
 800047c:	bd30      	pop	{r4, r5, pc}
 800047e:	fa21 f004 	lsr.w	r0, r1, r4
 8000482:	4629      	mov	r1, r5
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f094 0f00 	teq	r4, #0
 800048a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800048e:	bf06      	itte	eq
 8000490:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000494:	3401      	addeq	r4, #1
 8000496:	3d01      	subne	r5, #1
 8000498:	e74e      	b.n	8000338 <__adddf3+0x8c>
 800049a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800049e:	bf18      	it	ne
 80004a0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004a4:	d029      	beq.n	80004fa <__adddf3+0x24e>
 80004a6:	ea94 0f05 	teq	r4, r5
 80004aa:	bf08      	it	eq
 80004ac:	ea90 0f02 	teqeq	r0, r2
 80004b0:	d005      	beq.n	80004be <__adddf3+0x212>
 80004b2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004b6:	bf04      	itt	eq
 80004b8:	4619      	moveq	r1, r3
 80004ba:	4610      	moveq	r0, r2
 80004bc:	bd30      	pop	{r4, r5, pc}
 80004be:	ea91 0f03 	teq	r1, r3
 80004c2:	bf1e      	ittt	ne
 80004c4:	2100      	movne	r1, #0
 80004c6:	2000      	movne	r0, #0
 80004c8:	bd30      	popne	{r4, r5, pc}
 80004ca:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ce:	d105      	bne.n	80004dc <__adddf3+0x230>
 80004d0:	0040      	lsls	r0, r0, #1
 80004d2:	4149      	adcs	r1, r1
 80004d4:	bf28      	it	cs
 80004d6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004da:	bd30      	pop	{r4, r5, pc}
 80004dc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004e0:	bf3c      	itt	cc
 80004e2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004e6:	bd30      	popcc	{r4, r5, pc}
 80004e8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004ec:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004f0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004f4:	f04f 0000 	mov.w	r0, #0
 80004f8:	bd30      	pop	{r4, r5, pc}
 80004fa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004fe:	bf1a      	itte	ne
 8000500:	4619      	movne	r1, r3
 8000502:	4610      	movne	r0, r2
 8000504:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000508:	bf1c      	itt	ne
 800050a:	460b      	movne	r3, r1
 800050c:	4602      	movne	r2, r0
 800050e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000512:	bf06      	itte	eq
 8000514:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000518:	ea91 0f03 	teqeq	r1, r3
 800051c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000520:	bd30      	pop	{r4, r5, pc}
 8000522:	bf00      	nop

08000524 <__aeabi_ui2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f04f 0500 	mov.w	r5, #0
 800053c:	f04f 0100 	mov.w	r1, #0
 8000540:	e750      	b.n	80003e4 <__adddf3+0x138>
 8000542:	bf00      	nop

08000544 <__aeabi_i2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800055c:	bf48      	it	mi
 800055e:	4240      	negmi	r0, r0
 8000560:	f04f 0100 	mov.w	r1, #0
 8000564:	e73e      	b.n	80003e4 <__adddf3+0x138>
 8000566:	bf00      	nop

08000568 <__aeabi_f2d>:
 8000568:	0042      	lsls	r2, r0, #1
 800056a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800056e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000572:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000576:	bf1f      	itttt	ne
 8000578:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800057c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000580:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000584:	4770      	bxne	lr
 8000586:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800058a:	bf08      	it	eq
 800058c:	4770      	bxeq	lr
 800058e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000592:	bf04      	itt	eq
 8000594:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000598:	4770      	bxeq	lr
 800059a:	b530      	push	{r4, r5, lr}
 800059c:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005a0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005a4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005a8:	e71c      	b.n	80003e4 <__adddf3+0x138>
 80005aa:	bf00      	nop

080005ac <__aeabi_ul2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f04f 0500 	mov.w	r5, #0
 80005ba:	e00a      	b.n	80005d2 <__aeabi_l2d+0x16>

080005bc <__aeabi_l2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ca:	d502      	bpl.n	80005d2 <__aeabi_l2d+0x16>
 80005cc:	4240      	negs	r0, r0
 80005ce:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005d2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005d6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005da:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005de:	f43f aed8 	beq.w	8000392 <__adddf3+0xe6>
 80005e2:	f04f 0203 	mov.w	r2, #3
 80005e6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ea:	bf18      	it	ne
 80005ec:	3203      	addne	r2, #3
 80005ee:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005f2:	bf18      	it	ne
 80005f4:	3203      	addne	r2, #3
 80005f6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005fa:	f1c2 0320 	rsb	r3, r2, #32
 80005fe:	fa00 fc03 	lsl.w	ip, r0, r3
 8000602:	fa20 f002 	lsr.w	r0, r0, r2
 8000606:	fa01 fe03 	lsl.w	lr, r1, r3
 800060a:	ea40 000e 	orr.w	r0, r0, lr
 800060e:	fa21 f102 	lsr.w	r1, r1, r2
 8000612:	4414      	add	r4, r2
 8000614:	e6bd      	b.n	8000392 <__adddf3+0xe6>
 8000616:	bf00      	nop

08000618 <__aeabi_dmul>:
 8000618:	b570      	push	{r4, r5, r6, lr}
 800061a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800061e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000622:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000626:	bf1d      	ittte	ne
 8000628:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800062c:	ea94 0f0c 	teqne	r4, ip
 8000630:	ea95 0f0c 	teqne	r5, ip
 8000634:	f000 f8de 	bleq	80007f4 <__aeabi_dmul+0x1dc>
 8000638:	442c      	add	r4, r5
 800063a:	ea81 0603 	eor.w	r6, r1, r3
 800063e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000642:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000646:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800064a:	bf18      	it	ne
 800064c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000650:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000654:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000658:	d038      	beq.n	80006cc <__aeabi_dmul+0xb4>
 800065a:	fba0 ce02 	umull	ip, lr, r0, r2
 800065e:	f04f 0500 	mov.w	r5, #0
 8000662:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000666:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800066a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800066e:	f04f 0600 	mov.w	r6, #0
 8000672:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000676:	f09c 0f00 	teq	ip, #0
 800067a:	bf18      	it	ne
 800067c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000680:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000684:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000688:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800068c:	d204      	bcs.n	8000698 <__aeabi_dmul+0x80>
 800068e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000692:	416d      	adcs	r5, r5
 8000694:	eb46 0606 	adc.w	r6, r6, r6
 8000698:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800069c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006a0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006a4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006a8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006ac:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006b0:	bf88      	it	hi
 80006b2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006b6:	d81e      	bhi.n	80006f6 <__aeabi_dmul+0xde>
 80006b8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006bc:	bf08      	it	eq
 80006be:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006c2:	f150 0000 	adcs.w	r0, r0, #0
 80006c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	pop	{r4, r5, r6, pc}
 80006cc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006d0:	ea46 0101 	orr.w	r1, r6, r1
 80006d4:	ea40 0002 	orr.w	r0, r0, r2
 80006d8:	ea81 0103 	eor.w	r1, r1, r3
 80006dc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006e0:	bfc2      	ittt	gt
 80006e2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006e6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	popgt	{r4, r5, r6, pc}
 80006ec:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006f0:	f04f 0e00 	mov.w	lr, #0
 80006f4:	3c01      	subs	r4, #1
 80006f6:	f300 80ab 	bgt.w	8000850 <__aeabi_dmul+0x238>
 80006fa:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006fe:	bfde      	ittt	le
 8000700:	2000      	movle	r0, #0
 8000702:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000706:	bd70      	pople	{r4, r5, r6, pc}
 8000708:	f1c4 0400 	rsb	r4, r4, #0
 800070c:	3c20      	subs	r4, #32
 800070e:	da35      	bge.n	800077c <__aeabi_dmul+0x164>
 8000710:	340c      	adds	r4, #12
 8000712:	dc1b      	bgt.n	800074c <__aeabi_dmul+0x134>
 8000714:	f104 0414 	add.w	r4, r4, #20
 8000718:	f1c4 0520 	rsb	r5, r4, #32
 800071c:	fa00 f305 	lsl.w	r3, r0, r5
 8000720:	fa20 f004 	lsr.w	r0, r0, r4
 8000724:	fa01 f205 	lsl.w	r2, r1, r5
 8000728:	ea40 0002 	orr.w	r0, r0, r2
 800072c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000730:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000734:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000738:	fa21 f604 	lsr.w	r6, r1, r4
 800073c:	eb42 0106 	adc.w	r1, r2, r6
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f1c4 040c 	rsb	r4, r4, #12
 8000750:	f1c4 0520 	rsb	r5, r4, #32
 8000754:	fa00 f304 	lsl.w	r3, r0, r4
 8000758:	fa20 f005 	lsr.w	r0, r0, r5
 800075c:	fa01 f204 	lsl.w	r2, r1, r4
 8000760:	ea40 0002 	orr.w	r0, r0, r2
 8000764:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000768:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800076c:	f141 0100 	adc.w	r1, r1, #0
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 0520 	rsb	r5, r4, #32
 8000780:	fa00 f205 	lsl.w	r2, r0, r5
 8000784:	ea4e 0e02 	orr.w	lr, lr, r2
 8000788:	fa20 f304 	lsr.w	r3, r0, r4
 800078c:	fa01 f205 	lsl.w	r2, r1, r5
 8000790:	ea43 0302 	orr.w	r3, r3, r2
 8000794:	fa21 f004 	lsr.w	r0, r1, r4
 8000798:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800079c:	fa21 f204 	lsr.w	r2, r1, r4
 80007a0:	ea20 0002 	bic.w	r0, r0, r2
 80007a4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007ac:	bf08      	it	eq
 80007ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007b2:	bd70      	pop	{r4, r5, r6, pc}
 80007b4:	f094 0f00 	teq	r4, #0
 80007b8:	d10f      	bne.n	80007da <__aeabi_dmul+0x1c2>
 80007ba:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007be:	0040      	lsls	r0, r0, #1
 80007c0:	eb41 0101 	adc.w	r1, r1, r1
 80007c4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3c01      	subeq	r4, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1a6>
 80007ce:	ea41 0106 	orr.w	r1, r1, r6
 80007d2:	f095 0f00 	teq	r5, #0
 80007d6:	bf18      	it	ne
 80007d8:	4770      	bxne	lr
 80007da:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007de:	0052      	lsls	r2, r2, #1
 80007e0:	eb43 0303 	adc.w	r3, r3, r3
 80007e4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3d01      	subeq	r5, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1c6>
 80007ee:	ea43 0306 	orr.w	r3, r3, r6
 80007f2:	4770      	bx	lr
 80007f4:	ea94 0f0c 	teq	r4, ip
 80007f8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007fc:	bf18      	it	ne
 80007fe:	ea95 0f0c 	teqne	r5, ip
 8000802:	d00c      	beq.n	800081e <__aeabi_dmul+0x206>
 8000804:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000808:	bf18      	it	ne
 800080a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080e:	d1d1      	bne.n	80007b4 <__aeabi_dmul+0x19c>
 8000810:	ea81 0103 	eor.w	r1, r1, r3
 8000814:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000818:	f04f 0000 	mov.w	r0, #0
 800081c:	bd70      	pop	{r4, r5, r6, pc}
 800081e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000822:	bf06      	itte	eq
 8000824:	4610      	moveq	r0, r2
 8000826:	4619      	moveq	r1, r3
 8000828:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082c:	d019      	beq.n	8000862 <__aeabi_dmul+0x24a>
 800082e:	ea94 0f0c 	teq	r4, ip
 8000832:	d102      	bne.n	800083a <__aeabi_dmul+0x222>
 8000834:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000838:	d113      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800083a:	ea95 0f0c 	teq	r5, ip
 800083e:	d105      	bne.n	800084c <__aeabi_dmul+0x234>
 8000840:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000844:	bf1c      	itt	ne
 8000846:	4610      	movne	r0, r2
 8000848:	4619      	movne	r1, r3
 800084a:	d10a      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800084c:	ea81 0103 	eor.w	r1, r1, r3
 8000850:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000854:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000858:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800085c:	f04f 0000 	mov.w	r0, #0
 8000860:	bd70      	pop	{r4, r5, r6, pc}
 8000862:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000866:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800086a:	bd70      	pop	{r4, r5, r6, pc}

0800086c <__aeabi_ddiv>:
 800086c:	b570      	push	{r4, r5, r6, lr}
 800086e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000872:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000876:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800087a:	bf1d      	ittte	ne
 800087c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000880:	ea94 0f0c 	teqne	r4, ip
 8000884:	ea95 0f0c 	teqne	r5, ip
 8000888:	f000 f8a7 	bleq	80009da <__aeabi_ddiv+0x16e>
 800088c:	eba4 0405 	sub.w	r4, r4, r5
 8000890:	ea81 0e03 	eor.w	lr, r1, r3
 8000894:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000898:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800089c:	f000 8088 	beq.w	80009b0 <__aeabi_ddiv+0x144>
 80008a0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008a4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008a8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008ac:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008b0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008b4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008b8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008bc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008c0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008c4:	429d      	cmp	r5, r3
 80008c6:	bf08      	it	eq
 80008c8:	4296      	cmpeq	r6, r2
 80008ca:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ce:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008d2:	d202      	bcs.n	80008da <__aeabi_ddiv+0x6e>
 80008d4:	085b      	lsrs	r3, r3, #1
 80008d6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008da:	1ab6      	subs	r6, r6, r2
 80008dc:	eb65 0503 	sbc.w	r5, r5, r3
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ea:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 000c 	orrcs.w	r0, r0, ip
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000918:	085b      	lsrs	r3, r3, #1
 800091a:	ea4f 0232 	mov.w	r2, r2, rrx
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000948:	ea55 0e06 	orrs.w	lr, r5, r6
 800094c:	d018      	beq.n	8000980 <__aeabi_ddiv+0x114>
 800094e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000952:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000956:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800095a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800095e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000962:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000966:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800096a:	d1c0      	bne.n	80008ee <__aeabi_ddiv+0x82>
 800096c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000970:	d10b      	bne.n	800098a <__aeabi_ddiv+0x11e>
 8000972:	ea41 0100 	orr.w	r1, r1, r0
 8000976:	f04f 0000 	mov.w	r0, #0
 800097a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800097e:	e7b6      	b.n	80008ee <__aeabi_ddiv+0x82>
 8000980:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000984:	bf04      	itt	eq
 8000986:	4301      	orreq	r1, r0
 8000988:	2000      	moveq	r0, #0
 800098a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800098e:	bf88      	it	hi
 8000990:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000994:	f63f aeaf 	bhi.w	80006f6 <__aeabi_dmul+0xde>
 8000998:	ebb5 0c03 	subs.w	ip, r5, r3
 800099c:	bf04      	itt	eq
 800099e:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009a2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009a6:	f150 0000 	adcs.w	r0, r0, #0
 80009aa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ae:	bd70      	pop	{r4, r5, r6, pc}
 80009b0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009b4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009b8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009bc:	bfc2      	ittt	gt
 80009be:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009c2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009c6:	bd70      	popgt	{r4, r5, r6, pc}
 80009c8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009cc:	f04f 0e00 	mov.w	lr, #0
 80009d0:	3c01      	subs	r4, #1
 80009d2:	e690      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009d4:	ea45 0e06 	orr.w	lr, r5, r6
 80009d8:	e68d      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009da:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009de:	ea94 0f0c 	teq	r4, ip
 80009e2:	bf08      	it	eq
 80009e4:	ea95 0f0c 	teqeq	r5, ip
 80009e8:	f43f af3b 	beq.w	8000862 <__aeabi_dmul+0x24a>
 80009ec:	ea94 0f0c 	teq	r4, ip
 80009f0:	d10a      	bne.n	8000a08 <__aeabi_ddiv+0x19c>
 80009f2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009f6:	f47f af34 	bne.w	8000862 <__aeabi_dmul+0x24a>
 80009fa:	ea95 0f0c 	teq	r5, ip
 80009fe:	f47f af25 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a02:	4610      	mov	r0, r2
 8000a04:	4619      	mov	r1, r3
 8000a06:	e72c      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a08:	ea95 0f0c 	teq	r5, ip
 8000a0c:	d106      	bne.n	8000a1c <__aeabi_ddiv+0x1b0>
 8000a0e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a12:	f43f aefd 	beq.w	8000810 <__aeabi_dmul+0x1f8>
 8000a16:	4610      	mov	r0, r2
 8000a18:	4619      	mov	r1, r3
 8000a1a:	e722      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a1c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a20:	bf18      	it	ne
 8000a22:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a26:	f47f aec5 	bne.w	80007b4 <__aeabi_dmul+0x19c>
 8000a2a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a2e:	f47f af0d 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a32:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a36:	f47f aeeb 	bne.w	8000810 <__aeabi_dmul+0x1f8>
 8000a3a:	e712      	b.n	8000862 <__aeabi_dmul+0x24a>

08000a3c <__gedf2>:
 8000a3c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a40:	e006      	b.n	8000a50 <__cmpdf2+0x4>
 8000a42:	bf00      	nop

08000a44 <__ledf2>:
 8000a44:	f04f 0c01 	mov.w	ip, #1
 8000a48:	e002      	b.n	8000a50 <__cmpdf2+0x4>
 8000a4a:	bf00      	nop

08000a4c <__cmpdf2>:
 8000a4c:	f04f 0c01 	mov.w	ip, #1
 8000a50:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a54:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a58:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a60:	bf18      	it	ne
 8000a62:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a66:	d01b      	beq.n	8000aa0 <__cmpdf2+0x54>
 8000a68:	b001      	add	sp, #4
 8000a6a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a6e:	bf0c      	ite	eq
 8000a70:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a74:	ea91 0f03 	teqne	r1, r3
 8000a78:	bf02      	ittt	eq
 8000a7a:	ea90 0f02 	teqeq	r0, r2
 8000a7e:	2000      	moveq	r0, #0
 8000a80:	4770      	bxeq	lr
 8000a82:	f110 0f00 	cmn.w	r0, #0
 8000a86:	ea91 0f03 	teq	r1, r3
 8000a8a:	bf58      	it	pl
 8000a8c:	4299      	cmppl	r1, r3
 8000a8e:	bf08      	it	eq
 8000a90:	4290      	cmpeq	r0, r2
 8000a92:	bf2c      	ite	cs
 8000a94:	17d8      	asrcs	r0, r3, #31
 8000a96:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a9a:	f040 0001 	orr.w	r0, r0, #1
 8000a9e:	4770      	bx	lr
 8000aa0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d102      	bne.n	8000ab0 <__cmpdf2+0x64>
 8000aaa:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aae:	d107      	bne.n	8000ac0 <__cmpdf2+0x74>
 8000ab0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d1d6      	bne.n	8000a68 <__cmpdf2+0x1c>
 8000aba:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000abe:	d0d3      	beq.n	8000a68 <__cmpdf2+0x1c>
 8000ac0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ac4:	4770      	bx	lr
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdrcmple>:
 8000ac8:	4684      	mov	ip, r0
 8000aca:	4610      	mov	r0, r2
 8000acc:	4662      	mov	r2, ip
 8000ace:	468c      	mov	ip, r1
 8000ad0:	4619      	mov	r1, r3
 8000ad2:	4663      	mov	r3, ip
 8000ad4:	e000      	b.n	8000ad8 <__aeabi_cdcmpeq>
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdcmpeq>:
 8000ad8:	b501      	push	{r0, lr}
 8000ada:	f7ff ffb7 	bl	8000a4c <__cmpdf2>
 8000ade:	2800      	cmp	r0, #0
 8000ae0:	bf48      	it	mi
 8000ae2:	f110 0f00 	cmnmi.w	r0, #0
 8000ae6:	bd01      	pop	{r0, pc}

08000ae8 <__aeabi_dcmpeq>:
 8000ae8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aec:	f7ff fff4 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000af0:	bf0c      	ite	eq
 8000af2:	2001      	moveq	r0, #1
 8000af4:	2000      	movne	r0, #0
 8000af6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afa:	bf00      	nop

08000afc <__aeabi_dcmplt>:
 8000afc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b00:	f7ff ffea 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b04:	bf34      	ite	cc
 8000b06:	2001      	movcc	r0, #1
 8000b08:	2000      	movcs	r0, #0
 8000b0a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0e:	bf00      	nop

08000b10 <__aeabi_dcmple>:
 8000b10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b14:	f7ff ffe0 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b18:	bf94      	ite	ls
 8000b1a:	2001      	movls	r0, #1
 8000b1c:	2000      	movhi	r0, #0
 8000b1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b22:	bf00      	nop

08000b24 <__aeabi_dcmpge>:
 8000b24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b28:	f7ff ffce 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b2c:	bf94      	ite	ls
 8000b2e:	2001      	movls	r0, #1
 8000b30:	2000      	movhi	r0, #0
 8000b32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b36:	bf00      	nop

08000b38 <__aeabi_dcmpgt>:
 8000b38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b3c:	f7ff ffc4 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b40:	bf34      	ite	cc
 8000b42:	2001      	movcc	r0, #1
 8000b44:	2000      	movcs	r0, #0
 8000b46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4a:	bf00      	nop

08000b4c <__aeabi_d2iz>:
 8000b4c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b50:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b54:	d215      	bcs.n	8000b82 <__aeabi_d2iz+0x36>
 8000b56:	d511      	bpl.n	8000b7c <__aeabi_d2iz+0x30>
 8000b58:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b5c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b60:	d912      	bls.n	8000b88 <__aeabi_d2iz+0x3c>
 8000b62:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b66:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b6a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b6e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b72:	fa23 f002 	lsr.w	r0, r3, r2
 8000b76:	bf18      	it	ne
 8000b78:	4240      	negne	r0, r0
 8000b7a:	4770      	bx	lr
 8000b7c:	f04f 0000 	mov.w	r0, #0
 8000b80:	4770      	bx	lr
 8000b82:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b86:	d105      	bne.n	8000b94 <__aeabi_d2iz+0x48>
 8000b88:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b8c:	bf08      	it	eq
 8000b8e:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b92:	4770      	bx	lr
 8000b94:	f04f 0000 	mov.w	r0, #0
 8000b98:	4770      	bx	lr
 8000b9a:	bf00      	nop

08000b9c <__aeabi_uldivmod>:
 8000b9c:	b953      	cbnz	r3, 8000bb4 <__aeabi_uldivmod+0x18>
 8000b9e:	b94a      	cbnz	r2, 8000bb4 <__aeabi_uldivmod+0x18>
 8000ba0:	2900      	cmp	r1, #0
 8000ba2:	bf08      	it	eq
 8000ba4:	2800      	cmpeq	r0, #0
 8000ba6:	bf1c      	itt	ne
 8000ba8:	f04f 31ff 	movne.w	r1, #4294967295
 8000bac:	f04f 30ff 	movne.w	r0, #4294967295
 8000bb0:	f000 b974 	b.w	8000e9c <__aeabi_idiv0>
 8000bb4:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bb8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bbc:	f000 f806 	bl	8000bcc <__udivmoddi4>
 8000bc0:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bc4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bc8:	b004      	add	sp, #16
 8000bca:	4770      	bx	lr

08000bcc <__udivmoddi4>:
 8000bcc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bd0:	9d08      	ldr	r5, [sp, #32]
 8000bd2:	4604      	mov	r4, r0
 8000bd4:	468e      	mov	lr, r1
 8000bd6:	2b00      	cmp	r3, #0
 8000bd8:	d14d      	bne.n	8000c76 <__udivmoddi4+0xaa>
 8000bda:	428a      	cmp	r2, r1
 8000bdc:	4694      	mov	ip, r2
 8000bde:	d969      	bls.n	8000cb4 <__udivmoddi4+0xe8>
 8000be0:	fab2 f282 	clz	r2, r2
 8000be4:	b152      	cbz	r2, 8000bfc <__udivmoddi4+0x30>
 8000be6:	fa01 f302 	lsl.w	r3, r1, r2
 8000bea:	f1c2 0120 	rsb	r1, r2, #32
 8000bee:	fa20 f101 	lsr.w	r1, r0, r1
 8000bf2:	fa0c fc02 	lsl.w	ip, ip, r2
 8000bf6:	ea41 0e03 	orr.w	lr, r1, r3
 8000bfa:	4094      	lsls	r4, r2
 8000bfc:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000c00:	0c21      	lsrs	r1, r4, #16
 8000c02:	fbbe f6f8 	udiv	r6, lr, r8
 8000c06:	fa1f f78c 	uxth.w	r7, ip
 8000c0a:	fb08 e316 	mls	r3, r8, r6, lr
 8000c0e:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000c12:	fb06 f107 	mul.w	r1, r6, r7
 8000c16:	4299      	cmp	r1, r3
 8000c18:	d90a      	bls.n	8000c30 <__udivmoddi4+0x64>
 8000c1a:	eb1c 0303 	adds.w	r3, ip, r3
 8000c1e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000c22:	f080 811f 	bcs.w	8000e64 <__udivmoddi4+0x298>
 8000c26:	4299      	cmp	r1, r3
 8000c28:	f240 811c 	bls.w	8000e64 <__udivmoddi4+0x298>
 8000c2c:	3e02      	subs	r6, #2
 8000c2e:	4463      	add	r3, ip
 8000c30:	1a5b      	subs	r3, r3, r1
 8000c32:	b2a4      	uxth	r4, r4
 8000c34:	fbb3 f0f8 	udiv	r0, r3, r8
 8000c38:	fb08 3310 	mls	r3, r8, r0, r3
 8000c3c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c40:	fb00 f707 	mul.w	r7, r0, r7
 8000c44:	42a7      	cmp	r7, r4
 8000c46:	d90a      	bls.n	8000c5e <__udivmoddi4+0x92>
 8000c48:	eb1c 0404 	adds.w	r4, ip, r4
 8000c4c:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c50:	f080 810a 	bcs.w	8000e68 <__udivmoddi4+0x29c>
 8000c54:	42a7      	cmp	r7, r4
 8000c56:	f240 8107 	bls.w	8000e68 <__udivmoddi4+0x29c>
 8000c5a:	4464      	add	r4, ip
 8000c5c:	3802      	subs	r0, #2
 8000c5e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000c62:	1be4      	subs	r4, r4, r7
 8000c64:	2600      	movs	r6, #0
 8000c66:	b11d      	cbz	r5, 8000c70 <__udivmoddi4+0xa4>
 8000c68:	40d4      	lsrs	r4, r2
 8000c6a:	2300      	movs	r3, #0
 8000c6c:	e9c5 4300 	strd	r4, r3, [r5]
 8000c70:	4631      	mov	r1, r6
 8000c72:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c76:	428b      	cmp	r3, r1
 8000c78:	d909      	bls.n	8000c8e <__udivmoddi4+0xc2>
 8000c7a:	2d00      	cmp	r5, #0
 8000c7c:	f000 80ef 	beq.w	8000e5e <__udivmoddi4+0x292>
 8000c80:	2600      	movs	r6, #0
 8000c82:	e9c5 0100 	strd	r0, r1, [r5]
 8000c86:	4630      	mov	r0, r6
 8000c88:	4631      	mov	r1, r6
 8000c8a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c8e:	fab3 f683 	clz	r6, r3
 8000c92:	2e00      	cmp	r6, #0
 8000c94:	d14a      	bne.n	8000d2c <__udivmoddi4+0x160>
 8000c96:	428b      	cmp	r3, r1
 8000c98:	d302      	bcc.n	8000ca0 <__udivmoddi4+0xd4>
 8000c9a:	4282      	cmp	r2, r0
 8000c9c:	f200 80f9 	bhi.w	8000e92 <__udivmoddi4+0x2c6>
 8000ca0:	1a84      	subs	r4, r0, r2
 8000ca2:	eb61 0303 	sbc.w	r3, r1, r3
 8000ca6:	2001      	movs	r0, #1
 8000ca8:	469e      	mov	lr, r3
 8000caa:	2d00      	cmp	r5, #0
 8000cac:	d0e0      	beq.n	8000c70 <__udivmoddi4+0xa4>
 8000cae:	e9c5 4e00 	strd	r4, lr, [r5]
 8000cb2:	e7dd      	b.n	8000c70 <__udivmoddi4+0xa4>
 8000cb4:	b902      	cbnz	r2, 8000cb8 <__udivmoddi4+0xec>
 8000cb6:	deff      	udf	#255	; 0xff
 8000cb8:	fab2 f282 	clz	r2, r2
 8000cbc:	2a00      	cmp	r2, #0
 8000cbe:	f040 8092 	bne.w	8000de6 <__udivmoddi4+0x21a>
 8000cc2:	eba1 010c 	sub.w	r1, r1, ip
 8000cc6:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000cca:	fa1f fe8c 	uxth.w	lr, ip
 8000cce:	2601      	movs	r6, #1
 8000cd0:	0c20      	lsrs	r0, r4, #16
 8000cd2:	fbb1 f3f7 	udiv	r3, r1, r7
 8000cd6:	fb07 1113 	mls	r1, r7, r3, r1
 8000cda:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000cde:	fb0e f003 	mul.w	r0, lr, r3
 8000ce2:	4288      	cmp	r0, r1
 8000ce4:	d908      	bls.n	8000cf8 <__udivmoddi4+0x12c>
 8000ce6:	eb1c 0101 	adds.w	r1, ip, r1
 8000cea:	f103 38ff 	add.w	r8, r3, #4294967295
 8000cee:	d202      	bcs.n	8000cf6 <__udivmoddi4+0x12a>
 8000cf0:	4288      	cmp	r0, r1
 8000cf2:	f200 80cb 	bhi.w	8000e8c <__udivmoddi4+0x2c0>
 8000cf6:	4643      	mov	r3, r8
 8000cf8:	1a09      	subs	r1, r1, r0
 8000cfa:	b2a4      	uxth	r4, r4
 8000cfc:	fbb1 f0f7 	udiv	r0, r1, r7
 8000d00:	fb07 1110 	mls	r1, r7, r0, r1
 8000d04:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000d08:	fb0e fe00 	mul.w	lr, lr, r0
 8000d0c:	45a6      	cmp	lr, r4
 8000d0e:	d908      	bls.n	8000d22 <__udivmoddi4+0x156>
 8000d10:	eb1c 0404 	adds.w	r4, ip, r4
 8000d14:	f100 31ff 	add.w	r1, r0, #4294967295
 8000d18:	d202      	bcs.n	8000d20 <__udivmoddi4+0x154>
 8000d1a:	45a6      	cmp	lr, r4
 8000d1c:	f200 80bb 	bhi.w	8000e96 <__udivmoddi4+0x2ca>
 8000d20:	4608      	mov	r0, r1
 8000d22:	eba4 040e 	sub.w	r4, r4, lr
 8000d26:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000d2a:	e79c      	b.n	8000c66 <__udivmoddi4+0x9a>
 8000d2c:	f1c6 0720 	rsb	r7, r6, #32
 8000d30:	40b3      	lsls	r3, r6
 8000d32:	fa22 fc07 	lsr.w	ip, r2, r7
 8000d36:	ea4c 0c03 	orr.w	ip, ip, r3
 8000d3a:	fa20 f407 	lsr.w	r4, r0, r7
 8000d3e:	fa01 f306 	lsl.w	r3, r1, r6
 8000d42:	431c      	orrs	r4, r3
 8000d44:	40f9      	lsrs	r1, r7
 8000d46:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000d4a:	fa00 f306 	lsl.w	r3, r0, r6
 8000d4e:	fbb1 f8f9 	udiv	r8, r1, r9
 8000d52:	0c20      	lsrs	r0, r4, #16
 8000d54:	fa1f fe8c 	uxth.w	lr, ip
 8000d58:	fb09 1118 	mls	r1, r9, r8, r1
 8000d5c:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000d60:	fb08 f00e 	mul.w	r0, r8, lr
 8000d64:	4288      	cmp	r0, r1
 8000d66:	fa02 f206 	lsl.w	r2, r2, r6
 8000d6a:	d90b      	bls.n	8000d84 <__udivmoddi4+0x1b8>
 8000d6c:	eb1c 0101 	adds.w	r1, ip, r1
 8000d70:	f108 3aff 	add.w	sl, r8, #4294967295
 8000d74:	f080 8088 	bcs.w	8000e88 <__udivmoddi4+0x2bc>
 8000d78:	4288      	cmp	r0, r1
 8000d7a:	f240 8085 	bls.w	8000e88 <__udivmoddi4+0x2bc>
 8000d7e:	f1a8 0802 	sub.w	r8, r8, #2
 8000d82:	4461      	add	r1, ip
 8000d84:	1a09      	subs	r1, r1, r0
 8000d86:	b2a4      	uxth	r4, r4
 8000d88:	fbb1 f0f9 	udiv	r0, r1, r9
 8000d8c:	fb09 1110 	mls	r1, r9, r0, r1
 8000d90:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000d94:	fb00 fe0e 	mul.w	lr, r0, lr
 8000d98:	458e      	cmp	lr, r1
 8000d9a:	d908      	bls.n	8000dae <__udivmoddi4+0x1e2>
 8000d9c:	eb1c 0101 	adds.w	r1, ip, r1
 8000da0:	f100 34ff 	add.w	r4, r0, #4294967295
 8000da4:	d26c      	bcs.n	8000e80 <__udivmoddi4+0x2b4>
 8000da6:	458e      	cmp	lr, r1
 8000da8:	d96a      	bls.n	8000e80 <__udivmoddi4+0x2b4>
 8000daa:	3802      	subs	r0, #2
 8000dac:	4461      	add	r1, ip
 8000dae:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000db2:	fba0 9402 	umull	r9, r4, r0, r2
 8000db6:	eba1 010e 	sub.w	r1, r1, lr
 8000dba:	42a1      	cmp	r1, r4
 8000dbc:	46c8      	mov	r8, r9
 8000dbe:	46a6      	mov	lr, r4
 8000dc0:	d356      	bcc.n	8000e70 <__udivmoddi4+0x2a4>
 8000dc2:	d053      	beq.n	8000e6c <__udivmoddi4+0x2a0>
 8000dc4:	b15d      	cbz	r5, 8000dde <__udivmoddi4+0x212>
 8000dc6:	ebb3 0208 	subs.w	r2, r3, r8
 8000dca:	eb61 010e 	sbc.w	r1, r1, lr
 8000dce:	fa01 f707 	lsl.w	r7, r1, r7
 8000dd2:	fa22 f306 	lsr.w	r3, r2, r6
 8000dd6:	40f1      	lsrs	r1, r6
 8000dd8:	431f      	orrs	r7, r3
 8000dda:	e9c5 7100 	strd	r7, r1, [r5]
 8000dde:	2600      	movs	r6, #0
 8000de0:	4631      	mov	r1, r6
 8000de2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000de6:	f1c2 0320 	rsb	r3, r2, #32
 8000dea:	40d8      	lsrs	r0, r3
 8000dec:	fa0c fc02 	lsl.w	ip, ip, r2
 8000df0:	fa21 f303 	lsr.w	r3, r1, r3
 8000df4:	4091      	lsls	r1, r2
 8000df6:	4301      	orrs	r1, r0
 8000df8:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000dfc:	fa1f fe8c 	uxth.w	lr, ip
 8000e00:	fbb3 f0f7 	udiv	r0, r3, r7
 8000e04:	fb07 3610 	mls	r6, r7, r0, r3
 8000e08:	0c0b      	lsrs	r3, r1, #16
 8000e0a:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000e0e:	fb00 f60e 	mul.w	r6, r0, lr
 8000e12:	429e      	cmp	r6, r3
 8000e14:	fa04 f402 	lsl.w	r4, r4, r2
 8000e18:	d908      	bls.n	8000e2c <__udivmoddi4+0x260>
 8000e1a:	eb1c 0303 	adds.w	r3, ip, r3
 8000e1e:	f100 38ff 	add.w	r8, r0, #4294967295
 8000e22:	d22f      	bcs.n	8000e84 <__udivmoddi4+0x2b8>
 8000e24:	429e      	cmp	r6, r3
 8000e26:	d92d      	bls.n	8000e84 <__udivmoddi4+0x2b8>
 8000e28:	3802      	subs	r0, #2
 8000e2a:	4463      	add	r3, ip
 8000e2c:	1b9b      	subs	r3, r3, r6
 8000e2e:	b289      	uxth	r1, r1
 8000e30:	fbb3 f6f7 	udiv	r6, r3, r7
 8000e34:	fb07 3316 	mls	r3, r7, r6, r3
 8000e38:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e3c:	fb06 f30e 	mul.w	r3, r6, lr
 8000e40:	428b      	cmp	r3, r1
 8000e42:	d908      	bls.n	8000e56 <__udivmoddi4+0x28a>
 8000e44:	eb1c 0101 	adds.w	r1, ip, r1
 8000e48:	f106 38ff 	add.w	r8, r6, #4294967295
 8000e4c:	d216      	bcs.n	8000e7c <__udivmoddi4+0x2b0>
 8000e4e:	428b      	cmp	r3, r1
 8000e50:	d914      	bls.n	8000e7c <__udivmoddi4+0x2b0>
 8000e52:	3e02      	subs	r6, #2
 8000e54:	4461      	add	r1, ip
 8000e56:	1ac9      	subs	r1, r1, r3
 8000e58:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000e5c:	e738      	b.n	8000cd0 <__udivmoddi4+0x104>
 8000e5e:	462e      	mov	r6, r5
 8000e60:	4628      	mov	r0, r5
 8000e62:	e705      	b.n	8000c70 <__udivmoddi4+0xa4>
 8000e64:	4606      	mov	r6, r0
 8000e66:	e6e3      	b.n	8000c30 <__udivmoddi4+0x64>
 8000e68:	4618      	mov	r0, r3
 8000e6a:	e6f8      	b.n	8000c5e <__udivmoddi4+0x92>
 8000e6c:	454b      	cmp	r3, r9
 8000e6e:	d2a9      	bcs.n	8000dc4 <__udivmoddi4+0x1f8>
 8000e70:	ebb9 0802 	subs.w	r8, r9, r2
 8000e74:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000e78:	3801      	subs	r0, #1
 8000e7a:	e7a3      	b.n	8000dc4 <__udivmoddi4+0x1f8>
 8000e7c:	4646      	mov	r6, r8
 8000e7e:	e7ea      	b.n	8000e56 <__udivmoddi4+0x28a>
 8000e80:	4620      	mov	r0, r4
 8000e82:	e794      	b.n	8000dae <__udivmoddi4+0x1e2>
 8000e84:	4640      	mov	r0, r8
 8000e86:	e7d1      	b.n	8000e2c <__udivmoddi4+0x260>
 8000e88:	46d0      	mov	r8, sl
 8000e8a:	e77b      	b.n	8000d84 <__udivmoddi4+0x1b8>
 8000e8c:	3b02      	subs	r3, #2
 8000e8e:	4461      	add	r1, ip
 8000e90:	e732      	b.n	8000cf8 <__udivmoddi4+0x12c>
 8000e92:	4630      	mov	r0, r6
 8000e94:	e709      	b.n	8000caa <__udivmoddi4+0xde>
 8000e96:	4464      	add	r4, ip
 8000e98:	3802      	subs	r0, #2
 8000e9a:	e742      	b.n	8000d22 <__udivmoddi4+0x156>

08000e9c <__aeabi_idiv0>:
 8000e9c:	4770      	bx	lr
 8000e9e:	bf00      	nop

08000ea0 <removeChar>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void removeChar(char * str, char charToRemove){
 8000ea0:	b580      	push	{r7, lr}
 8000ea2:	b086      	sub	sp, #24
 8000ea4:	af00      	add	r7, sp, #0
 8000ea6:	6078      	str	r0, [r7, #4]
 8000ea8:	460b      	mov	r3, r1
 8000eaa:	70fb      	strb	r3, [r7, #3]
    int i, j;
    int len = strlen(str);
 8000eac:	6878      	ldr	r0, [r7, #4]
 8000eae:	f7ff f99f 	bl	80001f0 <strlen>
 8000eb2:	4603      	mov	r3, r0
 8000eb4:	60fb      	str	r3, [r7, #12]
    for(i=0; i<len; i++)
 8000eb6:	2300      	movs	r3, #0
 8000eb8:	617b      	str	r3, [r7, #20]
 8000eba:	e022      	b.n	8000f02 <removeChar+0x62>
    {
        if(str[i] == charToRemove)
 8000ebc:	697b      	ldr	r3, [r7, #20]
 8000ebe:	687a      	ldr	r2, [r7, #4]
 8000ec0:	4413      	add	r3, r2
 8000ec2:	781b      	ldrb	r3, [r3, #0]
 8000ec4:	78fa      	ldrb	r2, [r7, #3]
 8000ec6:	429a      	cmp	r2, r3
 8000ec8:	d118      	bne.n	8000efc <removeChar+0x5c>
        {
            for(j=i; j<len; j++)
 8000eca:	697b      	ldr	r3, [r7, #20]
 8000ecc:	613b      	str	r3, [r7, #16]
 8000ece:	e00b      	b.n	8000ee8 <removeChar+0x48>
            {
                str[j] = str[j+1];
 8000ed0:	693b      	ldr	r3, [r7, #16]
 8000ed2:	3301      	adds	r3, #1
 8000ed4:	687a      	ldr	r2, [r7, #4]
 8000ed6:	441a      	add	r2, r3
 8000ed8:	693b      	ldr	r3, [r7, #16]
 8000eda:	6879      	ldr	r1, [r7, #4]
 8000edc:	440b      	add	r3, r1
 8000ede:	7812      	ldrb	r2, [r2, #0]
 8000ee0:	701a      	strb	r2, [r3, #0]
            for(j=i; j<len; j++)
 8000ee2:	693b      	ldr	r3, [r7, #16]
 8000ee4:	3301      	adds	r3, #1
 8000ee6:	613b      	str	r3, [r7, #16]
 8000ee8:	693a      	ldr	r2, [r7, #16]
 8000eea:	68fb      	ldr	r3, [r7, #12]
 8000eec:	429a      	cmp	r2, r3
 8000eee:	dbef      	blt.n	8000ed0 <removeChar+0x30>
            }
            len--;
 8000ef0:	68fb      	ldr	r3, [r7, #12]
 8000ef2:	3b01      	subs	r3, #1
 8000ef4:	60fb      	str	r3, [r7, #12]
            i--;
 8000ef6:	697b      	ldr	r3, [r7, #20]
 8000ef8:	3b01      	subs	r3, #1
 8000efa:	617b      	str	r3, [r7, #20]
    for(i=0; i<len; i++)
 8000efc:	697b      	ldr	r3, [r7, #20]
 8000efe:	3301      	adds	r3, #1
 8000f00:	617b      	str	r3, [r7, #20]
 8000f02:	697a      	ldr	r2, [r7, #20]
 8000f04:	68fb      	ldr	r3, [r7, #12]
 8000f06:	429a      	cmp	r2, r3
 8000f08:	dbd8      	blt.n	8000ebc <removeChar+0x1c>
        }
    }
}
 8000f0a:	bf00      	nop
 8000f0c:	bf00      	nop
 8000f0e:	3718      	adds	r7, #24
 8000f10:	46bd      	mov	sp, r7
 8000f12:	bd80      	pop	{r7, pc}

08000f14 <slice>:

void slice(const char *str, char *result, size_t start, size_t end){
 8000f14:	b580      	push	{r7, lr}
 8000f16:	b084      	sub	sp, #16
 8000f18:	af00      	add	r7, sp, #0
 8000f1a:	60f8      	str	r0, [r7, #12]
 8000f1c:	60b9      	str	r1, [r7, #8]
 8000f1e:	607a      	str	r2, [r7, #4]
 8000f20:	603b      	str	r3, [r7, #0]
    strncpy(result, str + start, end - start);
 8000f22:	68fa      	ldr	r2, [r7, #12]
 8000f24:	687b      	ldr	r3, [r7, #4]
 8000f26:	18d1      	adds	r1, r2, r3
 8000f28:	683a      	ldr	r2, [r7, #0]
 8000f2a:	687b      	ldr	r3, [r7, #4]
 8000f2c:	1ad3      	subs	r3, r2, r3
 8000f2e:	461a      	mov	r2, r3
 8000f30:	68b8      	ldr	r0, [r7, #8]
 8000f32:	f005 f866 	bl	8006002 <strncpy>
}
 8000f36:	bf00      	nop
 8000f38:	3710      	adds	r7, #16
 8000f3a:	46bd      	mov	sp, r7
 8000f3c:	bd80      	pop	{r7, pc}
	...

08000f40 <MY_UART_Transmit>:


void MY_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint32_t Timeout){
 8000f40:	b580      	push	{r7, lr}
 8000f42:	b084      	sub	sp, #16
 8000f44:	af00      	add	r7, sp, #0
 8000f46:	60f8      	str	r0, [r7, #12]
 8000f48:	60b9      	str	r1, [r7, #8]
 8000f4a:	607a      	str	r2, [r7, #4]

	removeChar(pData,'\n');
 8000f4c:	210a      	movs	r1, #10
 8000f4e:	68b8      	ldr	r0, [r7, #8]
 8000f50:	f7ff ffa6 	bl	8000ea0 <removeChar>
	removeChar(pData,'\r');
 8000f54:	210d      	movs	r1, #13
 8000f56:	68b8      	ldr	r0, [r7, #8]
 8000f58:	f7ff ffa2 	bl	8000ea0 <removeChar>
	strcat(pData, "\r\n");
 8000f5c:	68b8      	ldr	r0, [r7, #8]
 8000f5e:	f7ff f947 	bl	80001f0 <strlen>
 8000f62:	4603      	mov	r3, r0
 8000f64:	461a      	mov	r2, r3
 8000f66:	68bb      	ldr	r3, [r7, #8]
 8000f68:	4413      	add	r3, r2
 8000f6a:	4a09      	ldr	r2, [pc, #36]	; (8000f90 <MY_UART_Transmit+0x50>)
 8000f6c:	8811      	ldrh	r1, [r2, #0]
 8000f6e:	7892      	ldrb	r2, [r2, #2]
 8000f70:	8019      	strh	r1, [r3, #0]
 8000f72:	709a      	strb	r2, [r3, #2]

	HAL_UART_Transmit(&huart3, pData, strlen(pData), Timeout);
 8000f74:	68b8      	ldr	r0, [r7, #8]
 8000f76:	f7ff f93b 	bl	80001f0 <strlen>
 8000f7a:	4603      	mov	r3, r0
 8000f7c:	b29a      	uxth	r2, r3
 8000f7e:	687b      	ldr	r3, [r7, #4]
 8000f80:	68b9      	ldr	r1, [r7, #8]
 8000f82:	4804      	ldr	r0, [pc, #16]	; (8000f94 <MY_UART_Transmit+0x54>)
 8000f84:	f003 fc91 	bl	80048aa <HAL_UART_Transmit>
}
 8000f88:	bf00      	nop
 8000f8a:	3710      	adds	r7, #16
 8000f8c:	46bd      	mov	sp, r7
 8000f8e:	bd80      	pop	{r7, pc}
 8000f90:	080087d8 	.word	0x080087d8
 8000f94:	20000308 	.word	0x20000308

08000f98 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000f98:	b5b0      	push	{r4, r5, r7, lr}
 8000f9a:	b08c      	sub	sp, #48	; 0x30
 8000f9c:	af02      	add	r7, sp, #8
  /* USER CODE BEGIN 1 */


	uint8_t dataBuffer[2] = {0};
 8000f9e:	2300      	movs	r3, #0
 8000fa0:	82bb      	strh	r3, [r7, #20]
	int deviceReadyFlag = 1;
 8000fa2:	2301      	movs	r3, #1
 8000fa4:	627b      	str	r3, [r7, #36]	; 0x24

	uint8_t adsWrite[6] = {0x01, 0xC1, 0x83};
 8000fa6:	4ba9      	ldr	r3, [pc, #676]	; (800124c <main+0x2b4>)
 8000fa8:	60fb      	str	r3, [r7, #12]
 8000faa:	2300      	movs	r3, #0
 8000fac:	823b      	strh	r3, [r7, #16]
	uint8_t result[5];
	int16_t reading;
	float voltage;
	const float voltageConv = 5.053 / 32768.0;
 8000fae:	4ba8      	ldr	r3, [pc, #672]	; (8001250 <main+0x2b8>)
 8000fb0:	623b      	str	r3, [r7, #32]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000fb2:	f000 fe25 	bl	8001c00 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000fb6:	f000 f96f 	bl	8001298 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000fba:	f000 fabd 	bl	8001538 <MX_GPIO_Init>
  MX_ETH_Init();
 8000fbe:	f000 f9d5 	bl	800136c <MX_ETH_Init>
  MX_USART3_UART_Init();
 8000fc2:	f000 fa61 	bl	8001488 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 8000fc6:	f000 fa89 	bl	80014dc <MX_USB_OTG_FS_PCD_Init>
  MX_I2C2_Init();
 8000fca:	f000 fa1d 	bl	8001408 <MX_I2C2_Init>
  /* USER CODE BEGIN 2 */
  HAL_UART_Receive_IT(&huart3,testReceiveData,sizeof(testReceiveData));
 8000fce:	223c      	movs	r2, #60	; 0x3c
 8000fd0:	49a0      	ldr	r1, [pc, #640]	; (8001254 <main+0x2bc>)
 8000fd2:	48a1      	ldr	r0, [pc, #644]	; (8001258 <main+0x2c0>)
 8000fd4:	f003 fcfb 	bl	80049ce <HAL_UART_Receive_IT>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {

	  if(deviceReadyFlag)
 8000fd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000fda:	2b00      	cmp	r3, #0
 8000fdc:	d04b      	beq.n	8001076 <main+0xde>
	  {
		  deviceReadyFlag = 0;
 8000fde:	2300      	movs	r3, #0
 8000fe0:	627b      	str	r3, [r7, #36]	; 0x24
		  HAL_StatusTypeDef ready = HAL_I2C_IsDeviceReady(&hi2c2, ADS1015_DEV_ADDR_GND, 10, 3000);
 8000fe2:	2390      	movs	r3, #144	; 0x90
 8000fe4:	b299      	uxth	r1, r3
 8000fe6:	f640 33b8 	movw	r3, #3000	; 0xbb8
 8000fea:	220a      	movs	r2, #10
 8000fec:	489b      	ldr	r0, [pc, #620]	; (800125c <main+0x2c4>)
 8000fee:	f002 f983 	bl	80032f8 <HAL_I2C_IsDeviceReady>
 8000ff2:	4603      	mov	r3, r0
 8000ff4:	77fb      	strb	r3, [r7, #31]
		  if (ready != HAL_OK)
 8000ff6:	7ffb      	ldrb	r3, [r7, #31]
 8000ff8:	2b00      	cmp	r3, #0
 8000ffa:	d00d      	beq.n	8001018 <main+0x80>
			  strcpy((char*)dataBuffer, "DEVICE 1 NOT READY");
 8000ffc:	f107 0314 	add.w	r3, r7, #20
 8001000:	4a97      	ldr	r2, [pc, #604]	; (8001260 <main+0x2c8>)
 8001002:	461c      	mov	r4, r3
 8001004:	4615      	mov	r5, r2
 8001006:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001008:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800100a:	682b      	ldr	r3, [r5, #0]
 800100c:	461a      	mov	r2, r3
 800100e:	8022      	strh	r2, [r4, #0]
 8001010:	3402      	adds	r4, #2
 8001012:	0c1b      	lsrs	r3, r3, #16
 8001014:	7023      	strb	r3, [r4, #0]
 8001016:	e005      	b.n	8001024 <main+0x8c>
		  else
			  MY_UART_Transmit(&huart3, "DEVICE 1 READY", 1000);
 8001018:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800101c:	4991      	ldr	r1, [pc, #580]	; (8001264 <main+0x2cc>)
 800101e:	488e      	ldr	r0, [pc, #568]	; (8001258 <main+0x2c0>)
 8001020:	f7ff ff8e 	bl	8000f40 <MY_UART_Transmit>

		  ready = HAL_I2C_IsDeviceReady(&hi2c2, ADS1015_DEV_ADDR_VDD, 10, 3000);
 8001024:	2392      	movs	r3, #146	; 0x92
 8001026:	b299      	uxth	r1, r3
 8001028:	f640 33b8 	movw	r3, #3000	; 0xbb8
 800102c:	220a      	movs	r2, #10
 800102e:	488b      	ldr	r0, [pc, #556]	; (800125c <main+0x2c4>)
 8001030:	f002 f962 	bl	80032f8 <HAL_I2C_IsDeviceReady>
 8001034:	4603      	mov	r3, r0
 8001036:	77fb      	strb	r3, [r7, #31]
		  if (ready != HAL_OK)
 8001038:	7ffb      	ldrb	r3, [r7, #31]
 800103a:	2b00      	cmp	r3, #0
 800103c:	d00d      	beq.n	800105a <main+0xc2>
		  	 strcpy((char*)dataBuffer, "DEVICE 2 NOT READY");
 800103e:	f107 0314 	add.w	r3, r7, #20
 8001042:	4a89      	ldr	r2, [pc, #548]	; (8001268 <main+0x2d0>)
 8001044:	461c      	mov	r4, r3
 8001046:	4615      	mov	r5, r2
 8001048:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800104a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800104c:	682b      	ldr	r3, [r5, #0]
 800104e:	461a      	mov	r2, r3
 8001050:	8022      	strh	r2, [r4, #0]
 8001052:	3402      	adds	r4, #2
 8001054:	0c1b      	lsrs	r3, r3, #16
 8001056:	7023      	strb	r3, [r4, #0]
 8001058:	e005      	b.n	8001066 <main+0xce>
		  else
		  	 MY_UART_Transmit(&huart3, "DEVICE 2 READY", 1000);
 800105a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800105e:	4983      	ldr	r1, [pc, #524]	; (800126c <main+0x2d4>)
 8001060:	487d      	ldr	r0, [pc, #500]	; (8001258 <main+0x2c0>)
 8001062:	f7ff ff6d 	bl	8000f40 <MY_UART_Transmit>


		  MY_UART_Transmit(&huart3, dataBuffer, 1000);
 8001066:	f107 0314 	add.w	r3, r7, #20
 800106a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800106e:	4619      	mov	r1, r3
 8001070:	4879      	ldr	r0, [pc, #484]	; (8001258 <main+0x2c0>)
 8001072:	f7ff ff65 	bl	8000f40 <MY_UART_Transmit>
	  }

	  if(i2cFlag)
 8001076:	4b7e      	ldr	r3, [pc, #504]	; (8001270 <main+0x2d8>)
 8001078:	681b      	ldr	r3, [r3, #0]
 800107a:	2b00      	cmp	r3, #0
 800107c:	f000 809f 	beq.w	80011be <main+0x226>
	  {
	  	  		i2cFlag = 0;
 8001080:	4b7b      	ldr	r3, [pc, #492]	; (8001270 <main+0x2d8>)
 8001082:	2200      	movs	r2, #0
 8001084:	601a      	str	r2, [r3, #0]

	  	  		if(readFlag)
 8001086:	4b7b      	ldr	r3, [pc, #492]	; (8001274 <main+0x2dc>)
 8001088:	681b      	ldr	r3, [r3, #0]
 800108a:	2b00      	cmp	r3, #0
 800108c:	f000 808f 	beq.w	80011ae <main+0x216>
	  	  		{
	  	  			readFlag = 0;
 8001090:	4b78      	ldr	r3, [pc, #480]	; (8001274 <main+0x2dc>)
 8001092:	2200      	movs	r2, #0
 8001094:	601a      	str	r2, [r3, #0]
	  	  			adsWrite[0] = 0x01;
 8001096:	2301      	movs	r3, #1
 8001098:	733b      	strb	r3, [r7, #12]
	  	  			HAL_StatusTypeDef ret = HAL_I2C_Master_Transmit(&hi2c2, devAddr, adsWrite, 3, 1000);
 800109a:	4b77      	ldr	r3, [pc, #476]	; (8001278 <main+0x2e0>)
 800109c:	8819      	ldrh	r1, [r3, #0]
 800109e:	f107 020c 	add.w	r2, r7, #12
 80010a2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80010a6:	9300      	str	r3, [sp, #0]
 80010a8:	2303      	movs	r3, #3
 80010aa:	486c      	ldr	r0, [pc, #432]	; (800125c <main+0x2c4>)
 80010ac:	f001 fe00 	bl	8002cb0 <HAL_I2C_Master_Transmit>
 80010b0:	4603      	mov	r3, r0
 80010b2:	77bb      	strb	r3, [r7, #30]
	  	  			if ( ret != HAL_OK )
 80010b4:	7fbb      	ldrb	r3, [r7, #30]
 80010b6:	2b00      	cmp	r3, #0
 80010b8:	d00d      	beq.n	80010d6 <main+0x13e>
	  	  			{
	  	  				strcpy((char*)dataBuffer, "Error ConfigRegister Tx in Rx\r\n");
 80010ba:	f107 0314 	add.w	r3, r7, #20
 80010be:	4a6f      	ldr	r2, [pc, #444]	; (800127c <main+0x2e4>)
 80010c0:	461c      	mov	r4, r3
 80010c2:	4615      	mov	r5, r2
 80010c4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80010c6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80010c8:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 80010cc:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	  	  				errorFlag = 1;
 80010d0:	4b6b      	ldr	r3, [pc, #428]	; (8001280 <main+0x2e8>)
 80010d2:	2201      	movs	r2, #1
 80010d4:	601a      	str	r2, [r3, #0]
	  	  			}

	  	  			adsWrite[0] = 0x00;
 80010d6:	2300      	movs	r3, #0
 80010d8:	733b      	strb	r3, [r7, #12]
	  	  			ret = HAL_I2C_Master_Transmit(&hi2c2, devAddr, adsWrite, 1, 1000);
 80010da:	4b67      	ldr	r3, [pc, #412]	; (8001278 <main+0x2e0>)
 80010dc:	8819      	ldrh	r1, [r3, #0]
 80010de:	f107 020c 	add.w	r2, r7, #12
 80010e2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80010e6:	9300      	str	r3, [sp, #0]
 80010e8:	2301      	movs	r3, #1
 80010ea:	485c      	ldr	r0, [pc, #368]	; (800125c <main+0x2c4>)
 80010ec:	f001 fde0 	bl	8002cb0 <HAL_I2C_Master_Transmit>
 80010f0:	4603      	mov	r3, r0
 80010f2:	77bb      	strb	r3, [r7, #30]
	  	  			if ( ret != HAL_OK )
 80010f4:	7fbb      	ldrb	r3, [r7, #30]
 80010f6:	2b00      	cmp	r3, #0
 80010f8:	d00d      	beq.n	8001116 <main+0x17e>
	  	  			{
	  	  				strcpy((char*)dataBuffer, "Error ConversionRegister Tx in Rx\r\n");
 80010fa:	f107 0314 	add.w	r3, r7, #20
 80010fe:	4a61      	ldr	r2, [pc, #388]	; (8001284 <main+0x2ec>)
 8001100:	461c      	mov	r4, r3
 8001102:	4615      	mov	r5, r2
 8001104:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001106:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001108:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800110a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800110c:	682b      	ldr	r3, [r5, #0]
 800110e:	6023      	str	r3, [r4, #0]
	  	  				errorFlag = 1;
 8001110:	4b5b      	ldr	r3, [pc, #364]	; (8001280 <main+0x2e8>)
 8001112:	2201      	movs	r2, #1
 8001114:	601a      	str	r2, [r3, #0]
	  	  			}

	  	  			ret = HAL_I2C_Master_Receive(&hi2c2, devAddr, dataBuffer, 2, 3000);
 8001116:	4b58      	ldr	r3, [pc, #352]	; (8001278 <main+0x2e0>)
 8001118:	8819      	ldrh	r1, [r3, #0]
 800111a:	f107 0214 	add.w	r2, r7, #20
 800111e:	f640 33b8 	movw	r3, #3000	; 0xbb8
 8001122:	9300      	str	r3, [sp, #0]
 8001124:	2302      	movs	r3, #2
 8001126:	484d      	ldr	r0, [pc, #308]	; (800125c <main+0x2c4>)
 8001128:	f001 fec0 	bl	8002eac <HAL_I2C_Master_Receive>
 800112c:	4603      	mov	r3, r0
 800112e:	77bb      	strb	r3, [r7, #30]
	  	  			if(ret != HAL_OK)
 8001130:	7fbb      	ldrb	r3, [r7, #30]
 8001132:	2b00      	cmp	r3, #0
 8001134:	d00b      	beq.n	800114e <main+0x1b6>
	  	  			{
	  	  				strcpy((char*)dataBuffer, "Error Data Rx\r\n");
 8001136:	f107 0314 	add.w	r3, r7, #20
 800113a:	4a53      	ldr	r2, [pc, #332]	; (8001288 <main+0x2f0>)
 800113c:	461c      	mov	r4, r3
 800113e:	4613      	mov	r3, r2
 8001140:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001142:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	  	  				errorFlag = 1;
 8001146:	4b4e      	ldr	r3, [pc, #312]	; (8001280 <main+0x2e8>)
 8001148:	2201      	movs	r2, #1
 800114a:	601a      	str	r2, [r3, #0]
 800114c:	e02f      	b.n	80011ae <main+0x216>
	  	  			}

	  	  			else
	  	  			{
	  	  				reading = (dataBuffer[0] << 8 | dataBuffer[1]);
 800114e:	7d3b      	ldrb	r3, [r7, #20]
 8001150:	021b      	lsls	r3, r3, #8
 8001152:	b21a      	sxth	r2, r3
 8001154:	7d7b      	ldrb	r3, [r7, #21]
 8001156:	b21b      	sxth	r3, r3
 8001158:	4313      	orrs	r3, r2
 800115a:	83bb      	strh	r3, [r7, #28]
	  	  				voltage = reading * voltageConv;
 800115c:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8001160:	ee07 3a90 	vmov	s15, r3
 8001164:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001168:	ed97 7a08 	vldr	s14, [r7, #32]
 800116c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001170:	edc7 7a06 	vstr	s15, [r7, #24]
	  	  				gcvt(voltage, 6, result);
 8001174:	69b8      	ldr	r0, [r7, #24]
 8001176:	f7ff f9f7 	bl	8000568 <__aeabi_f2d>
 800117a:	4604      	mov	r4, r0
 800117c:	460d      	mov	r5, r1
 800117e:	1d3b      	adds	r3, r7, #4
 8001180:	4619      	mov	r1, r3
 8001182:	2006      	movs	r0, #6
 8001184:	ec45 4b10 	vmov	d0, r4, r5
 8001188:	f004 feca 	bl	8005f20 <gcvt>
	  	  				HAL_UART_Transmit(&huart3, "RECEIVED: ", 10, 1000);
 800118c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001190:	220a      	movs	r2, #10
 8001192:	493e      	ldr	r1, [pc, #248]	; (800128c <main+0x2f4>)
 8001194:	4830      	ldr	r0, [pc, #192]	; (8001258 <main+0x2c0>)
 8001196:	f003 fb88 	bl	80048aa <HAL_UART_Transmit>
	  	  				MY_UART_Transmit(&huart3, result, 1000);
 800119a:	1d3b      	adds	r3, r7, #4
 800119c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80011a0:	4619      	mov	r1, r3
 80011a2:	482d      	ldr	r0, [pc, #180]	; (8001258 <main+0x2c0>)
 80011a4:	f7ff fecc 	bl	8000f40 <MY_UART_Transmit>
	  	  				resetFlag = 1;
 80011a8:	4b39      	ldr	r3, [pc, #228]	; (8001290 <main+0x2f8>)
 80011aa:	2201      	movs	r2, #1
 80011ac:	601a      	str	r2, [r3, #0]
	  	  			}
	  	  	  	}

	  	  	HAL_UART_Receive_IT(&huart3,testReceiveData,sizeof(testReceiveData));
 80011ae:	223c      	movs	r2, #60	; 0x3c
 80011b0:	4928      	ldr	r1, [pc, #160]	; (8001254 <main+0x2bc>)
 80011b2:	4829      	ldr	r0, [pc, #164]	; (8001258 <main+0x2c0>)
 80011b4:	f003 fc0b 	bl	80049ce <HAL_UART_Receive_IT>
	  	  	resetFlag = 1;
 80011b8:	4b35      	ldr	r3, [pc, #212]	; (8001290 <main+0x2f8>)
 80011ba:	2201      	movs	r2, #1
 80011bc:	601a      	str	r2, [r3, #0]
	  	}

	  	if(resetFlag)
 80011be:	4b34      	ldr	r3, [pc, #208]	; (8001290 <main+0x2f8>)
 80011c0:	681b      	ldr	r3, [r3, #0]
 80011c2:	2b00      	cmp	r3, #0
 80011c4:	d030      	beq.n	8001228 <main+0x290>
	  	{
	  		resetFlag = 0;
 80011c6:	4b32      	ldr	r3, [pc, #200]	; (8001290 <main+0x2f8>)
 80011c8:	2200      	movs	r2, #0
 80011ca:	601a      	str	r2, [r3, #0]
	  		reading = 0;
 80011cc:	2300      	movs	r3, #0
 80011ce:	83bb      	strh	r3, [r7, #28]
	  		voltage = 0;
 80011d0:	f04f 0300 	mov.w	r3, #0
 80011d4:	61bb      	str	r3, [r7, #24]
	  		memset(dataBuffer,0,sizeof(dataBuffer));
 80011d6:	f107 0314 	add.w	r3, r7, #20
 80011da:	2202      	movs	r2, #2
 80011dc:	2100      	movs	r1, #0
 80011de:	4618      	mov	r0, r3
 80011e0:	f004 fee6 	bl	8005fb0 <memset>

	  		adsWrite[0] = 0x01;
 80011e4:	2301      	movs	r3, #1
 80011e6:	733b      	strb	r3, [r7, #12]
	  		adsWrite[1] = 0x85;
 80011e8:	2385      	movs	r3, #133	; 0x85
 80011ea:	737b      	strb	r3, [r7, #13]
	  		adsWrite[2] = 0x83;
 80011ec:	2383      	movs	r3, #131	; 0x83
 80011ee:	73bb      	strb	r3, [r7, #14]
	  		HAL_StatusTypeDef ret = HAL_I2C_Master_Transmit(&hi2c2, ADS1015_DEV_ADDR_GND, adsWrite, 3, 1000);
 80011f0:	2390      	movs	r3, #144	; 0x90
 80011f2:	b299      	uxth	r1, r3
 80011f4:	f107 020c 	add.w	r2, r7, #12
 80011f8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80011fc:	9300      	str	r3, [sp, #0]
 80011fe:	2303      	movs	r3, #3
 8001200:	4816      	ldr	r0, [pc, #88]	; (800125c <main+0x2c4>)
 8001202:	f001 fd55 	bl	8002cb0 <HAL_I2C_Master_Transmit>
 8001206:	4603      	mov	r3, r0
 8001208:	75fb      	strb	r3, [r7, #23]
	  		if ( ret != HAL_OK )
 800120a:	7dfb      	ldrb	r3, [r7, #23]
 800120c:	2b00      	cmp	r3, #0
 800120e:	d00b      	beq.n	8001228 <main+0x290>
	  		{
				strcpy((char*)dataBuffer, "Error Reset Tx\r\n");
 8001210:	f107 0314 	add.w	r3, r7, #20
 8001214:	4a1f      	ldr	r2, [pc, #124]	; (8001294 <main+0x2fc>)
 8001216:	461c      	mov	r4, r3
 8001218:	4615      	mov	r5, r2
 800121a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800121c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800121e:	682b      	ldr	r3, [r5, #0]
 8001220:	7023      	strb	r3, [r4, #0]
				errorFlag = 1;
 8001222:	4b17      	ldr	r3, [pc, #92]	; (8001280 <main+0x2e8>)
 8001224:	2201      	movs	r2, #1
 8001226:	601a      	str	r2, [r3, #0]
	  		}
	  	}

	  	if(errorFlag)
 8001228:	4b15      	ldr	r3, [pc, #84]	; (8001280 <main+0x2e8>)
 800122a:	681b      	ldr	r3, [r3, #0]
 800122c:	2b00      	cmp	r3, #0
 800122e:	f43f aed3 	beq.w	8000fd8 <main+0x40>
		{
			 errorFlag = 0;
 8001232:	4b13      	ldr	r3, [pc, #76]	; (8001280 <main+0x2e8>)
 8001234:	2200      	movs	r2, #0
 8001236:	601a      	str	r2, [r3, #0]
			 MY_UART_Transmit(&huart3, dataBuffer, 1000);
 8001238:	f107 0314 	add.w	r3, r7, #20
 800123c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001240:	4619      	mov	r1, r3
 8001242:	4805      	ldr	r0, [pc, #20]	; (8001258 <main+0x2c0>)
 8001244:	f7ff fe7c 	bl	8000f40 <MY_UART_Transmit>
	  if(deviceReadyFlag)
 8001248:	e6c6      	b.n	8000fd8 <main+0x40>
 800124a:	bf00      	nop
 800124c:	0083c101 	.word	0x0083c101
 8001250:	3921b22d 	.word	0x3921b22d
 8001254:	20000858 	.word	0x20000858
 8001258:	20000308 	.word	0x20000308
 800125c:	200002b4 	.word	0x200002b4
 8001260:	080087dc 	.word	0x080087dc
 8001264:	080087f0 	.word	0x080087f0
 8001268:	08008800 	.word	0x08008800
 800126c:	08008814 	.word	0x08008814
 8001270:	200008a0 	.word	0x200008a0
 8001274:	2000089c 	.word	0x2000089c
 8001278:	20000894 	.word	0x20000894
 800127c:	08008824 	.word	0x08008824
 8001280:	20000898 	.word	0x20000898
 8001284:	08008844 	.word	0x08008844
 8001288:	08008868 	.word	0x08008868
 800128c:	08008878 	.word	0x08008878
 8001290:	200008a4 	.word	0x200008a4
 8001294:	08008884 	.word	0x08008884

08001298 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001298:	b580      	push	{r7, lr}
 800129a:	b094      	sub	sp, #80	; 0x50
 800129c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800129e:	f107 0320 	add.w	r3, r7, #32
 80012a2:	2230      	movs	r2, #48	; 0x30
 80012a4:	2100      	movs	r1, #0
 80012a6:	4618      	mov	r0, r3
 80012a8:	f004 fe82 	bl	8005fb0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80012ac:	f107 030c 	add.w	r3, r7, #12
 80012b0:	2200      	movs	r2, #0
 80012b2:	601a      	str	r2, [r3, #0]
 80012b4:	605a      	str	r2, [r3, #4]
 80012b6:	609a      	str	r2, [r3, #8]
 80012b8:	60da      	str	r2, [r3, #12]
 80012ba:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80012bc:	2300      	movs	r3, #0
 80012be:	60bb      	str	r3, [r7, #8]
 80012c0:	4b28      	ldr	r3, [pc, #160]	; (8001364 <SystemClock_Config+0xcc>)
 80012c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012c4:	4a27      	ldr	r2, [pc, #156]	; (8001364 <SystemClock_Config+0xcc>)
 80012c6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80012ca:	6413      	str	r3, [r2, #64]	; 0x40
 80012cc:	4b25      	ldr	r3, [pc, #148]	; (8001364 <SystemClock_Config+0xcc>)
 80012ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012d0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80012d4:	60bb      	str	r3, [r7, #8]
 80012d6:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80012d8:	2300      	movs	r3, #0
 80012da:	607b      	str	r3, [r7, #4]
 80012dc:	4b22      	ldr	r3, [pc, #136]	; (8001368 <SystemClock_Config+0xd0>)
 80012de:	681b      	ldr	r3, [r3, #0]
 80012e0:	4a21      	ldr	r2, [pc, #132]	; (8001368 <SystemClock_Config+0xd0>)
 80012e2:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80012e6:	6013      	str	r3, [r2, #0]
 80012e8:	4b1f      	ldr	r3, [pc, #124]	; (8001368 <SystemClock_Config+0xd0>)
 80012ea:	681b      	ldr	r3, [r3, #0]
 80012ec:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80012f0:	607b      	str	r3, [r7, #4]
 80012f2:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80012f4:	2301      	movs	r3, #1
 80012f6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 80012f8:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 80012fc:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80012fe:	2302      	movs	r3, #2
 8001300:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001302:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001306:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8001308:	2304      	movs	r3, #4
 800130a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 800130c:	23a8      	movs	r3, #168	; 0xa8
 800130e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001310:	2302      	movs	r3, #2
 8001312:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8001314:	2307      	movs	r3, #7
 8001316:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001318:	f107 0320 	add.w	r3, r7, #32
 800131c:	4618      	mov	r0, r3
 800131e:	f002 fddf 	bl	8003ee0 <HAL_RCC_OscConfig>
 8001322:	4603      	mov	r3, r0
 8001324:	2b00      	cmp	r3, #0
 8001326:	d001      	beq.n	800132c <SystemClock_Config+0x94>
  {
    Error_Handler();
 8001328:	f000 fa14 	bl	8001754 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800132c:	230f      	movs	r3, #15
 800132e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001330:	2302      	movs	r3, #2
 8001332:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001334:	2300      	movs	r3, #0
 8001336:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001338:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800133c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800133e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001342:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001344:	f107 030c 	add.w	r3, r7, #12
 8001348:	2105      	movs	r1, #5
 800134a:	4618      	mov	r0, r3
 800134c:	f003 f840 	bl	80043d0 <HAL_RCC_ClockConfig>
 8001350:	4603      	mov	r3, r0
 8001352:	2b00      	cmp	r3, #0
 8001354:	d001      	beq.n	800135a <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8001356:	f000 f9fd 	bl	8001754 <Error_Handler>
  }
}
 800135a:	bf00      	nop
 800135c:	3750      	adds	r7, #80	; 0x50
 800135e:	46bd      	mov	sp, r7
 8001360:	bd80      	pop	{r7, pc}
 8001362:	bf00      	nop
 8001364:	40023800 	.word	0x40023800
 8001368:	40007000 	.word	0x40007000

0800136c <MX_ETH_Init>:
  * @brief ETH Initialization Function
  * @param None
  * @retval None
  */
static void MX_ETH_Init(void)
{
 800136c:	b580      	push	{r7, lr}
 800136e:	af00      	add	r7, sp, #0
   static uint8_t MACAddr[6];

  /* USER CODE BEGIN ETH_Init 1 */

  /* USER CODE END ETH_Init 1 */
  heth.Instance = ETH;
 8001370:	4b1f      	ldr	r3, [pc, #124]	; (80013f0 <MX_ETH_Init+0x84>)
 8001372:	4a20      	ldr	r2, [pc, #128]	; (80013f4 <MX_ETH_Init+0x88>)
 8001374:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 8001376:	4b20      	ldr	r3, [pc, #128]	; (80013f8 <MX_ETH_Init+0x8c>)
 8001378:	2200      	movs	r2, #0
 800137a:	701a      	strb	r2, [r3, #0]
  MACAddr[1] = 0x80;
 800137c:	4b1e      	ldr	r3, [pc, #120]	; (80013f8 <MX_ETH_Init+0x8c>)
 800137e:	2280      	movs	r2, #128	; 0x80
 8001380:	705a      	strb	r2, [r3, #1]
  MACAddr[2] = 0xE1;
 8001382:	4b1d      	ldr	r3, [pc, #116]	; (80013f8 <MX_ETH_Init+0x8c>)
 8001384:	22e1      	movs	r2, #225	; 0xe1
 8001386:	709a      	strb	r2, [r3, #2]
  MACAddr[3] = 0x00;
 8001388:	4b1b      	ldr	r3, [pc, #108]	; (80013f8 <MX_ETH_Init+0x8c>)
 800138a:	2200      	movs	r2, #0
 800138c:	70da      	strb	r2, [r3, #3]
  MACAddr[4] = 0x00;
 800138e:	4b1a      	ldr	r3, [pc, #104]	; (80013f8 <MX_ETH_Init+0x8c>)
 8001390:	2200      	movs	r2, #0
 8001392:	711a      	strb	r2, [r3, #4]
  MACAddr[5] = 0x00;
 8001394:	4b18      	ldr	r3, [pc, #96]	; (80013f8 <MX_ETH_Init+0x8c>)
 8001396:	2200      	movs	r2, #0
 8001398:	715a      	strb	r2, [r3, #5]
  heth.Init.MACAddr = &MACAddr[0];
 800139a:	4b15      	ldr	r3, [pc, #84]	; (80013f0 <MX_ETH_Init+0x84>)
 800139c:	4a16      	ldr	r2, [pc, #88]	; (80013f8 <MX_ETH_Init+0x8c>)
 800139e:	605a      	str	r2, [r3, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 80013a0:	4b13      	ldr	r3, [pc, #76]	; (80013f0 <MX_ETH_Init+0x84>)
 80013a2:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 80013a6:	609a      	str	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 80013a8:	4b11      	ldr	r3, [pc, #68]	; (80013f0 <MX_ETH_Init+0x84>)
 80013aa:	4a14      	ldr	r2, [pc, #80]	; (80013fc <MX_ETH_Init+0x90>)
 80013ac:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 80013ae:	4b10      	ldr	r3, [pc, #64]	; (80013f0 <MX_ETH_Init+0x84>)
 80013b0:	4a13      	ldr	r2, [pc, #76]	; (8001400 <MX_ETH_Init+0x94>)
 80013b2:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1524;
 80013b4:	4b0e      	ldr	r3, [pc, #56]	; (80013f0 <MX_ETH_Init+0x84>)
 80013b6:	f240 52f4 	movw	r2, #1524	; 0x5f4
 80013ba:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  if (HAL_ETH_Init(&heth) != HAL_OK)
 80013bc:	480c      	ldr	r0, [pc, #48]	; (80013f0 <MX_ETH_Init+0x84>)
 80013be:	f000 fe59 	bl	8002074 <HAL_ETH_Init>
 80013c2:	4603      	mov	r3, r0
 80013c4:	2b00      	cmp	r3, #0
 80013c6:	d001      	beq.n	80013cc <MX_ETH_Init+0x60>
  {
    Error_Handler();
 80013c8:	f000 f9c4 	bl	8001754 <Error_Handler>
  }

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 80013cc:	2238      	movs	r2, #56	; 0x38
 80013ce:	2100      	movs	r1, #0
 80013d0:	480c      	ldr	r0, [pc, #48]	; (8001404 <MX_ETH_Init+0x98>)
 80013d2:	f004 fded 	bl	8005fb0 <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 80013d6:	4b0b      	ldr	r3, [pc, #44]	; (8001404 <MX_ETH_Init+0x98>)
 80013d8:	2221      	movs	r2, #33	; 0x21
 80013da:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 80013dc:	4b09      	ldr	r3, [pc, #36]	; (8001404 <MX_ETH_Init+0x98>)
 80013de:	f44f 0240 	mov.w	r2, #12582912	; 0xc00000
 80013e2:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 80013e4:	4b07      	ldr	r3, [pc, #28]	; (8001404 <MX_ETH_Init+0x98>)
 80013e6:	2200      	movs	r2, #0
 80013e8:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN ETH_Init 2 */

  /* USER CODE END ETH_Init 2 */

}
 80013ea:	bf00      	nop
 80013ec:	bd80      	pop	{r7, pc}
 80013ee:	bf00      	nop
 80013f0:	20000204 	.word	0x20000204
 80013f4:	40028000 	.word	0x40028000
 80013f8:	200008a8 	.word	0x200008a8
 80013fc:	20000164 	.word	0x20000164
 8001400:	200000c4 	.word	0x200000c4
 8001404:	2000008c 	.word	0x2000008c

08001408 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8001408:	b580      	push	{r7, lr}
 800140a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 800140c:	4b1b      	ldr	r3, [pc, #108]	; (800147c <MX_I2C2_Init+0x74>)
 800140e:	4a1c      	ldr	r2, [pc, #112]	; (8001480 <MX_I2C2_Init+0x78>)
 8001410:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 8001412:	4b1a      	ldr	r3, [pc, #104]	; (800147c <MX_I2C2_Init+0x74>)
 8001414:	4a1b      	ldr	r2, [pc, #108]	; (8001484 <MX_I2C2_Init+0x7c>)
 8001416:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001418:	4b18      	ldr	r3, [pc, #96]	; (800147c <MX_I2C2_Init+0x74>)
 800141a:	2200      	movs	r2, #0
 800141c:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 800141e:	4b17      	ldr	r3, [pc, #92]	; (800147c <MX_I2C2_Init+0x74>)
 8001420:	2200      	movs	r2, #0
 8001422:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001424:	4b15      	ldr	r3, [pc, #84]	; (800147c <MX_I2C2_Init+0x74>)
 8001426:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800142a:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800142c:	4b13      	ldr	r3, [pc, #76]	; (800147c <MX_I2C2_Init+0x74>)
 800142e:	2200      	movs	r2, #0
 8001430:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 8001432:	4b12      	ldr	r3, [pc, #72]	; (800147c <MX_I2C2_Init+0x74>)
 8001434:	2200      	movs	r2, #0
 8001436:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001438:	4b10      	ldr	r3, [pc, #64]	; (800147c <MX_I2C2_Init+0x74>)
 800143a:	2200      	movs	r2, #0
 800143c:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800143e:	4b0f      	ldr	r3, [pc, #60]	; (800147c <MX_I2C2_Init+0x74>)
 8001440:	2200      	movs	r2, #0
 8001442:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8001444:	480d      	ldr	r0, [pc, #52]	; (800147c <MX_I2C2_Init+0x74>)
 8001446:	f001 faef 	bl	8002a28 <HAL_I2C_Init>
 800144a:	4603      	mov	r3, r0
 800144c:	2b00      	cmp	r3, #0
 800144e:	d001      	beq.n	8001454 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8001450:	f000 f980 	bl	8001754 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001454:	2100      	movs	r1, #0
 8001456:	4809      	ldr	r0, [pc, #36]	; (800147c <MX_I2C2_Init+0x74>)
 8001458:	f002 fba9 	bl	8003bae <HAL_I2CEx_ConfigAnalogFilter>
 800145c:	4603      	mov	r3, r0
 800145e:	2b00      	cmp	r3, #0
 8001460:	d001      	beq.n	8001466 <MX_I2C2_Init+0x5e>
  {
    Error_Handler();
 8001462:	f000 f977 	bl	8001754 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8001466:	2100      	movs	r1, #0
 8001468:	4804      	ldr	r0, [pc, #16]	; (800147c <MX_I2C2_Init+0x74>)
 800146a:	f002 fbdc 	bl	8003c26 <HAL_I2CEx_ConfigDigitalFilter>
 800146e:	4603      	mov	r3, r0
 8001470:	2b00      	cmp	r3, #0
 8001472:	d001      	beq.n	8001478 <MX_I2C2_Init+0x70>
  {
    Error_Handler();
 8001474:	f000 f96e 	bl	8001754 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8001478:	bf00      	nop
 800147a:	bd80      	pop	{r7, pc}
 800147c:	200002b4 	.word	0x200002b4
 8001480:	40005800 	.word	0x40005800
 8001484:	000186a0 	.word	0x000186a0

08001488 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8001488:	b580      	push	{r7, lr}
 800148a:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 800148c:	4b11      	ldr	r3, [pc, #68]	; (80014d4 <MX_USART3_UART_Init+0x4c>)
 800148e:	4a12      	ldr	r2, [pc, #72]	; (80014d8 <MX_USART3_UART_Init+0x50>)
 8001490:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8001492:	4b10      	ldr	r3, [pc, #64]	; (80014d4 <MX_USART3_UART_Init+0x4c>)
 8001494:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001498:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800149a:	4b0e      	ldr	r3, [pc, #56]	; (80014d4 <MX_USART3_UART_Init+0x4c>)
 800149c:	2200      	movs	r2, #0
 800149e:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80014a0:	4b0c      	ldr	r3, [pc, #48]	; (80014d4 <MX_USART3_UART_Init+0x4c>)
 80014a2:	2200      	movs	r2, #0
 80014a4:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80014a6:	4b0b      	ldr	r3, [pc, #44]	; (80014d4 <MX_USART3_UART_Init+0x4c>)
 80014a8:	2200      	movs	r2, #0
 80014aa:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80014ac:	4b09      	ldr	r3, [pc, #36]	; (80014d4 <MX_USART3_UART_Init+0x4c>)
 80014ae:	220c      	movs	r2, #12
 80014b0:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80014b2:	4b08      	ldr	r3, [pc, #32]	; (80014d4 <MX_USART3_UART_Init+0x4c>)
 80014b4:	2200      	movs	r2, #0
 80014b6:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80014b8:	4b06      	ldr	r3, [pc, #24]	; (80014d4 <MX_USART3_UART_Init+0x4c>)
 80014ba:	2200      	movs	r2, #0
 80014bc:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80014be:	4805      	ldr	r0, [pc, #20]	; (80014d4 <MX_USART3_UART_Init+0x4c>)
 80014c0:	f003 f9a6 	bl	8004810 <HAL_UART_Init>
 80014c4:	4603      	mov	r3, r0
 80014c6:	2b00      	cmp	r3, #0
 80014c8:	d001      	beq.n	80014ce <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 80014ca:	f000 f943 	bl	8001754 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80014ce:	bf00      	nop
 80014d0:	bd80      	pop	{r7, pc}
 80014d2:	bf00      	nop
 80014d4:	20000308 	.word	0x20000308
 80014d8:	40004800 	.word	0x40004800

080014dc <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 80014dc:	b580      	push	{r7, lr}
 80014de:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 80014e0:	4b14      	ldr	r3, [pc, #80]	; (8001534 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80014e2:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 80014e6:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 80014e8:	4b12      	ldr	r3, [pc, #72]	; (8001534 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80014ea:	2204      	movs	r2, #4
 80014ec:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 80014ee:	4b11      	ldr	r3, [pc, #68]	; (8001534 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80014f0:	2202      	movs	r2, #2
 80014f2:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 80014f4:	4b0f      	ldr	r3, [pc, #60]	; (8001534 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80014f6:	2200      	movs	r2, #0
 80014f8:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80014fa:	4b0e      	ldr	r3, [pc, #56]	; (8001534 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80014fc:	2202      	movs	r2, #2
 80014fe:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 8001500:	4b0c      	ldr	r3, [pc, #48]	; (8001534 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001502:	2201      	movs	r2, #1
 8001504:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8001506:	4b0b      	ldr	r3, [pc, #44]	; (8001534 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001508:	2200      	movs	r2, #0
 800150a:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800150c:	4b09      	ldr	r3, [pc, #36]	; (8001534 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800150e:	2200      	movs	r2, #0
 8001510:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8001512:	4b08      	ldr	r3, [pc, #32]	; (8001534 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001514:	2201      	movs	r2, #1
 8001516:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8001518:	4b06      	ldr	r3, [pc, #24]	; (8001534 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800151a:	2200      	movs	r2, #0
 800151c:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800151e:	4805      	ldr	r0, [pc, #20]	; (8001534 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001520:	f002 fbc0 	bl	8003ca4 <HAL_PCD_Init>
 8001524:	4603      	mov	r3, r0
 8001526:	2b00      	cmp	r3, #0
 8001528:	d001      	beq.n	800152e <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 800152a:	f000 f913 	bl	8001754 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 800152e:	bf00      	nop
 8001530:	bd80      	pop	{r7, pc}
 8001532:	bf00      	nop
 8001534:	2000034c 	.word	0x2000034c

08001538 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001538:	b580      	push	{r7, lr}
 800153a:	b08c      	sub	sp, #48	; 0x30
 800153c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800153e:	f107 031c 	add.w	r3, r7, #28
 8001542:	2200      	movs	r2, #0
 8001544:	601a      	str	r2, [r3, #0]
 8001546:	605a      	str	r2, [r3, #4]
 8001548:	609a      	str	r2, [r3, #8]
 800154a:	60da      	str	r2, [r3, #12]
 800154c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800154e:	2300      	movs	r3, #0
 8001550:	61bb      	str	r3, [r7, #24]
 8001552:	4b4c      	ldr	r3, [pc, #304]	; (8001684 <MX_GPIO_Init+0x14c>)
 8001554:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001556:	4a4b      	ldr	r2, [pc, #300]	; (8001684 <MX_GPIO_Init+0x14c>)
 8001558:	f043 0304 	orr.w	r3, r3, #4
 800155c:	6313      	str	r3, [r2, #48]	; 0x30
 800155e:	4b49      	ldr	r3, [pc, #292]	; (8001684 <MX_GPIO_Init+0x14c>)
 8001560:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001562:	f003 0304 	and.w	r3, r3, #4
 8001566:	61bb      	str	r3, [r7, #24]
 8001568:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800156a:	2300      	movs	r3, #0
 800156c:	617b      	str	r3, [r7, #20]
 800156e:	4b45      	ldr	r3, [pc, #276]	; (8001684 <MX_GPIO_Init+0x14c>)
 8001570:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001572:	4a44      	ldr	r2, [pc, #272]	; (8001684 <MX_GPIO_Init+0x14c>)
 8001574:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001578:	6313      	str	r3, [r2, #48]	; 0x30
 800157a:	4b42      	ldr	r3, [pc, #264]	; (8001684 <MX_GPIO_Init+0x14c>)
 800157c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800157e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001582:	617b      	str	r3, [r7, #20]
 8001584:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001586:	2300      	movs	r3, #0
 8001588:	613b      	str	r3, [r7, #16]
 800158a:	4b3e      	ldr	r3, [pc, #248]	; (8001684 <MX_GPIO_Init+0x14c>)
 800158c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800158e:	4a3d      	ldr	r2, [pc, #244]	; (8001684 <MX_GPIO_Init+0x14c>)
 8001590:	f043 0301 	orr.w	r3, r3, #1
 8001594:	6313      	str	r3, [r2, #48]	; 0x30
 8001596:	4b3b      	ldr	r3, [pc, #236]	; (8001684 <MX_GPIO_Init+0x14c>)
 8001598:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800159a:	f003 0301 	and.w	r3, r3, #1
 800159e:	613b      	str	r3, [r7, #16]
 80015a0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80015a2:	2300      	movs	r3, #0
 80015a4:	60fb      	str	r3, [r7, #12]
 80015a6:	4b37      	ldr	r3, [pc, #220]	; (8001684 <MX_GPIO_Init+0x14c>)
 80015a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015aa:	4a36      	ldr	r2, [pc, #216]	; (8001684 <MX_GPIO_Init+0x14c>)
 80015ac:	f043 0302 	orr.w	r3, r3, #2
 80015b0:	6313      	str	r3, [r2, #48]	; 0x30
 80015b2:	4b34      	ldr	r3, [pc, #208]	; (8001684 <MX_GPIO_Init+0x14c>)
 80015b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015b6:	f003 0302 	and.w	r3, r3, #2
 80015ba:	60fb      	str	r3, [r7, #12]
 80015bc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80015be:	2300      	movs	r3, #0
 80015c0:	60bb      	str	r3, [r7, #8]
 80015c2:	4b30      	ldr	r3, [pc, #192]	; (8001684 <MX_GPIO_Init+0x14c>)
 80015c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015c6:	4a2f      	ldr	r2, [pc, #188]	; (8001684 <MX_GPIO_Init+0x14c>)
 80015c8:	f043 0308 	orr.w	r3, r3, #8
 80015cc:	6313      	str	r3, [r2, #48]	; 0x30
 80015ce:	4b2d      	ldr	r3, [pc, #180]	; (8001684 <MX_GPIO_Init+0x14c>)
 80015d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015d2:	f003 0308 	and.w	r3, r3, #8
 80015d6:	60bb      	str	r3, [r7, #8]
 80015d8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80015da:	2300      	movs	r3, #0
 80015dc:	607b      	str	r3, [r7, #4]
 80015de:	4b29      	ldr	r3, [pc, #164]	; (8001684 <MX_GPIO_Init+0x14c>)
 80015e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015e2:	4a28      	ldr	r2, [pc, #160]	; (8001684 <MX_GPIO_Init+0x14c>)
 80015e4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80015e8:	6313      	str	r3, [r2, #48]	; 0x30
 80015ea:	4b26      	ldr	r3, [pc, #152]	; (8001684 <MX_GPIO_Init+0x14c>)
 80015ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015ee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80015f2:	607b      	str	r3, [r7, #4]
 80015f4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 80015f6:	2200      	movs	r2, #0
 80015f8:	f244 0181 	movw	r1, #16513	; 0x4081
 80015fc:	4822      	ldr	r0, [pc, #136]	; (8001688 <MX_GPIO_Init+0x150>)
 80015fe:	f001 f9f9 	bl	80029f4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8001602:	2200      	movs	r2, #0
 8001604:	2140      	movs	r1, #64	; 0x40
 8001606:	4821      	ldr	r0, [pc, #132]	; (800168c <MX_GPIO_Init+0x154>)
 8001608:	f001 f9f4 	bl	80029f4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 800160c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001610:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001612:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001616:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001618:	2300      	movs	r3, #0
 800161a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 800161c:	f107 031c 	add.w	r3, r7, #28
 8001620:	4619      	mov	r1, r3
 8001622:	481b      	ldr	r0, [pc, #108]	; (8001690 <MX_GPIO_Init+0x158>)
 8001624:	f001 f83a 	bl	800269c <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 8001628:	f244 0381 	movw	r3, #16513	; 0x4081
 800162c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800162e:	2301      	movs	r3, #1
 8001630:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001632:	2300      	movs	r3, #0
 8001634:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001636:	2300      	movs	r3, #0
 8001638:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800163a:	f107 031c 	add.w	r3, r7, #28
 800163e:	4619      	mov	r1, r3
 8001640:	4811      	ldr	r0, [pc, #68]	; (8001688 <MX_GPIO_Init+0x150>)
 8001642:	f001 f82b 	bl	800269c <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8001646:	2340      	movs	r3, #64	; 0x40
 8001648:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800164a:	2301      	movs	r3, #1
 800164c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800164e:	2300      	movs	r3, #0
 8001650:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001652:	2300      	movs	r3, #0
 8001654:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8001656:	f107 031c 	add.w	r3, r7, #28
 800165a:	4619      	mov	r1, r3
 800165c:	480b      	ldr	r0, [pc, #44]	; (800168c <MX_GPIO_Init+0x154>)
 800165e:	f001 f81d 	bl	800269c <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8001662:	2380      	movs	r3, #128	; 0x80
 8001664:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001666:	2300      	movs	r3, #0
 8001668:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800166a:	2300      	movs	r3, #0
 800166c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 800166e:	f107 031c 	add.w	r3, r7, #28
 8001672:	4619      	mov	r1, r3
 8001674:	4805      	ldr	r0, [pc, #20]	; (800168c <MX_GPIO_Init+0x154>)
 8001676:	f001 f811 	bl	800269c <HAL_GPIO_Init>

}
 800167a:	bf00      	nop
 800167c:	3730      	adds	r7, #48	; 0x30
 800167e:	46bd      	mov	sp, r7
 8001680:	bd80      	pop	{r7, pc}
 8001682:	bf00      	nop
 8001684:	40023800 	.word	0x40023800
 8001688:	40020400 	.word	0x40020400
 800168c:	40021800 	.word	0x40021800
 8001690:	40020800 	.word	0x40020800

08001694 <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8001694:	b580      	push	{r7, lr}
 8001696:	b084      	sub	sp, #16
 8001698:	af00      	add	r7, sp, #0
 800169a:	6078      	str	r0, [r7, #4]


	if(!(strncmp(testReceiveData,"R",1)))
 800169c:	4b25      	ldr	r3, [pc, #148]	; (8001734 <HAL_UART_RxCpltCallback+0xa0>)
 800169e:	781a      	ldrb	r2, [r3, #0]
 80016a0:	4b25      	ldr	r3, [pc, #148]	; (8001738 <HAL_UART_RxCpltCallback+0xa4>)
 80016a2:	781b      	ldrb	r3, [r3, #0]
 80016a4:	1ad3      	subs	r3, r2, r3
 80016a6:	2b00      	cmp	r3, #0
 80016a8:	d103      	bne.n	80016b2 <HAL_UART_RxCpltCallback+0x1e>
		readFlag = 1;
 80016aa:	4b24      	ldr	r3, [pc, #144]	; (800173c <HAL_UART_RxCpltCallback+0xa8>)
 80016ac:	2201      	movs	r2, #1
 80016ae:	601a      	str	r2, [r3, #0]
 80016b0:	e002      	b.n	80016b8 <HAL_UART_RxCpltCallback+0x24>
	else
		readFlag = 0;
 80016b2:	4b22      	ldr	r3, [pc, #136]	; (800173c <HAL_UART_RxCpltCallback+0xa8>)
 80016b4:	2200      	movs	r2, #0
 80016b6:	601a      	str	r2, [r3, #0]

	char dev[4] = {0};
 80016b8:	2300      	movs	r3, #0
 80016ba:	60fb      	str	r3, [r7, #12]

	slice(testReceiveData, dev, 1, 5);
 80016bc:	f107 010c 	add.w	r1, r7, #12
 80016c0:	2305      	movs	r3, #5
 80016c2:	2201      	movs	r2, #1
 80016c4:	481b      	ldr	r0, [pc, #108]	; (8001734 <HAL_UART_RxCpltCallback+0xa0>)
 80016c6:	f7ff fc25 	bl	8000f14 <slice>
	if(!(strncmp(dev,"DEV1",4)))
 80016ca:	f107 030c 	add.w	r3, r7, #12
 80016ce:	2204      	movs	r2, #4
 80016d0:	491b      	ldr	r1, [pc, #108]	; (8001740 <HAL_UART_RxCpltCallback+0xac>)
 80016d2:	4618      	mov	r0, r3
 80016d4:	f004 fc81 	bl	8005fda <strncmp>
 80016d8:	4603      	mov	r3, r0
 80016da:	2b00      	cmp	r3, #0
 80016dc:	d104      	bne.n	80016e8 <HAL_UART_RxCpltCallback+0x54>
		devAddr = ADS1015_DEV_ADDR_GND;
 80016de:	2390      	movs	r3, #144	; 0x90
 80016e0:	b29a      	uxth	r2, r3
 80016e2:	4b18      	ldr	r3, [pc, #96]	; (8001744 <HAL_UART_RxCpltCallback+0xb0>)
 80016e4:	801a      	strh	r2, [r3, #0]
 80016e6:	e00d      	b.n	8001704 <HAL_UART_RxCpltCallback+0x70>
	else if(!(strncmp(dev,"DEV2",4)))
 80016e8:	f107 030c 	add.w	r3, r7, #12
 80016ec:	2204      	movs	r2, #4
 80016ee:	4916      	ldr	r1, [pc, #88]	; (8001748 <HAL_UART_RxCpltCallback+0xb4>)
 80016f0:	4618      	mov	r0, r3
 80016f2:	f004 fc72 	bl	8005fda <strncmp>
 80016f6:	4603      	mov	r3, r0
 80016f8:	2b00      	cmp	r3, #0
 80016fa:	d103      	bne.n	8001704 <HAL_UART_RxCpltCallback+0x70>
		devAddr = ADS1015_DEV_ADDR_VDD;
 80016fc:	2392      	movs	r3, #146	; 0x92
 80016fe:	b29a      	uxth	r2, r3
 8001700:	4b10      	ldr	r3, [pc, #64]	; (8001744 <HAL_UART_RxCpltCallback+0xb0>)
 8001702:	801a      	strh	r2, [r3, #0]

	memset(dev,0,sizeof(dev));
 8001704:	f107 030c 	add.w	r3, r7, #12
 8001708:	2204      	movs	r2, #4
 800170a:	2100      	movs	r1, #0
 800170c:	4618      	mov	r0, r3
 800170e:	f004 fc4f 	bl	8005fb0 <memset>

	MY_UART_Transmit(&huart3, testReceiveData, 100);
 8001712:	2264      	movs	r2, #100	; 0x64
 8001714:	4907      	ldr	r1, [pc, #28]	; (8001734 <HAL_UART_RxCpltCallback+0xa0>)
 8001716:	480d      	ldr	r0, [pc, #52]	; (800174c <HAL_UART_RxCpltCallback+0xb8>)
 8001718:	f7ff fc12 	bl	8000f40 <MY_UART_Transmit>
	memset(testReceiveData,0,sizeof(testReceiveData));
 800171c:	223c      	movs	r2, #60	; 0x3c
 800171e:	2100      	movs	r1, #0
 8001720:	4804      	ldr	r0, [pc, #16]	; (8001734 <HAL_UART_RxCpltCallback+0xa0>)
 8001722:	f004 fc45 	bl	8005fb0 <memset>
	i2cFlag = 1;
 8001726:	4b0a      	ldr	r3, [pc, #40]	; (8001750 <HAL_UART_RxCpltCallback+0xbc>)
 8001728:	2201      	movs	r2, #1
 800172a:	601a      	str	r2, [r3, #0]
}
 800172c:	bf00      	nop
 800172e:	3710      	adds	r7, #16
 8001730:	46bd      	mov	sp, r7
 8001732:	bd80      	pop	{r7, pc}
 8001734:	20000858 	.word	0x20000858
 8001738:	08008898 	.word	0x08008898
 800173c:	2000089c 	.word	0x2000089c
 8001740:	0800889c 	.word	0x0800889c
 8001744:	20000894 	.word	0x20000894
 8001748:	080088a4 	.word	0x080088a4
 800174c:	20000308 	.word	0x20000308
 8001750:	200008a0 	.word	0x200008a0

08001754 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001754:	b480      	push	{r7}
 8001756:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001758:	b672      	cpsid	i
}
 800175a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800175c:	e7fe      	b.n	800175c <Error_Handler+0x8>
	...

08001760 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001760:	b480      	push	{r7}
 8001762:	b083      	sub	sp, #12
 8001764:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001766:	2300      	movs	r3, #0
 8001768:	607b      	str	r3, [r7, #4]
 800176a:	4b10      	ldr	r3, [pc, #64]	; (80017ac <HAL_MspInit+0x4c>)
 800176c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800176e:	4a0f      	ldr	r2, [pc, #60]	; (80017ac <HAL_MspInit+0x4c>)
 8001770:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001774:	6453      	str	r3, [r2, #68]	; 0x44
 8001776:	4b0d      	ldr	r3, [pc, #52]	; (80017ac <HAL_MspInit+0x4c>)
 8001778:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800177a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800177e:	607b      	str	r3, [r7, #4]
 8001780:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001782:	2300      	movs	r3, #0
 8001784:	603b      	str	r3, [r7, #0]
 8001786:	4b09      	ldr	r3, [pc, #36]	; (80017ac <HAL_MspInit+0x4c>)
 8001788:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800178a:	4a08      	ldr	r2, [pc, #32]	; (80017ac <HAL_MspInit+0x4c>)
 800178c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001790:	6413      	str	r3, [r2, #64]	; 0x40
 8001792:	4b06      	ldr	r3, [pc, #24]	; (80017ac <HAL_MspInit+0x4c>)
 8001794:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001796:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800179a:	603b      	str	r3, [r7, #0]
 800179c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800179e:	bf00      	nop
 80017a0:	370c      	adds	r7, #12
 80017a2:	46bd      	mov	sp, r7
 80017a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017a8:	4770      	bx	lr
 80017aa:	bf00      	nop
 80017ac:	40023800 	.word	0x40023800

080017b0 <HAL_ETH_MspInit>:
* This function configures the hardware resources used in this example
* @param heth: ETH handle pointer
* @retval None
*/
void HAL_ETH_MspInit(ETH_HandleTypeDef* heth)
{
 80017b0:	b580      	push	{r7, lr}
 80017b2:	b08e      	sub	sp, #56	; 0x38
 80017b4:	af00      	add	r7, sp, #0
 80017b6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017b8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80017bc:	2200      	movs	r2, #0
 80017be:	601a      	str	r2, [r3, #0]
 80017c0:	605a      	str	r2, [r3, #4]
 80017c2:	609a      	str	r2, [r3, #8]
 80017c4:	60da      	str	r2, [r3, #12]
 80017c6:	611a      	str	r2, [r3, #16]
  if(heth->Instance==ETH)
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	681b      	ldr	r3, [r3, #0]
 80017cc:	4a55      	ldr	r2, [pc, #340]	; (8001924 <HAL_ETH_MspInit+0x174>)
 80017ce:	4293      	cmp	r3, r2
 80017d0:	f040 80a4 	bne.w	800191c <HAL_ETH_MspInit+0x16c>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ETH_CLK_ENABLE();
 80017d4:	2300      	movs	r3, #0
 80017d6:	623b      	str	r3, [r7, #32]
 80017d8:	4b53      	ldr	r3, [pc, #332]	; (8001928 <HAL_ETH_MspInit+0x178>)
 80017da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017dc:	4a52      	ldr	r2, [pc, #328]	; (8001928 <HAL_ETH_MspInit+0x178>)
 80017de:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80017e2:	6313      	str	r3, [r2, #48]	; 0x30
 80017e4:	4b50      	ldr	r3, [pc, #320]	; (8001928 <HAL_ETH_MspInit+0x178>)
 80017e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017e8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80017ec:	623b      	str	r3, [r7, #32]
 80017ee:	6a3b      	ldr	r3, [r7, #32]
 80017f0:	2300      	movs	r3, #0
 80017f2:	61fb      	str	r3, [r7, #28]
 80017f4:	4b4c      	ldr	r3, [pc, #304]	; (8001928 <HAL_ETH_MspInit+0x178>)
 80017f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017f8:	4a4b      	ldr	r2, [pc, #300]	; (8001928 <HAL_ETH_MspInit+0x178>)
 80017fa:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80017fe:	6313      	str	r3, [r2, #48]	; 0x30
 8001800:	4b49      	ldr	r3, [pc, #292]	; (8001928 <HAL_ETH_MspInit+0x178>)
 8001802:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001804:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001808:	61fb      	str	r3, [r7, #28]
 800180a:	69fb      	ldr	r3, [r7, #28]
 800180c:	2300      	movs	r3, #0
 800180e:	61bb      	str	r3, [r7, #24]
 8001810:	4b45      	ldr	r3, [pc, #276]	; (8001928 <HAL_ETH_MspInit+0x178>)
 8001812:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001814:	4a44      	ldr	r2, [pc, #272]	; (8001928 <HAL_ETH_MspInit+0x178>)
 8001816:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800181a:	6313      	str	r3, [r2, #48]	; 0x30
 800181c:	4b42      	ldr	r3, [pc, #264]	; (8001928 <HAL_ETH_MspInit+0x178>)
 800181e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001820:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8001824:	61bb      	str	r3, [r7, #24]
 8001826:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001828:	2300      	movs	r3, #0
 800182a:	617b      	str	r3, [r7, #20]
 800182c:	4b3e      	ldr	r3, [pc, #248]	; (8001928 <HAL_ETH_MspInit+0x178>)
 800182e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001830:	4a3d      	ldr	r2, [pc, #244]	; (8001928 <HAL_ETH_MspInit+0x178>)
 8001832:	f043 0304 	orr.w	r3, r3, #4
 8001836:	6313      	str	r3, [r2, #48]	; 0x30
 8001838:	4b3b      	ldr	r3, [pc, #236]	; (8001928 <HAL_ETH_MspInit+0x178>)
 800183a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800183c:	f003 0304 	and.w	r3, r3, #4
 8001840:	617b      	str	r3, [r7, #20]
 8001842:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001844:	2300      	movs	r3, #0
 8001846:	613b      	str	r3, [r7, #16]
 8001848:	4b37      	ldr	r3, [pc, #220]	; (8001928 <HAL_ETH_MspInit+0x178>)
 800184a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800184c:	4a36      	ldr	r2, [pc, #216]	; (8001928 <HAL_ETH_MspInit+0x178>)
 800184e:	f043 0301 	orr.w	r3, r3, #1
 8001852:	6313      	str	r3, [r2, #48]	; 0x30
 8001854:	4b34      	ldr	r3, [pc, #208]	; (8001928 <HAL_ETH_MspInit+0x178>)
 8001856:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001858:	f003 0301 	and.w	r3, r3, #1
 800185c:	613b      	str	r3, [r7, #16]
 800185e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001860:	2300      	movs	r3, #0
 8001862:	60fb      	str	r3, [r7, #12]
 8001864:	4b30      	ldr	r3, [pc, #192]	; (8001928 <HAL_ETH_MspInit+0x178>)
 8001866:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001868:	4a2f      	ldr	r2, [pc, #188]	; (8001928 <HAL_ETH_MspInit+0x178>)
 800186a:	f043 0302 	orr.w	r3, r3, #2
 800186e:	6313      	str	r3, [r2, #48]	; 0x30
 8001870:	4b2d      	ldr	r3, [pc, #180]	; (8001928 <HAL_ETH_MspInit+0x178>)
 8001872:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001874:	f003 0302 	and.w	r3, r3, #2
 8001878:	60fb      	str	r3, [r7, #12]
 800187a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 800187c:	2300      	movs	r3, #0
 800187e:	60bb      	str	r3, [r7, #8]
 8001880:	4b29      	ldr	r3, [pc, #164]	; (8001928 <HAL_ETH_MspInit+0x178>)
 8001882:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001884:	4a28      	ldr	r2, [pc, #160]	; (8001928 <HAL_ETH_MspInit+0x178>)
 8001886:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800188a:	6313      	str	r3, [r2, #48]	; 0x30
 800188c:	4b26      	ldr	r3, [pc, #152]	; (8001928 <HAL_ETH_MspInit+0x178>)
 800188e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001890:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001894:	60bb      	str	r3, [r7, #8]
 8001896:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8001898:	2332      	movs	r3, #50	; 0x32
 800189a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800189c:	2302      	movs	r3, #2
 800189e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018a0:	2300      	movs	r3, #0
 80018a2:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80018a4:	2303      	movs	r3, #3
 80018a6:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80018a8:	230b      	movs	r3, #11
 80018aa:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80018ac:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80018b0:	4619      	mov	r1, r3
 80018b2:	481e      	ldr	r0, [pc, #120]	; (800192c <HAL_ETH_MspInit+0x17c>)
 80018b4:	f000 fef2 	bl	800269c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 80018b8:	2386      	movs	r3, #134	; 0x86
 80018ba:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018bc:	2302      	movs	r3, #2
 80018be:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018c0:	2300      	movs	r3, #0
 80018c2:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80018c4:	2303      	movs	r3, #3
 80018c6:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80018c8:	230b      	movs	r3, #11
 80018ca:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80018cc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80018d0:	4619      	mov	r1, r3
 80018d2:	4817      	ldr	r0, [pc, #92]	; (8001930 <HAL_ETH_MspInit+0x180>)
 80018d4:	f000 fee2 	bl	800269c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 80018d8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80018dc:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018de:	2302      	movs	r3, #2
 80018e0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018e2:	2300      	movs	r3, #0
 80018e4:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80018e6:	2303      	movs	r3, #3
 80018e8:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80018ea:	230b      	movs	r3, #11
 80018ec:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 80018ee:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80018f2:	4619      	mov	r1, r3
 80018f4:	480f      	ldr	r0, [pc, #60]	; (8001934 <HAL_ETH_MspInit+0x184>)
 80018f6:	f000 fed1 	bl	800269c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 80018fa:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 80018fe:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001900:	2302      	movs	r3, #2
 8001902:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001904:	2300      	movs	r3, #0
 8001906:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001908:	2303      	movs	r3, #3
 800190a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800190c:	230b      	movs	r3, #11
 800190e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001910:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001914:	4619      	mov	r1, r3
 8001916:	4808      	ldr	r0, [pc, #32]	; (8001938 <HAL_ETH_MspInit+0x188>)
 8001918:	f000 fec0 	bl	800269c <HAL_GPIO_Init>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }

}
 800191c:	bf00      	nop
 800191e:	3738      	adds	r7, #56	; 0x38
 8001920:	46bd      	mov	sp, r7
 8001922:	bd80      	pop	{r7, pc}
 8001924:	40028000 	.word	0x40028000
 8001928:	40023800 	.word	0x40023800
 800192c:	40020800 	.word	0x40020800
 8001930:	40020000 	.word	0x40020000
 8001934:	40020400 	.word	0x40020400
 8001938:	40021800 	.word	0x40021800

0800193c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800193c:	b580      	push	{r7, lr}
 800193e:	b08a      	sub	sp, #40	; 0x28
 8001940:	af00      	add	r7, sp, #0
 8001942:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001944:	f107 0314 	add.w	r3, r7, #20
 8001948:	2200      	movs	r2, #0
 800194a:	601a      	str	r2, [r3, #0]
 800194c:	605a      	str	r2, [r3, #4]
 800194e:	609a      	str	r2, [r3, #8]
 8001950:	60da      	str	r2, [r3, #12]
 8001952:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C2)
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	681b      	ldr	r3, [r3, #0]
 8001958:	4a19      	ldr	r2, [pc, #100]	; (80019c0 <HAL_I2C_MspInit+0x84>)
 800195a:	4293      	cmp	r3, r2
 800195c:	d12c      	bne.n	80019b8 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800195e:	2300      	movs	r3, #0
 8001960:	613b      	str	r3, [r7, #16]
 8001962:	4b18      	ldr	r3, [pc, #96]	; (80019c4 <HAL_I2C_MspInit+0x88>)
 8001964:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001966:	4a17      	ldr	r2, [pc, #92]	; (80019c4 <HAL_I2C_MspInit+0x88>)
 8001968:	f043 0302 	orr.w	r3, r3, #2
 800196c:	6313      	str	r3, [r2, #48]	; 0x30
 800196e:	4b15      	ldr	r3, [pc, #84]	; (80019c4 <HAL_I2C_MspInit+0x88>)
 8001970:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001972:	f003 0302 	and.w	r3, r3, #2
 8001976:	613b      	str	r3, [r7, #16]
 8001978:	693b      	ldr	r3, [r7, #16]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 800197a:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 800197e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001980:	2312      	movs	r3, #18
 8001982:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001984:	2300      	movs	r3, #0
 8001986:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001988:	2303      	movs	r3, #3
 800198a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 800198c:	2304      	movs	r3, #4
 800198e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001990:	f107 0314 	add.w	r3, r7, #20
 8001994:	4619      	mov	r1, r3
 8001996:	480c      	ldr	r0, [pc, #48]	; (80019c8 <HAL_I2C_MspInit+0x8c>)
 8001998:	f000 fe80 	bl	800269c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 800199c:	2300      	movs	r3, #0
 800199e:	60fb      	str	r3, [r7, #12]
 80019a0:	4b08      	ldr	r3, [pc, #32]	; (80019c4 <HAL_I2C_MspInit+0x88>)
 80019a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019a4:	4a07      	ldr	r2, [pc, #28]	; (80019c4 <HAL_I2C_MspInit+0x88>)
 80019a6:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80019aa:	6413      	str	r3, [r2, #64]	; 0x40
 80019ac:	4b05      	ldr	r3, [pc, #20]	; (80019c4 <HAL_I2C_MspInit+0x88>)
 80019ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019b0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80019b4:	60fb      	str	r3, [r7, #12]
 80019b6:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 80019b8:	bf00      	nop
 80019ba:	3728      	adds	r7, #40	; 0x28
 80019bc:	46bd      	mov	sp, r7
 80019be:	bd80      	pop	{r7, pc}
 80019c0:	40005800 	.word	0x40005800
 80019c4:	40023800 	.word	0x40023800
 80019c8:	40020400 	.word	0x40020400

080019cc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80019cc:	b580      	push	{r7, lr}
 80019ce:	b08a      	sub	sp, #40	; 0x28
 80019d0:	af00      	add	r7, sp, #0
 80019d2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80019d4:	f107 0314 	add.w	r3, r7, #20
 80019d8:	2200      	movs	r2, #0
 80019da:	601a      	str	r2, [r3, #0]
 80019dc:	605a      	str	r2, [r3, #4]
 80019de:	609a      	str	r2, [r3, #8]
 80019e0:	60da      	str	r2, [r3, #12]
 80019e2:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	681b      	ldr	r3, [r3, #0]
 80019e8:	4a1d      	ldr	r2, [pc, #116]	; (8001a60 <HAL_UART_MspInit+0x94>)
 80019ea:	4293      	cmp	r3, r2
 80019ec:	d134      	bne.n	8001a58 <HAL_UART_MspInit+0x8c>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 80019ee:	2300      	movs	r3, #0
 80019f0:	613b      	str	r3, [r7, #16]
 80019f2:	4b1c      	ldr	r3, [pc, #112]	; (8001a64 <HAL_UART_MspInit+0x98>)
 80019f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019f6:	4a1b      	ldr	r2, [pc, #108]	; (8001a64 <HAL_UART_MspInit+0x98>)
 80019f8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80019fc:	6413      	str	r3, [r2, #64]	; 0x40
 80019fe:	4b19      	ldr	r3, [pc, #100]	; (8001a64 <HAL_UART_MspInit+0x98>)
 8001a00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a02:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001a06:	613b      	str	r3, [r7, #16]
 8001a08:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001a0a:	2300      	movs	r3, #0
 8001a0c:	60fb      	str	r3, [r7, #12]
 8001a0e:	4b15      	ldr	r3, [pc, #84]	; (8001a64 <HAL_UART_MspInit+0x98>)
 8001a10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a12:	4a14      	ldr	r2, [pc, #80]	; (8001a64 <HAL_UART_MspInit+0x98>)
 8001a14:	f043 0308 	orr.w	r3, r3, #8
 8001a18:	6313      	str	r3, [r2, #48]	; 0x30
 8001a1a:	4b12      	ldr	r3, [pc, #72]	; (8001a64 <HAL_UART_MspInit+0x98>)
 8001a1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a1e:	f003 0308 	and.w	r3, r3, #8
 8001a22:	60fb      	str	r3, [r7, #12]
 8001a24:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8001a26:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001a2a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a2c:	2302      	movs	r3, #2
 8001a2e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a30:	2300      	movs	r3, #0
 8001a32:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a34:	2303      	movs	r3, #3
 8001a36:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001a38:	2307      	movs	r3, #7
 8001a3a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001a3c:	f107 0314 	add.w	r3, r7, #20
 8001a40:	4619      	mov	r1, r3
 8001a42:	4809      	ldr	r0, [pc, #36]	; (8001a68 <HAL_UART_MspInit+0x9c>)
 8001a44:	f000 fe2a 	bl	800269c <HAL_GPIO_Init>

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8001a48:	2200      	movs	r2, #0
 8001a4a:	2100      	movs	r1, #0
 8001a4c:	2027      	movs	r0, #39	; 0x27
 8001a4e:	f000 fa48 	bl	8001ee2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8001a52:	2027      	movs	r0, #39	; 0x27
 8001a54:	f000 fa61 	bl	8001f1a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8001a58:	bf00      	nop
 8001a5a:	3728      	adds	r7, #40	; 0x28
 8001a5c:	46bd      	mov	sp, r7
 8001a5e:	bd80      	pop	{r7, pc}
 8001a60:	40004800 	.word	0x40004800
 8001a64:	40023800 	.word	0x40023800
 8001a68:	40020c00 	.word	0x40020c00

08001a6c <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8001a6c:	b580      	push	{r7, lr}
 8001a6e:	b08a      	sub	sp, #40	; 0x28
 8001a70:	af00      	add	r7, sp, #0
 8001a72:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a74:	f107 0314 	add.w	r3, r7, #20
 8001a78:	2200      	movs	r2, #0
 8001a7a:	601a      	str	r2, [r3, #0]
 8001a7c:	605a      	str	r2, [r3, #4]
 8001a7e:	609a      	str	r2, [r3, #8]
 8001a80:	60da      	str	r2, [r3, #12]
 8001a82:	611a      	str	r2, [r3, #16]
  if(hpcd->Instance==USB_OTG_FS)
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	681b      	ldr	r3, [r3, #0]
 8001a88:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001a8c:	d13f      	bne.n	8001b0e <HAL_PCD_MspInit+0xa2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a8e:	2300      	movs	r3, #0
 8001a90:	613b      	str	r3, [r7, #16]
 8001a92:	4b21      	ldr	r3, [pc, #132]	; (8001b18 <HAL_PCD_MspInit+0xac>)
 8001a94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a96:	4a20      	ldr	r2, [pc, #128]	; (8001b18 <HAL_PCD_MspInit+0xac>)
 8001a98:	f043 0301 	orr.w	r3, r3, #1
 8001a9c:	6313      	str	r3, [r2, #48]	; 0x30
 8001a9e:	4b1e      	ldr	r3, [pc, #120]	; (8001b18 <HAL_PCD_MspInit+0xac>)
 8001aa0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001aa2:	f003 0301 	and.w	r3, r3, #1
 8001aa6:	613b      	str	r3, [r7, #16]
 8001aa8:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8001aaa:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 8001aae:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ab0:	2302      	movs	r3, #2
 8001ab2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ab4:	2300      	movs	r3, #0
 8001ab6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001ab8:	2303      	movs	r3, #3
 8001aba:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8001abc:	230a      	movs	r3, #10
 8001abe:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ac0:	f107 0314 	add.w	r3, r7, #20
 8001ac4:	4619      	mov	r1, r3
 8001ac6:	4815      	ldr	r0, [pc, #84]	; (8001b1c <HAL_PCD_MspInit+0xb0>)
 8001ac8:	f000 fde8 	bl	800269c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8001acc:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001ad0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001ad2:	2300      	movs	r3, #0
 8001ad4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ad6:	2300      	movs	r3, #0
 8001ad8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8001ada:	f107 0314 	add.w	r3, r7, #20
 8001ade:	4619      	mov	r1, r3
 8001ae0:	480e      	ldr	r0, [pc, #56]	; (8001b1c <HAL_PCD_MspInit+0xb0>)
 8001ae2:	f000 fddb 	bl	800269c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8001ae6:	4b0c      	ldr	r3, [pc, #48]	; (8001b18 <HAL_PCD_MspInit+0xac>)
 8001ae8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001aea:	4a0b      	ldr	r2, [pc, #44]	; (8001b18 <HAL_PCD_MspInit+0xac>)
 8001aec:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001af0:	6353      	str	r3, [r2, #52]	; 0x34
 8001af2:	2300      	movs	r3, #0
 8001af4:	60fb      	str	r3, [r7, #12]
 8001af6:	4b08      	ldr	r3, [pc, #32]	; (8001b18 <HAL_PCD_MspInit+0xac>)
 8001af8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001afa:	4a07      	ldr	r2, [pc, #28]	; (8001b18 <HAL_PCD_MspInit+0xac>)
 8001afc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001b00:	6453      	str	r3, [r2, #68]	; 0x44
 8001b02:	4b05      	ldr	r3, [pc, #20]	; (8001b18 <HAL_PCD_MspInit+0xac>)
 8001b04:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b06:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001b0a:	60fb      	str	r3, [r7, #12]
 8001b0c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 8001b0e:	bf00      	nop
 8001b10:	3728      	adds	r7, #40	; 0x28
 8001b12:	46bd      	mov	sp, r7
 8001b14:	bd80      	pop	{r7, pc}
 8001b16:	bf00      	nop
 8001b18:	40023800 	.word	0x40023800
 8001b1c:	40020000 	.word	0x40020000

08001b20 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001b20:	b480      	push	{r7}
 8001b22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001b24:	e7fe      	b.n	8001b24 <NMI_Handler+0x4>

08001b26 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001b26:	b480      	push	{r7}
 8001b28:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001b2a:	e7fe      	b.n	8001b2a <HardFault_Handler+0x4>

08001b2c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001b2c:	b480      	push	{r7}
 8001b2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001b30:	e7fe      	b.n	8001b30 <MemManage_Handler+0x4>

08001b32 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001b32:	b480      	push	{r7}
 8001b34:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001b36:	e7fe      	b.n	8001b36 <BusFault_Handler+0x4>

08001b38 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001b38:	b480      	push	{r7}
 8001b3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001b3c:	e7fe      	b.n	8001b3c <UsageFault_Handler+0x4>

08001b3e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001b3e:	b480      	push	{r7}
 8001b40:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001b42:	bf00      	nop
 8001b44:	46bd      	mov	sp, r7
 8001b46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b4a:	4770      	bx	lr

08001b4c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001b4c:	b480      	push	{r7}
 8001b4e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001b50:	bf00      	nop
 8001b52:	46bd      	mov	sp, r7
 8001b54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b58:	4770      	bx	lr

08001b5a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001b5a:	b480      	push	{r7}
 8001b5c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001b5e:	bf00      	nop
 8001b60:	46bd      	mov	sp, r7
 8001b62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b66:	4770      	bx	lr

08001b68 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001b68:	b580      	push	{r7, lr}
 8001b6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001b6c:	f000 f89a 	bl	8001ca4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001b70:	bf00      	nop
 8001b72:	bd80      	pop	{r7, pc}

08001b74 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8001b74:	b580      	push	{r7, lr}
 8001b76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8001b78:	4802      	ldr	r0, [pc, #8]	; (8001b84 <USART3_IRQHandler+0x10>)
 8001b7a:	f002 ff59 	bl	8004a30 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8001b7e:	bf00      	nop
 8001b80:	bd80      	pop	{r7, pc}
 8001b82:	bf00      	nop
 8001b84:	20000308 	.word	0x20000308

08001b88 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001b88:	b480      	push	{r7}
 8001b8a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001b8c:	4b06      	ldr	r3, [pc, #24]	; (8001ba8 <SystemInit+0x20>)
 8001b8e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001b92:	4a05      	ldr	r2, [pc, #20]	; (8001ba8 <SystemInit+0x20>)
 8001b94:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001b98:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001b9c:	bf00      	nop
 8001b9e:	46bd      	mov	sp, r7
 8001ba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ba4:	4770      	bx	lr
 8001ba6:	bf00      	nop
 8001ba8:	e000ed00 	.word	0xe000ed00

08001bac <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 8001bac:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001be4 <LoopFillZerobss+0x12>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001bb0:	480d      	ldr	r0, [pc, #52]	; (8001be8 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001bb2:	490e      	ldr	r1, [pc, #56]	; (8001bec <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001bb4:	4a0e      	ldr	r2, [pc, #56]	; (8001bf0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001bb6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001bb8:	e002      	b.n	8001bc0 <LoopCopyDataInit>

08001bba <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001bba:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001bbc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001bbe:	3304      	adds	r3, #4

08001bc0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001bc0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001bc2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001bc4:	d3f9      	bcc.n	8001bba <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001bc6:	4a0b      	ldr	r2, [pc, #44]	; (8001bf4 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001bc8:	4c0b      	ldr	r4, [pc, #44]	; (8001bf8 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001bca:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001bcc:	e001      	b.n	8001bd2 <LoopFillZerobss>

08001bce <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001bce:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001bd0:	3204      	adds	r2, #4

08001bd2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001bd2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001bd4:	d3fb      	bcc.n	8001bce <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001bd6:	f7ff ffd7 	bl	8001b88 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001bda:	f004 f9c5 	bl	8005f68 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001bde:	f7ff f9db 	bl	8000f98 <main>
  bx  lr    
 8001be2:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8001be4:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 8001be8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001bec:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8001bf0:	08008b98 	.word	0x08008b98
  ldr r2, =_sbss
 8001bf4:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8001bf8:	200008c8 	.word	0x200008c8

08001bfc <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001bfc:	e7fe      	b.n	8001bfc <ADC_IRQHandler>
	...

08001c00 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001c00:	b580      	push	{r7, lr}
 8001c02:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001c04:	4b0e      	ldr	r3, [pc, #56]	; (8001c40 <HAL_Init+0x40>)
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	4a0d      	ldr	r2, [pc, #52]	; (8001c40 <HAL_Init+0x40>)
 8001c0a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001c0e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001c10:	4b0b      	ldr	r3, [pc, #44]	; (8001c40 <HAL_Init+0x40>)
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	4a0a      	ldr	r2, [pc, #40]	; (8001c40 <HAL_Init+0x40>)
 8001c16:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001c1a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001c1c:	4b08      	ldr	r3, [pc, #32]	; (8001c40 <HAL_Init+0x40>)
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	4a07      	ldr	r2, [pc, #28]	; (8001c40 <HAL_Init+0x40>)
 8001c22:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001c26:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001c28:	2003      	movs	r0, #3
 8001c2a:	f000 f94f 	bl	8001ecc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001c2e:	2000      	movs	r0, #0
 8001c30:	f000 f808 	bl	8001c44 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001c34:	f7ff fd94 	bl	8001760 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001c38:	2300      	movs	r3, #0
}
 8001c3a:	4618      	mov	r0, r3
 8001c3c:	bd80      	pop	{r7, pc}
 8001c3e:	bf00      	nop
 8001c40:	40023c00 	.word	0x40023c00

08001c44 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001c44:	b580      	push	{r7, lr}
 8001c46:	b082      	sub	sp, #8
 8001c48:	af00      	add	r7, sp, #0
 8001c4a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001c4c:	4b12      	ldr	r3, [pc, #72]	; (8001c98 <HAL_InitTick+0x54>)
 8001c4e:	681a      	ldr	r2, [r3, #0]
 8001c50:	4b12      	ldr	r3, [pc, #72]	; (8001c9c <HAL_InitTick+0x58>)
 8001c52:	781b      	ldrb	r3, [r3, #0]
 8001c54:	4619      	mov	r1, r3
 8001c56:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001c5a:	fbb3 f3f1 	udiv	r3, r3, r1
 8001c5e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001c62:	4618      	mov	r0, r3
 8001c64:	f000 f967 	bl	8001f36 <HAL_SYSTICK_Config>
 8001c68:	4603      	mov	r3, r0
 8001c6a:	2b00      	cmp	r3, #0
 8001c6c:	d001      	beq.n	8001c72 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001c6e:	2301      	movs	r3, #1
 8001c70:	e00e      	b.n	8001c90 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	2b0f      	cmp	r3, #15
 8001c76:	d80a      	bhi.n	8001c8e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001c78:	2200      	movs	r2, #0
 8001c7a:	6879      	ldr	r1, [r7, #4]
 8001c7c:	f04f 30ff 	mov.w	r0, #4294967295
 8001c80:	f000 f92f 	bl	8001ee2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001c84:	4a06      	ldr	r2, [pc, #24]	; (8001ca0 <HAL_InitTick+0x5c>)
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001c8a:	2300      	movs	r3, #0
 8001c8c:	e000      	b.n	8001c90 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001c8e:	2301      	movs	r3, #1
}
 8001c90:	4618      	mov	r0, r3
 8001c92:	3708      	adds	r7, #8
 8001c94:	46bd      	mov	sp, r7
 8001c96:	bd80      	pop	{r7, pc}
 8001c98:	20000000 	.word	0x20000000
 8001c9c:	20000008 	.word	0x20000008
 8001ca0:	20000004 	.word	0x20000004

08001ca4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001ca4:	b480      	push	{r7}
 8001ca6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001ca8:	4b06      	ldr	r3, [pc, #24]	; (8001cc4 <HAL_IncTick+0x20>)
 8001caa:	781b      	ldrb	r3, [r3, #0]
 8001cac:	461a      	mov	r2, r3
 8001cae:	4b06      	ldr	r3, [pc, #24]	; (8001cc8 <HAL_IncTick+0x24>)
 8001cb0:	681b      	ldr	r3, [r3, #0]
 8001cb2:	4413      	add	r3, r2
 8001cb4:	4a04      	ldr	r2, [pc, #16]	; (8001cc8 <HAL_IncTick+0x24>)
 8001cb6:	6013      	str	r3, [r2, #0]
}
 8001cb8:	bf00      	nop
 8001cba:	46bd      	mov	sp, r7
 8001cbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cc0:	4770      	bx	lr
 8001cc2:	bf00      	nop
 8001cc4:	20000008 	.word	0x20000008
 8001cc8:	200008b0 	.word	0x200008b0

08001ccc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001ccc:	b480      	push	{r7}
 8001cce:	af00      	add	r7, sp, #0
  return uwTick;
 8001cd0:	4b03      	ldr	r3, [pc, #12]	; (8001ce0 <HAL_GetTick+0x14>)
 8001cd2:	681b      	ldr	r3, [r3, #0]
}
 8001cd4:	4618      	mov	r0, r3
 8001cd6:	46bd      	mov	sp, r7
 8001cd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cdc:	4770      	bx	lr
 8001cde:	bf00      	nop
 8001ce0:	200008b0 	.word	0x200008b0

08001ce4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001ce4:	b580      	push	{r7, lr}
 8001ce6:	b084      	sub	sp, #16
 8001ce8:	af00      	add	r7, sp, #0
 8001cea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001cec:	f7ff ffee 	bl	8001ccc <HAL_GetTick>
 8001cf0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001cf6:	68fb      	ldr	r3, [r7, #12]
 8001cf8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001cfc:	d005      	beq.n	8001d0a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001cfe:	4b0a      	ldr	r3, [pc, #40]	; (8001d28 <HAL_Delay+0x44>)
 8001d00:	781b      	ldrb	r3, [r3, #0]
 8001d02:	461a      	mov	r2, r3
 8001d04:	68fb      	ldr	r3, [r7, #12]
 8001d06:	4413      	add	r3, r2
 8001d08:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001d0a:	bf00      	nop
 8001d0c:	f7ff ffde 	bl	8001ccc <HAL_GetTick>
 8001d10:	4602      	mov	r2, r0
 8001d12:	68bb      	ldr	r3, [r7, #8]
 8001d14:	1ad3      	subs	r3, r2, r3
 8001d16:	68fa      	ldr	r2, [r7, #12]
 8001d18:	429a      	cmp	r2, r3
 8001d1a:	d8f7      	bhi.n	8001d0c <HAL_Delay+0x28>
  {
  }
}
 8001d1c:	bf00      	nop
 8001d1e:	bf00      	nop
 8001d20:	3710      	adds	r7, #16
 8001d22:	46bd      	mov	sp, r7
 8001d24:	bd80      	pop	{r7, pc}
 8001d26:	bf00      	nop
 8001d28:	20000008 	.word	0x20000008

08001d2c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001d2c:	b480      	push	{r7}
 8001d2e:	b085      	sub	sp, #20
 8001d30:	af00      	add	r7, sp, #0
 8001d32:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	f003 0307 	and.w	r3, r3, #7
 8001d3a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001d3c:	4b0c      	ldr	r3, [pc, #48]	; (8001d70 <__NVIC_SetPriorityGrouping+0x44>)
 8001d3e:	68db      	ldr	r3, [r3, #12]
 8001d40:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001d42:	68ba      	ldr	r2, [r7, #8]
 8001d44:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001d48:	4013      	ands	r3, r2
 8001d4a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001d4c:	68fb      	ldr	r3, [r7, #12]
 8001d4e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001d50:	68bb      	ldr	r3, [r7, #8]
 8001d52:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001d54:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001d58:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001d5c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001d5e:	4a04      	ldr	r2, [pc, #16]	; (8001d70 <__NVIC_SetPriorityGrouping+0x44>)
 8001d60:	68bb      	ldr	r3, [r7, #8]
 8001d62:	60d3      	str	r3, [r2, #12]
}
 8001d64:	bf00      	nop
 8001d66:	3714      	adds	r7, #20
 8001d68:	46bd      	mov	sp, r7
 8001d6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d6e:	4770      	bx	lr
 8001d70:	e000ed00 	.word	0xe000ed00

08001d74 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001d74:	b480      	push	{r7}
 8001d76:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001d78:	4b04      	ldr	r3, [pc, #16]	; (8001d8c <__NVIC_GetPriorityGrouping+0x18>)
 8001d7a:	68db      	ldr	r3, [r3, #12]
 8001d7c:	0a1b      	lsrs	r3, r3, #8
 8001d7e:	f003 0307 	and.w	r3, r3, #7
}
 8001d82:	4618      	mov	r0, r3
 8001d84:	46bd      	mov	sp, r7
 8001d86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d8a:	4770      	bx	lr
 8001d8c:	e000ed00 	.word	0xe000ed00

08001d90 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001d90:	b480      	push	{r7}
 8001d92:	b083      	sub	sp, #12
 8001d94:	af00      	add	r7, sp, #0
 8001d96:	4603      	mov	r3, r0
 8001d98:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001d9a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d9e:	2b00      	cmp	r3, #0
 8001da0:	db0b      	blt.n	8001dba <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001da2:	79fb      	ldrb	r3, [r7, #7]
 8001da4:	f003 021f 	and.w	r2, r3, #31
 8001da8:	4907      	ldr	r1, [pc, #28]	; (8001dc8 <__NVIC_EnableIRQ+0x38>)
 8001daa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001dae:	095b      	lsrs	r3, r3, #5
 8001db0:	2001      	movs	r0, #1
 8001db2:	fa00 f202 	lsl.w	r2, r0, r2
 8001db6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001dba:	bf00      	nop
 8001dbc:	370c      	adds	r7, #12
 8001dbe:	46bd      	mov	sp, r7
 8001dc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dc4:	4770      	bx	lr
 8001dc6:	bf00      	nop
 8001dc8:	e000e100 	.word	0xe000e100

08001dcc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001dcc:	b480      	push	{r7}
 8001dce:	b083      	sub	sp, #12
 8001dd0:	af00      	add	r7, sp, #0
 8001dd2:	4603      	mov	r3, r0
 8001dd4:	6039      	str	r1, [r7, #0]
 8001dd6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001dd8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ddc:	2b00      	cmp	r3, #0
 8001dde:	db0a      	blt.n	8001df6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001de0:	683b      	ldr	r3, [r7, #0]
 8001de2:	b2da      	uxtb	r2, r3
 8001de4:	490c      	ldr	r1, [pc, #48]	; (8001e18 <__NVIC_SetPriority+0x4c>)
 8001de6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001dea:	0112      	lsls	r2, r2, #4
 8001dec:	b2d2      	uxtb	r2, r2
 8001dee:	440b      	add	r3, r1
 8001df0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001df4:	e00a      	b.n	8001e0c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001df6:	683b      	ldr	r3, [r7, #0]
 8001df8:	b2da      	uxtb	r2, r3
 8001dfa:	4908      	ldr	r1, [pc, #32]	; (8001e1c <__NVIC_SetPriority+0x50>)
 8001dfc:	79fb      	ldrb	r3, [r7, #7]
 8001dfe:	f003 030f 	and.w	r3, r3, #15
 8001e02:	3b04      	subs	r3, #4
 8001e04:	0112      	lsls	r2, r2, #4
 8001e06:	b2d2      	uxtb	r2, r2
 8001e08:	440b      	add	r3, r1
 8001e0a:	761a      	strb	r2, [r3, #24]
}
 8001e0c:	bf00      	nop
 8001e0e:	370c      	adds	r7, #12
 8001e10:	46bd      	mov	sp, r7
 8001e12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e16:	4770      	bx	lr
 8001e18:	e000e100 	.word	0xe000e100
 8001e1c:	e000ed00 	.word	0xe000ed00

08001e20 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001e20:	b480      	push	{r7}
 8001e22:	b089      	sub	sp, #36	; 0x24
 8001e24:	af00      	add	r7, sp, #0
 8001e26:	60f8      	str	r0, [r7, #12]
 8001e28:	60b9      	str	r1, [r7, #8]
 8001e2a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001e2c:	68fb      	ldr	r3, [r7, #12]
 8001e2e:	f003 0307 	and.w	r3, r3, #7
 8001e32:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001e34:	69fb      	ldr	r3, [r7, #28]
 8001e36:	f1c3 0307 	rsb	r3, r3, #7
 8001e3a:	2b04      	cmp	r3, #4
 8001e3c:	bf28      	it	cs
 8001e3e:	2304      	movcs	r3, #4
 8001e40:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001e42:	69fb      	ldr	r3, [r7, #28]
 8001e44:	3304      	adds	r3, #4
 8001e46:	2b06      	cmp	r3, #6
 8001e48:	d902      	bls.n	8001e50 <NVIC_EncodePriority+0x30>
 8001e4a:	69fb      	ldr	r3, [r7, #28]
 8001e4c:	3b03      	subs	r3, #3
 8001e4e:	e000      	b.n	8001e52 <NVIC_EncodePriority+0x32>
 8001e50:	2300      	movs	r3, #0
 8001e52:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001e54:	f04f 32ff 	mov.w	r2, #4294967295
 8001e58:	69bb      	ldr	r3, [r7, #24]
 8001e5a:	fa02 f303 	lsl.w	r3, r2, r3
 8001e5e:	43da      	mvns	r2, r3
 8001e60:	68bb      	ldr	r3, [r7, #8]
 8001e62:	401a      	ands	r2, r3
 8001e64:	697b      	ldr	r3, [r7, #20]
 8001e66:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001e68:	f04f 31ff 	mov.w	r1, #4294967295
 8001e6c:	697b      	ldr	r3, [r7, #20]
 8001e6e:	fa01 f303 	lsl.w	r3, r1, r3
 8001e72:	43d9      	mvns	r1, r3
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001e78:	4313      	orrs	r3, r2
         );
}
 8001e7a:	4618      	mov	r0, r3
 8001e7c:	3724      	adds	r7, #36	; 0x24
 8001e7e:	46bd      	mov	sp, r7
 8001e80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e84:	4770      	bx	lr
	...

08001e88 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001e88:	b580      	push	{r7, lr}
 8001e8a:	b082      	sub	sp, #8
 8001e8c:	af00      	add	r7, sp, #0
 8001e8e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	3b01      	subs	r3, #1
 8001e94:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001e98:	d301      	bcc.n	8001e9e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001e9a:	2301      	movs	r3, #1
 8001e9c:	e00f      	b.n	8001ebe <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001e9e:	4a0a      	ldr	r2, [pc, #40]	; (8001ec8 <SysTick_Config+0x40>)
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	3b01      	subs	r3, #1
 8001ea4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001ea6:	210f      	movs	r1, #15
 8001ea8:	f04f 30ff 	mov.w	r0, #4294967295
 8001eac:	f7ff ff8e 	bl	8001dcc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001eb0:	4b05      	ldr	r3, [pc, #20]	; (8001ec8 <SysTick_Config+0x40>)
 8001eb2:	2200      	movs	r2, #0
 8001eb4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001eb6:	4b04      	ldr	r3, [pc, #16]	; (8001ec8 <SysTick_Config+0x40>)
 8001eb8:	2207      	movs	r2, #7
 8001eba:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001ebc:	2300      	movs	r3, #0
}
 8001ebe:	4618      	mov	r0, r3
 8001ec0:	3708      	adds	r7, #8
 8001ec2:	46bd      	mov	sp, r7
 8001ec4:	bd80      	pop	{r7, pc}
 8001ec6:	bf00      	nop
 8001ec8:	e000e010 	.word	0xe000e010

08001ecc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001ecc:	b580      	push	{r7, lr}
 8001ece:	b082      	sub	sp, #8
 8001ed0:	af00      	add	r7, sp, #0
 8001ed2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001ed4:	6878      	ldr	r0, [r7, #4]
 8001ed6:	f7ff ff29 	bl	8001d2c <__NVIC_SetPriorityGrouping>
}
 8001eda:	bf00      	nop
 8001edc:	3708      	adds	r7, #8
 8001ede:	46bd      	mov	sp, r7
 8001ee0:	bd80      	pop	{r7, pc}

08001ee2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001ee2:	b580      	push	{r7, lr}
 8001ee4:	b086      	sub	sp, #24
 8001ee6:	af00      	add	r7, sp, #0
 8001ee8:	4603      	mov	r3, r0
 8001eea:	60b9      	str	r1, [r7, #8]
 8001eec:	607a      	str	r2, [r7, #4]
 8001eee:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001ef0:	2300      	movs	r3, #0
 8001ef2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001ef4:	f7ff ff3e 	bl	8001d74 <__NVIC_GetPriorityGrouping>
 8001ef8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001efa:	687a      	ldr	r2, [r7, #4]
 8001efc:	68b9      	ldr	r1, [r7, #8]
 8001efe:	6978      	ldr	r0, [r7, #20]
 8001f00:	f7ff ff8e 	bl	8001e20 <NVIC_EncodePriority>
 8001f04:	4602      	mov	r2, r0
 8001f06:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001f0a:	4611      	mov	r1, r2
 8001f0c:	4618      	mov	r0, r3
 8001f0e:	f7ff ff5d 	bl	8001dcc <__NVIC_SetPriority>
}
 8001f12:	bf00      	nop
 8001f14:	3718      	adds	r7, #24
 8001f16:	46bd      	mov	sp, r7
 8001f18:	bd80      	pop	{r7, pc}

08001f1a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001f1a:	b580      	push	{r7, lr}
 8001f1c:	b082      	sub	sp, #8
 8001f1e:	af00      	add	r7, sp, #0
 8001f20:	4603      	mov	r3, r0
 8001f22:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001f24:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f28:	4618      	mov	r0, r3
 8001f2a:	f7ff ff31 	bl	8001d90 <__NVIC_EnableIRQ>
}
 8001f2e:	bf00      	nop
 8001f30:	3708      	adds	r7, #8
 8001f32:	46bd      	mov	sp, r7
 8001f34:	bd80      	pop	{r7, pc}

08001f36 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001f36:	b580      	push	{r7, lr}
 8001f38:	b082      	sub	sp, #8
 8001f3a:	af00      	add	r7, sp, #0
 8001f3c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001f3e:	6878      	ldr	r0, [r7, #4]
 8001f40:	f7ff ffa2 	bl	8001e88 <SysTick_Config>
 8001f44:	4603      	mov	r3, r0
}
 8001f46:	4618      	mov	r0, r3
 8001f48:	3708      	adds	r7, #8
 8001f4a:	46bd      	mov	sp, r7
 8001f4c:	bd80      	pop	{r7, pc}

08001f4e <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001f4e:	b580      	push	{r7, lr}
 8001f50:	b084      	sub	sp, #16
 8001f52:	af00      	add	r7, sp, #0
 8001f54:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f5a:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8001f5c:	f7ff feb6 	bl	8001ccc <HAL_GetTick>
 8001f60:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001f68:	b2db      	uxtb	r3, r3
 8001f6a:	2b02      	cmp	r3, #2
 8001f6c:	d008      	beq.n	8001f80 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	2280      	movs	r2, #128	; 0x80
 8001f72:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	2200      	movs	r2, #0
 8001f78:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8001f7c:	2301      	movs	r3, #1
 8001f7e:	e052      	b.n	8002026 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	681a      	ldr	r2, [r3, #0]
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	f022 0216 	bic.w	r2, r2, #22
 8001f8e:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	695a      	ldr	r2, [r3, #20]
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001f9e:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fa4:	2b00      	cmp	r3, #0
 8001fa6:	d103      	bne.n	8001fb0 <HAL_DMA_Abort+0x62>
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001fac:	2b00      	cmp	r3, #0
 8001fae:	d007      	beq.n	8001fc0 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	681a      	ldr	r2, [r3, #0]
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	f022 0208 	bic.w	r2, r2, #8
 8001fbe:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	681a      	ldr	r2, [r3, #0]
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	f022 0201 	bic.w	r2, r2, #1
 8001fce:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001fd0:	e013      	b.n	8001ffa <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001fd2:	f7ff fe7b 	bl	8001ccc <HAL_GetTick>
 8001fd6:	4602      	mov	r2, r0
 8001fd8:	68bb      	ldr	r3, [r7, #8]
 8001fda:	1ad3      	subs	r3, r2, r3
 8001fdc:	2b05      	cmp	r3, #5
 8001fde:	d90c      	bls.n	8001ffa <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	2220      	movs	r2, #32
 8001fe4:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	2203      	movs	r2, #3
 8001fea:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	2200      	movs	r2, #0
 8001ff2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8001ff6:	2303      	movs	r3, #3
 8001ff8:	e015      	b.n	8002026 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	f003 0301 	and.w	r3, r3, #1
 8002004:	2b00      	cmp	r3, #0
 8002006:	d1e4      	bne.n	8001fd2 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800200c:	223f      	movs	r2, #63	; 0x3f
 800200e:	409a      	lsls	r2, r3
 8002010:	68fb      	ldr	r3, [r7, #12]
 8002012:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	2201      	movs	r2, #1
 8002018:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	2200      	movs	r2, #0
 8002020:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8002024:	2300      	movs	r3, #0
}
 8002026:	4618      	mov	r0, r3
 8002028:	3710      	adds	r7, #16
 800202a:	46bd      	mov	sp, r7
 800202c:	bd80      	pop	{r7, pc}

0800202e <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800202e:	b480      	push	{r7}
 8002030:	b083      	sub	sp, #12
 8002032:	af00      	add	r7, sp, #0
 8002034:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800203c:	b2db      	uxtb	r3, r3
 800203e:	2b02      	cmp	r3, #2
 8002040:	d004      	beq.n	800204c <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	2280      	movs	r2, #128	; 0x80
 8002046:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8002048:	2301      	movs	r3, #1
 800204a:	e00c      	b.n	8002066 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	2205      	movs	r2, #5
 8002050:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	681a      	ldr	r2, [r3, #0]
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	f022 0201 	bic.w	r2, r2, #1
 8002062:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8002064:	2300      	movs	r3, #0
}
 8002066:	4618      	mov	r0, r3
 8002068:	370c      	adds	r7, #12
 800206a:	46bd      	mov	sp, r7
 800206c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002070:	4770      	bx	lr
	...

08002074 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8002074:	b580      	push	{r7, lr}
 8002076:	b084      	sub	sp, #16
 8002078:	af00      	add	r7, sp, #0
 800207a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	2b00      	cmp	r3, #0
 8002080:	d101      	bne.n	8002086 <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 8002082:	2301      	movs	r3, #1
 8002084:	e06c      	b.n	8002160 <HAL_ETH_Init+0xec>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800208c:	2b00      	cmp	r3, #0
 800208e:	d106      	bne.n	800209e <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	2223      	movs	r2, #35	; 0x23
 8002094:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8002098:	6878      	ldr	r0, [r7, #4]
 800209a:	f7ff fb89 	bl	80017b0 <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800209e:	2300      	movs	r3, #0
 80020a0:	60bb      	str	r3, [r7, #8]
 80020a2:	4b31      	ldr	r3, [pc, #196]	; (8002168 <HAL_ETH_Init+0xf4>)
 80020a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80020a6:	4a30      	ldr	r2, [pc, #192]	; (8002168 <HAL_ETH_Init+0xf4>)
 80020a8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80020ac:	6453      	str	r3, [r2, #68]	; 0x44
 80020ae:	4b2e      	ldr	r3, [pc, #184]	; (8002168 <HAL_ETH_Init+0xf4>)
 80020b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80020b2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80020b6:	60bb      	str	r3, [r7, #8]
 80020b8:	68bb      	ldr	r3, [r7, #8]

  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 80020ba:	4b2c      	ldr	r3, [pc, #176]	; (800216c <HAL_ETH_Init+0xf8>)
 80020bc:	685b      	ldr	r3, [r3, #4]
 80020be:	4a2b      	ldr	r2, [pc, #172]	; (800216c <HAL_ETH_Init+0xf8>)
 80020c0:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 80020c4:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 80020c6:	4b29      	ldr	r3, [pc, #164]	; (800216c <HAL_ETH_Init+0xf8>)
 80020c8:	685a      	ldr	r2, [r3, #4]
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	689b      	ldr	r3, [r3, #8]
 80020ce:	4927      	ldr	r1, [pc, #156]	; (800216c <HAL_ETH_Init+0xf8>)
 80020d0:	4313      	orrs	r3, r2
 80020d2:	604b      	str	r3, [r1, #4]
  /* Dummy read to sync SYSCFG with ETH */
  (void)SYSCFG->PMC;
 80020d4:	4b25      	ldr	r3, [pc, #148]	; (800216c <HAL_ETH_Init+0xf8>)
 80020d6:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR);
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	687a      	ldr	r2, [r7, #4]
 80020e4:	6812      	ldr	r2, [r2, #0]
 80020e6:	f043 0301 	orr.w	r3, r3, #1
 80020ea:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80020ee:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80020f0:	f7ff fdec 	bl	8001ccc <HAL_GetTick>
 80020f4:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 80020f6:	e011      	b.n	800211c <HAL_ETH_Init+0xa8>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 80020f8:	f7ff fde8 	bl	8001ccc <HAL_GetTick>
 80020fc:	4602      	mov	r2, r0
 80020fe:	68fb      	ldr	r3, [r7, #12]
 8002100:	1ad3      	subs	r3, r2, r3
 8002102:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8002106:	d909      	bls.n	800211c <HAL_ETH_Init+0xa8>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	2204      	movs	r2, #4
 800210c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	22e0      	movs	r2, #224	; 0xe0
 8002114:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      /* Return Error */
      return HAL_ERROR;
 8002118:	2301      	movs	r3, #1
 800211a:	e021      	b.n	8002160 <HAL_ETH_Init+0xec>
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	f003 0301 	and.w	r3, r3, #1
 800212a:	2b00      	cmp	r3, #0
 800212c:	d1e4      	bne.n	80020f8 <HAL_ETH_Init+0x84>
    }
  }


  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 800212e:	6878      	ldr	r0, [r7, #4]
 8002130:	f000 f944 	bl	80023bc <ETH_MACDMAConfig>


  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 8002134:	6878      	ldr	r0, [r7, #4]
 8002136:	f000 f9eb 	bl	8002510 <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 800213a:	6878      	ldr	r0, [r7, #4]
 800213c:	f000 fa41 	bl	80025c2 <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	685b      	ldr	r3, [r3, #4]
 8002144:	461a      	mov	r2, r3
 8002146:	2100      	movs	r1, #0
 8002148:	6878      	ldr	r0, [r7, #4]
 800214a:	f000 f9a9 	bl	80024a0 <ETH_MACAddressConfig>

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	2200      	movs	r2, #0
 8002152:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  heth->gState = HAL_ETH_STATE_READY;
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	2210      	movs	r2, #16
 800215a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800215e:	2300      	movs	r3, #0
}
 8002160:	4618      	mov	r0, r3
 8002162:	3710      	adds	r7, #16
 8002164:	46bd      	mov	sp, r7
 8002166:	bd80      	pop	{r7, pc}
 8002168:	40023800 	.word	0x40023800
 800216c:	40013800 	.word	0x40013800

08002170 <ETH_SetMACConfig>:
  HAL_Delay(ETH_REG_WRITE_DELAY);
  (heth->Instance)->DMAOMR = tmpreg;
}

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 8002170:	b580      	push	{r7, lr}
 8002172:	b084      	sub	sp, #16
 8002174:	af00      	add	r7, sp, #0
 8002176:	6078      	str	r0, [r7, #4]
 8002178:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg1 = (heth->Instance)->MACCR;
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	60fb      	str	r3, [r7, #12]
  /* Clear WD, PCE, PS, TE and RE bits */
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 8002182:	68fa      	ldr	r2, [r7, #12]
 8002184:	4b47      	ldr	r3, [pc, #284]	; (80022a4 <ETH_SetMACConfig+0x134>)
 8002186:	4013      	ands	r3, r2
 8002188:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 800218a:	683b      	ldr	r3, [r7, #0]
 800218c:	7c1b      	ldrb	r3, [r3, #16]
 800218e:	2b00      	cmp	r3, #0
 8002190:	d102      	bne.n	8002198 <ETH_SetMACConfig+0x28>
 8002192:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8002196:	e000      	b.n	800219a <ETH_SetMACConfig+0x2a>
 8002198:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 800219a:	683b      	ldr	r3, [r7, #0]
 800219c:	7c5b      	ldrb	r3, [r3, #17]
 800219e:	2b00      	cmp	r3, #0
 80021a0:	d102      	bne.n	80021a8 <ETH_SetMACConfig+0x38>
 80021a2:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80021a6:	e000      	b.n	80021aa <ETH_SetMACConfig+0x3a>
 80021a8:	2300      	movs	r3, #0
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 80021aa:	431a      	orrs	r2, r3
                        (uint32_t)macconf->InterPacketGapVal |
 80021ac:	683b      	ldr	r3, [r7, #0]
 80021ae:	689b      	ldr	r3, [r3, #8]
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 80021b0:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 80021b2:	683b      	ldr	r3, [r7, #0]
 80021b4:	7fdb      	ldrb	r3, [r3, #31]
 80021b6:	041b      	lsls	r3, r3, #16
                        (uint32_t)macconf->InterPacketGapVal |
 80021b8:	431a      	orrs	r2, r3
                        macconf->Speed |
 80021ba:	683b      	ldr	r3, [r7, #0]
 80021bc:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 80021be:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 80021c0:	683a      	ldr	r2, [r7, #0]
 80021c2:	7f92      	ldrb	r2, [r2, #30]
 80021c4:	2a00      	cmp	r2, #0
 80021c6:	d102      	bne.n	80021ce <ETH_SetMACConfig+0x5e>
 80021c8:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80021cc:	e000      	b.n	80021d0 <ETH_SetMACConfig+0x60>
 80021ce:	2200      	movs	r2, #0
                        macconf->Speed |
 80021d0:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 80021d2:	683b      	ldr	r3, [r7, #0]
 80021d4:	7f1b      	ldrb	r3, [r3, #28]
 80021d6:	031b      	lsls	r3, r3, #12
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 80021d8:	431a      	orrs	r2, r3
                        macconf->DuplexMode |
 80021da:	683b      	ldr	r3, [r7, #0]
 80021dc:	699b      	ldr	r3, [r3, #24]
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 80021de:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 80021e0:	683b      	ldr	r3, [r7, #0]
 80021e2:	791b      	ldrb	r3, [r3, #4]
 80021e4:	029b      	lsls	r3, r3, #10
                        macconf->DuplexMode |
 80021e6:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 80021e8:	683a      	ldr	r2, [r7, #0]
 80021ea:	f892 2020 	ldrb.w	r2, [r2, #32]
 80021ee:	2a00      	cmp	r2, #0
 80021f0:	d102      	bne.n	80021f8 <ETH_SetMACConfig+0x88>
 80021f2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80021f6:	e000      	b.n	80021fa <ETH_SetMACConfig+0x8a>
 80021f8:	2200      	movs	r2, #0
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 80021fa:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 80021fc:	683b      	ldr	r3, [r7, #0]
 80021fe:	7bdb      	ldrb	r3, [r3, #15]
 8002200:	01db      	lsls	r3, r3, #7
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 8002202:	431a      	orrs	r2, r3
                        macconf->BackOffLimit |
 8002204:	683b      	ldr	r3, [r7, #0]
 8002206:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8002208:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->DeferralCheck << 4U));
 800220a:	683b      	ldr	r3, [r7, #0]
 800220c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8002210:	011b      	lsls	r3, r3, #4
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8002212:	4313      	orrs	r3, r2
 8002214:	68fa      	ldr	r2, [r7, #12]
 8002216:	4313      	orrs	r3, r2
 8002218:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	68fa      	ldr	r2, [r7, #12]
 8002220:	601a      	str	r2, [r3, #0]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 800222a:	2001      	movs	r0, #1
 800222c:	f7ff fd5a 	bl	8001ce4 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	68fa      	ldr	r2, [r7, #12]
 8002236:	601a      	str	r2, [r3, #0]

  /*----------------------- ETHERNET MACFCR Configuration --------------------*/

  /* Get the ETHERNET MACFCR value */
  tmpreg1 = (heth->Instance)->MACFCR;
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	699b      	ldr	r3, [r3, #24]
 800223e:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 8002240:	68fa      	ldr	r2, [r7, #12]
 8002242:	f64f 7341 	movw	r3, #65345	; 0xff41
 8002246:	4013      	ands	r3, r2
 8002248:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 800224a:	683b      	ldr	r3, [r7, #0]
 800224c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800224e:	041b      	lsls	r3, r3, #16
                        (uint32_t)macconf->ZeroQuantaPause |
 8002250:	683a      	ldr	r2, [r7, #0]
 8002252:	f892 204c 	ldrb.w	r2, [r2, #76]	; 0x4c
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8002256:	431a      	orrs	r2, r3
                        macconf->PauseLowThreshold |
 8002258:	683b      	ldr	r3, [r7, #0]
 800225a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
                        (uint32_t)macconf->ZeroQuantaPause |
 800225c:	4313      	orrs	r3, r2
                        (uint32_t)macconf->UnicastSlowProtocolPacketDetect |
 800225e:	683a      	ldr	r2, [r7, #0]
 8002260:	f892 2030 	ldrb.w	r2, [r2, #48]	; 0x30
                        macconf->PauseLowThreshold |
 8002264:	4313      	orrs	r3, r2
                        (uint32_t)macconf->ReceiveFlowControl |
 8002266:	683a      	ldr	r2, [r7, #0]
 8002268:	f892 2056 	ldrb.w	r2, [r2, #86]	; 0x56
                        (uint32_t)macconf->UnicastSlowProtocolPacketDetect |
 800226c:	4313      	orrs	r3, r2
                        (uint32_t)macconf->TransmitFlowControl);
 800226e:	683a      	ldr	r2, [r7, #0]
 8002270:	f892 2054 	ldrb.w	r2, [r2, #84]	; 0x54
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8002274:	4313      	orrs	r3, r2
 8002276:	68fa      	ldr	r2, [r7, #12]
 8002278:	4313      	orrs	r3, r2
 800227a:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACFCR */
  (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	68fa      	ldr	r2, [r7, #12]
 8002282:	619a      	str	r2, [r3, #24]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACFCR;
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	699b      	ldr	r3, [r3, #24]
 800228a:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 800228c:	2001      	movs	r0, #1
 800228e:	f7ff fd29 	bl	8001ce4 <HAL_Delay>
  (heth->Instance)->MACFCR = tmpreg1;
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	68fa      	ldr	r2, [r7, #12]
 8002298:	619a      	str	r2, [r3, #24]
}
 800229a:	bf00      	nop
 800229c:	3710      	adds	r7, #16
 800229e:	46bd      	mov	sp, r7
 80022a0:	bd80      	pop	{r7, pc}
 80022a2:	bf00      	nop
 80022a4:	ff20810f 	.word	0xff20810f

080022a8 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth,  ETH_DMAConfigTypeDef *dmaconf)
{
 80022a8:	b580      	push	{r7, lr}
 80022aa:	b084      	sub	sp, #16
 80022ac:	af00      	add	r7, sp, #0
 80022ae:	6078      	str	r0, [r7, #4]
 80022b0:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*----------------------- ETHERNET DMAOMR Configuration --------------------*/
  /* Get the ETHERNET DMAOMR value */
  tmpreg1 = (heth->Instance)->DMAOMR;
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80022ba:	699b      	ldr	r3, [r3, #24]
 80022bc:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 80022be:	68fa      	ldr	r2, [r7, #12]
 80022c0:	4b3d      	ldr	r3, [pc, #244]	; (80023b8 <ETH_SetDMAConfig+0x110>)
 80022c2:	4013      	ands	r3, r2
 80022c4:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 80022c6:	683b      	ldr	r3, [r7, #0]
 80022c8:	7b1b      	ldrb	r3, [r3, #12]
 80022ca:	2b00      	cmp	r3, #0
 80022cc:	d102      	bne.n	80022d4 <ETH_SetDMAConfig+0x2c>
 80022ce:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 80022d2:	e000      	b.n	80022d6 <ETH_SetDMAConfig+0x2e>
 80022d4:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 80022d6:	683b      	ldr	r3, [r7, #0]
 80022d8:	7b5b      	ldrb	r3, [r3, #13]
 80022da:	065b      	lsls	r3, r3, #25
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 80022dc:	4313      	orrs	r3, r2
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 80022de:	683a      	ldr	r2, [r7, #0]
 80022e0:	7f52      	ldrb	r2, [r2, #29]
 80022e2:	2a00      	cmp	r2, #0
 80022e4:	d102      	bne.n	80022ec <ETH_SetDMAConfig+0x44>
 80022e6:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80022ea:	e000      	b.n	80022ee <ETH_SetDMAConfig+0x46>
 80022ec:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 80022ee:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 80022f0:	683b      	ldr	r3, [r7, #0]
 80022f2:	7b9b      	ldrb	r3, [r3, #14]
 80022f4:	055b      	lsls	r3, r3, #21
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 80022f6:	431a      	orrs	r2, r3
                        dmaconf->TransmitThresholdControl |
 80022f8:	683b      	ldr	r3, [r7, #0]
 80022fa:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 80022fc:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 80022fe:	683b      	ldr	r3, [r7, #0]
 8002300:	7f1b      	ldrb	r3, [r3, #28]
 8002302:	01db      	lsls	r3, r3, #7
                        dmaconf->TransmitThresholdControl |
 8002304:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 8002306:	683b      	ldr	r3, [r7, #0]
 8002308:	7f9b      	ldrb	r3, [r3, #30]
 800230a:	019b      	lsls	r3, r3, #6
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 800230c:	431a      	orrs	r2, r3
                        dmaconf->ReceiveThresholdControl |
 800230e:	683b      	ldr	r3, [r7, #0]
 8002310:	6a1b      	ldr	r3, [r3, #32]
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 8002312:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->SecondFrameOperate << 2U));
 8002314:	683b      	ldr	r3, [r7, #0]
 8002316:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800231a:	009b      	lsls	r3, r3, #2
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 800231c:	4313      	orrs	r3, r2
 800231e:	68fa      	ldr	r2, [r7, #12]
 8002320:	4313      	orrs	r3, r2
 8002322:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET DMAOMR */
  (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800232c:	461a      	mov	r2, r3
 800232e:	68fb      	ldr	r3, [r7, #12]
 8002330:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMAOMR;
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800233a:	699b      	ldr	r3, [r3, #24]
 800233c:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 800233e:	2001      	movs	r0, #1
 8002340:	f7ff fcd0 	bl	8001ce4 <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800234c:	461a      	mov	r2, r3
 800234e:	68fb      	ldr	r3, [r7, #12]
 8002350:	6193      	str	r3, [r2, #24]

  /*----------------------- ETHERNET DMABMR Configuration --------------------*/
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8002352:	683b      	ldr	r3, [r7, #0]
 8002354:	791b      	ldrb	r3, [r3, #4]
 8002356:	065a      	lsls	r2, r3, #25
                                        dmaconf->BurstMode |
 8002358:	683b      	ldr	r3, [r7, #0]
 800235a:	689b      	ldr	r3, [r3, #8]
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 800235c:	431a      	orrs	r2, r3
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 800235e:	683b      	ldr	r3, [r7, #0]
 8002360:	699b      	ldr	r3, [r3, #24]
                                        dmaconf->BurstMode |
 8002362:	431a      	orrs	r2, r3
                                                                       Rx it is applied for the other */
                                        dmaconf->TxDMABurstLength |
 8002364:	683b      	ldr	r3, [r7, #0]
 8002366:	691b      	ldr	r3, [r3, #16]
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 8002368:	431a      	orrs	r2, r3
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 800236a:	683b      	ldr	r3, [r7, #0]
 800236c:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8002370:	01db      	lsls	r3, r3, #7
                                        dmaconf->TxDMABurstLength |
 8002372:	431a      	orrs	r2, r3
                                        (dmaconf->DescriptorSkipLength << 2U) |
 8002374:	683b      	ldr	r3, [r7, #0]
 8002376:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002378:	009b      	lsls	r3, r3, #2
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 800237a:	431a      	orrs	r2, r3
                                        dmaconf->DMAArbitration |
 800237c:	683b      	ldr	r3, [r7, #0]
 800237e:	681b      	ldr	r3, [r3, #0]
                                        (dmaconf->DescriptorSkipLength << 2U) |
 8002380:	4313      	orrs	r3, r2
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8002382:	687a      	ldr	r2, [r7, #4]
 8002384:	6812      	ldr	r2, [r2, #0]
 8002386:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800238a:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800238e:	6013      	str	r3, [r2, #0]
                                        ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMABMR;
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 800239c:	2001      	movs	r0, #1
 800239e:	f7ff fca1 	bl	8001ce4 <HAL_Delay>
  (heth->Instance)->DMABMR = tmpreg1;
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80023aa:	461a      	mov	r2, r3
 80023ac:	68fb      	ldr	r3, [r7, #12]
 80023ae:	6013      	str	r3, [r2, #0]
}
 80023b0:	bf00      	nop
 80023b2:	3710      	adds	r7, #16
 80023b4:	46bd      	mov	sp, r7
 80023b6:	bd80      	pop	{r7, pc}
 80023b8:	f8de3f23 	.word	0xf8de3f23

080023bc <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 80023bc:	b580      	push	{r7, lr}
 80023be:	b0a6      	sub	sp, #152	; 0x98
 80023c0:	af00      	add	r7, sp, #0
 80023c2:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.Watchdog = ENABLE;
 80023c4:	2301      	movs	r3, #1
 80023c6:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44
  macDefaultConf.Jabber = ENABLE;
 80023ca:	2301      	movs	r3, #1
 80023cc:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
  macDefaultConf.InterPacketGapVal = ETH_INTERFRAMEGAP_96BIT;
 80023d0:	2300      	movs	r3, #0
 80023d2:	63fb      	str	r3, [r7, #60]	; 0x3c
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 80023d4:	2300      	movs	r3, #0
 80023d6:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
  macDefaultConf.ReceiveOwn = ENABLE;
 80023da:	2301      	movs	r3, #1
 80023dc:	f887 3052 	strb.w	r3, [r7, #82]	; 0x52
  macDefaultConf.LoopbackMode = DISABLE;
 80023e0:	2300      	movs	r3, #0
 80023e2:	f887 3050 	strb.w	r3, [r7, #80]	; 0x50
  macDefaultConf.ChecksumOffload = ENABLE;
 80023e6:	2301      	movs	r3, #1
 80023e8:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  macDefaultConf.RetryTransmission = DISABLE;
 80023ec:	2300      	movs	r3, #0
 80023ee:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
  macDefaultConf.AutomaticPadCRCStrip = DISABLE;
 80023f2:	2300      	movs	r3, #0
 80023f4:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 80023f8:	2300      	movs	r3, #0
 80023fa:	65bb      	str	r3, [r7, #88]	; 0x58
  macDefaultConf.DeferralCheck = DISABLE;
 80023fc:	2300      	movs	r3, #0
 80023fe:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
  macDefaultConf.PauseTime = 0x0U;
 8002402:	2300      	movs	r3, #0
 8002404:	67fb      	str	r3, [r7, #124]	; 0x7c
  macDefaultConf.ZeroQuantaPause = DISABLE;
 8002406:	2300      	movs	r3, #0
 8002408:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 800240c:	2300      	movs	r3, #0
 800240e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macDefaultConf.ReceiveFlowControl = DISABLE;
 8002412:	2300      	movs	r3, #0
 8002414:	f887 308a 	strb.w	r3, [r7, #138]	; 0x8a
  macDefaultConf.TransmitFlowControl = DISABLE;
 8002418:	2300      	movs	r3, #0
 800241a:	f887 3088 	strb.w	r3, [r7, #136]	; 0x88
  macDefaultConf.Speed = ETH_SPEED_100M;
 800241e:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8002422:	64bb      	str	r3, [r7, #72]	; 0x48
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 8002424:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002428:	64fb      	str	r3, [r7, #76]	; 0x4c
  macDefaultConf.UnicastSlowProtocolPacketDetect = DISABLE;
 800242a:	2300      	movs	r3, #0
 800242c:	f887 3064 	strb.w	r3, [r7, #100]	; 0x64

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 8002430:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8002434:	4619      	mov	r1, r3
 8002436:	6878      	ldr	r0, [r7, #4]
 8002438:	f7ff fe9a 	bl	8002170 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.DropTCPIPChecksumErrorFrame = ENABLE;
 800243c:	2301      	movs	r3, #1
 800243e:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.ReceiveStoreForward = ENABLE;
 8002440:	2301      	movs	r3, #1
 8002442:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.FlushRxPacket = ENABLE;
 8002444:	2301      	movs	r3, #1
 8002446:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  dmaDefaultConf.TransmitStoreForward = ENABLE;
 800244a:	2301      	movs	r3, #1
 800244c:	75bb      	strb	r3, [r7, #22]
  dmaDefaultConf.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 800244e:	2300      	movs	r3, #0
 8002450:	61fb      	str	r3, [r7, #28]
  dmaDefaultConf.ForwardErrorFrames = DISABLE;
 8002452:	2300      	movs	r3, #0
 8002454:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  dmaDefaultConf.ForwardUndersizedGoodFrames = DISABLE;
 8002458:	2300      	movs	r3, #0
 800245a:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  dmaDefaultConf.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 800245e:	2300      	movs	r3, #0
 8002460:	62bb      	str	r3, [r7, #40]	; 0x28
  dmaDefaultConf.SecondFrameOperate = ENABLE;
 8002462:	2301      	movs	r3, #1
 8002464:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 8002468:	2301      	movs	r3, #1
 800246a:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 800246c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002470:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8002472:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8002476:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8002478:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800247c:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.EnhancedDescriptorFormat = ENABLE;
 800247e:	2301      	movs	r3, #1
 8002480:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
  dmaDefaultConf.DescriptorSkipLength = 0x0U;
 8002484:	2300      	movs	r3, #0
 8002486:	633b      	str	r3, [r7, #48]	; 0x30
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 8002488:	2300      	movs	r3, #0
 800248a:	60bb      	str	r3, [r7, #8]

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 800248c:	f107 0308 	add.w	r3, r7, #8
 8002490:	4619      	mov	r1, r3
 8002492:	6878      	ldr	r0, [r7, #4]
 8002494:	f7ff ff08 	bl	80022a8 <ETH_SetDMAConfig>
}
 8002498:	bf00      	nop
 800249a:	3798      	adds	r7, #152	; 0x98
 800249c:	46bd      	mov	sp, r7
 800249e:	bd80      	pop	{r7, pc}

080024a0 <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 80024a0:	b480      	push	{r7}
 80024a2:	b087      	sub	sp, #28
 80024a4:	af00      	add	r7, sp, #0
 80024a6:	60f8      	str	r0, [r7, #12]
 80024a8:	60b9      	str	r1, [r7, #8]
 80024aa:	607a      	str	r2, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);

  /* Calculate the selected MAC address high register */
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	3305      	adds	r3, #5
 80024b0:	781b      	ldrb	r3, [r3, #0]
 80024b2:	021b      	lsls	r3, r3, #8
 80024b4:	687a      	ldr	r2, [r7, #4]
 80024b6:	3204      	adds	r2, #4
 80024b8:	7812      	ldrb	r2, [r2, #0]
 80024ba:	4313      	orrs	r3, r2
 80024bc:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 80024be:	68ba      	ldr	r2, [r7, #8]
 80024c0:	4b11      	ldr	r3, [pc, #68]	; (8002508 <ETH_MACAddressConfig+0x68>)
 80024c2:	4413      	add	r3, r2
 80024c4:	461a      	mov	r2, r3
 80024c6:	697b      	ldr	r3, [r7, #20]
 80024c8:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	3303      	adds	r3, #3
 80024ce:	781b      	ldrb	r3, [r3, #0]
 80024d0:	061a      	lsls	r2, r3, #24
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	3302      	adds	r3, #2
 80024d6:	781b      	ldrb	r3, [r3, #0]
 80024d8:	041b      	lsls	r3, r3, #16
 80024da:	431a      	orrs	r2, r3
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	3301      	adds	r3, #1
 80024e0:	781b      	ldrb	r3, [r3, #0]
 80024e2:	021b      	lsls	r3, r3, #8
 80024e4:	4313      	orrs	r3, r2
 80024e6:	687a      	ldr	r2, [r7, #4]
 80024e8:	7812      	ldrb	r2, [r2, #0]
 80024ea:	4313      	orrs	r3, r2
 80024ec:	617b      	str	r3, [r7, #20]

  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 80024ee:	68ba      	ldr	r2, [r7, #8]
 80024f0:	4b06      	ldr	r3, [pc, #24]	; (800250c <ETH_MACAddressConfig+0x6c>)
 80024f2:	4413      	add	r3, r2
 80024f4:	461a      	mov	r2, r3
 80024f6:	697b      	ldr	r3, [r7, #20]
 80024f8:	6013      	str	r3, [r2, #0]
}
 80024fa:	bf00      	nop
 80024fc:	371c      	adds	r7, #28
 80024fe:	46bd      	mov	sp, r7
 8002500:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002504:	4770      	bx	lr
 8002506:	bf00      	nop
 8002508:	40028040 	.word	0x40028040
 800250c:	40028044 	.word	0x40028044

08002510 <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 8002510:	b480      	push	{r7}
 8002512:	b085      	sub	sp, #20
 8002514:	af00      	add	r7, sp, #0
 8002516:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8002518:	2300      	movs	r3, #0
 800251a:	60fb      	str	r3, [r7, #12]
 800251c:	e03e      	b.n	800259c <ETH_DMATxDescListInit+0x8c>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	68d9      	ldr	r1, [r3, #12]
 8002522:	68fa      	ldr	r2, [r7, #12]
 8002524:	4613      	mov	r3, r2
 8002526:	009b      	lsls	r3, r3, #2
 8002528:	4413      	add	r3, r2
 800252a:	00db      	lsls	r3, r3, #3
 800252c:	440b      	add	r3, r1
 800252e:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0);
 8002530:	68bb      	ldr	r3, [r7, #8]
 8002532:	2200      	movs	r2, #0
 8002534:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0);
 8002536:	68bb      	ldr	r3, [r7, #8]
 8002538:	2200      	movs	r2, #0
 800253a:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0);
 800253c:	68bb      	ldr	r3, [r7, #8]
 800253e:	2200      	movs	r2, #0
 8002540:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0);
 8002542:	68bb      	ldr	r3, [r7, #8]
 8002544:	2200      	movs	r2, #0
 8002546:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 8002548:	68b9      	ldr	r1, [r7, #8]
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	68fa      	ldr	r2, [r7, #12]
 800254e:	3206      	adds	r2, #6
 8002550:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    /* Set Second Address Chained bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_TCH);
 8002554:	68bb      	ldr	r3, [r7, #8]
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800255c:	68bb      	ldr	r3, [r7, #8]
 800255e:	601a      	str	r2, [r3, #0]

    if (i < ((uint32_t)ETH_TX_DESC_CNT - 1U))
 8002560:	68fb      	ldr	r3, [r7, #12]
 8002562:	2b02      	cmp	r3, #2
 8002564:	d80c      	bhi.n	8002580 <ETH_DMATxDescListInit+0x70>
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc + i + 1U));
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	68d9      	ldr	r1, [r3, #12]
 800256a:	68fb      	ldr	r3, [r7, #12]
 800256c:	1c5a      	adds	r2, r3, #1
 800256e:	4613      	mov	r3, r2
 8002570:	009b      	lsls	r3, r3, #2
 8002572:	4413      	add	r3, r2
 8002574:	00db      	lsls	r3, r3, #3
 8002576:	440b      	add	r3, r1
 8002578:	461a      	mov	r2, r3
 800257a:	68bb      	ldr	r3, [r7, #8]
 800257c:	60da      	str	r2, [r3, #12]
 800257e:	e004      	b.n	800258a <ETH_DMATxDescListInit+0x7a>
    }
    else
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc));
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	68db      	ldr	r3, [r3, #12]
 8002584:	461a      	mov	r2, r3
 8002586:	68bb      	ldr	r3, [r7, #8]
 8002588:	60da      	str	r2, [r3, #12]
    }

    /* Set the DMA Tx descriptors checksum insertion */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL);
 800258a:	68bb      	ldr	r3, [r7, #8]
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	f443 0240 	orr.w	r2, r3, #12582912	; 0xc00000
 8002592:	68bb      	ldr	r3, [r7, #8]
 8002594:	601a      	str	r2, [r3, #0]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8002596:	68fb      	ldr	r3, [r7, #12]
 8002598:	3301      	adds	r3, #1
 800259a:	60fb      	str	r3, [r7, #12]
 800259c:	68fb      	ldr	r3, [r7, #12]
 800259e:	2b03      	cmp	r3, #3
 80025a0:	d9bd      	bls.n	800251e <ETH_DMATxDescListInit+0xe>
  }

  heth->TxDescList.CurTxDesc = 0;
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	2200      	movs	r2, #0
 80025a6:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMATDLAR, (uint32_t) heth->Init.TxDesc);
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	68da      	ldr	r2, [r3, #12]
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80025b4:	611a      	str	r2, [r3, #16]
}
 80025b6:	bf00      	nop
 80025b8:	3714      	adds	r7, #20
 80025ba:	46bd      	mov	sp, r7
 80025bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025c0:	4770      	bx	lr

080025c2 <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 80025c2:	b480      	push	{r7}
 80025c4:	b085      	sub	sp, #20
 80025c6:	af00      	add	r7, sp, #0
 80025c8:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 80025ca:	2300      	movs	r3, #0
 80025cc:	60fb      	str	r3, [r7, #12]
 80025ce:	e046      	b.n	800265e <ETH_DMARxDescListInit+0x9c>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	6919      	ldr	r1, [r3, #16]
 80025d4:	68fa      	ldr	r2, [r7, #12]
 80025d6:	4613      	mov	r3, r2
 80025d8:	009b      	lsls	r3, r3, #2
 80025da:	4413      	add	r3, r2
 80025dc:	00db      	lsls	r3, r3, #3
 80025de:	440b      	add	r3, r1
 80025e0:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0);
 80025e2:	68bb      	ldr	r3, [r7, #8]
 80025e4:	2200      	movs	r2, #0
 80025e6:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0);
 80025e8:	68bb      	ldr	r3, [r7, #8]
 80025ea:	2200      	movs	r2, #0
 80025ec:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0);
 80025ee:	68bb      	ldr	r3, [r7, #8]
 80025f0:	2200      	movs	r2, #0
 80025f2:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0);
 80025f4:	68bb      	ldr	r3, [r7, #8]
 80025f6:	2200      	movs	r2, #0
 80025f8:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0);
 80025fa:	68bb      	ldr	r3, [r7, #8]
 80025fc:	2200      	movs	r2, #0
 80025fe:	621a      	str	r2, [r3, #32]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0);
 8002600:	68bb      	ldr	r3, [r7, #8]
 8002602:	2200      	movs	r2, #0
 8002604:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set Own bit of the Rx descriptor Status */
    dmarxdesc->DESC0 = ETH_DMARXDESC_OWN;
 8002606:	68bb      	ldr	r3, [r7, #8]
 8002608:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800260c:	601a      	str	r2, [r3, #0]

    /* Set Buffer1 size and Second Address Chained bit */
    dmarxdesc->DESC1 = ETH_DMARXDESC_RCH | ETH_RX_BUF_SIZE;
 800260e:	68bb      	ldr	r3, [r7, #8]
 8002610:	f244 52f8 	movw	r2, #17912	; 0x45f8
 8002614:	605a      	str	r2, [r3, #4]

    /* Enable Ethernet DMA Rx Descriptor interrupt */
    dmarxdesc->DESC1 &= ~ETH_DMARXDESC_DIC;
 8002616:	68bb      	ldr	r3, [r7, #8]
 8002618:	685b      	ldr	r3, [r3, #4]
 800261a:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800261e:	68bb      	ldr	r3, [r7, #8]
 8002620:	605a      	str	r2, [r3, #4]

    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 8002622:	68b9      	ldr	r1, [r7, #8]
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	68fa      	ldr	r2, [r7, #12]
 8002628:	3212      	adds	r2, #18
 800262a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    if (i < ((uint32_t)ETH_RX_DESC_CNT - 1U))
 800262e:	68fb      	ldr	r3, [r7, #12]
 8002630:	2b02      	cmp	r3, #2
 8002632:	d80c      	bhi.n	800264e <ETH_DMARxDescListInit+0x8c>
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc + i + 1U));
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	6919      	ldr	r1, [r3, #16]
 8002638:	68fb      	ldr	r3, [r7, #12]
 800263a:	1c5a      	adds	r2, r3, #1
 800263c:	4613      	mov	r3, r2
 800263e:	009b      	lsls	r3, r3, #2
 8002640:	4413      	add	r3, r2
 8002642:	00db      	lsls	r3, r3, #3
 8002644:	440b      	add	r3, r1
 8002646:	461a      	mov	r2, r3
 8002648:	68bb      	ldr	r3, [r7, #8]
 800264a:	60da      	str	r2, [r3, #12]
 800264c:	e004      	b.n	8002658 <ETH_DMARxDescListInit+0x96>
    }
    else
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc));
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	691b      	ldr	r3, [r3, #16]
 8002652:	461a      	mov	r2, r3
 8002654:	68bb      	ldr	r3, [r7, #8]
 8002656:	60da      	str	r2, [r3, #12]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8002658:	68fb      	ldr	r3, [r7, #12]
 800265a:	3301      	adds	r3, #1
 800265c:	60fb      	str	r3, [r7, #12]
 800265e:	68fb      	ldr	r3, [r7, #12]
 8002660:	2b03      	cmp	r3, #3
 8002662:	d9b5      	bls.n	80025d0 <ETH_DMARxDescListInit+0xe>
    }
  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0);
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	2200      	movs	r2, #0
 8002668:	65da      	str	r2, [r3, #92]	; 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0);
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	2200      	movs	r2, #0
 800266e:	661a      	str	r2, [r3, #96]	; 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0);
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	2200      	movs	r2, #0
 8002674:	669a      	str	r2, [r3, #104]	; 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0);
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	2200      	movs	r2, #0
 800267a:	66da      	str	r2, [r3, #108]	; 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0);
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	2200      	movs	r2, #0
 8002680:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMARDLAR, (uint32_t) heth->Init.RxDesc);
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	691a      	ldr	r2, [r3, #16]
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800268e:	60da      	str	r2, [r3, #12]
}
 8002690:	bf00      	nop
 8002692:	3714      	adds	r7, #20
 8002694:	46bd      	mov	sp, r7
 8002696:	f85d 7b04 	ldr.w	r7, [sp], #4
 800269a:	4770      	bx	lr

0800269c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800269c:	b480      	push	{r7}
 800269e:	b089      	sub	sp, #36	; 0x24
 80026a0:	af00      	add	r7, sp, #0
 80026a2:	6078      	str	r0, [r7, #4]
 80026a4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80026a6:	2300      	movs	r3, #0
 80026a8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80026aa:	2300      	movs	r3, #0
 80026ac:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80026ae:	2300      	movs	r3, #0
 80026b0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80026b2:	2300      	movs	r3, #0
 80026b4:	61fb      	str	r3, [r7, #28]
 80026b6:	e177      	b.n	80029a8 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80026b8:	2201      	movs	r2, #1
 80026ba:	69fb      	ldr	r3, [r7, #28]
 80026bc:	fa02 f303 	lsl.w	r3, r2, r3
 80026c0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80026c2:	683b      	ldr	r3, [r7, #0]
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	697a      	ldr	r2, [r7, #20]
 80026c8:	4013      	ands	r3, r2
 80026ca:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80026cc:	693a      	ldr	r2, [r7, #16]
 80026ce:	697b      	ldr	r3, [r7, #20]
 80026d0:	429a      	cmp	r2, r3
 80026d2:	f040 8166 	bne.w	80029a2 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80026d6:	683b      	ldr	r3, [r7, #0]
 80026d8:	685b      	ldr	r3, [r3, #4]
 80026da:	f003 0303 	and.w	r3, r3, #3
 80026de:	2b01      	cmp	r3, #1
 80026e0:	d005      	beq.n	80026ee <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80026e2:	683b      	ldr	r3, [r7, #0]
 80026e4:	685b      	ldr	r3, [r3, #4]
 80026e6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80026ea:	2b02      	cmp	r3, #2
 80026ec:	d130      	bne.n	8002750 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	689b      	ldr	r3, [r3, #8]
 80026f2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80026f4:	69fb      	ldr	r3, [r7, #28]
 80026f6:	005b      	lsls	r3, r3, #1
 80026f8:	2203      	movs	r2, #3
 80026fa:	fa02 f303 	lsl.w	r3, r2, r3
 80026fe:	43db      	mvns	r3, r3
 8002700:	69ba      	ldr	r2, [r7, #24]
 8002702:	4013      	ands	r3, r2
 8002704:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002706:	683b      	ldr	r3, [r7, #0]
 8002708:	68da      	ldr	r2, [r3, #12]
 800270a:	69fb      	ldr	r3, [r7, #28]
 800270c:	005b      	lsls	r3, r3, #1
 800270e:	fa02 f303 	lsl.w	r3, r2, r3
 8002712:	69ba      	ldr	r2, [r7, #24]
 8002714:	4313      	orrs	r3, r2
 8002716:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	69ba      	ldr	r2, [r7, #24]
 800271c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	685b      	ldr	r3, [r3, #4]
 8002722:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002724:	2201      	movs	r2, #1
 8002726:	69fb      	ldr	r3, [r7, #28]
 8002728:	fa02 f303 	lsl.w	r3, r2, r3
 800272c:	43db      	mvns	r3, r3
 800272e:	69ba      	ldr	r2, [r7, #24]
 8002730:	4013      	ands	r3, r2
 8002732:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002734:	683b      	ldr	r3, [r7, #0]
 8002736:	685b      	ldr	r3, [r3, #4]
 8002738:	091b      	lsrs	r3, r3, #4
 800273a:	f003 0201 	and.w	r2, r3, #1
 800273e:	69fb      	ldr	r3, [r7, #28]
 8002740:	fa02 f303 	lsl.w	r3, r2, r3
 8002744:	69ba      	ldr	r2, [r7, #24]
 8002746:	4313      	orrs	r3, r2
 8002748:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	69ba      	ldr	r2, [r7, #24]
 800274e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002750:	683b      	ldr	r3, [r7, #0]
 8002752:	685b      	ldr	r3, [r3, #4]
 8002754:	f003 0303 	and.w	r3, r3, #3
 8002758:	2b03      	cmp	r3, #3
 800275a:	d017      	beq.n	800278c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	68db      	ldr	r3, [r3, #12]
 8002760:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002762:	69fb      	ldr	r3, [r7, #28]
 8002764:	005b      	lsls	r3, r3, #1
 8002766:	2203      	movs	r2, #3
 8002768:	fa02 f303 	lsl.w	r3, r2, r3
 800276c:	43db      	mvns	r3, r3
 800276e:	69ba      	ldr	r2, [r7, #24]
 8002770:	4013      	ands	r3, r2
 8002772:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002774:	683b      	ldr	r3, [r7, #0]
 8002776:	689a      	ldr	r2, [r3, #8]
 8002778:	69fb      	ldr	r3, [r7, #28]
 800277a:	005b      	lsls	r3, r3, #1
 800277c:	fa02 f303 	lsl.w	r3, r2, r3
 8002780:	69ba      	ldr	r2, [r7, #24]
 8002782:	4313      	orrs	r3, r2
 8002784:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	69ba      	ldr	r2, [r7, #24]
 800278a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800278c:	683b      	ldr	r3, [r7, #0]
 800278e:	685b      	ldr	r3, [r3, #4]
 8002790:	f003 0303 	and.w	r3, r3, #3
 8002794:	2b02      	cmp	r3, #2
 8002796:	d123      	bne.n	80027e0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002798:	69fb      	ldr	r3, [r7, #28]
 800279a:	08da      	lsrs	r2, r3, #3
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	3208      	adds	r2, #8
 80027a0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80027a4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80027a6:	69fb      	ldr	r3, [r7, #28]
 80027a8:	f003 0307 	and.w	r3, r3, #7
 80027ac:	009b      	lsls	r3, r3, #2
 80027ae:	220f      	movs	r2, #15
 80027b0:	fa02 f303 	lsl.w	r3, r2, r3
 80027b4:	43db      	mvns	r3, r3
 80027b6:	69ba      	ldr	r2, [r7, #24]
 80027b8:	4013      	ands	r3, r2
 80027ba:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80027bc:	683b      	ldr	r3, [r7, #0]
 80027be:	691a      	ldr	r2, [r3, #16]
 80027c0:	69fb      	ldr	r3, [r7, #28]
 80027c2:	f003 0307 	and.w	r3, r3, #7
 80027c6:	009b      	lsls	r3, r3, #2
 80027c8:	fa02 f303 	lsl.w	r3, r2, r3
 80027cc:	69ba      	ldr	r2, [r7, #24]
 80027ce:	4313      	orrs	r3, r2
 80027d0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80027d2:	69fb      	ldr	r3, [r7, #28]
 80027d4:	08da      	lsrs	r2, r3, #3
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	3208      	adds	r2, #8
 80027da:	69b9      	ldr	r1, [r7, #24]
 80027dc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80027e6:	69fb      	ldr	r3, [r7, #28]
 80027e8:	005b      	lsls	r3, r3, #1
 80027ea:	2203      	movs	r2, #3
 80027ec:	fa02 f303 	lsl.w	r3, r2, r3
 80027f0:	43db      	mvns	r3, r3
 80027f2:	69ba      	ldr	r2, [r7, #24]
 80027f4:	4013      	ands	r3, r2
 80027f6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80027f8:	683b      	ldr	r3, [r7, #0]
 80027fa:	685b      	ldr	r3, [r3, #4]
 80027fc:	f003 0203 	and.w	r2, r3, #3
 8002800:	69fb      	ldr	r3, [r7, #28]
 8002802:	005b      	lsls	r3, r3, #1
 8002804:	fa02 f303 	lsl.w	r3, r2, r3
 8002808:	69ba      	ldr	r2, [r7, #24]
 800280a:	4313      	orrs	r3, r2
 800280c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	69ba      	ldr	r2, [r7, #24]
 8002812:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002814:	683b      	ldr	r3, [r7, #0]
 8002816:	685b      	ldr	r3, [r3, #4]
 8002818:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800281c:	2b00      	cmp	r3, #0
 800281e:	f000 80c0 	beq.w	80029a2 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002822:	2300      	movs	r3, #0
 8002824:	60fb      	str	r3, [r7, #12]
 8002826:	4b66      	ldr	r3, [pc, #408]	; (80029c0 <HAL_GPIO_Init+0x324>)
 8002828:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800282a:	4a65      	ldr	r2, [pc, #404]	; (80029c0 <HAL_GPIO_Init+0x324>)
 800282c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002830:	6453      	str	r3, [r2, #68]	; 0x44
 8002832:	4b63      	ldr	r3, [pc, #396]	; (80029c0 <HAL_GPIO_Init+0x324>)
 8002834:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002836:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800283a:	60fb      	str	r3, [r7, #12]
 800283c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800283e:	4a61      	ldr	r2, [pc, #388]	; (80029c4 <HAL_GPIO_Init+0x328>)
 8002840:	69fb      	ldr	r3, [r7, #28]
 8002842:	089b      	lsrs	r3, r3, #2
 8002844:	3302      	adds	r3, #2
 8002846:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800284a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800284c:	69fb      	ldr	r3, [r7, #28]
 800284e:	f003 0303 	and.w	r3, r3, #3
 8002852:	009b      	lsls	r3, r3, #2
 8002854:	220f      	movs	r2, #15
 8002856:	fa02 f303 	lsl.w	r3, r2, r3
 800285a:	43db      	mvns	r3, r3
 800285c:	69ba      	ldr	r2, [r7, #24]
 800285e:	4013      	ands	r3, r2
 8002860:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	4a58      	ldr	r2, [pc, #352]	; (80029c8 <HAL_GPIO_Init+0x32c>)
 8002866:	4293      	cmp	r3, r2
 8002868:	d037      	beq.n	80028da <HAL_GPIO_Init+0x23e>
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	4a57      	ldr	r2, [pc, #348]	; (80029cc <HAL_GPIO_Init+0x330>)
 800286e:	4293      	cmp	r3, r2
 8002870:	d031      	beq.n	80028d6 <HAL_GPIO_Init+0x23a>
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	4a56      	ldr	r2, [pc, #344]	; (80029d0 <HAL_GPIO_Init+0x334>)
 8002876:	4293      	cmp	r3, r2
 8002878:	d02b      	beq.n	80028d2 <HAL_GPIO_Init+0x236>
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	4a55      	ldr	r2, [pc, #340]	; (80029d4 <HAL_GPIO_Init+0x338>)
 800287e:	4293      	cmp	r3, r2
 8002880:	d025      	beq.n	80028ce <HAL_GPIO_Init+0x232>
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	4a54      	ldr	r2, [pc, #336]	; (80029d8 <HAL_GPIO_Init+0x33c>)
 8002886:	4293      	cmp	r3, r2
 8002888:	d01f      	beq.n	80028ca <HAL_GPIO_Init+0x22e>
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	4a53      	ldr	r2, [pc, #332]	; (80029dc <HAL_GPIO_Init+0x340>)
 800288e:	4293      	cmp	r3, r2
 8002890:	d019      	beq.n	80028c6 <HAL_GPIO_Init+0x22a>
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	4a52      	ldr	r2, [pc, #328]	; (80029e0 <HAL_GPIO_Init+0x344>)
 8002896:	4293      	cmp	r3, r2
 8002898:	d013      	beq.n	80028c2 <HAL_GPIO_Init+0x226>
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	4a51      	ldr	r2, [pc, #324]	; (80029e4 <HAL_GPIO_Init+0x348>)
 800289e:	4293      	cmp	r3, r2
 80028a0:	d00d      	beq.n	80028be <HAL_GPIO_Init+0x222>
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	4a50      	ldr	r2, [pc, #320]	; (80029e8 <HAL_GPIO_Init+0x34c>)
 80028a6:	4293      	cmp	r3, r2
 80028a8:	d007      	beq.n	80028ba <HAL_GPIO_Init+0x21e>
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	4a4f      	ldr	r2, [pc, #316]	; (80029ec <HAL_GPIO_Init+0x350>)
 80028ae:	4293      	cmp	r3, r2
 80028b0:	d101      	bne.n	80028b6 <HAL_GPIO_Init+0x21a>
 80028b2:	2309      	movs	r3, #9
 80028b4:	e012      	b.n	80028dc <HAL_GPIO_Init+0x240>
 80028b6:	230a      	movs	r3, #10
 80028b8:	e010      	b.n	80028dc <HAL_GPIO_Init+0x240>
 80028ba:	2308      	movs	r3, #8
 80028bc:	e00e      	b.n	80028dc <HAL_GPIO_Init+0x240>
 80028be:	2307      	movs	r3, #7
 80028c0:	e00c      	b.n	80028dc <HAL_GPIO_Init+0x240>
 80028c2:	2306      	movs	r3, #6
 80028c4:	e00a      	b.n	80028dc <HAL_GPIO_Init+0x240>
 80028c6:	2305      	movs	r3, #5
 80028c8:	e008      	b.n	80028dc <HAL_GPIO_Init+0x240>
 80028ca:	2304      	movs	r3, #4
 80028cc:	e006      	b.n	80028dc <HAL_GPIO_Init+0x240>
 80028ce:	2303      	movs	r3, #3
 80028d0:	e004      	b.n	80028dc <HAL_GPIO_Init+0x240>
 80028d2:	2302      	movs	r3, #2
 80028d4:	e002      	b.n	80028dc <HAL_GPIO_Init+0x240>
 80028d6:	2301      	movs	r3, #1
 80028d8:	e000      	b.n	80028dc <HAL_GPIO_Init+0x240>
 80028da:	2300      	movs	r3, #0
 80028dc:	69fa      	ldr	r2, [r7, #28]
 80028de:	f002 0203 	and.w	r2, r2, #3
 80028e2:	0092      	lsls	r2, r2, #2
 80028e4:	4093      	lsls	r3, r2
 80028e6:	69ba      	ldr	r2, [r7, #24]
 80028e8:	4313      	orrs	r3, r2
 80028ea:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80028ec:	4935      	ldr	r1, [pc, #212]	; (80029c4 <HAL_GPIO_Init+0x328>)
 80028ee:	69fb      	ldr	r3, [r7, #28]
 80028f0:	089b      	lsrs	r3, r3, #2
 80028f2:	3302      	adds	r3, #2
 80028f4:	69ba      	ldr	r2, [r7, #24]
 80028f6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80028fa:	4b3d      	ldr	r3, [pc, #244]	; (80029f0 <HAL_GPIO_Init+0x354>)
 80028fc:	689b      	ldr	r3, [r3, #8]
 80028fe:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002900:	693b      	ldr	r3, [r7, #16]
 8002902:	43db      	mvns	r3, r3
 8002904:	69ba      	ldr	r2, [r7, #24]
 8002906:	4013      	ands	r3, r2
 8002908:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800290a:	683b      	ldr	r3, [r7, #0]
 800290c:	685b      	ldr	r3, [r3, #4]
 800290e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002912:	2b00      	cmp	r3, #0
 8002914:	d003      	beq.n	800291e <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8002916:	69ba      	ldr	r2, [r7, #24]
 8002918:	693b      	ldr	r3, [r7, #16]
 800291a:	4313      	orrs	r3, r2
 800291c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800291e:	4a34      	ldr	r2, [pc, #208]	; (80029f0 <HAL_GPIO_Init+0x354>)
 8002920:	69bb      	ldr	r3, [r7, #24]
 8002922:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002924:	4b32      	ldr	r3, [pc, #200]	; (80029f0 <HAL_GPIO_Init+0x354>)
 8002926:	68db      	ldr	r3, [r3, #12]
 8002928:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800292a:	693b      	ldr	r3, [r7, #16]
 800292c:	43db      	mvns	r3, r3
 800292e:	69ba      	ldr	r2, [r7, #24]
 8002930:	4013      	ands	r3, r2
 8002932:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002934:	683b      	ldr	r3, [r7, #0]
 8002936:	685b      	ldr	r3, [r3, #4]
 8002938:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800293c:	2b00      	cmp	r3, #0
 800293e:	d003      	beq.n	8002948 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8002940:	69ba      	ldr	r2, [r7, #24]
 8002942:	693b      	ldr	r3, [r7, #16]
 8002944:	4313      	orrs	r3, r2
 8002946:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002948:	4a29      	ldr	r2, [pc, #164]	; (80029f0 <HAL_GPIO_Init+0x354>)
 800294a:	69bb      	ldr	r3, [r7, #24]
 800294c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800294e:	4b28      	ldr	r3, [pc, #160]	; (80029f0 <HAL_GPIO_Init+0x354>)
 8002950:	685b      	ldr	r3, [r3, #4]
 8002952:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002954:	693b      	ldr	r3, [r7, #16]
 8002956:	43db      	mvns	r3, r3
 8002958:	69ba      	ldr	r2, [r7, #24]
 800295a:	4013      	ands	r3, r2
 800295c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800295e:	683b      	ldr	r3, [r7, #0]
 8002960:	685b      	ldr	r3, [r3, #4]
 8002962:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002966:	2b00      	cmp	r3, #0
 8002968:	d003      	beq.n	8002972 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 800296a:	69ba      	ldr	r2, [r7, #24]
 800296c:	693b      	ldr	r3, [r7, #16]
 800296e:	4313      	orrs	r3, r2
 8002970:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002972:	4a1f      	ldr	r2, [pc, #124]	; (80029f0 <HAL_GPIO_Init+0x354>)
 8002974:	69bb      	ldr	r3, [r7, #24]
 8002976:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002978:	4b1d      	ldr	r3, [pc, #116]	; (80029f0 <HAL_GPIO_Init+0x354>)
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800297e:	693b      	ldr	r3, [r7, #16]
 8002980:	43db      	mvns	r3, r3
 8002982:	69ba      	ldr	r2, [r7, #24]
 8002984:	4013      	ands	r3, r2
 8002986:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002988:	683b      	ldr	r3, [r7, #0]
 800298a:	685b      	ldr	r3, [r3, #4]
 800298c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002990:	2b00      	cmp	r3, #0
 8002992:	d003      	beq.n	800299c <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8002994:	69ba      	ldr	r2, [r7, #24]
 8002996:	693b      	ldr	r3, [r7, #16]
 8002998:	4313      	orrs	r3, r2
 800299a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800299c:	4a14      	ldr	r2, [pc, #80]	; (80029f0 <HAL_GPIO_Init+0x354>)
 800299e:	69bb      	ldr	r3, [r7, #24]
 80029a0:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80029a2:	69fb      	ldr	r3, [r7, #28]
 80029a4:	3301      	adds	r3, #1
 80029a6:	61fb      	str	r3, [r7, #28]
 80029a8:	69fb      	ldr	r3, [r7, #28]
 80029aa:	2b0f      	cmp	r3, #15
 80029ac:	f67f ae84 	bls.w	80026b8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80029b0:	bf00      	nop
 80029b2:	bf00      	nop
 80029b4:	3724      	adds	r7, #36	; 0x24
 80029b6:	46bd      	mov	sp, r7
 80029b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029bc:	4770      	bx	lr
 80029be:	bf00      	nop
 80029c0:	40023800 	.word	0x40023800
 80029c4:	40013800 	.word	0x40013800
 80029c8:	40020000 	.word	0x40020000
 80029cc:	40020400 	.word	0x40020400
 80029d0:	40020800 	.word	0x40020800
 80029d4:	40020c00 	.word	0x40020c00
 80029d8:	40021000 	.word	0x40021000
 80029dc:	40021400 	.word	0x40021400
 80029e0:	40021800 	.word	0x40021800
 80029e4:	40021c00 	.word	0x40021c00
 80029e8:	40022000 	.word	0x40022000
 80029ec:	40022400 	.word	0x40022400
 80029f0:	40013c00 	.word	0x40013c00

080029f4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80029f4:	b480      	push	{r7}
 80029f6:	b083      	sub	sp, #12
 80029f8:	af00      	add	r7, sp, #0
 80029fa:	6078      	str	r0, [r7, #4]
 80029fc:	460b      	mov	r3, r1
 80029fe:	807b      	strh	r3, [r7, #2]
 8002a00:	4613      	mov	r3, r2
 8002a02:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002a04:	787b      	ldrb	r3, [r7, #1]
 8002a06:	2b00      	cmp	r3, #0
 8002a08:	d003      	beq.n	8002a12 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002a0a:	887a      	ldrh	r2, [r7, #2]
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002a10:	e003      	b.n	8002a1a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002a12:	887b      	ldrh	r3, [r7, #2]
 8002a14:	041a      	lsls	r2, r3, #16
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	619a      	str	r2, [r3, #24]
}
 8002a1a:	bf00      	nop
 8002a1c:	370c      	adds	r7, #12
 8002a1e:	46bd      	mov	sp, r7
 8002a20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a24:	4770      	bx	lr
	...

08002a28 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002a28:	b580      	push	{r7, lr}
 8002a2a:	b084      	sub	sp, #16
 8002a2c:	af00      	add	r7, sp, #0
 8002a2e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	2b00      	cmp	r3, #0
 8002a34:	d101      	bne.n	8002a3a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002a36:	2301      	movs	r3, #1
 8002a38:	e12b      	b.n	8002c92 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002a40:	b2db      	uxtb	r3, r3
 8002a42:	2b00      	cmp	r3, #0
 8002a44:	d106      	bne.n	8002a54 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	2200      	movs	r2, #0
 8002a4a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002a4e:	6878      	ldr	r0, [r7, #4]
 8002a50:	f7fe ff74 	bl	800193c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	2224      	movs	r2, #36	; 0x24
 8002a58:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	681a      	ldr	r2, [r3, #0]
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	f022 0201 	bic.w	r2, r2, #1
 8002a6a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	681a      	ldr	r2, [r3, #0]
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002a7a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	681a      	ldr	r2, [r3, #0]
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002a8a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002a8c:	f001 fe98 	bl	80047c0 <HAL_RCC_GetPCLK1Freq>
 8002a90:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	685b      	ldr	r3, [r3, #4]
 8002a96:	4a81      	ldr	r2, [pc, #516]	; (8002c9c <HAL_I2C_Init+0x274>)
 8002a98:	4293      	cmp	r3, r2
 8002a9a:	d807      	bhi.n	8002aac <HAL_I2C_Init+0x84>
 8002a9c:	68fb      	ldr	r3, [r7, #12]
 8002a9e:	4a80      	ldr	r2, [pc, #512]	; (8002ca0 <HAL_I2C_Init+0x278>)
 8002aa0:	4293      	cmp	r3, r2
 8002aa2:	bf94      	ite	ls
 8002aa4:	2301      	movls	r3, #1
 8002aa6:	2300      	movhi	r3, #0
 8002aa8:	b2db      	uxtb	r3, r3
 8002aaa:	e006      	b.n	8002aba <HAL_I2C_Init+0x92>
 8002aac:	68fb      	ldr	r3, [r7, #12]
 8002aae:	4a7d      	ldr	r2, [pc, #500]	; (8002ca4 <HAL_I2C_Init+0x27c>)
 8002ab0:	4293      	cmp	r3, r2
 8002ab2:	bf94      	ite	ls
 8002ab4:	2301      	movls	r3, #1
 8002ab6:	2300      	movhi	r3, #0
 8002ab8:	b2db      	uxtb	r3, r3
 8002aba:	2b00      	cmp	r3, #0
 8002abc:	d001      	beq.n	8002ac2 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002abe:	2301      	movs	r3, #1
 8002ac0:	e0e7      	b.n	8002c92 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002ac2:	68fb      	ldr	r3, [r7, #12]
 8002ac4:	4a78      	ldr	r2, [pc, #480]	; (8002ca8 <HAL_I2C_Init+0x280>)
 8002ac6:	fba2 2303 	umull	r2, r3, r2, r3
 8002aca:	0c9b      	lsrs	r3, r3, #18
 8002acc:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	685b      	ldr	r3, [r3, #4]
 8002ad4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	68ba      	ldr	r2, [r7, #8]
 8002ade:	430a      	orrs	r2, r1
 8002ae0:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	6a1b      	ldr	r3, [r3, #32]
 8002ae8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	685b      	ldr	r3, [r3, #4]
 8002af0:	4a6a      	ldr	r2, [pc, #424]	; (8002c9c <HAL_I2C_Init+0x274>)
 8002af2:	4293      	cmp	r3, r2
 8002af4:	d802      	bhi.n	8002afc <HAL_I2C_Init+0xd4>
 8002af6:	68bb      	ldr	r3, [r7, #8]
 8002af8:	3301      	adds	r3, #1
 8002afa:	e009      	b.n	8002b10 <HAL_I2C_Init+0xe8>
 8002afc:	68bb      	ldr	r3, [r7, #8]
 8002afe:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8002b02:	fb02 f303 	mul.w	r3, r2, r3
 8002b06:	4a69      	ldr	r2, [pc, #420]	; (8002cac <HAL_I2C_Init+0x284>)
 8002b08:	fba2 2303 	umull	r2, r3, r2, r3
 8002b0c:	099b      	lsrs	r3, r3, #6
 8002b0e:	3301      	adds	r3, #1
 8002b10:	687a      	ldr	r2, [r7, #4]
 8002b12:	6812      	ldr	r2, [r2, #0]
 8002b14:	430b      	orrs	r3, r1
 8002b16:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	69db      	ldr	r3, [r3, #28]
 8002b1e:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8002b22:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	685b      	ldr	r3, [r3, #4]
 8002b2a:	495c      	ldr	r1, [pc, #368]	; (8002c9c <HAL_I2C_Init+0x274>)
 8002b2c:	428b      	cmp	r3, r1
 8002b2e:	d819      	bhi.n	8002b64 <HAL_I2C_Init+0x13c>
 8002b30:	68fb      	ldr	r3, [r7, #12]
 8002b32:	1e59      	subs	r1, r3, #1
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	685b      	ldr	r3, [r3, #4]
 8002b38:	005b      	lsls	r3, r3, #1
 8002b3a:	fbb1 f3f3 	udiv	r3, r1, r3
 8002b3e:	1c59      	adds	r1, r3, #1
 8002b40:	f640 73fc 	movw	r3, #4092	; 0xffc
 8002b44:	400b      	ands	r3, r1
 8002b46:	2b00      	cmp	r3, #0
 8002b48:	d00a      	beq.n	8002b60 <HAL_I2C_Init+0x138>
 8002b4a:	68fb      	ldr	r3, [r7, #12]
 8002b4c:	1e59      	subs	r1, r3, #1
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	685b      	ldr	r3, [r3, #4]
 8002b52:	005b      	lsls	r3, r3, #1
 8002b54:	fbb1 f3f3 	udiv	r3, r1, r3
 8002b58:	3301      	adds	r3, #1
 8002b5a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002b5e:	e051      	b.n	8002c04 <HAL_I2C_Init+0x1dc>
 8002b60:	2304      	movs	r3, #4
 8002b62:	e04f      	b.n	8002c04 <HAL_I2C_Init+0x1dc>
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	689b      	ldr	r3, [r3, #8]
 8002b68:	2b00      	cmp	r3, #0
 8002b6a:	d111      	bne.n	8002b90 <HAL_I2C_Init+0x168>
 8002b6c:	68fb      	ldr	r3, [r7, #12]
 8002b6e:	1e58      	subs	r0, r3, #1
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	6859      	ldr	r1, [r3, #4]
 8002b74:	460b      	mov	r3, r1
 8002b76:	005b      	lsls	r3, r3, #1
 8002b78:	440b      	add	r3, r1
 8002b7a:	fbb0 f3f3 	udiv	r3, r0, r3
 8002b7e:	3301      	adds	r3, #1
 8002b80:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002b84:	2b00      	cmp	r3, #0
 8002b86:	bf0c      	ite	eq
 8002b88:	2301      	moveq	r3, #1
 8002b8a:	2300      	movne	r3, #0
 8002b8c:	b2db      	uxtb	r3, r3
 8002b8e:	e012      	b.n	8002bb6 <HAL_I2C_Init+0x18e>
 8002b90:	68fb      	ldr	r3, [r7, #12]
 8002b92:	1e58      	subs	r0, r3, #1
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	6859      	ldr	r1, [r3, #4]
 8002b98:	460b      	mov	r3, r1
 8002b9a:	009b      	lsls	r3, r3, #2
 8002b9c:	440b      	add	r3, r1
 8002b9e:	0099      	lsls	r1, r3, #2
 8002ba0:	440b      	add	r3, r1
 8002ba2:	fbb0 f3f3 	udiv	r3, r0, r3
 8002ba6:	3301      	adds	r3, #1
 8002ba8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002bac:	2b00      	cmp	r3, #0
 8002bae:	bf0c      	ite	eq
 8002bb0:	2301      	moveq	r3, #1
 8002bb2:	2300      	movne	r3, #0
 8002bb4:	b2db      	uxtb	r3, r3
 8002bb6:	2b00      	cmp	r3, #0
 8002bb8:	d001      	beq.n	8002bbe <HAL_I2C_Init+0x196>
 8002bba:	2301      	movs	r3, #1
 8002bbc:	e022      	b.n	8002c04 <HAL_I2C_Init+0x1dc>
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	689b      	ldr	r3, [r3, #8]
 8002bc2:	2b00      	cmp	r3, #0
 8002bc4:	d10e      	bne.n	8002be4 <HAL_I2C_Init+0x1bc>
 8002bc6:	68fb      	ldr	r3, [r7, #12]
 8002bc8:	1e58      	subs	r0, r3, #1
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	6859      	ldr	r1, [r3, #4]
 8002bce:	460b      	mov	r3, r1
 8002bd0:	005b      	lsls	r3, r3, #1
 8002bd2:	440b      	add	r3, r1
 8002bd4:	fbb0 f3f3 	udiv	r3, r0, r3
 8002bd8:	3301      	adds	r3, #1
 8002bda:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002bde:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002be2:	e00f      	b.n	8002c04 <HAL_I2C_Init+0x1dc>
 8002be4:	68fb      	ldr	r3, [r7, #12]
 8002be6:	1e58      	subs	r0, r3, #1
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	6859      	ldr	r1, [r3, #4]
 8002bec:	460b      	mov	r3, r1
 8002bee:	009b      	lsls	r3, r3, #2
 8002bf0:	440b      	add	r3, r1
 8002bf2:	0099      	lsls	r1, r3, #2
 8002bf4:	440b      	add	r3, r1
 8002bf6:	fbb0 f3f3 	udiv	r3, r0, r3
 8002bfa:	3301      	adds	r3, #1
 8002bfc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002c00:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002c04:	6879      	ldr	r1, [r7, #4]
 8002c06:	6809      	ldr	r1, [r1, #0]
 8002c08:	4313      	orrs	r3, r2
 8002c0a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	69da      	ldr	r2, [r3, #28]
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	6a1b      	ldr	r3, [r3, #32]
 8002c1e:	431a      	orrs	r2, r3
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	430a      	orrs	r2, r1
 8002c26:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	689b      	ldr	r3, [r3, #8]
 8002c2e:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8002c32:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8002c36:	687a      	ldr	r2, [r7, #4]
 8002c38:	6911      	ldr	r1, [r2, #16]
 8002c3a:	687a      	ldr	r2, [r7, #4]
 8002c3c:	68d2      	ldr	r2, [r2, #12]
 8002c3e:	4311      	orrs	r1, r2
 8002c40:	687a      	ldr	r2, [r7, #4]
 8002c42:	6812      	ldr	r2, [r2, #0]
 8002c44:	430b      	orrs	r3, r1
 8002c46:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	68db      	ldr	r3, [r3, #12]
 8002c4e:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	695a      	ldr	r2, [r3, #20]
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	699b      	ldr	r3, [r3, #24]
 8002c5a:	431a      	orrs	r2, r3
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	430a      	orrs	r2, r1
 8002c62:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	681a      	ldr	r2, [r3, #0]
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	f042 0201 	orr.w	r2, r2, #1
 8002c72:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	2200      	movs	r2, #0
 8002c78:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	2220      	movs	r2, #32
 8002c7e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	2200      	movs	r2, #0
 8002c86:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	2200      	movs	r2, #0
 8002c8c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002c90:	2300      	movs	r3, #0
}
 8002c92:	4618      	mov	r0, r3
 8002c94:	3710      	adds	r7, #16
 8002c96:	46bd      	mov	sp, r7
 8002c98:	bd80      	pop	{r7, pc}
 8002c9a:	bf00      	nop
 8002c9c:	000186a0 	.word	0x000186a0
 8002ca0:	001e847f 	.word	0x001e847f
 8002ca4:	003d08ff 	.word	0x003d08ff
 8002ca8:	431bde83 	.word	0x431bde83
 8002cac:	10624dd3 	.word	0x10624dd3

08002cb0 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002cb0:	b580      	push	{r7, lr}
 8002cb2:	b088      	sub	sp, #32
 8002cb4:	af02      	add	r7, sp, #8
 8002cb6:	60f8      	str	r0, [r7, #12]
 8002cb8:	607a      	str	r2, [r7, #4]
 8002cba:	461a      	mov	r2, r3
 8002cbc:	460b      	mov	r3, r1
 8002cbe:	817b      	strh	r3, [r7, #10]
 8002cc0:	4613      	mov	r3, r2
 8002cc2:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002cc4:	f7ff f802 	bl	8001ccc <HAL_GetTick>
 8002cc8:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002cca:	68fb      	ldr	r3, [r7, #12]
 8002ccc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002cd0:	b2db      	uxtb	r3, r3
 8002cd2:	2b20      	cmp	r3, #32
 8002cd4:	f040 80e0 	bne.w	8002e98 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002cd8:	697b      	ldr	r3, [r7, #20]
 8002cda:	9300      	str	r3, [sp, #0]
 8002cdc:	2319      	movs	r3, #25
 8002cde:	2201      	movs	r2, #1
 8002ce0:	4970      	ldr	r1, [pc, #448]	; (8002ea4 <HAL_I2C_Master_Transmit+0x1f4>)
 8002ce2:	68f8      	ldr	r0, [r7, #12]
 8002ce4:	f000 fd86 	bl	80037f4 <I2C_WaitOnFlagUntilTimeout>
 8002ce8:	4603      	mov	r3, r0
 8002cea:	2b00      	cmp	r3, #0
 8002cec:	d001      	beq.n	8002cf2 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8002cee:	2302      	movs	r3, #2
 8002cf0:	e0d3      	b.n	8002e9a <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002cf2:	68fb      	ldr	r3, [r7, #12]
 8002cf4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002cf8:	2b01      	cmp	r3, #1
 8002cfa:	d101      	bne.n	8002d00 <HAL_I2C_Master_Transmit+0x50>
 8002cfc:	2302      	movs	r3, #2
 8002cfe:	e0cc      	b.n	8002e9a <HAL_I2C_Master_Transmit+0x1ea>
 8002d00:	68fb      	ldr	r3, [r7, #12]
 8002d02:	2201      	movs	r2, #1
 8002d04:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002d08:	68fb      	ldr	r3, [r7, #12]
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	f003 0301 	and.w	r3, r3, #1
 8002d12:	2b01      	cmp	r3, #1
 8002d14:	d007      	beq.n	8002d26 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002d16:	68fb      	ldr	r3, [r7, #12]
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	681a      	ldr	r2, [r3, #0]
 8002d1c:	68fb      	ldr	r3, [r7, #12]
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	f042 0201 	orr.w	r2, r2, #1
 8002d24:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002d26:	68fb      	ldr	r3, [r7, #12]
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	681a      	ldr	r2, [r3, #0]
 8002d2c:	68fb      	ldr	r3, [r7, #12]
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002d34:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8002d36:	68fb      	ldr	r3, [r7, #12]
 8002d38:	2221      	movs	r2, #33	; 0x21
 8002d3a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8002d3e:	68fb      	ldr	r3, [r7, #12]
 8002d40:	2210      	movs	r2, #16
 8002d42:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8002d46:	68fb      	ldr	r3, [r7, #12]
 8002d48:	2200      	movs	r2, #0
 8002d4a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002d4c:	68fb      	ldr	r3, [r7, #12]
 8002d4e:	687a      	ldr	r2, [r7, #4]
 8002d50:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002d52:	68fb      	ldr	r3, [r7, #12]
 8002d54:	893a      	ldrh	r2, [r7, #8]
 8002d56:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002d58:	68fb      	ldr	r3, [r7, #12]
 8002d5a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002d5c:	b29a      	uxth	r2, r3
 8002d5e:	68fb      	ldr	r3, [r7, #12]
 8002d60:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002d62:	68fb      	ldr	r3, [r7, #12]
 8002d64:	4a50      	ldr	r2, [pc, #320]	; (8002ea8 <HAL_I2C_Master_Transmit+0x1f8>)
 8002d66:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8002d68:	8979      	ldrh	r1, [r7, #10]
 8002d6a:	697b      	ldr	r3, [r7, #20]
 8002d6c:	6a3a      	ldr	r2, [r7, #32]
 8002d6e:	68f8      	ldr	r0, [r7, #12]
 8002d70:	f000 fbf0 	bl	8003554 <I2C_MasterRequestWrite>
 8002d74:	4603      	mov	r3, r0
 8002d76:	2b00      	cmp	r3, #0
 8002d78:	d001      	beq.n	8002d7e <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8002d7a:	2301      	movs	r3, #1
 8002d7c:	e08d      	b.n	8002e9a <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002d7e:	2300      	movs	r3, #0
 8002d80:	613b      	str	r3, [r7, #16]
 8002d82:	68fb      	ldr	r3, [r7, #12]
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	695b      	ldr	r3, [r3, #20]
 8002d88:	613b      	str	r3, [r7, #16]
 8002d8a:	68fb      	ldr	r3, [r7, #12]
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	699b      	ldr	r3, [r3, #24]
 8002d90:	613b      	str	r3, [r7, #16]
 8002d92:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8002d94:	e066      	b.n	8002e64 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002d96:	697a      	ldr	r2, [r7, #20]
 8002d98:	6a39      	ldr	r1, [r7, #32]
 8002d9a:	68f8      	ldr	r0, [r7, #12]
 8002d9c:	f000 fe00 	bl	80039a0 <I2C_WaitOnTXEFlagUntilTimeout>
 8002da0:	4603      	mov	r3, r0
 8002da2:	2b00      	cmp	r3, #0
 8002da4:	d00d      	beq.n	8002dc2 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002da6:	68fb      	ldr	r3, [r7, #12]
 8002da8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002daa:	2b04      	cmp	r3, #4
 8002dac:	d107      	bne.n	8002dbe <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002dae:	68fb      	ldr	r3, [r7, #12]
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	681a      	ldr	r2, [r3, #0]
 8002db4:	68fb      	ldr	r3, [r7, #12]
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002dbc:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002dbe:	2301      	movs	r3, #1
 8002dc0:	e06b      	b.n	8002e9a <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002dc2:	68fb      	ldr	r3, [r7, #12]
 8002dc4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002dc6:	781a      	ldrb	r2, [r3, #0]
 8002dc8:	68fb      	ldr	r3, [r7, #12]
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002dce:	68fb      	ldr	r3, [r7, #12]
 8002dd0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002dd2:	1c5a      	adds	r2, r3, #1
 8002dd4:	68fb      	ldr	r3, [r7, #12]
 8002dd6:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8002dd8:	68fb      	ldr	r3, [r7, #12]
 8002dda:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002ddc:	b29b      	uxth	r3, r3
 8002dde:	3b01      	subs	r3, #1
 8002de0:	b29a      	uxth	r2, r3
 8002de2:	68fb      	ldr	r3, [r7, #12]
 8002de4:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8002de6:	68fb      	ldr	r3, [r7, #12]
 8002de8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002dea:	3b01      	subs	r3, #1
 8002dec:	b29a      	uxth	r2, r3
 8002dee:	68fb      	ldr	r3, [r7, #12]
 8002df0:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8002df2:	68fb      	ldr	r3, [r7, #12]
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	695b      	ldr	r3, [r3, #20]
 8002df8:	f003 0304 	and.w	r3, r3, #4
 8002dfc:	2b04      	cmp	r3, #4
 8002dfe:	d11b      	bne.n	8002e38 <HAL_I2C_Master_Transmit+0x188>
 8002e00:	68fb      	ldr	r3, [r7, #12]
 8002e02:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002e04:	2b00      	cmp	r3, #0
 8002e06:	d017      	beq.n	8002e38 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002e08:	68fb      	ldr	r3, [r7, #12]
 8002e0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e0c:	781a      	ldrb	r2, [r3, #0]
 8002e0e:	68fb      	ldr	r3, [r7, #12]
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002e14:	68fb      	ldr	r3, [r7, #12]
 8002e16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e18:	1c5a      	adds	r2, r3, #1
 8002e1a:	68fb      	ldr	r3, [r7, #12]
 8002e1c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8002e1e:	68fb      	ldr	r3, [r7, #12]
 8002e20:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002e22:	b29b      	uxth	r3, r3
 8002e24:	3b01      	subs	r3, #1
 8002e26:	b29a      	uxth	r2, r3
 8002e28:	68fb      	ldr	r3, [r7, #12]
 8002e2a:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8002e2c:	68fb      	ldr	r3, [r7, #12]
 8002e2e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002e30:	3b01      	subs	r3, #1
 8002e32:	b29a      	uxth	r2, r3
 8002e34:	68fb      	ldr	r3, [r7, #12]
 8002e36:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002e38:	697a      	ldr	r2, [r7, #20]
 8002e3a:	6a39      	ldr	r1, [r7, #32]
 8002e3c:	68f8      	ldr	r0, [r7, #12]
 8002e3e:	f000 fdf0 	bl	8003a22 <I2C_WaitOnBTFFlagUntilTimeout>
 8002e42:	4603      	mov	r3, r0
 8002e44:	2b00      	cmp	r3, #0
 8002e46:	d00d      	beq.n	8002e64 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002e48:	68fb      	ldr	r3, [r7, #12]
 8002e4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e4c:	2b04      	cmp	r3, #4
 8002e4e:	d107      	bne.n	8002e60 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002e50:	68fb      	ldr	r3, [r7, #12]
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	681a      	ldr	r2, [r3, #0]
 8002e56:	68fb      	ldr	r3, [r7, #12]
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002e5e:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002e60:	2301      	movs	r3, #1
 8002e62:	e01a      	b.n	8002e9a <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8002e64:	68fb      	ldr	r3, [r7, #12]
 8002e66:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002e68:	2b00      	cmp	r3, #0
 8002e6a:	d194      	bne.n	8002d96 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002e6c:	68fb      	ldr	r3, [r7, #12]
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	681a      	ldr	r2, [r3, #0]
 8002e72:	68fb      	ldr	r3, [r7, #12]
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002e7a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002e7c:	68fb      	ldr	r3, [r7, #12]
 8002e7e:	2220      	movs	r2, #32
 8002e80:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002e84:	68fb      	ldr	r3, [r7, #12]
 8002e86:	2200      	movs	r2, #0
 8002e88:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002e8c:	68fb      	ldr	r3, [r7, #12]
 8002e8e:	2200      	movs	r2, #0
 8002e90:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8002e94:	2300      	movs	r3, #0
 8002e96:	e000      	b.n	8002e9a <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8002e98:	2302      	movs	r3, #2
  }
}
 8002e9a:	4618      	mov	r0, r3
 8002e9c:	3718      	adds	r7, #24
 8002e9e:	46bd      	mov	sp, r7
 8002ea0:	bd80      	pop	{r7, pc}
 8002ea2:	bf00      	nop
 8002ea4:	00100002 	.word	0x00100002
 8002ea8:	ffff0000 	.word	0xffff0000

08002eac <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002eac:	b580      	push	{r7, lr}
 8002eae:	b08c      	sub	sp, #48	; 0x30
 8002eb0:	af02      	add	r7, sp, #8
 8002eb2:	60f8      	str	r0, [r7, #12]
 8002eb4:	607a      	str	r2, [r7, #4]
 8002eb6:	461a      	mov	r2, r3
 8002eb8:	460b      	mov	r3, r1
 8002eba:	817b      	strh	r3, [r7, #10]
 8002ebc:	4613      	mov	r3, r2
 8002ebe:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002ec0:	f7fe ff04 	bl	8001ccc <HAL_GetTick>
 8002ec4:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002ec6:	68fb      	ldr	r3, [r7, #12]
 8002ec8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002ecc:	b2db      	uxtb	r3, r3
 8002ece:	2b20      	cmp	r3, #32
 8002ed0:	f040 820b 	bne.w	80032ea <HAL_I2C_Master_Receive+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002ed4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ed6:	9300      	str	r3, [sp, #0]
 8002ed8:	2319      	movs	r3, #25
 8002eda:	2201      	movs	r2, #1
 8002edc:	497c      	ldr	r1, [pc, #496]	; (80030d0 <HAL_I2C_Master_Receive+0x224>)
 8002ede:	68f8      	ldr	r0, [r7, #12]
 8002ee0:	f000 fc88 	bl	80037f4 <I2C_WaitOnFlagUntilTimeout>
 8002ee4:	4603      	mov	r3, r0
 8002ee6:	2b00      	cmp	r3, #0
 8002ee8:	d001      	beq.n	8002eee <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 8002eea:	2302      	movs	r3, #2
 8002eec:	e1fe      	b.n	80032ec <HAL_I2C_Master_Receive+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002eee:	68fb      	ldr	r3, [r7, #12]
 8002ef0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002ef4:	2b01      	cmp	r3, #1
 8002ef6:	d101      	bne.n	8002efc <HAL_I2C_Master_Receive+0x50>
 8002ef8:	2302      	movs	r3, #2
 8002efa:	e1f7      	b.n	80032ec <HAL_I2C_Master_Receive+0x440>
 8002efc:	68fb      	ldr	r3, [r7, #12]
 8002efe:	2201      	movs	r2, #1
 8002f00:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002f04:	68fb      	ldr	r3, [r7, #12]
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	f003 0301 	and.w	r3, r3, #1
 8002f0e:	2b01      	cmp	r3, #1
 8002f10:	d007      	beq.n	8002f22 <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002f12:	68fb      	ldr	r3, [r7, #12]
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	681a      	ldr	r2, [r3, #0]
 8002f18:	68fb      	ldr	r3, [r7, #12]
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	f042 0201 	orr.w	r2, r2, #1
 8002f20:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002f22:	68fb      	ldr	r3, [r7, #12]
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	681a      	ldr	r2, [r3, #0]
 8002f28:	68fb      	ldr	r3, [r7, #12]
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002f30:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8002f32:	68fb      	ldr	r3, [r7, #12]
 8002f34:	2222      	movs	r2, #34	; 0x22
 8002f36:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8002f3a:	68fb      	ldr	r3, [r7, #12]
 8002f3c:	2210      	movs	r2, #16
 8002f3e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8002f42:	68fb      	ldr	r3, [r7, #12]
 8002f44:	2200      	movs	r2, #0
 8002f46:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002f48:	68fb      	ldr	r3, [r7, #12]
 8002f4a:	687a      	ldr	r2, [r7, #4]
 8002f4c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002f4e:	68fb      	ldr	r3, [r7, #12]
 8002f50:	893a      	ldrh	r2, [r7, #8]
 8002f52:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002f54:	68fb      	ldr	r3, [r7, #12]
 8002f56:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002f58:	b29a      	uxth	r2, r3
 8002f5a:	68fb      	ldr	r3, [r7, #12]
 8002f5c:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002f5e:	68fb      	ldr	r3, [r7, #12]
 8002f60:	4a5c      	ldr	r2, [pc, #368]	; (80030d4 <HAL_I2C_Master_Receive+0x228>)
 8002f62:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8002f64:	8979      	ldrh	r1, [r7, #10]
 8002f66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f68:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002f6a:	68f8      	ldr	r0, [r7, #12]
 8002f6c:	f000 fb74 	bl	8003658 <I2C_MasterRequestRead>
 8002f70:	4603      	mov	r3, r0
 8002f72:	2b00      	cmp	r3, #0
 8002f74:	d001      	beq.n	8002f7a <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 8002f76:	2301      	movs	r3, #1
 8002f78:	e1b8      	b.n	80032ec <HAL_I2C_Master_Receive+0x440>
    }

    if (hi2c->XferSize == 0U)
 8002f7a:	68fb      	ldr	r3, [r7, #12]
 8002f7c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002f7e:	2b00      	cmp	r3, #0
 8002f80:	d113      	bne.n	8002faa <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002f82:	2300      	movs	r3, #0
 8002f84:	623b      	str	r3, [r7, #32]
 8002f86:	68fb      	ldr	r3, [r7, #12]
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	695b      	ldr	r3, [r3, #20]
 8002f8c:	623b      	str	r3, [r7, #32]
 8002f8e:	68fb      	ldr	r3, [r7, #12]
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	699b      	ldr	r3, [r3, #24]
 8002f94:	623b      	str	r3, [r7, #32]
 8002f96:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002f98:	68fb      	ldr	r3, [r7, #12]
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	681a      	ldr	r2, [r3, #0]
 8002f9e:	68fb      	ldr	r3, [r7, #12]
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002fa6:	601a      	str	r2, [r3, #0]
 8002fa8:	e18c      	b.n	80032c4 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8002faa:	68fb      	ldr	r3, [r7, #12]
 8002fac:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002fae:	2b01      	cmp	r3, #1
 8002fb0:	d11b      	bne.n	8002fea <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002fb2:	68fb      	ldr	r3, [r7, #12]
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	681a      	ldr	r2, [r3, #0]
 8002fb8:	68fb      	ldr	r3, [r7, #12]
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002fc0:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002fc2:	2300      	movs	r3, #0
 8002fc4:	61fb      	str	r3, [r7, #28]
 8002fc6:	68fb      	ldr	r3, [r7, #12]
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	695b      	ldr	r3, [r3, #20]
 8002fcc:	61fb      	str	r3, [r7, #28]
 8002fce:	68fb      	ldr	r3, [r7, #12]
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	699b      	ldr	r3, [r3, #24]
 8002fd4:	61fb      	str	r3, [r7, #28]
 8002fd6:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002fd8:	68fb      	ldr	r3, [r7, #12]
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	681a      	ldr	r2, [r3, #0]
 8002fde:	68fb      	ldr	r3, [r7, #12]
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002fe6:	601a      	str	r2, [r3, #0]
 8002fe8:	e16c      	b.n	80032c4 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8002fea:	68fb      	ldr	r3, [r7, #12]
 8002fec:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002fee:	2b02      	cmp	r3, #2
 8002ff0:	d11b      	bne.n	800302a <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002ff2:	68fb      	ldr	r3, [r7, #12]
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	681a      	ldr	r2, [r3, #0]
 8002ff8:	68fb      	ldr	r3, [r7, #12]
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003000:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003002:	68fb      	ldr	r3, [r7, #12]
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	681a      	ldr	r2, [r3, #0]
 8003008:	68fb      	ldr	r3, [r7, #12]
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003010:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003012:	2300      	movs	r3, #0
 8003014:	61bb      	str	r3, [r7, #24]
 8003016:	68fb      	ldr	r3, [r7, #12]
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	695b      	ldr	r3, [r3, #20]
 800301c:	61bb      	str	r3, [r7, #24]
 800301e:	68fb      	ldr	r3, [r7, #12]
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	699b      	ldr	r3, [r3, #24]
 8003024:	61bb      	str	r3, [r7, #24]
 8003026:	69bb      	ldr	r3, [r7, #24]
 8003028:	e14c      	b.n	80032c4 <HAL_I2C_Master_Receive+0x418>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800302a:	68fb      	ldr	r3, [r7, #12]
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	681a      	ldr	r2, [r3, #0]
 8003030:	68fb      	ldr	r3, [r7, #12]
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003038:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800303a:	2300      	movs	r3, #0
 800303c:	617b      	str	r3, [r7, #20]
 800303e:	68fb      	ldr	r3, [r7, #12]
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	695b      	ldr	r3, [r3, #20]
 8003044:	617b      	str	r3, [r7, #20]
 8003046:	68fb      	ldr	r3, [r7, #12]
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	699b      	ldr	r3, [r3, #24]
 800304c:	617b      	str	r3, [r7, #20]
 800304e:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8003050:	e138      	b.n	80032c4 <HAL_I2C_Master_Receive+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8003052:	68fb      	ldr	r3, [r7, #12]
 8003054:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003056:	2b03      	cmp	r3, #3
 8003058:	f200 80f1 	bhi.w	800323e <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 800305c:	68fb      	ldr	r3, [r7, #12]
 800305e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003060:	2b01      	cmp	r3, #1
 8003062:	d123      	bne.n	80030ac <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003064:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003066:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003068:	68f8      	ldr	r0, [r7, #12]
 800306a:	f000 fd1b 	bl	8003aa4 <I2C_WaitOnRXNEFlagUntilTimeout>
 800306e:	4603      	mov	r3, r0
 8003070:	2b00      	cmp	r3, #0
 8003072:	d001      	beq.n	8003078 <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 8003074:	2301      	movs	r3, #1
 8003076:	e139      	b.n	80032ec <HAL_I2C_Master_Receive+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003078:	68fb      	ldr	r3, [r7, #12]
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	691a      	ldr	r2, [r3, #16]
 800307e:	68fb      	ldr	r3, [r7, #12]
 8003080:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003082:	b2d2      	uxtb	r2, r2
 8003084:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003086:	68fb      	ldr	r3, [r7, #12]
 8003088:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800308a:	1c5a      	adds	r2, r3, #1
 800308c:	68fb      	ldr	r3, [r7, #12]
 800308e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003090:	68fb      	ldr	r3, [r7, #12]
 8003092:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003094:	3b01      	subs	r3, #1
 8003096:	b29a      	uxth	r2, r3
 8003098:	68fb      	ldr	r3, [r7, #12]
 800309a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800309c:	68fb      	ldr	r3, [r7, #12]
 800309e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80030a0:	b29b      	uxth	r3, r3
 80030a2:	3b01      	subs	r3, #1
 80030a4:	b29a      	uxth	r2, r3
 80030a6:	68fb      	ldr	r3, [r7, #12]
 80030a8:	855a      	strh	r2, [r3, #42]	; 0x2a
 80030aa:	e10b      	b.n	80032c4 <HAL_I2C_Master_Receive+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 80030ac:	68fb      	ldr	r3, [r7, #12]
 80030ae:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80030b0:	2b02      	cmp	r3, #2
 80030b2:	d14e      	bne.n	8003152 <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80030b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030b6:	9300      	str	r3, [sp, #0]
 80030b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80030ba:	2200      	movs	r2, #0
 80030bc:	4906      	ldr	r1, [pc, #24]	; (80030d8 <HAL_I2C_Master_Receive+0x22c>)
 80030be:	68f8      	ldr	r0, [r7, #12]
 80030c0:	f000 fb98 	bl	80037f4 <I2C_WaitOnFlagUntilTimeout>
 80030c4:	4603      	mov	r3, r0
 80030c6:	2b00      	cmp	r3, #0
 80030c8:	d008      	beq.n	80030dc <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 80030ca:	2301      	movs	r3, #1
 80030cc:	e10e      	b.n	80032ec <HAL_I2C_Master_Receive+0x440>
 80030ce:	bf00      	nop
 80030d0:	00100002 	.word	0x00100002
 80030d4:	ffff0000 	.word	0xffff0000
 80030d8:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80030dc:	68fb      	ldr	r3, [r7, #12]
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	681a      	ldr	r2, [r3, #0]
 80030e2:	68fb      	ldr	r3, [r7, #12]
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80030ea:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80030ec:	68fb      	ldr	r3, [r7, #12]
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	691a      	ldr	r2, [r3, #16]
 80030f2:	68fb      	ldr	r3, [r7, #12]
 80030f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030f6:	b2d2      	uxtb	r2, r2
 80030f8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80030fa:	68fb      	ldr	r3, [r7, #12]
 80030fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030fe:	1c5a      	adds	r2, r3, #1
 8003100:	68fb      	ldr	r3, [r7, #12]
 8003102:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003104:	68fb      	ldr	r3, [r7, #12]
 8003106:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003108:	3b01      	subs	r3, #1
 800310a:	b29a      	uxth	r2, r3
 800310c:	68fb      	ldr	r3, [r7, #12]
 800310e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003110:	68fb      	ldr	r3, [r7, #12]
 8003112:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003114:	b29b      	uxth	r3, r3
 8003116:	3b01      	subs	r3, #1
 8003118:	b29a      	uxth	r2, r3
 800311a:	68fb      	ldr	r3, [r7, #12]
 800311c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800311e:	68fb      	ldr	r3, [r7, #12]
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	691a      	ldr	r2, [r3, #16]
 8003124:	68fb      	ldr	r3, [r7, #12]
 8003126:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003128:	b2d2      	uxtb	r2, r2
 800312a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800312c:	68fb      	ldr	r3, [r7, #12]
 800312e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003130:	1c5a      	adds	r2, r3, #1
 8003132:	68fb      	ldr	r3, [r7, #12]
 8003134:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003136:	68fb      	ldr	r3, [r7, #12]
 8003138:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800313a:	3b01      	subs	r3, #1
 800313c:	b29a      	uxth	r2, r3
 800313e:	68fb      	ldr	r3, [r7, #12]
 8003140:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003142:	68fb      	ldr	r3, [r7, #12]
 8003144:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003146:	b29b      	uxth	r3, r3
 8003148:	3b01      	subs	r3, #1
 800314a:	b29a      	uxth	r2, r3
 800314c:	68fb      	ldr	r3, [r7, #12]
 800314e:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003150:	e0b8      	b.n	80032c4 <HAL_I2C_Master_Receive+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003152:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003154:	9300      	str	r3, [sp, #0]
 8003156:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003158:	2200      	movs	r2, #0
 800315a:	4966      	ldr	r1, [pc, #408]	; (80032f4 <HAL_I2C_Master_Receive+0x448>)
 800315c:	68f8      	ldr	r0, [r7, #12]
 800315e:	f000 fb49 	bl	80037f4 <I2C_WaitOnFlagUntilTimeout>
 8003162:	4603      	mov	r3, r0
 8003164:	2b00      	cmp	r3, #0
 8003166:	d001      	beq.n	800316c <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 8003168:	2301      	movs	r3, #1
 800316a:	e0bf      	b.n	80032ec <HAL_I2C_Master_Receive+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800316c:	68fb      	ldr	r3, [r7, #12]
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	681a      	ldr	r2, [r3, #0]
 8003172:	68fb      	ldr	r3, [r7, #12]
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800317a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800317c:	68fb      	ldr	r3, [r7, #12]
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	691a      	ldr	r2, [r3, #16]
 8003182:	68fb      	ldr	r3, [r7, #12]
 8003184:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003186:	b2d2      	uxtb	r2, r2
 8003188:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800318a:	68fb      	ldr	r3, [r7, #12]
 800318c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800318e:	1c5a      	adds	r2, r3, #1
 8003190:	68fb      	ldr	r3, [r7, #12]
 8003192:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003194:	68fb      	ldr	r3, [r7, #12]
 8003196:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003198:	3b01      	subs	r3, #1
 800319a:	b29a      	uxth	r2, r3
 800319c:	68fb      	ldr	r3, [r7, #12]
 800319e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80031a0:	68fb      	ldr	r3, [r7, #12]
 80031a2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80031a4:	b29b      	uxth	r3, r3
 80031a6:	3b01      	subs	r3, #1
 80031a8:	b29a      	uxth	r2, r3
 80031aa:	68fb      	ldr	r3, [r7, #12]
 80031ac:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80031ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031b0:	9300      	str	r3, [sp, #0]
 80031b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80031b4:	2200      	movs	r2, #0
 80031b6:	494f      	ldr	r1, [pc, #316]	; (80032f4 <HAL_I2C_Master_Receive+0x448>)
 80031b8:	68f8      	ldr	r0, [r7, #12]
 80031ba:	f000 fb1b 	bl	80037f4 <I2C_WaitOnFlagUntilTimeout>
 80031be:	4603      	mov	r3, r0
 80031c0:	2b00      	cmp	r3, #0
 80031c2:	d001      	beq.n	80031c8 <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 80031c4:	2301      	movs	r3, #1
 80031c6:	e091      	b.n	80032ec <HAL_I2C_Master_Receive+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80031c8:	68fb      	ldr	r3, [r7, #12]
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	681a      	ldr	r2, [r3, #0]
 80031ce:	68fb      	ldr	r3, [r7, #12]
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80031d6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80031d8:	68fb      	ldr	r3, [r7, #12]
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	691a      	ldr	r2, [r3, #16]
 80031de:	68fb      	ldr	r3, [r7, #12]
 80031e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031e2:	b2d2      	uxtb	r2, r2
 80031e4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80031e6:	68fb      	ldr	r3, [r7, #12]
 80031e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031ea:	1c5a      	adds	r2, r3, #1
 80031ec:	68fb      	ldr	r3, [r7, #12]
 80031ee:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80031f0:	68fb      	ldr	r3, [r7, #12]
 80031f2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80031f4:	3b01      	subs	r3, #1
 80031f6:	b29a      	uxth	r2, r3
 80031f8:	68fb      	ldr	r3, [r7, #12]
 80031fa:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80031fc:	68fb      	ldr	r3, [r7, #12]
 80031fe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003200:	b29b      	uxth	r3, r3
 8003202:	3b01      	subs	r3, #1
 8003204:	b29a      	uxth	r2, r3
 8003206:	68fb      	ldr	r3, [r7, #12]
 8003208:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800320a:	68fb      	ldr	r3, [r7, #12]
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	691a      	ldr	r2, [r3, #16]
 8003210:	68fb      	ldr	r3, [r7, #12]
 8003212:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003214:	b2d2      	uxtb	r2, r2
 8003216:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003218:	68fb      	ldr	r3, [r7, #12]
 800321a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800321c:	1c5a      	adds	r2, r3, #1
 800321e:	68fb      	ldr	r3, [r7, #12]
 8003220:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003222:	68fb      	ldr	r3, [r7, #12]
 8003224:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003226:	3b01      	subs	r3, #1
 8003228:	b29a      	uxth	r2, r3
 800322a:	68fb      	ldr	r3, [r7, #12]
 800322c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800322e:	68fb      	ldr	r3, [r7, #12]
 8003230:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003232:	b29b      	uxth	r3, r3
 8003234:	3b01      	subs	r3, #1
 8003236:	b29a      	uxth	r2, r3
 8003238:	68fb      	ldr	r3, [r7, #12]
 800323a:	855a      	strh	r2, [r3, #42]	; 0x2a
 800323c:	e042      	b.n	80032c4 <HAL_I2C_Master_Receive+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800323e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003240:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003242:	68f8      	ldr	r0, [r7, #12]
 8003244:	f000 fc2e 	bl	8003aa4 <I2C_WaitOnRXNEFlagUntilTimeout>
 8003248:	4603      	mov	r3, r0
 800324a:	2b00      	cmp	r3, #0
 800324c:	d001      	beq.n	8003252 <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 800324e:	2301      	movs	r3, #1
 8003250:	e04c      	b.n	80032ec <HAL_I2C_Master_Receive+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003252:	68fb      	ldr	r3, [r7, #12]
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	691a      	ldr	r2, [r3, #16]
 8003258:	68fb      	ldr	r3, [r7, #12]
 800325a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800325c:	b2d2      	uxtb	r2, r2
 800325e:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003260:	68fb      	ldr	r3, [r7, #12]
 8003262:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003264:	1c5a      	adds	r2, r3, #1
 8003266:	68fb      	ldr	r3, [r7, #12]
 8003268:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800326a:	68fb      	ldr	r3, [r7, #12]
 800326c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800326e:	3b01      	subs	r3, #1
 8003270:	b29a      	uxth	r2, r3
 8003272:	68fb      	ldr	r3, [r7, #12]
 8003274:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8003276:	68fb      	ldr	r3, [r7, #12]
 8003278:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800327a:	b29b      	uxth	r3, r3
 800327c:	3b01      	subs	r3, #1
 800327e:	b29a      	uxth	r2, r3
 8003280:	68fb      	ldr	r3, [r7, #12]
 8003282:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8003284:	68fb      	ldr	r3, [r7, #12]
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	695b      	ldr	r3, [r3, #20]
 800328a:	f003 0304 	and.w	r3, r3, #4
 800328e:	2b04      	cmp	r3, #4
 8003290:	d118      	bne.n	80032c4 <HAL_I2C_Master_Receive+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003292:	68fb      	ldr	r3, [r7, #12]
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	691a      	ldr	r2, [r3, #16]
 8003298:	68fb      	ldr	r3, [r7, #12]
 800329a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800329c:	b2d2      	uxtb	r2, r2
 800329e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80032a0:	68fb      	ldr	r3, [r7, #12]
 80032a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032a4:	1c5a      	adds	r2, r3, #1
 80032a6:	68fb      	ldr	r3, [r7, #12]
 80032a8:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80032aa:	68fb      	ldr	r3, [r7, #12]
 80032ac:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80032ae:	3b01      	subs	r3, #1
 80032b0:	b29a      	uxth	r2, r3
 80032b2:	68fb      	ldr	r3, [r7, #12]
 80032b4:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80032b6:	68fb      	ldr	r3, [r7, #12]
 80032b8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80032ba:	b29b      	uxth	r3, r3
 80032bc:	3b01      	subs	r3, #1
 80032be:	b29a      	uxth	r2, r3
 80032c0:	68fb      	ldr	r3, [r7, #12]
 80032c2:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80032c4:	68fb      	ldr	r3, [r7, #12]
 80032c6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80032c8:	2b00      	cmp	r3, #0
 80032ca:	f47f aec2 	bne.w	8003052 <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 80032ce:	68fb      	ldr	r3, [r7, #12]
 80032d0:	2220      	movs	r2, #32
 80032d2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80032d6:	68fb      	ldr	r3, [r7, #12]
 80032d8:	2200      	movs	r2, #0
 80032da:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80032de:	68fb      	ldr	r3, [r7, #12]
 80032e0:	2200      	movs	r2, #0
 80032e2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80032e6:	2300      	movs	r3, #0
 80032e8:	e000      	b.n	80032ec <HAL_I2C_Master_Receive+0x440>
  }
  else
  {
    return HAL_BUSY;
 80032ea:	2302      	movs	r3, #2
  }
}
 80032ec:	4618      	mov	r0, r3
 80032ee:	3728      	adds	r7, #40	; 0x28
 80032f0:	46bd      	mov	sp, r7
 80032f2:	bd80      	pop	{r7, pc}
 80032f4:	00010004 	.word	0x00010004

080032f8 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 80032f8:	b580      	push	{r7, lr}
 80032fa:	b08a      	sub	sp, #40	; 0x28
 80032fc:	af02      	add	r7, sp, #8
 80032fe:	60f8      	str	r0, [r7, #12]
 8003300:	607a      	str	r2, [r7, #4]
 8003302:	603b      	str	r3, [r7, #0]
 8003304:	460b      	mov	r3, r1
 8003306:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 8003308:	f7fe fce0 	bl	8001ccc <HAL_GetTick>
 800330c:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 0U;
 800330e:	2300      	movs	r3, #0
 8003310:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003312:	68fb      	ldr	r3, [r7, #12]
 8003314:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003318:	b2db      	uxtb	r3, r3
 800331a:	2b20      	cmp	r3, #32
 800331c:	f040 8111 	bne.w	8003542 <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003320:	69fb      	ldr	r3, [r7, #28]
 8003322:	9300      	str	r3, [sp, #0]
 8003324:	2319      	movs	r3, #25
 8003326:	2201      	movs	r2, #1
 8003328:	4988      	ldr	r1, [pc, #544]	; (800354c <HAL_I2C_IsDeviceReady+0x254>)
 800332a:	68f8      	ldr	r0, [r7, #12]
 800332c:	f000 fa62 	bl	80037f4 <I2C_WaitOnFlagUntilTimeout>
 8003330:	4603      	mov	r3, r0
 8003332:	2b00      	cmp	r3, #0
 8003334:	d001      	beq.n	800333a <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 8003336:	2302      	movs	r3, #2
 8003338:	e104      	b.n	8003544 <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800333a:	68fb      	ldr	r3, [r7, #12]
 800333c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003340:	2b01      	cmp	r3, #1
 8003342:	d101      	bne.n	8003348 <HAL_I2C_IsDeviceReady+0x50>
 8003344:	2302      	movs	r3, #2
 8003346:	e0fd      	b.n	8003544 <HAL_I2C_IsDeviceReady+0x24c>
 8003348:	68fb      	ldr	r3, [r7, #12]
 800334a:	2201      	movs	r2, #1
 800334c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003350:	68fb      	ldr	r3, [r7, #12]
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	f003 0301 	and.w	r3, r3, #1
 800335a:	2b01      	cmp	r3, #1
 800335c:	d007      	beq.n	800336e <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800335e:	68fb      	ldr	r3, [r7, #12]
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	681a      	ldr	r2, [r3, #0]
 8003364:	68fb      	ldr	r3, [r7, #12]
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	f042 0201 	orr.w	r2, r2, #1
 800336c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800336e:	68fb      	ldr	r3, [r7, #12]
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	681a      	ldr	r2, [r3, #0]
 8003374:	68fb      	ldr	r3, [r7, #12]
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800337c:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 800337e:	68fb      	ldr	r3, [r7, #12]
 8003380:	2224      	movs	r2, #36	; 0x24
 8003382:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003386:	68fb      	ldr	r3, [r7, #12]
 8003388:	2200      	movs	r2, #0
 800338a:	641a      	str	r2, [r3, #64]	; 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800338c:	68fb      	ldr	r3, [r7, #12]
 800338e:	4a70      	ldr	r2, [pc, #448]	; (8003550 <HAL_I2C_IsDeviceReady+0x258>)
 8003390:	62da      	str	r2, [r3, #44]	; 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003392:	68fb      	ldr	r3, [r7, #12]
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	681a      	ldr	r2, [r3, #0]
 8003398:	68fb      	ldr	r3, [r7, #12]
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80033a0:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 80033a2:	69fb      	ldr	r3, [r7, #28]
 80033a4:	9300      	str	r3, [sp, #0]
 80033a6:	683b      	ldr	r3, [r7, #0]
 80033a8:	2200      	movs	r2, #0
 80033aa:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80033ae:	68f8      	ldr	r0, [r7, #12]
 80033b0:	f000 fa20 	bl	80037f4 <I2C_WaitOnFlagUntilTimeout>
 80033b4:	4603      	mov	r3, r0
 80033b6:	2b00      	cmp	r3, #0
 80033b8:	d00d      	beq.n	80033d6 <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80033ba:	68fb      	ldr	r3, [r7, #12]
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80033c4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80033c8:	d103      	bne.n	80033d2 <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80033ca:	68fb      	ldr	r3, [r7, #12]
 80033cc:	f44f 7200 	mov.w	r2, #512	; 0x200
 80033d0:	641a      	str	r2, [r3, #64]	; 0x40
        }
        return HAL_TIMEOUT;
 80033d2:	2303      	movs	r3, #3
 80033d4:	e0b6      	b.n	8003544 <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80033d6:	897b      	ldrh	r3, [r7, #10]
 80033d8:	b2db      	uxtb	r3, r3
 80033da:	461a      	mov	r2, r3
 80033dc:	68fb      	ldr	r3, [r7, #12]
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80033e4:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 80033e6:	f7fe fc71 	bl	8001ccc <HAL_GetTick>
 80033ea:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 80033ec:	68fb      	ldr	r3, [r7, #12]
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	695b      	ldr	r3, [r3, #20]
 80033f2:	f003 0302 	and.w	r3, r3, #2
 80033f6:	2b02      	cmp	r3, #2
 80033f8:	bf0c      	ite	eq
 80033fa:	2301      	moveq	r3, #1
 80033fc:	2300      	movne	r3, #0
 80033fe:	b2db      	uxtb	r3, r3
 8003400:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8003402:	68fb      	ldr	r3, [r7, #12]
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	695b      	ldr	r3, [r3, #20]
 8003408:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800340c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003410:	bf0c      	ite	eq
 8003412:	2301      	moveq	r3, #1
 8003414:	2300      	movne	r3, #0
 8003416:	b2db      	uxtb	r3, r3
 8003418:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 800341a:	e025      	b.n	8003468 <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800341c:	f7fe fc56 	bl	8001ccc <HAL_GetTick>
 8003420:	4602      	mov	r2, r0
 8003422:	69fb      	ldr	r3, [r7, #28]
 8003424:	1ad3      	subs	r3, r2, r3
 8003426:	683a      	ldr	r2, [r7, #0]
 8003428:	429a      	cmp	r2, r3
 800342a:	d302      	bcc.n	8003432 <HAL_I2C_IsDeviceReady+0x13a>
 800342c:	683b      	ldr	r3, [r7, #0]
 800342e:	2b00      	cmp	r3, #0
 8003430:	d103      	bne.n	800343a <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 8003432:	68fb      	ldr	r3, [r7, #12]
 8003434:	22a0      	movs	r2, #160	; 0xa0
 8003436:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 800343a:	68fb      	ldr	r3, [r7, #12]
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	695b      	ldr	r3, [r3, #20]
 8003440:	f003 0302 	and.w	r3, r3, #2
 8003444:	2b02      	cmp	r3, #2
 8003446:	bf0c      	ite	eq
 8003448:	2301      	moveq	r3, #1
 800344a:	2300      	movne	r3, #0
 800344c:	b2db      	uxtb	r3, r3
 800344e:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8003450:	68fb      	ldr	r3, [r7, #12]
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	695b      	ldr	r3, [r3, #20]
 8003456:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800345a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800345e:	bf0c      	ite	eq
 8003460:	2301      	moveq	r3, #1
 8003462:	2300      	movne	r3, #0
 8003464:	b2db      	uxtb	r3, r3
 8003466:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8003468:	68fb      	ldr	r3, [r7, #12]
 800346a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800346e:	b2db      	uxtb	r3, r3
 8003470:	2ba0      	cmp	r3, #160	; 0xa0
 8003472:	d005      	beq.n	8003480 <HAL_I2C_IsDeviceReady+0x188>
 8003474:	7dfb      	ldrb	r3, [r7, #23]
 8003476:	2b00      	cmp	r3, #0
 8003478:	d102      	bne.n	8003480 <HAL_I2C_IsDeviceReady+0x188>
 800347a:	7dbb      	ldrb	r3, [r7, #22]
 800347c:	2b00      	cmp	r3, #0
 800347e:	d0cd      	beq.n	800341c <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 8003480:	68fb      	ldr	r3, [r7, #12]
 8003482:	2220      	movs	r2, #32
 8003484:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 8003488:	68fb      	ldr	r3, [r7, #12]
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	695b      	ldr	r3, [r3, #20]
 800348e:	f003 0302 	and.w	r3, r3, #2
 8003492:	2b02      	cmp	r3, #2
 8003494:	d129      	bne.n	80034ea <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003496:	68fb      	ldr	r3, [r7, #12]
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	681a      	ldr	r2, [r3, #0]
 800349c:	68fb      	ldr	r3, [r7, #12]
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80034a4:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80034a6:	2300      	movs	r3, #0
 80034a8:	613b      	str	r3, [r7, #16]
 80034aa:	68fb      	ldr	r3, [r7, #12]
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	695b      	ldr	r3, [r3, #20]
 80034b0:	613b      	str	r3, [r7, #16]
 80034b2:	68fb      	ldr	r3, [r7, #12]
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	699b      	ldr	r3, [r3, #24]
 80034b8:	613b      	str	r3, [r7, #16]
 80034ba:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80034bc:	69fb      	ldr	r3, [r7, #28]
 80034be:	9300      	str	r3, [sp, #0]
 80034c0:	2319      	movs	r3, #25
 80034c2:	2201      	movs	r2, #1
 80034c4:	4921      	ldr	r1, [pc, #132]	; (800354c <HAL_I2C_IsDeviceReady+0x254>)
 80034c6:	68f8      	ldr	r0, [r7, #12]
 80034c8:	f000 f994 	bl	80037f4 <I2C_WaitOnFlagUntilTimeout>
 80034cc:	4603      	mov	r3, r0
 80034ce:	2b00      	cmp	r3, #0
 80034d0:	d001      	beq.n	80034d6 <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 80034d2:	2301      	movs	r3, #1
 80034d4:	e036      	b.n	8003544 <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 80034d6:	68fb      	ldr	r3, [r7, #12]
 80034d8:	2220      	movs	r2, #32
 80034da:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80034de:	68fb      	ldr	r3, [r7, #12]
 80034e0:	2200      	movs	r2, #0
 80034e2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_OK;
 80034e6:	2300      	movs	r3, #0
 80034e8:	e02c      	b.n	8003544 <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80034ea:	68fb      	ldr	r3, [r7, #12]
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	681a      	ldr	r2, [r3, #0]
 80034f0:	68fb      	ldr	r3, [r7, #12]
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80034f8:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80034fa:	68fb      	ldr	r3, [r7, #12]
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003502:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003504:	69fb      	ldr	r3, [r7, #28]
 8003506:	9300      	str	r3, [sp, #0]
 8003508:	2319      	movs	r3, #25
 800350a:	2201      	movs	r2, #1
 800350c:	490f      	ldr	r1, [pc, #60]	; (800354c <HAL_I2C_IsDeviceReady+0x254>)
 800350e:	68f8      	ldr	r0, [r7, #12]
 8003510:	f000 f970 	bl	80037f4 <I2C_WaitOnFlagUntilTimeout>
 8003514:	4603      	mov	r3, r0
 8003516:	2b00      	cmp	r3, #0
 8003518:	d001      	beq.n	800351e <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 800351a:	2301      	movs	r3, #1
 800351c:	e012      	b.n	8003544 <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 800351e:	69bb      	ldr	r3, [r7, #24]
 8003520:	3301      	adds	r3, #1
 8003522:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 8003524:	69ba      	ldr	r2, [r7, #24]
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	429a      	cmp	r2, r3
 800352a:	f4ff af32 	bcc.w	8003392 <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 800352e:	68fb      	ldr	r3, [r7, #12]
 8003530:	2220      	movs	r2, #32
 8003532:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003536:	68fb      	ldr	r3, [r7, #12]
 8003538:	2200      	movs	r2, #0
 800353a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 800353e:	2301      	movs	r3, #1
 8003540:	e000      	b.n	8003544 <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 8003542:	2302      	movs	r3, #2
  }
}
 8003544:	4618      	mov	r0, r3
 8003546:	3720      	adds	r7, #32
 8003548:	46bd      	mov	sp, r7
 800354a:	bd80      	pop	{r7, pc}
 800354c:	00100002 	.word	0x00100002
 8003550:	ffff0000 	.word	0xffff0000

08003554 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8003554:	b580      	push	{r7, lr}
 8003556:	b088      	sub	sp, #32
 8003558:	af02      	add	r7, sp, #8
 800355a:	60f8      	str	r0, [r7, #12]
 800355c:	607a      	str	r2, [r7, #4]
 800355e:	603b      	str	r3, [r7, #0]
 8003560:	460b      	mov	r3, r1
 8003562:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8003564:	68fb      	ldr	r3, [r7, #12]
 8003566:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003568:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800356a:	697b      	ldr	r3, [r7, #20]
 800356c:	2b08      	cmp	r3, #8
 800356e:	d006      	beq.n	800357e <I2C_MasterRequestWrite+0x2a>
 8003570:	697b      	ldr	r3, [r7, #20]
 8003572:	2b01      	cmp	r3, #1
 8003574:	d003      	beq.n	800357e <I2C_MasterRequestWrite+0x2a>
 8003576:	697b      	ldr	r3, [r7, #20]
 8003578:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800357c:	d108      	bne.n	8003590 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800357e:	68fb      	ldr	r3, [r7, #12]
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	681a      	ldr	r2, [r3, #0]
 8003584:	68fb      	ldr	r3, [r7, #12]
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800358c:	601a      	str	r2, [r3, #0]
 800358e:	e00b      	b.n	80035a8 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8003590:	68fb      	ldr	r3, [r7, #12]
 8003592:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003594:	2b12      	cmp	r3, #18
 8003596:	d107      	bne.n	80035a8 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003598:	68fb      	ldr	r3, [r7, #12]
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	681a      	ldr	r2, [r3, #0]
 800359e:	68fb      	ldr	r3, [r7, #12]
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80035a6:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80035a8:	683b      	ldr	r3, [r7, #0]
 80035aa:	9300      	str	r3, [sp, #0]
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	2200      	movs	r2, #0
 80035b0:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80035b4:	68f8      	ldr	r0, [r7, #12]
 80035b6:	f000 f91d 	bl	80037f4 <I2C_WaitOnFlagUntilTimeout>
 80035ba:	4603      	mov	r3, r0
 80035bc:	2b00      	cmp	r3, #0
 80035be:	d00d      	beq.n	80035dc <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80035c0:	68fb      	ldr	r3, [r7, #12]
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80035ca:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80035ce:	d103      	bne.n	80035d8 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80035d0:	68fb      	ldr	r3, [r7, #12]
 80035d2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80035d6:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80035d8:	2303      	movs	r3, #3
 80035da:	e035      	b.n	8003648 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80035dc:	68fb      	ldr	r3, [r7, #12]
 80035de:	691b      	ldr	r3, [r3, #16]
 80035e0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80035e4:	d108      	bne.n	80035f8 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80035e6:	897b      	ldrh	r3, [r7, #10]
 80035e8:	b2db      	uxtb	r3, r3
 80035ea:	461a      	mov	r2, r3
 80035ec:	68fb      	ldr	r3, [r7, #12]
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80035f4:	611a      	str	r2, [r3, #16]
 80035f6:	e01b      	b.n	8003630 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80035f8:	897b      	ldrh	r3, [r7, #10]
 80035fa:	11db      	asrs	r3, r3, #7
 80035fc:	b2db      	uxtb	r3, r3
 80035fe:	f003 0306 	and.w	r3, r3, #6
 8003602:	b2db      	uxtb	r3, r3
 8003604:	f063 030f 	orn	r3, r3, #15
 8003608:	b2da      	uxtb	r2, r3
 800360a:	68fb      	ldr	r3, [r7, #12]
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8003610:	683b      	ldr	r3, [r7, #0]
 8003612:	687a      	ldr	r2, [r7, #4]
 8003614:	490e      	ldr	r1, [pc, #56]	; (8003650 <I2C_MasterRequestWrite+0xfc>)
 8003616:	68f8      	ldr	r0, [r7, #12]
 8003618:	f000 f943 	bl	80038a2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800361c:	4603      	mov	r3, r0
 800361e:	2b00      	cmp	r3, #0
 8003620:	d001      	beq.n	8003626 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8003622:	2301      	movs	r3, #1
 8003624:	e010      	b.n	8003648 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8003626:	897b      	ldrh	r3, [r7, #10]
 8003628:	b2da      	uxtb	r2, r3
 800362a:	68fb      	ldr	r3, [r7, #12]
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003630:	683b      	ldr	r3, [r7, #0]
 8003632:	687a      	ldr	r2, [r7, #4]
 8003634:	4907      	ldr	r1, [pc, #28]	; (8003654 <I2C_MasterRequestWrite+0x100>)
 8003636:	68f8      	ldr	r0, [r7, #12]
 8003638:	f000 f933 	bl	80038a2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800363c:	4603      	mov	r3, r0
 800363e:	2b00      	cmp	r3, #0
 8003640:	d001      	beq.n	8003646 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8003642:	2301      	movs	r3, #1
 8003644:	e000      	b.n	8003648 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8003646:	2300      	movs	r3, #0
}
 8003648:	4618      	mov	r0, r3
 800364a:	3718      	adds	r7, #24
 800364c:	46bd      	mov	sp, r7
 800364e:	bd80      	pop	{r7, pc}
 8003650:	00010008 	.word	0x00010008
 8003654:	00010002 	.word	0x00010002

08003658 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8003658:	b580      	push	{r7, lr}
 800365a:	b088      	sub	sp, #32
 800365c:	af02      	add	r7, sp, #8
 800365e:	60f8      	str	r0, [r7, #12]
 8003660:	607a      	str	r2, [r7, #4]
 8003662:	603b      	str	r3, [r7, #0]
 8003664:	460b      	mov	r3, r1
 8003666:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8003668:	68fb      	ldr	r3, [r7, #12]
 800366a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800366c:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800366e:	68fb      	ldr	r3, [r7, #12]
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	681a      	ldr	r2, [r3, #0]
 8003674:	68fb      	ldr	r3, [r7, #12]
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800367c:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800367e:	697b      	ldr	r3, [r7, #20]
 8003680:	2b08      	cmp	r3, #8
 8003682:	d006      	beq.n	8003692 <I2C_MasterRequestRead+0x3a>
 8003684:	697b      	ldr	r3, [r7, #20]
 8003686:	2b01      	cmp	r3, #1
 8003688:	d003      	beq.n	8003692 <I2C_MasterRequestRead+0x3a>
 800368a:	697b      	ldr	r3, [r7, #20]
 800368c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003690:	d108      	bne.n	80036a4 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003692:	68fb      	ldr	r3, [r7, #12]
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	681a      	ldr	r2, [r3, #0]
 8003698:	68fb      	ldr	r3, [r7, #12]
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80036a0:	601a      	str	r2, [r3, #0]
 80036a2:	e00b      	b.n	80036bc <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 80036a4:	68fb      	ldr	r3, [r7, #12]
 80036a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036a8:	2b11      	cmp	r3, #17
 80036aa:	d107      	bne.n	80036bc <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80036ac:	68fb      	ldr	r3, [r7, #12]
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	681a      	ldr	r2, [r3, #0]
 80036b2:	68fb      	ldr	r3, [r7, #12]
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80036ba:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80036bc:	683b      	ldr	r3, [r7, #0]
 80036be:	9300      	str	r3, [sp, #0]
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	2200      	movs	r2, #0
 80036c4:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80036c8:	68f8      	ldr	r0, [r7, #12]
 80036ca:	f000 f893 	bl	80037f4 <I2C_WaitOnFlagUntilTimeout>
 80036ce:	4603      	mov	r3, r0
 80036d0:	2b00      	cmp	r3, #0
 80036d2:	d00d      	beq.n	80036f0 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80036d4:	68fb      	ldr	r3, [r7, #12]
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80036de:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80036e2:	d103      	bne.n	80036ec <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80036e4:	68fb      	ldr	r3, [r7, #12]
 80036e6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80036ea:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80036ec:	2303      	movs	r3, #3
 80036ee:	e079      	b.n	80037e4 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80036f0:	68fb      	ldr	r3, [r7, #12]
 80036f2:	691b      	ldr	r3, [r3, #16]
 80036f4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80036f8:	d108      	bne.n	800370c <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80036fa:	897b      	ldrh	r3, [r7, #10]
 80036fc:	b2db      	uxtb	r3, r3
 80036fe:	f043 0301 	orr.w	r3, r3, #1
 8003702:	b2da      	uxtb	r2, r3
 8003704:	68fb      	ldr	r3, [r7, #12]
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	611a      	str	r2, [r3, #16]
 800370a:	e05f      	b.n	80037cc <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 800370c:	897b      	ldrh	r3, [r7, #10]
 800370e:	11db      	asrs	r3, r3, #7
 8003710:	b2db      	uxtb	r3, r3
 8003712:	f003 0306 	and.w	r3, r3, #6
 8003716:	b2db      	uxtb	r3, r3
 8003718:	f063 030f 	orn	r3, r3, #15
 800371c:	b2da      	uxtb	r2, r3
 800371e:	68fb      	ldr	r3, [r7, #12]
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8003724:	683b      	ldr	r3, [r7, #0]
 8003726:	687a      	ldr	r2, [r7, #4]
 8003728:	4930      	ldr	r1, [pc, #192]	; (80037ec <I2C_MasterRequestRead+0x194>)
 800372a:	68f8      	ldr	r0, [r7, #12]
 800372c:	f000 f8b9 	bl	80038a2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003730:	4603      	mov	r3, r0
 8003732:	2b00      	cmp	r3, #0
 8003734:	d001      	beq.n	800373a <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 8003736:	2301      	movs	r3, #1
 8003738:	e054      	b.n	80037e4 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800373a:	897b      	ldrh	r3, [r7, #10]
 800373c:	b2da      	uxtb	r2, r3
 800373e:	68fb      	ldr	r3, [r7, #12]
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003744:	683b      	ldr	r3, [r7, #0]
 8003746:	687a      	ldr	r2, [r7, #4]
 8003748:	4929      	ldr	r1, [pc, #164]	; (80037f0 <I2C_MasterRequestRead+0x198>)
 800374a:	68f8      	ldr	r0, [r7, #12]
 800374c:	f000 f8a9 	bl	80038a2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003750:	4603      	mov	r3, r0
 8003752:	2b00      	cmp	r3, #0
 8003754:	d001      	beq.n	800375a <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 8003756:	2301      	movs	r3, #1
 8003758:	e044      	b.n	80037e4 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800375a:	2300      	movs	r3, #0
 800375c:	613b      	str	r3, [r7, #16]
 800375e:	68fb      	ldr	r3, [r7, #12]
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	695b      	ldr	r3, [r3, #20]
 8003764:	613b      	str	r3, [r7, #16]
 8003766:	68fb      	ldr	r3, [r7, #12]
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	699b      	ldr	r3, [r3, #24]
 800376c:	613b      	str	r3, [r7, #16]
 800376e:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003770:	68fb      	ldr	r3, [r7, #12]
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	681a      	ldr	r2, [r3, #0]
 8003776:	68fb      	ldr	r3, [r7, #12]
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800377e:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003780:	683b      	ldr	r3, [r7, #0]
 8003782:	9300      	str	r3, [sp, #0]
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	2200      	movs	r2, #0
 8003788:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800378c:	68f8      	ldr	r0, [r7, #12]
 800378e:	f000 f831 	bl	80037f4 <I2C_WaitOnFlagUntilTimeout>
 8003792:	4603      	mov	r3, r0
 8003794:	2b00      	cmp	r3, #0
 8003796:	d00d      	beq.n	80037b4 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003798:	68fb      	ldr	r3, [r7, #12]
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80037a2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80037a6:	d103      	bne.n	80037b0 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80037a8:	68fb      	ldr	r3, [r7, #12]
 80037aa:	f44f 7200 	mov.w	r2, #512	; 0x200
 80037ae:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 80037b0:	2303      	movs	r3, #3
 80037b2:	e017      	b.n	80037e4 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 80037b4:	897b      	ldrh	r3, [r7, #10]
 80037b6:	11db      	asrs	r3, r3, #7
 80037b8:	b2db      	uxtb	r3, r3
 80037ba:	f003 0306 	and.w	r3, r3, #6
 80037be:	b2db      	uxtb	r3, r3
 80037c0:	f063 030e 	orn	r3, r3, #14
 80037c4:	b2da      	uxtb	r2, r3
 80037c6:	68fb      	ldr	r3, [r7, #12]
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80037cc:	683b      	ldr	r3, [r7, #0]
 80037ce:	687a      	ldr	r2, [r7, #4]
 80037d0:	4907      	ldr	r1, [pc, #28]	; (80037f0 <I2C_MasterRequestRead+0x198>)
 80037d2:	68f8      	ldr	r0, [r7, #12]
 80037d4:	f000 f865 	bl	80038a2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80037d8:	4603      	mov	r3, r0
 80037da:	2b00      	cmp	r3, #0
 80037dc:	d001      	beq.n	80037e2 <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 80037de:	2301      	movs	r3, #1
 80037e0:	e000      	b.n	80037e4 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 80037e2:	2300      	movs	r3, #0
}
 80037e4:	4618      	mov	r0, r3
 80037e6:	3718      	adds	r7, #24
 80037e8:	46bd      	mov	sp, r7
 80037ea:	bd80      	pop	{r7, pc}
 80037ec:	00010008 	.word	0x00010008
 80037f0:	00010002 	.word	0x00010002

080037f4 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80037f4:	b580      	push	{r7, lr}
 80037f6:	b084      	sub	sp, #16
 80037f8:	af00      	add	r7, sp, #0
 80037fa:	60f8      	str	r0, [r7, #12]
 80037fc:	60b9      	str	r1, [r7, #8]
 80037fe:	603b      	str	r3, [r7, #0]
 8003800:	4613      	mov	r3, r2
 8003802:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003804:	e025      	b.n	8003852 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003806:	683b      	ldr	r3, [r7, #0]
 8003808:	f1b3 3fff 	cmp.w	r3, #4294967295
 800380c:	d021      	beq.n	8003852 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800380e:	f7fe fa5d 	bl	8001ccc <HAL_GetTick>
 8003812:	4602      	mov	r2, r0
 8003814:	69bb      	ldr	r3, [r7, #24]
 8003816:	1ad3      	subs	r3, r2, r3
 8003818:	683a      	ldr	r2, [r7, #0]
 800381a:	429a      	cmp	r2, r3
 800381c:	d302      	bcc.n	8003824 <I2C_WaitOnFlagUntilTimeout+0x30>
 800381e:	683b      	ldr	r3, [r7, #0]
 8003820:	2b00      	cmp	r3, #0
 8003822:	d116      	bne.n	8003852 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8003824:	68fb      	ldr	r3, [r7, #12]
 8003826:	2200      	movs	r2, #0
 8003828:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 800382a:	68fb      	ldr	r3, [r7, #12]
 800382c:	2220      	movs	r2, #32
 800382e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8003832:	68fb      	ldr	r3, [r7, #12]
 8003834:	2200      	movs	r2, #0
 8003836:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800383a:	68fb      	ldr	r3, [r7, #12]
 800383c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800383e:	f043 0220 	orr.w	r2, r3, #32
 8003842:	68fb      	ldr	r3, [r7, #12]
 8003844:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003846:	68fb      	ldr	r3, [r7, #12]
 8003848:	2200      	movs	r2, #0
 800384a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800384e:	2301      	movs	r3, #1
 8003850:	e023      	b.n	800389a <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003852:	68bb      	ldr	r3, [r7, #8]
 8003854:	0c1b      	lsrs	r3, r3, #16
 8003856:	b2db      	uxtb	r3, r3
 8003858:	2b01      	cmp	r3, #1
 800385a:	d10d      	bne.n	8003878 <I2C_WaitOnFlagUntilTimeout+0x84>
 800385c:	68fb      	ldr	r3, [r7, #12]
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	695b      	ldr	r3, [r3, #20]
 8003862:	43da      	mvns	r2, r3
 8003864:	68bb      	ldr	r3, [r7, #8]
 8003866:	4013      	ands	r3, r2
 8003868:	b29b      	uxth	r3, r3
 800386a:	2b00      	cmp	r3, #0
 800386c:	bf0c      	ite	eq
 800386e:	2301      	moveq	r3, #1
 8003870:	2300      	movne	r3, #0
 8003872:	b2db      	uxtb	r3, r3
 8003874:	461a      	mov	r2, r3
 8003876:	e00c      	b.n	8003892 <I2C_WaitOnFlagUntilTimeout+0x9e>
 8003878:	68fb      	ldr	r3, [r7, #12]
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	699b      	ldr	r3, [r3, #24]
 800387e:	43da      	mvns	r2, r3
 8003880:	68bb      	ldr	r3, [r7, #8]
 8003882:	4013      	ands	r3, r2
 8003884:	b29b      	uxth	r3, r3
 8003886:	2b00      	cmp	r3, #0
 8003888:	bf0c      	ite	eq
 800388a:	2301      	moveq	r3, #1
 800388c:	2300      	movne	r3, #0
 800388e:	b2db      	uxtb	r3, r3
 8003890:	461a      	mov	r2, r3
 8003892:	79fb      	ldrb	r3, [r7, #7]
 8003894:	429a      	cmp	r2, r3
 8003896:	d0b6      	beq.n	8003806 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003898:	2300      	movs	r3, #0
}
 800389a:	4618      	mov	r0, r3
 800389c:	3710      	adds	r7, #16
 800389e:	46bd      	mov	sp, r7
 80038a0:	bd80      	pop	{r7, pc}

080038a2 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80038a2:	b580      	push	{r7, lr}
 80038a4:	b084      	sub	sp, #16
 80038a6:	af00      	add	r7, sp, #0
 80038a8:	60f8      	str	r0, [r7, #12]
 80038aa:	60b9      	str	r1, [r7, #8]
 80038ac:	607a      	str	r2, [r7, #4]
 80038ae:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80038b0:	e051      	b.n	8003956 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80038b2:	68fb      	ldr	r3, [r7, #12]
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	695b      	ldr	r3, [r3, #20]
 80038b8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80038bc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80038c0:	d123      	bne.n	800390a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80038c2:	68fb      	ldr	r3, [r7, #12]
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	681a      	ldr	r2, [r3, #0]
 80038c8:	68fb      	ldr	r3, [r7, #12]
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80038d0:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80038d2:	68fb      	ldr	r3, [r7, #12]
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80038da:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80038dc:	68fb      	ldr	r3, [r7, #12]
 80038de:	2200      	movs	r2, #0
 80038e0:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80038e2:	68fb      	ldr	r3, [r7, #12]
 80038e4:	2220      	movs	r2, #32
 80038e6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80038ea:	68fb      	ldr	r3, [r7, #12]
 80038ec:	2200      	movs	r2, #0
 80038ee:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80038f2:	68fb      	ldr	r3, [r7, #12]
 80038f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038f6:	f043 0204 	orr.w	r2, r3, #4
 80038fa:	68fb      	ldr	r3, [r7, #12]
 80038fc:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80038fe:	68fb      	ldr	r3, [r7, #12]
 8003900:	2200      	movs	r2, #0
 8003902:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003906:	2301      	movs	r3, #1
 8003908:	e046      	b.n	8003998 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003910:	d021      	beq.n	8003956 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003912:	f7fe f9db 	bl	8001ccc <HAL_GetTick>
 8003916:	4602      	mov	r2, r0
 8003918:	683b      	ldr	r3, [r7, #0]
 800391a:	1ad3      	subs	r3, r2, r3
 800391c:	687a      	ldr	r2, [r7, #4]
 800391e:	429a      	cmp	r2, r3
 8003920:	d302      	bcc.n	8003928 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	2b00      	cmp	r3, #0
 8003926:	d116      	bne.n	8003956 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003928:	68fb      	ldr	r3, [r7, #12]
 800392a:	2200      	movs	r2, #0
 800392c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800392e:	68fb      	ldr	r3, [r7, #12]
 8003930:	2220      	movs	r2, #32
 8003932:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003936:	68fb      	ldr	r3, [r7, #12]
 8003938:	2200      	movs	r2, #0
 800393a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800393e:	68fb      	ldr	r3, [r7, #12]
 8003940:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003942:	f043 0220 	orr.w	r2, r3, #32
 8003946:	68fb      	ldr	r3, [r7, #12]
 8003948:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800394a:	68fb      	ldr	r3, [r7, #12]
 800394c:	2200      	movs	r2, #0
 800394e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003952:	2301      	movs	r3, #1
 8003954:	e020      	b.n	8003998 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003956:	68bb      	ldr	r3, [r7, #8]
 8003958:	0c1b      	lsrs	r3, r3, #16
 800395a:	b2db      	uxtb	r3, r3
 800395c:	2b01      	cmp	r3, #1
 800395e:	d10c      	bne.n	800397a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8003960:	68fb      	ldr	r3, [r7, #12]
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	695b      	ldr	r3, [r3, #20]
 8003966:	43da      	mvns	r2, r3
 8003968:	68bb      	ldr	r3, [r7, #8]
 800396a:	4013      	ands	r3, r2
 800396c:	b29b      	uxth	r3, r3
 800396e:	2b00      	cmp	r3, #0
 8003970:	bf14      	ite	ne
 8003972:	2301      	movne	r3, #1
 8003974:	2300      	moveq	r3, #0
 8003976:	b2db      	uxtb	r3, r3
 8003978:	e00b      	b.n	8003992 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 800397a:	68fb      	ldr	r3, [r7, #12]
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	699b      	ldr	r3, [r3, #24]
 8003980:	43da      	mvns	r2, r3
 8003982:	68bb      	ldr	r3, [r7, #8]
 8003984:	4013      	ands	r3, r2
 8003986:	b29b      	uxth	r3, r3
 8003988:	2b00      	cmp	r3, #0
 800398a:	bf14      	ite	ne
 800398c:	2301      	movne	r3, #1
 800398e:	2300      	moveq	r3, #0
 8003990:	b2db      	uxtb	r3, r3
 8003992:	2b00      	cmp	r3, #0
 8003994:	d18d      	bne.n	80038b2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8003996:	2300      	movs	r3, #0
}
 8003998:	4618      	mov	r0, r3
 800399a:	3710      	adds	r7, #16
 800399c:	46bd      	mov	sp, r7
 800399e:	bd80      	pop	{r7, pc}

080039a0 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80039a0:	b580      	push	{r7, lr}
 80039a2:	b084      	sub	sp, #16
 80039a4:	af00      	add	r7, sp, #0
 80039a6:	60f8      	str	r0, [r7, #12]
 80039a8:	60b9      	str	r1, [r7, #8]
 80039aa:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80039ac:	e02d      	b.n	8003a0a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80039ae:	68f8      	ldr	r0, [r7, #12]
 80039b0:	f000 f8ce 	bl	8003b50 <I2C_IsAcknowledgeFailed>
 80039b4:	4603      	mov	r3, r0
 80039b6:	2b00      	cmp	r3, #0
 80039b8:	d001      	beq.n	80039be <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80039ba:	2301      	movs	r3, #1
 80039bc:	e02d      	b.n	8003a1a <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80039be:	68bb      	ldr	r3, [r7, #8]
 80039c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80039c4:	d021      	beq.n	8003a0a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80039c6:	f7fe f981 	bl	8001ccc <HAL_GetTick>
 80039ca:	4602      	mov	r2, r0
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	1ad3      	subs	r3, r2, r3
 80039d0:	68ba      	ldr	r2, [r7, #8]
 80039d2:	429a      	cmp	r2, r3
 80039d4:	d302      	bcc.n	80039dc <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80039d6:	68bb      	ldr	r3, [r7, #8]
 80039d8:	2b00      	cmp	r3, #0
 80039da:	d116      	bne.n	8003a0a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80039dc:	68fb      	ldr	r3, [r7, #12]
 80039de:	2200      	movs	r2, #0
 80039e0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80039e2:	68fb      	ldr	r3, [r7, #12]
 80039e4:	2220      	movs	r2, #32
 80039e6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80039ea:	68fb      	ldr	r3, [r7, #12]
 80039ec:	2200      	movs	r2, #0
 80039ee:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80039f2:	68fb      	ldr	r3, [r7, #12]
 80039f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039f6:	f043 0220 	orr.w	r2, r3, #32
 80039fa:	68fb      	ldr	r3, [r7, #12]
 80039fc:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80039fe:	68fb      	ldr	r3, [r7, #12]
 8003a00:	2200      	movs	r2, #0
 8003a02:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003a06:	2301      	movs	r3, #1
 8003a08:	e007      	b.n	8003a1a <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003a0a:	68fb      	ldr	r3, [r7, #12]
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	695b      	ldr	r3, [r3, #20]
 8003a10:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003a14:	2b80      	cmp	r3, #128	; 0x80
 8003a16:	d1ca      	bne.n	80039ae <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003a18:	2300      	movs	r3, #0
}
 8003a1a:	4618      	mov	r0, r3
 8003a1c:	3710      	adds	r7, #16
 8003a1e:	46bd      	mov	sp, r7
 8003a20:	bd80      	pop	{r7, pc}

08003a22 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003a22:	b580      	push	{r7, lr}
 8003a24:	b084      	sub	sp, #16
 8003a26:	af00      	add	r7, sp, #0
 8003a28:	60f8      	str	r0, [r7, #12]
 8003a2a:	60b9      	str	r1, [r7, #8]
 8003a2c:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003a2e:	e02d      	b.n	8003a8c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003a30:	68f8      	ldr	r0, [r7, #12]
 8003a32:	f000 f88d 	bl	8003b50 <I2C_IsAcknowledgeFailed>
 8003a36:	4603      	mov	r3, r0
 8003a38:	2b00      	cmp	r3, #0
 8003a3a:	d001      	beq.n	8003a40 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003a3c:	2301      	movs	r3, #1
 8003a3e:	e02d      	b.n	8003a9c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003a40:	68bb      	ldr	r3, [r7, #8]
 8003a42:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003a46:	d021      	beq.n	8003a8c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003a48:	f7fe f940 	bl	8001ccc <HAL_GetTick>
 8003a4c:	4602      	mov	r2, r0
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	1ad3      	subs	r3, r2, r3
 8003a52:	68ba      	ldr	r2, [r7, #8]
 8003a54:	429a      	cmp	r2, r3
 8003a56:	d302      	bcc.n	8003a5e <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8003a58:	68bb      	ldr	r3, [r7, #8]
 8003a5a:	2b00      	cmp	r3, #0
 8003a5c:	d116      	bne.n	8003a8c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003a5e:	68fb      	ldr	r3, [r7, #12]
 8003a60:	2200      	movs	r2, #0
 8003a62:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003a64:	68fb      	ldr	r3, [r7, #12]
 8003a66:	2220      	movs	r2, #32
 8003a68:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003a6c:	68fb      	ldr	r3, [r7, #12]
 8003a6e:	2200      	movs	r2, #0
 8003a70:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003a74:	68fb      	ldr	r3, [r7, #12]
 8003a76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a78:	f043 0220 	orr.w	r2, r3, #32
 8003a7c:	68fb      	ldr	r3, [r7, #12]
 8003a7e:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003a80:	68fb      	ldr	r3, [r7, #12]
 8003a82:	2200      	movs	r2, #0
 8003a84:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003a88:	2301      	movs	r3, #1
 8003a8a:	e007      	b.n	8003a9c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003a8c:	68fb      	ldr	r3, [r7, #12]
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	695b      	ldr	r3, [r3, #20]
 8003a92:	f003 0304 	and.w	r3, r3, #4
 8003a96:	2b04      	cmp	r3, #4
 8003a98:	d1ca      	bne.n	8003a30 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003a9a:	2300      	movs	r3, #0
}
 8003a9c:	4618      	mov	r0, r3
 8003a9e:	3710      	adds	r7, #16
 8003aa0:	46bd      	mov	sp, r7
 8003aa2:	bd80      	pop	{r7, pc}

08003aa4 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003aa4:	b580      	push	{r7, lr}
 8003aa6:	b084      	sub	sp, #16
 8003aa8:	af00      	add	r7, sp, #0
 8003aaa:	60f8      	str	r0, [r7, #12]
 8003aac:	60b9      	str	r1, [r7, #8]
 8003aae:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003ab0:	e042      	b.n	8003b38 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8003ab2:	68fb      	ldr	r3, [r7, #12]
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	695b      	ldr	r3, [r3, #20]
 8003ab8:	f003 0310 	and.w	r3, r3, #16
 8003abc:	2b10      	cmp	r3, #16
 8003abe:	d119      	bne.n	8003af4 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003ac0:	68fb      	ldr	r3, [r7, #12]
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	f06f 0210 	mvn.w	r2, #16
 8003ac8:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003aca:	68fb      	ldr	r3, [r7, #12]
 8003acc:	2200      	movs	r2, #0
 8003ace:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003ad0:	68fb      	ldr	r3, [r7, #12]
 8003ad2:	2220      	movs	r2, #32
 8003ad4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003ad8:	68fb      	ldr	r3, [r7, #12]
 8003ada:	2200      	movs	r2, #0
 8003adc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8003ae0:	68fb      	ldr	r3, [r7, #12]
 8003ae2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003ae4:	68fb      	ldr	r3, [r7, #12]
 8003ae6:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003ae8:	68fb      	ldr	r3, [r7, #12]
 8003aea:	2200      	movs	r2, #0
 8003aec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003af0:	2301      	movs	r3, #1
 8003af2:	e029      	b.n	8003b48 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003af4:	f7fe f8ea 	bl	8001ccc <HAL_GetTick>
 8003af8:	4602      	mov	r2, r0
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	1ad3      	subs	r3, r2, r3
 8003afe:	68ba      	ldr	r2, [r7, #8]
 8003b00:	429a      	cmp	r2, r3
 8003b02:	d302      	bcc.n	8003b0a <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8003b04:	68bb      	ldr	r3, [r7, #8]
 8003b06:	2b00      	cmp	r3, #0
 8003b08:	d116      	bne.n	8003b38 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8003b0a:	68fb      	ldr	r3, [r7, #12]
 8003b0c:	2200      	movs	r2, #0
 8003b0e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003b10:	68fb      	ldr	r3, [r7, #12]
 8003b12:	2220      	movs	r2, #32
 8003b14:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003b18:	68fb      	ldr	r3, [r7, #12]
 8003b1a:	2200      	movs	r2, #0
 8003b1c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003b20:	68fb      	ldr	r3, [r7, #12]
 8003b22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b24:	f043 0220 	orr.w	r2, r3, #32
 8003b28:	68fb      	ldr	r3, [r7, #12]
 8003b2a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003b2c:	68fb      	ldr	r3, [r7, #12]
 8003b2e:	2200      	movs	r2, #0
 8003b30:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003b34:	2301      	movs	r3, #1
 8003b36:	e007      	b.n	8003b48 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003b38:	68fb      	ldr	r3, [r7, #12]
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	695b      	ldr	r3, [r3, #20]
 8003b3e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003b42:	2b40      	cmp	r3, #64	; 0x40
 8003b44:	d1b5      	bne.n	8003ab2 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8003b46:	2300      	movs	r3, #0
}
 8003b48:	4618      	mov	r0, r3
 8003b4a:	3710      	adds	r7, #16
 8003b4c:	46bd      	mov	sp, r7
 8003b4e:	bd80      	pop	{r7, pc}

08003b50 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8003b50:	b480      	push	{r7}
 8003b52:	b083      	sub	sp, #12
 8003b54:	af00      	add	r7, sp, #0
 8003b56:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	695b      	ldr	r3, [r3, #20]
 8003b5e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003b62:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003b66:	d11b      	bne.n	8003ba0 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003b70:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	2200      	movs	r2, #0
 8003b76:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	2220      	movs	r2, #32
 8003b7c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	2200      	movs	r2, #0
 8003b84:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b8c:	f043 0204 	orr.w	r2, r3, #4
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	2200      	movs	r2, #0
 8003b98:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8003b9c:	2301      	movs	r3, #1
 8003b9e:	e000      	b.n	8003ba2 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8003ba0:	2300      	movs	r3, #0
}
 8003ba2:	4618      	mov	r0, r3
 8003ba4:	370c      	adds	r7, #12
 8003ba6:	46bd      	mov	sp, r7
 8003ba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bac:	4770      	bx	lr

08003bae <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter new state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8003bae:	b480      	push	{r7}
 8003bb0:	b083      	sub	sp, #12
 8003bb2:	af00      	add	r7, sp, #0
 8003bb4:	6078      	str	r0, [r7, #4]
 8003bb6:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003bbe:	b2db      	uxtb	r3, r3
 8003bc0:	2b20      	cmp	r3, #32
 8003bc2:	d129      	bne.n	8003c18 <HAL_I2CEx_ConfigAnalogFilter+0x6a>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	2224      	movs	r2, #36	; 0x24
 8003bc8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	681a      	ldr	r2, [r3, #0]
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	f022 0201 	bic.w	r2, r2, #1
 8003bda:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->FLTR &= ~(I2C_FLTR_ANOFF);
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	f022 0210 	bic.w	r2, r2, #16
 8003bea:	625a      	str	r2, [r3, #36]	; 0x24

    /* Disable the analog filter */
    hi2c->Instance->FLTR |= AnalogFilter;
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	683a      	ldr	r2, [r7, #0]
 8003bf8:	430a      	orrs	r2, r1
 8003bfa:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	681a      	ldr	r2, [r3, #0]
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	f042 0201 	orr.w	r2, r2, #1
 8003c0a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	2220      	movs	r2, #32
 8003c10:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8003c14:	2300      	movs	r3, #0
 8003c16:	e000      	b.n	8003c1a <HAL_I2CEx_ConfigAnalogFilter+0x6c>
  }
  else
  {
    return HAL_BUSY;
 8003c18:	2302      	movs	r3, #2
  }
}
 8003c1a:	4618      	mov	r0, r3
 8003c1c:	370c      	adds	r7, #12
 8003c1e:	46bd      	mov	sp, r7
 8003c20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c24:	4770      	bx	lr

08003c26 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between 0x00 and 0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8003c26:	b480      	push	{r7}
 8003c28:	b085      	sub	sp, #20
 8003c2a:	af00      	add	r7, sp, #0
 8003c2c:	6078      	str	r0, [r7, #4]
 8003c2e:	6039      	str	r1, [r7, #0]
  uint16_t tmpreg = 0;
 8003c30:	2300      	movs	r3, #0
 8003c32:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003c3a:	b2db      	uxtb	r3, r3
 8003c3c:	2b20      	cmp	r3, #32
 8003c3e:	d12a      	bne.n	8003c96 <HAL_I2CEx_ConfigDigitalFilter+0x70>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	2224      	movs	r2, #36	; 0x24
 8003c44:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	681a      	ldr	r2, [r3, #0]
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	f022 0201 	bic.w	r2, r2, #1
 8003c56:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->FLTR;
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c5e:	81fb      	strh	r3, [r7, #14]

    /* Reset I2Cx DNF bit [3:0] */
    tmpreg &= ~(I2C_FLTR_DNF);
 8003c60:	89fb      	ldrh	r3, [r7, #14]
 8003c62:	f023 030f 	bic.w	r3, r3, #15
 8003c66:	81fb      	strh	r3, [r7, #14]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter;
 8003c68:	683b      	ldr	r3, [r7, #0]
 8003c6a:	b29a      	uxth	r2, r3
 8003c6c:	89fb      	ldrh	r3, [r7, #14]
 8003c6e:	4313      	orrs	r3, r2
 8003c70:	81fb      	strh	r3, [r7, #14]

    /* Store the new register value */
    hi2c->Instance->FLTR = tmpreg;
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	89fa      	ldrh	r2, [r7, #14]
 8003c78:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	681a      	ldr	r2, [r3, #0]
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	f042 0201 	orr.w	r2, r2, #1
 8003c88:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	2220      	movs	r2, #32
 8003c8e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8003c92:	2300      	movs	r3, #0
 8003c94:	e000      	b.n	8003c98 <HAL_I2CEx_ConfigDigitalFilter+0x72>
  }
  else
  {
    return HAL_BUSY;
 8003c96:	2302      	movs	r3, #2
  }
}
 8003c98:	4618      	mov	r0, r3
 8003c9a:	3714      	adds	r7, #20
 8003c9c:	46bd      	mov	sp, r7
 8003c9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ca2:	4770      	bx	lr

08003ca4 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8003ca4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003ca6:	b08f      	sub	sp, #60	; 0x3c
 8003ca8:	af0a      	add	r7, sp, #40	; 0x28
 8003caa:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	2b00      	cmp	r3, #0
 8003cb0:	d101      	bne.n	8003cb6 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8003cb2:	2301      	movs	r3, #1
 8003cb4:	e10f      	b.n	8003ed6 <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8003cc2:	b2db      	uxtb	r3, r3
 8003cc4:	2b00      	cmp	r3, #0
 8003cc6:	d106      	bne.n	8003cd6 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	2200      	movs	r2, #0
 8003ccc:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8003cd0:	6878      	ldr	r0, [r7, #4]
 8003cd2:	f7fd fecb 	bl	8001a6c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	2203      	movs	r2, #3
 8003cda:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8003cde:	68bb      	ldr	r3, [r7, #8]
 8003ce0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003ce2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003ce6:	2b00      	cmp	r3, #0
 8003ce8:	d102      	bne.n	8003cf0 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	2200      	movs	r2, #0
 8003cee:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	4618      	mov	r0, r3
 8003cf6:	f001 fe72 	bl	80059de <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	603b      	str	r3, [r7, #0]
 8003d00:	687e      	ldr	r6, [r7, #4]
 8003d02:	466d      	mov	r5, sp
 8003d04:	f106 0410 	add.w	r4, r6, #16
 8003d08:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003d0a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003d0c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003d0e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003d10:	e894 0003 	ldmia.w	r4, {r0, r1}
 8003d14:	e885 0003 	stmia.w	r5, {r0, r1}
 8003d18:	1d33      	adds	r3, r6, #4
 8003d1a:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003d1c:	6838      	ldr	r0, [r7, #0]
 8003d1e:	f001 fdfd 	bl	800591c <USB_CoreInit>
 8003d22:	4603      	mov	r3, r0
 8003d24:	2b00      	cmp	r3, #0
 8003d26:	d005      	beq.n	8003d34 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	2202      	movs	r2, #2
 8003d2c:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8003d30:	2301      	movs	r3, #1
 8003d32:	e0d0      	b.n	8003ed6 <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	2100      	movs	r1, #0
 8003d3a:	4618      	mov	r0, r3
 8003d3c:	f001 fe60 	bl	8005a00 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003d40:	2300      	movs	r3, #0
 8003d42:	73fb      	strb	r3, [r7, #15]
 8003d44:	e04a      	b.n	8003ddc <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8003d46:	7bfa      	ldrb	r2, [r7, #15]
 8003d48:	6879      	ldr	r1, [r7, #4]
 8003d4a:	4613      	mov	r3, r2
 8003d4c:	00db      	lsls	r3, r3, #3
 8003d4e:	4413      	add	r3, r2
 8003d50:	009b      	lsls	r3, r3, #2
 8003d52:	440b      	add	r3, r1
 8003d54:	333d      	adds	r3, #61	; 0x3d
 8003d56:	2201      	movs	r2, #1
 8003d58:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8003d5a:	7bfa      	ldrb	r2, [r7, #15]
 8003d5c:	6879      	ldr	r1, [r7, #4]
 8003d5e:	4613      	mov	r3, r2
 8003d60:	00db      	lsls	r3, r3, #3
 8003d62:	4413      	add	r3, r2
 8003d64:	009b      	lsls	r3, r3, #2
 8003d66:	440b      	add	r3, r1
 8003d68:	333c      	adds	r3, #60	; 0x3c
 8003d6a:	7bfa      	ldrb	r2, [r7, #15]
 8003d6c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8003d6e:	7bfa      	ldrb	r2, [r7, #15]
 8003d70:	7bfb      	ldrb	r3, [r7, #15]
 8003d72:	b298      	uxth	r0, r3
 8003d74:	6879      	ldr	r1, [r7, #4]
 8003d76:	4613      	mov	r3, r2
 8003d78:	00db      	lsls	r3, r3, #3
 8003d7a:	4413      	add	r3, r2
 8003d7c:	009b      	lsls	r3, r3, #2
 8003d7e:	440b      	add	r3, r1
 8003d80:	3344      	adds	r3, #68	; 0x44
 8003d82:	4602      	mov	r2, r0
 8003d84:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8003d86:	7bfa      	ldrb	r2, [r7, #15]
 8003d88:	6879      	ldr	r1, [r7, #4]
 8003d8a:	4613      	mov	r3, r2
 8003d8c:	00db      	lsls	r3, r3, #3
 8003d8e:	4413      	add	r3, r2
 8003d90:	009b      	lsls	r3, r3, #2
 8003d92:	440b      	add	r3, r1
 8003d94:	3340      	adds	r3, #64	; 0x40
 8003d96:	2200      	movs	r2, #0
 8003d98:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8003d9a:	7bfa      	ldrb	r2, [r7, #15]
 8003d9c:	6879      	ldr	r1, [r7, #4]
 8003d9e:	4613      	mov	r3, r2
 8003da0:	00db      	lsls	r3, r3, #3
 8003da2:	4413      	add	r3, r2
 8003da4:	009b      	lsls	r3, r3, #2
 8003da6:	440b      	add	r3, r1
 8003da8:	3348      	adds	r3, #72	; 0x48
 8003daa:	2200      	movs	r2, #0
 8003dac:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8003dae:	7bfa      	ldrb	r2, [r7, #15]
 8003db0:	6879      	ldr	r1, [r7, #4]
 8003db2:	4613      	mov	r3, r2
 8003db4:	00db      	lsls	r3, r3, #3
 8003db6:	4413      	add	r3, r2
 8003db8:	009b      	lsls	r3, r3, #2
 8003dba:	440b      	add	r3, r1
 8003dbc:	334c      	adds	r3, #76	; 0x4c
 8003dbe:	2200      	movs	r2, #0
 8003dc0:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8003dc2:	7bfa      	ldrb	r2, [r7, #15]
 8003dc4:	6879      	ldr	r1, [r7, #4]
 8003dc6:	4613      	mov	r3, r2
 8003dc8:	00db      	lsls	r3, r3, #3
 8003dca:	4413      	add	r3, r2
 8003dcc:	009b      	lsls	r3, r3, #2
 8003dce:	440b      	add	r3, r1
 8003dd0:	3354      	adds	r3, #84	; 0x54
 8003dd2:	2200      	movs	r2, #0
 8003dd4:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003dd6:	7bfb      	ldrb	r3, [r7, #15]
 8003dd8:	3301      	adds	r3, #1
 8003dda:	73fb      	strb	r3, [r7, #15]
 8003ddc:	7bfa      	ldrb	r2, [r7, #15]
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	685b      	ldr	r3, [r3, #4]
 8003de2:	429a      	cmp	r2, r3
 8003de4:	d3af      	bcc.n	8003d46 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003de6:	2300      	movs	r3, #0
 8003de8:	73fb      	strb	r3, [r7, #15]
 8003dea:	e044      	b.n	8003e76 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8003dec:	7bfa      	ldrb	r2, [r7, #15]
 8003dee:	6879      	ldr	r1, [r7, #4]
 8003df0:	4613      	mov	r3, r2
 8003df2:	00db      	lsls	r3, r3, #3
 8003df4:	4413      	add	r3, r2
 8003df6:	009b      	lsls	r3, r3, #2
 8003df8:	440b      	add	r3, r1
 8003dfa:	f203 237d 	addw	r3, r3, #637	; 0x27d
 8003dfe:	2200      	movs	r2, #0
 8003e00:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8003e02:	7bfa      	ldrb	r2, [r7, #15]
 8003e04:	6879      	ldr	r1, [r7, #4]
 8003e06:	4613      	mov	r3, r2
 8003e08:	00db      	lsls	r3, r3, #3
 8003e0a:	4413      	add	r3, r2
 8003e0c:	009b      	lsls	r3, r3, #2
 8003e0e:	440b      	add	r3, r1
 8003e10:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 8003e14:	7bfa      	ldrb	r2, [r7, #15]
 8003e16:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8003e18:	7bfa      	ldrb	r2, [r7, #15]
 8003e1a:	6879      	ldr	r1, [r7, #4]
 8003e1c:	4613      	mov	r3, r2
 8003e1e:	00db      	lsls	r3, r3, #3
 8003e20:	4413      	add	r3, r2
 8003e22:	009b      	lsls	r3, r3, #2
 8003e24:	440b      	add	r3, r1
 8003e26:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8003e2a:	2200      	movs	r2, #0
 8003e2c:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8003e2e:	7bfa      	ldrb	r2, [r7, #15]
 8003e30:	6879      	ldr	r1, [r7, #4]
 8003e32:	4613      	mov	r3, r2
 8003e34:	00db      	lsls	r3, r3, #3
 8003e36:	4413      	add	r3, r2
 8003e38:	009b      	lsls	r3, r3, #2
 8003e3a:	440b      	add	r3, r1
 8003e3c:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8003e40:	2200      	movs	r2, #0
 8003e42:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8003e44:	7bfa      	ldrb	r2, [r7, #15]
 8003e46:	6879      	ldr	r1, [r7, #4]
 8003e48:	4613      	mov	r3, r2
 8003e4a:	00db      	lsls	r3, r3, #3
 8003e4c:	4413      	add	r3, r2
 8003e4e:	009b      	lsls	r3, r3, #2
 8003e50:	440b      	add	r3, r1
 8003e52:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8003e56:	2200      	movs	r2, #0
 8003e58:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8003e5a:	7bfa      	ldrb	r2, [r7, #15]
 8003e5c:	6879      	ldr	r1, [r7, #4]
 8003e5e:	4613      	mov	r3, r2
 8003e60:	00db      	lsls	r3, r3, #3
 8003e62:	4413      	add	r3, r2
 8003e64:	009b      	lsls	r3, r3, #2
 8003e66:	440b      	add	r3, r1
 8003e68:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8003e6c:	2200      	movs	r2, #0
 8003e6e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003e70:	7bfb      	ldrb	r3, [r7, #15]
 8003e72:	3301      	adds	r3, #1
 8003e74:	73fb      	strb	r3, [r7, #15]
 8003e76:	7bfa      	ldrb	r2, [r7, #15]
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	685b      	ldr	r3, [r3, #4]
 8003e7c:	429a      	cmp	r2, r3
 8003e7e:	d3b5      	bcc.n	8003dec <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	603b      	str	r3, [r7, #0]
 8003e86:	687e      	ldr	r6, [r7, #4]
 8003e88:	466d      	mov	r5, sp
 8003e8a:	f106 0410 	add.w	r4, r6, #16
 8003e8e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003e90:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003e92:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003e94:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003e96:	e894 0003 	ldmia.w	r4, {r0, r1}
 8003e9a:	e885 0003 	stmia.w	r5, {r0, r1}
 8003e9e:	1d33      	adds	r3, r6, #4
 8003ea0:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003ea2:	6838      	ldr	r0, [r7, #0]
 8003ea4:	f001 fdf8 	bl	8005a98 <USB_DevInit>
 8003ea8:	4603      	mov	r3, r0
 8003eaa:	2b00      	cmp	r3, #0
 8003eac:	d005      	beq.n	8003eba <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	2202      	movs	r2, #2
 8003eb2:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8003eb6:	2301      	movs	r3, #1
 8003eb8:	e00d      	b.n	8003ed6 <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	2200      	movs	r2, #0
 8003ebe:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	2201      	movs	r2, #1
 8003ec6:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	4618      	mov	r0, r3
 8003ed0:	f001 ffc3 	bl	8005e5a <USB_DevDisconnect>

  return HAL_OK;
 8003ed4:	2300      	movs	r3, #0
}
 8003ed6:	4618      	mov	r0, r3
 8003ed8:	3714      	adds	r7, #20
 8003eda:	46bd      	mov	sp, r7
 8003edc:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

08003ee0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003ee0:	b580      	push	{r7, lr}
 8003ee2:	b086      	sub	sp, #24
 8003ee4:	af00      	add	r7, sp, #0
 8003ee6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	2b00      	cmp	r3, #0
 8003eec:	d101      	bne.n	8003ef2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003eee:	2301      	movs	r3, #1
 8003ef0:	e267      	b.n	80043c2 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	f003 0301 	and.w	r3, r3, #1
 8003efa:	2b00      	cmp	r3, #0
 8003efc:	d075      	beq.n	8003fea <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003efe:	4b88      	ldr	r3, [pc, #544]	; (8004120 <HAL_RCC_OscConfig+0x240>)
 8003f00:	689b      	ldr	r3, [r3, #8]
 8003f02:	f003 030c 	and.w	r3, r3, #12
 8003f06:	2b04      	cmp	r3, #4
 8003f08:	d00c      	beq.n	8003f24 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003f0a:	4b85      	ldr	r3, [pc, #532]	; (8004120 <HAL_RCC_OscConfig+0x240>)
 8003f0c:	689b      	ldr	r3, [r3, #8]
 8003f0e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003f12:	2b08      	cmp	r3, #8
 8003f14:	d112      	bne.n	8003f3c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003f16:	4b82      	ldr	r3, [pc, #520]	; (8004120 <HAL_RCC_OscConfig+0x240>)
 8003f18:	685b      	ldr	r3, [r3, #4]
 8003f1a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003f1e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003f22:	d10b      	bne.n	8003f3c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003f24:	4b7e      	ldr	r3, [pc, #504]	; (8004120 <HAL_RCC_OscConfig+0x240>)
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003f2c:	2b00      	cmp	r3, #0
 8003f2e:	d05b      	beq.n	8003fe8 <HAL_RCC_OscConfig+0x108>
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	685b      	ldr	r3, [r3, #4]
 8003f34:	2b00      	cmp	r3, #0
 8003f36:	d157      	bne.n	8003fe8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003f38:	2301      	movs	r3, #1
 8003f3a:	e242      	b.n	80043c2 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	685b      	ldr	r3, [r3, #4]
 8003f40:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003f44:	d106      	bne.n	8003f54 <HAL_RCC_OscConfig+0x74>
 8003f46:	4b76      	ldr	r3, [pc, #472]	; (8004120 <HAL_RCC_OscConfig+0x240>)
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	4a75      	ldr	r2, [pc, #468]	; (8004120 <HAL_RCC_OscConfig+0x240>)
 8003f4c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003f50:	6013      	str	r3, [r2, #0]
 8003f52:	e01d      	b.n	8003f90 <HAL_RCC_OscConfig+0xb0>
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	685b      	ldr	r3, [r3, #4]
 8003f58:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003f5c:	d10c      	bne.n	8003f78 <HAL_RCC_OscConfig+0x98>
 8003f5e:	4b70      	ldr	r3, [pc, #448]	; (8004120 <HAL_RCC_OscConfig+0x240>)
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	4a6f      	ldr	r2, [pc, #444]	; (8004120 <HAL_RCC_OscConfig+0x240>)
 8003f64:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003f68:	6013      	str	r3, [r2, #0]
 8003f6a:	4b6d      	ldr	r3, [pc, #436]	; (8004120 <HAL_RCC_OscConfig+0x240>)
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	4a6c      	ldr	r2, [pc, #432]	; (8004120 <HAL_RCC_OscConfig+0x240>)
 8003f70:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003f74:	6013      	str	r3, [r2, #0]
 8003f76:	e00b      	b.n	8003f90 <HAL_RCC_OscConfig+0xb0>
 8003f78:	4b69      	ldr	r3, [pc, #420]	; (8004120 <HAL_RCC_OscConfig+0x240>)
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	4a68      	ldr	r2, [pc, #416]	; (8004120 <HAL_RCC_OscConfig+0x240>)
 8003f7e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003f82:	6013      	str	r3, [r2, #0]
 8003f84:	4b66      	ldr	r3, [pc, #408]	; (8004120 <HAL_RCC_OscConfig+0x240>)
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	4a65      	ldr	r2, [pc, #404]	; (8004120 <HAL_RCC_OscConfig+0x240>)
 8003f8a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003f8e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	685b      	ldr	r3, [r3, #4]
 8003f94:	2b00      	cmp	r3, #0
 8003f96:	d013      	beq.n	8003fc0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003f98:	f7fd fe98 	bl	8001ccc <HAL_GetTick>
 8003f9c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003f9e:	e008      	b.n	8003fb2 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003fa0:	f7fd fe94 	bl	8001ccc <HAL_GetTick>
 8003fa4:	4602      	mov	r2, r0
 8003fa6:	693b      	ldr	r3, [r7, #16]
 8003fa8:	1ad3      	subs	r3, r2, r3
 8003faa:	2b64      	cmp	r3, #100	; 0x64
 8003fac:	d901      	bls.n	8003fb2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003fae:	2303      	movs	r3, #3
 8003fb0:	e207      	b.n	80043c2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003fb2:	4b5b      	ldr	r3, [pc, #364]	; (8004120 <HAL_RCC_OscConfig+0x240>)
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003fba:	2b00      	cmp	r3, #0
 8003fbc:	d0f0      	beq.n	8003fa0 <HAL_RCC_OscConfig+0xc0>
 8003fbe:	e014      	b.n	8003fea <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003fc0:	f7fd fe84 	bl	8001ccc <HAL_GetTick>
 8003fc4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003fc6:	e008      	b.n	8003fda <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003fc8:	f7fd fe80 	bl	8001ccc <HAL_GetTick>
 8003fcc:	4602      	mov	r2, r0
 8003fce:	693b      	ldr	r3, [r7, #16]
 8003fd0:	1ad3      	subs	r3, r2, r3
 8003fd2:	2b64      	cmp	r3, #100	; 0x64
 8003fd4:	d901      	bls.n	8003fda <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003fd6:	2303      	movs	r3, #3
 8003fd8:	e1f3      	b.n	80043c2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003fda:	4b51      	ldr	r3, [pc, #324]	; (8004120 <HAL_RCC_OscConfig+0x240>)
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003fe2:	2b00      	cmp	r3, #0
 8003fe4:	d1f0      	bne.n	8003fc8 <HAL_RCC_OscConfig+0xe8>
 8003fe6:	e000      	b.n	8003fea <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003fe8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	f003 0302 	and.w	r3, r3, #2
 8003ff2:	2b00      	cmp	r3, #0
 8003ff4:	d063      	beq.n	80040be <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003ff6:	4b4a      	ldr	r3, [pc, #296]	; (8004120 <HAL_RCC_OscConfig+0x240>)
 8003ff8:	689b      	ldr	r3, [r3, #8]
 8003ffa:	f003 030c 	and.w	r3, r3, #12
 8003ffe:	2b00      	cmp	r3, #0
 8004000:	d00b      	beq.n	800401a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004002:	4b47      	ldr	r3, [pc, #284]	; (8004120 <HAL_RCC_OscConfig+0x240>)
 8004004:	689b      	ldr	r3, [r3, #8]
 8004006:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800400a:	2b08      	cmp	r3, #8
 800400c:	d11c      	bne.n	8004048 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800400e:	4b44      	ldr	r3, [pc, #272]	; (8004120 <HAL_RCC_OscConfig+0x240>)
 8004010:	685b      	ldr	r3, [r3, #4]
 8004012:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004016:	2b00      	cmp	r3, #0
 8004018:	d116      	bne.n	8004048 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800401a:	4b41      	ldr	r3, [pc, #260]	; (8004120 <HAL_RCC_OscConfig+0x240>)
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	f003 0302 	and.w	r3, r3, #2
 8004022:	2b00      	cmp	r3, #0
 8004024:	d005      	beq.n	8004032 <HAL_RCC_OscConfig+0x152>
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	68db      	ldr	r3, [r3, #12]
 800402a:	2b01      	cmp	r3, #1
 800402c:	d001      	beq.n	8004032 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800402e:	2301      	movs	r3, #1
 8004030:	e1c7      	b.n	80043c2 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004032:	4b3b      	ldr	r3, [pc, #236]	; (8004120 <HAL_RCC_OscConfig+0x240>)
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	691b      	ldr	r3, [r3, #16]
 800403e:	00db      	lsls	r3, r3, #3
 8004040:	4937      	ldr	r1, [pc, #220]	; (8004120 <HAL_RCC_OscConfig+0x240>)
 8004042:	4313      	orrs	r3, r2
 8004044:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004046:	e03a      	b.n	80040be <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	68db      	ldr	r3, [r3, #12]
 800404c:	2b00      	cmp	r3, #0
 800404e:	d020      	beq.n	8004092 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004050:	4b34      	ldr	r3, [pc, #208]	; (8004124 <HAL_RCC_OscConfig+0x244>)
 8004052:	2201      	movs	r2, #1
 8004054:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004056:	f7fd fe39 	bl	8001ccc <HAL_GetTick>
 800405a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800405c:	e008      	b.n	8004070 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800405e:	f7fd fe35 	bl	8001ccc <HAL_GetTick>
 8004062:	4602      	mov	r2, r0
 8004064:	693b      	ldr	r3, [r7, #16]
 8004066:	1ad3      	subs	r3, r2, r3
 8004068:	2b02      	cmp	r3, #2
 800406a:	d901      	bls.n	8004070 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800406c:	2303      	movs	r3, #3
 800406e:	e1a8      	b.n	80043c2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004070:	4b2b      	ldr	r3, [pc, #172]	; (8004120 <HAL_RCC_OscConfig+0x240>)
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	f003 0302 	and.w	r3, r3, #2
 8004078:	2b00      	cmp	r3, #0
 800407a:	d0f0      	beq.n	800405e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800407c:	4b28      	ldr	r3, [pc, #160]	; (8004120 <HAL_RCC_OscConfig+0x240>)
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	691b      	ldr	r3, [r3, #16]
 8004088:	00db      	lsls	r3, r3, #3
 800408a:	4925      	ldr	r1, [pc, #148]	; (8004120 <HAL_RCC_OscConfig+0x240>)
 800408c:	4313      	orrs	r3, r2
 800408e:	600b      	str	r3, [r1, #0]
 8004090:	e015      	b.n	80040be <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004092:	4b24      	ldr	r3, [pc, #144]	; (8004124 <HAL_RCC_OscConfig+0x244>)
 8004094:	2200      	movs	r2, #0
 8004096:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004098:	f7fd fe18 	bl	8001ccc <HAL_GetTick>
 800409c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800409e:	e008      	b.n	80040b2 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80040a0:	f7fd fe14 	bl	8001ccc <HAL_GetTick>
 80040a4:	4602      	mov	r2, r0
 80040a6:	693b      	ldr	r3, [r7, #16]
 80040a8:	1ad3      	subs	r3, r2, r3
 80040aa:	2b02      	cmp	r3, #2
 80040ac:	d901      	bls.n	80040b2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80040ae:	2303      	movs	r3, #3
 80040b0:	e187      	b.n	80043c2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80040b2:	4b1b      	ldr	r3, [pc, #108]	; (8004120 <HAL_RCC_OscConfig+0x240>)
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	f003 0302 	and.w	r3, r3, #2
 80040ba:	2b00      	cmp	r3, #0
 80040bc:	d1f0      	bne.n	80040a0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	f003 0308 	and.w	r3, r3, #8
 80040c6:	2b00      	cmp	r3, #0
 80040c8:	d036      	beq.n	8004138 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	695b      	ldr	r3, [r3, #20]
 80040ce:	2b00      	cmp	r3, #0
 80040d0:	d016      	beq.n	8004100 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80040d2:	4b15      	ldr	r3, [pc, #84]	; (8004128 <HAL_RCC_OscConfig+0x248>)
 80040d4:	2201      	movs	r2, #1
 80040d6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80040d8:	f7fd fdf8 	bl	8001ccc <HAL_GetTick>
 80040dc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80040de:	e008      	b.n	80040f2 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80040e0:	f7fd fdf4 	bl	8001ccc <HAL_GetTick>
 80040e4:	4602      	mov	r2, r0
 80040e6:	693b      	ldr	r3, [r7, #16]
 80040e8:	1ad3      	subs	r3, r2, r3
 80040ea:	2b02      	cmp	r3, #2
 80040ec:	d901      	bls.n	80040f2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80040ee:	2303      	movs	r3, #3
 80040f0:	e167      	b.n	80043c2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80040f2:	4b0b      	ldr	r3, [pc, #44]	; (8004120 <HAL_RCC_OscConfig+0x240>)
 80040f4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80040f6:	f003 0302 	and.w	r3, r3, #2
 80040fa:	2b00      	cmp	r3, #0
 80040fc:	d0f0      	beq.n	80040e0 <HAL_RCC_OscConfig+0x200>
 80040fe:	e01b      	b.n	8004138 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004100:	4b09      	ldr	r3, [pc, #36]	; (8004128 <HAL_RCC_OscConfig+0x248>)
 8004102:	2200      	movs	r2, #0
 8004104:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004106:	f7fd fde1 	bl	8001ccc <HAL_GetTick>
 800410a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800410c:	e00e      	b.n	800412c <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800410e:	f7fd fddd 	bl	8001ccc <HAL_GetTick>
 8004112:	4602      	mov	r2, r0
 8004114:	693b      	ldr	r3, [r7, #16]
 8004116:	1ad3      	subs	r3, r2, r3
 8004118:	2b02      	cmp	r3, #2
 800411a:	d907      	bls.n	800412c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800411c:	2303      	movs	r3, #3
 800411e:	e150      	b.n	80043c2 <HAL_RCC_OscConfig+0x4e2>
 8004120:	40023800 	.word	0x40023800
 8004124:	42470000 	.word	0x42470000
 8004128:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800412c:	4b88      	ldr	r3, [pc, #544]	; (8004350 <HAL_RCC_OscConfig+0x470>)
 800412e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004130:	f003 0302 	and.w	r3, r3, #2
 8004134:	2b00      	cmp	r3, #0
 8004136:	d1ea      	bne.n	800410e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	f003 0304 	and.w	r3, r3, #4
 8004140:	2b00      	cmp	r3, #0
 8004142:	f000 8097 	beq.w	8004274 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004146:	2300      	movs	r3, #0
 8004148:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800414a:	4b81      	ldr	r3, [pc, #516]	; (8004350 <HAL_RCC_OscConfig+0x470>)
 800414c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800414e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004152:	2b00      	cmp	r3, #0
 8004154:	d10f      	bne.n	8004176 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004156:	2300      	movs	r3, #0
 8004158:	60bb      	str	r3, [r7, #8]
 800415a:	4b7d      	ldr	r3, [pc, #500]	; (8004350 <HAL_RCC_OscConfig+0x470>)
 800415c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800415e:	4a7c      	ldr	r2, [pc, #496]	; (8004350 <HAL_RCC_OscConfig+0x470>)
 8004160:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004164:	6413      	str	r3, [r2, #64]	; 0x40
 8004166:	4b7a      	ldr	r3, [pc, #488]	; (8004350 <HAL_RCC_OscConfig+0x470>)
 8004168:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800416a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800416e:	60bb      	str	r3, [r7, #8]
 8004170:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004172:	2301      	movs	r3, #1
 8004174:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004176:	4b77      	ldr	r3, [pc, #476]	; (8004354 <HAL_RCC_OscConfig+0x474>)
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800417e:	2b00      	cmp	r3, #0
 8004180:	d118      	bne.n	80041b4 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004182:	4b74      	ldr	r3, [pc, #464]	; (8004354 <HAL_RCC_OscConfig+0x474>)
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	4a73      	ldr	r2, [pc, #460]	; (8004354 <HAL_RCC_OscConfig+0x474>)
 8004188:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800418c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800418e:	f7fd fd9d 	bl	8001ccc <HAL_GetTick>
 8004192:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004194:	e008      	b.n	80041a8 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004196:	f7fd fd99 	bl	8001ccc <HAL_GetTick>
 800419a:	4602      	mov	r2, r0
 800419c:	693b      	ldr	r3, [r7, #16]
 800419e:	1ad3      	subs	r3, r2, r3
 80041a0:	2b02      	cmp	r3, #2
 80041a2:	d901      	bls.n	80041a8 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80041a4:	2303      	movs	r3, #3
 80041a6:	e10c      	b.n	80043c2 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80041a8:	4b6a      	ldr	r3, [pc, #424]	; (8004354 <HAL_RCC_OscConfig+0x474>)
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80041b0:	2b00      	cmp	r3, #0
 80041b2:	d0f0      	beq.n	8004196 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	689b      	ldr	r3, [r3, #8]
 80041b8:	2b01      	cmp	r3, #1
 80041ba:	d106      	bne.n	80041ca <HAL_RCC_OscConfig+0x2ea>
 80041bc:	4b64      	ldr	r3, [pc, #400]	; (8004350 <HAL_RCC_OscConfig+0x470>)
 80041be:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80041c0:	4a63      	ldr	r2, [pc, #396]	; (8004350 <HAL_RCC_OscConfig+0x470>)
 80041c2:	f043 0301 	orr.w	r3, r3, #1
 80041c6:	6713      	str	r3, [r2, #112]	; 0x70
 80041c8:	e01c      	b.n	8004204 <HAL_RCC_OscConfig+0x324>
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	689b      	ldr	r3, [r3, #8]
 80041ce:	2b05      	cmp	r3, #5
 80041d0:	d10c      	bne.n	80041ec <HAL_RCC_OscConfig+0x30c>
 80041d2:	4b5f      	ldr	r3, [pc, #380]	; (8004350 <HAL_RCC_OscConfig+0x470>)
 80041d4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80041d6:	4a5e      	ldr	r2, [pc, #376]	; (8004350 <HAL_RCC_OscConfig+0x470>)
 80041d8:	f043 0304 	orr.w	r3, r3, #4
 80041dc:	6713      	str	r3, [r2, #112]	; 0x70
 80041de:	4b5c      	ldr	r3, [pc, #368]	; (8004350 <HAL_RCC_OscConfig+0x470>)
 80041e0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80041e2:	4a5b      	ldr	r2, [pc, #364]	; (8004350 <HAL_RCC_OscConfig+0x470>)
 80041e4:	f043 0301 	orr.w	r3, r3, #1
 80041e8:	6713      	str	r3, [r2, #112]	; 0x70
 80041ea:	e00b      	b.n	8004204 <HAL_RCC_OscConfig+0x324>
 80041ec:	4b58      	ldr	r3, [pc, #352]	; (8004350 <HAL_RCC_OscConfig+0x470>)
 80041ee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80041f0:	4a57      	ldr	r2, [pc, #348]	; (8004350 <HAL_RCC_OscConfig+0x470>)
 80041f2:	f023 0301 	bic.w	r3, r3, #1
 80041f6:	6713      	str	r3, [r2, #112]	; 0x70
 80041f8:	4b55      	ldr	r3, [pc, #340]	; (8004350 <HAL_RCC_OscConfig+0x470>)
 80041fa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80041fc:	4a54      	ldr	r2, [pc, #336]	; (8004350 <HAL_RCC_OscConfig+0x470>)
 80041fe:	f023 0304 	bic.w	r3, r3, #4
 8004202:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	689b      	ldr	r3, [r3, #8]
 8004208:	2b00      	cmp	r3, #0
 800420a:	d015      	beq.n	8004238 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800420c:	f7fd fd5e 	bl	8001ccc <HAL_GetTick>
 8004210:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004212:	e00a      	b.n	800422a <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004214:	f7fd fd5a 	bl	8001ccc <HAL_GetTick>
 8004218:	4602      	mov	r2, r0
 800421a:	693b      	ldr	r3, [r7, #16]
 800421c:	1ad3      	subs	r3, r2, r3
 800421e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004222:	4293      	cmp	r3, r2
 8004224:	d901      	bls.n	800422a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8004226:	2303      	movs	r3, #3
 8004228:	e0cb      	b.n	80043c2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800422a:	4b49      	ldr	r3, [pc, #292]	; (8004350 <HAL_RCC_OscConfig+0x470>)
 800422c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800422e:	f003 0302 	and.w	r3, r3, #2
 8004232:	2b00      	cmp	r3, #0
 8004234:	d0ee      	beq.n	8004214 <HAL_RCC_OscConfig+0x334>
 8004236:	e014      	b.n	8004262 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004238:	f7fd fd48 	bl	8001ccc <HAL_GetTick>
 800423c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800423e:	e00a      	b.n	8004256 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004240:	f7fd fd44 	bl	8001ccc <HAL_GetTick>
 8004244:	4602      	mov	r2, r0
 8004246:	693b      	ldr	r3, [r7, #16]
 8004248:	1ad3      	subs	r3, r2, r3
 800424a:	f241 3288 	movw	r2, #5000	; 0x1388
 800424e:	4293      	cmp	r3, r2
 8004250:	d901      	bls.n	8004256 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8004252:	2303      	movs	r3, #3
 8004254:	e0b5      	b.n	80043c2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004256:	4b3e      	ldr	r3, [pc, #248]	; (8004350 <HAL_RCC_OscConfig+0x470>)
 8004258:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800425a:	f003 0302 	and.w	r3, r3, #2
 800425e:	2b00      	cmp	r3, #0
 8004260:	d1ee      	bne.n	8004240 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004262:	7dfb      	ldrb	r3, [r7, #23]
 8004264:	2b01      	cmp	r3, #1
 8004266:	d105      	bne.n	8004274 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004268:	4b39      	ldr	r3, [pc, #228]	; (8004350 <HAL_RCC_OscConfig+0x470>)
 800426a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800426c:	4a38      	ldr	r2, [pc, #224]	; (8004350 <HAL_RCC_OscConfig+0x470>)
 800426e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004272:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	699b      	ldr	r3, [r3, #24]
 8004278:	2b00      	cmp	r3, #0
 800427a:	f000 80a1 	beq.w	80043c0 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800427e:	4b34      	ldr	r3, [pc, #208]	; (8004350 <HAL_RCC_OscConfig+0x470>)
 8004280:	689b      	ldr	r3, [r3, #8]
 8004282:	f003 030c 	and.w	r3, r3, #12
 8004286:	2b08      	cmp	r3, #8
 8004288:	d05c      	beq.n	8004344 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	699b      	ldr	r3, [r3, #24]
 800428e:	2b02      	cmp	r3, #2
 8004290:	d141      	bne.n	8004316 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004292:	4b31      	ldr	r3, [pc, #196]	; (8004358 <HAL_RCC_OscConfig+0x478>)
 8004294:	2200      	movs	r2, #0
 8004296:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004298:	f7fd fd18 	bl	8001ccc <HAL_GetTick>
 800429c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800429e:	e008      	b.n	80042b2 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80042a0:	f7fd fd14 	bl	8001ccc <HAL_GetTick>
 80042a4:	4602      	mov	r2, r0
 80042a6:	693b      	ldr	r3, [r7, #16]
 80042a8:	1ad3      	subs	r3, r2, r3
 80042aa:	2b02      	cmp	r3, #2
 80042ac:	d901      	bls.n	80042b2 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80042ae:	2303      	movs	r3, #3
 80042b0:	e087      	b.n	80043c2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80042b2:	4b27      	ldr	r3, [pc, #156]	; (8004350 <HAL_RCC_OscConfig+0x470>)
 80042b4:	681b      	ldr	r3, [r3, #0]
 80042b6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80042ba:	2b00      	cmp	r3, #0
 80042bc:	d1f0      	bne.n	80042a0 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	69da      	ldr	r2, [r3, #28]
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	6a1b      	ldr	r3, [r3, #32]
 80042c6:	431a      	orrs	r2, r3
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042cc:	019b      	lsls	r3, r3, #6
 80042ce:	431a      	orrs	r2, r3
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80042d4:	085b      	lsrs	r3, r3, #1
 80042d6:	3b01      	subs	r3, #1
 80042d8:	041b      	lsls	r3, r3, #16
 80042da:	431a      	orrs	r2, r3
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80042e0:	061b      	lsls	r3, r3, #24
 80042e2:	491b      	ldr	r1, [pc, #108]	; (8004350 <HAL_RCC_OscConfig+0x470>)
 80042e4:	4313      	orrs	r3, r2
 80042e6:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80042e8:	4b1b      	ldr	r3, [pc, #108]	; (8004358 <HAL_RCC_OscConfig+0x478>)
 80042ea:	2201      	movs	r2, #1
 80042ec:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80042ee:	f7fd fced 	bl	8001ccc <HAL_GetTick>
 80042f2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80042f4:	e008      	b.n	8004308 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80042f6:	f7fd fce9 	bl	8001ccc <HAL_GetTick>
 80042fa:	4602      	mov	r2, r0
 80042fc:	693b      	ldr	r3, [r7, #16]
 80042fe:	1ad3      	subs	r3, r2, r3
 8004300:	2b02      	cmp	r3, #2
 8004302:	d901      	bls.n	8004308 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8004304:	2303      	movs	r3, #3
 8004306:	e05c      	b.n	80043c2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004308:	4b11      	ldr	r3, [pc, #68]	; (8004350 <HAL_RCC_OscConfig+0x470>)
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004310:	2b00      	cmp	r3, #0
 8004312:	d0f0      	beq.n	80042f6 <HAL_RCC_OscConfig+0x416>
 8004314:	e054      	b.n	80043c0 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004316:	4b10      	ldr	r3, [pc, #64]	; (8004358 <HAL_RCC_OscConfig+0x478>)
 8004318:	2200      	movs	r2, #0
 800431a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800431c:	f7fd fcd6 	bl	8001ccc <HAL_GetTick>
 8004320:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004322:	e008      	b.n	8004336 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004324:	f7fd fcd2 	bl	8001ccc <HAL_GetTick>
 8004328:	4602      	mov	r2, r0
 800432a:	693b      	ldr	r3, [r7, #16]
 800432c:	1ad3      	subs	r3, r2, r3
 800432e:	2b02      	cmp	r3, #2
 8004330:	d901      	bls.n	8004336 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8004332:	2303      	movs	r3, #3
 8004334:	e045      	b.n	80043c2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004336:	4b06      	ldr	r3, [pc, #24]	; (8004350 <HAL_RCC_OscConfig+0x470>)
 8004338:	681b      	ldr	r3, [r3, #0]
 800433a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800433e:	2b00      	cmp	r3, #0
 8004340:	d1f0      	bne.n	8004324 <HAL_RCC_OscConfig+0x444>
 8004342:	e03d      	b.n	80043c0 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	699b      	ldr	r3, [r3, #24]
 8004348:	2b01      	cmp	r3, #1
 800434a:	d107      	bne.n	800435c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 800434c:	2301      	movs	r3, #1
 800434e:	e038      	b.n	80043c2 <HAL_RCC_OscConfig+0x4e2>
 8004350:	40023800 	.word	0x40023800
 8004354:	40007000 	.word	0x40007000
 8004358:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800435c:	4b1b      	ldr	r3, [pc, #108]	; (80043cc <HAL_RCC_OscConfig+0x4ec>)
 800435e:	685b      	ldr	r3, [r3, #4]
 8004360:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	699b      	ldr	r3, [r3, #24]
 8004366:	2b01      	cmp	r3, #1
 8004368:	d028      	beq.n	80043bc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800436a:	68fb      	ldr	r3, [r7, #12]
 800436c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004374:	429a      	cmp	r2, r3
 8004376:	d121      	bne.n	80043bc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004378:	68fb      	ldr	r3, [r7, #12]
 800437a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004382:	429a      	cmp	r2, r3
 8004384:	d11a      	bne.n	80043bc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004386:	68fa      	ldr	r2, [r7, #12]
 8004388:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800438c:	4013      	ands	r3, r2
 800438e:	687a      	ldr	r2, [r7, #4]
 8004390:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004392:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004394:	4293      	cmp	r3, r2
 8004396:	d111      	bne.n	80043bc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004398:	68fb      	ldr	r3, [r7, #12]
 800439a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80043a2:	085b      	lsrs	r3, r3, #1
 80043a4:	3b01      	subs	r3, #1
 80043a6:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80043a8:	429a      	cmp	r2, r3
 80043aa:	d107      	bne.n	80043bc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80043ac:	68fb      	ldr	r3, [r7, #12]
 80043ae:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80043b6:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80043b8:	429a      	cmp	r2, r3
 80043ba:	d001      	beq.n	80043c0 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80043bc:	2301      	movs	r3, #1
 80043be:	e000      	b.n	80043c2 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80043c0:	2300      	movs	r3, #0
}
 80043c2:	4618      	mov	r0, r3
 80043c4:	3718      	adds	r7, #24
 80043c6:	46bd      	mov	sp, r7
 80043c8:	bd80      	pop	{r7, pc}
 80043ca:	bf00      	nop
 80043cc:	40023800 	.word	0x40023800

080043d0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80043d0:	b580      	push	{r7, lr}
 80043d2:	b084      	sub	sp, #16
 80043d4:	af00      	add	r7, sp, #0
 80043d6:	6078      	str	r0, [r7, #4]
 80043d8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	2b00      	cmp	r3, #0
 80043de:	d101      	bne.n	80043e4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80043e0:	2301      	movs	r3, #1
 80043e2:	e0cc      	b.n	800457e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80043e4:	4b68      	ldr	r3, [pc, #416]	; (8004588 <HAL_RCC_ClockConfig+0x1b8>)
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	f003 030f 	and.w	r3, r3, #15
 80043ec:	683a      	ldr	r2, [r7, #0]
 80043ee:	429a      	cmp	r2, r3
 80043f0:	d90c      	bls.n	800440c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80043f2:	4b65      	ldr	r3, [pc, #404]	; (8004588 <HAL_RCC_ClockConfig+0x1b8>)
 80043f4:	683a      	ldr	r2, [r7, #0]
 80043f6:	b2d2      	uxtb	r2, r2
 80043f8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80043fa:	4b63      	ldr	r3, [pc, #396]	; (8004588 <HAL_RCC_ClockConfig+0x1b8>)
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	f003 030f 	and.w	r3, r3, #15
 8004402:	683a      	ldr	r2, [r7, #0]
 8004404:	429a      	cmp	r2, r3
 8004406:	d001      	beq.n	800440c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004408:	2301      	movs	r3, #1
 800440a:	e0b8      	b.n	800457e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	f003 0302 	and.w	r3, r3, #2
 8004414:	2b00      	cmp	r3, #0
 8004416:	d020      	beq.n	800445a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	f003 0304 	and.w	r3, r3, #4
 8004420:	2b00      	cmp	r3, #0
 8004422:	d005      	beq.n	8004430 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004424:	4b59      	ldr	r3, [pc, #356]	; (800458c <HAL_RCC_ClockConfig+0x1bc>)
 8004426:	689b      	ldr	r3, [r3, #8]
 8004428:	4a58      	ldr	r2, [pc, #352]	; (800458c <HAL_RCC_ClockConfig+0x1bc>)
 800442a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800442e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	f003 0308 	and.w	r3, r3, #8
 8004438:	2b00      	cmp	r3, #0
 800443a:	d005      	beq.n	8004448 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800443c:	4b53      	ldr	r3, [pc, #332]	; (800458c <HAL_RCC_ClockConfig+0x1bc>)
 800443e:	689b      	ldr	r3, [r3, #8]
 8004440:	4a52      	ldr	r2, [pc, #328]	; (800458c <HAL_RCC_ClockConfig+0x1bc>)
 8004442:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8004446:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004448:	4b50      	ldr	r3, [pc, #320]	; (800458c <HAL_RCC_ClockConfig+0x1bc>)
 800444a:	689b      	ldr	r3, [r3, #8]
 800444c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	689b      	ldr	r3, [r3, #8]
 8004454:	494d      	ldr	r1, [pc, #308]	; (800458c <HAL_RCC_ClockConfig+0x1bc>)
 8004456:	4313      	orrs	r3, r2
 8004458:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	681b      	ldr	r3, [r3, #0]
 800445e:	f003 0301 	and.w	r3, r3, #1
 8004462:	2b00      	cmp	r3, #0
 8004464:	d044      	beq.n	80044f0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	685b      	ldr	r3, [r3, #4]
 800446a:	2b01      	cmp	r3, #1
 800446c:	d107      	bne.n	800447e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800446e:	4b47      	ldr	r3, [pc, #284]	; (800458c <HAL_RCC_ClockConfig+0x1bc>)
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004476:	2b00      	cmp	r3, #0
 8004478:	d119      	bne.n	80044ae <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800447a:	2301      	movs	r3, #1
 800447c:	e07f      	b.n	800457e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	685b      	ldr	r3, [r3, #4]
 8004482:	2b02      	cmp	r3, #2
 8004484:	d003      	beq.n	800448e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800448a:	2b03      	cmp	r3, #3
 800448c:	d107      	bne.n	800449e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800448e:	4b3f      	ldr	r3, [pc, #252]	; (800458c <HAL_RCC_ClockConfig+0x1bc>)
 8004490:	681b      	ldr	r3, [r3, #0]
 8004492:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004496:	2b00      	cmp	r3, #0
 8004498:	d109      	bne.n	80044ae <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800449a:	2301      	movs	r3, #1
 800449c:	e06f      	b.n	800457e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800449e:	4b3b      	ldr	r3, [pc, #236]	; (800458c <HAL_RCC_ClockConfig+0x1bc>)
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	f003 0302 	and.w	r3, r3, #2
 80044a6:	2b00      	cmp	r3, #0
 80044a8:	d101      	bne.n	80044ae <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80044aa:	2301      	movs	r3, #1
 80044ac:	e067      	b.n	800457e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80044ae:	4b37      	ldr	r3, [pc, #220]	; (800458c <HAL_RCC_ClockConfig+0x1bc>)
 80044b0:	689b      	ldr	r3, [r3, #8]
 80044b2:	f023 0203 	bic.w	r2, r3, #3
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	685b      	ldr	r3, [r3, #4]
 80044ba:	4934      	ldr	r1, [pc, #208]	; (800458c <HAL_RCC_ClockConfig+0x1bc>)
 80044bc:	4313      	orrs	r3, r2
 80044be:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80044c0:	f7fd fc04 	bl	8001ccc <HAL_GetTick>
 80044c4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80044c6:	e00a      	b.n	80044de <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80044c8:	f7fd fc00 	bl	8001ccc <HAL_GetTick>
 80044cc:	4602      	mov	r2, r0
 80044ce:	68fb      	ldr	r3, [r7, #12]
 80044d0:	1ad3      	subs	r3, r2, r3
 80044d2:	f241 3288 	movw	r2, #5000	; 0x1388
 80044d6:	4293      	cmp	r3, r2
 80044d8:	d901      	bls.n	80044de <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80044da:	2303      	movs	r3, #3
 80044dc:	e04f      	b.n	800457e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80044de:	4b2b      	ldr	r3, [pc, #172]	; (800458c <HAL_RCC_ClockConfig+0x1bc>)
 80044e0:	689b      	ldr	r3, [r3, #8]
 80044e2:	f003 020c 	and.w	r2, r3, #12
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	685b      	ldr	r3, [r3, #4]
 80044ea:	009b      	lsls	r3, r3, #2
 80044ec:	429a      	cmp	r2, r3
 80044ee:	d1eb      	bne.n	80044c8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80044f0:	4b25      	ldr	r3, [pc, #148]	; (8004588 <HAL_RCC_ClockConfig+0x1b8>)
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	f003 030f 	and.w	r3, r3, #15
 80044f8:	683a      	ldr	r2, [r7, #0]
 80044fa:	429a      	cmp	r2, r3
 80044fc:	d20c      	bcs.n	8004518 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80044fe:	4b22      	ldr	r3, [pc, #136]	; (8004588 <HAL_RCC_ClockConfig+0x1b8>)
 8004500:	683a      	ldr	r2, [r7, #0]
 8004502:	b2d2      	uxtb	r2, r2
 8004504:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004506:	4b20      	ldr	r3, [pc, #128]	; (8004588 <HAL_RCC_ClockConfig+0x1b8>)
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	f003 030f 	and.w	r3, r3, #15
 800450e:	683a      	ldr	r2, [r7, #0]
 8004510:	429a      	cmp	r2, r3
 8004512:	d001      	beq.n	8004518 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004514:	2301      	movs	r3, #1
 8004516:	e032      	b.n	800457e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	f003 0304 	and.w	r3, r3, #4
 8004520:	2b00      	cmp	r3, #0
 8004522:	d008      	beq.n	8004536 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004524:	4b19      	ldr	r3, [pc, #100]	; (800458c <HAL_RCC_ClockConfig+0x1bc>)
 8004526:	689b      	ldr	r3, [r3, #8]
 8004528:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	68db      	ldr	r3, [r3, #12]
 8004530:	4916      	ldr	r1, [pc, #88]	; (800458c <HAL_RCC_ClockConfig+0x1bc>)
 8004532:	4313      	orrs	r3, r2
 8004534:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	681b      	ldr	r3, [r3, #0]
 800453a:	f003 0308 	and.w	r3, r3, #8
 800453e:	2b00      	cmp	r3, #0
 8004540:	d009      	beq.n	8004556 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004542:	4b12      	ldr	r3, [pc, #72]	; (800458c <HAL_RCC_ClockConfig+0x1bc>)
 8004544:	689b      	ldr	r3, [r3, #8]
 8004546:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	691b      	ldr	r3, [r3, #16]
 800454e:	00db      	lsls	r3, r3, #3
 8004550:	490e      	ldr	r1, [pc, #56]	; (800458c <HAL_RCC_ClockConfig+0x1bc>)
 8004552:	4313      	orrs	r3, r2
 8004554:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004556:	f000 f821 	bl	800459c <HAL_RCC_GetSysClockFreq>
 800455a:	4602      	mov	r2, r0
 800455c:	4b0b      	ldr	r3, [pc, #44]	; (800458c <HAL_RCC_ClockConfig+0x1bc>)
 800455e:	689b      	ldr	r3, [r3, #8]
 8004560:	091b      	lsrs	r3, r3, #4
 8004562:	f003 030f 	and.w	r3, r3, #15
 8004566:	490a      	ldr	r1, [pc, #40]	; (8004590 <HAL_RCC_ClockConfig+0x1c0>)
 8004568:	5ccb      	ldrb	r3, [r1, r3]
 800456a:	fa22 f303 	lsr.w	r3, r2, r3
 800456e:	4a09      	ldr	r2, [pc, #36]	; (8004594 <HAL_RCC_ClockConfig+0x1c4>)
 8004570:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8004572:	4b09      	ldr	r3, [pc, #36]	; (8004598 <HAL_RCC_ClockConfig+0x1c8>)
 8004574:	681b      	ldr	r3, [r3, #0]
 8004576:	4618      	mov	r0, r3
 8004578:	f7fd fb64 	bl	8001c44 <HAL_InitTick>

  return HAL_OK;
 800457c:	2300      	movs	r3, #0
}
 800457e:	4618      	mov	r0, r3
 8004580:	3710      	adds	r7, #16
 8004582:	46bd      	mov	sp, r7
 8004584:	bd80      	pop	{r7, pc}
 8004586:	bf00      	nop
 8004588:	40023c00 	.word	0x40023c00
 800458c:	40023800 	.word	0x40023800
 8004590:	080088ac 	.word	0x080088ac
 8004594:	20000000 	.word	0x20000000
 8004598:	20000004 	.word	0x20000004

0800459c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800459c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80045a0:	b094      	sub	sp, #80	; 0x50
 80045a2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80045a4:	2300      	movs	r3, #0
 80045a6:	647b      	str	r3, [r7, #68]	; 0x44
 80045a8:	2300      	movs	r3, #0
 80045aa:	64fb      	str	r3, [r7, #76]	; 0x4c
 80045ac:	2300      	movs	r3, #0
 80045ae:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 80045b0:	2300      	movs	r3, #0
 80045b2:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80045b4:	4b79      	ldr	r3, [pc, #484]	; (800479c <HAL_RCC_GetSysClockFreq+0x200>)
 80045b6:	689b      	ldr	r3, [r3, #8]
 80045b8:	f003 030c 	and.w	r3, r3, #12
 80045bc:	2b08      	cmp	r3, #8
 80045be:	d00d      	beq.n	80045dc <HAL_RCC_GetSysClockFreq+0x40>
 80045c0:	2b08      	cmp	r3, #8
 80045c2:	f200 80e1 	bhi.w	8004788 <HAL_RCC_GetSysClockFreq+0x1ec>
 80045c6:	2b00      	cmp	r3, #0
 80045c8:	d002      	beq.n	80045d0 <HAL_RCC_GetSysClockFreq+0x34>
 80045ca:	2b04      	cmp	r3, #4
 80045cc:	d003      	beq.n	80045d6 <HAL_RCC_GetSysClockFreq+0x3a>
 80045ce:	e0db      	b.n	8004788 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80045d0:	4b73      	ldr	r3, [pc, #460]	; (80047a0 <HAL_RCC_GetSysClockFreq+0x204>)
 80045d2:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 80045d4:	e0db      	b.n	800478e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80045d6:	4b73      	ldr	r3, [pc, #460]	; (80047a4 <HAL_RCC_GetSysClockFreq+0x208>)
 80045d8:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80045da:	e0d8      	b.n	800478e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80045dc:	4b6f      	ldr	r3, [pc, #444]	; (800479c <HAL_RCC_GetSysClockFreq+0x200>)
 80045de:	685b      	ldr	r3, [r3, #4]
 80045e0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80045e4:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80045e6:	4b6d      	ldr	r3, [pc, #436]	; (800479c <HAL_RCC_GetSysClockFreq+0x200>)
 80045e8:	685b      	ldr	r3, [r3, #4]
 80045ea:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80045ee:	2b00      	cmp	r3, #0
 80045f0:	d063      	beq.n	80046ba <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80045f2:	4b6a      	ldr	r3, [pc, #424]	; (800479c <HAL_RCC_GetSysClockFreq+0x200>)
 80045f4:	685b      	ldr	r3, [r3, #4]
 80045f6:	099b      	lsrs	r3, r3, #6
 80045f8:	2200      	movs	r2, #0
 80045fa:	63bb      	str	r3, [r7, #56]	; 0x38
 80045fc:	63fa      	str	r2, [r7, #60]	; 0x3c
 80045fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004600:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004604:	633b      	str	r3, [r7, #48]	; 0x30
 8004606:	2300      	movs	r3, #0
 8004608:	637b      	str	r3, [r7, #52]	; 0x34
 800460a:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 800460e:	4622      	mov	r2, r4
 8004610:	462b      	mov	r3, r5
 8004612:	f04f 0000 	mov.w	r0, #0
 8004616:	f04f 0100 	mov.w	r1, #0
 800461a:	0159      	lsls	r1, r3, #5
 800461c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004620:	0150      	lsls	r0, r2, #5
 8004622:	4602      	mov	r2, r0
 8004624:	460b      	mov	r3, r1
 8004626:	4621      	mov	r1, r4
 8004628:	1a51      	subs	r1, r2, r1
 800462a:	6139      	str	r1, [r7, #16]
 800462c:	4629      	mov	r1, r5
 800462e:	eb63 0301 	sbc.w	r3, r3, r1
 8004632:	617b      	str	r3, [r7, #20]
 8004634:	f04f 0200 	mov.w	r2, #0
 8004638:	f04f 0300 	mov.w	r3, #0
 800463c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004640:	4659      	mov	r1, fp
 8004642:	018b      	lsls	r3, r1, #6
 8004644:	4651      	mov	r1, sl
 8004646:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800464a:	4651      	mov	r1, sl
 800464c:	018a      	lsls	r2, r1, #6
 800464e:	4651      	mov	r1, sl
 8004650:	ebb2 0801 	subs.w	r8, r2, r1
 8004654:	4659      	mov	r1, fp
 8004656:	eb63 0901 	sbc.w	r9, r3, r1
 800465a:	f04f 0200 	mov.w	r2, #0
 800465e:	f04f 0300 	mov.w	r3, #0
 8004662:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004666:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800466a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800466e:	4690      	mov	r8, r2
 8004670:	4699      	mov	r9, r3
 8004672:	4623      	mov	r3, r4
 8004674:	eb18 0303 	adds.w	r3, r8, r3
 8004678:	60bb      	str	r3, [r7, #8]
 800467a:	462b      	mov	r3, r5
 800467c:	eb49 0303 	adc.w	r3, r9, r3
 8004680:	60fb      	str	r3, [r7, #12]
 8004682:	f04f 0200 	mov.w	r2, #0
 8004686:	f04f 0300 	mov.w	r3, #0
 800468a:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800468e:	4629      	mov	r1, r5
 8004690:	024b      	lsls	r3, r1, #9
 8004692:	4621      	mov	r1, r4
 8004694:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8004698:	4621      	mov	r1, r4
 800469a:	024a      	lsls	r2, r1, #9
 800469c:	4610      	mov	r0, r2
 800469e:	4619      	mov	r1, r3
 80046a0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80046a2:	2200      	movs	r2, #0
 80046a4:	62bb      	str	r3, [r7, #40]	; 0x28
 80046a6:	62fa      	str	r2, [r7, #44]	; 0x2c
 80046a8:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80046ac:	f7fc fa76 	bl	8000b9c <__aeabi_uldivmod>
 80046b0:	4602      	mov	r2, r0
 80046b2:	460b      	mov	r3, r1
 80046b4:	4613      	mov	r3, r2
 80046b6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80046b8:	e058      	b.n	800476c <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80046ba:	4b38      	ldr	r3, [pc, #224]	; (800479c <HAL_RCC_GetSysClockFreq+0x200>)
 80046bc:	685b      	ldr	r3, [r3, #4]
 80046be:	099b      	lsrs	r3, r3, #6
 80046c0:	2200      	movs	r2, #0
 80046c2:	4618      	mov	r0, r3
 80046c4:	4611      	mov	r1, r2
 80046c6:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80046ca:	623b      	str	r3, [r7, #32]
 80046cc:	2300      	movs	r3, #0
 80046ce:	627b      	str	r3, [r7, #36]	; 0x24
 80046d0:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80046d4:	4642      	mov	r2, r8
 80046d6:	464b      	mov	r3, r9
 80046d8:	f04f 0000 	mov.w	r0, #0
 80046dc:	f04f 0100 	mov.w	r1, #0
 80046e0:	0159      	lsls	r1, r3, #5
 80046e2:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80046e6:	0150      	lsls	r0, r2, #5
 80046e8:	4602      	mov	r2, r0
 80046ea:	460b      	mov	r3, r1
 80046ec:	4641      	mov	r1, r8
 80046ee:	ebb2 0a01 	subs.w	sl, r2, r1
 80046f2:	4649      	mov	r1, r9
 80046f4:	eb63 0b01 	sbc.w	fp, r3, r1
 80046f8:	f04f 0200 	mov.w	r2, #0
 80046fc:	f04f 0300 	mov.w	r3, #0
 8004700:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8004704:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8004708:	ea4f 128a 	mov.w	r2, sl, lsl #6
 800470c:	ebb2 040a 	subs.w	r4, r2, sl
 8004710:	eb63 050b 	sbc.w	r5, r3, fp
 8004714:	f04f 0200 	mov.w	r2, #0
 8004718:	f04f 0300 	mov.w	r3, #0
 800471c:	00eb      	lsls	r3, r5, #3
 800471e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004722:	00e2      	lsls	r2, r4, #3
 8004724:	4614      	mov	r4, r2
 8004726:	461d      	mov	r5, r3
 8004728:	4643      	mov	r3, r8
 800472a:	18e3      	adds	r3, r4, r3
 800472c:	603b      	str	r3, [r7, #0]
 800472e:	464b      	mov	r3, r9
 8004730:	eb45 0303 	adc.w	r3, r5, r3
 8004734:	607b      	str	r3, [r7, #4]
 8004736:	f04f 0200 	mov.w	r2, #0
 800473a:	f04f 0300 	mov.w	r3, #0
 800473e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004742:	4629      	mov	r1, r5
 8004744:	028b      	lsls	r3, r1, #10
 8004746:	4621      	mov	r1, r4
 8004748:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800474c:	4621      	mov	r1, r4
 800474e:	028a      	lsls	r2, r1, #10
 8004750:	4610      	mov	r0, r2
 8004752:	4619      	mov	r1, r3
 8004754:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004756:	2200      	movs	r2, #0
 8004758:	61bb      	str	r3, [r7, #24]
 800475a:	61fa      	str	r2, [r7, #28]
 800475c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004760:	f7fc fa1c 	bl	8000b9c <__aeabi_uldivmod>
 8004764:	4602      	mov	r2, r0
 8004766:	460b      	mov	r3, r1
 8004768:	4613      	mov	r3, r2
 800476a:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800476c:	4b0b      	ldr	r3, [pc, #44]	; (800479c <HAL_RCC_GetSysClockFreq+0x200>)
 800476e:	685b      	ldr	r3, [r3, #4]
 8004770:	0c1b      	lsrs	r3, r3, #16
 8004772:	f003 0303 	and.w	r3, r3, #3
 8004776:	3301      	adds	r3, #1
 8004778:	005b      	lsls	r3, r3, #1
 800477a:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 800477c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800477e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004780:	fbb2 f3f3 	udiv	r3, r2, r3
 8004784:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004786:	e002      	b.n	800478e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004788:	4b05      	ldr	r3, [pc, #20]	; (80047a0 <HAL_RCC_GetSysClockFreq+0x204>)
 800478a:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800478c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800478e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8004790:	4618      	mov	r0, r3
 8004792:	3750      	adds	r7, #80	; 0x50
 8004794:	46bd      	mov	sp, r7
 8004796:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800479a:	bf00      	nop
 800479c:	40023800 	.word	0x40023800
 80047a0:	00f42400 	.word	0x00f42400
 80047a4:	007a1200 	.word	0x007a1200

080047a8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80047a8:	b480      	push	{r7}
 80047aa:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80047ac:	4b03      	ldr	r3, [pc, #12]	; (80047bc <HAL_RCC_GetHCLKFreq+0x14>)
 80047ae:	681b      	ldr	r3, [r3, #0]
}
 80047b0:	4618      	mov	r0, r3
 80047b2:	46bd      	mov	sp, r7
 80047b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047b8:	4770      	bx	lr
 80047ba:	bf00      	nop
 80047bc:	20000000 	.word	0x20000000

080047c0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80047c0:	b580      	push	{r7, lr}
 80047c2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80047c4:	f7ff fff0 	bl	80047a8 <HAL_RCC_GetHCLKFreq>
 80047c8:	4602      	mov	r2, r0
 80047ca:	4b05      	ldr	r3, [pc, #20]	; (80047e0 <HAL_RCC_GetPCLK1Freq+0x20>)
 80047cc:	689b      	ldr	r3, [r3, #8]
 80047ce:	0a9b      	lsrs	r3, r3, #10
 80047d0:	f003 0307 	and.w	r3, r3, #7
 80047d4:	4903      	ldr	r1, [pc, #12]	; (80047e4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80047d6:	5ccb      	ldrb	r3, [r1, r3]
 80047d8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80047dc:	4618      	mov	r0, r3
 80047de:	bd80      	pop	{r7, pc}
 80047e0:	40023800 	.word	0x40023800
 80047e4:	080088bc 	.word	0x080088bc

080047e8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80047e8:	b580      	push	{r7, lr}
 80047ea:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80047ec:	f7ff ffdc 	bl	80047a8 <HAL_RCC_GetHCLKFreq>
 80047f0:	4602      	mov	r2, r0
 80047f2:	4b05      	ldr	r3, [pc, #20]	; (8004808 <HAL_RCC_GetPCLK2Freq+0x20>)
 80047f4:	689b      	ldr	r3, [r3, #8]
 80047f6:	0b5b      	lsrs	r3, r3, #13
 80047f8:	f003 0307 	and.w	r3, r3, #7
 80047fc:	4903      	ldr	r1, [pc, #12]	; (800480c <HAL_RCC_GetPCLK2Freq+0x24>)
 80047fe:	5ccb      	ldrb	r3, [r1, r3]
 8004800:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004804:	4618      	mov	r0, r3
 8004806:	bd80      	pop	{r7, pc}
 8004808:	40023800 	.word	0x40023800
 800480c:	080088bc 	.word	0x080088bc

08004810 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004810:	b580      	push	{r7, lr}
 8004812:	b082      	sub	sp, #8
 8004814:	af00      	add	r7, sp, #0
 8004816:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	2b00      	cmp	r3, #0
 800481c:	d101      	bne.n	8004822 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800481e:	2301      	movs	r3, #1
 8004820:	e03f      	b.n	80048a2 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004828:	b2db      	uxtb	r3, r3
 800482a:	2b00      	cmp	r3, #0
 800482c:	d106      	bne.n	800483c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	2200      	movs	r2, #0
 8004832:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004836:	6878      	ldr	r0, [r7, #4]
 8004838:	f7fd f8c8 	bl	80019cc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	2224      	movs	r2, #36	; 0x24
 8004840:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	681b      	ldr	r3, [r3, #0]
 8004848:	68da      	ldr	r2, [r3, #12]
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	681b      	ldr	r3, [r3, #0]
 800484e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004852:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004854:	6878      	ldr	r0, [r7, #4]
 8004856:	f000 fded 	bl	8005434 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	691a      	ldr	r2, [r3, #16]
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	681b      	ldr	r3, [r3, #0]
 8004864:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004868:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	681b      	ldr	r3, [r3, #0]
 800486e:	695a      	ldr	r2, [r3, #20]
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	681b      	ldr	r3, [r3, #0]
 8004874:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004878:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	681b      	ldr	r3, [r3, #0]
 800487e:	68da      	ldr	r2, [r3, #12]
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	681b      	ldr	r3, [r3, #0]
 8004884:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004888:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	2200      	movs	r2, #0
 800488e:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	2220      	movs	r2, #32
 8004894:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	2220      	movs	r2, #32
 800489c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80048a0:	2300      	movs	r3, #0
}
 80048a2:	4618      	mov	r0, r3
 80048a4:	3708      	adds	r7, #8
 80048a6:	46bd      	mov	sp, r7
 80048a8:	bd80      	pop	{r7, pc}

080048aa <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80048aa:	b580      	push	{r7, lr}
 80048ac:	b08a      	sub	sp, #40	; 0x28
 80048ae:	af02      	add	r7, sp, #8
 80048b0:	60f8      	str	r0, [r7, #12]
 80048b2:	60b9      	str	r1, [r7, #8]
 80048b4:	603b      	str	r3, [r7, #0]
 80048b6:	4613      	mov	r3, r2
 80048b8:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80048ba:	2300      	movs	r3, #0
 80048bc:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80048be:	68fb      	ldr	r3, [r7, #12]
 80048c0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80048c4:	b2db      	uxtb	r3, r3
 80048c6:	2b20      	cmp	r3, #32
 80048c8:	d17c      	bne.n	80049c4 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 80048ca:	68bb      	ldr	r3, [r7, #8]
 80048cc:	2b00      	cmp	r3, #0
 80048ce:	d002      	beq.n	80048d6 <HAL_UART_Transmit+0x2c>
 80048d0:	88fb      	ldrh	r3, [r7, #6]
 80048d2:	2b00      	cmp	r3, #0
 80048d4:	d101      	bne.n	80048da <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80048d6:	2301      	movs	r3, #1
 80048d8:	e075      	b.n	80049c6 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80048da:	68fb      	ldr	r3, [r7, #12]
 80048dc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80048e0:	2b01      	cmp	r3, #1
 80048e2:	d101      	bne.n	80048e8 <HAL_UART_Transmit+0x3e>
 80048e4:	2302      	movs	r3, #2
 80048e6:	e06e      	b.n	80049c6 <HAL_UART_Transmit+0x11c>
 80048e8:	68fb      	ldr	r3, [r7, #12]
 80048ea:	2201      	movs	r2, #1
 80048ec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80048f0:	68fb      	ldr	r3, [r7, #12]
 80048f2:	2200      	movs	r2, #0
 80048f4:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80048f6:	68fb      	ldr	r3, [r7, #12]
 80048f8:	2221      	movs	r2, #33	; 0x21
 80048fa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80048fe:	f7fd f9e5 	bl	8001ccc <HAL_GetTick>
 8004902:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8004904:	68fb      	ldr	r3, [r7, #12]
 8004906:	88fa      	ldrh	r2, [r7, #6]
 8004908:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800490a:	68fb      	ldr	r3, [r7, #12]
 800490c:	88fa      	ldrh	r2, [r7, #6]
 800490e:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004910:	68fb      	ldr	r3, [r7, #12]
 8004912:	689b      	ldr	r3, [r3, #8]
 8004914:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004918:	d108      	bne.n	800492c <HAL_UART_Transmit+0x82>
 800491a:	68fb      	ldr	r3, [r7, #12]
 800491c:	691b      	ldr	r3, [r3, #16]
 800491e:	2b00      	cmp	r3, #0
 8004920:	d104      	bne.n	800492c <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8004922:	2300      	movs	r3, #0
 8004924:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004926:	68bb      	ldr	r3, [r7, #8]
 8004928:	61bb      	str	r3, [r7, #24]
 800492a:	e003      	b.n	8004934 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 800492c:	68bb      	ldr	r3, [r7, #8]
 800492e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004930:	2300      	movs	r3, #0
 8004932:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8004934:	68fb      	ldr	r3, [r7, #12]
 8004936:	2200      	movs	r2, #0
 8004938:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 800493c:	e02a      	b.n	8004994 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800493e:	683b      	ldr	r3, [r7, #0]
 8004940:	9300      	str	r3, [sp, #0]
 8004942:	697b      	ldr	r3, [r7, #20]
 8004944:	2200      	movs	r2, #0
 8004946:	2180      	movs	r1, #128	; 0x80
 8004948:	68f8      	ldr	r0, [r7, #12]
 800494a:	f000 fb1f 	bl	8004f8c <UART_WaitOnFlagUntilTimeout>
 800494e:	4603      	mov	r3, r0
 8004950:	2b00      	cmp	r3, #0
 8004952:	d001      	beq.n	8004958 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8004954:	2303      	movs	r3, #3
 8004956:	e036      	b.n	80049c6 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8004958:	69fb      	ldr	r3, [r7, #28]
 800495a:	2b00      	cmp	r3, #0
 800495c:	d10b      	bne.n	8004976 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800495e:	69bb      	ldr	r3, [r7, #24]
 8004960:	881b      	ldrh	r3, [r3, #0]
 8004962:	461a      	mov	r2, r3
 8004964:	68fb      	ldr	r3, [r7, #12]
 8004966:	681b      	ldr	r3, [r3, #0]
 8004968:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800496c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800496e:	69bb      	ldr	r3, [r7, #24]
 8004970:	3302      	adds	r3, #2
 8004972:	61bb      	str	r3, [r7, #24]
 8004974:	e007      	b.n	8004986 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8004976:	69fb      	ldr	r3, [r7, #28]
 8004978:	781a      	ldrb	r2, [r3, #0]
 800497a:	68fb      	ldr	r3, [r7, #12]
 800497c:	681b      	ldr	r3, [r3, #0]
 800497e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8004980:	69fb      	ldr	r3, [r7, #28]
 8004982:	3301      	adds	r3, #1
 8004984:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004986:	68fb      	ldr	r3, [r7, #12]
 8004988:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800498a:	b29b      	uxth	r3, r3
 800498c:	3b01      	subs	r3, #1
 800498e:	b29a      	uxth	r2, r3
 8004990:	68fb      	ldr	r3, [r7, #12]
 8004992:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8004994:	68fb      	ldr	r3, [r7, #12]
 8004996:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004998:	b29b      	uxth	r3, r3
 800499a:	2b00      	cmp	r3, #0
 800499c:	d1cf      	bne.n	800493e <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800499e:	683b      	ldr	r3, [r7, #0]
 80049a0:	9300      	str	r3, [sp, #0]
 80049a2:	697b      	ldr	r3, [r7, #20]
 80049a4:	2200      	movs	r2, #0
 80049a6:	2140      	movs	r1, #64	; 0x40
 80049a8:	68f8      	ldr	r0, [r7, #12]
 80049aa:	f000 faef 	bl	8004f8c <UART_WaitOnFlagUntilTimeout>
 80049ae:	4603      	mov	r3, r0
 80049b0:	2b00      	cmp	r3, #0
 80049b2:	d001      	beq.n	80049b8 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 80049b4:	2303      	movs	r3, #3
 80049b6:	e006      	b.n	80049c6 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80049b8:	68fb      	ldr	r3, [r7, #12]
 80049ba:	2220      	movs	r2, #32
 80049bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80049c0:	2300      	movs	r3, #0
 80049c2:	e000      	b.n	80049c6 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 80049c4:	2302      	movs	r3, #2
  }
}
 80049c6:	4618      	mov	r0, r3
 80049c8:	3720      	adds	r7, #32
 80049ca:	46bd      	mov	sp, r7
 80049cc:	bd80      	pop	{r7, pc}

080049ce <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80049ce:	b580      	push	{r7, lr}
 80049d0:	b084      	sub	sp, #16
 80049d2:	af00      	add	r7, sp, #0
 80049d4:	60f8      	str	r0, [r7, #12]
 80049d6:	60b9      	str	r1, [r7, #8]
 80049d8:	4613      	mov	r3, r2
 80049da:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80049dc:	68fb      	ldr	r3, [r7, #12]
 80049de:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80049e2:	b2db      	uxtb	r3, r3
 80049e4:	2b20      	cmp	r3, #32
 80049e6:	d11d      	bne.n	8004a24 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 80049e8:	68bb      	ldr	r3, [r7, #8]
 80049ea:	2b00      	cmp	r3, #0
 80049ec:	d002      	beq.n	80049f4 <HAL_UART_Receive_IT+0x26>
 80049ee:	88fb      	ldrh	r3, [r7, #6]
 80049f0:	2b00      	cmp	r3, #0
 80049f2:	d101      	bne.n	80049f8 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 80049f4:	2301      	movs	r3, #1
 80049f6:	e016      	b.n	8004a26 <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80049f8:	68fb      	ldr	r3, [r7, #12]
 80049fa:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80049fe:	2b01      	cmp	r3, #1
 8004a00:	d101      	bne.n	8004a06 <HAL_UART_Receive_IT+0x38>
 8004a02:	2302      	movs	r3, #2
 8004a04:	e00f      	b.n	8004a26 <HAL_UART_Receive_IT+0x58>
 8004a06:	68fb      	ldr	r3, [r7, #12]
 8004a08:	2201      	movs	r2, #1
 8004a0a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004a0e:	68fb      	ldr	r3, [r7, #12]
 8004a10:	2200      	movs	r2, #0
 8004a12:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8004a14:	88fb      	ldrh	r3, [r7, #6]
 8004a16:	461a      	mov	r2, r3
 8004a18:	68b9      	ldr	r1, [r7, #8]
 8004a1a:	68f8      	ldr	r0, [r7, #12]
 8004a1c:	f000 fb24 	bl	8005068 <UART_Start_Receive_IT>
 8004a20:	4603      	mov	r3, r0
 8004a22:	e000      	b.n	8004a26 <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 8004a24:	2302      	movs	r3, #2
  }
}
 8004a26:	4618      	mov	r0, r3
 8004a28:	3710      	adds	r7, #16
 8004a2a:	46bd      	mov	sp, r7
 8004a2c:	bd80      	pop	{r7, pc}
	...

08004a30 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004a30:	b580      	push	{r7, lr}
 8004a32:	b0ba      	sub	sp, #232	; 0xe8
 8004a34:	af00      	add	r7, sp, #0
 8004a36:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	681b      	ldr	r3, [r3, #0]
 8004a3c:	681b      	ldr	r3, [r3, #0]
 8004a3e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	681b      	ldr	r3, [r3, #0]
 8004a46:	68db      	ldr	r3, [r3, #12]
 8004a48:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	681b      	ldr	r3, [r3, #0]
 8004a50:	695b      	ldr	r3, [r3, #20]
 8004a52:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8004a56:	2300      	movs	r3, #0
 8004a58:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8004a5c:	2300      	movs	r3, #0
 8004a5e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8004a62:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004a66:	f003 030f 	and.w	r3, r3, #15
 8004a6a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8004a6e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004a72:	2b00      	cmp	r3, #0
 8004a74:	d10f      	bne.n	8004a96 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004a76:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004a7a:	f003 0320 	and.w	r3, r3, #32
 8004a7e:	2b00      	cmp	r3, #0
 8004a80:	d009      	beq.n	8004a96 <HAL_UART_IRQHandler+0x66>
 8004a82:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004a86:	f003 0320 	and.w	r3, r3, #32
 8004a8a:	2b00      	cmp	r3, #0
 8004a8c:	d003      	beq.n	8004a96 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8004a8e:	6878      	ldr	r0, [r7, #4]
 8004a90:	f000 fc07 	bl	80052a2 <UART_Receive_IT>
      return;
 8004a94:	e256      	b.n	8004f44 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8004a96:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004a9a:	2b00      	cmp	r3, #0
 8004a9c:	f000 80de 	beq.w	8004c5c <HAL_UART_IRQHandler+0x22c>
 8004aa0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004aa4:	f003 0301 	and.w	r3, r3, #1
 8004aa8:	2b00      	cmp	r3, #0
 8004aaa:	d106      	bne.n	8004aba <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8004aac:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004ab0:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8004ab4:	2b00      	cmp	r3, #0
 8004ab6:	f000 80d1 	beq.w	8004c5c <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8004aba:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004abe:	f003 0301 	and.w	r3, r3, #1
 8004ac2:	2b00      	cmp	r3, #0
 8004ac4:	d00b      	beq.n	8004ade <HAL_UART_IRQHandler+0xae>
 8004ac6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004aca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004ace:	2b00      	cmp	r3, #0
 8004ad0:	d005      	beq.n	8004ade <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ad6:	f043 0201 	orr.w	r2, r3, #1
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004ade:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004ae2:	f003 0304 	and.w	r3, r3, #4
 8004ae6:	2b00      	cmp	r3, #0
 8004ae8:	d00b      	beq.n	8004b02 <HAL_UART_IRQHandler+0xd2>
 8004aea:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004aee:	f003 0301 	and.w	r3, r3, #1
 8004af2:	2b00      	cmp	r3, #0
 8004af4:	d005      	beq.n	8004b02 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004afa:	f043 0202 	orr.w	r2, r3, #2
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004b02:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004b06:	f003 0302 	and.w	r3, r3, #2
 8004b0a:	2b00      	cmp	r3, #0
 8004b0c:	d00b      	beq.n	8004b26 <HAL_UART_IRQHandler+0xf6>
 8004b0e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004b12:	f003 0301 	and.w	r3, r3, #1
 8004b16:	2b00      	cmp	r3, #0
 8004b18:	d005      	beq.n	8004b26 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b1e:	f043 0204 	orr.w	r2, r3, #4
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8004b26:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004b2a:	f003 0308 	and.w	r3, r3, #8
 8004b2e:	2b00      	cmp	r3, #0
 8004b30:	d011      	beq.n	8004b56 <HAL_UART_IRQHandler+0x126>
 8004b32:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004b36:	f003 0320 	and.w	r3, r3, #32
 8004b3a:	2b00      	cmp	r3, #0
 8004b3c:	d105      	bne.n	8004b4a <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8004b3e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004b42:	f003 0301 	and.w	r3, r3, #1
 8004b46:	2b00      	cmp	r3, #0
 8004b48:	d005      	beq.n	8004b56 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b4e:	f043 0208 	orr.w	r2, r3, #8
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b5a:	2b00      	cmp	r3, #0
 8004b5c:	f000 81ed 	beq.w	8004f3a <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004b60:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004b64:	f003 0320 	and.w	r3, r3, #32
 8004b68:	2b00      	cmp	r3, #0
 8004b6a:	d008      	beq.n	8004b7e <HAL_UART_IRQHandler+0x14e>
 8004b6c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004b70:	f003 0320 	and.w	r3, r3, #32
 8004b74:	2b00      	cmp	r3, #0
 8004b76:	d002      	beq.n	8004b7e <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8004b78:	6878      	ldr	r0, [r7, #4]
 8004b7a:	f000 fb92 	bl	80052a2 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	681b      	ldr	r3, [r3, #0]
 8004b82:	695b      	ldr	r3, [r3, #20]
 8004b84:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004b88:	2b40      	cmp	r3, #64	; 0x40
 8004b8a:	bf0c      	ite	eq
 8004b8c:	2301      	moveq	r3, #1
 8004b8e:	2300      	movne	r3, #0
 8004b90:	b2db      	uxtb	r3, r3
 8004b92:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b9a:	f003 0308 	and.w	r3, r3, #8
 8004b9e:	2b00      	cmp	r3, #0
 8004ba0:	d103      	bne.n	8004baa <HAL_UART_IRQHandler+0x17a>
 8004ba2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8004ba6:	2b00      	cmp	r3, #0
 8004ba8:	d04f      	beq.n	8004c4a <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8004baa:	6878      	ldr	r0, [r7, #4]
 8004bac:	f000 fa9a 	bl	80050e4 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	681b      	ldr	r3, [r3, #0]
 8004bb4:	695b      	ldr	r3, [r3, #20]
 8004bb6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004bba:	2b40      	cmp	r3, #64	; 0x40
 8004bbc:	d141      	bne.n	8004c42 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	681b      	ldr	r3, [r3, #0]
 8004bc2:	3314      	adds	r3, #20
 8004bc4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004bc8:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8004bcc:	e853 3f00 	ldrex	r3, [r3]
 8004bd0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8004bd4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8004bd8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004bdc:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	681b      	ldr	r3, [r3, #0]
 8004be4:	3314      	adds	r3, #20
 8004be6:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8004bea:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8004bee:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004bf2:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8004bf6:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8004bfa:	e841 2300 	strex	r3, r2, [r1]
 8004bfe:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8004c02:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8004c06:	2b00      	cmp	r3, #0
 8004c08:	d1d9      	bne.n	8004bbe <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c0e:	2b00      	cmp	r3, #0
 8004c10:	d013      	beq.n	8004c3a <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c16:	4a7d      	ldr	r2, [pc, #500]	; (8004e0c <HAL_UART_IRQHandler+0x3dc>)
 8004c18:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c1e:	4618      	mov	r0, r3
 8004c20:	f7fd fa05 	bl	800202e <HAL_DMA_Abort_IT>
 8004c24:	4603      	mov	r3, r0
 8004c26:	2b00      	cmp	r3, #0
 8004c28:	d016      	beq.n	8004c58 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c2e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004c30:	687a      	ldr	r2, [r7, #4]
 8004c32:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004c34:	4610      	mov	r0, r2
 8004c36:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004c38:	e00e      	b.n	8004c58 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8004c3a:	6878      	ldr	r0, [r7, #4]
 8004c3c:	f000 f990 	bl	8004f60 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004c40:	e00a      	b.n	8004c58 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004c42:	6878      	ldr	r0, [r7, #4]
 8004c44:	f000 f98c 	bl	8004f60 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004c48:	e006      	b.n	8004c58 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8004c4a:	6878      	ldr	r0, [r7, #4]
 8004c4c:	f000 f988 	bl	8004f60 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	2200      	movs	r2, #0
 8004c54:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8004c56:	e170      	b.n	8004f3a <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004c58:	bf00      	nop
    return;
 8004c5a:	e16e      	b.n	8004f3a <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c60:	2b01      	cmp	r3, #1
 8004c62:	f040 814a 	bne.w	8004efa <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8004c66:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004c6a:	f003 0310 	and.w	r3, r3, #16
 8004c6e:	2b00      	cmp	r3, #0
 8004c70:	f000 8143 	beq.w	8004efa <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8004c74:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004c78:	f003 0310 	and.w	r3, r3, #16
 8004c7c:	2b00      	cmp	r3, #0
 8004c7e:	f000 813c 	beq.w	8004efa <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004c82:	2300      	movs	r3, #0
 8004c84:	60bb      	str	r3, [r7, #8]
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	681b      	ldr	r3, [r3, #0]
 8004c8a:	681b      	ldr	r3, [r3, #0]
 8004c8c:	60bb      	str	r3, [r7, #8]
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	681b      	ldr	r3, [r3, #0]
 8004c92:	685b      	ldr	r3, [r3, #4]
 8004c94:	60bb      	str	r3, [r7, #8]
 8004c96:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	681b      	ldr	r3, [r3, #0]
 8004c9c:	695b      	ldr	r3, [r3, #20]
 8004c9e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004ca2:	2b40      	cmp	r3, #64	; 0x40
 8004ca4:	f040 80b4 	bne.w	8004e10 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004cac:	681b      	ldr	r3, [r3, #0]
 8004cae:	685b      	ldr	r3, [r3, #4]
 8004cb0:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8004cb4:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8004cb8:	2b00      	cmp	r3, #0
 8004cba:	f000 8140 	beq.w	8004f3e <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8004cc2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8004cc6:	429a      	cmp	r2, r3
 8004cc8:	f080 8139 	bcs.w	8004f3e <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8004cd2:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004cd8:	69db      	ldr	r3, [r3, #28]
 8004cda:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004cde:	f000 8088 	beq.w	8004df2 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	681b      	ldr	r3, [r3, #0]
 8004ce6:	330c      	adds	r3, #12
 8004ce8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004cec:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004cf0:	e853 3f00 	ldrex	r3, [r3]
 8004cf4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8004cf8:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004cfc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004d00:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	681b      	ldr	r3, [r3, #0]
 8004d08:	330c      	adds	r3, #12
 8004d0a:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8004d0e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8004d12:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d16:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8004d1a:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8004d1e:	e841 2300 	strex	r3, r2, [r1]
 8004d22:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8004d26:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004d2a:	2b00      	cmp	r3, #0
 8004d2c:	d1d9      	bne.n	8004ce2 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	681b      	ldr	r3, [r3, #0]
 8004d32:	3314      	adds	r3, #20
 8004d34:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d36:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004d38:	e853 3f00 	ldrex	r3, [r3]
 8004d3c:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8004d3e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004d40:	f023 0301 	bic.w	r3, r3, #1
 8004d44:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	681b      	ldr	r3, [r3, #0]
 8004d4c:	3314      	adds	r3, #20
 8004d4e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8004d52:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8004d56:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d58:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8004d5a:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8004d5e:	e841 2300 	strex	r3, r2, [r1]
 8004d62:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8004d64:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004d66:	2b00      	cmp	r3, #0
 8004d68:	d1e1      	bne.n	8004d2e <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	681b      	ldr	r3, [r3, #0]
 8004d6e:	3314      	adds	r3, #20
 8004d70:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d72:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004d74:	e853 3f00 	ldrex	r3, [r3]
 8004d78:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8004d7a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004d7c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004d80:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	681b      	ldr	r3, [r3, #0]
 8004d88:	3314      	adds	r3, #20
 8004d8a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8004d8e:	66fa      	str	r2, [r7, #108]	; 0x6c
 8004d90:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d92:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8004d94:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8004d96:	e841 2300 	strex	r3, r2, [r1]
 8004d9a:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8004d9c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004d9e:	2b00      	cmp	r3, #0
 8004da0:	d1e3      	bne.n	8004d6a <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	2220      	movs	r2, #32
 8004da6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	2200      	movs	r2, #0
 8004dae:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	681b      	ldr	r3, [r3, #0]
 8004db4:	330c      	adds	r3, #12
 8004db6:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004db8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004dba:	e853 3f00 	ldrex	r3, [r3]
 8004dbe:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8004dc0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004dc2:	f023 0310 	bic.w	r3, r3, #16
 8004dc6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	681b      	ldr	r3, [r3, #0]
 8004dce:	330c      	adds	r3, #12
 8004dd0:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8004dd4:	65ba      	str	r2, [r7, #88]	; 0x58
 8004dd6:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004dd8:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8004dda:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8004ddc:	e841 2300 	strex	r3, r2, [r1]
 8004de0:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8004de2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004de4:	2b00      	cmp	r3, #0
 8004de6:	d1e3      	bne.n	8004db0 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004dec:	4618      	mov	r0, r3
 8004dee:	f7fd f8ae 	bl	8001f4e <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004dfa:	b29b      	uxth	r3, r3
 8004dfc:	1ad3      	subs	r3, r2, r3
 8004dfe:	b29b      	uxth	r3, r3
 8004e00:	4619      	mov	r1, r3
 8004e02:	6878      	ldr	r0, [r7, #4]
 8004e04:	f000 f8b6 	bl	8004f74 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8004e08:	e099      	b.n	8004f3e <HAL_UART_IRQHandler+0x50e>
 8004e0a:	bf00      	nop
 8004e0c:	080051ab 	.word	0x080051ab
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004e18:	b29b      	uxth	r3, r3
 8004e1a:	1ad3      	subs	r3, r2, r3
 8004e1c:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004e24:	b29b      	uxth	r3, r3
 8004e26:	2b00      	cmp	r3, #0
 8004e28:	f000 808b 	beq.w	8004f42 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8004e2c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8004e30:	2b00      	cmp	r3, #0
 8004e32:	f000 8086 	beq.w	8004f42 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	681b      	ldr	r3, [r3, #0]
 8004e3a:	330c      	adds	r3, #12
 8004e3c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e3e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004e40:	e853 3f00 	ldrex	r3, [r3]
 8004e44:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8004e46:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004e48:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004e4c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	681b      	ldr	r3, [r3, #0]
 8004e54:	330c      	adds	r3, #12
 8004e56:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8004e5a:	647a      	str	r2, [r7, #68]	; 0x44
 8004e5c:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e5e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8004e60:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004e62:	e841 2300 	strex	r3, r2, [r1]
 8004e66:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8004e68:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004e6a:	2b00      	cmp	r3, #0
 8004e6c:	d1e3      	bne.n	8004e36 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	681b      	ldr	r3, [r3, #0]
 8004e72:	3314      	adds	r3, #20
 8004e74:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e78:	e853 3f00 	ldrex	r3, [r3]
 8004e7c:	623b      	str	r3, [r7, #32]
   return(result);
 8004e7e:	6a3b      	ldr	r3, [r7, #32]
 8004e80:	f023 0301 	bic.w	r3, r3, #1
 8004e84:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	681b      	ldr	r3, [r3, #0]
 8004e8c:	3314      	adds	r3, #20
 8004e8e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8004e92:	633a      	str	r2, [r7, #48]	; 0x30
 8004e94:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e96:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004e98:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004e9a:	e841 2300 	strex	r3, r2, [r1]
 8004e9e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8004ea0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ea2:	2b00      	cmp	r3, #0
 8004ea4:	d1e3      	bne.n	8004e6e <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	2220      	movs	r2, #32
 8004eaa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	2200      	movs	r2, #0
 8004eb2:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	681b      	ldr	r3, [r3, #0]
 8004eb8:	330c      	adds	r3, #12
 8004eba:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ebc:	693b      	ldr	r3, [r7, #16]
 8004ebe:	e853 3f00 	ldrex	r3, [r3]
 8004ec2:	60fb      	str	r3, [r7, #12]
   return(result);
 8004ec4:	68fb      	ldr	r3, [r7, #12]
 8004ec6:	f023 0310 	bic.w	r3, r3, #16
 8004eca:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	681b      	ldr	r3, [r3, #0]
 8004ed2:	330c      	adds	r3, #12
 8004ed4:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8004ed8:	61fa      	str	r2, [r7, #28]
 8004eda:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004edc:	69b9      	ldr	r1, [r7, #24]
 8004ede:	69fa      	ldr	r2, [r7, #28]
 8004ee0:	e841 2300 	strex	r3, r2, [r1]
 8004ee4:	617b      	str	r3, [r7, #20]
   return(result);
 8004ee6:	697b      	ldr	r3, [r7, #20]
 8004ee8:	2b00      	cmp	r3, #0
 8004eea:	d1e3      	bne.n	8004eb4 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8004eec:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8004ef0:	4619      	mov	r1, r3
 8004ef2:	6878      	ldr	r0, [r7, #4]
 8004ef4:	f000 f83e 	bl	8004f74 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8004ef8:	e023      	b.n	8004f42 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8004efa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004efe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004f02:	2b00      	cmp	r3, #0
 8004f04:	d009      	beq.n	8004f1a <HAL_UART_IRQHandler+0x4ea>
 8004f06:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004f0a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004f0e:	2b00      	cmp	r3, #0
 8004f10:	d003      	beq.n	8004f1a <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8004f12:	6878      	ldr	r0, [r7, #4]
 8004f14:	f000 f95d 	bl	80051d2 <UART_Transmit_IT>
    return;
 8004f18:	e014      	b.n	8004f44 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8004f1a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004f1e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004f22:	2b00      	cmp	r3, #0
 8004f24:	d00e      	beq.n	8004f44 <HAL_UART_IRQHandler+0x514>
 8004f26:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004f2a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004f2e:	2b00      	cmp	r3, #0
 8004f30:	d008      	beq.n	8004f44 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8004f32:	6878      	ldr	r0, [r7, #4]
 8004f34:	f000 f99d 	bl	8005272 <UART_EndTransmit_IT>
    return;
 8004f38:	e004      	b.n	8004f44 <HAL_UART_IRQHandler+0x514>
    return;
 8004f3a:	bf00      	nop
 8004f3c:	e002      	b.n	8004f44 <HAL_UART_IRQHandler+0x514>
      return;
 8004f3e:	bf00      	nop
 8004f40:	e000      	b.n	8004f44 <HAL_UART_IRQHandler+0x514>
      return;
 8004f42:	bf00      	nop
  }
}
 8004f44:	37e8      	adds	r7, #232	; 0xe8
 8004f46:	46bd      	mov	sp, r7
 8004f48:	bd80      	pop	{r7, pc}
 8004f4a:	bf00      	nop

08004f4c <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004f4c:	b480      	push	{r7}
 8004f4e:	b083      	sub	sp, #12
 8004f50:	af00      	add	r7, sp, #0
 8004f52:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8004f54:	bf00      	nop
 8004f56:	370c      	adds	r7, #12
 8004f58:	46bd      	mov	sp, r7
 8004f5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f5e:	4770      	bx	lr

08004f60 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004f60:	b480      	push	{r7}
 8004f62:	b083      	sub	sp, #12
 8004f64:	af00      	add	r7, sp, #0
 8004f66:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8004f68:	bf00      	nop
 8004f6a:	370c      	adds	r7, #12
 8004f6c:	46bd      	mov	sp, r7
 8004f6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f72:	4770      	bx	lr

08004f74 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8004f74:	b480      	push	{r7}
 8004f76:	b083      	sub	sp, #12
 8004f78:	af00      	add	r7, sp, #0
 8004f7a:	6078      	str	r0, [r7, #4]
 8004f7c:	460b      	mov	r3, r1
 8004f7e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8004f80:	bf00      	nop
 8004f82:	370c      	adds	r7, #12
 8004f84:	46bd      	mov	sp, r7
 8004f86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f8a:	4770      	bx	lr

08004f8c <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8004f8c:	b580      	push	{r7, lr}
 8004f8e:	b090      	sub	sp, #64	; 0x40
 8004f90:	af00      	add	r7, sp, #0
 8004f92:	60f8      	str	r0, [r7, #12]
 8004f94:	60b9      	str	r1, [r7, #8]
 8004f96:	603b      	str	r3, [r7, #0]
 8004f98:	4613      	mov	r3, r2
 8004f9a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004f9c:	e050      	b.n	8005040 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004f9e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004fa0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004fa4:	d04c      	beq.n	8005040 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8004fa6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004fa8:	2b00      	cmp	r3, #0
 8004faa:	d007      	beq.n	8004fbc <UART_WaitOnFlagUntilTimeout+0x30>
 8004fac:	f7fc fe8e 	bl	8001ccc <HAL_GetTick>
 8004fb0:	4602      	mov	r2, r0
 8004fb2:	683b      	ldr	r3, [r7, #0]
 8004fb4:	1ad3      	subs	r3, r2, r3
 8004fb6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004fb8:	429a      	cmp	r2, r3
 8004fba:	d241      	bcs.n	8005040 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004fbc:	68fb      	ldr	r3, [r7, #12]
 8004fbe:	681b      	ldr	r3, [r3, #0]
 8004fc0:	330c      	adds	r3, #12
 8004fc2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004fc4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004fc6:	e853 3f00 	ldrex	r3, [r3]
 8004fca:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004fcc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fce:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004fd2:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004fd4:	68fb      	ldr	r3, [r7, #12]
 8004fd6:	681b      	ldr	r3, [r3, #0]
 8004fd8:	330c      	adds	r3, #12
 8004fda:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8004fdc:	637a      	str	r2, [r7, #52]	; 0x34
 8004fde:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004fe0:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004fe2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004fe4:	e841 2300 	strex	r3, r2, [r1]
 8004fe8:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8004fea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004fec:	2b00      	cmp	r3, #0
 8004fee:	d1e5      	bne.n	8004fbc <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004ff0:	68fb      	ldr	r3, [r7, #12]
 8004ff2:	681b      	ldr	r3, [r3, #0]
 8004ff4:	3314      	adds	r3, #20
 8004ff6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ff8:	697b      	ldr	r3, [r7, #20]
 8004ffa:	e853 3f00 	ldrex	r3, [r3]
 8004ffe:	613b      	str	r3, [r7, #16]
   return(result);
 8005000:	693b      	ldr	r3, [r7, #16]
 8005002:	f023 0301 	bic.w	r3, r3, #1
 8005006:	63bb      	str	r3, [r7, #56]	; 0x38
 8005008:	68fb      	ldr	r3, [r7, #12]
 800500a:	681b      	ldr	r3, [r3, #0]
 800500c:	3314      	adds	r3, #20
 800500e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005010:	623a      	str	r2, [r7, #32]
 8005012:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005014:	69f9      	ldr	r1, [r7, #28]
 8005016:	6a3a      	ldr	r2, [r7, #32]
 8005018:	e841 2300 	strex	r3, r2, [r1]
 800501c:	61bb      	str	r3, [r7, #24]
   return(result);
 800501e:	69bb      	ldr	r3, [r7, #24]
 8005020:	2b00      	cmp	r3, #0
 8005022:	d1e5      	bne.n	8004ff0 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8005024:	68fb      	ldr	r3, [r7, #12]
 8005026:	2220      	movs	r2, #32
 8005028:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 800502c:	68fb      	ldr	r3, [r7, #12]
 800502e:	2220      	movs	r2, #32
 8005030:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8005034:	68fb      	ldr	r3, [r7, #12]
 8005036:	2200      	movs	r2, #0
 8005038:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 800503c:	2303      	movs	r3, #3
 800503e:	e00f      	b.n	8005060 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005040:	68fb      	ldr	r3, [r7, #12]
 8005042:	681b      	ldr	r3, [r3, #0]
 8005044:	681a      	ldr	r2, [r3, #0]
 8005046:	68bb      	ldr	r3, [r7, #8]
 8005048:	4013      	ands	r3, r2
 800504a:	68ba      	ldr	r2, [r7, #8]
 800504c:	429a      	cmp	r2, r3
 800504e:	bf0c      	ite	eq
 8005050:	2301      	moveq	r3, #1
 8005052:	2300      	movne	r3, #0
 8005054:	b2db      	uxtb	r3, r3
 8005056:	461a      	mov	r2, r3
 8005058:	79fb      	ldrb	r3, [r7, #7]
 800505a:	429a      	cmp	r2, r3
 800505c:	d09f      	beq.n	8004f9e <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800505e:	2300      	movs	r3, #0
}
 8005060:	4618      	mov	r0, r3
 8005062:	3740      	adds	r7, #64	; 0x40
 8005064:	46bd      	mov	sp, r7
 8005066:	bd80      	pop	{r7, pc}

08005068 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005068:	b480      	push	{r7}
 800506a:	b085      	sub	sp, #20
 800506c:	af00      	add	r7, sp, #0
 800506e:	60f8      	str	r0, [r7, #12]
 8005070:	60b9      	str	r1, [r7, #8]
 8005072:	4613      	mov	r3, r2
 8005074:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8005076:	68fb      	ldr	r3, [r7, #12]
 8005078:	68ba      	ldr	r2, [r7, #8]
 800507a:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 800507c:	68fb      	ldr	r3, [r7, #12]
 800507e:	88fa      	ldrh	r2, [r7, #6]
 8005080:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8005082:	68fb      	ldr	r3, [r7, #12]
 8005084:	88fa      	ldrh	r2, [r7, #6]
 8005086:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005088:	68fb      	ldr	r3, [r7, #12]
 800508a:	2200      	movs	r2, #0
 800508c:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800508e:	68fb      	ldr	r3, [r7, #12]
 8005090:	2222      	movs	r2, #34	; 0x22
 8005092:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005096:	68fb      	ldr	r3, [r7, #12]
 8005098:	2200      	movs	r2, #0
 800509a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 800509e:	68fb      	ldr	r3, [r7, #12]
 80050a0:	691b      	ldr	r3, [r3, #16]
 80050a2:	2b00      	cmp	r3, #0
 80050a4:	d007      	beq.n	80050b6 <UART_Start_Receive_IT+0x4e>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 80050a6:	68fb      	ldr	r3, [r7, #12]
 80050a8:	681b      	ldr	r3, [r3, #0]
 80050aa:	68da      	ldr	r2, [r3, #12]
 80050ac:	68fb      	ldr	r3, [r7, #12]
 80050ae:	681b      	ldr	r3, [r3, #0]
 80050b0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80050b4:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 80050b6:	68fb      	ldr	r3, [r7, #12]
 80050b8:	681b      	ldr	r3, [r3, #0]
 80050ba:	695a      	ldr	r2, [r3, #20]
 80050bc:	68fb      	ldr	r3, [r7, #12]
 80050be:	681b      	ldr	r3, [r3, #0]
 80050c0:	f042 0201 	orr.w	r2, r2, #1
 80050c4:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 80050c6:	68fb      	ldr	r3, [r7, #12]
 80050c8:	681b      	ldr	r3, [r3, #0]
 80050ca:	68da      	ldr	r2, [r3, #12]
 80050cc:	68fb      	ldr	r3, [r7, #12]
 80050ce:	681b      	ldr	r3, [r3, #0]
 80050d0:	f042 0220 	orr.w	r2, r2, #32
 80050d4:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80050d6:	2300      	movs	r3, #0
}
 80050d8:	4618      	mov	r0, r3
 80050da:	3714      	adds	r7, #20
 80050dc:	46bd      	mov	sp, r7
 80050de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050e2:	4770      	bx	lr

080050e4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80050e4:	b480      	push	{r7}
 80050e6:	b095      	sub	sp, #84	; 0x54
 80050e8:	af00      	add	r7, sp, #0
 80050ea:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	681b      	ldr	r3, [r3, #0]
 80050f0:	330c      	adds	r3, #12
 80050f2:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80050f4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80050f6:	e853 3f00 	ldrex	r3, [r3]
 80050fa:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80050fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80050fe:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005102:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	681b      	ldr	r3, [r3, #0]
 8005108:	330c      	adds	r3, #12
 800510a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800510c:	643a      	str	r2, [r7, #64]	; 0x40
 800510e:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005110:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8005112:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005114:	e841 2300 	strex	r3, r2, [r1]
 8005118:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800511a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800511c:	2b00      	cmp	r3, #0
 800511e:	d1e5      	bne.n	80050ec <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	681b      	ldr	r3, [r3, #0]
 8005124:	3314      	adds	r3, #20
 8005126:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005128:	6a3b      	ldr	r3, [r7, #32]
 800512a:	e853 3f00 	ldrex	r3, [r3]
 800512e:	61fb      	str	r3, [r7, #28]
   return(result);
 8005130:	69fb      	ldr	r3, [r7, #28]
 8005132:	f023 0301 	bic.w	r3, r3, #1
 8005136:	64bb      	str	r3, [r7, #72]	; 0x48
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	681b      	ldr	r3, [r3, #0]
 800513c:	3314      	adds	r3, #20
 800513e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005140:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005142:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005144:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005146:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005148:	e841 2300 	strex	r3, r2, [r1]
 800514c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800514e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005150:	2b00      	cmp	r3, #0
 8005152:	d1e5      	bne.n	8005120 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005158:	2b01      	cmp	r3, #1
 800515a:	d119      	bne.n	8005190 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	681b      	ldr	r3, [r3, #0]
 8005160:	330c      	adds	r3, #12
 8005162:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005164:	68fb      	ldr	r3, [r7, #12]
 8005166:	e853 3f00 	ldrex	r3, [r3]
 800516a:	60bb      	str	r3, [r7, #8]
   return(result);
 800516c:	68bb      	ldr	r3, [r7, #8]
 800516e:	f023 0310 	bic.w	r3, r3, #16
 8005172:	647b      	str	r3, [r7, #68]	; 0x44
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	681b      	ldr	r3, [r3, #0]
 8005178:	330c      	adds	r3, #12
 800517a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800517c:	61ba      	str	r2, [r7, #24]
 800517e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005180:	6979      	ldr	r1, [r7, #20]
 8005182:	69ba      	ldr	r2, [r7, #24]
 8005184:	e841 2300 	strex	r3, r2, [r1]
 8005188:	613b      	str	r3, [r7, #16]
   return(result);
 800518a:	693b      	ldr	r3, [r7, #16]
 800518c:	2b00      	cmp	r3, #0
 800518e:	d1e5      	bne.n	800515c <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	2220      	movs	r2, #32
 8005194:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	2200      	movs	r2, #0
 800519c:	631a      	str	r2, [r3, #48]	; 0x30
}
 800519e:	bf00      	nop
 80051a0:	3754      	adds	r7, #84	; 0x54
 80051a2:	46bd      	mov	sp, r7
 80051a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051a8:	4770      	bx	lr

080051aa <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80051aa:	b580      	push	{r7, lr}
 80051ac:	b084      	sub	sp, #16
 80051ae:	af00      	add	r7, sp, #0
 80051b0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80051b6:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80051b8:	68fb      	ldr	r3, [r7, #12]
 80051ba:	2200      	movs	r2, #0
 80051bc:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80051be:	68fb      	ldr	r3, [r7, #12]
 80051c0:	2200      	movs	r2, #0
 80051c2:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80051c4:	68f8      	ldr	r0, [r7, #12]
 80051c6:	f7ff fecb 	bl	8004f60 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80051ca:	bf00      	nop
 80051cc:	3710      	adds	r7, #16
 80051ce:	46bd      	mov	sp, r7
 80051d0:	bd80      	pop	{r7, pc}

080051d2 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80051d2:	b480      	push	{r7}
 80051d4:	b085      	sub	sp, #20
 80051d6:	af00      	add	r7, sp, #0
 80051d8:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80051e0:	b2db      	uxtb	r3, r3
 80051e2:	2b21      	cmp	r3, #33	; 0x21
 80051e4:	d13e      	bne.n	8005264 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	689b      	ldr	r3, [r3, #8]
 80051ea:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80051ee:	d114      	bne.n	800521a <UART_Transmit_IT+0x48>
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	691b      	ldr	r3, [r3, #16]
 80051f4:	2b00      	cmp	r3, #0
 80051f6:	d110      	bne.n	800521a <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	6a1b      	ldr	r3, [r3, #32]
 80051fc:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80051fe:	68fb      	ldr	r3, [r7, #12]
 8005200:	881b      	ldrh	r3, [r3, #0]
 8005202:	461a      	mov	r2, r3
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	681b      	ldr	r3, [r3, #0]
 8005208:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800520c:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	6a1b      	ldr	r3, [r3, #32]
 8005212:	1c9a      	adds	r2, r3, #2
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	621a      	str	r2, [r3, #32]
 8005218:	e008      	b.n	800522c <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	6a1b      	ldr	r3, [r3, #32]
 800521e:	1c59      	adds	r1, r3, #1
 8005220:	687a      	ldr	r2, [r7, #4]
 8005222:	6211      	str	r1, [r2, #32]
 8005224:	781a      	ldrb	r2, [r3, #0]
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	681b      	ldr	r3, [r3, #0]
 800522a:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005230:	b29b      	uxth	r3, r3
 8005232:	3b01      	subs	r3, #1
 8005234:	b29b      	uxth	r3, r3
 8005236:	687a      	ldr	r2, [r7, #4]
 8005238:	4619      	mov	r1, r3
 800523a:	84d1      	strh	r1, [r2, #38]	; 0x26
 800523c:	2b00      	cmp	r3, #0
 800523e:	d10f      	bne.n	8005260 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	681b      	ldr	r3, [r3, #0]
 8005244:	68da      	ldr	r2, [r3, #12]
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	681b      	ldr	r3, [r3, #0]
 800524a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800524e:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	681b      	ldr	r3, [r3, #0]
 8005254:	68da      	ldr	r2, [r3, #12]
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	681b      	ldr	r3, [r3, #0]
 800525a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800525e:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8005260:	2300      	movs	r3, #0
 8005262:	e000      	b.n	8005266 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8005264:	2302      	movs	r3, #2
  }
}
 8005266:	4618      	mov	r0, r3
 8005268:	3714      	adds	r7, #20
 800526a:	46bd      	mov	sp, r7
 800526c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005270:	4770      	bx	lr

08005272 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8005272:	b580      	push	{r7, lr}
 8005274:	b082      	sub	sp, #8
 8005276:	af00      	add	r7, sp, #0
 8005278:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	681b      	ldr	r3, [r3, #0]
 800527e:	68da      	ldr	r2, [r3, #12]
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	681b      	ldr	r3, [r3, #0]
 8005284:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005288:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	2220      	movs	r2, #32
 800528e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8005292:	6878      	ldr	r0, [r7, #4]
 8005294:	f7ff fe5a 	bl	8004f4c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8005298:	2300      	movs	r3, #0
}
 800529a:	4618      	mov	r0, r3
 800529c:	3708      	adds	r7, #8
 800529e:	46bd      	mov	sp, r7
 80052a0:	bd80      	pop	{r7, pc}

080052a2 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80052a2:	b580      	push	{r7, lr}
 80052a4:	b08c      	sub	sp, #48	; 0x30
 80052a6:	af00      	add	r7, sp, #0
 80052a8:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80052b0:	b2db      	uxtb	r3, r3
 80052b2:	2b22      	cmp	r3, #34	; 0x22
 80052b4:	f040 80b9 	bne.w	800542a <UART_Receive_IT+0x188>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	689b      	ldr	r3, [r3, #8]
 80052bc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80052c0:	d117      	bne.n	80052f2 <UART_Receive_IT+0x50>
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	691b      	ldr	r3, [r3, #16]
 80052c6:	2b00      	cmp	r3, #0
 80052c8:	d113      	bne.n	80052f2 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80052ca:	2300      	movs	r3, #0
 80052cc:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80052d2:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	681b      	ldr	r3, [r3, #0]
 80052d8:	685b      	ldr	r3, [r3, #4]
 80052da:	b29b      	uxth	r3, r3
 80052dc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80052e0:	b29a      	uxth	r2, r3
 80052e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80052e4:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80052ea:	1c9a      	adds	r2, r3, #2
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	629a      	str	r2, [r3, #40]	; 0x28
 80052f0:	e026      	b.n	8005340 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80052f6:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 80052f8:	2300      	movs	r3, #0
 80052fa:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	689b      	ldr	r3, [r3, #8]
 8005300:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005304:	d007      	beq.n	8005316 <UART_Receive_IT+0x74>
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	689b      	ldr	r3, [r3, #8]
 800530a:	2b00      	cmp	r3, #0
 800530c:	d10a      	bne.n	8005324 <UART_Receive_IT+0x82>
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	691b      	ldr	r3, [r3, #16]
 8005312:	2b00      	cmp	r3, #0
 8005314:	d106      	bne.n	8005324 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	681b      	ldr	r3, [r3, #0]
 800531a:	685b      	ldr	r3, [r3, #4]
 800531c:	b2da      	uxtb	r2, r3
 800531e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005320:	701a      	strb	r2, [r3, #0]
 8005322:	e008      	b.n	8005336 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	681b      	ldr	r3, [r3, #0]
 8005328:	685b      	ldr	r3, [r3, #4]
 800532a:	b2db      	uxtb	r3, r3
 800532c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005330:	b2da      	uxtb	r2, r3
 8005332:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005334:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800533a:	1c5a      	adds	r2, r3, #1
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if ((--huart->RxXferCount == 0U) || (strchr(pdata8bits,'\n') != '\0') || (strchr(pdata8bits,'\r') != '\0'))
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005344:	b29b      	uxth	r3, r3
 8005346:	3b01      	subs	r3, #1
 8005348:	b29b      	uxth	r3, r3
 800534a:	687a      	ldr	r2, [r7, #4]
 800534c:	4619      	mov	r1, r3
 800534e:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8005350:	2b00      	cmp	r3, #0
 8005352:	d00d      	beq.n	8005370 <UART_Receive_IT+0xce>
 8005354:	210a      	movs	r1, #10
 8005356:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8005358:	f000 fe32 	bl	8005fc0 <strchr>
 800535c:	4603      	mov	r3, r0
 800535e:	2b00      	cmp	r3, #0
 8005360:	d106      	bne.n	8005370 <UART_Receive_IT+0xce>
 8005362:	210d      	movs	r1, #13
 8005364:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8005366:	f000 fe2b 	bl	8005fc0 <strchr>
 800536a:	4603      	mov	r3, r0
 800536c:	2b00      	cmp	r3, #0
 800536e:	d05a      	beq.n	8005426 <UART_Receive_IT+0x184>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	681b      	ldr	r3, [r3, #0]
 8005374:	68da      	ldr	r2, [r3, #12]
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	681b      	ldr	r3, [r3, #0]
 800537a:	f022 0220 	bic.w	r2, r2, #32
 800537e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	681b      	ldr	r3, [r3, #0]
 8005384:	68da      	ldr	r2, [r3, #12]
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	681b      	ldr	r3, [r3, #0]
 800538a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800538e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	681b      	ldr	r3, [r3, #0]
 8005394:	695a      	ldr	r2, [r3, #20]
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	681b      	ldr	r3, [r3, #0]
 800539a:	f022 0201 	bic.w	r2, r2, #1
 800539e:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	2220      	movs	r2, #32
 80053a4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80053ac:	2b01      	cmp	r3, #1
 80053ae:	d135      	bne.n	800541c <UART_Receive_IT+0x17a>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	2200      	movs	r2, #0
 80053b4:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	681b      	ldr	r3, [r3, #0]
 80053ba:	330c      	adds	r3, #12
 80053bc:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80053be:	697b      	ldr	r3, [r7, #20]
 80053c0:	e853 3f00 	ldrex	r3, [r3]
 80053c4:	613b      	str	r3, [r7, #16]
   return(result);
 80053c6:	693b      	ldr	r3, [r7, #16]
 80053c8:	f023 0310 	bic.w	r3, r3, #16
 80053cc:	627b      	str	r3, [r7, #36]	; 0x24
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	681b      	ldr	r3, [r3, #0]
 80053d2:	330c      	adds	r3, #12
 80053d4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80053d6:	623a      	str	r2, [r7, #32]
 80053d8:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80053da:	69f9      	ldr	r1, [r7, #28]
 80053dc:	6a3a      	ldr	r2, [r7, #32]
 80053de:	e841 2300 	strex	r3, r2, [r1]
 80053e2:	61bb      	str	r3, [r7, #24]
   return(result);
 80053e4:	69bb      	ldr	r3, [r7, #24]
 80053e6:	2b00      	cmp	r3, #0
 80053e8:	d1e5      	bne.n	80053b6 <UART_Receive_IT+0x114>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	681b      	ldr	r3, [r3, #0]
 80053ee:	681b      	ldr	r3, [r3, #0]
 80053f0:	f003 0310 	and.w	r3, r3, #16
 80053f4:	2b10      	cmp	r3, #16
 80053f6:	d10a      	bne.n	800540e <UART_Receive_IT+0x16c>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80053f8:	2300      	movs	r3, #0
 80053fa:	60fb      	str	r3, [r7, #12]
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	681b      	ldr	r3, [r3, #0]
 8005400:	681b      	ldr	r3, [r3, #0]
 8005402:	60fb      	str	r3, [r7, #12]
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	681b      	ldr	r3, [r3, #0]
 8005408:	685b      	ldr	r3, [r3, #4]
 800540a:	60fb      	str	r3, [r7, #12]
 800540c:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8005412:	4619      	mov	r1, r3
 8005414:	6878      	ldr	r0, [r7, #4]
 8005416:	f7ff fdad 	bl	8004f74 <HAL_UARTEx_RxEventCallback>
 800541a:	e002      	b.n	8005422 <UART_Receive_IT+0x180>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800541c:	6878      	ldr	r0, [r7, #4]
 800541e:	f7fc f939 	bl	8001694 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8005422:	2300      	movs	r3, #0
 8005424:	e002      	b.n	800542c <UART_Receive_IT+0x18a>
    }
    return HAL_OK;
 8005426:	2300      	movs	r3, #0
 8005428:	e000      	b.n	800542c <UART_Receive_IT+0x18a>
  }
  else
  {
    return HAL_BUSY;
 800542a:	2302      	movs	r3, #2
  }
}
 800542c:	4618      	mov	r0, r3
 800542e:	3730      	adds	r7, #48	; 0x30
 8005430:	46bd      	mov	sp, r7
 8005432:	bd80      	pop	{r7, pc}

08005434 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005434:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005438:	b0c0      	sub	sp, #256	; 0x100
 800543a:	af00      	add	r7, sp, #0
 800543c:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005440:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005444:	681b      	ldr	r3, [r3, #0]
 8005446:	691b      	ldr	r3, [r3, #16]
 8005448:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 800544c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005450:	68d9      	ldr	r1, [r3, #12]
 8005452:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005456:	681a      	ldr	r2, [r3, #0]
 8005458:	ea40 0301 	orr.w	r3, r0, r1
 800545c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800545e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005462:	689a      	ldr	r2, [r3, #8]
 8005464:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005468:	691b      	ldr	r3, [r3, #16]
 800546a:	431a      	orrs	r2, r3
 800546c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005470:	695b      	ldr	r3, [r3, #20]
 8005472:	431a      	orrs	r2, r3
 8005474:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005478:	69db      	ldr	r3, [r3, #28]
 800547a:	4313      	orrs	r3, r2
 800547c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8005480:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005484:	681b      	ldr	r3, [r3, #0]
 8005486:	68db      	ldr	r3, [r3, #12]
 8005488:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 800548c:	f021 010c 	bic.w	r1, r1, #12
 8005490:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005494:	681a      	ldr	r2, [r3, #0]
 8005496:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800549a:	430b      	orrs	r3, r1
 800549c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800549e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80054a2:	681b      	ldr	r3, [r3, #0]
 80054a4:	695b      	ldr	r3, [r3, #20]
 80054a6:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80054aa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80054ae:	6999      	ldr	r1, [r3, #24]
 80054b0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80054b4:	681a      	ldr	r2, [r3, #0]
 80054b6:	ea40 0301 	orr.w	r3, r0, r1
 80054ba:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80054bc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80054c0:	681a      	ldr	r2, [r3, #0]
 80054c2:	4b8f      	ldr	r3, [pc, #572]	; (8005700 <UART_SetConfig+0x2cc>)
 80054c4:	429a      	cmp	r2, r3
 80054c6:	d005      	beq.n	80054d4 <UART_SetConfig+0xa0>
 80054c8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80054cc:	681a      	ldr	r2, [r3, #0]
 80054ce:	4b8d      	ldr	r3, [pc, #564]	; (8005704 <UART_SetConfig+0x2d0>)
 80054d0:	429a      	cmp	r2, r3
 80054d2:	d104      	bne.n	80054de <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80054d4:	f7ff f988 	bl	80047e8 <HAL_RCC_GetPCLK2Freq>
 80054d8:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 80054dc:	e003      	b.n	80054e6 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80054de:	f7ff f96f 	bl	80047c0 <HAL_RCC_GetPCLK1Freq>
 80054e2:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80054e6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80054ea:	69db      	ldr	r3, [r3, #28]
 80054ec:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80054f0:	f040 810c 	bne.w	800570c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80054f4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80054f8:	2200      	movs	r2, #0
 80054fa:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80054fe:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8005502:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8005506:	4622      	mov	r2, r4
 8005508:	462b      	mov	r3, r5
 800550a:	1891      	adds	r1, r2, r2
 800550c:	65b9      	str	r1, [r7, #88]	; 0x58
 800550e:	415b      	adcs	r3, r3
 8005510:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005512:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8005516:	4621      	mov	r1, r4
 8005518:	eb12 0801 	adds.w	r8, r2, r1
 800551c:	4629      	mov	r1, r5
 800551e:	eb43 0901 	adc.w	r9, r3, r1
 8005522:	f04f 0200 	mov.w	r2, #0
 8005526:	f04f 0300 	mov.w	r3, #0
 800552a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800552e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8005532:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8005536:	4690      	mov	r8, r2
 8005538:	4699      	mov	r9, r3
 800553a:	4623      	mov	r3, r4
 800553c:	eb18 0303 	adds.w	r3, r8, r3
 8005540:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8005544:	462b      	mov	r3, r5
 8005546:	eb49 0303 	adc.w	r3, r9, r3
 800554a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800554e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005552:	685b      	ldr	r3, [r3, #4]
 8005554:	2200      	movs	r2, #0
 8005556:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800555a:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800555e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8005562:	460b      	mov	r3, r1
 8005564:	18db      	adds	r3, r3, r3
 8005566:	653b      	str	r3, [r7, #80]	; 0x50
 8005568:	4613      	mov	r3, r2
 800556a:	eb42 0303 	adc.w	r3, r2, r3
 800556e:	657b      	str	r3, [r7, #84]	; 0x54
 8005570:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8005574:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8005578:	f7fb fb10 	bl	8000b9c <__aeabi_uldivmod>
 800557c:	4602      	mov	r2, r0
 800557e:	460b      	mov	r3, r1
 8005580:	4b61      	ldr	r3, [pc, #388]	; (8005708 <UART_SetConfig+0x2d4>)
 8005582:	fba3 2302 	umull	r2, r3, r3, r2
 8005586:	095b      	lsrs	r3, r3, #5
 8005588:	011c      	lsls	r4, r3, #4
 800558a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800558e:	2200      	movs	r2, #0
 8005590:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8005594:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8005598:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 800559c:	4642      	mov	r2, r8
 800559e:	464b      	mov	r3, r9
 80055a0:	1891      	adds	r1, r2, r2
 80055a2:	64b9      	str	r1, [r7, #72]	; 0x48
 80055a4:	415b      	adcs	r3, r3
 80055a6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80055a8:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80055ac:	4641      	mov	r1, r8
 80055ae:	eb12 0a01 	adds.w	sl, r2, r1
 80055b2:	4649      	mov	r1, r9
 80055b4:	eb43 0b01 	adc.w	fp, r3, r1
 80055b8:	f04f 0200 	mov.w	r2, #0
 80055bc:	f04f 0300 	mov.w	r3, #0
 80055c0:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80055c4:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80055c8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80055cc:	4692      	mov	sl, r2
 80055ce:	469b      	mov	fp, r3
 80055d0:	4643      	mov	r3, r8
 80055d2:	eb1a 0303 	adds.w	r3, sl, r3
 80055d6:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80055da:	464b      	mov	r3, r9
 80055dc:	eb4b 0303 	adc.w	r3, fp, r3
 80055e0:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80055e4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80055e8:	685b      	ldr	r3, [r3, #4]
 80055ea:	2200      	movs	r2, #0
 80055ec:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80055f0:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 80055f4:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 80055f8:	460b      	mov	r3, r1
 80055fa:	18db      	adds	r3, r3, r3
 80055fc:	643b      	str	r3, [r7, #64]	; 0x40
 80055fe:	4613      	mov	r3, r2
 8005600:	eb42 0303 	adc.w	r3, r2, r3
 8005604:	647b      	str	r3, [r7, #68]	; 0x44
 8005606:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800560a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800560e:	f7fb fac5 	bl	8000b9c <__aeabi_uldivmod>
 8005612:	4602      	mov	r2, r0
 8005614:	460b      	mov	r3, r1
 8005616:	4611      	mov	r1, r2
 8005618:	4b3b      	ldr	r3, [pc, #236]	; (8005708 <UART_SetConfig+0x2d4>)
 800561a:	fba3 2301 	umull	r2, r3, r3, r1
 800561e:	095b      	lsrs	r3, r3, #5
 8005620:	2264      	movs	r2, #100	; 0x64
 8005622:	fb02 f303 	mul.w	r3, r2, r3
 8005626:	1acb      	subs	r3, r1, r3
 8005628:	00db      	lsls	r3, r3, #3
 800562a:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800562e:	4b36      	ldr	r3, [pc, #216]	; (8005708 <UART_SetConfig+0x2d4>)
 8005630:	fba3 2302 	umull	r2, r3, r3, r2
 8005634:	095b      	lsrs	r3, r3, #5
 8005636:	005b      	lsls	r3, r3, #1
 8005638:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800563c:	441c      	add	r4, r3
 800563e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005642:	2200      	movs	r2, #0
 8005644:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8005648:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 800564c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8005650:	4642      	mov	r2, r8
 8005652:	464b      	mov	r3, r9
 8005654:	1891      	adds	r1, r2, r2
 8005656:	63b9      	str	r1, [r7, #56]	; 0x38
 8005658:	415b      	adcs	r3, r3
 800565a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800565c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8005660:	4641      	mov	r1, r8
 8005662:	1851      	adds	r1, r2, r1
 8005664:	6339      	str	r1, [r7, #48]	; 0x30
 8005666:	4649      	mov	r1, r9
 8005668:	414b      	adcs	r3, r1
 800566a:	637b      	str	r3, [r7, #52]	; 0x34
 800566c:	f04f 0200 	mov.w	r2, #0
 8005670:	f04f 0300 	mov.w	r3, #0
 8005674:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8005678:	4659      	mov	r1, fp
 800567a:	00cb      	lsls	r3, r1, #3
 800567c:	4651      	mov	r1, sl
 800567e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005682:	4651      	mov	r1, sl
 8005684:	00ca      	lsls	r2, r1, #3
 8005686:	4610      	mov	r0, r2
 8005688:	4619      	mov	r1, r3
 800568a:	4603      	mov	r3, r0
 800568c:	4642      	mov	r2, r8
 800568e:	189b      	adds	r3, r3, r2
 8005690:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8005694:	464b      	mov	r3, r9
 8005696:	460a      	mov	r2, r1
 8005698:	eb42 0303 	adc.w	r3, r2, r3
 800569c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80056a0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80056a4:	685b      	ldr	r3, [r3, #4]
 80056a6:	2200      	movs	r2, #0
 80056a8:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80056ac:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 80056b0:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 80056b4:	460b      	mov	r3, r1
 80056b6:	18db      	adds	r3, r3, r3
 80056b8:	62bb      	str	r3, [r7, #40]	; 0x28
 80056ba:	4613      	mov	r3, r2
 80056bc:	eb42 0303 	adc.w	r3, r2, r3
 80056c0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80056c2:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80056c6:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 80056ca:	f7fb fa67 	bl	8000b9c <__aeabi_uldivmod>
 80056ce:	4602      	mov	r2, r0
 80056d0:	460b      	mov	r3, r1
 80056d2:	4b0d      	ldr	r3, [pc, #52]	; (8005708 <UART_SetConfig+0x2d4>)
 80056d4:	fba3 1302 	umull	r1, r3, r3, r2
 80056d8:	095b      	lsrs	r3, r3, #5
 80056da:	2164      	movs	r1, #100	; 0x64
 80056dc:	fb01 f303 	mul.w	r3, r1, r3
 80056e0:	1ad3      	subs	r3, r2, r3
 80056e2:	00db      	lsls	r3, r3, #3
 80056e4:	3332      	adds	r3, #50	; 0x32
 80056e6:	4a08      	ldr	r2, [pc, #32]	; (8005708 <UART_SetConfig+0x2d4>)
 80056e8:	fba2 2303 	umull	r2, r3, r2, r3
 80056ec:	095b      	lsrs	r3, r3, #5
 80056ee:	f003 0207 	and.w	r2, r3, #7
 80056f2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80056f6:	681b      	ldr	r3, [r3, #0]
 80056f8:	4422      	add	r2, r4
 80056fa:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80056fc:	e105      	b.n	800590a <UART_SetConfig+0x4d6>
 80056fe:	bf00      	nop
 8005700:	40011000 	.word	0x40011000
 8005704:	40011400 	.word	0x40011400
 8005708:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800570c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005710:	2200      	movs	r2, #0
 8005712:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8005716:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800571a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 800571e:	4642      	mov	r2, r8
 8005720:	464b      	mov	r3, r9
 8005722:	1891      	adds	r1, r2, r2
 8005724:	6239      	str	r1, [r7, #32]
 8005726:	415b      	adcs	r3, r3
 8005728:	627b      	str	r3, [r7, #36]	; 0x24
 800572a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800572e:	4641      	mov	r1, r8
 8005730:	1854      	adds	r4, r2, r1
 8005732:	4649      	mov	r1, r9
 8005734:	eb43 0501 	adc.w	r5, r3, r1
 8005738:	f04f 0200 	mov.w	r2, #0
 800573c:	f04f 0300 	mov.w	r3, #0
 8005740:	00eb      	lsls	r3, r5, #3
 8005742:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005746:	00e2      	lsls	r2, r4, #3
 8005748:	4614      	mov	r4, r2
 800574a:	461d      	mov	r5, r3
 800574c:	4643      	mov	r3, r8
 800574e:	18e3      	adds	r3, r4, r3
 8005750:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8005754:	464b      	mov	r3, r9
 8005756:	eb45 0303 	adc.w	r3, r5, r3
 800575a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800575e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005762:	685b      	ldr	r3, [r3, #4]
 8005764:	2200      	movs	r2, #0
 8005766:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800576a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800576e:	f04f 0200 	mov.w	r2, #0
 8005772:	f04f 0300 	mov.w	r3, #0
 8005776:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800577a:	4629      	mov	r1, r5
 800577c:	008b      	lsls	r3, r1, #2
 800577e:	4621      	mov	r1, r4
 8005780:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005784:	4621      	mov	r1, r4
 8005786:	008a      	lsls	r2, r1, #2
 8005788:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 800578c:	f7fb fa06 	bl	8000b9c <__aeabi_uldivmod>
 8005790:	4602      	mov	r2, r0
 8005792:	460b      	mov	r3, r1
 8005794:	4b60      	ldr	r3, [pc, #384]	; (8005918 <UART_SetConfig+0x4e4>)
 8005796:	fba3 2302 	umull	r2, r3, r3, r2
 800579a:	095b      	lsrs	r3, r3, #5
 800579c:	011c      	lsls	r4, r3, #4
 800579e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80057a2:	2200      	movs	r2, #0
 80057a4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80057a8:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80057ac:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 80057b0:	4642      	mov	r2, r8
 80057b2:	464b      	mov	r3, r9
 80057b4:	1891      	adds	r1, r2, r2
 80057b6:	61b9      	str	r1, [r7, #24]
 80057b8:	415b      	adcs	r3, r3
 80057ba:	61fb      	str	r3, [r7, #28]
 80057bc:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80057c0:	4641      	mov	r1, r8
 80057c2:	1851      	adds	r1, r2, r1
 80057c4:	6139      	str	r1, [r7, #16]
 80057c6:	4649      	mov	r1, r9
 80057c8:	414b      	adcs	r3, r1
 80057ca:	617b      	str	r3, [r7, #20]
 80057cc:	f04f 0200 	mov.w	r2, #0
 80057d0:	f04f 0300 	mov.w	r3, #0
 80057d4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80057d8:	4659      	mov	r1, fp
 80057da:	00cb      	lsls	r3, r1, #3
 80057dc:	4651      	mov	r1, sl
 80057de:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80057e2:	4651      	mov	r1, sl
 80057e4:	00ca      	lsls	r2, r1, #3
 80057e6:	4610      	mov	r0, r2
 80057e8:	4619      	mov	r1, r3
 80057ea:	4603      	mov	r3, r0
 80057ec:	4642      	mov	r2, r8
 80057ee:	189b      	adds	r3, r3, r2
 80057f0:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80057f4:	464b      	mov	r3, r9
 80057f6:	460a      	mov	r2, r1
 80057f8:	eb42 0303 	adc.w	r3, r2, r3
 80057fc:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8005800:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005804:	685b      	ldr	r3, [r3, #4]
 8005806:	2200      	movs	r2, #0
 8005808:	67bb      	str	r3, [r7, #120]	; 0x78
 800580a:	67fa      	str	r2, [r7, #124]	; 0x7c
 800580c:	f04f 0200 	mov.w	r2, #0
 8005810:	f04f 0300 	mov.w	r3, #0
 8005814:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8005818:	4649      	mov	r1, r9
 800581a:	008b      	lsls	r3, r1, #2
 800581c:	4641      	mov	r1, r8
 800581e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005822:	4641      	mov	r1, r8
 8005824:	008a      	lsls	r2, r1, #2
 8005826:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800582a:	f7fb f9b7 	bl	8000b9c <__aeabi_uldivmod>
 800582e:	4602      	mov	r2, r0
 8005830:	460b      	mov	r3, r1
 8005832:	4b39      	ldr	r3, [pc, #228]	; (8005918 <UART_SetConfig+0x4e4>)
 8005834:	fba3 1302 	umull	r1, r3, r3, r2
 8005838:	095b      	lsrs	r3, r3, #5
 800583a:	2164      	movs	r1, #100	; 0x64
 800583c:	fb01 f303 	mul.w	r3, r1, r3
 8005840:	1ad3      	subs	r3, r2, r3
 8005842:	011b      	lsls	r3, r3, #4
 8005844:	3332      	adds	r3, #50	; 0x32
 8005846:	4a34      	ldr	r2, [pc, #208]	; (8005918 <UART_SetConfig+0x4e4>)
 8005848:	fba2 2303 	umull	r2, r3, r2, r3
 800584c:	095b      	lsrs	r3, r3, #5
 800584e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005852:	441c      	add	r4, r3
 8005854:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005858:	2200      	movs	r2, #0
 800585a:	673b      	str	r3, [r7, #112]	; 0x70
 800585c:	677a      	str	r2, [r7, #116]	; 0x74
 800585e:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8005862:	4642      	mov	r2, r8
 8005864:	464b      	mov	r3, r9
 8005866:	1891      	adds	r1, r2, r2
 8005868:	60b9      	str	r1, [r7, #8]
 800586a:	415b      	adcs	r3, r3
 800586c:	60fb      	str	r3, [r7, #12]
 800586e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005872:	4641      	mov	r1, r8
 8005874:	1851      	adds	r1, r2, r1
 8005876:	6039      	str	r1, [r7, #0]
 8005878:	4649      	mov	r1, r9
 800587a:	414b      	adcs	r3, r1
 800587c:	607b      	str	r3, [r7, #4]
 800587e:	f04f 0200 	mov.w	r2, #0
 8005882:	f04f 0300 	mov.w	r3, #0
 8005886:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800588a:	4659      	mov	r1, fp
 800588c:	00cb      	lsls	r3, r1, #3
 800588e:	4651      	mov	r1, sl
 8005890:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005894:	4651      	mov	r1, sl
 8005896:	00ca      	lsls	r2, r1, #3
 8005898:	4610      	mov	r0, r2
 800589a:	4619      	mov	r1, r3
 800589c:	4603      	mov	r3, r0
 800589e:	4642      	mov	r2, r8
 80058a0:	189b      	adds	r3, r3, r2
 80058a2:	66bb      	str	r3, [r7, #104]	; 0x68
 80058a4:	464b      	mov	r3, r9
 80058a6:	460a      	mov	r2, r1
 80058a8:	eb42 0303 	adc.w	r3, r2, r3
 80058ac:	66fb      	str	r3, [r7, #108]	; 0x6c
 80058ae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80058b2:	685b      	ldr	r3, [r3, #4]
 80058b4:	2200      	movs	r2, #0
 80058b6:	663b      	str	r3, [r7, #96]	; 0x60
 80058b8:	667a      	str	r2, [r7, #100]	; 0x64
 80058ba:	f04f 0200 	mov.w	r2, #0
 80058be:	f04f 0300 	mov.w	r3, #0
 80058c2:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 80058c6:	4649      	mov	r1, r9
 80058c8:	008b      	lsls	r3, r1, #2
 80058ca:	4641      	mov	r1, r8
 80058cc:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80058d0:	4641      	mov	r1, r8
 80058d2:	008a      	lsls	r2, r1, #2
 80058d4:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 80058d8:	f7fb f960 	bl	8000b9c <__aeabi_uldivmod>
 80058dc:	4602      	mov	r2, r0
 80058de:	460b      	mov	r3, r1
 80058e0:	4b0d      	ldr	r3, [pc, #52]	; (8005918 <UART_SetConfig+0x4e4>)
 80058e2:	fba3 1302 	umull	r1, r3, r3, r2
 80058e6:	095b      	lsrs	r3, r3, #5
 80058e8:	2164      	movs	r1, #100	; 0x64
 80058ea:	fb01 f303 	mul.w	r3, r1, r3
 80058ee:	1ad3      	subs	r3, r2, r3
 80058f0:	011b      	lsls	r3, r3, #4
 80058f2:	3332      	adds	r3, #50	; 0x32
 80058f4:	4a08      	ldr	r2, [pc, #32]	; (8005918 <UART_SetConfig+0x4e4>)
 80058f6:	fba2 2303 	umull	r2, r3, r2, r3
 80058fa:	095b      	lsrs	r3, r3, #5
 80058fc:	f003 020f 	and.w	r2, r3, #15
 8005900:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005904:	681b      	ldr	r3, [r3, #0]
 8005906:	4422      	add	r2, r4
 8005908:	609a      	str	r2, [r3, #8]
}
 800590a:	bf00      	nop
 800590c:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8005910:	46bd      	mov	sp, r7
 8005912:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005916:	bf00      	nop
 8005918:	51eb851f 	.word	0x51eb851f

0800591c <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800591c:	b084      	sub	sp, #16
 800591e:	b580      	push	{r7, lr}
 8005920:	b084      	sub	sp, #16
 8005922:	af00      	add	r7, sp, #0
 8005924:	6078      	str	r0, [r7, #4]
 8005926:	f107 001c 	add.w	r0, r7, #28
 800592a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800592e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005930:	2b01      	cmp	r3, #1
 8005932:	d122      	bne.n	800597a <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005938:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	68db      	ldr	r3, [r3, #12]
 8005944:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8005948:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800594c:	687a      	ldr	r2, [r7, #4]
 800594e:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	68db      	ldr	r3, [r3, #12]
 8005954:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800595c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800595e:	2b01      	cmp	r3, #1
 8005960:	d105      	bne.n	800596e <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	68db      	ldr	r3, [r3, #12]
 8005966:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800596e:	6878      	ldr	r0, [r7, #4]
 8005970:	f000 faa2 	bl	8005eb8 <USB_CoreReset>
 8005974:	4603      	mov	r3, r0
 8005976:	73fb      	strb	r3, [r7, #15]
 8005978:	e01a      	b.n	80059b0 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	68db      	ldr	r3, [r3, #12]
 800597e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8005986:	6878      	ldr	r0, [r7, #4]
 8005988:	f000 fa96 	bl	8005eb8 <USB_CoreReset>
 800598c:	4603      	mov	r3, r0
 800598e:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8005990:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005992:	2b00      	cmp	r3, #0
 8005994:	d106      	bne.n	80059a4 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800599a:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	639a      	str	r2, [r3, #56]	; 0x38
 80059a2:	e005      	b.n	80059b0 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80059a8:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 80059b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80059b2:	2b01      	cmp	r3, #1
 80059b4:	d10b      	bne.n	80059ce <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	689b      	ldr	r3, [r3, #8]
 80059ba:	f043 0206 	orr.w	r2, r3, #6
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	689b      	ldr	r3, [r3, #8]
 80059c6:	f043 0220 	orr.w	r2, r3, #32
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	609a      	str	r2, [r3, #8]
  }

  return ret;
 80059ce:	7bfb      	ldrb	r3, [r7, #15]
}
 80059d0:	4618      	mov	r0, r3
 80059d2:	3710      	adds	r7, #16
 80059d4:	46bd      	mov	sp, r7
 80059d6:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80059da:	b004      	add	sp, #16
 80059dc:	4770      	bx	lr

080059de <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80059de:	b480      	push	{r7}
 80059e0:	b083      	sub	sp, #12
 80059e2:	af00      	add	r7, sp, #0
 80059e4:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	689b      	ldr	r3, [r3, #8]
 80059ea:	f023 0201 	bic.w	r2, r3, #1
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80059f2:	2300      	movs	r3, #0
}
 80059f4:	4618      	mov	r0, r3
 80059f6:	370c      	adds	r7, #12
 80059f8:	46bd      	mov	sp, r7
 80059fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059fe:	4770      	bx	lr

08005a00 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8005a00:	b580      	push	{r7, lr}
 8005a02:	b084      	sub	sp, #16
 8005a04:	af00      	add	r7, sp, #0
 8005a06:	6078      	str	r0, [r7, #4]
 8005a08:	460b      	mov	r3, r1
 8005a0a:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8005a0c:	2300      	movs	r3, #0
 8005a0e:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	68db      	ldr	r3, [r3, #12]
 8005a14:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8005a1c:	78fb      	ldrb	r3, [r7, #3]
 8005a1e:	2b01      	cmp	r3, #1
 8005a20:	d115      	bne.n	8005a4e <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	68db      	ldr	r3, [r3, #12]
 8005a26:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8005a2e:	2001      	movs	r0, #1
 8005a30:	f7fc f958 	bl	8001ce4 <HAL_Delay>
      ms++;
 8005a34:	68fb      	ldr	r3, [r7, #12]
 8005a36:	3301      	adds	r3, #1
 8005a38:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8005a3a:	6878      	ldr	r0, [r7, #4]
 8005a3c:	f000 fa2e 	bl	8005e9c <USB_GetMode>
 8005a40:	4603      	mov	r3, r0
 8005a42:	2b01      	cmp	r3, #1
 8005a44:	d01e      	beq.n	8005a84 <USB_SetCurrentMode+0x84>
 8005a46:	68fb      	ldr	r3, [r7, #12]
 8005a48:	2b31      	cmp	r3, #49	; 0x31
 8005a4a:	d9f0      	bls.n	8005a2e <USB_SetCurrentMode+0x2e>
 8005a4c:	e01a      	b.n	8005a84 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8005a4e:	78fb      	ldrb	r3, [r7, #3]
 8005a50:	2b00      	cmp	r3, #0
 8005a52:	d115      	bne.n	8005a80 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	68db      	ldr	r3, [r3, #12]
 8005a58:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8005a60:	2001      	movs	r0, #1
 8005a62:	f7fc f93f 	bl	8001ce4 <HAL_Delay>
      ms++;
 8005a66:	68fb      	ldr	r3, [r7, #12]
 8005a68:	3301      	adds	r3, #1
 8005a6a:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8005a6c:	6878      	ldr	r0, [r7, #4]
 8005a6e:	f000 fa15 	bl	8005e9c <USB_GetMode>
 8005a72:	4603      	mov	r3, r0
 8005a74:	2b00      	cmp	r3, #0
 8005a76:	d005      	beq.n	8005a84 <USB_SetCurrentMode+0x84>
 8005a78:	68fb      	ldr	r3, [r7, #12]
 8005a7a:	2b31      	cmp	r3, #49	; 0x31
 8005a7c:	d9f0      	bls.n	8005a60 <USB_SetCurrentMode+0x60>
 8005a7e:	e001      	b.n	8005a84 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8005a80:	2301      	movs	r3, #1
 8005a82:	e005      	b.n	8005a90 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8005a84:	68fb      	ldr	r3, [r7, #12]
 8005a86:	2b32      	cmp	r3, #50	; 0x32
 8005a88:	d101      	bne.n	8005a8e <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8005a8a:	2301      	movs	r3, #1
 8005a8c:	e000      	b.n	8005a90 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8005a8e:	2300      	movs	r3, #0
}
 8005a90:	4618      	mov	r0, r3
 8005a92:	3710      	adds	r7, #16
 8005a94:	46bd      	mov	sp, r7
 8005a96:	bd80      	pop	{r7, pc}

08005a98 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005a98:	b084      	sub	sp, #16
 8005a9a:	b580      	push	{r7, lr}
 8005a9c:	b086      	sub	sp, #24
 8005a9e:	af00      	add	r7, sp, #0
 8005aa0:	6078      	str	r0, [r7, #4]
 8005aa2:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8005aa6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8005aaa:	2300      	movs	r3, #0
 8005aac:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8005ab2:	2300      	movs	r3, #0
 8005ab4:	613b      	str	r3, [r7, #16]
 8005ab6:	e009      	b.n	8005acc <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8005ab8:	687a      	ldr	r2, [r7, #4]
 8005aba:	693b      	ldr	r3, [r7, #16]
 8005abc:	3340      	adds	r3, #64	; 0x40
 8005abe:	009b      	lsls	r3, r3, #2
 8005ac0:	4413      	add	r3, r2
 8005ac2:	2200      	movs	r2, #0
 8005ac4:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8005ac6:	693b      	ldr	r3, [r7, #16]
 8005ac8:	3301      	adds	r3, #1
 8005aca:	613b      	str	r3, [r7, #16]
 8005acc:	693b      	ldr	r3, [r7, #16]
 8005ace:	2b0e      	cmp	r3, #14
 8005ad0:	d9f2      	bls.n	8005ab8 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8005ad2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005ad4:	2b00      	cmp	r3, #0
 8005ad6:	d11c      	bne.n	8005b12 <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8005ad8:	68fb      	ldr	r3, [r7, #12]
 8005ada:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005ade:	685b      	ldr	r3, [r3, #4]
 8005ae0:	68fa      	ldr	r2, [r7, #12]
 8005ae2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005ae6:	f043 0302 	orr.w	r3, r3, #2
 8005aea:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005af0:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005afc:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b08:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	639a      	str	r2, [r3, #56]	; 0x38
 8005b10:	e00b      	b.n	8005b2a <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b16:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b22:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8005b2a:	68fb      	ldr	r3, [r7, #12]
 8005b2c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8005b30:	461a      	mov	r2, r3
 8005b32:	2300      	movs	r3, #0
 8005b34:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8005b36:	68fb      	ldr	r3, [r7, #12]
 8005b38:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005b3c:	4619      	mov	r1, r3
 8005b3e:	68fb      	ldr	r3, [r7, #12]
 8005b40:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005b44:	461a      	mov	r2, r3
 8005b46:	680b      	ldr	r3, [r1, #0]
 8005b48:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8005b4a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005b4c:	2b01      	cmp	r3, #1
 8005b4e:	d10c      	bne.n	8005b6a <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8005b50:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005b52:	2b00      	cmp	r3, #0
 8005b54:	d104      	bne.n	8005b60 <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8005b56:	2100      	movs	r1, #0
 8005b58:	6878      	ldr	r0, [r7, #4]
 8005b5a:	f000 f965 	bl	8005e28 <USB_SetDevSpeed>
 8005b5e:	e008      	b.n	8005b72 <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8005b60:	2101      	movs	r1, #1
 8005b62:	6878      	ldr	r0, [r7, #4]
 8005b64:	f000 f960 	bl	8005e28 <USB_SetDevSpeed>
 8005b68:	e003      	b.n	8005b72 <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8005b6a:	2103      	movs	r1, #3
 8005b6c:	6878      	ldr	r0, [r7, #4]
 8005b6e:	f000 f95b 	bl	8005e28 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8005b72:	2110      	movs	r1, #16
 8005b74:	6878      	ldr	r0, [r7, #4]
 8005b76:	f000 f8f3 	bl	8005d60 <USB_FlushTxFifo>
 8005b7a:	4603      	mov	r3, r0
 8005b7c:	2b00      	cmp	r3, #0
 8005b7e:	d001      	beq.n	8005b84 <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 8005b80:	2301      	movs	r3, #1
 8005b82:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8005b84:	6878      	ldr	r0, [r7, #4]
 8005b86:	f000 f91f 	bl	8005dc8 <USB_FlushRxFifo>
 8005b8a:	4603      	mov	r3, r0
 8005b8c:	2b00      	cmp	r3, #0
 8005b8e:	d001      	beq.n	8005b94 <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 8005b90:	2301      	movs	r3, #1
 8005b92:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8005b94:	68fb      	ldr	r3, [r7, #12]
 8005b96:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005b9a:	461a      	mov	r2, r3
 8005b9c:	2300      	movs	r3, #0
 8005b9e:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8005ba0:	68fb      	ldr	r3, [r7, #12]
 8005ba2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005ba6:	461a      	mov	r2, r3
 8005ba8:	2300      	movs	r3, #0
 8005baa:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8005bac:	68fb      	ldr	r3, [r7, #12]
 8005bae:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005bb2:	461a      	mov	r2, r3
 8005bb4:	2300      	movs	r3, #0
 8005bb6:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005bb8:	2300      	movs	r3, #0
 8005bba:	613b      	str	r3, [r7, #16]
 8005bbc:	e043      	b.n	8005c46 <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8005bbe:	693b      	ldr	r3, [r7, #16]
 8005bc0:	015a      	lsls	r2, r3, #5
 8005bc2:	68fb      	ldr	r3, [r7, #12]
 8005bc4:	4413      	add	r3, r2
 8005bc6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005bca:	681b      	ldr	r3, [r3, #0]
 8005bcc:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005bd0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005bd4:	d118      	bne.n	8005c08 <USB_DevInit+0x170>
    {
      if (i == 0U)
 8005bd6:	693b      	ldr	r3, [r7, #16]
 8005bd8:	2b00      	cmp	r3, #0
 8005bda:	d10a      	bne.n	8005bf2 <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8005bdc:	693b      	ldr	r3, [r7, #16]
 8005bde:	015a      	lsls	r2, r3, #5
 8005be0:	68fb      	ldr	r3, [r7, #12]
 8005be2:	4413      	add	r3, r2
 8005be4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005be8:	461a      	mov	r2, r3
 8005bea:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8005bee:	6013      	str	r3, [r2, #0]
 8005bf0:	e013      	b.n	8005c1a <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8005bf2:	693b      	ldr	r3, [r7, #16]
 8005bf4:	015a      	lsls	r2, r3, #5
 8005bf6:	68fb      	ldr	r3, [r7, #12]
 8005bf8:	4413      	add	r3, r2
 8005bfa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005bfe:	461a      	mov	r2, r3
 8005c00:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8005c04:	6013      	str	r3, [r2, #0]
 8005c06:	e008      	b.n	8005c1a <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8005c08:	693b      	ldr	r3, [r7, #16]
 8005c0a:	015a      	lsls	r2, r3, #5
 8005c0c:	68fb      	ldr	r3, [r7, #12]
 8005c0e:	4413      	add	r3, r2
 8005c10:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005c14:	461a      	mov	r2, r3
 8005c16:	2300      	movs	r3, #0
 8005c18:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8005c1a:	693b      	ldr	r3, [r7, #16]
 8005c1c:	015a      	lsls	r2, r3, #5
 8005c1e:	68fb      	ldr	r3, [r7, #12]
 8005c20:	4413      	add	r3, r2
 8005c22:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005c26:	461a      	mov	r2, r3
 8005c28:	2300      	movs	r3, #0
 8005c2a:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8005c2c:	693b      	ldr	r3, [r7, #16]
 8005c2e:	015a      	lsls	r2, r3, #5
 8005c30:	68fb      	ldr	r3, [r7, #12]
 8005c32:	4413      	add	r3, r2
 8005c34:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005c38:	461a      	mov	r2, r3
 8005c3a:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8005c3e:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005c40:	693b      	ldr	r3, [r7, #16]
 8005c42:	3301      	adds	r3, #1
 8005c44:	613b      	str	r3, [r7, #16]
 8005c46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c48:	693a      	ldr	r2, [r7, #16]
 8005c4a:	429a      	cmp	r2, r3
 8005c4c:	d3b7      	bcc.n	8005bbe <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005c4e:	2300      	movs	r3, #0
 8005c50:	613b      	str	r3, [r7, #16]
 8005c52:	e043      	b.n	8005cdc <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005c54:	693b      	ldr	r3, [r7, #16]
 8005c56:	015a      	lsls	r2, r3, #5
 8005c58:	68fb      	ldr	r3, [r7, #12]
 8005c5a:	4413      	add	r3, r2
 8005c5c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005c60:	681b      	ldr	r3, [r3, #0]
 8005c62:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005c66:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005c6a:	d118      	bne.n	8005c9e <USB_DevInit+0x206>
    {
      if (i == 0U)
 8005c6c:	693b      	ldr	r3, [r7, #16]
 8005c6e:	2b00      	cmp	r3, #0
 8005c70:	d10a      	bne.n	8005c88 <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8005c72:	693b      	ldr	r3, [r7, #16]
 8005c74:	015a      	lsls	r2, r3, #5
 8005c76:	68fb      	ldr	r3, [r7, #12]
 8005c78:	4413      	add	r3, r2
 8005c7a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005c7e:	461a      	mov	r2, r3
 8005c80:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8005c84:	6013      	str	r3, [r2, #0]
 8005c86:	e013      	b.n	8005cb0 <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8005c88:	693b      	ldr	r3, [r7, #16]
 8005c8a:	015a      	lsls	r2, r3, #5
 8005c8c:	68fb      	ldr	r3, [r7, #12]
 8005c8e:	4413      	add	r3, r2
 8005c90:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005c94:	461a      	mov	r2, r3
 8005c96:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8005c9a:	6013      	str	r3, [r2, #0]
 8005c9c:	e008      	b.n	8005cb0 <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8005c9e:	693b      	ldr	r3, [r7, #16]
 8005ca0:	015a      	lsls	r2, r3, #5
 8005ca2:	68fb      	ldr	r3, [r7, #12]
 8005ca4:	4413      	add	r3, r2
 8005ca6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005caa:	461a      	mov	r2, r3
 8005cac:	2300      	movs	r3, #0
 8005cae:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8005cb0:	693b      	ldr	r3, [r7, #16]
 8005cb2:	015a      	lsls	r2, r3, #5
 8005cb4:	68fb      	ldr	r3, [r7, #12]
 8005cb6:	4413      	add	r3, r2
 8005cb8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005cbc:	461a      	mov	r2, r3
 8005cbe:	2300      	movs	r3, #0
 8005cc0:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8005cc2:	693b      	ldr	r3, [r7, #16]
 8005cc4:	015a      	lsls	r2, r3, #5
 8005cc6:	68fb      	ldr	r3, [r7, #12]
 8005cc8:	4413      	add	r3, r2
 8005cca:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005cce:	461a      	mov	r2, r3
 8005cd0:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8005cd4:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005cd6:	693b      	ldr	r3, [r7, #16]
 8005cd8:	3301      	adds	r3, #1
 8005cda:	613b      	str	r3, [r7, #16]
 8005cdc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005cde:	693a      	ldr	r2, [r7, #16]
 8005ce0:	429a      	cmp	r2, r3
 8005ce2:	d3b7      	bcc.n	8005c54 <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8005ce4:	68fb      	ldr	r3, [r7, #12]
 8005ce6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005cea:	691b      	ldr	r3, [r3, #16]
 8005cec:	68fa      	ldr	r2, [r7, #12]
 8005cee:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005cf2:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005cf6:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	2200      	movs	r2, #0
 8005cfc:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8005d04:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8005d06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d08:	2b00      	cmp	r3, #0
 8005d0a:	d105      	bne.n	8005d18 <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	699b      	ldr	r3, [r3, #24]
 8005d10:	f043 0210 	orr.w	r2, r3, #16
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	699a      	ldr	r2, [r3, #24]
 8005d1c:	4b0f      	ldr	r3, [pc, #60]	; (8005d5c <USB_DevInit+0x2c4>)
 8005d1e:	4313      	orrs	r3, r2
 8005d20:	687a      	ldr	r2, [r7, #4]
 8005d22:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8005d24:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005d26:	2b00      	cmp	r3, #0
 8005d28:	d005      	beq.n	8005d36 <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	699b      	ldr	r3, [r3, #24]
 8005d2e:	f043 0208 	orr.w	r2, r3, #8
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8005d36:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005d38:	2b01      	cmp	r3, #1
 8005d3a:	d107      	bne.n	8005d4c <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	699b      	ldr	r3, [r3, #24]
 8005d40:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005d44:	f043 0304 	orr.w	r3, r3, #4
 8005d48:	687a      	ldr	r2, [r7, #4]
 8005d4a:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8005d4c:	7dfb      	ldrb	r3, [r7, #23]
}
 8005d4e:	4618      	mov	r0, r3
 8005d50:	3718      	adds	r7, #24
 8005d52:	46bd      	mov	sp, r7
 8005d54:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005d58:	b004      	add	sp, #16
 8005d5a:	4770      	bx	lr
 8005d5c:	803c3800 	.word	0x803c3800

08005d60 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8005d60:	b480      	push	{r7}
 8005d62:	b085      	sub	sp, #20
 8005d64:	af00      	add	r7, sp, #0
 8005d66:	6078      	str	r0, [r7, #4]
 8005d68:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8005d6a:	2300      	movs	r3, #0
 8005d6c:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005d6e:	68fb      	ldr	r3, [r7, #12]
 8005d70:	3301      	adds	r3, #1
 8005d72:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005d74:	68fb      	ldr	r3, [r7, #12]
 8005d76:	4a13      	ldr	r2, [pc, #76]	; (8005dc4 <USB_FlushTxFifo+0x64>)
 8005d78:	4293      	cmp	r3, r2
 8005d7a:	d901      	bls.n	8005d80 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8005d7c:	2303      	movs	r3, #3
 8005d7e:	e01b      	b.n	8005db8 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	691b      	ldr	r3, [r3, #16]
 8005d84:	2b00      	cmp	r3, #0
 8005d86:	daf2      	bge.n	8005d6e <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8005d88:	2300      	movs	r3, #0
 8005d8a:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8005d8c:	683b      	ldr	r3, [r7, #0]
 8005d8e:	019b      	lsls	r3, r3, #6
 8005d90:	f043 0220 	orr.w	r2, r3, #32
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005d98:	68fb      	ldr	r3, [r7, #12]
 8005d9a:	3301      	adds	r3, #1
 8005d9c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005d9e:	68fb      	ldr	r3, [r7, #12]
 8005da0:	4a08      	ldr	r2, [pc, #32]	; (8005dc4 <USB_FlushTxFifo+0x64>)
 8005da2:	4293      	cmp	r3, r2
 8005da4:	d901      	bls.n	8005daa <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8005da6:	2303      	movs	r3, #3
 8005da8:	e006      	b.n	8005db8 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	691b      	ldr	r3, [r3, #16]
 8005dae:	f003 0320 	and.w	r3, r3, #32
 8005db2:	2b20      	cmp	r3, #32
 8005db4:	d0f0      	beq.n	8005d98 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8005db6:	2300      	movs	r3, #0
}
 8005db8:	4618      	mov	r0, r3
 8005dba:	3714      	adds	r7, #20
 8005dbc:	46bd      	mov	sp, r7
 8005dbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dc2:	4770      	bx	lr
 8005dc4:	00030d40 	.word	0x00030d40

08005dc8 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8005dc8:	b480      	push	{r7}
 8005dca:	b085      	sub	sp, #20
 8005dcc:	af00      	add	r7, sp, #0
 8005dce:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005dd0:	2300      	movs	r3, #0
 8005dd2:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005dd4:	68fb      	ldr	r3, [r7, #12]
 8005dd6:	3301      	adds	r3, #1
 8005dd8:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005dda:	68fb      	ldr	r3, [r7, #12]
 8005ddc:	4a11      	ldr	r2, [pc, #68]	; (8005e24 <USB_FlushRxFifo+0x5c>)
 8005dde:	4293      	cmp	r3, r2
 8005de0:	d901      	bls.n	8005de6 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8005de2:	2303      	movs	r3, #3
 8005de4:	e018      	b.n	8005e18 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	691b      	ldr	r3, [r3, #16]
 8005dea:	2b00      	cmp	r3, #0
 8005dec:	daf2      	bge.n	8005dd4 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8005dee:	2300      	movs	r3, #0
 8005df0:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	2210      	movs	r2, #16
 8005df6:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005df8:	68fb      	ldr	r3, [r7, #12]
 8005dfa:	3301      	adds	r3, #1
 8005dfc:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005dfe:	68fb      	ldr	r3, [r7, #12]
 8005e00:	4a08      	ldr	r2, [pc, #32]	; (8005e24 <USB_FlushRxFifo+0x5c>)
 8005e02:	4293      	cmp	r3, r2
 8005e04:	d901      	bls.n	8005e0a <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8005e06:	2303      	movs	r3, #3
 8005e08:	e006      	b.n	8005e18 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	691b      	ldr	r3, [r3, #16]
 8005e0e:	f003 0310 	and.w	r3, r3, #16
 8005e12:	2b10      	cmp	r3, #16
 8005e14:	d0f0      	beq.n	8005df8 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8005e16:	2300      	movs	r3, #0
}
 8005e18:	4618      	mov	r0, r3
 8005e1a:	3714      	adds	r7, #20
 8005e1c:	46bd      	mov	sp, r7
 8005e1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e22:	4770      	bx	lr
 8005e24:	00030d40 	.word	0x00030d40

08005e28 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8005e28:	b480      	push	{r7}
 8005e2a:	b085      	sub	sp, #20
 8005e2c:	af00      	add	r7, sp, #0
 8005e2e:	6078      	str	r0, [r7, #4]
 8005e30:	460b      	mov	r3, r1
 8005e32:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8005e38:	68fb      	ldr	r3, [r7, #12]
 8005e3a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005e3e:	681a      	ldr	r2, [r3, #0]
 8005e40:	78fb      	ldrb	r3, [r7, #3]
 8005e42:	68f9      	ldr	r1, [r7, #12]
 8005e44:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005e48:	4313      	orrs	r3, r2
 8005e4a:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8005e4c:	2300      	movs	r3, #0
}
 8005e4e:	4618      	mov	r0, r3
 8005e50:	3714      	adds	r7, #20
 8005e52:	46bd      	mov	sp, r7
 8005e54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e58:	4770      	bx	lr

08005e5a <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8005e5a:	b480      	push	{r7}
 8005e5c:	b085      	sub	sp, #20
 8005e5e:	af00      	add	r7, sp, #0
 8005e60:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8005e66:	68fb      	ldr	r3, [r7, #12]
 8005e68:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8005e6c:	681b      	ldr	r3, [r3, #0]
 8005e6e:	68fa      	ldr	r2, [r7, #12]
 8005e70:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8005e74:	f023 0303 	bic.w	r3, r3, #3
 8005e78:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8005e7a:	68fb      	ldr	r3, [r7, #12]
 8005e7c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005e80:	685b      	ldr	r3, [r3, #4]
 8005e82:	68fa      	ldr	r2, [r7, #12]
 8005e84:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005e88:	f043 0302 	orr.w	r3, r3, #2
 8005e8c:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8005e8e:	2300      	movs	r3, #0
}
 8005e90:	4618      	mov	r0, r3
 8005e92:	3714      	adds	r7, #20
 8005e94:	46bd      	mov	sp, r7
 8005e96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e9a:	4770      	bx	lr

08005e9c <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8005e9c:	b480      	push	{r7}
 8005e9e:	b083      	sub	sp, #12
 8005ea0:	af00      	add	r7, sp, #0
 8005ea2:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	695b      	ldr	r3, [r3, #20]
 8005ea8:	f003 0301 	and.w	r3, r3, #1
}
 8005eac:	4618      	mov	r0, r3
 8005eae:	370c      	adds	r7, #12
 8005eb0:	46bd      	mov	sp, r7
 8005eb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eb6:	4770      	bx	lr

08005eb8 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8005eb8:	b480      	push	{r7}
 8005eba:	b085      	sub	sp, #20
 8005ebc:	af00      	add	r7, sp, #0
 8005ebe:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005ec0:	2300      	movs	r3, #0
 8005ec2:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005ec4:	68fb      	ldr	r3, [r7, #12]
 8005ec6:	3301      	adds	r3, #1
 8005ec8:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005eca:	68fb      	ldr	r3, [r7, #12]
 8005ecc:	4a13      	ldr	r2, [pc, #76]	; (8005f1c <USB_CoreReset+0x64>)
 8005ece:	4293      	cmp	r3, r2
 8005ed0:	d901      	bls.n	8005ed6 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8005ed2:	2303      	movs	r3, #3
 8005ed4:	e01b      	b.n	8005f0e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	691b      	ldr	r3, [r3, #16]
 8005eda:	2b00      	cmp	r3, #0
 8005edc:	daf2      	bge.n	8005ec4 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8005ede:	2300      	movs	r3, #0
 8005ee0:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	691b      	ldr	r3, [r3, #16]
 8005ee6:	f043 0201 	orr.w	r2, r3, #1
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005eee:	68fb      	ldr	r3, [r7, #12]
 8005ef0:	3301      	adds	r3, #1
 8005ef2:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005ef4:	68fb      	ldr	r3, [r7, #12]
 8005ef6:	4a09      	ldr	r2, [pc, #36]	; (8005f1c <USB_CoreReset+0x64>)
 8005ef8:	4293      	cmp	r3, r2
 8005efa:	d901      	bls.n	8005f00 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8005efc:	2303      	movs	r3, #3
 8005efe:	e006      	b.n	8005f0e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	691b      	ldr	r3, [r3, #16]
 8005f04:	f003 0301 	and.w	r3, r3, #1
 8005f08:	2b01      	cmp	r3, #1
 8005f0a:	d0f0      	beq.n	8005eee <USB_CoreReset+0x36>

  return HAL_OK;
 8005f0c:	2300      	movs	r3, #0
}
 8005f0e:	4618      	mov	r0, r3
 8005f10:	3714      	adds	r7, #20
 8005f12:	46bd      	mov	sp, r7
 8005f14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f18:	4770      	bx	lr
 8005f1a:	bf00      	nop
 8005f1c:	00030d40 	.word	0x00030d40

08005f20 <gcvt>:
 8005f20:	b530      	push	{r4, r5, lr}
 8005f22:	2200      	movs	r2, #0
 8005f24:	b085      	sub	sp, #20
 8005f26:	460c      	mov	r4, r1
 8005f28:	4605      	mov	r5, r0
 8005f2a:	2300      	movs	r3, #0
 8005f2c:	ec51 0b10 	vmov	r0, r1, d0
 8005f30:	ed8d 0b02 	vstr	d0, [sp, #8]
 8005f34:	f7fa fde2 	bl	8000afc <__aeabi_dcmplt>
 8005f38:	ed9d 0b02 	vldr	d0, [sp, #8]
 8005f3c:	4622      	mov	r2, r4
 8005f3e:	b118      	cbz	r0, 8005f48 <gcvt+0x28>
 8005f40:	232d      	movs	r3, #45	; 0x2d
 8005f42:	f802 3b01 	strb.w	r3, [r2], #1
 8005f46:	3d01      	subs	r5, #1
 8005f48:	2300      	movs	r3, #0
 8005f4a:	4806      	ldr	r0, [pc, #24]	; (8005f64 <gcvt+0x44>)
 8005f4c:	9300      	str	r3, [sp, #0]
 8005f4e:	4629      	mov	r1, r5
 8005f50:	2367      	movs	r3, #103	; 0x67
 8005f52:	6800      	ldr	r0, [r0, #0]
 8005f54:	f000 f8e0 	bl	8006118 <_gcvt>
 8005f58:	2800      	cmp	r0, #0
 8005f5a:	bf14      	ite	ne
 8005f5c:	4620      	movne	r0, r4
 8005f5e:	2000      	moveq	r0, #0
 8005f60:	b005      	add	sp, #20
 8005f62:	bd30      	pop	{r4, r5, pc}
 8005f64:	2000000c 	.word	0x2000000c

08005f68 <__libc_init_array>:
 8005f68:	b570      	push	{r4, r5, r6, lr}
 8005f6a:	4d0d      	ldr	r5, [pc, #52]	; (8005fa0 <__libc_init_array+0x38>)
 8005f6c:	4c0d      	ldr	r4, [pc, #52]	; (8005fa4 <__libc_init_array+0x3c>)
 8005f6e:	1b64      	subs	r4, r4, r5
 8005f70:	10a4      	asrs	r4, r4, #2
 8005f72:	2600      	movs	r6, #0
 8005f74:	42a6      	cmp	r6, r4
 8005f76:	d109      	bne.n	8005f8c <__libc_init_array+0x24>
 8005f78:	4d0b      	ldr	r5, [pc, #44]	; (8005fa8 <__libc_init_array+0x40>)
 8005f7a:	4c0c      	ldr	r4, [pc, #48]	; (8005fac <__libc_init_array+0x44>)
 8005f7c:	f002 fc20 	bl	80087c0 <_init>
 8005f80:	1b64      	subs	r4, r4, r5
 8005f82:	10a4      	asrs	r4, r4, #2
 8005f84:	2600      	movs	r6, #0
 8005f86:	42a6      	cmp	r6, r4
 8005f88:	d105      	bne.n	8005f96 <__libc_init_array+0x2e>
 8005f8a:	bd70      	pop	{r4, r5, r6, pc}
 8005f8c:	f855 3b04 	ldr.w	r3, [r5], #4
 8005f90:	4798      	blx	r3
 8005f92:	3601      	adds	r6, #1
 8005f94:	e7ee      	b.n	8005f74 <__libc_init_array+0xc>
 8005f96:	f855 3b04 	ldr.w	r3, [r5], #4
 8005f9a:	4798      	blx	r3
 8005f9c:	3601      	adds	r6, #1
 8005f9e:	e7f2      	b.n	8005f86 <__libc_init_array+0x1e>
 8005fa0:	08008b90 	.word	0x08008b90
 8005fa4:	08008b90 	.word	0x08008b90
 8005fa8:	08008b90 	.word	0x08008b90
 8005fac:	08008b94 	.word	0x08008b94

08005fb0 <memset>:
 8005fb0:	4402      	add	r2, r0
 8005fb2:	4603      	mov	r3, r0
 8005fb4:	4293      	cmp	r3, r2
 8005fb6:	d100      	bne.n	8005fba <memset+0xa>
 8005fb8:	4770      	bx	lr
 8005fba:	f803 1b01 	strb.w	r1, [r3], #1
 8005fbe:	e7f9      	b.n	8005fb4 <memset+0x4>

08005fc0 <strchr>:
 8005fc0:	b2c9      	uxtb	r1, r1
 8005fc2:	4603      	mov	r3, r0
 8005fc4:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005fc8:	b11a      	cbz	r2, 8005fd2 <strchr+0x12>
 8005fca:	428a      	cmp	r2, r1
 8005fcc:	d1f9      	bne.n	8005fc2 <strchr+0x2>
 8005fce:	4618      	mov	r0, r3
 8005fd0:	4770      	bx	lr
 8005fd2:	2900      	cmp	r1, #0
 8005fd4:	bf18      	it	ne
 8005fd6:	2300      	movne	r3, #0
 8005fd8:	e7f9      	b.n	8005fce <strchr+0xe>

08005fda <strncmp>:
 8005fda:	b510      	push	{r4, lr}
 8005fdc:	b17a      	cbz	r2, 8005ffe <strncmp+0x24>
 8005fde:	4603      	mov	r3, r0
 8005fe0:	3901      	subs	r1, #1
 8005fe2:	1884      	adds	r4, r0, r2
 8005fe4:	f813 0b01 	ldrb.w	r0, [r3], #1
 8005fe8:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8005fec:	4290      	cmp	r0, r2
 8005fee:	d101      	bne.n	8005ff4 <strncmp+0x1a>
 8005ff0:	42a3      	cmp	r3, r4
 8005ff2:	d101      	bne.n	8005ff8 <strncmp+0x1e>
 8005ff4:	1a80      	subs	r0, r0, r2
 8005ff6:	bd10      	pop	{r4, pc}
 8005ff8:	2800      	cmp	r0, #0
 8005ffa:	d1f3      	bne.n	8005fe4 <strncmp+0xa>
 8005ffc:	e7fa      	b.n	8005ff4 <strncmp+0x1a>
 8005ffe:	4610      	mov	r0, r2
 8006000:	e7f9      	b.n	8005ff6 <strncmp+0x1c>

08006002 <strncpy>:
 8006002:	b510      	push	{r4, lr}
 8006004:	3901      	subs	r1, #1
 8006006:	4603      	mov	r3, r0
 8006008:	b132      	cbz	r2, 8006018 <strncpy+0x16>
 800600a:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 800600e:	f803 4b01 	strb.w	r4, [r3], #1
 8006012:	3a01      	subs	r2, #1
 8006014:	2c00      	cmp	r4, #0
 8006016:	d1f7      	bne.n	8006008 <strncpy+0x6>
 8006018:	441a      	add	r2, r3
 800601a:	2100      	movs	r1, #0
 800601c:	4293      	cmp	r3, r2
 800601e:	d100      	bne.n	8006022 <strncpy+0x20>
 8006020:	bd10      	pop	{r4, pc}
 8006022:	f803 1b01 	strb.w	r1, [r3], #1
 8006026:	e7f9      	b.n	800601c <strncpy+0x1a>

08006028 <print_e>:
 8006028:	b5f0      	push	{r4, r5, r6, r7, lr}
 800602a:	b087      	sub	sp, #28
 800602c:	ec43 2b10 	vmov	d0, r2, r3
 8006030:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 8006032:	f89d 6034 	ldrb.w	r6, [sp, #52]	; 0x34
 8006036:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 8006038:	ab04      	add	r3, sp, #16
 800603a:	9301      	str	r3, [sp, #4]
 800603c:	ab03      	add	r3, sp, #12
 800603e:	9300      	str	r3, [sp, #0]
 8006040:	1c62      	adds	r2, r4, #1
 8006042:	ab05      	add	r3, sp, #20
 8006044:	460f      	mov	r7, r1
 8006046:	2102      	movs	r1, #2
 8006048:	f000 fe36 	bl	8006cb8 <_dtoa_r>
 800604c:	9a05      	ldr	r2, [sp, #20]
 800604e:	f242 730f 	movw	r3, #9999	; 0x270f
 8006052:	429a      	cmp	r2, r3
 8006054:	d105      	bne.n	8006062 <print_e+0x3a>
 8006056:	4601      	mov	r1, r0
 8006058:	4638      	mov	r0, r7
 800605a:	f000 fd79 	bl	8006b50 <strcpy>
 800605e:	b007      	add	sp, #28
 8006060:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006062:	463b      	mov	r3, r7
 8006064:	7801      	ldrb	r1, [r0, #0]
 8006066:	f803 1b01 	strb.w	r1, [r3], #1
 800606a:	2c00      	cmp	r4, #0
 800606c:	bfc8      	it	gt
 800606e:	2501      	movgt	r5, #1
 8006070:	212e      	movs	r1, #46	; 0x2e
 8006072:	f810 7f01 	ldrb.w	r7, [r0, #1]!
 8006076:	b10f      	cbz	r7, 800607c <print_e+0x54>
 8006078:	2c00      	cmp	r4, #0
 800607a:	dc37      	bgt.n	80060ec <print_e+0xc4>
 800607c:	2e67      	cmp	r6, #103	; 0x67
 800607e:	d046      	beq.n	800610e <print_e+0xe6>
 8006080:	2e47      	cmp	r6, #71	; 0x47
 8006082:	d046      	beq.n	8006112 <print_e+0xea>
 8006084:	212e      	movs	r1, #46	; 0x2e
 8006086:	2030      	movs	r0, #48	; 0x30
 8006088:	2c00      	cmp	r4, #0
 800608a:	dc38      	bgt.n	80060fe <print_e+0xd6>
 800608c:	1e51      	subs	r1, r2, #1
 800608e:	2900      	cmp	r1, #0
 8006090:	bfb8      	it	lt
 8006092:	f1c2 0201 	rsblt	r2, r2, #1
 8006096:	4618      	mov	r0, r3
 8006098:	9105      	str	r1, [sp, #20]
 800609a:	bfac      	ite	ge
 800609c:	222b      	movge	r2, #43	; 0x2b
 800609e:	9205      	strlt	r2, [sp, #20]
 80060a0:	f800 6b02 	strb.w	r6, [r0], #2
 80060a4:	bfa8      	it	ge
 80060a6:	705a      	strbge	r2, [r3, #1]
 80060a8:	9a05      	ldr	r2, [sp, #20]
 80060aa:	bfbc      	itt	lt
 80060ac:	212d      	movlt	r1, #45	; 0x2d
 80060ae:	7059      	strblt	r1, [r3, #1]
 80060b0:	2a63      	cmp	r2, #99	; 0x63
 80060b2:	dd0b      	ble.n	80060cc <print_e+0xa4>
 80060b4:	2164      	movs	r1, #100	; 0x64
 80060b6:	fb92 f1f1 	sdiv	r1, r2, r1
 80060ba:	f101 0430 	add.w	r4, r1, #48	; 0x30
 80060be:	1cd8      	adds	r0, r3, #3
 80060c0:	709c      	strb	r4, [r3, #2]
 80060c2:	f06f 0363 	mvn.w	r3, #99	; 0x63
 80060c6:	fb03 2201 	mla	r2, r3, r1, r2
 80060ca:	9205      	str	r2, [sp, #20]
 80060cc:	9b05      	ldr	r3, [sp, #20]
 80060ce:	220a      	movs	r2, #10
 80060d0:	fb93 f2f2 	sdiv	r2, r3, r2
 80060d4:	f102 0130 	add.w	r1, r2, #48	; 0x30
 80060d8:	7001      	strb	r1, [r0, #0]
 80060da:	f06f 0109 	mvn.w	r1, #9
 80060de:	fb01 3302 	mla	r3, r1, r2, r3
 80060e2:	3330      	adds	r3, #48	; 0x30
 80060e4:	7043      	strb	r3, [r0, #1]
 80060e6:	2300      	movs	r3, #0
 80060e8:	7083      	strb	r3, [r0, #2]
 80060ea:	e7b8      	b.n	800605e <print_e+0x36>
 80060ec:	b10d      	cbz	r5, 80060f2 <print_e+0xca>
 80060ee:	f803 1b01 	strb.w	r1, [r3], #1
 80060f2:	7805      	ldrb	r5, [r0, #0]
 80060f4:	f803 5b01 	strb.w	r5, [r3], #1
 80060f8:	3c01      	subs	r4, #1
 80060fa:	2500      	movs	r5, #0
 80060fc:	e7b9      	b.n	8006072 <print_e+0x4a>
 80060fe:	b10d      	cbz	r5, 8006104 <print_e+0xdc>
 8006100:	f803 1b01 	strb.w	r1, [r3], #1
 8006104:	f803 0b01 	strb.w	r0, [r3], #1
 8006108:	3c01      	subs	r4, #1
 800610a:	2500      	movs	r5, #0
 800610c:	e7bc      	b.n	8006088 <print_e+0x60>
 800610e:	2665      	movs	r6, #101	; 0x65
 8006110:	e7bc      	b.n	800608c <print_e+0x64>
 8006112:	2645      	movs	r6, #69	; 0x45
 8006114:	e7ba      	b.n	800608c <print_e+0x64>
	...

08006118 <_gcvt>:
 8006118:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800611c:	ec55 4b10 	vmov	r4, r5, d0
 8006120:	b088      	sub	sp, #32
 8006122:	4681      	mov	r9, r0
 8006124:	4688      	mov	r8, r1
 8006126:	4616      	mov	r6, r2
 8006128:	469a      	mov	sl, r3
 800612a:	ee10 0a10 	vmov	r0, s0
 800612e:	2200      	movs	r2, #0
 8006130:	2300      	movs	r3, #0
 8006132:	4629      	mov	r1, r5
 8006134:	9f10      	ldr	r7, [sp, #64]	; 0x40
 8006136:	f7fa fce1 	bl	8000afc <__aeabi_dcmplt>
 800613a:	b110      	cbz	r0, 8006142 <_gcvt+0x2a>
 800613c:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
 8006140:	461d      	mov	r5, r3
 8006142:	2200      	movs	r2, #0
 8006144:	2300      	movs	r3, #0
 8006146:	4620      	mov	r0, r4
 8006148:	4629      	mov	r1, r5
 800614a:	f7fa fccd 	bl	8000ae8 <__aeabi_dcmpeq>
 800614e:	b138      	cbz	r0, 8006160 <_gcvt+0x48>
 8006150:	2330      	movs	r3, #48	; 0x30
 8006152:	7033      	strb	r3, [r6, #0]
 8006154:	2300      	movs	r3, #0
 8006156:	7073      	strb	r3, [r6, #1]
 8006158:	4630      	mov	r0, r6
 800615a:	b008      	add	sp, #32
 800615c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006160:	a34b      	add	r3, pc, #300	; (adr r3, 8006290 <_gcvt+0x178>)
 8006162:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006166:	4620      	mov	r0, r4
 8006168:	4629      	mov	r1, r5
 800616a:	f7fa fcd1 	bl	8000b10 <__aeabi_dcmple>
 800616e:	b158      	cbz	r0, 8006188 <_gcvt+0x70>
 8006170:	f108 31ff 	add.w	r1, r8, #4294967295
 8006174:	9100      	str	r1, [sp, #0]
 8006176:	e9cd a701 	strd	sl, r7, [sp, #4]
 800617a:	4622      	mov	r2, r4
 800617c:	462b      	mov	r3, r5
 800617e:	4631      	mov	r1, r6
 8006180:	4648      	mov	r0, r9
 8006182:	f7ff ff51 	bl	8006028 <print_e>
 8006186:	e7e7      	b.n	8006158 <_gcvt+0x40>
 8006188:	4640      	mov	r0, r8
 800618a:	f000 fc09 	bl	80069a0 <_mprec_log10>
 800618e:	4622      	mov	r2, r4
 8006190:	ec51 0b10 	vmov	r0, r1, d0
 8006194:	462b      	mov	r3, r5
 8006196:	f7fa fcbb 	bl	8000b10 <__aeabi_dcmple>
 800619a:	2800      	cmp	r0, #0
 800619c:	d1e8      	bne.n	8006170 <_gcvt+0x58>
 800619e:	ab07      	add	r3, sp, #28
 80061a0:	9301      	str	r3, [sp, #4]
 80061a2:	ab06      	add	r3, sp, #24
 80061a4:	9300      	str	r3, [sp, #0]
 80061a6:	4642      	mov	r2, r8
 80061a8:	ab05      	add	r3, sp, #20
 80061aa:	ec45 4b10 	vmov	d0, r4, r5
 80061ae:	2102      	movs	r1, #2
 80061b0:	4648      	mov	r0, r9
 80061b2:	f000 fd81 	bl	8006cb8 <_dtoa_r>
 80061b6:	9a05      	ldr	r2, [sp, #20]
 80061b8:	f242 730f 	movw	r3, #9999	; 0x270f
 80061bc:	429a      	cmp	r2, r3
 80061be:	d00e      	beq.n	80061de <_gcvt+0xc6>
 80061c0:	4633      	mov	r3, r6
 80061c2:	44b0      	add	r8, r6
 80061c4:	4605      	mov	r5, r0
 80061c6:	f810 1b01 	ldrb.w	r1, [r0], #1
 80061ca:	9c05      	ldr	r4, [sp, #20]
 80061cc:	eba8 0203 	sub.w	r2, r8, r3
 80061d0:	b109      	cbz	r1, 80061d6 <_gcvt+0xbe>
 80061d2:	2c00      	cmp	r4, #0
 80061d4:	dc08      	bgt.n	80061e8 <_gcvt+0xd0>
 80061d6:	2100      	movs	r1, #0
 80061d8:	f04f 0c30 	mov.w	ip, #48	; 0x30
 80061dc:	e00d      	b.n	80061fa <_gcvt+0xe2>
 80061de:	4601      	mov	r1, r0
 80061e0:	4630      	mov	r0, r6
 80061e2:	f000 fcb5 	bl	8006b50 <strcpy>
 80061e6:	e7b7      	b.n	8006158 <_gcvt+0x40>
 80061e8:	3c01      	subs	r4, #1
 80061ea:	f803 1b01 	strb.w	r1, [r3], #1
 80061ee:	9405      	str	r4, [sp, #20]
 80061f0:	e7e8      	b.n	80061c4 <_gcvt+0xac>
 80061f2:	f803 cb01 	strb.w	ip, [r3], #1
 80061f6:	3a01      	subs	r2, #1
 80061f8:	2101      	movs	r1, #1
 80061fa:	2c00      	cmp	r4, #0
 80061fc:	4620      	mov	r0, r4
 80061fe:	dc2a      	bgt.n	8006256 <_gcvt+0x13e>
 8006200:	b101      	cbz	r1, 8006204 <_gcvt+0xec>
 8006202:	9405      	str	r4, [sp, #20]
 8006204:	b90f      	cbnz	r7, 800620a <_gcvt+0xf2>
 8006206:	7829      	ldrb	r1, [r5, #0]
 8006208:	b311      	cbz	r1, 8006250 <_gcvt+0x138>
 800620a:	42b3      	cmp	r3, r6
 800620c:	bf04      	itt	eq
 800620e:	2130      	moveq	r1, #48	; 0x30
 8006210:	f803 1b01 	strbeq.w	r1, [r3], #1
 8006214:	212e      	movs	r1, #46	; 0x2e
 8006216:	7019      	strb	r1, [r3, #0]
 8006218:	9905      	ldr	r1, [sp, #20]
 800621a:	4618      	mov	r0, r3
 800621c:	2400      	movs	r4, #0
 800621e:	eba1 0c03 	sub.w	ip, r1, r3
 8006222:	f04f 0e30 	mov.w	lr, #48	; 0x30
 8006226:	eb1c 0f00 	cmn.w	ip, r0
 800622a:	d41c      	bmi.n	8006266 <_gcvt+0x14e>
 800622c:	2900      	cmp	r1, #0
 800622e:	f1c1 0000 	rsb	r0, r1, #0
 8006232:	bfc8      	it	gt
 8006234:	2000      	movgt	r0, #0
 8006236:	f100 0c01 	add.w	ip, r0, #1
 800623a:	4463      	add	r3, ip
 800623c:	4401      	add	r1, r0
 800623e:	b104      	cbz	r4, 8006242 <_gcvt+0x12a>
 8006240:	9105      	str	r1, [sp, #20]
 8006242:	1e69      	subs	r1, r5, #1
 8006244:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8006248:	b108      	cbz	r0, 800624e <_gcvt+0x136>
 800624a:	2a00      	cmp	r2, #0
 800624c:	dc0f      	bgt.n	800626e <_gcvt+0x156>
 800624e:	b9df      	cbnz	r7, 8006288 <_gcvt+0x170>
 8006250:	2200      	movs	r2, #0
 8006252:	701a      	strb	r2, [r3, #0]
 8006254:	e780      	b.n	8006158 <_gcvt+0x40>
 8006256:	2a00      	cmp	r2, #0
 8006258:	f104 34ff 	add.w	r4, r4, #4294967295
 800625c:	dcc9      	bgt.n	80061f2 <_gcvt+0xda>
 800625e:	2900      	cmp	r1, #0
 8006260:	d0d0      	beq.n	8006204 <_gcvt+0xec>
 8006262:	9005      	str	r0, [sp, #20]
 8006264:	e7ce      	b.n	8006204 <_gcvt+0xec>
 8006266:	f800 ef01 	strb.w	lr, [r0, #1]!
 800626a:	2401      	movs	r4, #1
 800626c:	e7db      	b.n	8006226 <_gcvt+0x10e>
 800626e:	f803 0b01 	strb.w	r0, [r3], #1
 8006272:	3a01      	subs	r2, #1
 8006274:	e7e6      	b.n	8006244 <_gcvt+0x12c>
 8006276:	f801 5b01 	strb.w	r5, [r1], #1
 800627a:	1a60      	subs	r0, r4, r1
 800627c:	2800      	cmp	r0, #0
 800627e:	dcfa      	bgt.n	8006276 <_gcvt+0x15e>
 8006280:	2a00      	cmp	r2, #0
 8006282:	bfa8      	it	ge
 8006284:	189b      	addge	r3, r3, r2
 8006286:	e7e3      	b.n	8006250 <_gcvt+0x138>
 8006288:	4619      	mov	r1, r3
 800628a:	189c      	adds	r4, r3, r2
 800628c:	2530      	movs	r5, #48	; 0x30
 800628e:	e7f4      	b.n	800627a <_gcvt+0x162>
 8006290:	eb1c432d 	.word	0xeb1c432d
 8006294:	3f1a36e2 	.word	0x3f1a36e2

08006298 <_Balloc>:
 8006298:	b570      	push	{r4, r5, r6, lr}
 800629a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800629c:	4604      	mov	r4, r0
 800629e:	460d      	mov	r5, r1
 80062a0:	b976      	cbnz	r6, 80062c0 <_Balloc+0x28>
 80062a2:	2010      	movs	r0, #16
 80062a4:	f001 fb08 	bl	80078b8 <malloc>
 80062a8:	4602      	mov	r2, r0
 80062aa:	6260      	str	r0, [r4, #36]	; 0x24
 80062ac:	b920      	cbnz	r0, 80062b8 <_Balloc+0x20>
 80062ae:	4b18      	ldr	r3, [pc, #96]	; (8006310 <_Balloc+0x78>)
 80062b0:	4818      	ldr	r0, [pc, #96]	; (8006314 <_Balloc+0x7c>)
 80062b2:	2166      	movs	r1, #102	; 0x66
 80062b4:	f000 fc54 	bl	8006b60 <__assert_func>
 80062b8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80062bc:	6006      	str	r6, [r0, #0]
 80062be:	60c6      	str	r6, [r0, #12]
 80062c0:	6a66      	ldr	r6, [r4, #36]	; 0x24
 80062c2:	68f3      	ldr	r3, [r6, #12]
 80062c4:	b183      	cbz	r3, 80062e8 <_Balloc+0x50>
 80062c6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80062c8:	68db      	ldr	r3, [r3, #12]
 80062ca:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80062ce:	b9b8      	cbnz	r0, 8006300 <_Balloc+0x68>
 80062d0:	2101      	movs	r1, #1
 80062d2:	fa01 f605 	lsl.w	r6, r1, r5
 80062d6:	1d72      	adds	r2, r6, #5
 80062d8:	0092      	lsls	r2, r2, #2
 80062da:	4620      	mov	r0, r4
 80062dc:	f000 fb7e 	bl	80069dc <_calloc_r>
 80062e0:	b160      	cbz	r0, 80062fc <_Balloc+0x64>
 80062e2:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80062e6:	e00e      	b.n	8006306 <_Balloc+0x6e>
 80062e8:	2221      	movs	r2, #33	; 0x21
 80062ea:	2104      	movs	r1, #4
 80062ec:	4620      	mov	r0, r4
 80062ee:	f000 fb75 	bl	80069dc <_calloc_r>
 80062f2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80062f4:	60f0      	str	r0, [r6, #12]
 80062f6:	68db      	ldr	r3, [r3, #12]
 80062f8:	2b00      	cmp	r3, #0
 80062fa:	d1e4      	bne.n	80062c6 <_Balloc+0x2e>
 80062fc:	2000      	movs	r0, #0
 80062fe:	bd70      	pop	{r4, r5, r6, pc}
 8006300:	6802      	ldr	r2, [r0, #0]
 8006302:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8006306:	2300      	movs	r3, #0
 8006308:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800630c:	e7f7      	b.n	80062fe <_Balloc+0x66>
 800630e:	bf00      	nop
 8006310:	080088c8 	.word	0x080088c8
 8006314:	080088df 	.word	0x080088df

08006318 <_Bfree>:
 8006318:	b570      	push	{r4, r5, r6, lr}
 800631a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800631c:	4605      	mov	r5, r0
 800631e:	460c      	mov	r4, r1
 8006320:	b976      	cbnz	r6, 8006340 <_Bfree+0x28>
 8006322:	2010      	movs	r0, #16
 8006324:	f001 fac8 	bl	80078b8 <malloc>
 8006328:	4602      	mov	r2, r0
 800632a:	6268      	str	r0, [r5, #36]	; 0x24
 800632c:	b920      	cbnz	r0, 8006338 <_Bfree+0x20>
 800632e:	4b09      	ldr	r3, [pc, #36]	; (8006354 <_Bfree+0x3c>)
 8006330:	4809      	ldr	r0, [pc, #36]	; (8006358 <_Bfree+0x40>)
 8006332:	218a      	movs	r1, #138	; 0x8a
 8006334:	f000 fc14 	bl	8006b60 <__assert_func>
 8006338:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800633c:	6006      	str	r6, [r0, #0]
 800633e:	60c6      	str	r6, [r0, #12]
 8006340:	b13c      	cbz	r4, 8006352 <_Bfree+0x3a>
 8006342:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8006344:	6862      	ldr	r2, [r4, #4]
 8006346:	68db      	ldr	r3, [r3, #12]
 8006348:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800634c:	6021      	str	r1, [r4, #0]
 800634e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8006352:	bd70      	pop	{r4, r5, r6, pc}
 8006354:	080088c8 	.word	0x080088c8
 8006358:	080088df 	.word	0x080088df

0800635c <__multadd>:
 800635c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006360:	690d      	ldr	r5, [r1, #16]
 8006362:	4607      	mov	r7, r0
 8006364:	460c      	mov	r4, r1
 8006366:	461e      	mov	r6, r3
 8006368:	f101 0c14 	add.w	ip, r1, #20
 800636c:	2000      	movs	r0, #0
 800636e:	f8dc 3000 	ldr.w	r3, [ip]
 8006372:	b299      	uxth	r1, r3
 8006374:	fb02 6101 	mla	r1, r2, r1, r6
 8006378:	0c1e      	lsrs	r6, r3, #16
 800637a:	0c0b      	lsrs	r3, r1, #16
 800637c:	fb02 3306 	mla	r3, r2, r6, r3
 8006380:	b289      	uxth	r1, r1
 8006382:	3001      	adds	r0, #1
 8006384:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8006388:	4285      	cmp	r5, r0
 800638a:	f84c 1b04 	str.w	r1, [ip], #4
 800638e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8006392:	dcec      	bgt.n	800636e <__multadd+0x12>
 8006394:	b30e      	cbz	r6, 80063da <__multadd+0x7e>
 8006396:	68a3      	ldr	r3, [r4, #8]
 8006398:	42ab      	cmp	r3, r5
 800639a:	dc19      	bgt.n	80063d0 <__multadd+0x74>
 800639c:	6861      	ldr	r1, [r4, #4]
 800639e:	4638      	mov	r0, r7
 80063a0:	3101      	adds	r1, #1
 80063a2:	f7ff ff79 	bl	8006298 <_Balloc>
 80063a6:	4680      	mov	r8, r0
 80063a8:	b928      	cbnz	r0, 80063b6 <__multadd+0x5a>
 80063aa:	4602      	mov	r2, r0
 80063ac:	4b0c      	ldr	r3, [pc, #48]	; (80063e0 <__multadd+0x84>)
 80063ae:	480d      	ldr	r0, [pc, #52]	; (80063e4 <__multadd+0x88>)
 80063b0:	21b5      	movs	r1, #181	; 0xb5
 80063b2:	f000 fbd5 	bl	8006b60 <__assert_func>
 80063b6:	6922      	ldr	r2, [r4, #16]
 80063b8:	3202      	adds	r2, #2
 80063ba:	f104 010c 	add.w	r1, r4, #12
 80063be:	0092      	lsls	r2, r2, #2
 80063c0:	300c      	adds	r0, #12
 80063c2:	f001 fa81 	bl	80078c8 <memcpy>
 80063c6:	4621      	mov	r1, r4
 80063c8:	4638      	mov	r0, r7
 80063ca:	f7ff ffa5 	bl	8006318 <_Bfree>
 80063ce:	4644      	mov	r4, r8
 80063d0:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80063d4:	3501      	adds	r5, #1
 80063d6:	615e      	str	r6, [r3, #20]
 80063d8:	6125      	str	r5, [r4, #16]
 80063da:	4620      	mov	r0, r4
 80063dc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80063e0:	0800893b 	.word	0x0800893b
 80063e4:	080088df 	.word	0x080088df

080063e8 <__hi0bits>:
 80063e8:	0c03      	lsrs	r3, r0, #16
 80063ea:	041b      	lsls	r3, r3, #16
 80063ec:	b9d3      	cbnz	r3, 8006424 <__hi0bits+0x3c>
 80063ee:	0400      	lsls	r0, r0, #16
 80063f0:	2310      	movs	r3, #16
 80063f2:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 80063f6:	bf04      	itt	eq
 80063f8:	0200      	lsleq	r0, r0, #8
 80063fa:	3308      	addeq	r3, #8
 80063fc:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8006400:	bf04      	itt	eq
 8006402:	0100      	lsleq	r0, r0, #4
 8006404:	3304      	addeq	r3, #4
 8006406:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800640a:	bf04      	itt	eq
 800640c:	0080      	lsleq	r0, r0, #2
 800640e:	3302      	addeq	r3, #2
 8006410:	2800      	cmp	r0, #0
 8006412:	db05      	blt.n	8006420 <__hi0bits+0x38>
 8006414:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8006418:	f103 0301 	add.w	r3, r3, #1
 800641c:	bf08      	it	eq
 800641e:	2320      	moveq	r3, #32
 8006420:	4618      	mov	r0, r3
 8006422:	4770      	bx	lr
 8006424:	2300      	movs	r3, #0
 8006426:	e7e4      	b.n	80063f2 <__hi0bits+0xa>

08006428 <__lo0bits>:
 8006428:	6803      	ldr	r3, [r0, #0]
 800642a:	f013 0207 	ands.w	r2, r3, #7
 800642e:	4601      	mov	r1, r0
 8006430:	d00b      	beq.n	800644a <__lo0bits+0x22>
 8006432:	07da      	lsls	r2, r3, #31
 8006434:	d423      	bmi.n	800647e <__lo0bits+0x56>
 8006436:	0798      	lsls	r0, r3, #30
 8006438:	bf49      	itett	mi
 800643a:	085b      	lsrmi	r3, r3, #1
 800643c:	089b      	lsrpl	r3, r3, #2
 800643e:	2001      	movmi	r0, #1
 8006440:	600b      	strmi	r3, [r1, #0]
 8006442:	bf5c      	itt	pl
 8006444:	600b      	strpl	r3, [r1, #0]
 8006446:	2002      	movpl	r0, #2
 8006448:	4770      	bx	lr
 800644a:	b298      	uxth	r0, r3
 800644c:	b9a8      	cbnz	r0, 800647a <__lo0bits+0x52>
 800644e:	0c1b      	lsrs	r3, r3, #16
 8006450:	2010      	movs	r0, #16
 8006452:	b2da      	uxtb	r2, r3
 8006454:	b90a      	cbnz	r2, 800645a <__lo0bits+0x32>
 8006456:	3008      	adds	r0, #8
 8006458:	0a1b      	lsrs	r3, r3, #8
 800645a:	071a      	lsls	r2, r3, #28
 800645c:	bf04      	itt	eq
 800645e:	091b      	lsreq	r3, r3, #4
 8006460:	3004      	addeq	r0, #4
 8006462:	079a      	lsls	r2, r3, #30
 8006464:	bf04      	itt	eq
 8006466:	089b      	lsreq	r3, r3, #2
 8006468:	3002      	addeq	r0, #2
 800646a:	07da      	lsls	r2, r3, #31
 800646c:	d403      	bmi.n	8006476 <__lo0bits+0x4e>
 800646e:	085b      	lsrs	r3, r3, #1
 8006470:	f100 0001 	add.w	r0, r0, #1
 8006474:	d005      	beq.n	8006482 <__lo0bits+0x5a>
 8006476:	600b      	str	r3, [r1, #0]
 8006478:	4770      	bx	lr
 800647a:	4610      	mov	r0, r2
 800647c:	e7e9      	b.n	8006452 <__lo0bits+0x2a>
 800647e:	2000      	movs	r0, #0
 8006480:	4770      	bx	lr
 8006482:	2020      	movs	r0, #32
 8006484:	4770      	bx	lr
	...

08006488 <__i2b>:
 8006488:	b510      	push	{r4, lr}
 800648a:	460c      	mov	r4, r1
 800648c:	2101      	movs	r1, #1
 800648e:	f7ff ff03 	bl	8006298 <_Balloc>
 8006492:	4602      	mov	r2, r0
 8006494:	b928      	cbnz	r0, 80064a2 <__i2b+0x1a>
 8006496:	4b05      	ldr	r3, [pc, #20]	; (80064ac <__i2b+0x24>)
 8006498:	4805      	ldr	r0, [pc, #20]	; (80064b0 <__i2b+0x28>)
 800649a:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800649e:	f000 fb5f 	bl	8006b60 <__assert_func>
 80064a2:	2301      	movs	r3, #1
 80064a4:	6144      	str	r4, [r0, #20]
 80064a6:	6103      	str	r3, [r0, #16]
 80064a8:	bd10      	pop	{r4, pc}
 80064aa:	bf00      	nop
 80064ac:	0800893b 	.word	0x0800893b
 80064b0:	080088df 	.word	0x080088df

080064b4 <__multiply>:
 80064b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80064b8:	4691      	mov	r9, r2
 80064ba:	690a      	ldr	r2, [r1, #16]
 80064bc:	f8d9 3010 	ldr.w	r3, [r9, #16]
 80064c0:	429a      	cmp	r2, r3
 80064c2:	bfb8      	it	lt
 80064c4:	460b      	movlt	r3, r1
 80064c6:	460c      	mov	r4, r1
 80064c8:	bfbc      	itt	lt
 80064ca:	464c      	movlt	r4, r9
 80064cc:	4699      	movlt	r9, r3
 80064ce:	6927      	ldr	r7, [r4, #16]
 80064d0:	f8d9 a010 	ldr.w	sl, [r9, #16]
 80064d4:	68a3      	ldr	r3, [r4, #8]
 80064d6:	6861      	ldr	r1, [r4, #4]
 80064d8:	eb07 060a 	add.w	r6, r7, sl
 80064dc:	42b3      	cmp	r3, r6
 80064de:	b085      	sub	sp, #20
 80064e0:	bfb8      	it	lt
 80064e2:	3101      	addlt	r1, #1
 80064e4:	f7ff fed8 	bl	8006298 <_Balloc>
 80064e8:	b930      	cbnz	r0, 80064f8 <__multiply+0x44>
 80064ea:	4602      	mov	r2, r0
 80064ec:	4b44      	ldr	r3, [pc, #272]	; (8006600 <__multiply+0x14c>)
 80064ee:	4845      	ldr	r0, [pc, #276]	; (8006604 <__multiply+0x150>)
 80064f0:	f240 115d 	movw	r1, #349	; 0x15d
 80064f4:	f000 fb34 	bl	8006b60 <__assert_func>
 80064f8:	f100 0514 	add.w	r5, r0, #20
 80064fc:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8006500:	462b      	mov	r3, r5
 8006502:	2200      	movs	r2, #0
 8006504:	4543      	cmp	r3, r8
 8006506:	d321      	bcc.n	800654c <__multiply+0x98>
 8006508:	f104 0314 	add.w	r3, r4, #20
 800650c:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8006510:	f109 0314 	add.w	r3, r9, #20
 8006514:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8006518:	9202      	str	r2, [sp, #8]
 800651a:	1b3a      	subs	r2, r7, r4
 800651c:	3a15      	subs	r2, #21
 800651e:	f022 0203 	bic.w	r2, r2, #3
 8006522:	3204      	adds	r2, #4
 8006524:	f104 0115 	add.w	r1, r4, #21
 8006528:	428f      	cmp	r7, r1
 800652a:	bf38      	it	cc
 800652c:	2204      	movcc	r2, #4
 800652e:	9201      	str	r2, [sp, #4]
 8006530:	9a02      	ldr	r2, [sp, #8]
 8006532:	9303      	str	r3, [sp, #12]
 8006534:	429a      	cmp	r2, r3
 8006536:	d80c      	bhi.n	8006552 <__multiply+0x9e>
 8006538:	2e00      	cmp	r6, #0
 800653a:	dd03      	ble.n	8006544 <__multiply+0x90>
 800653c:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8006540:	2b00      	cmp	r3, #0
 8006542:	d05a      	beq.n	80065fa <__multiply+0x146>
 8006544:	6106      	str	r6, [r0, #16]
 8006546:	b005      	add	sp, #20
 8006548:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800654c:	f843 2b04 	str.w	r2, [r3], #4
 8006550:	e7d8      	b.n	8006504 <__multiply+0x50>
 8006552:	f8b3 a000 	ldrh.w	sl, [r3]
 8006556:	f1ba 0f00 	cmp.w	sl, #0
 800655a:	d024      	beq.n	80065a6 <__multiply+0xf2>
 800655c:	f104 0e14 	add.w	lr, r4, #20
 8006560:	46a9      	mov	r9, r5
 8006562:	f04f 0c00 	mov.w	ip, #0
 8006566:	f85e 2b04 	ldr.w	r2, [lr], #4
 800656a:	f8d9 1000 	ldr.w	r1, [r9]
 800656e:	fa1f fb82 	uxth.w	fp, r2
 8006572:	b289      	uxth	r1, r1
 8006574:	fb0a 110b 	mla	r1, sl, fp, r1
 8006578:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800657c:	f8d9 2000 	ldr.w	r2, [r9]
 8006580:	4461      	add	r1, ip
 8006582:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8006586:	fb0a c20b 	mla	r2, sl, fp, ip
 800658a:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800658e:	b289      	uxth	r1, r1
 8006590:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8006594:	4577      	cmp	r7, lr
 8006596:	f849 1b04 	str.w	r1, [r9], #4
 800659a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800659e:	d8e2      	bhi.n	8006566 <__multiply+0xb2>
 80065a0:	9a01      	ldr	r2, [sp, #4]
 80065a2:	f845 c002 	str.w	ip, [r5, r2]
 80065a6:	9a03      	ldr	r2, [sp, #12]
 80065a8:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 80065ac:	3304      	adds	r3, #4
 80065ae:	f1b9 0f00 	cmp.w	r9, #0
 80065b2:	d020      	beq.n	80065f6 <__multiply+0x142>
 80065b4:	6829      	ldr	r1, [r5, #0]
 80065b6:	f104 0c14 	add.w	ip, r4, #20
 80065ba:	46ae      	mov	lr, r5
 80065bc:	f04f 0a00 	mov.w	sl, #0
 80065c0:	f8bc b000 	ldrh.w	fp, [ip]
 80065c4:	f8be 2002 	ldrh.w	r2, [lr, #2]
 80065c8:	fb09 220b 	mla	r2, r9, fp, r2
 80065cc:	4492      	add	sl, r2
 80065ce:	b289      	uxth	r1, r1
 80065d0:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 80065d4:	f84e 1b04 	str.w	r1, [lr], #4
 80065d8:	f85c 2b04 	ldr.w	r2, [ip], #4
 80065dc:	f8be 1000 	ldrh.w	r1, [lr]
 80065e0:	0c12      	lsrs	r2, r2, #16
 80065e2:	fb09 1102 	mla	r1, r9, r2, r1
 80065e6:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 80065ea:	4567      	cmp	r7, ip
 80065ec:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 80065f0:	d8e6      	bhi.n	80065c0 <__multiply+0x10c>
 80065f2:	9a01      	ldr	r2, [sp, #4]
 80065f4:	50a9      	str	r1, [r5, r2]
 80065f6:	3504      	adds	r5, #4
 80065f8:	e79a      	b.n	8006530 <__multiply+0x7c>
 80065fa:	3e01      	subs	r6, #1
 80065fc:	e79c      	b.n	8006538 <__multiply+0x84>
 80065fe:	bf00      	nop
 8006600:	0800893b 	.word	0x0800893b
 8006604:	080088df 	.word	0x080088df

08006608 <__pow5mult>:
 8006608:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800660c:	4615      	mov	r5, r2
 800660e:	f012 0203 	ands.w	r2, r2, #3
 8006612:	4606      	mov	r6, r0
 8006614:	460f      	mov	r7, r1
 8006616:	d007      	beq.n	8006628 <__pow5mult+0x20>
 8006618:	4c25      	ldr	r4, [pc, #148]	; (80066b0 <__pow5mult+0xa8>)
 800661a:	3a01      	subs	r2, #1
 800661c:	2300      	movs	r3, #0
 800661e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8006622:	f7ff fe9b 	bl	800635c <__multadd>
 8006626:	4607      	mov	r7, r0
 8006628:	10ad      	asrs	r5, r5, #2
 800662a:	d03d      	beq.n	80066a8 <__pow5mult+0xa0>
 800662c:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800662e:	b97c      	cbnz	r4, 8006650 <__pow5mult+0x48>
 8006630:	2010      	movs	r0, #16
 8006632:	f001 f941 	bl	80078b8 <malloc>
 8006636:	4602      	mov	r2, r0
 8006638:	6270      	str	r0, [r6, #36]	; 0x24
 800663a:	b928      	cbnz	r0, 8006648 <__pow5mult+0x40>
 800663c:	4b1d      	ldr	r3, [pc, #116]	; (80066b4 <__pow5mult+0xac>)
 800663e:	481e      	ldr	r0, [pc, #120]	; (80066b8 <__pow5mult+0xb0>)
 8006640:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8006644:	f000 fa8c 	bl	8006b60 <__assert_func>
 8006648:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800664c:	6004      	str	r4, [r0, #0]
 800664e:	60c4      	str	r4, [r0, #12]
 8006650:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8006654:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8006658:	b94c      	cbnz	r4, 800666e <__pow5mult+0x66>
 800665a:	f240 2171 	movw	r1, #625	; 0x271
 800665e:	4630      	mov	r0, r6
 8006660:	f7ff ff12 	bl	8006488 <__i2b>
 8006664:	2300      	movs	r3, #0
 8006666:	f8c8 0008 	str.w	r0, [r8, #8]
 800666a:	4604      	mov	r4, r0
 800666c:	6003      	str	r3, [r0, #0]
 800666e:	f04f 0900 	mov.w	r9, #0
 8006672:	07eb      	lsls	r3, r5, #31
 8006674:	d50a      	bpl.n	800668c <__pow5mult+0x84>
 8006676:	4639      	mov	r1, r7
 8006678:	4622      	mov	r2, r4
 800667a:	4630      	mov	r0, r6
 800667c:	f7ff ff1a 	bl	80064b4 <__multiply>
 8006680:	4639      	mov	r1, r7
 8006682:	4680      	mov	r8, r0
 8006684:	4630      	mov	r0, r6
 8006686:	f7ff fe47 	bl	8006318 <_Bfree>
 800668a:	4647      	mov	r7, r8
 800668c:	106d      	asrs	r5, r5, #1
 800668e:	d00b      	beq.n	80066a8 <__pow5mult+0xa0>
 8006690:	6820      	ldr	r0, [r4, #0]
 8006692:	b938      	cbnz	r0, 80066a4 <__pow5mult+0x9c>
 8006694:	4622      	mov	r2, r4
 8006696:	4621      	mov	r1, r4
 8006698:	4630      	mov	r0, r6
 800669a:	f7ff ff0b 	bl	80064b4 <__multiply>
 800669e:	6020      	str	r0, [r4, #0]
 80066a0:	f8c0 9000 	str.w	r9, [r0]
 80066a4:	4604      	mov	r4, r0
 80066a6:	e7e4      	b.n	8006672 <__pow5mult+0x6a>
 80066a8:	4638      	mov	r0, r7
 80066aa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80066ae:	bf00      	nop
 80066b0:	08008a40 	.word	0x08008a40
 80066b4:	080088c8 	.word	0x080088c8
 80066b8:	080088df 	.word	0x080088df

080066bc <__lshift>:
 80066bc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80066c0:	460c      	mov	r4, r1
 80066c2:	6849      	ldr	r1, [r1, #4]
 80066c4:	6923      	ldr	r3, [r4, #16]
 80066c6:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80066ca:	68a3      	ldr	r3, [r4, #8]
 80066cc:	4607      	mov	r7, r0
 80066ce:	4691      	mov	r9, r2
 80066d0:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80066d4:	f108 0601 	add.w	r6, r8, #1
 80066d8:	42b3      	cmp	r3, r6
 80066da:	db0b      	blt.n	80066f4 <__lshift+0x38>
 80066dc:	4638      	mov	r0, r7
 80066de:	f7ff fddb 	bl	8006298 <_Balloc>
 80066e2:	4605      	mov	r5, r0
 80066e4:	b948      	cbnz	r0, 80066fa <__lshift+0x3e>
 80066e6:	4602      	mov	r2, r0
 80066e8:	4b2a      	ldr	r3, [pc, #168]	; (8006794 <__lshift+0xd8>)
 80066ea:	482b      	ldr	r0, [pc, #172]	; (8006798 <__lshift+0xdc>)
 80066ec:	f240 11d9 	movw	r1, #473	; 0x1d9
 80066f0:	f000 fa36 	bl	8006b60 <__assert_func>
 80066f4:	3101      	adds	r1, #1
 80066f6:	005b      	lsls	r3, r3, #1
 80066f8:	e7ee      	b.n	80066d8 <__lshift+0x1c>
 80066fa:	2300      	movs	r3, #0
 80066fc:	f100 0114 	add.w	r1, r0, #20
 8006700:	f100 0210 	add.w	r2, r0, #16
 8006704:	4618      	mov	r0, r3
 8006706:	4553      	cmp	r3, sl
 8006708:	db37      	blt.n	800677a <__lshift+0xbe>
 800670a:	6920      	ldr	r0, [r4, #16]
 800670c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8006710:	f104 0314 	add.w	r3, r4, #20
 8006714:	f019 091f 	ands.w	r9, r9, #31
 8006718:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800671c:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8006720:	d02f      	beq.n	8006782 <__lshift+0xc6>
 8006722:	f1c9 0e20 	rsb	lr, r9, #32
 8006726:	468a      	mov	sl, r1
 8006728:	f04f 0c00 	mov.w	ip, #0
 800672c:	681a      	ldr	r2, [r3, #0]
 800672e:	fa02 f209 	lsl.w	r2, r2, r9
 8006732:	ea42 020c 	orr.w	r2, r2, ip
 8006736:	f84a 2b04 	str.w	r2, [sl], #4
 800673a:	f853 2b04 	ldr.w	r2, [r3], #4
 800673e:	4298      	cmp	r0, r3
 8006740:	fa22 fc0e 	lsr.w	ip, r2, lr
 8006744:	d8f2      	bhi.n	800672c <__lshift+0x70>
 8006746:	1b03      	subs	r3, r0, r4
 8006748:	3b15      	subs	r3, #21
 800674a:	f023 0303 	bic.w	r3, r3, #3
 800674e:	3304      	adds	r3, #4
 8006750:	f104 0215 	add.w	r2, r4, #21
 8006754:	4290      	cmp	r0, r2
 8006756:	bf38      	it	cc
 8006758:	2304      	movcc	r3, #4
 800675a:	f841 c003 	str.w	ip, [r1, r3]
 800675e:	f1bc 0f00 	cmp.w	ip, #0
 8006762:	d001      	beq.n	8006768 <__lshift+0xac>
 8006764:	f108 0602 	add.w	r6, r8, #2
 8006768:	3e01      	subs	r6, #1
 800676a:	4638      	mov	r0, r7
 800676c:	612e      	str	r6, [r5, #16]
 800676e:	4621      	mov	r1, r4
 8006770:	f7ff fdd2 	bl	8006318 <_Bfree>
 8006774:	4628      	mov	r0, r5
 8006776:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800677a:	f842 0f04 	str.w	r0, [r2, #4]!
 800677e:	3301      	adds	r3, #1
 8006780:	e7c1      	b.n	8006706 <__lshift+0x4a>
 8006782:	3904      	subs	r1, #4
 8006784:	f853 2b04 	ldr.w	r2, [r3], #4
 8006788:	f841 2f04 	str.w	r2, [r1, #4]!
 800678c:	4298      	cmp	r0, r3
 800678e:	d8f9      	bhi.n	8006784 <__lshift+0xc8>
 8006790:	e7ea      	b.n	8006768 <__lshift+0xac>
 8006792:	bf00      	nop
 8006794:	0800893b 	.word	0x0800893b
 8006798:	080088df 	.word	0x080088df

0800679c <__mcmp>:
 800679c:	b530      	push	{r4, r5, lr}
 800679e:	6902      	ldr	r2, [r0, #16]
 80067a0:	690c      	ldr	r4, [r1, #16]
 80067a2:	1b12      	subs	r2, r2, r4
 80067a4:	d10e      	bne.n	80067c4 <__mcmp+0x28>
 80067a6:	f100 0314 	add.w	r3, r0, #20
 80067aa:	3114      	adds	r1, #20
 80067ac:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 80067b0:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 80067b4:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 80067b8:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 80067bc:	42a5      	cmp	r5, r4
 80067be:	d003      	beq.n	80067c8 <__mcmp+0x2c>
 80067c0:	d305      	bcc.n	80067ce <__mcmp+0x32>
 80067c2:	2201      	movs	r2, #1
 80067c4:	4610      	mov	r0, r2
 80067c6:	bd30      	pop	{r4, r5, pc}
 80067c8:	4283      	cmp	r3, r0
 80067ca:	d3f3      	bcc.n	80067b4 <__mcmp+0x18>
 80067cc:	e7fa      	b.n	80067c4 <__mcmp+0x28>
 80067ce:	f04f 32ff 	mov.w	r2, #4294967295
 80067d2:	e7f7      	b.n	80067c4 <__mcmp+0x28>

080067d4 <__mdiff>:
 80067d4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80067d8:	460c      	mov	r4, r1
 80067da:	4606      	mov	r6, r0
 80067dc:	4611      	mov	r1, r2
 80067de:	4620      	mov	r0, r4
 80067e0:	4690      	mov	r8, r2
 80067e2:	f7ff ffdb 	bl	800679c <__mcmp>
 80067e6:	1e05      	subs	r5, r0, #0
 80067e8:	d110      	bne.n	800680c <__mdiff+0x38>
 80067ea:	4629      	mov	r1, r5
 80067ec:	4630      	mov	r0, r6
 80067ee:	f7ff fd53 	bl	8006298 <_Balloc>
 80067f2:	b930      	cbnz	r0, 8006802 <__mdiff+0x2e>
 80067f4:	4b3a      	ldr	r3, [pc, #232]	; (80068e0 <__mdiff+0x10c>)
 80067f6:	4602      	mov	r2, r0
 80067f8:	f240 2132 	movw	r1, #562	; 0x232
 80067fc:	4839      	ldr	r0, [pc, #228]	; (80068e4 <__mdiff+0x110>)
 80067fe:	f000 f9af 	bl	8006b60 <__assert_func>
 8006802:	2301      	movs	r3, #1
 8006804:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8006808:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800680c:	bfa4      	itt	ge
 800680e:	4643      	movge	r3, r8
 8006810:	46a0      	movge	r8, r4
 8006812:	4630      	mov	r0, r6
 8006814:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8006818:	bfa6      	itte	ge
 800681a:	461c      	movge	r4, r3
 800681c:	2500      	movge	r5, #0
 800681e:	2501      	movlt	r5, #1
 8006820:	f7ff fd3a 	bl	8006298 <_Balloc>
 8006824:	b920      	cbnz	r0, 8006830 <__mdiff+0x5c>
 8006826:	4b2e      	ldr	r3, [pc, #184]	; (80068e0 <__mdiff+0x10c>)
 8006828:	4602      	mov	r2, r0
 800682a:	f44f 7110 	mov.w	r1, #576	; 0x240
 800682e:	e7e5      	b.n	80067fc <__mdiff+0x28>
 8006830:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8006834:	6926      	ldr	r6, [r4, #16]
 8006836:	60c5      	str	r5, [r0, #12]
 8006838:	f104 0914 	add.w	r9, r4, #20
 800683c:	f108 0514 	add.w	r5, r8, #20
 8006840:	f100 0e14 	add.w	lr, r0, #20
 8006844:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8006848:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800684c:	f108 0210 	add.w	r2, r8, #16
 8006850:	46f2      	mov	sl, lr
 8006852:	2100      	movs	r1, #0
 8006854:	f859 3b04 	ldr.w	r3, [r9], #4
 8006858:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800685c:	fa1f f883 	uxth.w	r8, r3
 8006860:	fa11 f18b 	uxtah	r1, r1, fp
 8006864:	0c1b      	lsrs	r3, r3, #16
 8006866:	eba1 0808 	sub.w	r8, r1, r8
 800686a:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800686e:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8006872:	fa1f f888 	uxth.w	r8, r8
 8006876:	1419      	asrs	r1, r3, #16
 8006878:	454e      	cmp	r6, r9
 800687a:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800687e:	f84a 3b04 	str.w	r3, [sl], #4
 8006882:	d8e7      	bhi.n	8006854 <__mdiff+0x80>
 8006884:	1b33      	subs	r3, r6, r4
 8006886:	3b15      	subs	r3, #21
 8006888:	f023 0303 	bic.w	r3, r3, #3
 800688c:	3304      	adds	r3, #4
 800688e:	3415      	adds	r4, #21
 8006890:	42a6      	cmp	r6, r4
 8006892:	bf38      	it	cc
 8006894:	2304      	movcc	r3, #4
 8006896:	441d      	add	r5, r3
 8006898:	4473      	add	r3, lr
 800689a:	469e      	mov	lr, r3
 800689c:	462e      	mov	r6, r5
 800689e:	4566      	cmp	r6, ip
 80068a0:	d30e      	bcc.n	80068c0 <__mdiff+0xec>
 80068a2:	f10c 0203 	add.w	r2, ip, #3
 80068a6:	1b52      	subs	r2, r2, r5
 80068a8:	f022 0203 	bic.w	r2, r2, #3
 80068ac:	3d03      	subs	r5, #3
 80068ae:	45ac      	cmp	ip, r5
 80068b0:	bf38      	it	cc
 80068b2:	2200      	movcc	r2, #0
 80068b4:	441a      	add	r2, r3
 80068b6:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 80068ba:	b17b      	cbz	r3, 80068dc <__mdiff+0x108>
 80068bc:	6107      	str	r7, [r0, #16]
 80068be:	e7a3      	b.n	8006808 <__mdiff+0x34>
 80068c0:	f856 8b04 	ldr.w	r8, [r6], #4
 80068c4:	fa11 f288 	uxtah	r2, r1, r8
 80068c8:	1414      	asrs	r4, r2, #16
 80068ca:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 80068ce:	b292      	uxth	r2, r2
 80068d0:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 80068d4:	f84e 2b04 	str.w	r2, [lr], #4
 80068d8:	1421      	asrs	r1, r4, #16
 80068da:	e7e0      	b.n	800689e <__mdiff+0xca>
 80068dc:	3f01      	subs	r7, #1
 80068de:	e7ea      	b.n	80068b6 <__mdiff+0xe2>
 80068e0:	0800893b 	.word	0x0800893b
 80068e4:	080088df 	.word	0x080088df

080068e8 <__d2b>:
 80068e8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80068ec:	4689      	mov	r9, r1
 80068ee:	2101      	movs	r1, #1
 80068f0:	ec57 6b10 	vmov	r6, r7, d0
 80068f4:	4690      	mov	r8, r2
 80068f6:	f7ff fccf 	bl	8006298 <_Balloc>
 80068fa:	4604      	mov	r4, r0
 80068fc:	b930      	cbnz	r0, 800690c <__d2b+0x24>
 80068fe:	4602      	mov	r2, r0
 8006900:	4b25      	ldr	r3, [pc, #148]	; (8006998 <__d2b+0xb0>)
 8006902:	4826      	ldr	r0, [pc, #152]	; (800699c <__d2b+0xb4>)
 8006904:	f240 310a 	movw	r1, #778	; 0x30a
 8006908:	f000 f92a 	bl	8006b60 <__assert_func>
 800690c:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8006910:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8006914:	bb35      	cbnz	r5, 8006964 <__d2b+0x7c>
 8006916:	2e00      	cmp	r6, #0
 8006918:	9301      	str	r3, [sp, #4]
 800691a:	d028      	beq.n	800696e <__d2b+0x86>
 800691c:	4668      	mov	r0, sp
 800691e:	9600      	str	r6, [sp, #0]
 8006920:	f7ff fd82 	bl	8006428 <__lo0bits>
 8006924:	9900      	ldr	r1, [sp, #0]
 8006926:	b300      	cbz	r0, 800696a <__d2b+0x82>
 8006928:	9a01      	ldr	r2, [sp, #4]
 800692a:	f1c0 0320 	rsb	r3, r0, #32
 800692e:	fa02 f303 	lsl.w	r3, r2, r3
 8006932:	430b      	orrs	r3, r1
 8006934:	40c2      	lsrs	r2, r0
 8006936:	6163      	str	r3, [r4, #20]
 8006938:	9201      	str	r2, [sp, #4]
 800693a:	9b01      	ldr	r3, [sp, #4]
 800693c:	61a3      	str	r3, [r4, #24]
 800693e:	2b00      	cmp	r3, #0
 8006940:	bf14      	ite	ne
 8006942:	2202      	movne	r2, #2
 8006944:	2201      	moveq	r2, #1
 8006946:	6122      	str	r2, [r4, #16]
 8006948:	b1d5      	cbz	r5, 8006980 <__d2b+0x98>
 800694a:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800694e:	4405      	add	r5, r0
 8006950:	f8c9 5000 	str.w	r5, [r9]
 8006954:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8006958:	f8c8 0000 	str.w	r0, [r8]
 800695c:	4620      	mov	r0, r4
 800695e:	b003      	add	sp, #12
 8006960:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8006964:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006968:	e7d5      	b.n	8006916 <__d2b+0x2e>
 800696a:	6161      	str	r1, [r4, #20]
 800696c:	e7e5      	b.n	800693a <__d2b+0x52>
 800696e:	a801      	add	r0, sp, #4
 8006970:	f7ff fd5a 	bl	8006428 <__lo0bits>
 8006974:	9b01      	ldr	r3, [sp, #4]
 8006976:	6163      	str	r3, [r4, #20]
 8006978:	2201      	movs	r2, #1
 800697a:	6122      	str	r2, [r4, #16]
 800697c:	3020      	adds	r0, #32
 800697e:	e7e3      	b.n	8006948 <__d2b+0x60>
 8006980:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8006984:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8006988:	f8c9 0000 	str.w	r0, [r9]
 800698c:	6918      	ldr	r0, [r3, #16]
 800698e:	f7ff fd2b 	bl	80063e8 <__hi0bits>
 8006992:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8006996:	e7df      	b.n	8006958 <__d2b+0x70>
 8006998:	0800893b 	.word	0x0800893b
 800699c:	080088df 	.word	0x080088df

080069a0 <_mprec_log10>:
 80069a0:	2817      	cmp	r0, #23
 80069a2:	b5d0      	push	{r4, r6, r7, lr}
 80069a4:	4604      	mov	r4, r0
 80069a6:	dc07      	bgt.n	80069b8 <_mprec_log10+0x18>
 80069a8:	4809      	ldr	r0, [pc, #36]	; (80069d0 <_mprec_log10+0x30>)
 80069aa:	eb00 04c4 	add.w	r4, r0, r4, lsl #3
 80069ae:	e9d4 0100 	ldrd	r0, r1, [r4]
 80069b2:	ec41 0b10 	vmov	d0, r0, r1
 80069b6:	bdd0      	pop	{r4, r6, r7, pc}
 80069b8:	4906      	ldr	r1, [pc, #24]	; (80069d4 <_mprec_log10+0x34>)
 80069ba:	4f07      	ldr	r7, [pc, #28]	; (80069d8 <_mprec_log10+0x38>)
 80069bc:	2000      	movs	r0, #0
 80069be:	2600      	movs	r6, #0
 80069c0:	4632      	mov	r2, r6
 80069c2:	463b      	mov	r3, r7
 80069c4:	f7f9 fe28 	bl	8000618 <__aeabi_dmul>
 80069c8:	3c01      	subs	r4, #1
 80069ca:	d1f9      	bne.n	80069c0 <_mprec_log10+0x20>
 80069cc:	e7f1      	b.n	80069b2 <_mprec_log10+0x12>
 80069ce:	bf00      	nop
 80069d0:	08008978 	.word	0x08008978
 80069d4:	3ff00000 	.word	0x3ff00000
 80069d8:	40240000 	.word	0x40240000

080069dc <_calloc_r>:
 80069dc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80069de:	fba1 2402 	umull	r2, r4, r1, r2
 80069e2:	b94c      	cbnz	r4, 80069f8 <_calloc_r+0x1c>
 80069e4:	4611      	mov	r1, r2
 80069e6:	9201      	str	r2, [sp, #4]
 80069e8:	f000 f82e 	bl	8006a48 <_malloc_r>
 80069ec:	9a01      	ldr	r2, [sp, #4]
 80069ee:	4605      	mov	r5, r0
 80069f0:	b930      	cbnz	r0, 8006a00 <_calloc_r+0x24>
 80069f2:	4628      	mov	r0, r5
 80069f4:	b003      	add	sp, #12
 80069f6:	bd30      	pop	{r4, r5, pc}
 80069f8:	220c      	movs	r2, #12
 80069fa:	6002      	str	r2, [r0, #0]
 80069fc:	2500      	movs	r5, #0
 80069fe:	e7f8      	b.n	80069f2 <_calloc_r+0x16>
 8006a00:	4621      	mov	r1, r4
 8006a02:	f7ff fad5 	bl	8005fb0 <memset>
 8006a06:	e7f4      	b.n	80069f2 <_calloc_r+0x16>

08006a08 <sbrk_aligned>:
 8006a08:	b570      	push	{r4, r5, r6, lr}
 8006a0a:	4e0e      	ldr	r6, [pc, #56]	; (8006a44 <sbrk_aligned+0x3c>)
 8006a0c:	460c      	mov	r4, r1
 8006a0e:	6831      	ldr	r1, [r6, #0]
 8006a10:	4605      	mov	r5, r0
 8006a12:	b911      	cbnz	r1, 8006a1a <sbrk_aligned+0x12>
 8006a14:	f000 f88c 	bl	8006b30 <_sbrk_r>
 8006a18:	6030      	str	r0, [r6, #0]
 8006a1a:	4621      	mov	r1, r4
 8006a1c:	4628      	mov	r0, r5
 8006a1e:	f000 f887 	bl	8006b30 <_sbrk_r>
 8006a22:	1c43      	adds	r3, r0, #1
 8006a24:	d00a      	beq.n	8006a3c <sbrk_aligned+0x34>
 8006a26:	1cc4      	adds	r4, r0, #3
 8006a28:	f024 0403 	bic.w	r4, r4, #3
 8006a2c:	42a0      	cmp	r0, r4
 8006a2e:	d007      	beq.n	8006a40 <sbrk_aligned+0x38>
 8006a30:	1a21      	subs	r1, r4, r0
 8006a32:	4628      	mov	r0, r5
 8006a34:	f000 f87c 	bl	8006b30 <_sbrk_r>
 8006a38:	3001      	adds	r0, #1
 8006a3a:	d101      	bne.n	8006a40 <sbrk_aligned+0x38>
 8006a3c:	f04f 34ff 	mov.w	r4, #4294967295
 8006a40:	4620      	mov	r0, r4
 8006a42:	bd70      	pop	{r4, r5, r6, pc}
 8006a44:	200008b8 	.word	0x200008b8

08006a48 <_malloc_r>:
 8006a48:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006a4c:	1ccd      	adds	r5, r1, #3
 8006a4e:	f025 0503 	bic.w	r5, r5, #3
 8006a52:	3508      	adds	r5, #8
 8006a54:	2d0c      	cmp	r5, #12
 8006a56:	bf38      	it	cc
 8006a58:	250c      	movcc	r5, #12
 8006a5a:	2d00      	cmp	r5, #0
 8006a5c:	4607      	mov	r7, r0
 8006a5e:	db01      	blt.n	8006a64 <_malloc_r+0x1c>
 8006a60:	42a9      	cmp	r1, r5
 8006a62:	d905      	bls.n	8006a70 <_malloc_r+0x28>
 8006a64:	230c      	movs	r3, #12
 8006a66:	603b      	str	r3, [r7, #0]
 8006a68:	2600      	movs	r6, #0
 8006a6a:	4630      	mov	r0, r6
 8006a6c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006a70:	4e2e      	ldr	r6, [pc, #184]	; (8006b2c <_malloc_r+0xe4>)
 8006a72:	f000 ff37 	bl	80078e4 <__malloc_lock>
 8006a76:	6833      	ldr	r3, [r6, #0]
 8006a78:	461c      	mov	r4, r3
 8006a7a:	bb34      	cbnz	r4, 8006aca <_malloc_r+0x82>
 8006a7c:	4629      	mov	r1, r5
 8006a7e:	4638      	mov	r0, r7
 8006a80:	f7ff ffc2 	bl	8006a08 <sbrk_aligned>
 8006a84:	1c43      	adds	r3, r0, #1
 8006a86:	4604      	mov	r4, r0
 8006a88:	d14d      	bne.n	8006b26 <_malloc_r+0xde>
 8006a8a:	6834      	ldr	r4, [r6, #0]
 8006a8c:	4626      	mov	r6, r4
 8006a8e:	2e00      	cmp	r6, #0
 8006a90:	d140      	bne.n	8006b14 <_malloc_r+0xcc>
 8006a92:	6823      	ldr	r3, [r4, #0]
 8006a94:	4631      	mov	r1, r6
 8006a96:	4638      	mov	r0, r7
 8006a98:	eb04 0803 	add.w	r8, r4, r3
 8006a9c:	f000 f848 	bl	8006b30 <_sbrk_r>
 8006aa0:	4580      	cmp	r8, r0
 8006aa2:	d13a      	bne.n	8006b1a <_malloc_r+0xd2>
 8006aa4:	6821      	ldr	r1, [r4, #0]
 8006aa6:	3503      	adds	r5, #3
 8006aa8:	1a6d      	subs	r5, r5, r1
 8006aaa:	f025 0503 	bic.w	r5, r5, #3
 8006aae:	3508      	adds	r5, #8
 8006ab0:	2d0c      	cmp	r5, #12
 8006ab2:	bf38      	it	cc
 8006ab4:	250c      	movcc	r5, #12
 8006ab6:	4629      	mov	r1, r5
 8006ab8:	4638      	mov	r0, r7
 8006aba:	f7ff ffa5 	bl	8006a08 <sbrk_aligned>
 8006abe:	3001      	adds	r0, #1
 8006ac0:	d02b      	beq.n	8006b1a <_malloc_r+0xd2>
 8006ac2:	6823      	ldr	r3, [r4, #0]
 8006ac4:	442b      	add	r3, r5
 8006ac6:	6023      	str	r3, [r4, #0]
 8006ac8:	e00e      	b.n	8006ae8 <_malloc_r+0xa0>
 8006aca:	6822      	ldr	r2, [r4, #0]
 8006acc:	1b52      	subs	r2, r2, r5
 8006ace:	d41e      	bmi.n	8006b0e <_malloc_r+0xc6>
 8006ad0:	2a0b      	cmp	r2, #11
 8006ad2:	d916      	bls.n	8006b02 <_malloc_r+0xba>
 8006ad4:	1961      	adds	r1, r4, r5
 8006ad6:	42a3      	cmp	r3, r4
 8006ad8:	6025      	str	r5, [r4, #0]
 8006ada:	bf18      	it	ne
 8006adc:	6059      	strne	r1, [r3, #4]
 8006ade:	6863      	ldr	r3, [r4, #4]
 8006ae0:	bf08      	it	eq
 8006ae2:	6031      	streq	r1, [r6, #0]
 8006ae4:	5162      	str	r2, [r4, r5]
 8006ae6:	604b      	str	r3, [r1, #4]
 8006ae8:	4638      	mov	r0, r7
 8006aea:	f104 060b 	add.w	r6, r4, #11
 8006aee:	f000 feff 	bl	80078f0 <__malloc_unlock>
 8006af2:	f026 0607 	bic.w	r6, r6, #7
 8006af6:	1d23      	adds	r3, r4, #4
 8006af8:	1af2      	subs	r2, r6, r3
 8006afa:	d0b6      	beq.n	8006a6a <_malloc_r+0x22>
 8006afc:	1b9b      	subs	r3, r3, r6
 8006afe:	50a3      	str	r3, [r4, r2]
 8006b00:	e7b3      	b.n	8006a6a <_malloc_r+0x22>
 8006b02:	6862      	ldr	r2, [r4, #4]
 8006b04:	42a3      	cmp	r3, r4
 8006b06:	bf0c      	ite	eq
 8006b08:	6032      	streq	r2, [r6, #0]
 8006b0a:	605a      	strne	r2, [r3, #4]
 8006b0c:	e7ec      	b.n	8006ae8 <_malloc_r+0xa0>
 8006b0e:	4623      	mov	r3, r4
 8006b10:	6864      	ldr	r4, [r4, #4]
 8006b12:	e7b2      	b.n	8006a7a <_malloc_r+0x32>
 8006b14:	4634      	mov	r4, r6
 8006b16:	6876      	ldr	r6, [r6, #4]
 8006b18:	e7b9      	b.n	8006a8e <_malloc_r+0x46>
 8006b1a:	230c      	movs	r3, #12
 8006b1c:	603b      	str	r3, [r7, #0]
 8006b1e:	4638      	mov	r0, r7
 8006b20:	f000 fee6 	bl	80078f0 <__malloc_unlock>
 8006b24:	e7a1      	b.n	8006a6a <_malloc_r+0x22>
 8006b26:	6025      	str	r5, [r4, #0]
 8006b28:	e7de      	b.n	8006ae8 <_malloc_r+0xa0>
 8006b2a:	bf00      	nop
 8006b2c:	200008b4 	.word	0x200008b4

08006b30 <_sbrk_r>:
 8006b30:	b538      	push	{r3, r4, r5, lr}
 8006b32:	4d06      	ldr	r5, [pc, #24]	; (8006b4c <_sbrk_r+0x1c>)
 8006b34:	2300      	movs	r3, #0
 8006b36:	4604      	mov	r4, r0
 8006b38:	4608      	mov	r0, r1
 8006b3a:	602b      	str	r3, [r5, #0]
 8006b3c:	f001 fe28 	bl	8008790 <_sbrk>
 8006b40:	1c43      	adds	r3, r0, #1
 8006b42:	d102      	bne.n	8006b4a <_sbrk_r+0x1a>
 8006b44:	682b      	ldr	r3, [r5, #0]
 8006b46:	b103      	cbz	r3, 8006b4a <_sbrk_r+0x1a>
 8006b48:	6023      	str	r3, [r4, #0]
 8006b4a:	bd38      	pop	{r3, r4, r5, pc}
 8006b4c:	200008bc 	.word	0x200008bc

08006b50 <strcpy>:
 8006b50:	4603      	mov	r3, r0
 8006b52:	f811 2b01 	ldrb.w	r2, [r1], #1
 8006b56:	f803 2b01 	strb.w	r2, [r3], #1
 8006b5a:	2a00      	cmp	r2, #0
 8006b5c:	d1f9      	bne.n	8006b52 <strcpy+0x2>
 8006b5e:	4770      	bx	lr

08006b60 <__assert_func>:
 8006b60:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8006b62:	4614      	mov	r4, r2
 8006b64:	461a      	mov	r2, r3
 8006b66:	4b09      	ldr	r3, [pc, #36]	; (8006b8c <__assert_func+0x2c>)
 8006b68:	681b      	ldr	r3, [r3, #0]
 8006b6a:	4605      	mov	r5, r0
 8006b6c:	68d8      	ldr	r0, [r3, #12]
 8006b6e:	b14c      	cbz	r4, 8006b84 <__assert_func+0x24>
 8006b70:	4b07      	ldr	r3, [pc, #28]	; (8006b90 <__assert_func+0x30>)
 8006b72:	9100      	str	r1, [sp, #0]
 8006b74:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8006b78:	4906      	ldr	r1, [pc, #24]	; (8006b94 <__assert_func+0x34>)
 8006b7a:	462b      	mov	r3, r5
 8006b7c:	f000 fe8a 	bl	8007894 <fiprintf>
 8006b80:	f001 fab6 	bl	80080f0 <abort>
 8006b84:	4b04      	ldr	r3, [pc, #16]	; (8006b98 <__assert_func+0x38>)
 8006b86:	461c      	mov	r4, r3
 8006b88:	e7f3      	b.n	8006b72 <__assert_func+0x12>
 8006b8a:	bf00      	nop
 8006b8c:	2000000c 	.word	0x2000000c
 8006b90:	08008a4c 	.word	0x08008a4c
 8006b94:	08008a59 	.word	0x08008a59
 8006b98:	08008a87 	.word	0x08008a87

08006b9c <quorem>:
 8006b9c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006ba0:	6903      	ldr	r3, [r0, #16]
 8006ba2:	690c      	ldr	r4, [r1, #16]
 8006ba4:	42a3      	cmp	r3, r4
 8006ba6:	4607      	mov	r7, r0
 8006ba8:	f2c0 8081 	blt.w	8006cae <quorem+0x112>
 8006bac:	3c01      	subs	r4, #1
 8006bae:	f101 0814 	add.w	r8, r1, #20
 8006bb2:	f100 0514 	add.w	r5, r0, #20
 8006bb6:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8006bba:	9301      	str	r3, [sp, #4]
 8006bbc:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8006bc0:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8006bc4:	3301      	adds	r3, #1
 8006bc6:	429a      	cmp	r2, r3
 8006bc8:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8006bcc:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8006bd0:	fbb2 f6f3 	udiv	r6, r2, r3
 8006bd4:	d331      	bcc.n	8006c3a <quorem+0x9e>
 8006bd6:	f04f 0e00 	mov.w	lr, #0
 8006bda:	4640      	mov	r0, r8
 8006bdc:	46ac      	mov	ip, r5
 8006bde:	46f2      	mov	sl, lr
 8006be0:	f850 2b04 	ldr.w	r2, [r0], #4
 8006be4:	b293      	uxth	r3, r2
 8006be6:	fb06 e303 	mla	r3, r6, r3, lr
 8006bea:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8006bee:	b29b      	uxth	r3, r3
 8006bf0:	ebaa 0303 	sub.w	r3, sl, r3
 8006bf4:	f8dc a000 	ldr.w	sl, [ip]
 8006bf8:	0c12      	lsrs	r2, r2, #16
 8006bfa:	fa13 f38a 	uxtah	r3, r3, sl
 8006bfe:	fb06 e202 	mla	r2, r6, r2, lr
 8006c02:	9300      	str	r3, [sp, #0]
 8006c04:	9b00      	ldr	r3, [sp, #0]
 8006c06:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8006c0a:	b292      	uxth	r2, r2
 8006c0c:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8006c10:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8006c14:	f8bd 3000 	ldrh.w	r3, [sp]
 8006c18:	4581      	cmp	r9, r0
 8006c1a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8006c1e:	f84c 3b04 	str.w	r3, [ip], #4
 8006c22:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8006c26:	d2db      	bcs.n	8006be0 <quorem+0x44>
 8006c28:	f855 300b 	ldr.w	r3, [r5, fp]
 8006c2c:	b92b      	cbnz	r3, 8006c3a <quorem+0x9e>
 8006c2e:	9b01      	ldr	r3, [sp, #4]
 8006c30:	3b04      	subs	r3, #4
 8006c32:	429d      	cmp	r5, r3
 8006c34:	461a      	mov	r2, r3
 8006c36:	d32e      	bcc.n	8006c96 <quorem+0xfa>
 8006c38:	613c      	str	r4, [r7, #16]
 8006c3a:	4638      	mov	r0, r7
 8006c3c:	f7ff fdae 	bl	800679c <__mcmp>
 8006c40:	2800      	cmp	r0, #0
 8006c42:	db24      	blt.n	8006c8e <quorem+0xf2>
 8006c44:	3601      	adds	r6, #1
 8006c46:	4628      	mov	r0, r5
 8006c48:	f04f 0c00 	mov.w	ip, #0
 8006c4c:	f858 2b04 	ldr.w	r2, [r8], #4
 8006c50:	f8d0 e000 	ldr.w	lr, [r0]
 8006c54:	b293      	uxth	r3, r2
 8006c56:	ebac 0303 	sub.w	r3, ip, r3
 8006c5a:	0c12      	lsrs	r2, r2, #16
 8006c5c:	fa13 f38e 	uxtah	r3, r3, lr
 8006c60:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8006c64:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8006c68:	b29b      	uxth	r3, r3
 8006c6a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8006c6e:	45c1      	cmp	r9, r8
 8006c70:	f840 3b04 	str.w	r3, [r0], #4
 8006c74:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8006c78:	d2e8      	bcs.n	8006c4c <quorem+0xb0>
 8006c7a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8006c7e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8006c82:	b922      	cbnz	r2, 8006c8e <quorem+0xf2>
 8006c84:	3b04      	subs	r3, #4
 8006c86:	429d      	cmp	r5, r3
 8006c88:	461a      	mov	r2, r3
 8006c8a:	d30a      	bcc.n	8006ca2 <quorem+0x106>
 8006c8c:	613c      	str	r4, [r7, #16]
 8006c8e:	4630      	mov	r0, r6
 8006c90:	b003      	add	sp, #12
 8006c92:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006c96:	6812      	ldr	r2, [r2, #0]
 8006c98:	3b04      	subs	r3, #4
 8006c9a:	2a00      	cmp	r2, #0
 8006c9c:	d1cc      	bne.n	8006c38 <quorem+0x9c>
 8006c9e:	3c01      	subs	r4, #1
 8006ca0:	e7c7      	b.n	8006c32 <quorem+0x96>
 8006ca2:	6812      	ldr	r2, [r2, #0]
 8006ca4:	3b04      	subs	r3, #4
 8006ca6:	2a00      	cmp	r2, #0
 8006ca8:	d1f0      	bne.n	8006c8c <quorem+0xf0>
 8006caa:	3c01      	subs	r4, #1
 8006cac:	e7eb      	b.n	8006c86 <quorem+0xea>
 8006cae:	2000      	movs	r0, #0
 8006cb0:	e7ee      	b.n	8006c90 <quorem+0xf4>
 8006cb2:	0000      	movs	r0, r0
 8006cb4:	0000      	movs	r0, r0
	...

08006cb8 <_dtoa_r>:
 8006cb8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006cbc:	ed2d 8b04 	vpush	{d8-d9}
 8006cc0:	ec57 6b10 	vmov	r6, r7, d0
 8006cc4:	b093      	sub	sp, #76	; 0x4c
 8006cc6:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8006cc8:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8006ccc:	9106      	str	r1, [sp, #24]
 8006cce:	ee10 aa10 	vmov	sl, s0
 8006cd2:	4604      	mov	r4, r0
 8006cd4:	9209      	str	r2, [sp, #36]	; 0x24
 8006cd6:	930c      	str	r3, [sp, #48]	; 0x30
 8006cd8:	46bb      	mov	fp, r7
 8006cda:	b975      	cbnz	r5, 8006cfa <_dtoa_r+0x42>
 8006cdc:	2010      	movs	r0, #16
 8006cde:	f000 fdeb 	bl	80078b8 <malloc>
 8006ce2:	4602      	mov	r2, r0
 8006ce4:	6260      	str	r0, [r4, #36]	; 0x24
 8006ce6:	b920      	cbnz	r0, 8006cf2 <_dtoa_r+0x3a>
 8006ce8:	4ba7      	ldr	r3, [pc, #668]	; (8006f88 <_dtoa_r+0x2d0>)
 8006cea:	21ea      	movs	r1, #234	; 0xea
 8006cec:	48a7      	ldr	r0, [pc, #668]	; (8006f8c <_dtoa_r+0x2d4>)
 8006cee:	f7ff ff37 	bl	8006b60 <__assert_func>
 8006cf2:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8006cf6:	6005      	str	r5, [r0, #0]
 8006cf8:	60c5      	str	r5, [r0, #12]
 8006cfa:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006cfc:	6819      	ldr	r1, [r3, #0]
 8006cfe:	b151      	cbz	r1, 8006d16 <_dtoa_r+0x5e>
 8006d00:	685a      	ldr	r2, [r3, #4]
 8006d02:	604a      	str	r2, [r1, #4]
 8006d04:	2301      	movs	r3, #1
 8006d06:	4093      	lsls	r3, r2
 8006d08:	608b      	str	r3, [r1, #8]
 8006d0a:	4620      	mov	r0, r4
 8006d0c:	f7ff fb04 	bl	8006318 <_Bfree>
 8006d10:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006d12:	2200      	movs	r2, #0
 8006d14:	601a      	str	r2, [r3, #0]
 8006d16:	1e3b      	subs	r3, r7, #0
 8006d18:	bfaa      	itet	ge
 8006d1a:	2300      	movge	r3, #0
 8006d1c:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 8006d20:	f8c8 3000 	strge.w	r3, [r8]
 8006d24:	4b9a      	ldr	r3, [pc, #616]	; (8006f90 <_dtoa_r+0x2d8>)
 8006d26:	bfbc      	itt	lt
 8006d28:	2201      	movlt	r2, #1
 8006d2a:	f8c8 2000 	strlt.w	r2, [r8]
 8006d2e:	ea33 030b 	bics.w	r3, r3, fp
 8006d32:	d11b      	bne.n	8006d6c <_dtoa_r+0xb4>
 8006d34:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8006d36:	f242 730f 	movw	r3, #9999	; 0x270f
 8006d3a:	6013      	str	r3, [r2, #0]
 8006d3c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8006d40:	4333      	orrs	r3, r6
 8006d42:	f000 8592 	beq.w	800786a <_dtoa_r+0xbb2>
 8006d46:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006d48:	b963      	cbnz	r3, 8006d64 <_dtoa_r+0xac>
 8006d4a:	4b92      	ldr	r3, [pc, #584]	; (8006f94 <_dtoa_r+0x2dc>)
 8006d4c:	e022      	b.n	8006d94 <_dtoa_r+0xdc>
 8006d4e:	4b92      	ldr	r3, [pc, #584]	; (8006f98 <_dtoa_r+0x2e0>)
 8006d50:	9301      	str	r3, [sp, #4]
 8006d52:	3308      	adds	r3, #8
 8006d54:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8006d56:	6013      	str	r3, [r2, #0]
 8006d58:	9801      	ldr	r0, [sp, #4]
 8006d5a:	b013      	add	sp, #76	; 0x4c
 8006d5c:	ecbd 8b04 	vpop	{d8-d9}
 8006d60:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006d64:	4b8b      	ldr	r3, [pc, #556]	; (8006f94 <_dtoa_r+0x2dc>)
 8006d66:	9301      	str	r3, [sp, #4]
 8006d68:	3303      	adds	r3, #3
 8006d6a:	e7f3      	b.n	8006d54 <_dtoa_r+0x9c>
 8006d6c:	2200      	movs	r2, #0
 8006d6e:	2300      	movs	r3, #0
 8006d70:	4650      	mov	r0, sl
 8006d72:	4659      	mov	r1, fp
 8006d74:	f7f9 feb8 	bl	8000ae8 <__aeabi_dcmpeq>
 8006d78:	ec4b ab19 	vmov	d9, sl, fp
 8006d7c:	4680      	mov	r8, r0
 8006d7e:	b158      	cbz	r0, 8006d98 <_dtoa_r+0xe0>
 8006d80:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8006d82:	2301      	movs	r3, #1
 8006d84:	6013      	str	r3, [r2, #0]
 8006d86:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006d88:	2b00      	cmp	r3, #0
 8006d8a:	f000 856b 	beq.w	8007864 <_dtoa_r+0xbac>
 8006d8e:	4883      	ldr	r0, [pc, #524]	; (8006f9c <_dtoa_r+0x2e4>)
 8006d90:	6018      	str	r0, [r3, #0]
 8006d92:	1e43      	subs	r3, r0, #1
 8006d94:	9301      	str	r3, [sp, #4]
 8006d96:	e7df      	b.n	8006d58 <_dtoa_r+0xa0>
 8006d98:	ec4b ab10 	vmov	d0, sl, fp
 8006d9c:	aa10      	add	r2, sp, #64	; 0x40
 8006d9e:	a911      	add	r1, sp, #68	; 0x44
 8006da0:	4620      	mov	r0, r4
 8006da2:	f7ff fda1 	bl	80068e8 <__d2b>
 8006da6:	f3cb 550a 	ubfx	r5, fp, #20, #11
 8006daa:	ee08 0a10 	vmov	s16, r0
 8006dae:	2d00      	cmp	r5, #0
 8006db0:	f000 8084 	beq.w	8006ebc <_dtoa_r+0x204>
 8006db4:	ee19 3a90 	vmov	r3, s19
 8006db8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006dbc:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8006dc0:	4656      	mov	r6, sl
 8006dc2:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 8006dc6:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8006dca:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 8006dce:	4b74      	ldr	r3, [pc, #464]	; (8006fa0 <_dtoa_r+0x2e8>)
 8006dd0:	2200      	movs	r2, #0
 8006dd2:	4630      	mov	r0, r6
 8006dd4:	4639      	mov	r1, r7
 8006dd6:	f7f9 fa67 	bl	80002a8 <__aeabi_dsub>
 8006dda:	a365      	add	r3, pc, #404	; (adr r3, 8006f70 <_dtoa_r+0x2b8>)
 8006ddc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006de0:	f7f9 fc1a 	bl	8000618 <__aeabi_dmul>
 8006de4:	a364      	add	r3, pc, #400	; (adr r3, 8006f78 <_dtoa_r+0x2c0>)
 8006de6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006dea:	f7f9 fa5f 	bl	80002ac <__adddf3>
 8006dee:	4606      	mov	r6, r0
 8006df0:	4628      	mov	r0, r5
 8006df2:	460f      	mov	r7, r1
 8006df4:	f7f9 fba6 	bl	8000544 <__aeabi_i2d>
 8006df8:	a361      	add	r3, pc, #388	; (adr r3, 8006f80 <_dtoa_r+0x2c8>)
 8006dfa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006dfe:	f7f9 fc0b 	bl	8000618 <__aeabi_dmul>
 8006e02:	4602      	mov	r2, r0
 8006e04:	460b      	mov	r3, r1
 8006e06:	4630      	mov	r0, r6
 8006e08:	4639      	mov	r1, r7
 8006e0a:	f7f9 fa4f 	bl	80002ac <__adddf3>
 8006e0e:	4606      	mov	r6, r0
 8006e10:	460f      	mov	r7, r1
 8006e12:	f7f9 fe9b 	bl	8000b4c <__aeabi_d2iz>
 8006e16:	2200      	movs	r2, #0
 8006e18:	9000      	str	r0, [sp, #0]
 8006e1a:	2300      	movs	r3, #0
 8006e1c:	4630      	mov	r0, r6
 8006e1e:	4639      	mov	r1, r7
 8006e20:	f7f9 fe6c 	bl	8000afc <__aeabi_dcmplt>
 8006e24:	b150      	cbz	r0, 8006e3c <_dtoa_r+0x184>
 8006e26:	9800      	ldr	r0, [sp, #0]
 8006e28:	f7f9 fb8c 	bl	8000544 <__aeabi_i2d>
 8006e2c:	4632      	mov	r2, r6
 8006e2e:	463b      	mov	r3, r7
 8006e30:	f7f9 fe5a 	bl	8000ae8 <__aeabi_dcmpeq>
 8006e34:	b910      	cbnz	r0, 8006e3c <_dtoa_r+0x184>
 8006e36:	9b00      	ldr	r3, [sp, #0]
 8006e38:	3b01      	subs	r3, #1
 8006e3a:	9300      	str	r3, [sp, #0]
 8006e3c:	9b00      	ldr	r3, [sp, #0]
 8006e3e:	2b16      	cmp	r3, #22
 8006e40:	d85a      	bhi.n	8006ef8 <_dtoa_r+0x240>
 8006e42:	9a00      	ldr	r2, [sp, #0]
 8006e44:	4b57      	ldr	r3, [pc, #348]	; (8006fa4 <_dtoa_r+0x2ec>)
 8006e46:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006e4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e4e:	ec51 0b19 	vmov	r0, r1, d9
 8006e52:	f7f9 fe53 	bl	8000afc <__aeabi_dcmplt>
 8006e56:	2800      	cmp	r0, #0
 8006e58:	d050      	beq.n	8006efc <_dtoa_r+0x244>
 8006e5a:	9b00      	ldr	r3, [sp, #0]
 8006e5c:	3b01      	subs	r3, #1
 8006e5e:	9300      	str	r3, [sp, #0]
 8006e60:	2300      	movs	r3, #0
 8006e62:	930b      	str	r3, [sp, #44]	; 0x2c
 8006e64:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8006e66:	1b5d      	subs	r5, r3, r5
 8006e68:	1e6b      	subs	r3, r5, #1
 8006e6a:	9305      	str	r3, [sp, #20]
 8006e6c:	bf45      	ittet	mi
 8006e6e:	f1c5 0301 	rsbmi	r3, r5, #1
 8006e72:	9304      	strmi	r3, [sp, #16]
 8006e74:	2300      	movpl	r3, #0
 8006e76:	2300      	movmi	r3, #0
 8006e78:	bf4c      	ite	mi
 8006e7a:	9305      	strmi	r3, [sp, #20]
 8006e7c:	9304      	strpl	r3, [sp, #16]
 8006e7e:	9b00      	ldr	r3, [sp, #0]
 8006e80:	2b00      	cmp	r3, #0
 8006e82:	db3d      	blt.n	8006f00 <_dtoa_r+0x248>
 8006e84:	9b05      	ldr	r3, [sp, #20]
 8006e86:	9a00      	ldr	r2, [sp, #0]
 8006e88:	920a      	str	r2, [sp, #40]	; 0x28
 8006e8a:	4413      	add	r3, r2
 8006e8c:	9305      	str	r3, [sp, #20]
 8006e8e:	2300      	movs	r3, #0
 8006e90:	9307      	str	r3, [sp, #28]
 8006e92:	9b06      	ldr	r3, [sp, #24]
 8006e94:	2b09      	cmp	r3, #9
 8006e96:	f200 8089 	bhi.w	8006fac <_dtoa_r+0x2f4>
 8006e9a:	2b05      	cmp	r3, #5
 8006e9c:	bfc4      	itt	gt
 8006e9e:	3b04      	subgt	r3, #4
 8006ea0:	9306      	strgt	r3, [sp, #24]
 8006ea2:	9b06      	ldr	r3, [sp, #24]
 8006ea4:	f1a3 0302 	sub.w	r3, r3, #2
 8006ea8:	bfcc      	ite	gt
 8006eaa:	2500      	movgt	r5, #0
 8006eac:	2501      	movle	r5, #1
 8006eae:	2b03      	cmp	r3, #3
 8006eb0:	f200 8087 	bhi.w	8006fc2 <_dtoa_r+0x30a>
 8006eb4:	e8df f003 	tbb	[pc, r3]
 8006eb8:	59383a2d 	.word	0x59383a2d
 8006ebc:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8006ec0:	441d      	add	r5, r3
 8006ec2:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8006ec6:	2b20      	cmp	r3, #32
 8006ec8:	bfc1      	itttt	gt
 8006eca:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8006ece:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 8006ed2:	fa0b f303 	lslgt.w	r3, fp, r3
 8006ed6:	fa26 f000 	lsrgt.w	r0, r6, r0
 8006eda:	bfda      	itte	le
 8006edc:	f1c3 0320 	rsble	r3, r3, #32
 8006ee0:	fa06 f003 	lslle.w	r0, r6, r3
 8006ee4:	4318      	orrgt	r0, r3
 8006ee6:	f7f9 fb1d 	bl	8000524 <__aeabi_ui2d>
 8006eea:	2301      	movs	r3, #1
 8006eec:	4606      	mov	r6, r0
 8006eee:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 8006ef2:	3d01      	subs	r5, #1
 8006ef4:	930e      	str	r3, [sp, #56]	; 0x38
 8006ef6:	e76a      	b.n	8006dce <_dtoa_r+0x116>
 8006ef8:	2301      	movs	r3, #1
 8006efa:	e7b2      	b.n	8006e62 <_dtoa_r+0x1aa>
 8006efc:	900b      	str	r0, [sp, #44]	; 0x2c
 8006efe:	e7b1      	b.n	8006e64 <_dtoa_r+0x1ac>
 8006f00:	9b04      	ldr	r3, [sp, #16]
 8006f02:	9a00      	ldr	r2, [sp, #0]
 8006f04:	1a9b      	subs	r3, r3, r2
 8006f06:	9304      	str	r3, [sp, #16]
 8006f08:	4253      	negs	r3, r2
 8006f0a:	9307      	str	r3, [sp, #28]
 8006f0c:	2300      	movs	r3, #0
 8006f0e:	930a      	str	r3, [sp, #40]	; 0x28
 8006f10:	e7bf      	b.n	8006e92 <_dtoa_r+0x1da>
 8006f12:	2300      	movs	r3, #0
 8006f14:	9308      	str	r3, [sp, #32]
 8006f16:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006f18:	2b00      	cmp	r3, #0
 8006f1a:	dc55      	bgt.n	8006fc8 <_dtoa_r+0x310>
 8006f1c:	2301      	movs	r3, #1
 8006f1e:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8006f22:	461a      	mov	r2, r3
 8006f24:	9209      	str	r2, [sp, #36]	; 0x24
 8006f26:	e00c      	b.n	8006f42 <_dtoa_r+0x28a>
 8006f28:	2301      	movs	r3, #1
 8006f2a:	e7f3      	b.n	8006f14 <_dtoa_r+0x25c>
 8006f2c:	2300      	movs	r3, #0
 8006f2e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006f30:	9308      	str	r3, [sp, #32]
 8006f32:	9b00      	ldr	r3, [sp, #0]
 8006f34:	4413      	add	r3, r2
 8006f36:	9302      	str	r3, [sp, #8]
 8006f38:	3301      	adds	r3, #1
 8006f3a:	2b01      	cmp	r3, #1
 8006f3c:	9303      	str	r3, [sp, #12]
 8006f3e:	bfb8      	it	lt
 8006f40:	2301      	movlt	r3, #1
 8006f42:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8006f44:	2200      	movs	r2, #0
 8006f46:	6042      	str	r2, [r0, #4]
 8006f48:	2204      	movs	r2, #4
 8006f4a:	f102 0614 	add.w	r6, r2, #20
 8006f4e:	429e      	cmp	r6, r3
 8006f50:	6841      	ldr	r1, [r0, #4]
 8006f52:	d93d      	bls.n	8006fd0 <_dtoa_r+0x318>
 8006f54:	4620      	mov	r0, r4
 8006f56:	f7ff f99f 	bl	8006298 <_Balloc>
 8006f5a:	9001      	str	r0, [sp, #4]
 8006f5c:	2800      	cmp	r0, #0
 8006f5e:	d13b      	bne.n	8006fd8 <_dtoa_r+0x320>
 8006f60:	4b11      	ldr	r3, [pc, #68]	; (8006fa8 <_dtoa_r+0x2f0>)
 8006f62:	4602      	mov	r2, r0
 8006f64:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8006f68:	e6c0      	b.n	8006cec <_dtoa_r+0x34>
 8006f6a:	2301      	movs	r3, #1
 8006f6c:	e7df      	b.n	8006f2e <_dtoa_r+0x276>
 8006f6e:	bf00      	nop
 8006f70:	636f4361 	.word	0x636f4361
 8006f74:	3fd287a7 	.word	0x3fd287a7
 8006f78:	8b60c8b3 	.word	0x8b60c8b3
 8006f7c:	3fc68a28 	.word	0x3fc68a28
 8006f80:	509f79fb 	.word	0x509f79fb
 8006f84:	3fd34413 	.word	0x3fd34413
 8006f88:	080088c8 	.word	0x080088c8
 8006f8c:	08008a97 	.word	0x08008a97
 8006f90:	7ff00000 	.word	0x7ff00000
 8006f94:	08008a91 	.word	0x08008a91
 8006f98:	08008a88 	.word	0x08008a88
 8006f9c:	08008a96 	.word	0x08008a96
 8006fa0:	3ff80000 	.word	0x3ff80000
 8006fa4:	08008978 	.word	0x08008978
 8006fa8:	0800893b 	.word	0x0800893b
 8006fac:	2501      	movs	r5, #1
 8006fae:	2300      	movs	r3, #0
 8006fb0:	9306      	str	r3, [sp, #24]
 8006fb2:	9508      	str	r5, [sp, #32]
 8006fb4:	f04f 33ff 	mov.w	r3, #4294967295
 8006fb8:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8006fbc:	2200      	movs	r2, #0
 8006fbe:	2312      	movs	r3, #18
 8006fc0:	e7b0      	b.n	8006f24 <_dtoa_r+0x26c>
 8006fc2:	2301      	movs	r3, #1
 8006fc4:	9308      	str	r3, [sp, #32]
 8006fc6:	e7f5      	b.n	8006fb4 <_dtoa_r+0x2fc>
 8006fc8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006fca:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8006fce:	e7b8      	b.n	8006f42 <_dtoa_r+0x28a>
 8006fd0:	3101      	adds	r1, #1
 8006fd2:	6041      	str	r1, [r0, #4]
 8006fd4:	0052      	lsls	r2, r2, #1
 8006fd6:	e7b8      	b.n	8006f4a <_dtoa_r+0x292>
 8006fd8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006fda:	9a01      	ldr	r2, [sp, #4]
 8006fdc:	601a      	str	r2, [r3, #0]
 8006fde:	9b03      	ldr	r3, [sp, #12]
 8006fe0:	2b0e      	cmp	r3, #14
 8006fe2:	f200 809d 	bhi.w	8007120 <_dtoa_r+0x468>
 8006fe6:	2d00      	cmp	r5, #0
 8006fe8:	f000 809a 	beq.w	8007120 <_dtoa_r+0x468>
 8006fec:	9b00      	ldr	r3, [sp, #0]
 8006fee:	2b00      	cmp	r3, #0
 8006ff0:	dd32      	ble.n	8007058 <_dtoa_r+0x3a0>
 8006ff2:	4ab7      	ldr	r2, [pc, #732]	; (80072d0 <_dtoa_r+0x618>)
 8006ff4:	f003 030f 	and.w	r3, r3, #15
 8006ff8:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8006ffc:	e9d3 8900 	ldrd	r8, r9, [r3]
 8007000:	9b00      	ldr	r3, [sp, #0]
 8007002:	05d8      	lsls	r0, r3, #23
 8007004:	ea4f 1723 	mov.w	r7, r3, asr #4
 8007008:	d516      	bpl.n	8007038 <_dtoa_r+0x380>
 800700a:	4bb2      	ldr	r3, [pc, #712]	; (80072d4 <_dtoa_r+0x61c>)
 800700c:	ec51 0b19 	vmov	r0, r1, d9
 8007010:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8007014:	f7f9 fc2a 	bl	800086c <__aeabi_ddiv>
 8007018:	f007 070f 	and.w	r7, r7, #15
 800701c:	4682      	mov	sl, r0
 800701e:	468b      	mov	fp, r1
 8007020:	2503      	movs	r5, #3
 8007022:	4eac      	ldr	r6, [pc, #688]	; (80072d4 <_dtoa_r+0x61c>)
 8007024:	b957      	cbnz	r7, 800703c <_dtoa_r+0x384>
 8007026:	4642      	mov	r2, r8
 8007028:	464b      	mov	r3, r9
 800702a:	4650      	mov	r0, sl
 800702c:	4659      	mov	r1, fp
 800702e:	f7f9 fc1d 	bl	800086c <__aeabi_ddiv>
 8007032:	4682      	mov	sl, r0
 8007034:	468b      	mov	fp, r1
 8007036:	e028      	b.n	800708a <_dtoa_r+0x3d2>
 8007038:	2502      	movs	r5, #2
 800703a:	e7f2      	b.n	8007022 <_dtoa_r+0x36a>
 800703c:	07f9      	lsls	r1, r7, #31
 800703e:	d508      	bpl.n	8007052 <_dtoa_r+0x39a>
 8007040:	4640      	mov	r0, r8
 8007042:	4649      	mov	r1, r9
 8007044:	e9d6 2300 	ldrd	r2, r3, [r6]
 8007048:	f7f9 fae6 	bl	8000618 <__aeabi_dmul>
 800704c:	3501      	adds	r5, #1
 800704e:	4680      	mov	r8, r0
 8007050:	4689      	mov	r9, r1
 8007052:	107f      	asrs	r7, r7, #1
 8007054:	3608      	adds	r6, #8
 8007056:	e7e5      	b.n	8007024 <_dtoa_r+0x36c>
 8007058:	f000 809b 	beq.w	8007192 <_dtoa_r+0x4da>
 800705c:	9b00      	ldr	r3, [sp, #0]
 800705e:	4f9d      	ldr	r7, [pc, #628]	; (80072d4 <_dtoa_r+0x61c>)
 8007060:	425e      	negs	r6, r3
 8007062:	4b9b      	ldr	r3, [pc, #620]	; (80072d0 <_dtoa_r+0x618>)
 8007064:	f006 020f 	and.w	r2, r6, #15
 8007068:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800706c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007070:	ec51 0b19 	vmov	r0, r1, d9
 8007074:	f7f9 fad0 	bl	8000618 <__aeabi_dmul>
 8007078:	1136      	asrs	r6, r6, #4
 800707a:	4682      	mov	sl, r0
 800707c:	468b      	mov	fp, r1
 800707e:	2300      	movs	r3, #0
 8007080:	2502      	movs	r5, #2
 8007082:	2e00      	cmp	r6, #0
 8007084:	d17a      	bne.n	800717c <_dtoa_r+0x4c4>
 8007086:	2b00      	cmp	r3, #0
 8007088:	d1d3      	bne.n	8007032 <_dtoa_r+0x37a>
 800708a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800708c:	2b00      	cmp	r3, #0
 800708e:	f000 8082 	beq.w	8007196 <_dtoa_r+0x4de>
 8007092:	4b91      	ldr	r3, [pc, #580]	; (80072d8 <_dtoa_r+0x620>)
 8007094:	2200      	movs	r2, #0
 8007096:	4650      	mov	r0, sl
 8007098:	4659      	mov	r1, fp
 800709a:	f7f9 fd2f 	bl	8000afc <__aeabi_dcmplt>
 800709e:	2800      	cmp	r0, #0
 80070a0:	d079      	beq.n	8007196 <_dtoa_r+0x4de>
 80070a2:	9b03      	ldr	r3, [sp, #12]
 80070a4:	2b00      	cmp	r3, #0
 80070a6:	d076      	beq.n	8007196 <_dtoa_r+0x4de>
 80070a8:	9b02      	ldr	r3, [sp, #8]
 80070aa:	2b00      	cmp	r3, #0
 80070ac:	dd36      	ble.n	800711c <_dtoa_r+0x464>
 80070ae:	9b00      	ldr	r3, [sp, #0]
 80070b0:	4650      	mov	r0, sl
 80070b2:	4659      	mov	r1, fp
 80070b4:	1e5f      	subs	r7, r3, #1
 80070b6:	2200      	movs	r2, #0
 80070b8:	4b88      	ldr	r3, [pc, #544]	; (80072dc <_dtoa_r+0x624>)
 80070ba:	f7f9 faad 	bl	8000618 <__aeabi_dmul>
 80070be:	9e02      	ldr	r6, [sp, #8]
 80070c0:	4682      	mov	sl, r0
 80070c2:	468b      	mov	fp, r1
 80070c4:	3501      	adds	r5, #1
 80070c6:	4628      	mov	r0, r5
 80070c8:	f7f9 fa3c 	bl	8000544 <__aeabi_i2d>
 80070cc:	4652      	mov	r2, sl
 80070ce:	465b      	mov	r3, fp
 80070d0:	f7f9 faa2 	bl	8000618 <__aeabi_dmul>
 80070d4:	4b82      	ldr	r3, [pc, #520]	; (80072e0 <_dtoa_r+0x628>)
 80070d6:	2200      	movs	r2, #0
 80070d8:	f7f9 f8e8 	bl	80002ac <__adddf3>
 80070dc:	46d0      	mov	r8, sl
 80070de:	46d9      	mov	r9, fp
 80070e0:	4682      	mov	sl, r0
 80070e2:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 80070e6:	2e00      	cmp	r6, #0
 80070e8:	d158      	bne.n	800719c <_dtoa_r+0x4e4>
 80070ea:	4b7e      	ldr	r3, [pc, #504]	; (80072e4 <_dtoa_r+0x62c>)
 80070ec:	2200      	movs	r2, #0
 80070ee:	4640      	mov	r0, r8
 80070f0:	4649      	mov	r1, r9
 80070f2:	f7f9 f8d9 	bl	80002a8 <__aeabi_dsub>
 80070f6:	4652      	mov	r2, sl
 80070f8:	465b      	mov	r3, fp
 80070fa:	4680      	mov	r8, r0
 80070fc:	4689      	mov	r9, r1
 80070fe:	f7f9 fd1b 	bl	8000b38 <__aeabi_dcmpgt>
 8007102:	2800      	cmp	r0, #0
 8007104:	f040 8295 	bne.w	8007632 <_dtoa_r+0x97a>
 8007108:	4652      	mov	r2, sl
 800710a:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800710e:	4640      	mov	r0, r8
 8007110:	4649      	mov	r1, r9
 8007112:	f7f9 fcf3 	bl	8000afc <__aeabi_dcmplt>
 8007116:	2800      	cmp	r0, #0
 8007118:	f040 8289 	bne.w	800762e <_dtoa_r+0x976>
 800711c:	ec5b ab19 	vmov	sl, fp, d9
 8007120:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8007122:	2b00      	cmp	r3, #0
 8007124:	f2c0 8148 	blt.w	80073b8 <_dtoa_r+0x700>
 8007128:	9a00      	ldr	r2, [sp, #0]
 800712a:	2a0e      	cmp	r2, #14
 800712c:	f300 8144 	bgt.w	80073b8 <_dtoa_r+0x700>
 8007130:	4b67      	ldr	r3, [pc, #412]	; (80072d0 <_dtoa_r+0x618>)
 8007132:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007136:	e9d3 8900 	ldrd	r8, r9, [r3]
 800713a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800713c:	2b00      	cmp	r3, #0
 800713e:	f280 80d5 	bge.w	80072ec <_dtoa_r+0x634>
 8007142:	9b03      	ldr	r3, [sp, #12]
 8007144:	2b00      	cmp	r3, #0
 8007146:	f300 80d1 	bgt.w	80072ec <_dtoa_r+0x634>
 800714a:	f040 826f 	bne.w	800762c <_dtoa_r+0x974>
 800714e:	4b65      	ldr	r3, [pc, #404]	; (80072e4 <_dtoa_r+0x62c>)
 8007150:	2200      	movs	r2, #0
 8007152:	4640      	mov	r0, r8
 8007154:	4649      	mov	r1, r9
 8007156:	f7f9 fa5f 	bl	8000618 <__aeabi_dmul>
 800715a:	4652      	mov	r2, sl
 800715c:	465b      	mov	r3, fp
 800715e:	f7f9 fce1 	bl	8000b24 <__aeabi_dcmpge>
 8007162:	9e03      	ldr	r6, [sp, #12]
 8007164:	4637      	mov	r7, r6
 8007166:	2800      	cmp	r0, #0
 8007168:	f040 8245 	bne.w	80075f6 <_dtoa_r+0x93e>
 800716c:	9d01      	ldr	r5, [sp, #4]
 800716e:	2331      	movs	r3, #49	; 0x31
 8007170:	f805 3b01 	strb.w	r3, [r5], #1
 8007174:	9b00      	ldr	r3, [sp, #0]
 8007176:	3301      	adds	r3, #1
 8007178:	9300      	str	r3, [sp, #0]
 800717a:	e240      	b.n	80075fe <_dtoa_r+0x946>
 800717c:	07f2      	lsls	r2, r6, #31
 800717e:	d505      	bpl.n	800718c <_dtoa_r+0x4d4>
 8007180:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007184:	f7f9 fa48 	bl	8000618 <__aeabi_dmul>
 8007188:	3501      	adds	r5, #1
 800718a:	2301      	movs	r3, #1
 800718c:	1076      	asrs	r6, r6, #1
 800718e:	3708      	adds	r7, #8
 8007190:	e777      	b.n	8007082 <_dtoa_r+0x3ca>
 8007192:	2502      	movs	r5, #2
 8007194:	e779      	b.n	800708a <_dtoa_r+0x3d2>
 8007196:	9f00      	ldr	r7, [sp, #0]
 8007198:	9e03      	ldr	r6, [sp, #12]
 800719a:	e794      	b.n	80070c6 <_dtoa_r+0x40e>
 800719c:	9901      	ldr	r1, [sp, #4]
 800719e:	4b4c      	ldr	r3, [pc, #304]	; (80072d0 <_dtoa_r+0x618>)
 80071a0:	4431      	add	r1, r6
 80071a2:	910d      	str	r1, [sp, #52]	; 0x34
 80071a4:	9908      	ldr	r1, [sp, #32]
 80071a6:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 80071aa:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80071ae:	2900      	cmp	r1, #0
 80071b0:	d043      	beq.n	800723a <_dtoa_r+0x582>
 80071b2:	494d      	ldr	r1, [pc, #308]	; (80072e8 <_dtoa_r+0x630>)
 80071b4:	2000      	movs	r0, #0
 80071b6:	f7f9 fb59 	bl	800086c <__aeabi_ddiv>
 80071ba:	4652      	mov	r2, sl
 80071bc:	465b      	mov	r3, fp
 80071be:	f7f9 f873 	bl	80002a8 <__aeabi_dsub>
 80071c2:	9d01      	ldr	r5, [sp, #4]
 80071c4:	4682      	mov	sl, r0
 80071c6:	468b      	mov	fp, r1
 80071c8:	4649      	mov	r1, r9
 80071ca:	4640      	mov	r0, r8
 80071cc:	f7f9 fcbe 	bl	8000b4c <__aeabi_d2iz>
 80071d0:	4606      	mov	r6, r0
 80071d2:	f7f9 f9b7 	bl	8000544 <__aeabi_i2d>
 80071d6:	4602      	mov	r2, r0
 80071d8:	460b      	mov	r3, r1
 80071da:	4640      	mov	r0, r8
 80071dc:	4649      	mov	r1, r9
 80071de:	f7f9 f863 	bl	80002a8 <__aeabi_dsub>
 80071e2:	3630      	adds	r6, #48	; 0x30
 80071e4:	f805 6b01 	strb.w	r6, [r5], #1
 80071e8:	4652      	mov	r2, sl
 80071ea:	465b      	mov	r3, fp
 80071ec:	4680      	mov	r8, r0
 80071ee:	4689      	mov	r9, r1
 80071f0:	f7f9 fc84 	bl	8000afc <__aeabi_dcmplt>
 80071f4:	2800      	cmp	r0, #0
 80071f6:	d163      	bne.n	80072c0 <_dtoa_r+0x608>
 80071f8:	4642      	mov	r2, r8
 80071fa:	464b      	mov	r3, r9
 80071fc:	4936      	ldr	r1, [pc, #216]	; (80072d8 <_dtoa_r+0x620>)
 80071fe:	2000      	movs	r0, #0
 8007200:	f7f9 f852 	bl	80002a8 <__aeabi_dsub>
 8007204:	4652      	mov	r2, sl
 8007206:	465b      	mov	r3, fp
 8007208:	f7f9 fc78 	bl	8000afc <__aeabi_dcmplt>
 800720c:	2800      	cmp	r0, #0
 800720e:	f040 80b5 	bne.w	800737c <_dtoa_r+0x6c4>
 8007212:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007214:	429d      	cmp	r5, r3
 8007216:	d081      	beq.n	800711c <_dtoa_r+0x464>
 8007218:	4b30      	ldr	r3, [pc, #192]	; (80072dc <_dtoa_r+0x624>)
 800721a:	2200      	movs	r2, #0
 800721c:	4650      	mov	r0, sl
 800721e:	4659      	mov	r1, fp
 8007220:	f7f9 f9fa 	bl	8000618 <__aeabi_dmul>
 8007224:	4b2d      	ldr	r3, [pc, #180]	; (80072dc <_dtoa_r+0x624>)
 8007226:	4682      	mov	sl, r0
 8007228:	468b      	mov	fp, r1
 800722a:	4640      	mov	r0, r8
 800722c:	4649      	mov	r1, r9
 800722e:	2200      	movs	r2, #0
 8007230:	f7f9 f9f2 	bl	8000618 <__aeabi_dmul>
 8007234:	4680      	mov	r8, r0
 8007236:	4689      	mov	r9, r1
 8007238:	e7c6      	b.n	80071c8 <_dtoa_r+0x510>
 800723a:	4650      	mov	r0, sl
 800723c:	4659      	mov	r1, fp
 800723e:	f7f9 f9eb 	bl	8000618 <__aeabi_dmul>
 8007242:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007244:	9d01      	ldr	r5, [sp, #4]
 8007246:	930f      	str	r3, [sp, #60]	; 0x3c
 8007248:	4682      	mov	sl, r0
 800724a:	468b      	mov	fp, r1
 800724c:	4649      	mov	r1, r9
 800724e:	4640      	mov	r0, r8
 8007250:	f7f9 fc7c 	bl	8000b4c <__aeabi_d2iz>
 8007254:	4606      	mov	r6, r0
 8007256:	f7f9 f975 	bl	8000544 <__aeabi_i2d>
 800725a:	3630      	adds	r6, #48	; 0x30
 800725c:	4602      	mov	r2, r0
 800725e:	460b      	mov	r3, r1
 8007260:	4640      	mov	r0, r8
 8007262:	4649      	mov	r1, r9
 8007264:	f7f9 f820 	bl	80002a8 <__aeabi_dsub>
 8007268:	f805 6b01 	strb.w	r6, [r5], #1
 800726c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800726e:	429d      	cmp	r5, r3
 8007270:	4680      	mov	r8, r0
 8007272:	4689      	mov	r9, r1
 8007274:	f04f 0200 	mov.w	r2, #0
 8007278:	d124      	bne.n	80072c4 <_dtoa_r+0x60c>
 800727a:	4b1b      	ldr	r3, [pc, #108]	; (80072e8 <_dtoa_r+0x630>)
 800727c:	4650      	mov	r0, sl
 800727e:	4659      	mov	r1, fp
 8007280:	f7f9 f814 	bl	80002ac <__adddf3>
 8007284:	4602      	mov	r2, r0
 8007286:	460b      	mov	r3, r1
 8007288:	4640      	mov	r0, r8
 800728a:	4649      	mov	r1, r9
 800728c:	f7f9 fc54 	bl	8000b38 <__aeabi_dcmpgt>
 8007290:	2800      	cmp	r0, #0
 8007292:	d173      	bne.n	800737c <_dtoa_r+0x6c4>
 8007294:	4652      	mov	r2, sl
 8007296:	465b      	mov	r3, fp
 8007298:	4913      	ldr	r1, [pc, #76]	; (80072e8 <_dtoa_r+0x630>)
 800729a:	2000      	movs	r0, #0
 800729c:	f7f9 f804 	bl	80002a8 <__aeabi_dsub>
 80072a0:	4602      	mov	r2, r0
 80072a2:	460b      	mov	r3, r1
 80072a4:	4640      	mov	r0, r8
 80072a6:	4649      	mov	r1, r9
 80072a8:	f7f9 fc28 	bl	8000afc <__aeabi_dcmplt>
 80072ac:	2800      	cmp	r0, #0
 80072ae:	f43f af35 	beq.w	800711c <_dtoa_r+0x464>
 80072b2:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 80072b4:	1e6b      	subs	r3, r5, #1
 80072b6:	930f      	str	r3, [sp, #60]	; 0x3c
 80072b8:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80072bc:	2b30      	cmp	r3, #48	; 0x30
 80072be:	d0f8      	beq.n	80072b2 <_dtoa_r+0x5fa>
 80072c0:	9700      	str	r7, [sp, #0]
 80072c2:	e049      	b.n	8007358 <_dtoa_r+0x6a0>
 80072c4:	4b05      	ldr	r3, [pc, #20]	; (80072dc <_dtoa_r+0x624>)
 80072c6:	f7f9 f9a7 	bl	8000618 <__aeabi_dmul>
 80072ca:	4680      	mov	r8, r0
 80072cc:	4689      	mov	r9, r1
 80072ce:	e7bd      	b.n	800724c <_dtoa_r+0x594>
 80072d0:	08008978 	.word	0x08008978
 80072d4:	08008950 	.word	0x08008950
 80072d8:	3ff00000 	.word	0x3ff00000
 80072dc:	40240000 	.word	0x40240000
 80072e0:	401c0000 	.word	0x401c0000
 80072e4:	40140000 	.word	0x40140000
 80072e8:	3fe00000 	.word	0x3fe00000
 80072ec:	9d01      	ldr	r5, [sp, #4]
 80072ee:	4656      	mov	r6, sl
 80072f0:	465f      	mov	r7, fp
 80072f2:	4642      	mov	r2, r8
 80072f4:	464b      	mov	r3, r9
 80072f6:	4630      	mov	r0, r6
 80072f8:	4639      	mov	r1, r7
 80072fa:	f7f9 fab7 	bl	800086c <__aeabi_ddiv>
 80072fe:	f7f9 fc25 	bl	8000b4c <__aeabi_d2iz>
 8007302:	4682      	mov	sl, r0
 8007304:	f7f9 f91e 	bl	8000544 <__aeabi_i2d>
 8007308:	4642      	mov	r2, r8
 800730a:	464b      	mov	r3, r9
 800730c:	f7f9 f984 	bl	8000618 <__aeabi_dmul>
 8007310:	4602      	mov	r2, r0
 8007312:	460b      	mov	r3, r1
 8007314:	4630      	mov	r0, r6
 8007316:	4639      	mov	r1, r7
 8007318:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 800731c:	f7f8 ffc4 	bl	80002a8 <__aeabi_dsub>
 8007320:	f805 6b01 	strb.w	r6, [r5], #1
 8007324:	9e01      	ldr	r6, [sp, #4]
 8007326:	9f03      	ldr	r7, [sp, #12]
 8007328:	1bae      	subs	r6, r5, r6
 800732a:	42b7      	cmp	r7, r6
 800732c:	4602      	mov	r2, r0
 800732e:	460b      	mov	r3, r1
 8007330:	d135      	bne.n	800739e <_dtoa_r+0x6e6>
 8007332:	f7f8 ffbb 	bl	80002ac <__adddf3>
 8007336:	4642      	mov	r2, r8
 8007338:	464b      	mov	r3, r9
 800733a:	4606      	mov	r6, r0
 800733c:	460f      	mov	r7, r1
 800733e:	f7f9 fbfb 	bl	8000b38 <__aeabi_dcmpgt>
 8007342:	b9d0      	cbnz	r0, 800737a <_dtoa_r+0x6c2>
 8007344:	4642      	mov	r2, r8
 8007346:	464b      	mov	r3, r9
 8007348:	4630      	mov	r0, r6
 800734a:	4639      	mov	r1, r7
 800734c:	f7f9 fbcc 	bl	8000ae8 <__aeabi_dcmpeq>
 8007350:	b110      	cbz	r0, 8007358 <_dtoa_r+0x6a0>
 8007352:	f01a 0f01 	tst.w	sl, #1
 8007356:	d110      	bne.n	800737a <_dtoa_r+0x6c2>
 8007358:	4620      	mov	r0, r4
 800735a:	ee18 1a10 	vmov	r1, s16
 800735e:	f7fe ffdb 	bl	8006318 <_Bfree>
 8007362:	2300      	movs	r3, #0
 8007364:	9800      	ldr	r0, [sp, #0]
 8007366:	702b      	strb	r3, [r5, #0]
 8007368:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800736a:	3001      	adds	r0, #1
 800736c:	6018      	str	r0, [r3, #0]
 800736e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007370:	2b00      	cmp	r3, #0
 8007372:	f43f acf1 	beq.w	8006d58 <_dtoa_r+0xa0>
 8007376:	601d      	str	r5, [r3, #0]
 8007378:	e4ee      	b.n	8006d58 <_dtoa_r+0xa0>
 800737a:	9f00      	ldr	r7, [sp, #0]
 800737c:	462b      	mov	r3, r5
 800737e:	461d      	mov	r5, r3
 8007380:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8007384:	2a39      	cmp	r2, #57	; 0x39
 8007386:	d106      	bne.n	8007396 <_dtoa_r+0x6de>
 8007388:	9a01      	ldr	r2, [sp, #4]
 800738a:	429a      	cmp	r2, r3
 800738c:	d1f7      	bne.n	800737e <_dtoa_r+0x6c6>
 800738e:	9901      	ldr	r1, [sp, #4]
 8007390:	2230      	movs	r2, #48	; 0x30
 8007392:	3701      	adds	r7, #1
 8007394:	700a      	strb	r2, [r1, #0]
 8007396:	781a      	ldrb	r2, [r3, #0]
 8007398:	3201      	adds	r2, #1
 800739a:	701a      	strb	r2, [r3, #0]
 800739c:	e790      	b.n	80072c0 <_dtoa_r+0x608>
 800739e:	4ba6      	ldr	r3, [pc, #664]	; (8007638 <_dtoa_r+0x980>)
 80073a0:	2200      	movs	r2, #0
 80073a2:	f7f9 f939 	bl	8000618 <__aeabi_dmul>
 80073a6:	2200      	movs	r2, #0
 80073a8:	2300      	movs	r3, #0
 80073aa:	4606      	mov	r6, r0
 80073ac:	460f      	mov	r7, r1
 80073ae:	f7f9 fb9b 	bl	8000ae8 <__aeabi_dcmpeq>
 80073b2:	2800      	cmp	r0, #0
 80073b4:	d09d      	beq.n	80072f2 <_dtoa_r+0x63a>
 80073b6:	e7cf      	b.n	8007358 <_dtoa_r+0x6a0>
 80073b8:	9a08      	ldr	r2, [sp, #32]
 80073ba:	2a00      	cmp	r2, #0
 80073bc:	f000 80d7 	beq.w	800756e <_dtoa_r+0x8b6>
 80073c0:	9a06      	ldr	r2, [sp, #24]
 80073c2:	2a01      	cmp	r2, #1
 80073c4:	f300 80ba 	bgt.w	800753c <_dtoa_r+0x884>
 80073c8:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80073ca:	2a00      	cmp	r2, #0
 80073cc:	f000 80b2 	beq.w	8007534 <_dtoa_r+0x87c>
 80073d0:	f203 4333 	addw	r3, r3, #1075	; 0x433
 80073d4:	9e07      	ldr	r6, [sp, #28]
 80073d6:	9d04      	ldr	r5, [sp, #16]
 80073d8:	9a04      	ldr	r2, [sp, #16]
 80073da:	441a      	add	r2, r3
 80073dc:	9204      	str	r2, [sp, #16]
 80073de:	9a05      	ldr	r2, [sp, #20]
 80073e0:	2101      	movs	r1, #1
 80073e2:	441a      	add	r2, r3
 80073e4:	4620      	mov	r0, r4
 80073e6:	9205      	str	r2, [sp, #20]
 80073e8:	f7ff f84e 	bl	8006488 <__i2b>
 80073ec:	4607      	mov	r7, r0
 80073ee:	2d00      	cmp	r5, #0
 80073f0:	dd0c      	ble.n	800740c <_dtoa_r+0x754>
 80073f2:	9b05      	ldr	r3, [sp, #20]
 80073f4:	2b00      	cmp	r3, #0
 80073f6:	dd09      	ble.n	800740c <_dtoa_r+0x754>
 80073f8:	42ab      	cmp	r3, r5
 80073fa:	9a04      	ldr	r2, [sp, #16]
 80073fc:	bfa8      	it	ge
 80073fe:	462b      	movge	r3, r5
 8007400:	1ad2      	subs	r2, r2, r3
 8007402:	9204      	str	r2, [sp, #16]
 8007404:	9a05      	ldr	r2, [sp, #20]
 8007406:	1aed      	subs	r5, r5, r3
 8007408:	1ad3      	subs	r3, r2, r3
 800740a:	9305      	str	r3, [sp, #20]
 800740c:	9b07      	ldr	r3, [sp, #28]
 800740e:	b31b      	cbz	r3, 8007458 <_dtoa_r+0x7a0>
 8007410:	9b08      	ldr	r3, [sp, #32]
 8007412:	2b00      	cmp	r3, #0
 8007414:	f000 80af 	beq.w	8007576 <_dtoa_r+0x8be>
 8007418:	2e00      	cmp	r6, #0
 800741a:	dd13      	ble.n	8007444 <_dtoa_r+0x78c>
 800741c:	4639      	mov	r1, r7
 800741e:	4632      	mov	r2, r6
 8007420:	4620      	mov	r0, r4
 8007422:	f7ff f8f1 	bl	8006608 <__pow5mult>
 8007426:	ee18 2a10 	vmov	r2, s16
 800742a:	4601      	mov	r1, r0
 800742c:	4607      	mov	r7, r0
 800742e:	4620      	mov	r0, r4
 8007430:	f7ff f840 	bl	80064b4 <__multiply>
 8007434:	ee18 1a10 	vmov	r1, s16
 8007438:	4680      	mov	r8, r0
 800743a:	4620      	mov	r0, r4
 800743c:	f7fe ff6c 	bl	8006318 <_Bfree>
 8007440:	ee08 8a10 	vmov	s16, r8
 8007444:	9b07      	ldr	r3, [sp, #28]
 8007446:	1b9a      	subs	r2, r3, r6
 8007448:	d006      	beq.n	8007458 <_dtoa_r+0x7a0>
 800744a:	ee18 1a10 	vmov	r1, s16
 800744e:	4620      	mov	r0, r4
 8007450:	f7ff f8da 	bl	8006608 <__pow5mult>
 8007454:	ee08 0a10 	vmov	s16, r0
 8007458:	2101      	movs	r1, #1
 800745a:	4620      	mov	r0, r4
 800745c:	f7ff f814 	bl	8006488 <__i2b>
 8007460:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007462:	2b00      	cmp	r3, #0
 8007464:	4606      	mov	r6, r0
 8007466:	f340 8088 	ble.w	800757a <_dtoa_r+0x8c2>
 800746a:	461a      	mov	r2, r3
 800746c:	4601      	mov	r1, r0
 800746e:	4620      	mov	r0, r4
 8007470:	f7ff f8ca 	bl	8006608 <__pow5mult>
 8007474:	9b06      	ldr	r3, [sp, #24]
 8007476:	2b01      	cmp	r3, #1
 8007478:	4606      	mov	r6, r0
 800747a:	f340 8081 	ble.w	8007580 <_dtoa_r+0x8c8>
 800747e:	f04f 0800 	mov.w	r8, #0
 8007482:	6933      	ldr	r3, [r6, #16]
 8007484:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8007488:	6918      	ldr	r0, [r3, #16]
 800748a:	f7fe ffad 	bl	80063e8 <__hi0bits>
 800748e:	f1c0 0020 	rsb	r0, r0, #32
 8007492:	9b05      	ldr	r3, [sp, #20]
 8007494:	4418      	add	r0, r3
 8007496:	f010 001f 	ands.w	r0, r0, #31
 800749a:	f000 8092 	beq.w	80075c2 <_dtoa_r+0x90a>
 800749e:	f1c0 0320 	rsb	r3, r0, #32
 80074a2:	2b04      	cmp	r3, #4
 80074a4:	f340 808a 	ble.w	80075bc <_dtoa_r+0x904>
 80074a8:	f1c0 001c 	rsb	r0, r0, #28
 80074ac:	9b04      	ldr	r3, [sp, #16]
 80074ae:	4403      	add	r3, r0
 80074b0:	9304      	str	r3, [sp, #16]
 80074b2:	9b05      	ldr	r3, [sp, #20]
 80074b4:	4403      	add	r3, r0
 80074b6:	4405      	add	r5, r0
 80074b8:	9305      	str	r3, [sp, #20]
 80074ba:	9b04      	ldr	r3, [sp, #16]
 80074bc:	2b00      	cmp	r3, #0
 80074be:	dd07      	ble.n	80074d0 <_dtoa_r+0x818>
 80074c0:	ee18 1a10 	vmov	r1, s16
 80074c4:	461a      	mov	r2, r3
 80074c6:	4620      	mov	r0, r4
 80074c8:	f7ff f8f8 	bl	80066bc <__lshift>
 80074cc:	ee08 0a10 	vmov	s16, r0
 80074d0:	9b05      	ldr	r3, [sp, #20]
 80074d2:	2b00      	cmp	r3, #0
 80074d4:	dd05      	ble.n	80074e2 <_dtoa_r+0x82a>
 80074d6:	4631      	mov	r1, r6
 80074d8:	461a      	mov	r2, r3
 80074da:	4620      	mov	r0, r4
 80074dc:	f7ff f8ee 	bl	80066bc <__lshift>
 80074e0:	4606      	mov	r6, r0
 80074e2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80074e4:	2b00      	cmp	r3, #0
 80074e6:	d06e      	beq.n	80075c6 <_dtoa_r+0x90e>
 80074e8:	ee18 0a10 	vmov	r0, s16
 80074ec:	4631      	mov	r1, r6
 80074ee:	f7ff f955 	bl	800679c <__mcmp>
 80074f2:	2800      	cmp	r0, #0
 80074f4:	da67      	bge.n	80075c6 <_dtoa_r+0x90e>
 80074f6:	9b00      	ldr	r3, [sp, #0]
 80074f8:	3b01      	subs	r3, #1
 80074fa:	ee18 1a10 	vmov	r1, s16
 80074fe:	9300      	str	r3, [sp, #0]
 8007500:	220a      	movs	r2, #10
 8007502:	2300      	movs	r3, #0
 8007504:	4620      	mov	r0, r4
 8007506:	f7fe ff29 	bl	800635c <__multadd>
 800750a:	9b08      	ldr	r3, [sp, #32]
 800750c:	ee08 0a10 	vmov	s16, r0
 8007510:	2b00      	cmp	r3, #0
 8007512:	f000 81b1 	beq.w	8007878 <_dtoa_r+0xbc0>
 8007516:	2300      	movs	r3, #0
 8007518:	4639      	mov	r1, r7
 800751a:	220a      	movs	r2, #10
 800751c:	4620      	mov	r0, r4
 800751e:	f7fe ff1d 	bl	800635c <__multadd>
 8007522:	9b02      	ldr	r3, [sp, #8]
 8007524:	2b00      	cmp	r3, #0
 8007526:	4607      	mov	r7, r0
 8007528:	f300 808e 	bgt.w	8007648 <_dtoa_r+0x990>
 800752c:	9b06      	ldr	r3, [sp, #24]
 800752e:	2b02      	cmp	r3, #2
 8007530:	dc51      	bgt.n	80075d6 <_dtoa_r+0x91e>
 8007532:	e089      	b.n	8007648 <_dtoa_r+0x990>
 8007534:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8007536:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800753a:	e74b      	b.n	80073d4 <_dtoa_r+0x71c>
 800753c:	9b03      	ldr	r3, [sp, #12]
 800753e:	1e5e      	subs	r6, r3, #1
 8007540:	9b07      	ldr	r3, [sp, #28]
 8007542:	42b3      	cmp	r3, r6
 8007544:	bfbf      	itttt	lt
 8007546:	9b07      	ldrlt	r3, [sp, #28]
 8007548:	9607      	strlt	r6, [sp, #28]
 800754a:	1af2      	sublt	r2, r6, r3
 800754c:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 800754e:	bfb6      	itet	lt
 8007550:	189b      	addlt	r3, r3, r2
 8007552:	1b9e      	subge	r6, r3, r6
 8007554:	930a      	strlt	r3, [sp, #40]	; 0x28
 8007556:	9b03      	ldr	r3, [sp, #12]
 8007558:	bfb8      	it	lt
 800755a:	2600      	movlt	r6, #0
 800755c:	2b00      	cmp	r3, #0
 800755e:	bfb7      	itett	lt
 8007560:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 8007564:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 8007568:	1a9d      	sublt	r5, r3, r2
 800756a:	2300      	movlt	r3, #0
 800756c:	e734      	b.n	80073d8 <_dtoa_r+0x720>
 800756e:	9e07      	ldr	r6, [sp, #28]
 8007570:	9d04      	ldr	r5, [sp, #16]
 8007572:	9f08      	ldr	r7, [sp, #32]
 8007574:	e73b      	b.n	80073ee <_dtoa_r+0x736>
 8007576:	9a07      	ldr	r2, [sp, #28]
 8007578:	e767      	b.n	800744a <_dtoa_r+0x792>
 800757a:	9b06      	ldr	r3, [sp, #24]
 800757c:	2b01      	cmp	r3, #1
 800757e:	dc18      	bgt.n	80075b2 <_dtoa_r+0x8fa>
 8007580:	f1ba 0f00 	cmp.w	sl, #0
 8007584:	d115      	bne.n	80075b2 <_dtoa_r+0x8fa>
 8007586:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800758a:	b993      	cbnz	r3, 80075b2 <_dtoa_r+0x8fa>
 800758c:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8007590:	0d1b      	lsrs	r3, r3, #20
 8007592:	051b      	lsls	r3, r3, #20
 8007594:	b183      	cbz	r3, 80075b8 <_dtoa_r+0x900>
 8007596:	9b04      	ldr	r3, [sp, #16]
 8007598:	3301      	adds	r3, #1
 800759a:	9304      	str	r3, [sp, #16]
 800759c:	9b05      	ldr	r3, [sp, #20]
 800759e:	3301      	adds	r3, #1
 80075a0:	9305      	str	r3, [sp, #20]
 80075a2:	f04f 0801 	mov.w	r8, #1
 80075a6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80075a8:	2b00      	cmp	r3, #0
 80075aa:	f47f af6a 	bne.w	8007482 <_dtoa_r+0x7ca>
 80075ae:	2001      	movs	r0, #1
 80075b0:	e76f      	b.n	8007492 <_dtoa_r+0x7da>
 80075b2:	f04f 0800 	mov.w	r8, #0
 80075b6:	e7f6      	b.n	80075a6 <_dtoa_r+0x8ee>
 80075b8:	4698      	mov	r8, r3
 80075ba:	e7f4      	b.n	80075a6 <_dtoa_r+0x8ee>
 80075bc:	f43f af7d 	beq.w	80074ba <_dtoa_r+0x802>
 80075c0:	4618      	mov	r0, r3
 80075c2:	301c      	adds	r0, #28
 80075c4:	e772      	b.n	80074ac <_dtoa_r+0x7f4>
 80075c6:	9b03      	ldr	r3, [sp, #12]
 80075c8:	2b00      	cmp	r3, #0
 80075ca:	dc37      	bgt.n	800763c <_dtoa_r+0x984>
 80075cc:	9b06      	ldr	r3, [sp, #24]
 80075ce:	2b02      	cmp	r3, #2
 80075d0:	dd34      	ble.n	800763c <_dtoa_r+0x984>
 80075d2:	9b03      	ldr	r3, [sp, #12]
 80075d4:	9302      	str	r3, [sp, #8]
 80075d6:	9b02      	ldr	r3, [sp, #8]
 80075d8:	b96b      	cbnz	r3, 80075f6 <_dtoa_r+0x93e>
 80075da:	4631      	mov	r1, r6
 80075dc:	2205      	movs	r2, #5
 80075de:	4620      	mov	r0, r4
 80075e0:	f7fe febc 	bl	800635c <__multadd>
 80075e4:	4601      	mov	r1, r0
 80075e6:	4606      	mov	r6, r0
 80075e8:	ee18 0a10 	vmov	r0, s16
 80075ec:	f7ff f8d6 	bl	800679c <__mcmp>
 80075f0:	2800      	cmp	r0, #0
 80075f2:	f73f adbb 	bgt.w	800716c <_dtoa_r+0x4b4>
 80075f6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80075f8:	9d01      	ldr	r5, [sp, #4]
 80075fa:	43db      	mvns	r3, r3
 80075fc:	9300      	str	r3, [sp, #0]
 80075fe:	f04f 0800 	mov.w	r8, #0
 8007602:	4631      	mov	r1, r6
 8007604:	4620      	mov	r0, r4
 8007606:	f7fe fe87 	bl	8006318 <_Bfree>
 800760a:	2f00      	cmp	r7, #0
 800760c:	f43f aea4 	beq.w	8007358 <_dtoa_r+0x6a0>
 8007610:	f1b8 0f00 	cmp.w	r8, #0
 8007614:	d005      	beq.n	8007622 <_dtoa_r+0x96a>
 8007616:	45b8      	cmp	r8, r7
 8007618:	d003      	beq.n	8007622 <_dtoa_r+0x96a>
 800761a:	4641      	mov	r1, r8
 800761c:	4620      	mov	r0, r4
 800761e:	f7fe fe7b 	bl	8006318 <_Bfree>
 8007622:	4639      	mov	r1, r7
 8007624:	4620      	mov	r0, r4
 8007626:	f7fe fe77 	bl	8006318 <_Bfree>
 800762a:	e695      	b.n	8007358 <_dtoa_r+0x6a0>
 800762c:	2600      	movs	r6, #0
 800762e:	4637      	mov	r7, r6
 8007630:	e7e1      	b.n	80075f6 <_dtoa_r+0x93e>
 8007632:	9700      	str	r7, [sp, #0]
 8007634:	4637      	mov	r7, r6
 8007636:	e599      	b.n	800716c <_dtoa_r+0x4b4>
 8007638:	40240000 	.word	0x40240000
 800763c:	9b08      	ldr	r3, [sp, #32]
 800763e:	2b00      	cmp	r3, #0
 8007640:	f000 80ca 	beq.w	80077d8 <_dtoa_r+0xb20>
 8007644:	9b03      	ldr	r3, [sp, #12]
 8007646:	9302      	str	r3, [sp, #8]
 8007648:	2d00      	cmp	r5, #0
 800764a:	dd05      	ble.n	8007658 <_dtoa_r+0x9a0>
 800764c:	4639      	mov	r1, r7
 800764e:	462a      	mov	r2, r5
 8007650:	4620      	mov	r0, r4
 8007652:	f7ff f833 	bl	80066bc <__lshift>
 8007656:	4607      	mov	r7, r0
 8007658:	f1b8 0f00 	cmp.w	r8, #0
 800765c:	d05b      	beq.n	8007716 <_dtoa_r+0xa5e>
 800765e:	6879      	ldr	r1, [r7, #4]
 8007660:	4620      	mov	r0, r4
 8007662:	f7fe fe19 	bl	8006298 <_Balloc>
 8007666:	4605      	mov	r5, r0
 8007668:	b928      	cbnz	r0, 8007676 <_dtoa_r+0x9be>
 800766a:	4b87      	ldr	r3, [pc, #540]	; (8007888 <_dtoa_r+0xbd0>)
 800766c:	4602      	mov	r2, r0
 800766e:	f240 21ea 	movw	r1, #746	; 0x2ea
 8007672:	f7ff bb3b 	b.w	8006cec <_dtoa_r+0x34>
 8007676:	693a      	ldr	r2, [r7, #16]
 8007678:	3202      	adds	r2, #2
 800767a:	0092      	lsls	r2, r2, #2
 800767c:	f107 010c 	add.w	r1, r7, #12
 8007680:	300c      	adds	r0, #12
 8007682:	f000 f921 	bl	80078c8 <memcpy>
 8007686:	2201      	movs	r2, #1
 8007688:	4629      	mov	r1, r5
 800768a:	4620      	mov	r0, r4
 800768c:	f7ff f816 	bl	80066bc <__lshift>
 8007690:	9b01      	ldr	r3, [sp, #4]
 8007692:	f103 0901 	add.w	r9, r3, #1
 8007696:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 800769a:	4413      	add	r3, r2
 800769c:	9305      	str	r3, [sp, #20]
 800769e:	f00a 0301 	and.w	r3, sl, #1
 80076a2:	46b8      	mov	r8, r7
 80076a4:	9304      	str	r3, [sp, #16]
 80076a6:	4607      	mov	r7, r0
 80076a8:	4631      	mov	r1, r6
 80076aa:	ee18 0a10 	vmov	r0, s16
 80076ae:	f7ff fa75 	bl	8006b9c <quorem>
 80076b2:	4641      	mov	r1, r8
 80076b4:	9002      	str	r0, [sp, #8]
 80076b6:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 80076ba:	ee18 0a10 	vmov	r0, s16
 80076be:	f7ff f86d 	bl	800679c <__mcmp>
 80076c2:	463a      	mov	r2, r7
 80076c4:	9003      	str	r0, [sp, #12]
 80076c6:	4631      	mov	r1, r6
 80076c8:	4620      	mov	r0, r4
 80076ca:	f7ff f883 	bl	80067d4 <__mdiff>
 80076ce:	68c2      	ldr	r2, [r0, #12]
 80076d0:	f109 3bff 	add.w	fp, r9, #4294967295
 80076d4:	4605      	mov	r5, r0
 80076d6:	bb02      	cbnz	r2, 800771a <_dtoa_r+0xa62>
 80076d8:	4601      	mov	r1, r0
 80076da:	ee18 0a10 	vmov	r0, s16
 80076de:	f7ff f85d 	bl	800679c <__mcmp>
 80076e2:	4602      	mov	r2, r0
 80076e4:	4629      	mov	r1, r5
 80076e6:	4620      	mov	r0, r4
 80076e8:	9207      	str	r2, [sp, #28]
 80076ea:	f7fe fe15 	bl	8006318 <_Bfree>
 80076ee:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 80076f2:	ea43 0102 	orr.w	r1, r3, r2
 80076f6:	9b04      	ldr	r3, [sp, #16]
 80076f8:	430b      	orrs	r3, r1
 80076fa:	464d      	mov	r5, r9
 80076fc:	d10f      	bne.n	800771e <_dtoa_r+0xa66>
 80076fe:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8007702:	d02a      	beq.n	800775a <_dtoa_r+0xaa2>
 8007704:	9b03      	ldr	r3, [sp, #12]
 8007706:	2b00      	cmp	r3, #0
 8007708:	dd02      	ble.n	8007710 <_dtoa_r+0xa58>
 800770a:	9b02      	ldr	r3, [sp, #8]
 800770c:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 8007710:	f88b a000 	strb.w	sl, [fp]
 8007714:	e775      	b.n	8007602 <_dtoa_r+0x94a>
 8007716:	4638      	mov	r0, r7
 8007718:	e7ba      	b.n	8007690 <_dtoa_r+0x9d8>
 800771a:	2201      	movs	r2, #1
 800771c:	e7e2      	b.n	80076e4 <_dtoa_r+0xa2c>
 800771e:	9b03      	ldr	r3, [sp, #12]
 8007720:	2b00      	cmp	r3, #0
 8007722:	db04      	blt.n	800772e <_dtoa_r+0xa76>
 8007724:	9906      	ldr	r1, [sp, #24]
 8007726:	430b      	orrs	r3, r1
 8007728:	9904      	ldr	r1, [sp, #16]
 800772a:	430b      	orrs	r3, r1
 800772c:	d122      	bne.n	8007774 <_dtoa_r+0xabc>
 800772e:	2a00      	cmp	r2, #0
 8007730:	ddee      	ble.n	8007710 <_dtoa_r+0xa58>
 8007732:	ee18 1a10 	vmov	r1, s16
 8007736:	2201      	movs	r2, #1
 8007738:	4620      	mov	r0, r4
 800773a:	f7fe ffbf 	bl	80066bc <__lshift>
 800773e:	4631      	mov	r1, r6
 8007740:	ee08 0a10 	vmov	s16, r0
 8007744:	f7ff f82a 	bl	800679c <__mcmp>
 8007748:	2800      	cmp	r0, #0
 800774a:	dc03      	bgt.n	8007754 <_dtoa_r+0xa9c>
 800774c:	d1e0      	bne.n	8007710 <_dtoa_r+0xa58>
 800774e:	f01a 0f01 	tst.w	sl, #1
 8007752:	d0dd      	beq.n	8007710 <_dtoa_r+0xa58>
 8007754:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8007758:	d1d7      	bne.n	800770a <_dtoa_r+0xa52>
 800775a:	2339      	movs	r3, #57	; 0x39
 800775c:	f88b 3000 	strb.w	r3, [fp]
 8007760:	462b      	mov	r3, r5
 8007762:	461d      	mov	r5, r3
 8007764:	3b01      	subs	r3, #1
 8007766:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800776a:	2a39      	cmp	r2, #57	; 0x39
 800776c:	d071      	beq.n	8007852 <_dtoa_r+0xb9a>
 800776e:	3201      	adds	r2, #1
 8007770:	701a      	strb	r2, [r3, #0]
 8007772:	e746      	b.n	8007602 <_dtoa_r+0x94a>
 8007774:	2a00      	cmp	r2, #0
 8007776:	dd07      	ble.n	8007788 <_dtoa_r+0xad0>
 8007778:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800777c:	d0ed      	beq.n	800775a <_dtoa_r+0xaa2>
 800777e:	f10a 0301 	add.w	r3, sl, #1
 8007782:	f88b 3000 	strb.w	r3, [fp]
 8007786:	e73c      	b.n	8007602 <_dtoa_r+0x94a>
 8007788:	9b05      	ldr	r3, [sp, #20]
 800778a:	f809 ac01 	strb.w	sl, [r9, #-1]
 800778e:	4599      	cmp	r9, r3
 8007790:	d047      	beq.n	8007822 <_dtoa_r+0xb6a>
 8007792:	ee18 1a10 	vmov	r1, s16
 8007796:	2300      	movs	r3, #0
 8007798:	220a      	movs	r2, #10
 800779a:	4620      	mov	r0, r4
 800779c:	f7fe fdde 	bl	800635c <__multadd>
 80077a0:	45b8      	cmp	r8, r7
 80077a2:	ee08 0a10 	vmov	s16, r0
 80077a6:	f04f 0300 	mov.w	r3, #0
 80077aa:	f04f 020a 	mov.w	r2, #10
 80077ae:	4641      	mov	r1, r8
 80077b0:	4620      	mov	r0, r4
 80077b2:	d106      	bne.n	80077c2 <_dtoa_r+0xb0a>
 80077b4:	f7fe fdd2 	bl	800635c <__multadd>
 80077b8:	4680      	mov	r8, r0
 80077ba:	4607      	mov	r7, r0
 80077bc:	f109 0901 	add.w	r9, r9, #1
 80077c0:	e772      	b.n	80076a8 <_dtoa_r+0x9f0>
 80077c2:	f7fe fdcb 	bl	800635c <__multadd>
 80077c6:	4639      	mov	r1, r7
 80077c8:	4680      	mov	r8, r0
 80077ca:	2300      	movs	r3, #0
 80077cc:	220a      	movs	r2, #10
 80077ce:	4620      	mov	r0, r4
 80077d0:	f7fe fdc4 	bl	800635c <__multadd>
 80077d4:	4607      	mov	r7, r0
 80077d6:	e7f1      	b.n	80077bc <_dtoa_r+0xb04>
 80077d8:	9b03      	ldr	r3, [sp, #12]
 80077da:	9302      	str	r3, [sp, #8]
 80077dc:	9d01      	ldr	r5, [sp, #4]
 80077de:	ee18 0a10 	vmov	r0, s16
 80077e2:	4631      	mov	r1, r6
 80077e4:	f7ff f9da 	bl	8006b9c <quorem>
 80077e8:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 80077ec:	9b01      	ldr	r3, [sp, #4]
 80077ee:	f805 ab01 	strb.w	sl, [r5], #1
 80077f2:	1aea      	subs	r2, r5, r3
 80077f4:	9b02      	ldr	r3, [sp, #8]
 80077f6:	4293      	cmp	r3, r2
 80077f8:	dd09      	ble.n	800780e <_dtoa_r+0xb56>
 80077fa:	ee18 1a10 	vmov	r1, s16
 80077fe:	2300      	movs	r3, #0
 8007800:	220a      	movs	r2, #10
 8007802:	4620      	mov	r0, r4
 8007804:	f7fe fdaa 	bl	800635c <__multadd>
 8007808:	ee08 0a10 	vmov	s16, r0
 800780c:	e7e7      	b.n	80077de <_dtoa_r+0xb26>
 800780e:	9b02      	ldr	r3, [sp, #8]
 8007810:	2b00      	cmp	r3, #0
 8007812:	bfc8      	it	gt
 8007814:	461d      	movgt	r5, r3
 8007816:	9b01      	ldr	r3, [sp, #4]
 8007818:	bfd8      	it	le
 800781a:	2501      	movle	r5, #1
 800781c:	441d      	add	r5, r3
 800781e:	f04f 0800 	mov.w	r8, #0
 8007822:	ee18 1a10 	vmov	r1, s16
 8007826:	2201      	movs	r2, #1
 8007828:	4620      	mov	r0, r4
 800782a:	f7fe ff47 	bl	80066bc <__lshift>
 800782e:	4631      	mov	r1, r6
 8007830:	ee08 0a10 	vmov	s16, r0
 8007834:	f7fe ffb2 	bl	800679c <__mcmp>
 8007838:	2800      	cmp	r0, #0
 800783a:	dc91      	bgt.n	8007760 <_dtoa_r+0xaa8>
 800783c:	d102      	bne.n	8007844 <_dtoa_r+0xb8c>
 800783e:	f01a 0f01 	tst.w	sl, #1
 8007842:	d18d      	bne.n	8007760 <_dtoa_r+0xaa8>
 8007844:	462b      	mov	r3, r5
 8007846:	461d      	mov	r5, r3
 8007848:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800784c:	2a30      	cmp	r2, #48	; 0x30
 800784e:	d0fa      	beq.n	8007846 <_dtoa_r+0xb8e>
 8007850:	e6d7      	b.n	8007602 <_dtoa_r+0x94a>
 8007852:	9a01      	ldr	r2, [sp, #4]
 8007854:	429a      	cmp	r2, r3
 8007856:	d184      	bne.n	8007762 <_dtoa_r+0xaaa>
 8007858:	9b00      	ldr	r3, [sp, #0]
 800785a:	3301      	adds	r3, #1
 800785c:	9300      	str	r3, [sp, #0]
 800785e:	2331      	movs	r3, #49	; 0x31
 8007860:	7013      	strb	r3, [r2, #0]
 8007862:	e6ce      	b.n	8007602 <_dtoa_r+0x94a>
 8007864:	4b09      	ldr	r3, [pc, #36]	; (800788c <_dtoa_r+0xbd4>)
 8007866:	f7ff ba95 	b.w	8006d94 <_dtoa_r+0xdc>
 800786a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800786c:	2b00      	cmp	r3, #0
 800786e:	f47f aa6e 	bne.w	8006d4e <_dtoa_r+0x96>
 8007872:	4b07      	ldr	r3, [pc, #28]	; (8007890 <_dtoa_r+0xbd8>)
 8007874:	f7ff ba8e 	b.w	8006d94 <_dtoa_r+0xdc>
 8007878:	9b02      	ldr	r3, [sp, #8]
 800787a:	2b00      	cmp	r3, #0
 800787c:	dcae      	bgt.n	80077dc <_dtoa_r+0xb24>
 800787e:	9b06      	ldr	r3, [sp, #24]
 8007880:	2b02      	cmp	r3, #2
 8007882:	f73f aea8 	bgt.w	80075d6 <_dtoa_r+0x91e>
 8007886:	e7a9      	b.n	80077dc <_dtoa_r+0xb24>
 8007888:	0800893b 	.word	0x0800893b
 800788c:	08008a95 	.word	0x08008a95
 8007890:	08008a88 	.word	0x08008a88

08007894 <fiprintf>:
 8007894:	b40e      	push	{r1, r2, r3}
 8007896:	b503      	push	{r0, r1, lr}
 8007898:	4601      	mov	r1, r0
 800789a:	ab03      	add	r3, sp, #12
 800789c:	4805      	ldr	r0, [pc, #20]	; (80078b4 <fiprintf+0x20>)
 800789e:	f853 2b04 	ldr.w	r2, [r3], #4
 80078a2:	6800      	ldr	r0, [r0, #0]
 80078a4:	9301      	str	r3, [sp, #4]
 80078a6:	f000 f89f 	bl	80079e8 <_vfiprintf_r>
 80078aa:	b002      	add	sp, #8
 80078ac:	f85d eb04 	ldr.w	lr, [sp], #4
 80078b0:	b003      	add	sp, #12
 80078b2:	4770      	bx	lr
 80078b4:	2000000c 	.word	0x2000000c

080078b8 <malloc>:
 80078b8:	4b02      	ldr	r3, [pc, #8]	; (80078c4 <malloc+0xc>)
 80078ba:	4601      	mov	r1, r0
 80078bc:	6818      	ldr	r0, [r3, #0]
 80078be:	f7ff b8c3 	b.w	8006a48 <_malloc_r>
 80078c2:	bf00      	nop
 80078c4:	2000000c 	.word	0x2000000c

080078c8 <memcpy>:
 80078c8:	440a      	add	r2, r1
 80078ca:	4291      	cmp	r1, r2
 80078cc:	f100 33ff 	add.w	r3, r0, #4294967295
 80078d0:	d100      	bne.n	80078d4 <memcpy+0xc>
 80078d2:	4770      	bx	lr
 80078d4:	b510      	push	{r4, lr}
 80078d6:	f811 4b01 	ldrb.w	r4, [r1], #1
 80078da:	f803 4f01 	strb.w	r4, [r3, #1]!
 80078de:	4291      	cmp	r1, r2
 80078e0:	d1f9      	bne.n	80078d6 <memcpy+0xe>
 80078e2:	bd10      	pop	{r4, pc}

080078e4 <__malloc_lock>:
 80078e4:	4801      	ldr	r0, [pc, #4]	; (80078ec <__malloc_lock+0x8>)
 80078e6:	f000 bdc3 	b.w	8008470 <__retarget_lock_acquire_recursive>
 80078ea:	bf00      	nop
 80078ec:	200008c0 	.word	0x200008c0

080078f0 <__malloc_unlock>:
 80078f0:	4801      	ldr	r0, [pc, #4]	; (80078f8 <__malloc_unlock+0x8>)
 80078f2:	f000 bdbe 	b.w	8008472 <__retarget_lock_release_recursive>
 80078f6:	bf00      	nop
 80078f8:	200008c0 	.word	0x200008c0

080078fc <_free_r>:
 80078fc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80078fe:	2900      	cmp	r1, #0
 8007900:	d044      	beq.n	800798c <_free_r+0x90>
 8007902:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007906:	9001      	str	r0, [sp, #4]
 8007908:	2b00      	cmp	r3, #0
 800790a:	f1a1 0404 	sub.w	r4, r1, #4
 800790e:	bfb8      	it	lt
 8007910:	18e4      	addlt	r4, r4, r3
 8007912:	f7ff ffe7 	bl	80078e4 <__malloc_lock>
 8007916:	4a1e      	ldr	r2, [pc, #120]	; (8007990 <_free_r+0x94>)
 8007918:	9801      	ldr	r0, [sp, #4]
 800791a:	6813      	ldr	r3, [r2, #0]
 800791c:	b933      	cbnz	r3, 800792c <_free_r+0x30>
 800791e:	6063      	str	r3, [r4, #4]
 8007920:	6014      	str	r4, [r2, #0]
 8007922:	b003      	add	sp, #12
 8007924:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8007928:	f7ff bfe2 	b.w	80078f0 <__malloc_unlock>
 800792c:	42a3      	cmp	r3, r4
 800792e:	d908      	bls.n	8007942 <_free_r+0x46>
 8007930:	6825      	ldr	r5, [r4, #0]
 8007932:	1961      	adds	r1, r4, r5
 8007934:	428b      	cmp	r3, r1
 8007936:	bf01      	itttt	eq
 8007938:	6819      	ldreq	r1, [r3, #0]
 800793a:	685b      	ldreq	r3, [r3, #4]
 800793c:	1949      	addeq	r1, r1, r5
 800793e:	6021      	streq	r1, [r4, #0]
 8007940:	e7ed      	b.n	800791e <_free_r+0x22>
 8007942:	461a      	mov	r2, r3
 8007944:	685b      	ldr	r3, [r3, #4]
 8007946:	b10b      	cbz	r3, 800794c <_free_r+0x50>
 8007948:	42a3      	cmp	r3, r4
 800794a:	d9fa      	bls.n	8007942 <_free_r+0x46>
 800794c:	6811      	ldr	r1, [r2, #0]
 800794e:	1855      	adds	r5, r2, r1
 8007950:	42a5      	cmp	r5, r4
 8007952:	d10b      	bne.n	800796c <_free_r+0x70>
 8007954:	6824      	ldr	r4, [r4, #0]
 8007956:	4421      	add	r1, r4
 8007958:	1854      	adds	r4, r2, r1
 800795a:	42a3      	cmp	r3, r4
 800795c:	6011      	str	r1, [r2, #0]
 800795e:	d1e0      	bne.n	8007922 <_free_r+0x26>
 8007960:	681c      	ldr	r4, [r3, #0]
 8007962:	685b      	ldr	r3, [r3, #4]
 8007964:	6053      	str	r3, [r2, #4]
 8007966:	4421      	add	r1, r4
 8007968:	6011      	str	r1, [r2, #0]
 800796a:	e7da      	b.n	8007922 <_free_r+0x26>
 800796c:	d902      	bls.n	8007974 <_free_r+0x78>
 800796e:	230c      	movs	r3, #12
 8007970:	6003      	str	r3, [r0, #0]
 8007972:	e7d6      	b.n	8007922 <_free_r+0x26>
 8007974:	6825      	ldr	r5, [r4, #0]
 8007976:	1961      	adds	r1, r4, r5
 8007978:	428b      	cmp	r3, r1
 800797a:	bf04      	itt	eq
 800797c:	6819      	ldreq	r1, [r3, #0]
 800797e:	685b      	ldreq	r3, [r3, #4]
 8007980:	6063      	str	r3, [r4, #4]
 8007982:	bf04      	itt	eq
 8007984:	1949      	addeq	r1, r1, r5
 8007986:	6021      	streq	r1, [r4, #0]
 8007988:	6054      	str	r4, [r2, #4]
 800798a:	e7ca      	b.n	8007922 <_free_r+0x26>
 800798c:	b003      	add	sp, #12
 800798e:	bd30      	pop	{r4, r5, pc}
 8007990:	200008b4 	.word	0x200008b4

08007994 <__sfputc_r>:
 8007994:	6893      	ldr	r3, [r2, #8]
 8007996:	3b01      	subs	r3, #1
 8007998:	2b00      	cmp	r3, #0
 800799a:	b410      	push	{r4}
 800799c:	6093      	str	r3, [r2, #8]
 800799e:	da08      	bge.n	80079b2 <__sfputc_r+0x1e>
 80079a0:	6994      	ldr	r4, [r2, #24]
 80079a2:	42a3      	cmp	r3, r4
 80079a4:	db01      	blt.n	80079aa <__sfputc_r+0x16>
 80079a6:	290a      	cmp	r1, #10
 80079a8:	d103      	bne.n	80079b2 <__sfputc_r+0x1e>
 80079aa:	f85d 4b04 	ldr.w	r4, [sp], #4
 80079ae:	f000 badf 	b.w	8007f70 <__swbuf_r>
 80079b2:	6813      	ldr	r3, [r2, #0]
 80079b4:	1c58      	adds	r0, r3, #1
 80079b6:	6010      	str	r0, [r2, #0]
 80079b8:	7019      	strb	r1, [r3, #0]
 80079ba:	4608      	mov	r0, r1
 80079bc:	f85d 4b04 	ldr.w	r4, [sp], #4
 80079c0:	4770      	bx	lr

080079c2 <__sfputs_r>:
 80079c2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80079c4:	4606      	mov	r6, r0
 80079c6:	460f      	mov	r7, r1
 80079c8:	4614      	mov	r4, r2
 80079ca:	18d5      	adds	r5, r2, r3
 80079cc:	42ac      	cmp	r4, r5
 80079ce:	d101      	bne.n	80079d4 <__sfputs_r+0x12>
 80079d0:	2000      	movs	r0, #0
 80079d2:	e007      	b.n	80079e4 <__sfputs_r+0x22>
 80079d4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80079d8:	463a      	mov	r2, r7
 80079da:	4630      	mov	r0, r6
 80079dc:	f7ff ffda 	bl	8007994 <__sfputc_r>
 80079e0:	1c43      	adds	r3, r0, #1
 80079e2:	d1f3      	bne.n	80079cc <__sfputs_r+0xa>
 80079e4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080079e8 <_vfiprintf_r>:
 80079e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80079ec:	460d      	mov	r5, r1
 80079ee:	b09d      	sub	sp, #116	; 0x74
 80079f0:	4614      	mov	r4, r2
 80079f2:	4698      	mov	r8, r3
 80079f4:	4606      	mov	r6, r0
 80079f6:	b118      	cbz	r0, 8007a00 <_vfiprintf_r+0x18>
 80079f8:	6983      	ldr	r3, [r0, #24]
 80079fa:	b90b      	cbnz	r3, 8007a00 <_vfiprintf_r+0x18>
 80079fc:	f000 fc9a 	bl	8008334 <__sinit>
 8007a00:	4b89      	ldr	r3, [pc, #548]	; (8007c28 <_vfiprintf_r+0x240>)
 8007a02:	429d      	cmp	r5, r3
 8007a04:	d11b      	bne.n	8007a3e <_vfiprintf_r+0x56>
 8007a06:	6875      	ldr	r5, [r6, #4]
 8007a08:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007a0a:	07d9      	lsls	r1, r3, #31
 8007a0c:	d405      	bmi.n	8007a1a <_vfiprintf_r+0x32>
 8007a0e:	89ab      	ldrh	r3, [r5, #12]
 8007a10:	059a      	lsls	r2, r3, #22
 8007a12:	d402      	bmi.n	8007a1a <_vfiprintf_r+0x32>
 8007a14:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007a16:	f000 fd2b 	bl	8008470 <__retarget_lock_acquire_recursive>
 8007a1a:	89ab      	ldrh	r3, [r5, #12]
 8007a1c:	071b      	lsls	r3, r3, #28
 8007a1e:	d501      	bpl.n	8007a24 <_vfiprintf_r+0x3c>
 8007a20:	692b      	ldr	r3, [r5, #16]
 8007a22:	b9eb      	cbnz	r3, 8007a60 <_vfiprintf_r+0x78>
 8007a24:	4629      	mov	r1, r5
 8007a26:	4630      	mov	r0, r6
 8007a28:	f000 faf4 	bl	8008014 <__swsetup_r>
 8007a2c:	b1c0      	cbz	r0, 8007a60 <_vfiprintf_r+0x78>
 8007a2e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007a30:	07dc      	lsls	r4, r3, #31
 8007a32:	d50e      	bpl.n	8007a52 <_vfiprintf_r+0x6a>
 8007a34:	f04f 30ff 	mov.w	r0, #4294967295
 8007a38:	b01d      	add	sp, #116	; 0x74
 8007a3a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007a3e:	4b7b      	ldr	r3, [pc, #492]	; (8007c2c <_vfiprintf_r+0x244>)
 8007a40:	429d      	cmp	r5, r3
 8007a42:	d101      	bne.n	8007a48 <_vfiprintf_r+0x60>
 8007a44:	68b5      	ldr	r5, [r6, #8]
 8007a46:	e7df      	b.n	8007a08 <_vfiprintf_r+0x20>
 8007a48:	4b79      	ldr	r3, [pc, #484]	; (8007c30 <_vfiprintf_r+0x248>)
 8007a4a:	429d      	cmp	r5, r3
 8007a4c:	bf08      	it	eq
 8007a4e:	68f5      	ldreq	r5, [r6, #12]
 8007a50:	e7da      	b.n	8007a08 <_vfiprintf_r+0x20>
 8007a52:	89ab      	ldrh	r3, [r5, #12]
 8007a54:	0598      	lsls	r0, r3, #22
 8007a56:	d4ed      	bmi.n	8007a34 <_vfiprintf_r+0x4c>
 8007a58:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007a5a:	f000 fd0a 	bl	8008472 <__retarget_lock_release_recursive>
 8007a5e:	e7e9      	b.n	8007a34 <_vfiprintf_r+0x4c>
 8007a60:	2300      	movs	r3, #0
 8007a62:	9309      	str	r3, [sp, #36]	; 0x24
 8007a64:	2320      	movs	r3, #32
 8007a66:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8007a6a:	f8cd 800c 	str.w	r8, [sp, #12]
 8007a6e:	2330      	movs	r3, #48	; 0x30
 8007a70:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8007c34 <_vfiprintf_r+0x24c>
 8007a74:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8007a78:	f04f 0901 	mov.w	r9, #1
 8007a7c:	4623      	mov	r3, r4
 8007a7e:	469a      	mov	sl, r3
 8007a80:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007a84:	b10a      	cbz	r2, 8007a8a <_vfiprintf_r+0xa2>
 8007a86:	2a25      	cmp	r2, #37	; 0x25
 8007a88:	d1f9      	bne.n	8007a7e <_vfiprintf_r+0x96>
 8007a8a:	ebba 0b04 	subs.w	fp, sl, r4
 8007a8e:	d00b      	beq.n	8007aa8 <_vfiprintf_r+0xc0>
 8007a90:	465b      	mov	r3, fp
 8007a92:	4622      	mov	r2, r4
 8007a94:	4629      	mov	r1, r5
 8007a96:	4630      	mov	r0, r6
 8007a98:	f7ff ff93 	bl	80079c2 <__sfputs_r>
 8007a9c:	3001      	adds	r0, #1
 8007a9e:	f000 80aa 	beq.w	8007bf6 <_vfiprintf_r+0x20e>
 8007aa2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007aa4:	445a      	add	r2, fp
 8007aa6:	9209      	str	r2, [sp, #36]	; 0x24
 8007aa8:	f89a 3000 	ldrb.w	r3, [sl]
 8007aac:	2b00      	cmp	r3, #0
 8007aae:	f000 80a2 	beq.w	8007bf6 <_vfiprintf_r+0x20e>
 8007ab2:	2300      	movs	r3, #0
 8007ab4:	f04f 32ff 	mov.w	r2, #4294967295
 8007ab8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007abc:	f10a 0a01 	add.w	sl, sl, #1
 8007ac0:	9304      	str	r3, [sp, #16]
 8007ac2:	9307      	str	r3, [sp, #28]
 8007ac4:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8007ac8:	931a      	str	r3, [sp, #104]	; 0x68
 8007aca:	4654      	mov	r4, sl
 8007acc:	2205      	movs	r2, #5
 8007ace:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007ad2:	4858      	ldr	r0, [pc, #352]	; (8007c34 <_vfiprintf_r+0x24c>)
 8007ad4:	f7f8 fb94 	bl	8000200 <memchr>
 8007ad8:	9a04      	ldr	r2, [sp, #16]
 8007ada:	b9d8      	cbnz	r0, 8007b14 <_vfiprintf_r+0x12c>
 8007adc:	06d1      	lsls	r1, r2, #27
 8007ade:	bf44      	itt	mi
 8007ae0:	2320      	movmi	r3, #32
 8007ae2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007ae6:	0713      	lsls	r3, r2, #28
 8007ae8:	bf44      	itt	mi
 8007aea:	232b      	movmi	r3, #43	; 0x2b
 8007aec:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007af0:	f89a 3000 	ldrb.w	r3, [sl]
 8007af4:	2b2a      	cmp	r3, #42	; 0x2a
 8007af6:	d015      	beq.n	8007b24 <_vfiprintf_r+0x13c>
 8007af8:	9a07      	ldr	r2, [sp, #28]
 8007afa:	4654      	mov	r4, sl
 8007afc:	2000      	movs	r0, #0
 8007afe:	f04f 0c0a 	mov.w	ip, #10
 8007b02:	4621      	mov	r1, r4
 8007b04:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007b08:	3b30      	subs	r3, #48	; 0x30
 8007b0a:	2b09      	cmp	r3, #9
 8007b0c:	d94e      	bls.n	8007bac <_vfiprintf_r+0x1c4>
 8007b0e:	b1b0      	cbz	r0, 8007b3e <_vfiprintf_r+0x156>
 8007b10:	9207      	str	r2, [sp, #28]
 8007b12:	e014      	b.n	8007b3e <_vfiprintf_r+0x156>
 8007b14:	eba0 0308 	sub.w	r3, r0, r8
 8007b18:	fa09 f303 	lsl.w	r3, r9, r3
 8007b1c:	4313      	orrs	r3, r2
 8007b1e:	9304      	str	r3, [sp, #16]
 8007b20:	46a2      	mov	sl, r4
 8007b22:	e7d2      	b.n	8007aca <_vfiprintf_r+0xe2>
 8007b24:	9b03      	ldr	r3, [sp, #12]
 8007b26:	1d19      	adds	r1, r3, #4
 8007b28:	681b      	ldr	r3, [r3, #0]
 8007b2a:	9103      	str	r1, [sp, #12]
 8007b2c:	2b00      	cmp	r3, #0
 8007b2e:	bfbb      	ittet	lt
 8007b30:	425b      	neglt	r3, r3
 8007b32:	f042 0202 	orrlt.w	r2, r2, #2
 8007b36:	9307      	strge	r3, [sp, #28]
 8007b38:	9307      	strlt	r3, [sp, #28]
 8007b3a:	bfb8      	it	lt
 8007b3c:	9204      	strlt	r2, [sp, #16]
 8007b3e:	7823      	ldrb	r3, [r4, #0]
 8007b40:	2b2e      	cmp	r3, #46	; 0x2e
 8007b42:	d10c      	bne.n	8007b5e <_vfiprintf_r+0x176>
 8007b44:	7863      	ldrb	r3, [r4, #1]
 8007b46:	2b2a      	cmp	r3, #42	; 0x2a
 8007b48:	d135      	bne.n	8007bb6 <_vfiprintf_r+0x1ce>
 8007b4a:	9b03      	ldr	r3, [sp, #12]
 8007b4c:	1d1a      	adds	r2, r3, #4
 8007b4e:	681b      	ldr	r3, [r3, #0]
 8007b50:	9203      	str	r2, [sp, #12]
 8007b52:	2b00      	cmp	r3, #0
 8007b54:	bfb8      	it	lt
 8007b56:	f04f 33ff 	movlt.w	r3, #4294967295
 8007b5a:	3402      	adds	r4, #2
 8007b5c:	9305      	str	r3, [sp, #20]
 8007b5e:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8007c44 <_vfiprintf_r+0x25c>
 8007b62:	7821      	ldrb	r1, [r4, #0]
 8007b64:	2203      	movs	r2, #3
 8007b66:	4650      	mov	r0, sl
 8007b68:	f7f8 fb4a 	bl	8000200 <memchr>
 8007b6c:	b140      	cbz	r0, 8007b80 <_vfiprintf_r+0x198>
 8007b6e:	2340      	movs	r3, #64	; 0x40
 8007b70:	eba0 000a 	sub.w	r0, r0, sl
 8007b74:	fa03 f000 	lsl.w	r0, r3, r0
 8007b78:	9b04      	ldr	r3, [sp, #16]
 8007b7a:	4303      	orrs	r3, r0
 8007b7c:	3401      	adds	r4, #1
 8007b7e:	9304      	str	r3, [sp, #16]
 8007b80:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007b84:	482c      	ldr	r0, [pc, #176]	; (8007c38 <_vfiprintf_r+0x250>)
 8007b86:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8007b8a:	2206      	movs	r2, #6
 8007b8c:	f7f8 fb38 	bl	8000200 <memchr>
 8007b90:	2800      	cmp	r0, #0
 8007b92:	d03f      	beq.n	8007c14 <_vfiprintf_r+0x22c>
 8007b94:	4b29      	ldr	r3, [pc, #164]	; (8007c3c <_vfiprintf_r+0x254>)
 8007b96:	bb1b      	cbnz	r3, 8007be0 <_vfiprintf_r+0x1f8>
 8007b98:	9b03      	ldr	r3, [sp, #12]
 8007b9a:	3307      	adds	r3, #7
 8007b9c:	f023 0307 	bic.w	r3, r3, #7
 8007ba0:	3308      	adds	r3, #8
 8007ba2:	9303      	str	r3, [sp, #12]
 8007ba4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007ba6:	443b      	add	r3, r7
 8007ba8:	9309      	str	r3, [sp, #36]	; 0x24
 8007baa:	e767      	b.n	8007a7c <_vfiprintf_r+0x94>
 8007bac:	fb0c 3202 	mla	r2, ip, r2, r3
 8007bb0:	460c      	mov	r4, r1
 8007bb2:	2001      	movs	r0, #1
 8007bb4:	e7a5      	b.n	8007b02 <_vfiprintf_r+0x11a>
 8007bb6:	2300      	movs	r3, #0
 8007bb8:	3401      	adds	r4, #1
 8007bba:	9305      	str	r3, [sp, #20]
 8007bbc:	4619      	mov	r1, r3
 8007bbe:	f04f 0c0a 	mov.w	ip, #10
 8007bc2:	4620      	mov	r0, r4
 8007bc4:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007bc8:	3a30      	subs	r2, #48	; 0x30
 8007bca:	2a09      	cmp	r2, #9
 8007bcc:	d903      	bls.n	8007bd6 <_vfiprintf_r+0x1ee>
 8007bce:	2b00      	cmp	r3, #0
 8007bd0:	d0c5      	beq.n	8007b5e <_vfiprintf_r+0x176>
 8007bd2:	9105      	str	r1, [sp, #20]
 8007bd4:	e7c3      	b.n	8007b5e <_vfiprintf_r+0x176>
 8007bd6:	fb0c 2101 	mla	r1, ip, r1, r2
 8007bda:	4604      	mov	r4, r0
 8007bdc:	2301      	movs	r3, #1
 8007bde:	e7f0      	b.n	8007bc2 <_vfiprintf_r+0x1da>
 8007be0:	ab03      	add	r3, sp, #12
 8007be2:	9300      	str	r3, [sp, #0]
 8007be4:	462a      	mov	r2, r5
 8007be6:	4b16      	ldr	r3, [pc, #88]	; (8007c40 <_vfiprintf_r+0x258>)
 8007be8:	a904      	add	r1, sp, #16
 8007bea:	4630      	mov	r0, r6
 8007bec:	f3af 8000 	nop.w
 8007bf0:	4607      	mov	r7, r0
 8007bf2:	1c78      	adds	r0, r7, #1
 8007bf4:	d1d6      	bne.n	8007ba4 <_vfiprintf_r+0x1bc>
 8007bf6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007bf8:	07d9      	lsls	r1, r3, #31
 8007bfa:	d405      	bmi.n	8007c08 <_vfiprintf_r+0x220>
 8007bfc:	89ab      	ldrh	r3, [r5, #12]
 8007bfe:	059a      	lsls	r2, r3, #22
 8007c00:	d402      	bmi.n	8007c08 <_vfiprintf_r+0x220>
 8007c02:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007c04:	f000 fc35 	bl	8008472 <__retarget_lock_release_recursive>
 8007c08:	89ab      	ldrh	r3, [r5, #12]
 8007c0a:	065b      	lsls	r3, r3, #25
 8007c0c:	f53f af12 	bmi.w	8007a34 <_vfiprintf_r+0x4c>
 8007c10:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007c12:	e711      	b.n	8007a38 <_vfiprintf_r+0x50>
 8007c14:	ab03      	add	r3, sp, #12
 8007c16:	9300      	str	r3, [sp, #0]
 8007c18:	462a      	mov	r2, r5
 8007c1a:	4b09      	ldr	r3, [pc, #36]	; (8007c40 <_vfiprintf_r+0x258>)
 8007c1c:	a904      	add	r1, sp, #16
 8007c1e:	4630      	mov	r0, r6
 8007c20:	f000 f880 	bl	8007d24 <_printf_i>
 8007c24:	e7e4      	b.n	8007bf0 <_vfiprintf_r+0x208>
 8007c26:	bf00      	nop
 8007c28:	08008b48 	.word	0x08008b48
 8007c2c:	08008b68 	.word	0x08008b68
 8007c30:	08008b28 	.word	0x08008b28
 8007c34:	08008af2 	.word	0x08008af2
 8007c38:	08008afc 	.word	0x08008afc
 8007c3c:	00000000 	.word	0x00000000
 8007c40:	080079c3 	.word	0x080079c3
 8007c44:	08008af8 	.word	0x08008af8

08007c48 <_printf_common>:
 8007c48:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007c4c:	4616      	mov	r6, r2
 8007c4e:	4699      	mov	r9, r3
 8007c50:	688a      	ldr	r2, [r1, #8]
 8007c52:	690b      	ldr	r3, [r1, #16]
 8007c54:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8007c58:	4293      	cmp	r3, r2
 8007c5a:	bfb8      	it	lt
 8007c5c:	4613      	movlt	r3, r2
 8007c5e:	6033      	str	r3, [r6, #0]
 8007c60:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8007c64:	4607      	mov	r7, r0
 8007c66:	460c      	mov	r4, r1
 8007c68:	b10a      	cbz	r2, 8007c6e <_printf_common+0x26>
 8007c6a:	3301      	adds	r3, #1
 8007c6c:	6033      	str	r3, [r6, #0]
 8007c6e:	6823      	ldr	r3, [r4, #0]
 8007c70:	0699      	lsls	r1, r3, #26
 8007c72:	bf42      	ittt	mi
 8007c74:	6833      	ldrmi	r3, [r6, #0]
 8007c76:	3302      	addmi	r3, #2
 8007c78:	6033      	strmi	r3, [r6, #0]
 8007c7a:	6825      	ldr	r5, [r4, #0]
 8007c7c:	f015 0506 	ands.w	r5, r5, #6
 8007c80:	d106      	bne.n	8007c90 <_printf_common+0x48>
 8007c82:	f104 0a19 	add.w	sl, r4, #25
 8007c86:	68e3      	ldr	r3, [r4, #12]
 8007c88:	6832      	ldr	r2, [r6, #0]
 8007c8a:	1a9b      	subs	r3, r3, r2
 8007c8c:	42ab      	cmp	r3, r5
 8007c8e:	dc26      	bgt.n	8007cde <_printf_common+0x96>
 8007c90:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8007c94:	1e13      	subs	r3, r2, #0
 8007c96:	6822      	ldr	r2, [r4, #0]
 8007c98:	bf18      	it	ne
 8007c9a:	2301      	movne	r3, #1
 8007c9c:	0692      	lsls	r2, r2, #26
 8007c9e:	d42b      	bmi.n	8007cf8 <_printf_common+0xb0>
 8007ca0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8007ca4:	4649      	mov	r1, r9
 8007ca6:	4638      	mov	r0, r7
 8007ca8:	47c0      	blx	r8
 8007caa:	3001      	adds	r0, #1
 8007cac:	d01e      	beq.n	8007cec <_printf_common+0xa4>
 8007cae:	6823      	ldr	r3, [r4, #0]
 8007cb0:	68e5      	ldr	r5, [r4, #12]
 8007cb2:	6832      	ldr	r2, [r6, #0]
 8007cb4:	f003 0306 	and.w	r3, r3, #6
 8007cb8:	2b04      	cmp	r3, #4
 8007cba:	bf08      	it	eq
 8007cbc:	1aad      	subeq	r5, r5, r2
 8007cbe:	68a3      	ldr	r3, [r4, #8]
 8007cc0:	6922      	ldr	r2, [r4, #16]
 8007cc2:	bf0c      	ite	eq
 8007cc4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007cc8:	2500      	movne	r5, #0
 8007cca:	4293      	cmp	r3, r2
 8007ccc:	bfc4      	itt	gt
 8007cce:	1a9b      	subgt	r3, r3, r2
 8007cd0:	18ed      	addgt	r5, r5, r3
 8007cd2:	2600      	movs	r6, #0
 8007cd4:	341a      	adds	r4, #26
 8007cd6:	42b5      	cmp	r5, r6
 8007cd8:	d11a      	bne.n	8007d10 <_printf_common+0xc8>
 8007cda:	2000      	movs	r0, #0
 8007cdc:	e008      	b.n	8007cf0 <_printf_common+0xa8>
 8007cde:	2301      	movs	r3, #1
 8007ce0:	4652      	mov	r2, sl
 8007ce2:	4649      	mov	r1, r9
 8007ce4:	4638      	mov	r0, r7
 8007ce6:	47c0      	blx	r8
 8007ce8:	3001      	adds	r0, #1
 8007cea:	d103      	bne.n	8007cf4 <_printf_common+0xac>
 8007cec:	f04f 30ff 	mov.w	r0, #4294967295
 8007cf0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007cf4:	3501      	adds	r5, #1
 8007cf6:	e7c6      	b.n	8007c86 <_printf_common+0x3e>
 8007cf8:	18e1      	adds	r1, r4, r3
 8007cfa:	1c5a      	adds	r2, r3, #1
 8007cfc:	2030      	movs	r0, #48	; 0x30
 8007cfe:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8007d02:	4422      	add	r2, r4
 8007d04:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8007d08:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8007d0c:	3302      	adds	r3, #2
 8007d0e:	e7c7      	b.n	8007ca0 <_printf_common+0x58>
 8007d10:	2301      	movs	r3, #1
 8007d12:	4622      	mov	r2, r4
 8007d14:	4649      	mov	r1, r9
 8007d16:	4638      	mov	r0, r7
 8007d18:	47c0      	blx	r8
 8007d1a:	3001      	adds	r0, #1
 8007d1c:	d0e6      	beq.n	8007cec <_printf_common+0xa4>
 8007d1e:	3601      	adds	r6, #1
 8007d20:	e7d9      	b.n	8007cd6 <_printf_common+0x8e>
	...

08007d24 <_printf_i>:
 8007d24:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007d28:	7e0f      	ldrb	r7, [r1, #24]
 8007d2a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8007d2c:	2f78      	cmp	r7, #120	; 0x78
 8007d2e:	4691      	mov	r9, r2
 8007d30:	4680      	mov	r8, r0
 8007d32:	460c      	mov	r4, r1
 8007d34:	469a      	mov	sl, r3
 8007d36:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8007d3a:	d807      	bhi.n	8007d4c <_printf_i+0x28>
 8007d3c:	2f62      	cmp	r7, #98	; 0x62
 8007d3e:	d80a      	bhi.n	8007d56 <_printf_i+0x32>
 8007d40:	2f00      	cmp	r7, #0
 8007d42:	f000 80d8 	beq.w	8007ef6 <_printf_i+0x1d2>
 8007d46:	2f58      	cmp	r7, #88	; 0x58
 8007d48:	f000 80a3 	beq.w	8007e92 <_printf_i+0x16e>
 8007d4c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007d50:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8007d54:	e03a      	b.n	8007dcc <_printf_i+0xa8>
 8007d56:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8007d5a:	2b15      	cmp	r3, #21
 8007d5c:	d8f6      	bhi.n	8007d4c <_printf_i+0x28>
 8007d5e:	a101      	add	r1, pc, #4	; (adr r1, 8007d64 <_printf_i+0x40>)
 8007d60:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8007d64:	08007dbd 	.word	0x08007dbd
 8007d68:	08007dd1 	.word	0x08007dd1
 8007d6c:	08007d4d 	.word	0x08007d4d
 8007d70:	08007d4d 	.word	0x08007d4d
 8007d74:	08007d4d 	.word	0x08007d4d
 8007d78:	08007d4d 	.word	0x08007d4d
 8007d7c:	08007dd1 	.word	0x08007dd1
 8007d80:	08007d4d 	.word	0x08007d4d
 8007d84:	08007d4d 	.word	0x08007d4d
 8007d88:	08007d4d 	.word	0x08007d4d
 8007d8c:	08007d4d 	.word	0x08007d4d
 8007d90:	08007edd 	.word	0x08007edd
 8007d94:	08007e01 	.word	0x08007e01
 8007d98:	08007ebf 	.word	0x08007ebf
 8007d9c:	08007d4d 	.word	0x08007d4d
 8007da0:	08007d4d 	.word	0x08007d4d
 8007da4:	08007eff 	.word	0x08007eff
 8007da8:	08007d4d 	.word	0x08007d4d
 8007dac:	08007e01 	.word	0x08007e01
 8007db0:	08007d4d 	.word	0x08007d4d
 8007db4:	08007d4d 	.word	0x08007d4d
 8007db8:	08007ec7 	.word	0x08007ec7
 8007dbc:	682b      	ldr	r3, [r5, #0]
 8007dbe:	1d1a      	adds	r2, r3, #4
 8007dc0:	681b      	ldr	r3, [r3, #0]
 8007dc2:	602a      	str	r2, [r5, #0]
 8007dc4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007dc8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8007dcc:	2301      	movs	r3, #1
 8007dce:	e0a3      	b.n	8007f18 <_printf_i+0x1f4>
 8007dd0:	6820      	ldr	r0, [r4, #0]
 8007dd2:	6829      	ldr	r1, [r5, #0]
 8007dd4:	0606      	lsls	r6, r0, #24
 8007dd6:	f101 0304 	add.w	r3, r1, #4
 8007dda:	d50a      	bpl.n	8007df2 <_printf_i+0xce>
 8007ddc:	680e      	ldr	r6, [r1, #0]
 8007dde:	602b      	str	r3, [r5, #0]
 8007de0:	2e00      	cmp	r6, #0
 8007de2:	da03      	bge.n	8007dec <_printf_i+0xc8>
 8007de4:	232d      	movs	r3, #45	; 0x2d
 8007de6:	4276      	negs	r6, r6
 8007de8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007dec:	485e      	ldr	r0, [pc, #376]	; (8007f68 <_printf_i+0x244>)
 8007dee:	230a      	movs	r3, #10
 8007df0:	e019      	b.n	8007e26 <_printf_i+0x102>
 8007df2:	680e      	ldr	r6, [r1, #0]
 8007df4:	602b      	str	r3, [r5, #0]
 8007df6:	f010 0f40 	tst.w	r0, #64	; 0x40
 8007dfa:	bf18      	it	ne
 8007dfc:	b236      	sxthne	r6, r6
 8007dfe:	e7ef      	b.n	8007de0 <_printf_i+0xbc>
 8007e00:	682b      	ldr	r3, [r5, #0]
 8007e02:	6820      	ldr	r0, [r4, #0]
 8007e04:	1d19      	adds	r1, r3, #4
 8007e06:	6029      	str	r1, [r5, #0]
 8007e08:	0601      	lsls	r1, r0, #24
 8007e0a:	d501      	bpl.n	8007e10 <_printf_i+0xec>
 8007e0c:	681e      	ldr	r6, [r3, #0]
 8007e0e:	e002      	b.n	8007e16 <_printf_i+0xf2>
 8007e10:	0646      	lsls	r6, r0, #25
 8007e12:	d5fb      	bpl.n	8007e0c <_printf_i+0xe8>
 8007e14:	881e      	ldrh	r6, [r3, #0]
 8007e16:	4854      	ldr	r0, [pc, #336]	; (8007f68 <_printf_i+0x244>)
 8007e18:	2f6f      	cmp	r7, #111	; 0x6f
 8007e1a:	bf0c      	ite	eq
 8007e1c:	2308      	moveq	r3, #8
 8007e1e:	230a      	movne	r3, #10
 8007e20:	2100      	movs	r1, #0
 8007e22:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8007e26:	6865      	ldr	r5, [r4, #4]
 8007e28:	60a5      	str	r5, [r4, #8]
 8007e2a:	2d00      	cmp	r5, #0
 8007e2c:	bfa2      	ittt	ge
 8007e2e:	6821      	ldrge	r1, [r4, #0]
 8007e30:	f021 0104 	bicge.w	r1, r1, #4
 8007e34:	6021      	strge	r1, [r4, #0]
 8007e36:	b90e      	cbnz	r6, 8007e3c <_printf_i+0x118>
 8007e38:	2d00      	cmp	r5, #0
 8007e3a:	d04d      	beq.n	8007ed8 <_printf_i+0x1b4>
 8007e3c:	4615      	mov	r5, r2
 8007e3e:	fbb6 f1f3 	udiv	r1, r6, r3
 8007e42:	fb03 6711 	mls	r7, r3, r1, r6
 8007e46:	5dc7      	ldrb	r7, [r0, r7]
 8007e48:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8007e4c:	4637      	mov	r7, r6
 8007e4e:	42bb      	cmp	r3, r7
 8007e50:	460e      	mov	r6, r1
 8007e52:	d9f4      	bls.n	8007e3e <_printf_i+0x11a>
 8007e54:	2b08      	cmp	r3, #8
 8007e56:	d10b      	bne.n	8007e70 <_printf_i+0x14c>
 8007e58:	6823      	ldr	r3, [r4, #0]
 8007e5a:	07de      	lsls	r6, r3, #31
 8007e5c:	d508      	bpl.n	8007e70 <_printf_i+0x14c>
 8007e5e:	6923      	ldr	r3, [r4, #16]
 8007e60:	6861      	ldr	r1, [r4, #4]
 8007e62:	4299      	cmp	r1, r3
 8007e64:	bfde      	ittt	le
 8007e66:	2330      	movle	r3, #48	; 0x30
 8007e68:	f805 3c01 	strble.w	r3, [r5, #-1]
 8007e6c:	f105 35ff 	addle.w	r5, r5, #4294967295
 8007e70:	1b52      	subs	r2, r2, r5
 8007e72:	6122      	str	r2, [r4, #16]
 8007e74:	f8cd a000 	str.w	sl, [sp]
 8007e78:	464b      	mov	r3, r9
 8007e7a:	aa03      	add	r2, sp, #12
 8007e7c:	4621      	mov	r1, r4
 8007e7e:	4640      	mov	r0, r8
 8007e80:	f7ff fee2 	bl	8007c48 <_printf_common>
 8007e84:	3001      	adds	r0, #1
 8007e86:	d14c      	bne.n	8007f22 <_printf_i+0x1fe>
 8007e88:	f04f 30ff 	mov.w	r0, #4294967295
 8007e8c:	b004      	add	sp, #16
 8007e8e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007e92:	4835      	ldr	r0, [pc, #212]	; (8007f68 <_printf_i+0x244>)
 8007e94:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8007e98:	6829      	ldr	r1, [r5, #0]
 8007e9a:	6823      	ldr	r3, [r4, #0]
 8007e9c:	f851 6b04 	ldr.w	r6, [r1], #4
 8007ea0:	6029      	str	r1, [r5, #0]
 8007ea2:	061d      	lsls	r5, r3, #24
 8007ea4:	d514      	bpl.n	8007ed0 <_printf_i+0x1ac>
 8007ea6:	07df      	lsls	r7, r3, #31
 8007ea8:	bf44      	itt	mi
 8007eaa:	f043 0320 	orrmi.w	r3, r3, #32
 8007eae:	6023      	strmi	r3, [r4, #0]
 8007eb0:	b91e      	cbnz	r6, 8007eba <_printf_i+0x196>
 8007eb2:	6823      	ldr	r3, [r4, #0]
 8007eb4:	f023 0320 	bic.w	r3, r3, #32
 8007eb8:	6023      	str	r3, [r4, #0]
 8007eba:	2310      	movs	r3, #16
 8007ebc:	e7b0      	b.n	8007e20 <_printf_i+0xfc>
 8007ebe:	6823      	ldr	r3, [r4, #0]
 8007ec0:	f043 0320 	orr.w	r3, r3, #32
 8007ec4:	6023      	str	r3, [r4, #0]
 8007ec6:	2378      	movs	r3, #120	; 0x78
 8007ec8:	4828      	ldr	r0, [pc, #160]	; (8007f6c <_printf_i+0x248>)
 8007eca:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8007ece:	e7e3      	b.n	8007e98 <_printf_i+0x174>
 8007ed0:	0659      	lsls	r1, r3, #25
 8007ed2:	bf48      	it	mi
 8007ed4:	b2b6      	uxthmi	r6, r6
 8007ed6:	e7e6      	b.n	8007ea6 <_printf_i+0x182>
 8007ed8:	4615      	mov	r5, r2
 8007eda:	e7bb      	b.n	8007e54 <_printf_i+0x130>
 8007edc:	682b      	ldr	r3, [r5, #0]
 8007ede:	6826      	ldr	r6, [r4, #0]
 8007ee0:	6961      	ldr	r1, [r4, #20]
 8007ee2:	1d18      	adds	r0, r3, #4
 8007ee4:	6028      	str	r0, [r5, #0]
 8007ee6:	0635      	lsls	r5, r6, #24
 8007ee8:	681b      	ldr	r3, [r3, #0]
 8007eea:	d501      	bpl.n	8007ef0 <_printf_i+0x1cc>
 8007eec:	6019      	str	r1, [r3, #0]
 8007eee:	e002      	b.n	8007ef6 <_printf_i+0x1d2>
 8007ef0:	0670      	lsls	r0, r6, #25
 8007ef2:	d5fb      	bpl.n	8007eec <_printf_i+0x1c8>
 8007ef4:	8019      	strh	r1, [r3, #0]
 8007ef6:	2300      	movs	r3, #0
 8007ef8:	6123      	str	r3, [r4, #16]
 8007efa:	4615      	mov	r5, r2
 8007efc:	e7ba      	b.n	8007e74 <_printf_i+0x150>
 8007efe:	682b      	ldr	r3, [r5, #0]
 8007f00:	1d1a      	adds	r2, r3, #4
 8007f02:	602a      	str	r2, [r5, #0]
 8007f04:	681d      	ldr	r5, [r3, #0]
 8007f06:	6862      	ldr	r2, [r4, #4]
 8007f08:	2100      	movs	r1, #0
 8007f0a:	4628      	mov	r0, r5
 8007f0c:	f7f8 f978 	bl	8000200 <memchr>
 8007f10:	b108      	cbz	r0, 8007f16 <_printf_i+0x1f2>
 8007f12:	1b40      	subs	r0, r0, r5
 8007f14:	6060      	str	r0, [r4, #4]
 8007f16:	6863      	ldr	r3, [r4, #4]
 8007f18:	6123      	str	r3, [r4, #16]
 8007f1a:	2300      	movs	r3, #0
 8007f1c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007f20:	e7a8      	b.n	8007e74 <_printf_i+0x150>
 8007f22:	6923      	ldr	r3, [r4, #16]
 8007f24:	462a      	mov	r2, r5
 8007f26:	4649      	mov	r1, r9
 8007f28:	4640      	mov	r0, r8
 8007f2a:	47d0      	blx	sl
 8007f2c:	3001      	adds	r0, #1
 8007f2e:	d0ab      	beq.n	8007e88 <_printf_i+0x164>
 8007f30:	6823      	ldr	r3, [r4, #0]
 8007f32:	079b      	lsls	r3, r3, #30
 8007f34:	d413      	bmi.n	8007f5e <_printf_i+0x23a>
 8007f36:	68e0      	ldr	r0, [r4, #12]
 8007f38:	9b03      	ldr	r3, [sp, #12]
 8007f3a:	4298      	cmp	r0, r3
 8007f3c:	bfb8      	it	lt
 8007f3e:	4618      	movlt	r0, r3
 8007f40:	e7a4      	b.n	8007e8c <_printf_i+0x168>
 8007f42:	2301      	movs	r3, #1
 8007f44:	4632      	mov	r2, r6
 8007f46:	4649      	mov	r1, r9
 8007f48:	4640      	mov	r0, r8
 8007f4a:	47d0      	blx	sl
 8007f4c:	3001      	adds	r0, #1
 8007f4e:	d09b      	beq.n	8007e88 <_printf_i+0x164>
 8007f50:	3501      	adds	r5, #1
 8007f52:	68e3      	ldr	r3, [r4, #12]
 8007f54:	9903      	ldr	r1, [sp, #12]
 8007f56:	1a5b      	subs	r3, r3, r1
 8007f58:	42ab      	cmp	r3, r5
 8007f5a:	dcf2      	bgt.n	8007f42 <_printf_i+0x21e>
 8007f5c:	e7eb      	b.n	8007f36 <_printf_i+0x212>
 8007f5e:	2500      	movs	r5, #0
 8007f60:	f104 0619 	add.w	r6, r4, #25
 8007f64:	e7f5      	b.n	8007f52 <_printf_i+0x22e>
 8007f66:	bf00      	nop
 8007f68:	08008b03 	.word	0x08008b03
 8007f6c:	08008b14 	.word	0x08008b14

08007f70 <__swbuf_r>:
 8007f70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007f72:	460e      	mov	r6, r1
 8007f74:	4614      	mov	r4, r2
 8007f76:	4605      	mov	r5, r0
 8007f78:	b118      	cbz	r0, 8007f82 <__swbuf_r+0x12>
 8007f7a:	6983      	ldr	r3, [r0, #24]
 8007f7c:	b90b      	cbnz	r3, 8007f82 <__swbuf_r+0x12>
 8007f7e:	f000 f9d9 	bl	8008334 <__sinit>
 8007f82:	4b21      	ldr	r3, [pc, #132]	; (8008008 <__swbuf_r+0x98>)
 8007f84:	429c      	cmp	r4, r3
 8007f86:	d12b      	bne.n	8007fe0 <__swbuf_r+0x70>
 8007f88:	686c      	ldr	r4, [r5, #4]
 8007f8a:	69a3      	ldr	r3, [r4, #24]
 8007f8c:	60a3      	str	r3, [r4, #8]
 8007f8e:	89a3      	ldrh	r3, [r4, #12]
 8007f90:	071a      	lsls	r2, r3, #28
 8007f92:	d52f      	bpl.n	8007ff4 <__swbuf_r+0x84>
 8007f94:	6923      	ldr	r3, [r4, #16]
 8007f96:	b36b      	cbz	r3, 8007ff4 <__swbuf_r+0x84>
 8007f98:	6923      	ldr	r3, [r4, #16]
 8007f9a:	6820      	ldr	r0, [r4, #0]
 8007f9c:	1ac0      	subs	r0, r0, r3
 8007f9e:	6963      	ldr	r3, [r4, #20]
 8007fa0:	b2f6      	uxtb	r6, r6
 8007fa2:	4283      	cmp	r3, r0
 8007fa4:	4637      	mov	r7, r6
 8007fa6:	dc04      	bgt.n	8007fb2 <__swbuf_r+0x42>
 8007fa8:	4621      	mov	r1, r4
 8007faa:	4628      	mov	r0, r5
 8007fac:	f000 f92e 	bl	800820c <_fflush_r>
 8007fb0:	bb30      	cbnz	r0, 8008000 <__swbuf_r+0x90>
 8007fb2:	68a3      	ldr	r3, [r4, #8]
 8007fb4:	3b01      	subs	r3, #1
 8007fb6:	60a3      	str	r3, [r4, #8]
 8007fb8:	6823      	ldr	r3, [r4, #0]
 8007fba:	1c5a      	adds	r2, r3, #1
 8007fbc:	6022      	str	r2, [r4, #0]
 8007fbe:	701e      	strb	r6, [r3, #0]
 8007fc0:	6963      	ldr	r3, [r4, #20]
 8007fc2:	3001      	adds	r0, #1
 8007fc4:	4283      	cmp	r3, r0
 8007fc6:	d004      	beq.n	8007fd2 <__swbuf_r+0x62>
 8007fc8:	89a3      	ldrh	r3, [r4, #12]
 8007fca:	07db      	lsls	r3, r3, #31
 8007fcc:	d506      	bpl.n	8007fdc <__swbuf_r+0x6c>
 8007fce:	2e0a      	cmp	r6, #10
 8007fd0:	d104      	bne.n	8007fdc <__swbuf_r+0x6c>
 8007fd2:	4621      	mov	r1, r4
 8007fd4:	4628      	mov	r0, r5
 8007fd6:	f000 f919 	bl	800820c <_fflush_r>
 8007fda:	b988      	cbnz	r0, 8008000 <__swbuf_r+0x90>
 8007fdc:	4638      	mov	r0, r7
 8007fde:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007fe0:	4b0a      	ldr	r3, [pc, #40]	; (800800c <__swbuf_r+0x9c>)
 8007fe2:	429c      	cmp	r4, r3
 8007fe4:	d101      	bne.n	8007fea <__swbuf_r+0x7a>
 8007fe6:	68ac      	ldr	r4, [r5, #8]
 8007fe8:	e7cf      	b.n	8007f8a <__swbuf_r+0x1a>
 8007fea:	4b09      	ldr	r3, [pc, #36]	; (8008010 <__swbuf_r+0xa0>)
 8007fec:	429c      	cmp	r4, r3
 8007fee:	bf08      	it	eq
 8007ff0:	68ec      	ldreq	r4, [r5, #12]
 8007ff2:	e7ca      	b.n	8007f8a <__swbuf_r+0x1a>
 8007ff4:	4621      	mov	r1, r4
 8007ff6:	4628      	mov	r0, r5
 8007ff8:	f000 f80c 	bl	8008014 <__swsetup_r>
 8007ffc:	2800      	cmp	r0, #0
 8007ffe:	d0cb      	beq.n	8007f98 <__swbuf_r+0x28>
 8008000:	f04f 37ff 	mov.w	r7, #4294967295
 8008004:	e7ea      	b.n	8007fdc <__swbuf_r+0x6c>
 8008006:	bf00      	nop
 8008008:	08008b48 	.word	0x08008b48
 800800c:	08008b68 	.word	0x08008b68
 8008010:	08008b28 	.word	0x08008b28

08008014 <__swsetup_r>:
 8008014:	4b32      	ldr	r3, [pc, #200]	; (80080e0 <__swsetup_r+0xcc>)
 8008016:	b570      	push	{r4, r5, r6, lr}
 8008018:	681d      	ldr	r5, [r3, #0]
 800801a:	4606      	mov	r6, r0
 800801c:	460c      	mov	r4, r1
 800801e:	b125      	cbz	r5, 800802a <__swsetup_r+0x16>
 8008020:	69ab      	ldr	r3, [r5, #24]
 8008022:	b913      	cbnz	r3, 800802a <__swsetup_r+0x16>
 8008024:	4628      	mov	r0, r5
 8008026:	f000 f985 	bl	8008334 <__sinit>
 800802a:	4b2e      	ldr	r3, [pc, #184]	; (80080e4 <__swsetup_r+0xd0>)
 800802c:	429c      	cmp	r4, r3
 800802e:	d10f      	bne.n	8008050 <__swsetup_r+0x3c>
 8008030:	686c      	ldr	r4, [r5, #4]
 8008032:	89a3      	ldrh	r3, [r4, #12]
 8008034:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8008038:	0719      	lsls	r1, r3, #28
 800803a:	d42c      	bmi.n	8008096 <__swsetup_r+0x82>
 800803c:	06dd      	lsls	r5, r3, #27
 800803e:	d411      	bmi.n	8008064 <__swsetup_r+0x50>
 8008040:	2309      	movs	r3, #9
 8008042:	6033      	str	r3, [r6, #0]
 8008044:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8008048:	81a3      	strh	r3, [r4, #12]
 800804a:	f04f 30ff 	mov.w	r0, #4294967295
 800804e:	e03e      	b.n	80080ce <__swsetup_r+0xba>
 8008050:	4b25      	ldr	r3, [pc, #148]	; (80080e8 <__swsetup_r+0xd4>)
 8008052:	429c      	cmp	r4, r3
 8008054:	d101      	bne.n	800805a <__swsetup_r+0x46>
 8008056:	68ac      	ldr	r4, [r5, #8]
 8008058:	e7eb      	b.n	8008032 <__swsetup_r+0x1e>
 800805a:	4b24      	ldr	r3, [pc, #144]	; (80080ec <__swsetup_r+0xd8>)
 800805c:	429c      	cmp	r4, r3
 800805e:	bf08      	it	eq
 8008060:	68ec      	ldreq	r4, [r5, #12]
 8008062:	e7e6      	b.n	8008032 <__swsetup_r+0x1e>
 8008064:	0758      	lsls	r0, r3, #29
 8008066:	d512      	bpl.n	800808e <__swsetup_r+0x7a>
 8008068:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800806a:	b141      	cbz	r1, 800807e <__swsetup_r+0x6a>
 800806c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008070:	4299      	cmp	r1, r3
 8008072:	d002      	beq.n	800807a <__swsetup_r+0x66>
 8008074:	4630      	mov	r0, r6
 8008076:	f7ff fc41 	bl	80078fc <_free_r>
 800807a:	2300      	movs	r3, #0
 800807c:	6363      	str	r3, [r4, #52]	; 0x34
 800807e:	89a3      	ldrh	r3, [r4, #12]
 8008080:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8008084:	81a3      	strh	r3, [r4, #12]
 8008086:	2300      	movs	r3, #0
 8008088:	6063      	str	r3, [r4, #4]
 800808a:	6923      	ldr	r3, [r4, #16]
 800808c:	6023      	str	r3, [r4, #0]
 800808e:	89a3      	ldrh	r3, [r4, #12]
 8008090:	f043 0308 	orr.w	r3, r3, #8
 8008094:	81a3      	strh	r3, [r4, #12]
 8008096:	6923      	ldr	r3, [r4, #16]
 8008098:	b94b      	cbnz	r3, 80080ae <__swsetup_r+0x9a>
 800809a:	89a3      	ldrh	r3, [r4, #12]
 800809c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80080a0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80080a4:	d003      	beq.n	80080ae <__swsetup_r+0x9a>
 80080a6:	4621      	mov	r1, r4
 80080a8:	4630      	mov	r0, r6
 80080aa:	f000 fa09 	bl	80084c0 <__smakebuf_r>
 80080ae:	89a0      	ldrh	r0, [r4, #12]
 80080b0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80080b4:	f010 0301 	ands.w	r3, r0, #1
 80080b8:	d00a      	beq.n	80080d0 <__swsetup_r+0xbc>
 80080ba:	2300      	movs	r3, #0
 80080bc:	60a3      	str	r3, [r4, #8]
 80080be:	6963      	ldr	r3, [r4, #20]
 80080c0:	425b      	negs	r3, r3
 80080c2:	61a3      	str	r3, [r4, #24]
 80080c4:	6923      	ldr	r3, [r4, #16]
 80080c6:	b943      	cbnz	r3, 80080da <__swsetup_r+0xc6>
 80080c8:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80080cc:	d1ba      	bne.n	8008044 <__swsetup_r+0x30>
 80080ce:	bd70      	pop	{r4, r5, r6, pc}
 80080d0:	0781      	lsls	r1, r0, #30
 80080d2:	bf58      	it	pl
 80080d4:	6963      	ldrpl	r3, [r4, #20]
 80080d6:	60a3      	str	r3, [r4, #8]
 80080d8:	e7f4      	b.n	80080c4 <__swsetup_r+0xb0>
 80080da:	2000      	movs	r0, #0
 80080dc:	e7f7      	b.n	80080ce <__swsetup_r+0xba>
 80080de:	bf00      	nop
 80080e0:	2000000c 	.word	0x2000000c
 80080e4:	08008b48 	.word	0x08008b48
 80080e8:	08008b68 	.word	0x08008b68
 80080ec:	08008b28 	.word	0x08008b28

080080f0 <abort>:
 80080f0:	b508      	push	{r3, lr}
 80080f2:	2006      	movs	r0, #6
 80080f4:	f000 fa4c 	bl	8008590 <raise>
 80080f8:	2001      	movs	r0, #1
 80080fa:	f000 fb5f 	bl	80087bc <_exit>
	...

08008100 <__sflush_r>:
 8008100:	898a      	ldrh	r2, [r1, #12]
 8008102:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008106:	4605      	mov	r5, r0
 8008108:	0710      	lsls	r0, r2, #28
 800810a:	460c      	mov	r4, r1
 800810c:	d458      	bmi.n	80081c0 <__sflush_r+0xc0>
 800810e:	684b      	ldr	r3, [r1, #4]
 8008110:	2b00      	cmp	r3, #0
 8008112:	dc05      	bgt.n	8008120 <__sflush_r+0x20>
 8008114:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8008116:	2b00      	cmp	r3, #0
 8008118:	dc02      	bgt.n	8008120 <__sflush_r+0x20>
 800811a:	2000      	movs	r0, #0
 800811c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008120:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8008122:	2e00      	cmp	r6, #0
 8008124:	d0f9      	beq.n	800811a <__sflush_r+0x1a>
 8008126:	2300      	movs	r3, #0
 8008128:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800812c:	682f      	ldr	r7, [r5, #0]
 800812e:	602b      	str	r3, [r5, #0]
 8008130:	d032      	beq.n	8008198 <__sflush_r+0x98>
 8008132:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8008134:	89a3      	ldrh	r3, [r4, #12]
 8008136:	075a      	lsls	r2, r3, #29
 8008138:	d505      	bpl.n	8008146 <__sflush_r+0x46>
 800813a:	6863      	ldr	r3, [r4, #4]
 800813c:	1ac0      	subs	r0, r0, r3
 800813e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8008140:	b10b      	cbz	r3, 8008146 <__sflush_r+0x46>
 8008142:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8008144:	1ac0      	subs	r0, r0, r3
 8008146:	2300      	movs	r3, #0
 8008148:	4602      	mov	r2, r0
 800814a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800814c:	6a21      	ldr	r1, [r4, #32]
 800814e:	4628      	mov	r0, r5
 8008150:	47b0      	blx	r6
 8008152:	1c43      	adds	r3, r0, #1
 8008154:	89a3      	ldrh	r3, [r4, #12]
 8008156:	d106      	bne.n	8008166 <__sflush_r+0x66>
 8008158:	6829      	ldr	r1, [r5, #0]
 800815a:	291d      	cmp	r1, #29
 800815c:	d82c      	bhi.n	80081b8 <__sflush_r+0xb8>
 800815e:	4a2a      	ldr	r2, [pc, #168]	; (8008208 <__sflush_r+0x108>)
 8008160:	40ca      	lsrs	r2, r1
 8008162:	07d6      	lsls	r6, r2, #31
 8008164:	d528      	bpl.n	80081b8 <__sflush_r+0xb8>
 8008166:	2200      	movs	r2, #0
 8008168:	6062      	str	r2, [r4, #4]
 800816a:	04d9      	lsls	r1, r3, #19
 800816c:	6922      	ldr	r2, [r4, #16]
 800816e:	6022      	str	r2, [r4, #0]
 8008170:	d504      	bpl.n	800817c <__sflush_r+0x7c>
 8008172:	1c42      	adds	r2, r0, #1
 8008174:	d101      	bne.n	800817a <__sflush_r+0x7a>
 8008176:	682b      	ldr	r3, [r5, #0]
 8008178:	b903      	cbnz	r3, 800817c <__sflush_r+0x7c>
 800817a:	6560      	str	r0, [r4, #84]	; 0x54
 800817c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800817e:	602f      	str	r7, [r5, #0]
 8008180:	2900      	cmp	r1, #0
 8008182:	d0ca      	beq.n	800811a <__sflush_r+0x1a>
 8008184:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008188:	4299      	cmp	r1, r3
 800818a:	d002      	beq.n	8008192 <__sflush_r+0x92>
 800818c:	4628      	mov	r0, r5
 800818e:	f7ff fbb5 	bl	80078fc <_free_r>
 8008192:	2000      	movs	r0, #0
 8008194:	6360      	str	r0, [r4, #52]	; 0x34
 8008196:	e7c1      	b.n	800811c <__sflush_r+0x1c>
 8008198:	6a21      	ldr	r1, [r4, #32]
 800819a:	2301      	movs	r3, #1
 800819c:	4628      	mov	r0, r5
 800819e:	47b0      	blx	r6
 80081a0:	1c41      	adds	r1, r0, #1
 80081a2:	d1c7      	bne.n	8008134 <__sflush_r+0x34>
 80081a4:	682b      	ldr	r3, [r5, #0]
 80081a6:	2b00      	cmp	r3, #0
 80081a8:	d0c4      	beq.n	8008134 <__sflush_r+0x34>
 80081aa:	2b1d      	cmp	r3, #29
 80081ac:	d001      	beq.n	80081b2 <__sflush_r+0xb2>
 80081ae:	2b16      	cmp	r3, #22
 80081b0:	d101      	bne.n	80081b6 <__sflush_r+0xb6>
 80081b2:	602f      	str	r7, [r5, #0]
 80081b4:	e7b1      	b.n	800811a <__sflush_r+0x1a>
 80081b6:	89a3      	ldrh	r3, [r4, #12]
 80081b8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80081bc:	81a3      	strh	r3, [r4, #12]
 80081be:	e7ad      	b.n	800811c <__sflush_r+0x1c>
 80081c0:	690f      	ldr	r7, [r1, #16]
 80081c2:	2f00      	cmp	r7, #0
 80081c4:	d0a9      	beq.n	800811a <__sflush_r+0x1a>
 80081c6:	0793      	lsls	r3, r2, #30
 80081c8:	680e      	ldr	r6, [r1, #0]
 80081ca:	bf08      	it	eq
 80081cc:	694b      	ldreq	r3, [r1, #20]
 80081ce:	600f      	str	r7, [r1, #0]
 80081d0:	bf18      	it	ne
 80081d2:	2300      	movne	r3, #0
 80081d4:	eba6 0807 	sub.w	r8, r6, r7
 80081d8:	608b      	str	r3, [r1, #8]
 80081da:	f1b8 0f00 	cmp.w	r8, #0
 80081de:	dd9c      	ble.n	800811a <__sflush_r+0x1a>
 80081e0:	6a21      	ldr	r1, [r4, #32]
 80081e2:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80081e4:	4643      	mov	r3, r8
 80081e6:	463a      	mov	r2, r7
 80081e8:	4628      	mov	r0, r5
 80081ea:	47b0      	blx	r6
 80081ec:	2800      	cmp	r0, #0
 80081ee:	dc06      	bgt.n	80081fe <__sflush_r+0xfe>
 80081f0:	89a3      	ldrh	r3, [r4, #12]
 80081f2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80081f6:	81a3      	strh	r3, [r4, #12]
 80081f8:	f04f 30ff 	mov.w	r0, #4294967295
 80081fc:	e78e      	b.n	800811c <__sflush_r+0x1c>
 80081fe:	4407      	add	r7, r0
 8008200:	eba8 0800 	sub.w	r8, r8, r0
 8008204:	e7e9      	b.n	80081da <__sflush_r+0xda>
 8008206:	bf00      	nop
 8008208:	20400001 	.word	0x20400001

0800820c <_fflush_r>:
 800820c:	b538      	push	{r3, r4, r5, lr}
 800820e:	690b      	ldr	r3, [r1, #16]
 8008210:	4605      	mov	r5, r0
 8008212:	460c      	mov	r4, r1
 8008214:	b913      	cbnz	r3, 800821c <_fflush_r+0x10>
 8008216:	2500      	movs	r5, #0
 8008218:	4628      	mov	r0, r5
 800821a:	bd38      	pop	{r3, r4, r5, pc}
 800821c:	b118      	cbz	r0, 8008226 <_fflush_r+0x1a>
 800821e:	6983      	ldr	r3, [r0, #24]
 8008220:	b90b      	cbnz	r3, 8008226 <_fflush_r+0x1a>
 8008222:	f000 f887 	bl	8008334 <__sinit>
 8008226:	4b14      	ldr	r3, [pc, #80]	; (8008278 <_fflush_r+0x6c>)
 8008228:	429c      	cmp	r4, r3
 800822a:	d11b      	bne.n	8008264 <_fflush_r+0x58>
 800822c:	686c      	ldr	r4, [r5, #4]
 800822e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008232:	2b00      	cmp	r3, #0
 8008234:	d0ef      	beq.n	8008216 <_fflush_r+0xa>
 8008236:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8008238:	07d0      	lsls	r0, r2, #31
 800823a:	d404      	bmi.n	8008246 <_fflush_r+0x3a>
 800823c:	0599      	lsls	r1, r3, #22
 800823e:	d402      	bmi.n	8008246 <_fflush_r+0x3a>
 8008240:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008242:	f000 f915 	bl	8008470 <__retarget_lock_acquire_recursive>
 8008246:	4628      	mov	r0, r5
 8008248:	4621      	mov	r1, r4
 800824a:	f7ff ff59 	bl	8008100 <__sflush_r>
 800824e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8008250:	07da      	lsls	r2, r3, #31
 8008252:	4605      	mov	r5, r0
 8008254:	d4e0      	bmi.n	8008218 <_fflush_r+0xc>
 8008256:	89a3      	ldrh	r3, [r4, #12]
 8008258:	059b      	lsls	r3, r3, #22
 800825a:	d4dd      	bmi.n	8008218 <_fflush_r+0xc>
 800825c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800825e:	f000 f908 	bl	8008472 <__retarget_lock_release_recursive>
 8008262:	e7d9      	b.n	8008218 <_fflush_r+0xc>
 8008264:	4b05      	ldr	r3, [pc, #20]	; (800827c <_fflush_r+0x70>)
 8008266:	429c      	cmp	r4, r3
 8008268:	d101      	bne.n	800826e <_fflush_r+0x62>
 800826a:	68ac      	ldr	r4, [r5, #8]
 800826c:	e7df      	b.n	800822e <_fflush_r+0x22>
 800826e:	4b04      	ldr	r3, [pc, #16]	; (8008280 <_fflush_r+0x74>)
 8008270:	429c      	cmp	r4, r3
 8008272:	bf08      	it	eq
 8008274:	68ec      	ldreq	r4, [r5, #12]
 8008276:	e7da      	b.n	800822e <_fflush_r+0x22>
 8008278:	08008b48 	.word	0x08008b48
 800827c:	08008b68 	.word	0x08008b68
 8008280:	08008b28 	.word	0x08008b28

08008284 <std>:
 8008284:	2300      	movs	r3, #0
 8008286:	b510      	push	{r4, lr}
 8008288:	4604      	mov	r4, r0
 800828a:	e9c0 3300 	strd	r3, r3, [r0]
 800828e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8008292:	6083      	str	r3, [r0, #8]
 8008294:	8181      	strh	r1, [r0, #12]
 8008296:	6643      	str	r3, [r0, #100]	; 0x64
 8008298:	81c2      	strh	r2, [r0, #14]
 800829a:	6183      	str	r3, [r0, #24]
 800829c:	4619      	mov	r1, r3
 800829e:	2208      	movs	r2, #8
 80082a0:	305c      	adds	r0, #92	; 0x5c
 80082a2:	f7fd fe85 	bl	8005fb0 <memset>
 80082a6:	4b05      	ldr	r3, [pc, #20]	; (80082bc <std+0x38>)
 80082a8:	6263      	str	r3, [r4, #36]	; 0x24
 80082aa:	4b05      	ldr	r3, [pc, #20]	; (80082c0 <std+0x3c>)
 80082ac:	62a3      	str	r3, [r4, #40]	; 0x28
 80082ae:	4b05      	ldr	r3, [pc, #20]	; (80082c4 <std+0x40>)
 80082b0:	62e3      	str	r3, [r4, #44]	; 0x2c
 80082b2:	4b05      	ldr	r3, [pc, #20]	; (80082c8 <std+0x44>)
 80082b4:	6224      	str	r4, [r4, #32]
 80082b6:	6323      	str	r3, [r4, #48]	; 0x30
 80082b8:	bd10      	pop	{r4, pc}
 80082ba:	bf00      	nop
 80082bc:	080085c9 	.word	0x080085c9
 80082c0:	080085eb 	.word	0x080085eb
 80082c4:	08008623 	.word	0x08008623
 80082c8:	08008647 	.word	0x08008647

080082cc <_cleanup_r>:
 80082cc:	4901      	ldr	r1, [pc, #4]	; (80082d4 <_cleanup_r+0x8>)
 80082ce:	f000 b8af 	b.w	8008430 <_fwalk_reent>
 80082d2:	bf00      	nop
 80082d4:	0800820d 	.word	0x0800820d

080082d8 <__sfmoreglue>:
 80082d8:	b570      	push	{r4, r5, r6, lr}
 80082da:	2268      	movs	r2, #104	; 0x68
 80082dc:	1e4d      	subs	r5, r1, #1
 80082de:	4355      	muls	r5, r2
 80082e0:	460e      	mov	r6, r1
 80082e2:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80082e6:	f7fe fbaf 	bl	8006a48 <_malloc_r>
 80082ea:	4604      	mov	r4, r0
 80082ec:	b140      	cbz	r0, 8008300 <__sfmoreglue+0x28>
 80082ee:	2100      	movs	r1, #0
 80082f0:	e9c0 1600 	strd	r1, r6, [r0]
 80082f4:	300c      	adds	r0, #12
 80082f6:	60a0      	str	r0, [r4, #8]
 80082f8:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80082fc:	f7fd fe58 	bl	8005fb0 <memset>
 8008300:	4620      	mov	r0, r4
 8008302:	bd70      	pop	{r4, r5, r6, pc}

08008304 <__sfp_lock_acquire>:
 8008304:	4801      	ldr	r0, [pc, #4]	; (800830c <__sfp_lock_acquire+0x8>)
 8008306:	f000 b8b3 	b.w	8008470 <__retarget_lock_acquire_recursive>
 800830a:	bf00      	nop
 800830c:	200008c1 	.word	0x200008c1

08008310 <__sfp_lock_release>:
 8008310:	4801      	ldr	r0, [pc, #4]	; (8008318 <__sfp_lock_release+0x8>)
 8008312:	f000 b8ae 	b.w	8008472 <__retarget_lock_release_recursive>
 8008316:	bf00      	nop
 8008318:	200008c1 	.word	0x200008c1

0800831c <__sinit_lock_acquire>:
 800831c:	4801      	ldr	r0, [pc, #4]	; (8008324 <__sinit_lock_acquire+0x8>)
 800831e:	f000 b8a7 	b.w	8008470 <__retarget_lock_acquire_recursive>
 8008322:	bf00      	nop
 8008324:	200008c2 	.word	0x200008c2

08008328 <__sinit_lock_release>:
 8008328:	4801      	ldr	r0, [pc, #4]	; (8008330 <__sinit_lock_release+0x8>)
 800832a:	f000 b8a2 	b.w	8008472 <__retarget_lock_release_recursive>
 800832e:	bf00      	nop
 8008330:	200008c2 	.word	0x200008c2

08008334 <__sinit>:
 8008334:	b510      	push	{r4, lr}
 8008336:	4604      	mov	r4, r0
 8008338:	f7ff fff0 	bl	800831c <__sinit_lock_acquire>
 800833c:	69a3      	ldr	r3, [r4, #24]
 800833e:	b11b      	cbz	r3, 8008348 <__sinit+0x14>
 8008340:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008344:	f7ff bff0 	b.w	8008328 <__sinit_lock_release>
 8008348:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800834c:	6523      	str	r3, [r4, #80]	; 0x50
 800834e:	4b13      	ldr	r3, [pc, #76]	; (800839c <__sinit+0x68>)
 8008350:	4a13      	ldr	r2, [pc, #76]	; (80083a0 <__sinit+0x6c>)
 8008352:	681b      	ldr	r3, [r3, #0]
 8008354:	62a2      	str	r2, [r4, #40]	; 0x28
 8008356:	42a3      	cmp	r3, r4
 8008358:	bf04      	itt	eq
 800835a:	2301      	moveq	r3, #1
 800835c:	61a3      	streq	r3, [r4, #24]
 800835e:	4620      	mov	r0, r4
 8008360:	f000 f820 	bl	80083a4 <__sfp>
 8008364:	6060      	str	r0, [r4, #4]
 8008366:	4620      	mov	r0, r4
 8008368:	f000 f81c 	bl	80083a4 <__sfp>
 800836c:	60a0      	str	r0, [r4, #8]
 800836e:	4620      	mov	r0, r4
 8008370:	f000 f818 	bl	80083a4 <__sfp>
 8008374:	2200      	movs	r2, #0
 8008376:	60e0      	str	r0, [r4, #12]
 8008378:	2104      	movs	r1, #4
 800837a:	6860      	ldr	r0, [r4, #4]
 800837c:	f7ff ff82 	bl	8008284 <std>
 8008380:	68a0      	ldr	r0, [r4, #8]
 8008382:	2201      	movs	r2, #1
 8008384:	2109      	movs	r1, #9
 8008386:	f7ff ff7d 	bl	8008284 <std>
 800838a:	68e0      	ldr	r0, [r4, #12]
 800838c:	2202      	movs	r2, #2
 800838e:	2112      	movs	r1, #18
 8008390:	f7ff ff78 	bl	8008284 <std>
 8008394:	2301      	movs	r3, #1
 8008396:	61a3      	str	r3, [r4, #24]
 8008398:	e7d2      	b.n	8008340 <__sinit+0xc>
 800839a:	bf00      	nop
 800839c:	080088c4 	.word	0x080088c4
 80083a0:	080082cd 	.word	0x080082cd

080083a4 <__sfp>:
 80083a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80083a6:	4607      	mov	r7, r0
 80083a8:	f7ff ffac 	bl	8008304 <__sfp_lock_acquire>
 80083ac:	4b1e      	ldr	r3, [pc, #120]	; (8008428 <__sfp+0x84>)
 80083ae:	681e      	ldr	r6, [r3, #0]
 80083b0:	69b3      	ldr	r3, [r6, #24]
 80083b2:	b913      	cbnz	r3, 80083ba <__sfp+0x16>
 80083b4:	4630      	mov	r0, r6
 80083b6:	f7ff ffbd 	bl	8008334 <__sinit>
 80083ba:	3648      	adds	r6, #72	; 0x48
 80083bc:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80083c0:	3b01      	subs	r3, #1
 80083c2:	d503      	bpl.n	80083cc <__sfp+0x28>
 80083c4:	6833      	ldr	r3, [r6, #0]
 80083c6:	b30b      	cbz	r3, 800840c <__sfp+0x68>
 80083c8:	6836      	ldr	r6, [r6, #0]
 80083ca:	e7f7      	b.n	80083bc <__sfp+0x18>
 80083cc:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80083d0:	b9d5      	cbnz	r5, 8008408 <__sfp+0x64>
 80083d2:	4b16      	ldr	r3, [pc, #88]	; (800842c <__sfp+0x88>)
 80083d4:	60e3      	str	r3, [r4, #12]
 80083d6:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80083da:	6665      	str	r5, [r4, #100]	; 0x64
 80083dc:	f000 f847 	bl	800846e <__retarget_lock_init_recursive>
 80083e0:	f7ff ff96 	bl	8008310 <__sfp_lock_release>
 80083e4:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80083e8:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80083ec:	6025      	str	r5, [r4, #0]
 80083ee:	61a5      	str	r5, [r4, #24]
 80083f0:	2208      	movs	r2, #8
 80083f2:	4629      	mov	r1, r5
 80083f4:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80083f8:	f7fd fdda 	bl	8005fb0 <memset>
 80083fc:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8008400:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8008404:	4620      	mov	r0, r4
 8008406:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008408:	3468      	adds	r4, #104	; 0x68
 800840a:	e7d9      	b.n	80083c0 <__sfp+0x1c>
 800840c:	2104      	movs	r1, #4
 800840e:	4638      	mov	r0, r7
 8008410:	f7ff ff62 	bl	80082d8 <__sfmoreglue>
 8008414:	4604      	mov	r4, r0
 8008416:	6030      	str	r0, [r6, #0]
 8008418:	2800      	cmp	r0, #0
 800841a:	d1d5      	bne.n	80083c8 <__sfp+0x24>
 800841c:	f7ff ff78 	bl	8008310 <__sfp_lock_release>
 8008420:	230c      	movs	r3, #12
 8008422:	603b      	str	r3, [r7, #0]
 8008424:	e7ee      	b.n	8008404 <__sfp+0x60>
 8008426:	bf00      	nop
 8008428:	080088c4 	.word	0x080088c4
 800842c:	ffff0001 	.word	0xffff0001

08008430 <_fwalk_reent>:
 8008430:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008434:	4606      	mov	r6, r0
 8008436:	4688      	mov	r8, r1
 8008438:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800843c:	2700      	movs	r7, #0
 800843e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8008442:	f1b9 0901 	subs.w	r9, r9, #1
 8008446:	d505      	bpl.n	8008454 <_fwalk_reent+0x24>
 8008448:	6824      	ldr	r4, [r4, #0]
 800844a:	2c00      	cmp	r4, #0
 800844c:	d1f7      	bne.n	800843e <_fwalk_reent+0xe>
 800844e:	4638      	mov	r0, r7
 8008450:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008454:	89ab      	ldrh	r3, [r5, #12]
 8008456:	2b01      	cmp	r3, #1
 8008458:	d907      	bls.n	800846a <_fwalk_reent+0x3a>
 800845a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800845e:	3301      	adds	r3, #1
 8008460:	d003      	beq.n	800846a <_fwalk_reent+0x3a>
 8008462:	4629      	mov	r1, r5
 8008464:	4630      	mov	r0, r6
 8008466:	47c0      	blx	r8
 8008468:	4307      	orrs	r7, r0
 800846a:	3568      	adds	r5, #104	; 0x68
 800846c:	e7e9      	b.n	8008442 <_fwalk_reent+0x12>

0800846e <__retarget_lock_init_recursive>:
 800846e:	4770      	bx	lr

08008470 <__retarget_lock_acquire_recursive>:
 8008470:	4770      	bx	lr

08008472 <__retarget_lock_release_recursive>:
 8008472:	4770      	bx	lr

08008474 <__swhatbuf_r>:
 8008474:	b570      	push	{r4, r5, r6, lr}
 8008476:	460e      	mov	r6, r1
 8008478:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800847c:	2900      	cmp	r1, #0
 800847e:	b096      	sub	sp, #88	; 0x58
 8008480:	4614      	mov	r4, r2
 8008482:	461d      	mov	r5, r3
 8008484:	da08      	bge.n	8008498 <__swhatbuf_r+0x24>
 8008486:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800848a:	2200      	movs	r2, #0
 800848c:	602a      	str	r2, [r5, #0]
 800848e:	061a      	lsls	r2, r3, #24
 8008490:	d410      	bmi.n	80084b4 <__swhatbuf_r+0x40>
 8008492:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008496:	e00e      	b.n	80084b6 <__swhatbuf_r+0x42>
 8008498:	466a      	mov	r2, sp
 800849a:	f000 f8fb 	bl	8008694 <_fstat_r>
 800849e:	2800      	cmp	r0, #0
 80084a0:	dbf1      	blt.n	8008486 <__swhatbuf_r+0x12>
 80084a2:	9a01      	ldr	r2, [sp, #4]
 80084a4:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80084a8:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80084ac:	425a      	negs	r2, r3
 80084ae:	415a      	adcs	r2, r3
 80084b0:	602a      	str	r2, [r5, #0]
 80084b2:	e7ee      	b.n	8008492 <__swhatbuf_r+0x1e>
 80084b4:	2340      	movs	r3, #64	; 0x40
 80084b6:	2000      	movs	r0, #0
 80084b8:	6023      	str	r3, [r4, #0]
 80084ba:	b016      	add	sp, #88	; 0x58
 80084bc:	bd70      	pop	{r4, r5, r6, pc}
	...

080084c0 <__smakebuf_r>:
 80084c0:	898b      	ldrh	r3, [r1, #12]
 80084c2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80084c4:	079d      	lsls	r5, r3, #30
 80084c6:	4606      	mov	r6, r0
 80084c8:	460c      	mov	r4, r1
 80084ca:	d507      	bpl.n	80084dc <__smakebuf_r+0x1c>
 80084cc:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80084d0:	6023      	str	r3, [r4, #0]
 80084d2:	6123      	str	r3, [r4, #16]
 80084d4:	2301      	movs	r3, #1
 80084d6:	6163      	str	r3, [r4, #20]
 80084d8:	b002      	add	sp, #8
 80084da:	bd70      	pop	{r4, r5, r6, pc}
 80084dc:	ab01      	add	r3, sp, #4
 80084de:	466a      	mov	r2, sp
 80084e0:	f7ff ffc8 	bl	8008474 <__swhatbuf_r>
 80084e4:	9900      	ldr	r1, [sp, #0]
 80084e6:	4605      	mov	r5, r0
 80084e8:	4630      	mov	r0, r6
 80084ea:	f7fe faad 	bl	8006a48 <_malloc_r>
 80084ee:	b948      	cbnz	r0, 8008504 <__smakebuf_r+0x44>
 80084f0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80084f4:	059a      	lsls	r2, r3, #22
 80084f6:	d4ef      	bmi.n	80084d8 <__smakebuf_r+0x18>
 80084f8:	f023 0303 	bic.w	r3, r3, #3
 80084fc:	f043 0302 	orr.w	r3, r3, #2
 8008500:	81a3      	strh	r3, [r4, #12]
 8008502:	e7e3      	b.n	80084cc <__smakebuf_r+0xc>
 8008504:	4b0d      	ldr	r3, [pc, #52]	; (800853c <__smakebuf_r+0x7c>)
 8008506:	62b3      	str	r3, [r6, #40]	; 0x28
 8008508:	89a3      	ldrh	r3, [r4, #12]
 800850a:	6020      	str	r0, [r4, #0]
 800850c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008510:	81a3      	strh	r3, [r4, #12]
 8008512:	9b00      	ldr	r3, [sp, #0]
 8008514:	6163      	str	r3, [r4, #20]
 8008516:	9b01      	ldr	r3, [sp, #4]
 8008518:	6120      	str	r0, [r4, #16]
 800851a:	b15b      	cbz	r3, 8008534 <__smakebuf_r+0x74>
 800851c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008520:	4630      	mov	r0, r6
 8008522:	f000 f8c9 	bl	80086b8 <_isatty_r>
 8008526:	b128      	cbz	r0, 8008534 <__smakebuf_r+0x74>
 8008528:	89a3      	ldrh	r3, [r4, #12]
 800852a:	f023 0303 	bic.w	r3, r3, #3
 800852e:	f043 0301 	orr.w	r3, r3, #1
 8008532:	81a3      	strh	r3, [r4, #12]
 8008534:	89a0      	ldrh	r0, [r4, #12]
 8008536:	4305      	orrs	r5, r0
 8008538:	81a5      	strh	r5, [r4, #12]
 800853a:	e7cd      	b.n	80084d8 <__smakebuf_r+0x18>
 800853c:	080082cd 	.word	0x080082cd

08008540 <_raise_r>:
 8008540:	291f      	cmp	r1, #31
 8008542:	b538      	push	{r3, r4, r5, lr}
 8008544:	4604      	mov	r4, r0
 8008546:	460d      	mov	r5, r1
 8008548:	d904      	bls.n	8008554 <_raise_r+0x14>
 800854a:	2316      	movs	r3, #22
 800854c:	6003      	str	r3, [r0, #0]
 800854e:	f04f 30ff 	mov.w	r0, #4294967295
 8008552:	bd38      	pop	{r3, r4, r5, pc}
 8008554:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8008556:	b112      	cbz	r2, 800855e <_raise_r+0x1e>
 8008558:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800855c:	b94b      	cbnz	r3, 8008572 <_raise_r+0x32>
 800855e:	4620      	mov	r0, r4
 8008560:	f000 f830 	bl	80085c4 <_getpid_r>
 8008564:	462a      	mov	r2, r5
 8008566:	4601      	mov	r1, r0
 8008568:	4620      	mov	r0, r4
 800856a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800856e:	f000 b817 	b.w	80085a0 <_kill_r>
 8008572:	2b01      	cmp	r3, #1
 8008574:	d00a      	beq.n	800858c <_raise_r+0x4c>
 8008576:	1c59      	adds	r1, r3, #1
 8008578:	d103      	bne.n	8008582 <_raise_r+0x42>
 800857a:	2316      	movs	r3, #22
 800857c:	6003      	str	r3, [r0, #0]
 800857e:	2001      	movs	r0, #1
 8008580:	e7e7      	b.n	8008552 <_raise_r+0x12>
 8008582:	2400      	movs	r4, #0
 8008584:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8008588:	4628      	mov	r0, r5
 800858a:	4798      	blx	r3
 800858c:	2000      	movs	r0, #0
 800858e:	e7e0      	b.n	8008552 <_raise_r+0x12>

08008590 <raise>:
 8008590:	4b02      	ldr	r3, [pc, #8]	; (800859c <raise+0xc>)
 8008592:	4601      	mov	r1, r0
 8008594:	6818      	ldr	r0, [r3, #0]
 8008596:	f7ff bfd3 	b.w	8008540 <_raise_r>
 800859a:	bf00      	nop
 800859c:	2000000c 	.word	0x2000000c

080085a0 <_kill_r>:
 80085a0:	b538      	push	{r3, r4, r5, lr}
 80085a2:	4d07      	ldr	r5, [pc, #28]	; (80085c0 <_kill_r+0x20>)
 80085a4:	2300      	movs	r3, #0
 80085a6:	4604      	mov	r4, r0
 80085a8:	4608      	mov	r0, r1
 80085aa:	4611      	mov	r1, r2
 80085ac:	602b      	str	r3, [r5, #0]
 80085ae:	f000 f8d7 	bl	8008760 <_kill>
 80085b2:	1c43      	adds	r3, r0, #1
 80085b4:	d102      	bne.n	80085bc <_kill_r+0x1c>
 80085b6:	682b      	ldr	r3, [r5, #0]
 80085b8:	b103      	cbz	r3, 80085bc <_kill_r+0x1c>
 80085ba:	6023      	str	r3, [r4, #0]
 80085bc:	bd38      	pop	{r3, r4, r5, pc}
 80085be:	bf00      	nop
 80085c0:	200008bc 	.word	0x200008bc

080085c4 <_getpid_r>:
 80085c4:	f000 b8bc 	b.w	8008740 <_getpid>

080085c8 <__sread>:
 80085c8:	b510      	push	{r4, lr}
 80085ca:	460c      	mov	r4, r1
 80085cc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80085d0:	f000 f894 	bl	80086fc <_read_r>
 80085d4:	2800      	cmp	r0, #0
 80085d6:	bfab      	itete	ge
 80085d8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80085da:	89a3      	ldrhlt	r3, [r4, #12]
 80085dc:	181b      	addge	r3, r3, r0
 80085de:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80085e2:	bfac      	ite	ge
 80085e4:	6563      	strge	r3, [r4, #84]	; 0x54
 80085e6:	81a3      	strhlt	r3, [r4, #12]
 80085e8:	bd10      	pop	{r4, pc}

080085ea <__swrite>:
 80085ea:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80085ee:	461f      	mov	r7, r3
 80085f0:	898b      	ldrh	r3, [r1, #12]
 80085f2:	05db      	lsls	r3, r3, #23
 80085f4:	4605      	mov	r5, r0
 80085f6:	460c      	mov	r4, r1
 80085f8:	4616      	mov	r6, r2
 80085fa:	d505      	bpl.n	8008608 <__swrite+0x1e>
 80085fc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008600:	2302      	movs	r3, #2
 8008602:	2200      	movs	r2, #0
 8008604:	f000 f868 	bl	80086d8 <_lseek_r>
 8008608:	89a3      	ldrh	r3, [r4, #12]
 800860a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800860e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8008612:	81a3      	strh	r3, [r4, #12]
 8008614:	4632      	mov	r2, r6
 8008616:	463b      	mov	r3, r7
 8008618:	4628      	mov	r0, r5
 800861a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800861e:	f000 b817 	b.w	8008650 <_write_r>

08008622 <__sseek>:
 8008622:	b510      	push	{r4, lr}
 8008624:	460c      	mov	r4, r1
 8008626:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800862a:	f000 f855 	bl	80086d8 <_lseek_r>
 800862e:	1c43      	adds	r3, r0, #1
 8008630:	89a3      	ldrh	r3, [r4, #12]
 8008632:	bf15      	itete	ne
 8008634:	6560      	strne	r0, [r4, #84]	; 0x54
 8008636:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800863a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800863e:	81a3      	strheq	r3, [r4, #12]
 8008640:	bf18      	it	ne
 8008642:	81a3      	strhne	r3, [r4, #12]
 8008644:	bd10      	pop	{r4, pc}

08008646 <__sclose>:
 8008646:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800864a:	f000 b813 	b.w	8008674 <_close_r>
	...

08008650 <_write_r>:
 8008650:	b538      	push	{r3, r4, r5, lr}
 8008652:	4d07      	ldr	r5, [pc, #28]	; (8008670 <_write_r+0x20>)
 8008654:	4604      	mov	r4, r0
 8008656:	4608      	mov	r0, r1
 8008658:	4611      	mov	r1, r2
 800865a:	2200      	movs	r2, #0
 800865c:	602a      	str	r2, [r5, #0]
 800865e:	461a      	mov	r2, r3
 8008660:	f000 f8a4 	bl	80087ac <_write>
 8008664:	1c43      	adds	r3, r0, #1
 8008666:	d102      	bne.n	800866e <_write_r+0x1e>
 8008668:	682b      	ldr	r3, [r5, #0]
 800866a:	b103      	cbz	r3, 800866e <_write_r+0x1e>
 800866c:	6023      	str	r3, [r4, #0]
 800866e:	bd38      	pop	{r3, r4, r5, pc}
 8008670:	200008bc 	.word	0x200008bc

08008674 <_close_r>:
 8008674:	b538      	push	{r3, r4, r5, lr}
 8008676:	4d06      	ldr	r5, [pc, #24]	; (8008690 <_close_r+0x1c>)
 8008678:	2300      	movs	r3, #0
 800867a:	4604      	mov	r4, r0
 800867c:	4608      	mov	r0, r1
 800867e:	602b      	str	r3, [r5, #0]
 8008680:	f000 f84e 	bl	8008720 <_close>
 8008684:	1c43      	adds	r3, r0, #1
 8008686:	d102      	bne.n	800868e <_close_r+0x1a>
 8008688:	682b      	ldr	r3, [r5, #0]
 800868a:	b103      	cbz	r3, 800868e <_close_r+0x1a>
 800868c:	6023      	str	r3, [r4, #0]
 800868e:	bd38      	pop	{r3, r4, r5, pc}
 8008690:	200008bc 	.word	0x200008bc

08008694 <_fstat_r>:
 8008694:	b538      	push	{r3, r4, r5, lr}
 8008696:	4d07      	ldr	r5, [pc, #28]	; (80086b4 <_fstat_r+0x20>)
 8008698:	2300      	movs	r3, #0
 800869a:	4604      	mov	r4, r0
 800869c:	4608      	mov	r0, r1
 800869e:	4611      	mov	r1, r2
 80086a0:	602b      	str	r3, [r5, #0]
 80086a2:	f000 f845 	bl	8008730 <_fstat>
 80086a6:	1c43      	adds	r3, r0, #1
 80086a8:	d102      	bne.n	80086b0 <_fstat_r+0x1c>
 80086aa:	682b      	ldr	r3, [r5, #0]
 80086ac:	b103      	cbz	r3, 80086b0 <_fstat_r+0x1c>
 80086ae:	6023      	str	r3, [r4, #0]
 80086b0:	bd38      	pop	{r3, r4, r5, pc}
 80086b2:	bf00      	nop
 80086b4:	200008bc 	.word	0x200008bc

080086b8 <_isatty_r>:
 80086b8:	b538      	push	{r3, r4, r5, lr}
 80086ba:	4d06      	ldr	r5, [pc, #24]	; (80086d4 <_isatty_r+0x1c>)
 80086bc:	2300      	movs	r3, #0
 80086be:	4604      	mov	r4, r0
 80086c0:	4608      	mov	r0, r1
 80086c2:	602b      	str	r3, [r5, #0]
 80086c4:	f000 f844 	bl	8008750 <_isatty>
 80086c8:	1c43      	adds	r3, r0, #1
 80086ca:	d102      	bne.n	80086d2 <_isatty_r+0x1a>
 80086cc:	682b      	ldr	r3, [r5, #0]
 80086ce:	b103      	cbz	r3, 80086d2 <_isatty_r+0x1a>
 80086d0:	6023      	str	r3, [r4, #0]
 80086d2:	bd38      	pop	{r3, r4, r5, pc}
 80086d4:	200008bc 	.word	0x200008bc

080086d8 <_lseek_r>:
 80086d8:	b538      	push	{r3, r4, r5, lr}
 80086da:	4d07      	ldr	r5, [pc, #28]	; (80086f8 <_lseek_r+0x20>)
 80086dc:	4604      	mov	r4, r0
 80086de:	4608      	mov	r0, r1
 80086e0:	4611      	mov	r1, r2
 80086e2:	2200      	movs	r2, #0
 80086e4:	602a      	str	r2, [r5, #0]
 80086e6:	461a      	mov	r2, r3
 80086e8:	f000 f842 	bl	8008770 <_lseek>
 80086ec:	1c43      	adds	r3, r0, #1
 80086ee:	d102      	bne.n	80086f6 <_lseek_r+0x1e>
 80086f0:	682b      	ldr	r3, [r5, #0]
 80086f2:	b103      	cbz	r3, 80086f6 <_lseek_r+0x1e>
 80086f4:	6023      	str	r3, [r4, #0]
 80086f6:	bd38      	pop	{r3, r4, r5, pc}
 80086f8:	200008bc 	.word	0x200008bc

080086fc <_read_r>:
 80086fc:	b538      	push	{r3, r4, r5, lr}
 80086fe:	4d07      	ldr	r5, [pc, #28]	; (800871c <_read_r+0x20>)
 8008700:	4604      	mov	r4, r0
 8008702:	4608      	mov	r0, r1
 8008704:	4611      	mov	r1, r2
 8008706:	2200      	movs	r2, #0
 8008708:	602a      	str	r2, [r5, #0]
 800870a:	461a      	mov	r2, r3
 800870c:	f000 f838 	bl	8008780 <_read>
 8008710:	1c43      	adds	r3, r0, #1
 8008712:	d102      	bne.n	800871a <_read_r+0x1e>
 8008714:	682b      	ldr	r3, [r5, #0]
 8008716:	b103      	cbz	r3, 800871a <_read_r+0x1e>
 8008718:	6023      	str	r3, [r4, #0]
 800871a:	bd38      	pop	{r3, r4, r5, pc}
 800871c:	200008bc 	.word	0x200008bc

08008720 <_close>:
 8008720:	4b02      	ldr	r3, [pc, #8]	; (800872c <_close+0xc>)
 8008722:	2258      	movs	r2, #88	; 0x58
 8008724:	601a      	str	r2, [r3, #0]
 8008726:	f04f 30ff 	mov.w	r0, #4294967295
 800872a:	4770      	bx	lr
 800872c:	200008bc 	.word	0x200008bc

08008730 <_fstat>:
 8008730:	4b02      	ldr	r3, [pc, #8]	; (800873c <_fstat+0xc>)
 8008732:	2258      	movs	r2, #88	; 0x58
 8008734:	601a      	str	r2, [r3, #0]
 8008736:	f04f 30ff 	mov.w	r0, #4294967295
 800873a:	4770      	bx	lr
 800873c:	200008bc 	.word	0x200008bc

08008740 <_getpid>:
 8008740:	4b02      	ldr	r3, [pc, #8]	; (800874c <_getpid+0xc>)
 8008742:	2258      	movs	r2, #88	; 0x58
 8008744:	601a      	str	r2, [r3, #0]
 8008746:	f04f 30ff 	mov.w	r0, #4294967295
 800874a:	4770      	bx	lr
 800874c:	200008bc 	.word	0x200008bc

08008750 <_isatty>:
 8008750:	4b02      	ldr	r3, [pc, #8]	; (800875c <_isatty+0xc>)
 8008752:	2258      	movs	r2, #88	; 0x58
 8008754:	601a      	str	r2, [r3, #0]
 8008756:	2000      	movs	r0, #0
 8008758:	4770      	bx	lr
 800875a:	bf00      	nop
 800875c:	200008bc 	.word	0x200008bc

08008760 <_kill>:
 8008760:	4b02      	ldr	r3, [pc, #8]	; (800876c <_kill+0xc>)
 8008762:	2258      	movs	r2, #88	; 0x58
 8008764:	601a      	str	r2, [r3, #0]
 8008766:	f04f 30ff 	mov.w	r0, #4294967295
 800876a:	4770      	bx	lr
 800876c:	200008bc 	.word	0x200008bc

08008770 <_lseek>:
 8008770:	4b02      	ldr	r3, [pc, #8]	; (800877c <_lseek+0xc>)
 8008772:	2258      	movs	r2, #88	; 0x58
 8008774:	601a      	str	r2, [r3, #0]
 8008776:	f04f 30ff 	mov.w	r0, #4294967295
 800877a:	4770      	bx	lr
 800877c:	200008bc 	.word	0x200008bc

08008780 <_read>:
 8008780:	4b02      	ldr	r3, [pc, #8]	; (800878c <_read+0xc>)
 8008782:	2258      	movs	r2, #88	; 0x58
 8008784:	601a      	str	r2, [r3, #0]
 8008786:	f04f 30ff 	mov.w	r0, #4294967295
 800878a:	4770      	bx	lr
 800878c:	200008bc 	.word	0x200008bc

08008790 <_sbrk>:
 8008790:	4a04      	ldr	r2, [pc, #16]	; (80087a4 <_sbrk+0x14>)
 8008792:	6811      	ldr	r1, [r2, #0]
 8008794:	4603      	mov	r3, r0
 8008796:	b909      	cbnz	r1, 800879c <_sbrk+0xc>
 8008798:	4903      	ldr	r1, [pc, #12]	; (80087a8 <_sbrk+0x18>)
 800879a:	6011      	str	r1, [r2, #0]
 800879c:	6810      	ldr	r0, [r2, #0]
 800879e:	4403      	add	r3, r0
 80087a0:	6013      	str	r3, [r2, #0]
 80087a2:	4770      	bx	lr
 80087a4:	200008c4 	.word	0x200008c4
 80087a8:	200008c8 	.word	0x200008c8

080087ac <_write>:
 80087ac:	4b02      	ldr	r3, [pc, #8]	; (80087b8 <_write+0xc>)
 80087ae:	2258      	movs	r2, #88	; 0x58
 80087b0:	601a      	str	r2, [r3, #0]
 80087b2:	f04f 30ff 	mov.w	r0, #4294967295
 80087b6:	4770      	bx	lr
 80087b8:	200008bc 	.word	0x200008bc

080087bc <_exit>:
 80087bc:	e7fe      	b.n	80087bc <_exit>
	...

080087c0 <_init>:
 80087c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80087c2:	bf00      	nop
 80087c4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80087c6:	bc08      	pop	{r3}
 80087c8:	469e      	mov	lr, r3
 80087ca:	4770      	bx	lr

080087cc <_fini>:
 80087cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80087ce:	bf00      	nop
 80087d0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80087d2:	bc08      	pop	{r3}
 80087d4:	469e      	mov	lr, r3
 80087d6:	4770      	bx	lr
