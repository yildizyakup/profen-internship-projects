
i2c-eeprom.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005828  080001ac  080001ac  000101ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000190  080059d4  080059d4  000159d4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005b64  08005b64  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  08005b64  08005b64  00015b64  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005b6c  08005b6c  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005b6c  08005b6c  00015b6c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005b70  08005b70  00015b70  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08005b74  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020070  2**0
                  CONTENTS
 10 .bss          00000874  20000070  20000070  00020070  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  200008e4  200008e4  00020070  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 13 .debug_info   000133b5  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000023f6  00000000  00000000  00033455  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000ec8  00000000  00000000  00035850  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000e08  00000000  00000000  00036718  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000248c0  00000000  00000000  00037520  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00011cb8  00000000  00000000  0005bde0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000dca9e  00000000  00000000  0006da98  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  0014a536  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00004268  00000000  00000000  0014a588  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001ac <__do_global_dtors_aux>:
 80001ac:	b510      	push	{r4, lr}
 80001ae:	4c05      	ldr	r4, [pc, #20]	; (80001c4 <__do_global_dtors_aux+0x18>)
 80001b0:	7823      	ldrb	r3, [r4, #0]
 80001b2:	b933      	cbnz	r3, 80001c2 <__do_global_dtors_aux+0x16>
 80001b4:	4b04      	ldr	r3, [pc, #16]	; (80001c8 <__do_global_dtors_aux+0x1c>)
 80001b6:	b113      	cbz	r3, 80001be <__do_global_dtors_aux+0x12>
 80001b8:	4804      	ldr	r0, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x20>)
 80001ba:	f3af 8000 	nop.w
 80001be:	2301      	movs	r3, #1
 80001c0:	7023      	strb	r3, [r4, #0]
 80001c2:	bd10      	pop	{r4, pc}
 80001c4:	20000070 	.word	0x20000070
 80001c8:	00000000 	.word	0x00000000
 80001cc:	080059bc 	.word	0x080059bc

080001d0 <frame_dummy>:
 80001d0:	b508      	push	{r3, lr}
 80001d2:	4b03      	ldr	r3, [pc, #12]	; (80001e0 <frame_dummy+0x10>)
 80001d4:	b11b      	cbz	r3, 80001de <frame_dummy+0xe>
 80001d6:	4903      	ldr	r1, [pc, #12]	; (80001e4 <frame_dummy+0x14>)
 80001d8:	4803      	ldr	r0, [pc, #12]	; (80001e8 <frame_dummy+0x18>)
 80001da:	f3af 8000 	nop.w
 80001de:	bd08      	pop	{r3, pc}
 80001e0:	00000000 	.word	0x00000000
 80001e4:	20000074 	.word	0x20000074
 80001e8:	080059bc 	.word	0x080059bc

080001ec <strlen>:
 80001ec:	4603      	mov	r3, r0
 80001ee:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001f2:	2a00      	cmp	r2, #0
 80001f4:	d1fb      	bne.n	80001ee <strlen+0x2>
 80001f6:	1a18      	subs	r0, r3, r0
 80001f8:	3801      	subs	r0, #1
 80001fa:	4770      	bx	lr

080001fc <__aeabi_uldivmod>:
 80001fc:	b953      	cbnz	r3, 8000214 <__aeabi_uldivmod+0x18>
 80001fe:	b94a      	cbnz	r2, 8000214 <__aeabi_uldivmod+0x18>
 8000200:	2900      	cmp	r1, #0
 8000202:	bf08      	it	eq
 8000204:	2800      	cmpeq	r0, #0
 8000206:	bf1c      	itt	ne
 8000208:	f04f 31ff 	movne.w	r1, #4294967295
 800020c:	f04f 30ff 	movne.w	r0, #4294967295
 8000210:	f000 b974 	b.w	80004fc <__aeabi_idiv0>
 8000214:	f1ad 0c08 	sub.w	ip, sp, #8
 8000218:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800021c:	f000 f806 	bl	800022c <__udivmoddi4>
 8000220:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000224:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000228:	b004      	add	sp, #16
 800022a:	4770      	bx	lr

0800022c <__udivmoddi4>:
 800022c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000230:	9d08      	ldr	r5, [sp, #32]
 8000232:	4604      	mov	r4, r0
 8000234:	468e      	mov	lr, r1
 8000236:	2b00      	cmp	r3, #0
 8000238:	d14d      	bne.n	80002d6 <__udivmoddi4+0xaa>
 800023a:	428a      	cmp	r2, r1
 800023c:	4694      	mov	ip, r2
 800023e:	d969      	bls.n	8000314 <__udivmoddi4+0xe8>
 8000240:	fab2 f282 	clz	r2, r2
 8000244:	b152      	cbz	r2, 800025c <__udivmoddi4+0x30>
 8000246:	fa01 f302 	lsl.w	r3, r1, r2
 800024a:	f1c2 0120 	rsb	r1, r2, #32
 800024e:	fa20 f101 	lsr.w	r1, r0, r1
 8000252:	fa0c fc02 	lsl.w	ip, ip, r2
 8000256:	ea41 0e03 	orr.w	lr, r1, r3
 800025a:	4094      	lsls	r4, r2
 800025c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000260:	0c21      	lsrs	r1, r4, #16
 8000262:	fbbe f6f8 	udiv	r6, lr, r8
 8000266:	fa1f f78c 	uxth.w	r7, ip
 800026a:	fb08 e316 	mls	r3, r8, r6, lr
 800026e:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000272:	fb06 f107 	mul.w	r1, r6, r7
 8000276:	4299      	cmp	r1, r3
 8000278:	d90a      	bls.n	8000290 <__udivmoddi4+0x64>
 800027a:	eb1c 0303 	adds.w	r3, ip, r3
 800027e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000282:	f080 811f 	bcs.w	80004c4 <__udivmoddi4+0x298>
 8000286:	4299      	cmp	r1, r3
 8000288:	f240 811c 	bls.w	80004c4 <__udivmoddi4+0x298>
 800028c:	3e02      	subs	r6, #2
 800028e:	4463      	add	r3, ip
 8000290:	1a5b      	subs	r3, r3, r1
 8000292:	b2a4      	uxth	r4, r4
 8000294:	fbb3 f0f8 	udiv	r0, r3, r8
 8000298:	fb08 3310 	mls	r3, r8, r0, r3
 800029c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002a0:	fb00 f707 	mul.w	r7, r0, r7
 80002a4:	42a7      	cmp	r7, r4
 80002a6:	d90a      	bls.n	80002be <__udivmoddi4+0x92>
 80002a8:	eb1c 0404 	adds.w	r4, ip, r4
 80002ac:	f100 33ff 	add.w	r3, r0, #4294967295
 80002b0:	f080 810a 	bcs.w	80004c8 <__udivmoddi4+0x29c>
 80002b4:	42a7      	cmp	r7, r4
 80002b6:	f240 8107 	bls.w	80004c8 <__udivmoddi4+0x29c>
 80002ba:	4464      	add	r4, ip
 80002bc:	3802      	subs	r0, #2
 80002be:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002c2:	1be4      	subs	r4, r4, r7
 80002c4:	2600      	movs	r6, #0
 80002c6:	b11d      	cbz	r5, 80002d0 <__udivmoddi4+0xa4>
 80002c8:	40d4      	lsrs	r4, r2
 80002ca:	2300      	movs	r3, #0
 80002cc:	e9c5 4300 	strd	r4, r3, [r5]
 80002d0:	4631      	mov	r1, r6
 80002d2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002d6:	428b      	cmp	r3, r1
 80002d8:	d909      	bls.n	80002ee <__udivmoddi4+0xc2>
 80002da:	2d00      	cmp	r5, #0
 80002dc:	f000 80ef 	beq.w	80004be <__udivmoddi4+0x292>
 80002e0:	2600      	movs	r6, #0
 80002e2:	e9c5 0100 	strd	r0, r1, [r5]
 80002e6:	4630      	mov	r0, r6
 80002e8:	4631      	mov	r1, r6
 80002ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ee:	fab3 f683 	clz	r6, r3
 80002f2:	2e00      	cmp	r6, #0
 80002f4:	d14a      	bne.n	800038c <__udivmoddi4+0x160>
 80002f6:	428b      	cmp	r3, r1
 80002f8:	d302      	bcc.n	8000300 <__udivmoddi4+0xd4>
 80002fa:	4282      	cmp	r2, r0
 80002fc:	f200 80f9 	bhi.w	80004f2 <__udivmoddi4+0x2c6>
 8000300:	1a84      	subs	r4, r0, r2
 8000302:	eb61 0303 	sbc.w	r3, r1, r3
 8000306:	2001      	movs	r0, #1
 8000308:	469e      	mov	lr, r3
 800030a:	2d00      	cmp	r5, #0
 800030c:	d0e0      	beq.n	80002d0 <__udivmoddi4+0xa4>
 800030e:	e9c5 4e00 	strd	r4, lr, [r5]
 8000312:	e7dd      	b.n	80002d0 <__udivmoddi4+0xa4>
 8000314:	b902      	cbnz	r2, 8000318 <__udivmoddi4+0xec>
 8000316:	deff      	udf	#255	; 0xff
 8000318:	fab2 f282 	clz	r2, r2
 800031c:	2a00      	cmp	r2, #0
 800031e:	f040 8092 	bne.w	8000446 <__udivmoddi4+0x21a>
 8000322:	eba1 010c 	sub.w	r1, r1, ip
 8000326:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800032a:	fa1f fe8c 	uxth.w	lr, ip
 800032e:	2601      	movs	r6, #1
 8000330:	0c20      	lsrs	r0, r4, #16
 8000332:	fbb1 f3f7 	udiv	r3, r1, r7
 8000336:	fb07 1113 	mls	r1, r7, r3, r1
 800033a:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800033e:	fb0e f003 	mul.w	r0, lr, r3
 8000342:	4288      	cmp	r0, r1
 8000344:	d908      	bls.n	8000358 <__udivmoddi4+0x12c>
 8000346:	eb1c 0101 	adds.w	r1, ip, r1
 800034a:	f103 38ff 	add.w	r8, r3, #4294967295
 800034e:	d202      	bcs.n	8000356 <__udivmoddi4+0x12a>
 8000350:	4288      	cmp	r0, r1
 8000352:	f200 80cb 	bhi.w	80004ec <__udivmoddi4+0x2c0>
 8000356:	4643      	mov	r3, r8
 8000358:	1a09      	subs	r1, r1, r0
 800035a:	b2a4      	uxth	r4, r4
 800035c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000360:	fb07 1110 	mls	r1, r7, r0, r1
 8000364:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000368:	fb0e fe00 	mul.w	lr, lr, r0
 800036c:	45a6      	cmp	lr, r4
 800036e:	d908      	bls.n	8000382 <__udivmoddi4+0x156>
 8000370:	eb1c 0404 	adds.w	r4, ip, r4
 8000374:	f100 31ff 	add.w	r1, r0, #4294967295
 8000378:	d202      	bcs.n	8000380 <__udivmoddi4+0x154>
 800037a:	45a6      	cmp	lr, r4
 800037c:	f200 80bb 	bhi.w	80004f6 <__udivmoddi4+0x2ca>
 8000380:	4608      	mov	r0, r1
 8000382:	eba4 040e 	sub.w	r4, r4, lr
 8000386:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800038a:	e79c      	b.n	80002c6 <__udivmoddi4+0x9a>
 800038c:	f1c6 0720 	rsb	r7, r6, #32
 8000390:	40b3      	lsls	r3, r6
 8000392:	fa22 fc07 	lsr.w	ip, r2, r7
 8000396:	ea4c 0c03 	orr.w	ip, ip, r3
 800039a:	fa20 f407 	lsr.w	r4, r0, r7
 800039e:	fa01 f306 	lsl.w	r3, r1, r6
 80003a2:	431c      	orrs	r4, r3
 80003a4:	40f9      	lsrs	r1, r7
 80003a6:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003aa:	fa00 f306 	lsl.w	r3, r0, r6
 80003ae:	fbb1 f8f9 	udiv	r8, r1, r9
 80003b2:	0c20      	lsrs	r0, r4, #16
 80003b4:	fa1f fe8c 	uxth.w	lr, ip
 80003b8:	fb09 1118 	mls	r1, r9, r8, r1
 80003bc:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003c0:	fb08 f00e 	mul.w	r0, r8, lr
 80003c4:	4288      	cmp	r0, r1
 80003c6:	fa02 f206 	lsl.w	r2, r2, r6
 80003ca:	d90b      	bls.n	80003e4 <__udivmoddi4+0x1b8>
 80003cc:	eb1c 0101 	adds.w	r1, ip, r1
 80003d0:	f108 3aff 	add.w	sl, r8, #4294967295
 80003d4:	f080 8088 	bcs.w	80004e8 <__udivmoddi4+0x2bc>
 80003d8:	4288      	cmp	r0, r1
 80003da:	f240 8085 	bls.w	80004e8 <__udivmoddi4+0x2bc>
 80003de:	f1a8 0802 	sub.w	r8, r8, #2
 80003e2:	4461      	add	r1, ip
 80003e4:	1a09      	subs	r1, r1, r0
 80003e6:	b2a4      	uxth	r4, r4
 80003e8:	fbb1 f0f9 	udiv	r0, r1, r9
 80003ec:	fb09 1110 	mls	r1, r9, r0, r1
 80003f0:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003f4:	fb00 fe0e 	mul.w	lr, r0, lr
 80003f8:	458e      	cmp	lr, r1
 80003fa:	d908      	bls.n	800040e <__udivmoddi4+0x1e2>
 80003fc:	eb1c 0101 	adds.w	r1, ip, r1
 8000400:	f100 34ff 	add.w	r4, r0, #4294967295
 8000404:	d26c      	bcs.n	80004e0 <__udivmoddi4+0x2b4>
 8000406:	458e      	cmp	lr, r1
 8000408:	d96a      	bls.n	80004e0 <__udivmoddi4+0x2b4>
 800040a:	3802      	subs	r0, #2
 800040c:	4461      	add	r1, ip
 800040e:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000412:	fba0 9402 	umull	r9, r4, r0, r2
 8000416:	eba1 010e 	sub.w	r1, r1, lr
 800041a:	42a1      	cmp	r1, r4
 800041c:	46c8      	mov	r8, r9
 800041e:	46a6      	mov	lr, r4
 8000420:	d356      	bcc.n	80004d0 <__udivmoddi4+0x2a4>
 8000422:	d053      	beq.n	80004cc <__udivmoddi4+0x2a0>
 8000424:	b15d      	cbz	r5, 800043e <__udivmoddi4+0x212>
 8000426:	ebb3 0208 	subs.w	r2, r3, r8
 800042a:	eb61 010e 	sbc.w	r1, r1, lr
 800042e:	fa01 f707 	lsl.w	r7, r1, r7
 8000432:	fa22 f306 	lsr.w	r3, r2, r6
 8000436:	40f1      	lsrs	r1, r6
 8000438:	431f      	orrs	r7, r3
 800043a:	e9c5 7100 	strd	r7, r1, [r5]
 800043e:	2600      	movs	r6, #0
 8000440:	4631      	mov	r1, r6
 8000442:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000446:	f1c2 0320 	rsb	r3, r2, #32
 800044a:	40d8      	lsrs	r0, r3
 800044c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000450:	fa21 f303 	lsr.w	r3, r1, r3
 8000454:	4091      	lsls	r1, r2
 8000456:	4301      	orrs	r1, r0
 8000458:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800045c:	fa1f fe8c 	uxth.w	lr, ip
 8000460:	fbb3 f0f7 	udiv	r0, r3, r7
 8000464:	fb07 3610 	mls	r6, r7, r0, r3
 8000468:	0c0b      	lsrs	r3, r1, #16
 800046a:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800046e:	fb00 f60e 	mul.w	r6, r0, lr
 8000472:	429e      	cmp	r6, r3
 8000474:	fa04 f402 	lsl.w	r4, r4, r2
 8000478:	d908      	bls.n	800048c <__udivmoddi4+0x260>
 800047a:	eb1c 0303 	adds.w	r3, ip, r3
 800047e:	f100 38ff 	add.w	r8, r0, #4294967295
 8000482:	d22f      	bcs.n	80004e4 <__udivmoddi4+0x2b8>
 8000484:	429e      	cmp	r6, r3
 8000486:	d92d      	bls.n	80004e4 <__udivmoddi4+0x2b8>
 8000488:	3802      	subs	r0, #2
 800048a:	4463      	add	r3, ip
 800048c:	1b9b      	subs	r3, r3, r6
 800048e:	b289      	uxth	r1, r1
 8000490:	fbb3 f6f7 	udiv	r6, r3, r7
 8000494:	fb07 3316 	mls	r3, r7, r6, r3
 8000498:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800049c:	fb06 f30e 	mul.w	r3, r6, lr
 80004a0:	428b      	cmp	r3, r1
 80004a2:	d908      	bls.n	80004b6 <__udivmoddi4+0x28a>
 80004a4:	eb1c 0101 	adds.w	r1, ip, r1
 80004a8:	f106 38ff 	add.w	r8, r6, #4294967295
 80004ac:	d216      	bcs.n	80004dc <__udivmoddi4+0x2b0>
 80004ae:	428b      	cmp	r3, r1
 80004b0:	d914      	bls.n	80004dc <__udivmoddi4+0x2b0>
 80004b2:	3e02      	subs	r6, #2
 80004b4:	4461      	add	r1, ip
 80004b6:	1ac9      	subs	r1, r1, r3
 80004b8:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80004bc:	e738      	b.n	8000330 <__udivmoddi4+0x104>
 80004be:	462e      	mov	r6, r5
 80004c0:	4628      	mov	r0, r5
 80004c2:	e705      	b.n	80002d0 <__udivmoddi4+0xa4>
 80004c4:	4606      	mov	r6, r0
 80004c6:	e6e3      	b.n	8000290 <__udivmoddi4+0x64>
 80004c8:	4618      	mov	r0, r3
 80004ca:	e6f8      	b.n	80002be <__udivmoddi4+0x92>
 80004cc:	454b      	cmp	r3, r9
 80004ce:	d2a9      	bcs.n	8000424 <__udivmoddi4+0x1f8>
 80004d0:	ebb9 0802 	subs.w	r8, r9, r2
 80004d4:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004d8:	3801      	subs	r0, #1
 80004da:	e7a3      	b.n	8000424 <__udivmoddi4+0x1f8>
 80004dc:	4646      	mov	r6, r8
 80004de:	e7ea      	b.n	80004b6 <__udivmoddi4+0x28a>
 80004e0:	4620      	mov	r0, r4
 80004e2:	e794      	b.n	800040e <__udivmoddi4+0x1e2>
 80004e4:	4640      	mov	r0, r8
 80004e6:	e7d1      	b.n	800048c <__udivmoddi4+0x260>
 80004e8:	46d0      	mov	r8, sl
 80004ea:	e77b      	b.n	80003e4 <__udivmoddi4+0x1b8>
 80004ec:	3b02      	subs	r3, #2
 80004ee:	4461      	add	r1, ip
 80004f0:	e732      	b.n	8000358 <__udivmoddi4+0x12c>
 80004f2:	4630      	mov	r0, r6
 80004f4:	e709      	b.n	800030a <__udivmoddi4+0xde>
 80004f6:	4464      	add	r4, ip
 80004f8:	3802      	subs	r0, #2
 80004fa:	e742      	b.n	8000382 <__udivmoddi4+0x156>

080004fc <__aeabi_idiv0>:
 80004fc:	4770      	bx	lr
 80004fe:	bf00      	nop

08000500 <removeChar>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void removeChar(char * str, char charToRemove){
 8000500:	b580      	push	{r7, lr}
 8000502:	b086      	sub	sp, #24
 8000504:	af00      	add	r7, sp, #0
 8000506:	6078      	str	r0, [r7, #4]
 8000508:	460b      	mov	r3, r1
 800050a:	70fb      	strb	r3, [r7, #3]
    int i, j;
    int len = strlen(str);
 800050c:	6878      	ldr	r0, [r7, #4]
 800050e:	f7ff fe6d 	bl	80001ec <strlen>
 8000512:	4603      	mov	r3, r0
 8000514:	60fb      	str	r3, [r7, #12]
    for(i=0; i<len; i++)
 8000516:	2300      	movs	r3, #0
 8000518:	617b      	str	r3, [r7, #20]
 800051a:	e022      	b.n	8000562 <removeChar+0x62>
    {
        if(str[i] == charToRemove)
 800051c:	697b      	ldr	r3, [r7, #20]
 800051e:	687a      	ldr	r2, [r7, #4]
 8000520:	4413      	add	r3, r2
 8000522:	781b      	ldrb	r3, [r3, #0]
 8000524:	78fa      	ldrb	r2, [r7, #3]
 8000526:	429a      	cmp	r2, r3
 8000528:	d118      	bne.n	800055c <removeChar+0x5c>
        {
            for(j=i; j<len; j++)
 800052a:	697b      	ldr	r3, [r7, #20]
 800052c:	613b      	str	r3, [r7, #16]
 800052e:	e00b      	b.n	8000548 <removeChar+0x48>
            {
                str[j] = str[j+1];
 8000530:	693b      	ldr	r3, [r7, #16]
 8000532:	3301      	adds	r3, #1
 8000534:	687a      	ldr	r2, [r7, #4]
 8000536:	441a      	add	r2, r3
 8000538:	693b      	ldr	r3, [r7, #16]
 800053a:	6879      	ldr	r1, [r7, #4]
 800053c:	440b      	add	r3, r1
 800053e:	7812      	ldrb	r2, [r2, #0]
 8000540:	701a      	strb	r2, [r3, #0]
            for(j=i; j<len; j++)
 8000542:	693b      	ldr	r3, [r7, #16]
 8000544:	3301      	adds	r3, #1
 8000546:	613b      	str	r3, [r7, #16]
 8000548:	693a      	ldr	r2, [r7, #16]
 800054a:	68fb      	ldr	r3, [r7, #12]
 800054c:	429a      	cmp	r2, r3
 800054e:	dbef      	blt.n	8000530 <removeChar+0x30>
            }
            len--;
 8000550:	68fb      	ldr	r3, [r7, #12]
 8000552:	3b01      	subs	r3, #1
 8000554:	60fb      	str	r3, [r7, #12]
            i--;
 8000556:	697b      	ldr	r3, [r7, #20]
 8000558:	3b01      	subs	r3, #1
 800055a:	617b      	str	r3, [r7, #20]
    for(i=0; i<len; i++)
 800055c:	697b      	ldr	r3, [r7, #20]
 800055e:	3301      	adds	r3, #1
 8000560:	617b      	str	r3, [r7, #20]
 8000562:	697a      	ldr	r2, [r7, #20]
 8000564:	68fb      	ldr	r3, [r7, #12]
 8000566:	429a      	cmp	r2, r3
 8000568:	dbd8      	blt.n	800051c <removeChar+0x1c>
        }
    }
}
 800056a:	bf00      	nop
 800056c:	bf00      	nop
 800056e:	3718      	adds	r7, #24
 8000570:	46bd      	mov	sp, r7
 8000572:	bd80      	pop	{r7, pc}

08000574 <slice>:

void slice(const char *str, char *result, size_t start, size_t end){
 8000574:	b580      	push	{r7, lr}
 8000576:	b084      	sub	sp, #16
 8000578:	af00      	add	r7, sp, #0
 800057a:	60f8      	str	r0, [r7, #12]
 800057c:	60b9      	str	r1, [r7, #8]
 800057e:	607a      	str	r2, [r7, #4]
 8000580:	603b      	str	r3, [r7, #0]
    strncpy(result, str + start, end - start);
 8000582:	68fa      	ldr	r2, [r7, #12]
 8000584:	687b      	ldr	r3, [r7, #4]
 8000586:	18d1      	adds	r1, r2, r3
 8000588:	683a      	ldr	r2, [r7, #0]
 800058a:	687b      	ldr	r3, [r7, #4]
 800058c:	1ad3      	subs	r3, r2, r3
 800058e:	461a      	mov	r2, r3
 8000590:	68b8      	ldr	r0, [r7, #8]
 8000592:	f005 f8b4 	bl	80056fe <strncpy>
}
 8000596:	bf00      	nop
 8000598:	3710      	adds	r7, #16
 800059a:	46bd      	mov	sp, r7
 800059c:	bd80      	pop	{r7, pc}
	...

080005a0 <MY_UART_Transmit>:


void MY_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout){
 80005a0:	b580      	push	{r7, lr}
 80005a2:	b084      	sub	sp, #16
 80005a4:	af00      	add	r7, sp, #0
 80005a6:	60f8      	str	r0, [r7, #12]
 80005a8:	60b9      	str	r1, [r7, #8]
 80005aa:	603b      	str	r3, [r7, #0]
 80005ac:	4613      	mov	r3, r2
 80005ae:	80fb      	strh	r3, [r7, #6]

	removeChar(pData,'\n');
 80005b0:	210a      	movs	r1, #10
 80005b2:	68b8      	ldr	r0, [r7, #8]
 80005b4:	f7ff ffa4 	bl	8000500 <removeChar>
	removeChar(pData,'\r');
 80005b8:	210d      	movs	r1, #13
 80005ba:	68b8      	ldr	r0, [r7, #8]
 80005bc:	f7ff ffa0 	bl	8000500 <removeChar>
	strcat(pData, "\r\n");
 80005c0:	68b8      	ldr	r0, [r7, #8]
 80005c2:	f7ff fe13 	bl	80001ec <strlen>
 80005c6:	4603      	mov	r3, r0
 80005c8:	461a      	mov	r2, r3
 80005ca:	68bb      	ldr	r3, [r7, #8]
 80005cc:	4413      	add	r3, r2
 80005ce:	4a09      	ldr	r2, [pc, #36]	; (80005f4 <MY_UART_Transmit+0x54>)
 80005d0:	8811      	ldrh	r1, [r2, #0]
 80005d2:	7892      	ldrb	r2, [r2, #2]
 80005d4:	8019      	strh	r1, [r3, #0]
 80005d6:	709a      	strb	r2, [r3, #2]

	HAL_UART_Transmit(&huart3, pData, strlen(pData), Timeout);
 80005d8:	68b8      	ldr	r0, [r7, #8]
 80005da:	f7ff fe07 	bl	80001ec <strlen>
 80005de:	4603      	mov	r3, r0
 80005e0:	b29a      	uxth	r2, r3
 80005e2:	683b      	ldr	r3, [r7, #0]
 80005e4:	68b9      	ldr	r1, [r7, #8]
 80005e6:	4804      	ldr	r0, [pc, #16]	; (80005f8 <MY_UART_Transmit+0x58>)
 80005e8:	f003 fcdb 	bl	8003fa2 <HAL_UART_Transmit>
}
 80005ec:	bf00      	nop
 80005ee:	3710      	adds	r7, #16
 80005f0:	46bd      	mov	sp, r7
 80005f2:	bd80      	pop	{r7, pc}
 80005f4:	080059d4 	.word	0x080059d4
 80005f8:	20000308 	.word	0x20000308

080005fc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005fc:	b5b0      	push	{r4, r5, r7, lr}
 80005fe:	b088      	sub	sp, #32
 8000600:	af02      	add	r7, sp, #8
  /* USER CODE BEGIN 1 */
	uint8_t dataBuffer[10] = {0};
 8000602:	2300      	movs	r3, #0
 8000604:	607b      	str	r3, [r7, #4]
 8000606:	f107 0308 	add.w	r3, r7, #8
 800060a:	2200      	movs	r2, #0
 800060c:	601a      	str	r2, [r3, #0]
 800060e:	809a      	strh	r2, [r3, #4]
	int deviceReadyFlag = 1;
 8000610:	2301      	movs	r3, #1
 8000612:	617b      	str	r3, [r7, #20]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000614:	f000 fe70 	bl	80012f8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000618:	f000 f8ea 	bl	80007f0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800061c:	f000 fa38 	bl	8000a90 <MX_GPIO_Init>
  MX_ETH_Init();
 8000620:	f000 f950 	bl	80008c4 <MX_ETH_Init>
  MX_USART3_UART_Init();
 8000624:	f000 f9dc 	bl	80009e0 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 8000628:	f000 fa04 	bl	8000a34 <MX_USB_OTG_FS_PCD_Init>
  MX_I2C1_Init();
 800062c:	f000 f998 	bl	8000960 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
  HAL_UART_Receive_IT(&huart3,testReceiveData,sizeof(testReceiveData));
 8000630:	223c      	movs	r2, #60	; 0x3c
 8000632:	4960      	ldr	r1, [pc, #384]	; (80007b4 <main+0x1b8>)
 8000634:	4860      	ldr	r0, [pc, #384]	; (80007b8 <main+0x1bc>)
 8000636:	f003 fd46 	bl	80040c6 <HAL_UART_Receive_IT>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {

	  if(deviceReadyFlag)
 800063a:	697b      	ldr	r3, [r7, #20]
 800063c:	2b00      	cmp	r3, #0
 800063e:	d01b      	beq.n	8000678 <main+0x7c>
	  {
		  deviceReadyFlag = 0;
 8000640:	2300      	movs	r3, #0
 8000642:	617b      	str	r3, [r7, #20]
		  HAL_StatusTypeDef ready = HAL_I2C_IsDeviceReady(&hi2c1, M24512_DEV_ADDR, 1, 1000);
 8000644:	23a0      	movs	r3, #160	; 0xa0
 8000646:	b299      	uxth	r1, r3
 8000648:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800064c:	2201      	movs	r2, #1
 800064e:	485b      	ldr	r0, [pc, #364]	; (80007bc <main+0x1c0>)
 8000650:	f002 f9ce 	bl	80029f0 <HAL_I2C_IsDeviceReady>
 8000654:	4603      	mov	r3, r0
 8000656:	74fb      	strb	r3, [r7, #19]
		  if (ready != HAL_OK)
 8000658:	7cfb      	ldrb	r3, [r7, #19]
 800065a:	2b00      	cmp	r3, #0
 800065c:	d005      	beq.n	800066a <main+0x6e>
			  strcpy((char*)dataBuffer, "NOT READY\r\n");
 800065e:	1d3b      	adds	r3, r7, #4
 8000660:	4a57      	ldr	r2, [pc, #348]	; (80007c0 <main+0x1c4>)
 8000662:	ca07      	ldmia	r2, {r0, r1, r2}
 8000664:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8000668:	e006      	b.n	8000678 <main+0x7c>
		  else
			  MY_UART_Transmit(&huart3, "READY\r\n", 7, 1000);
 800066a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800066e:	2207      	movs	r2, #7
 8000670:	4954      	ldr	r1, [pc, #336]	; (80007c4 <main+0x1c8>)
 8000672:	4851      	ldr	r0, [pc, #324]	; (80007b8 <main+0x1bc>)
 8000674:	f7ff ff94 	bl	80005a0 <MY_UART_Transmit>
	  }

	  HAL_Delay(1000);
*/

	if(i2cFlag)
 8000678:	4b53      	ldr	r3, [pc, #332]	; (80007c8 <main+0x1cc>)
 800067a:	681b      	ldr	r3, [r3, #0]
 800067c:	2b00      	cmp	r3, #0
 800067e:	d0dc      	beq.n	800063a <main+0x3e>
	  	{
	  		i2cFlag = 0;
 8000680:	4b51      	ldr	r3, [pc, #324]	; (80007c8 <main+0x1cc>)
 8000682:	2200      	movs	r2, #0
 8000684:	601a      	str	r2, [r3, #0]
	  		if(writeFlag || clearFlag)
 8000686:	4b51      	ldr	r3, [pc, #324]	; (80007cc <main+0x1d0>)
 8000688:	681b      	ldr	r3, [r3, #0]
 800068a:	2b00      	cmp	r3, #0
 800068c:	d103      	bne.n	8000696 <main+0x9a>
 800068e:	4b50      	ldr	r3, [pc, #320]	; (80007d0 <main+0x1d4>)
 8000690:	681b      	ldr	r3, [r3, #0]
 8000692:	2b00      	cmp	r3, #0
 8000694:	d024      	beq.n	80006e0 <main+0xe4>
	  		{
	  			HAL_StatusTypeDef stat = HAL_I2C_Master_Transmit(&hi2c1, M24512_DEV_ADDR, memAddrArr, 10, 3000);
 8000696:	23a0      	movs	r3, #160	; 0xa0
 8000698:	b299      	uxth	r1, r3
 800069a:	f640 33b8 	movw	r3, #3000	; 0xbb8
 800069e:	9300      	str	r3, [sp, #0]
 80006a0:	230a      	movs	r3, #10
 80006a2:	4a4c      	ldr	r2, [pc, #304]	; (80007d4 <main+0x1d8>)
 80006a4:	4845      	ldr	r0, [pc, #276]	; (80007bc <main+0x1c0>)
 80006a6:	f001 fe7f 	bl	80023a8 <HAL_I2C_Master_Transmit>
 80006aa:	4603      	mov	r3, r0
 80006ac:	747b      	strb	r3, [r7, #17]
	  			if ( stat != HAL_OK )
 80006ae:	7c7b      	ldrb	r3, [r7, #17]
 80006b0:	2b00      	cmp	r3, #0
 80006b2:	d00e      	beq.n	80006d2 <main+0xd6>
	  			{
	  				strcpy((char*)dataBuffer, "Error MemAddr Tx\r\n");
 80006b4:	1d3b      	adds	r3, r7, #4
 80006b6:	4a48      	ldr	r2, [pc, #288]	; (80007d8 <main+0x1dc>)
 80006b8:	461c      	mov	r4, r3
 80006ba:	4615      	mov	r5, r2
 80006bc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80006be:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80006c0:	682b      	ldr	r3, [r5, #0]
 80006c2:	461a      	mov	r2, r3
 80006c4:	8022      	strh	r2, [r4, #0]
 80006c6:	3402      	adds	r4, #2
 80006c8:	0c1b      	lsrs	r3, r3, #16
 80006ca:	7023      	strb	r3, [r4, #0]
	  				errorFlag = 1;
 80006cc:	4b43      	ldr	r3, [pc, #268]	; (80007dc <main+0x1e0>)
 80006ce:	2201      	movs	r2, #1
 80006d0:	601a      	str	r2, [r3, #0]
	  			}

	  			writeFlag = 0;
 80006d2:	4b3e      	ldr	r3, [pc, #248]	; (80007cc <main+0x1d0>)
 80006d4:	2200      	movs	r2, #0
 80006d6:	601a      	str	r2, [r3, #0]
	  			clearFlag = 0;
 80006d8:	4b3d      	ldr	r3, [pc, #244]	; (80007d0 <main+0x1d4>)
 80006da:	2200      	movs	r2, #0
 80006dc:	601a      	str	r2, [r3, #0]
	  		{
 80006de:	e04f      	b.n	8000780 <main+0x184>
	  		}

	  		else if(readFlag)
 80006e0:	4b3f      	ldr	r3, [pc, #252]	; (80007e0 <main+0x1e4>)
 80006e2:	681b      	ldr	r3, [r3, #0]
 80006e4:	2b00      	cmp	r3, #0
 80006e6:	d04b      	beq.n	8000780 <main+0x184>
	  		{
	  			HAL_StatusTypeDef ret = HAL_I2C_Master_Transmit(&hi2c1, M24512_DEV_ADDR, memAddrArr, 2, 3000);
 80006e8:	23a0      	movs	r3, #160	; 0xa0
 80006ea:	b299      	uxth	r1, r3
 80006ec:	f640 33b8 	movw	r3, #3000	; 0xbb8
 80006f0:	9300      	str	r3, [sp, #0]
 80006f2:	2302      	movs	r3, #2
 80006f4:	4a37      	ldr	r2, [pc, #220]	; (80007d4 <main+0x1d8>)
 80006f6:	4831      	ldr	r0, [pc, #196]	; (80007bc <main+0x1c0>)
 80006f8:	f001 fe56 	bl	80023a8 <HAL_I2C_Master_Transmit>
 80006fc:	4603      	mov	r3, r0
 80006fe:	74bb      	strb	r3, [r7, #18]
	  			if ( ret != HAL_OK )
 8000700:	7cbb      	ldrb	r3, [r7, #18]
 8000702:	2b00      	cmp	r3, #0
 8000704:	d00c      	beq.n	8000720 <main+0x124>
	  			{
	  				strcpy((char*)dataBuffer, "Error MemAddrArr Tx in Rx\r\n");
 8000706:	1d3b      	adds	r3, r7, #4
 8000708:	4a36      	ldr	r2, [pc, #216]	; (80007e4 <main+0x1e8>)
 800070a:	461c      	mov	r4, r3
 800070c:	4615      	mov	r5, r2
 800070e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000710:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000712:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000716:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	  				errorFlag = 1;
 800071a:	4b30      	ldr	r3, [pc, #192]	; (80007dc <main+0x1e0>)
 800071c:	2201      	movs	r2, #1
 800071e:	601a      	str	r2, [r3, #0]
	  			}

	  			ret = HAL_I2C_Master_Receive(&hi2c1, M24512_DEV_ADDR, dataBuffer, sizeof(dataBuffer), 3000);
 8000720:	23a0      	movs	r3, #160	; 0xa0
 8000722:	b299      	uxth	r1, r3
 8000724:	1d3a      	adds	r2, r7, #4
 8000726:	f640 33b8 	movw	r3, #3000	; 0xbb8
 800072a:	9300      	str	r3, [sp, #0]
 800072c:	230a      	movs	r3, #10
 800072e:	4823      	ldr	r0, [pc, #140]	; (80007bc <main+0x1c0>)
 8000730:	f001 ff38 	bl	80025a4 <HAL_I2C_Master_Receive>
 8000734:	4603      	mov	r3, r0
 8000736:	74bb      	strb	r3, [r7, #18]
	  			if(ret != HAL_OK)
 8000738:	7cbb      	ldrb	r3, [r7, #18]
 800073a:	2b00      	cmp	r3, #0
 800073c:	d00a      	beq.n	8000754 <main+0x158>
	  			{
	  				strcpy((char*)dataBuffer, "Error Data Rx\r\n");
 800073e:	1d3b      	adds	r3, r7, #4
 8000740:	4a29      	ldr	r2, [pc, #164]	; (80007e8 <main+0x1ec>)
 8000742:	461c      	mov	r4, r3
 8000744:	4613      	mov	r3, r2
 8000746:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000748:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	  				errorFlag = 1;
 800074c:	4b23      	ldr	r3, [pc, #140]	; (80007dc <main+0x1e0>)
 800074e:	2201      	movs	r2, #1
 8000750:	601a      	str	r2, [r3, #0]
 8000752:	e012      	b.n	800077a <main+0x17e>
	  			}

	  			else
	  			{
	  				HAL_UART_Transmit(&huart3, "RECEIVED: ", 10, 1000);
 8000754:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000758:	220a      	movs	r2, #10
 800075a:	4924      	ldr	r1, [pc, #144]	; (80007ec <main+0x1f0>)
 800075c:	4816      	ldr	r0, [pc, #88]	; (80007b8 <main+0x1bc>)
 800075e:	f003 fc20 	bl	8003fa2 <HAL_UART_Transmit>
	  				MY_UART_Transmit(&huart3, dataBuffer, strlen(dataBuffer), 1000);
 8000762:	1d3b      	adds	r3, r7, #4
 8000764:	4618      	mov	r0, r3
 8000766:	f7ff fd41 	bl	80001ec <strlen>
 800076a:	4603      	mov	r3, r0
 800076c:	b29a      	uxth	r2, r3
 800076e:	1d39      	adds	r1, r7, #4
 8000770:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000774:	4810      	ldr	r0, [pc, #64]	; (80007b8 <main+0x1bc>)
 8000776:	f7ff ff13 	bl	80005a0 <MY_UART_Transmit>
	  			}
	  			readFlag = 0;
 800077a:	4b19      	ldr	r3, [pc, #100]	; (80007e0 <main+0x1e4>)
 800077c:	2200      	movs	r2, #0
 800077e:	601a      	str	r2, [r3, #0]
	  	  	}
	  	if(errorFlag)
 8000780:	4b16      	ldr	r3, [pc, #88]	; (80007dc <main+0x1e0>)
 8000782:	681b      	ldr	r3, [r3, #0]
 8000784:	2b00      	cmp	r3, #0
 8000786:	d00e      	beq.n	80007a6 <main+0x1aa>
	  	{
			errorFlag = 0;
 8000788:	4b14      	ldr	r3, [pc, #80]	; (80007dc <main+0x1e0>)
 800078a:	2200      	movs	r2, #0
 800078c:	601a      	str	r2, [r3, #0]
			MY_UART_Transmit(&huart3, dataBuffer, strlen(dataBuffer), 1000);
 800078e:	1d3b      	adds	r3, r7, #4
 8000790:	4618      	mov	r0, r3
 8000792:	f7ff fd2b 	bl	80001ec <strlen>
 8000796:	4603      	mov	r3, r0
 8000798:	b29a      	uxth	r2, r3
 800079a:	1d39      	adds	r1, r7, #4
 800079c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80007a0:	4805      	ldr	r0, [pc, #20]	; (80007b8 <main+0x1bc>)
 80007a2:	f7ff fefd 	bl	80005a0 <MY_UART_Transmit>
	  	}
		  HAL_UART_Receive_IT(&huart3,testReceiveData,sizeof(testReceiveData));
 80007a6:	223c      	movs	r2, #60	; 0x3c
 80007a8:	4902      	ldr	r1, [pc, #8]	; (80007b4 <main+0x1b8>)
 80007aa:	4803      	ldr	r0, [pc, #12]	; (80007b8 <main+0x1bc>)
 80007ac:	f003 fc8b 	bl	80040c6 <HAL_UART_Receive_IT>
	  if(deviceReadyFlag)
 80007b0:	e743      	b.n	800063a <main+0x3e>
 80007b2:	bf00      	nop
 80007b4:	20000858 	.word	0x20000858
 80007b8:	20000308 	.word	0x20000308
 80007bc:	200002b4 	.word	0x200002b4
 80007c0:	080059d8 	.word	0x080059d8
 80007c4:	080059e4 	.word	0x080059e4
 80007c8:	200008bc 	.word	0x200008bc
 80007cc:	200008b4 	.word	0x200008b4
 80007d0:	200008c0 	.word	0x200008c0
 80007d4:	200008a4 	.word	0x200008a4
 80007d8:	080059ec 	.word	0x080059ec
 80007dc:	200008b0 	.word	0x200008b0
 80007e0:	200008b8 	.word	0x200008b8
 80007e4:	08005a00 	.word	0x08005a00
 80007e8:	08005a1c 	.word	0x08005a1c
 80007ec:	08005a2c 	.word	0x08005a2c

080007f0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80007f0:	b580      	push	{r7, lr}
 80007f2:	b094      	sub	sp, #80	; 0x50
 80007f4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80007f6:	f107 0320 	add.w	r3, r7, #32
 80007fa:	2230      	movs	r2, #48	; 0x30
 80007fc:	2100      	movs	r1, #0
 80007fe:	4618      	mov	r0, r3
 8000800:	f004 ff34 	bl	800566c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000804:	f107 030c 	add.w	r3, r7, #12
 8000808:	2200      	movs	r2, #0
 800080a:	601a      	str	r2, [r3, #0]
 800080c:	605a      	str	r2, [r3, #4]
 800080e:	609a      	str	r2, [r3, #8]
 8000810:	60da      	str	r2, [r3, #12]
 8000812:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000814:	2300      	movs	r3, #0
 8000816:	60bb      	str	r3, [r7, #8]
 8000818:	4b28      	ldr	r3, [pc, #160]	; (80008bc <SystemClock_Config+0xcc>)
 800081a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800081c:	4a27      	ldr	r2, [pc, #156]	; (80008bc <SystemClock_Config+0xcc>)
 800081e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000822:	6413      	str	r3, [r2, #64]	; 0x40
 8000824:	4b25      	ldr	r3, [pc, #148]	; (80008bc <SystemClock_Config+0xcc>)
 8000826:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000828:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800082c:	60bb      	str	r3, [r7, #8]
 800082e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000830:	2300      	movs	r3, #0
 8000832:	607b      	str	r3, [r7, #4]
 8000834:	4b22      	ldr	r3, [pc, #136]	; (80008c0 <SystemClock_Config+0xd0>)
 8000836:	681b      	ldr	r3, [r3, #0]
 8000838:	4a21      	ldr	r2, [pc, #132]	; (80008c0 <SystemClock_Config+0xd0>)
 800083a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800083e:	6013      	str	r3, [r2, #0]
 8000840:	4b1f      	ldr	r3, [pc, #124]	; (80008c0 <SystemClock_Config+0xd0>)
 8000842:	681b      	ldr	r3, [r3, #0]
 8000844:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000848:	607b      	str	r3, [r7, #4]
 800084a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800084c:	2301      	movs	r3, #1
 800084e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000850:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8000854:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000856:	2302      	movs	r3, #2
 8000858:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800085a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800085e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000860:	2304      	movs	r3, #4
 8000862:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8000864:	23a8      	movs	r3, #168	; 0xa8
 8000866:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000868:	2302      	movs	r3, #2
 800086a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 800086c:	2307      	movs	r3, #7
 800086e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000870:	f107 0320 	add.w	r3, r7, #32
 8000874:	4618      	mov	r0, r3
 8000876:	f002 feaf 	bl	80035d8 <HAL_RCC_OscConfig>
 800087a:	4603      	mov	r3, r0
 800087c:	2b00      	cmp	r3, #0
 800087e:	d001      	beq.n	8000884 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000880:	f000 faae 	bl	8000de0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000884:	230f      	movs	r3, #15
 8000886:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000888:	2302      	movs	r3, #2
 800088a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800088c:	2300      	movs	r3, #0
 800088e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000890:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000894:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000896:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800089a:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800089c:	f107 030c 	add.w	r3, r7, #12
 80008a0:	2105      	movs	r1, #5
 80008a2:	4618      	mov	r0, r3
 80008a4:	f003 f910 	bl	8003ac8 <HAL_RCC_ClockConfig>
 80008a8:	4603      	mov	r3, r0
 80008aa:	2b00      	cmp	r3, #0
 80008ac:	d001      	beq.n	80008b2 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 80008ae:	f000 fa97 	bl	8000de0 <Error_Handler>
  }
}
 80008b2:	bf00      	nop
 80008b4:	3750      	adds	r7, #80	; 0x50
 80008b6:	46bd      	mov	sp, r7
 80008b8:	bd80      	pop	{r7, pc}
 80008ba:	bf00      	nop
 80008bc:	40023800 	.word	0x40023800
 80008c0:	40007000 	.word	0x40007000

080008c4 <MX_ETH_Init>:
  * @brief ETH Initialization Function
  * @param None
  * @retval None
  */
static void MX_ETH_Init(void)
{
 80008c4:	b580      	push	{r7, lr}
 80008c6:	af00      	add	r7, sp, #0
   static uint8_t MACAddr[6];

  /* USER CODE BEGIN ETH_Init 1 */

  /* USER CODE END ETH_Init 1 */
  heth.Instance = ETH;
 80008c8:	4b1f      	ldr	r3, [pc, #124]	; (8000948 <MX_ETH_Init+0x84>)
 80008ca:	4a20      	ldr	r2, [pc, #128]	; (800094c <MX_ETH_Init+0x88>)
 80008cc:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 80008ce:	4b20      	ldr	r3, [pc, #128]	; (8000950 <MX_ETH_Init+0x8c>)
 80008d0:	2200      	movs	r2, #0
 80008d2:	701a      	strb	r2, [r3, #0]
  MACAddr[1] = 0x80;
 80008d4:	4b1e      	ldr	r3, [pc, #120]	; (8000950 <MX_ETH_Init+0x8c>)
 80008d6:	2280      	movs	r2, #128	; 0x80
 80008d8:	705a      	strb	r2, [r3, #1]
  MACAddr[2] = 0xE1;
 80008da:	4b1d      	ldr	r3, [pc, #116]	; (8000950 <MX_ETH_Init+0x8c>)
 80008dc:	22e1      	movs	r2, #225	; 0xe1
 80008de:	709a      	strb	r2, [r3, #2]
  MACAddr[3] = 0x00;
 80008e0:	4b1b      	ldr	r3, [pc, #108]	; (8000950 <MX_ETH_Init+0x8c>)
 80008e2:	2200      	movs	r2, #0
 80008e4:	70da      	strb	r2, [r3, #3]
  MACAddr[4] = 0x00;
 80008e6:	4b1a      	ldr	r3, [pc, #104]	; (8000950 <MX_ETH_Init+0x8c>)
 80008e8:	2200      	movs	r2, #0
 80008ea:	711a      	strb	r2, [r3, #4]
  MACAddr[5] = 0x00;
 80008ec:	4b18      	ldr	r3, [pc, #96]	; (8000950 <MX_ETH_Init+0x8c>)
 80008ee:	2200      	movs	r2, #0
 80008f0:	715a      	strb	r2, [r3, #5]
  heth.Init.MACAddr = &MACAddr[0];
 80008f2:	4b15      	ldr	r3, [pc, #84]	; (8000948 <MX_ETH_Init+0x84>)
 80008f4:	4a16      	ldr	r2, [pc, #88]	; (8000950 <MX_ETH_Init+0x8c>)
 80008f6:	605a      	str	r2, [r3, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 80008f8:	4b13      	ldr	r3, [pc, #76]	; (8000948 <MX_ETH_Init+0x84>)
 80008fa:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 80008fe:	609a      	str	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 8000900:	4b11      	ldr	r3, [pc, #68]	; (8000948 <MX_ETH_Init+0x84>)
 8000902:	4a14      	ldr	r2, [pc, #80]	; (8000954 <MX_ETH_Init+0x90>)
 8000904:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 8000906:	4b10      	ldr	r3, [pc, #64]	; (8000948 <MX_ETH_Init+0x84>)
 8000908:	4a13      	ldr	r2, [pc, #76]	; (8000958 <MX_ETH_Init+0x94>)
 800090a:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1524;
 800090c:	4b0e      	ldr	r3, [pc, #56]	; (8000948 <MX_ETH_Init+0x84>)
 800090e:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8000912:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  if (HAL_ETH_Init(&heth) != HAL_OK)
 8000914:	480c      	ldr	r0, [pc, #48]	; (8000948 <MX_ETH_Init+0x84>)
 8000916:	f000 ff29 	bl	800176c <HAL_ETH_Init>
 800091a:	4603      	mov	r3, r0
 800091c:	2b00      	cmp	r3, #0
 800091e:	d001      	beq.n	8000924 <MX_ETH_Init+0x60>
  {
    Error_Handler();
 8000920:	f000 fa5e 	bl	8000de0 <Error_Handler>
  }

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 8000924:	2238      	movs	r2, #56	; 0x38
 8000926:	2100      	movs	r1, #0
 8000928:	480c      	ldr	r0, [pc, #48]	; (800095c <MX_ETH_Init+0x98>)
 800092a:	f004 fe9f 	bl	800566c <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 800092e:	4b0b      	ldr	r3, [pc, #44]	; (800095c <MX_ETH_Init+0x98>)
 8000930:	2221      	movs	r2, #33	; 0x21
 8000932:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 8000934:	4b09      	ldr	r3, [pc, #36]	; (800095c <MX_ETH_Init+0x98>)
 8000936:	f44f 0240 	mov.w	r2, #12582912	; 0xc00000
 800093a:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 800093c:	4b07      	ldr	r3, [pc, #28]	; (800095c <MX_ETH_Init+0x98>)
 800093e:	2200      	movs	r2, #0
 8000940:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN ETH_Init 2 */

  /* USER CODE END ETH_Init 2 */

}
 8000942:	bf00      	nop
 8000944:	bd80      	pop	{r7, pc}
 8000946:	bf00      	nop
 8000948:	20000204 	.word	0x20000204
 800094c:	40028000 	.word	0x40028000
 8000950:	200008c4 	.word	0x200008c4
 8000954:	20000164 	.word	0x20000164
 8000958:	200000c4 	.word	0x200000c4
 800095c:	2000008c 	.word	0x2000008c

08000960 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000960:	b580      	push	{r7, lr}
 8000962:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000964:	4b1b      	ldr	r3, [pc, #108]	; (80009d4 <MX_I2C1_Init+0x74>)
 8000966:	4a1c      	ldr	r2, [pc, #112]	; (80009d8 <MX_I2C1_Init+0x78>)
 8000968:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800096a:	4b1a      	ldr	r3, [pc, #104]	; (80009d4 <MX_I2C1_Init+0x74>)
 800096c:	4a1b      	ldr	r2, [pc, #108]	; (80009dc <MX_I2C1_Init+0x7c>)
 800096e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000970:	4b18      	ldr	r3, [pc, #96]	; (80009d4 <MX_I2C1_Init+0x74>)
 8000972:	2200      	movs	r2, #0
 8000974:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000976:	4b17      	ldr	r3, [pc, #92]	; (80009d4 <MX_I2C1_Init+0x74>)
 8000978:	2200      	movs	r2, #0
 800097a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800097c:	4b15      	ldr	r3, [pc, #84]	; (80009d4 <MX_I2C1_Init+0x74>)
 800097e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000982:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000984:	4b13      	ldr	r3, [pc, #76]	; (80009d4 <MX_I2C1_Init+0x74>)
 8000986:	2200      	movs	r2, #0
 8000988:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800098a:	4b12      	ldr	r3, [pc, #72]	; (80009d4 <MX_I2C1_Init+0x74>)
 800098c:	2200      	movs	r2, #0
 800098e:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000990:	4b10      	ldr	r3, [pc, #64]	; (80009d4 <MX_I2C1_Init+0x74>)
 8000992:	2200      	movs	r2, #0
 8000994:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000996:	4b0f      	ldr	r3, [pc, #60]	; (80009d4 <MX_I2C1_Init+0x74>)
 8000998:	2200      	movs	r2, #0
 800099a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800099c:	480d      	ldr	r0, [pc, #52]	; (80009d4 <MX_I2C1_Init+0x74>)
 800099e:	f001 fbbf 	bl	8002120 <HAL_I2C_Init>
 80009a2:	4603      	mov	r3, r0
 80009a4:	2b00      	cmp	r3, #0
 80009a6:	d001      	beq.n	80009ac <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80009a8:	f000 fa1a 	bl	8000de0 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80009ac:	2100      	movs	r1, #0
 80009ae:	4809      	ldr	r0, [pc, #36]	; (80009d4 <MX_I2C1_Init+0x74>)
 80009b0:	f002 fc79 	bl	80032a6 <HAL_I2CEx_ConfigAnalogFilter>
 80009b4:	4603      	mov	r3, r0
 80009b6:	2b00      	cmp	r3, #0
 80009b8:	d001      	beq.n	80009be <MX_I2C1_Init+0x5e>
  {
    Error_Handler();
 80009ba:	f000 fa11 	bl	8000de0 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80009be:	2100      	movs	r1, #0
 80009c0:	4804      	ldr	r0, [pc, #16]	; (80009d4 <MX_I2C1_Init+0x74>)
 80009c2:	f002 fcac 	bl	800331e <HAL_I2CEx_ConfigDigitalFilter>
 80009c6:	4603      	mov	r3, r0
 80009c8:	2b00      	cmp	r3, #0
 80009ca:	d001      	beq.n	80009d0 <MX_I2C1_Init+0x70>
  {
    Error_Handler();
 80009cc:	f000 fa08 	bl	8000de0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80009d0:	bf00      	nop
 80009d2:	bd80      	pop	{r7, pc}
 80009d4:	200002b4 	.word	0x200002b4
 80009d8:	40005400 	.word	0x40005400
 80009dc:	000186a0 	.word	0x000186a0

080009e0 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 80009e0:	b580      	push	{r7, lr}
 80009e2:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80009e4:	4b11      	ldr	r3, [pc, #68]	; (8000a2c <MX_USART3_UART_Init+0x4c>)
 80009e6:	4a12      	ldr	r2, [pc, #72]	; (8000a30 <MX_USART3_UART_Init+0x50>)
 80009e8:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80009ea:	4b10      	ldr	r3, [pc, #64]	; (8000a2c <MX_USART3_UART_Init+0x4c>)
 80009ec:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80009f0:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80009f2:	4b0e      	ldr	r3, [pc, #56]	; (8000a2c <MX_USART3_UART_Init+0x4c>)
 80009f4:	2200      	movs	r2, #0
 80009f6:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80009f8:	4b0c      	ldr	r3, [pc, #48]	; (8000a2c <MX_USART3_UART_Init+0x4c>)
 80009fa:	2200      	movs	r2, #0
 80009fc:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80009fe:	4b0b      	ldr	r3, [pc, #44]	; (8000a2c <MX_USART3_UART_Init+0x4c>)
 8000a00:	2200      	movs	r2, #0
 8000a02:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000a04:	4b09      	ldr	r3, [pc, #36]	; (8000a2c <MX_USART3_UART_Init+0x4c>)
 8000a06:	220c      	movs	r2, #12
 8000a08:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000a0a:	4b08      	ldr	r3, [pc, #32]	; (8000a2c <MX_USART3_UART_Init+0x4c>)
 8000a0c:	2200      	movs	r2, #0
 8000a0e:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000a10:	4b06      	ldr	r3, [pc, #24]	; (8000a2c <MX_USART3_UART_Init+0x4c>)
 8000a12:	2200      	movs	r2, #0
 8000a14:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000a16:	4805      	ldr	r0, [pc, #20]	; (8000a2c <MX_USART3_UART_Init+0x4c>)
 8000a18:	f003 fa76 	bl	8003f08 <HAL_UART_Init>
 8000a1c:	4603      	mov	r3, r0
 8000a1e:	2b00      	cmp	r3, #0
 8000a20:	d001      	beq.n	8000a26 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8000a22:	f000 f9dd 	bl	8000de0 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000a26:	bf00      	nop
 8000a28:	bd80      	pop	{r7, pc}
 8000a2a:	bf00      	nop
 8000a2c:	20000308 	.word	0x20000308
 8000a30:	40004800 	.word	0x40004800

08000a34 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 8000a34:	b580      	push	{r7, lr}
 8000a36:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8000a38:	4b14      	ldr	r3, [pc, #80]	; (8000a8c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000a3a:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8000a3e:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 8000a40:	4b12      	ldr	r3, [pc, #72]	; (8000a8c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000a42:	2204      	movs	r2, #4
 8000a44:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8000a46:	4b11      	ldr	r3, [pc, #68]	; (8000a8c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000a48:	2202      	movs	r2, #2
 8000a4a:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8000a4c:	4b0f      	ldr	r3, [pc, #60]	; (8000a8c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000a4e:	2200      	movs	r2, #0
 8000a50:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8000a52:	4b0e      	ldr	r3, [pc, #56]	; (8000a8c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000a54:	2202      	movs	r2, #2
 8000a56:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 8000a58:	4b0c      	ldr	r3, [pc, #48]	; (8000a8c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000a5a:	2201      	movs	r2, #1
 8000a5c:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8000a5e:	4b0b      	ldr	r3, [pc, #44]	; (8000a8c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000a60:	2200      	movs	r2, #0
 8000a62:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8000a64:	4b09      	ldr	r3, [pc, #36]	; (8000a8c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000a66:	2200      	movs	r2, #0
 8000a68:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8000a6a:	4b08      	ldr	r3, [pc, #32]	; (8000a8c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000a6c:	2201      	movs	r2, #1
 8000a6e:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8000a70:	4b06      	ldr	r3, [pc, #24]	; (8000a8c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000a72:	2200      	movs	r2, #0
 8000a74:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8000a76:	4805      	ldr	r0, [pc, #20]	; (8000a8c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000a78:	f002 fc90 	bl	800339c <HAL_PCD_Init>
 8000a7c:	4603      	mov	r3, r0
 8000a7e:	2b00      	cmp	r3, #0
 8000a80:	d001      	beq.n	8000a86 <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 8000a82:	f000 f9ad 	bl	8000de0 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8000a86:	bf00      	nop
 8000a88:	bd80      	pop	{r7, pc}
 8000a8a:	bf00      	nop
 8000a8c:	2000034c 	.word	0x2000034c

08000a90 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000a90:	b580      	push	{r7, lr}
 8000a92:	b08c      	sub	sp, #48	; 0x30
 8000a94:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a96:	f107 031c 	add.w	r3, r7, #28
 8000a9a:	2200      	movs	r2, #0
 8000a9c:	601a      	str	r2, [r3, #0]
 8000a9e:	605a      	str	r2, [r3, #4]
 8000aa0:	609a      	str	r2, [r3, #8]
 8000aa2:	60da      	str	r2, [r3, #12]
 8000aa4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000aa6:	2300      	movs	r3, #0
 8000aa8:	61bb      	str	r3, [r7, #24]
 8000aaa:	4b56      	ldr	r3, [pc, #344]	; (8000c04 <MX_GPIO_Init+0x174>)
 8000aac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000aae:	4a55      	ldr	r2, [pc, #340]	; (8000c04 <MX_GPIO_Init+0x174>)
 8000ab0:	f043 0304 	orr.w	r3, r3, #4
 8000ab4:	6313      	str	r3, [r2, #48]	; 0x30
 8000ab6:	4b53      	ldr	r3, [pc, #332]	; (8000c04 <MX_GPIO_Init+0x174>)
 8000ab8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000aba:	f003 0304 	and.w	r3, r3, #4
 8000abe:	61bb      	str	r3, [r7, #24]
 8000ac0:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000ac2:	2300      	movs	r3, #0
 8000ac4:	617b      	str	r3, [r7, #20]
 8000ac6:	4b4f      	ldr	r3, [pc, #316]	; (8000c04 <MX_GPIO_Init+0x174>)
 8000ac8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000aca:	4a4e      	ldr	r2, [pc, #312]	; (8000c04 <MX_GPIO_Init+0x174>)
 8000acc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000ad0:	6313      	str	r3, [r2, #48]	; 0x30
 8000ad2:	4b4c      	ldr	r3, [pc, #304]	; (8000c04 <MX_GPIO_Init+0x174>)
 8000ad4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ad6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000ada:	617b      	str	r3, [r7, #20]
 8000adc:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ade:	2300      	movs	r3, #0
 8000ae0:	613b      	str	r3, [r7, #16]
 8000ae2:	4b48      	ldr	r3, [pc, #288]	; (8000c04 <MX_GPIO_Init+0x174>)
 8000ae4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ae6:	4a47      	ldr	r2, [pc, #284]	; (8000c04 <MX_GPIO_Init+0x174>)
 8000ae8:	f043 0301 	orr.w	r3, r3, #1
 8000aec:	6313      	str	r3, [r2, #48]	; 0x30
 8000aee:	4b45      	ldr	r3, [pc, #276]	; (8000c04 <MX_GPIO_Init+0x174>)
 8000af0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000af2:	f003 0301 	and.w	r3, r3, #1
 8000af6:	613b      	str	r3, [r7, #16]
 8000af8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000afa:	2300      	movs	r3, #0
 8000afc:	60fb      	str	r3, [r7, #12]
 8000afe:	4b41      	ldr	r3, [pc, #260]	; (8000c04 <MX_GPIO_Init+0x174>)
 8000b00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b02:	4a40      	ldr	r2, [pc, #256]	; (8000c04 <MX_GPIO_Init+0x174>)
 8000b04:	f043 0302 	orr.w	r3, r3, #2
 8000b08:	6313      	str	r3, [r2, #48]	; 0x30
 8000b0a:	4b3e      	ldr	r3, [pc, #248]	; (8000c04 <MX_GPIO_Init+0x174>)
 8000b0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b0e:	f003 0302 	and.w	r3, r3, #2
 8000b12:	60fb      	str	r3, [r7, #12]
 8000b14:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000b16:	2300      	movs	r3, #0
 8000b18:	60bb      	str	r3, [r7, #8]
 8000b1a:	4b3a      	ldr	r3, [pc, #232]	; (8000c04 <MX_GPIO_Init+0x174>)
 8000b1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b1e:	4a39      	ldr	r2, [pc, #228]	; (8000c04 <MX_GPIO_Init+0x174>)
 8000b20:	f043 0308 	orr.w	r3, r3, #8
 8000b24:	6313      	str	r3, [r2, #48]	; 0x30
 8000b26:	4b37      	ldr	r3, [pc, #220]	; (8000c04 <MX_GPIO_Init+0x174>)
 8000b28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b2a:	f003 0308 	and.w	r3, r3, #8
 8000b2e:	60bb      	str	r3, [r7, #8]
 8000b30:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000b32:	2300      	movs	r3, #0
 8000b34:	607b      	str	r3, [r7, #4]
 8000b36:	4b33      	ldr	r3, [pc, #204]	; (8000c04 <MX_GPIO_Init+0x174>)
 8000b38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b3a:	4a32      	ldr	r2, [pc, #200]	; (8000c04 <MX_GPIO_Init+0x174>)
 8000b3c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000b40:	6313      	str	r3, [r2, #48]	; 0x30
 8000b42:	4b30      	ldr	r3, [pc, #192]	; (8000c04 <MX_GPIO_Init+0x174>)
 8000b44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b46:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000b4a:	607b      	str	r3, [r7, #4]
 8000b4c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8000b4e:	2200      	movs	r2, #0
 8000b50:	f244 0181 	movw	r1, #16513	; 0x4081
 8000b54:	482c      	ldr	r0, [pc, #176]	; (8000c08 <MX_GPIO_Init+0x178>)
 8000b56:	f001 fac9 	bl	80020ec <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8000b5a:	2200      	movs	r2, #0
 8000b5c:	2140      	movs	r1, #64	; 0x40
 8000b5e:	482b      	ldr	r0, [pc, #172]	; (8000c0c <MX_GPIO_Init+0x17c>)
 8000b60:	f001 fac4 	bl	80020ec <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_10|GPIO_PIN_11, GPIO_PIN_RESET);
 8000b64:	2200      	movs	r2, #0
 8000b66:	f44f 6140 	mov.w	r1, #3072	; 0xc00
 8000b6a:	4829      	ldr	r0, [pc, #164]	; (8000c10 <MX_GPIO_Init+0x180>)
 8000b6c:	f001 fabe 	bl	80020ec <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 8000b70:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000b74:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000b76:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000b7a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b7c:	2300      	movs	r3, #0
 8000b7e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8000b80:	f107 031c 	add.w	r3, r7, #28
 8000b84:	4619      	mov	r1, r3
 8000b86:	4822      	ldr	r0, [pc, #136]	; (8000c10 <MX_GPIO_Init+0x180>)
 8000b88:	f001 f904 	bl	8001d94 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 8000b8c:	f244 0381 	movw	r3, #16513	; 0x4081
 8000b90:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b92:	2301      	movs	r3, #1
 8000b94:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b96:	2300      	movs	r3, #0
 8000b98:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b9a:	2300      	movs	r3, #0
 8000b9c:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b9e:	f107 031c 	add.w	r3, r7, #28
 8000ba2:	4619      	mov	r1, r3
 8000ba4:	4818      	ldr	r0, [pc, #96]	; (8000c08 <MX_GPIO_Init+0x178>)
 8000ba6:	f001 f8f5 	bl	8001d94 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8000baa:	2340      	movs	r3, #64	; 0x40
 8000bac:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000bae:	2301      	movs	r3, #1
 8000bb0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bb2:	2300      	movs	r3, #0
 8000bb4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bb6:	2300      	movs	r3, #0
 8000bb8:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000bba:	f107 031c 	add.w	r3, r7, #28
 8000bbe:	4619      	mov	r1, r3
 8000bc0:	4812      	ldr	r0, [pc, #72]	; (8000c0c <MX_GPIO_Init+0x17c>)
 8000bc2:	f001 f8e7 	bl	8001d94 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8000bc6:	2380      	movs	r3, #128	; 0x80
 8000bc8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000bca:	2300      	movs	r3, #0
 8000bcc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bce:	2300      	movs	r3, #0
 8000bd0:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000bd2:	f107 031c 	add.w	r3, r7, #28
 8000bd6:	4619      	mov	r1, r3
 8000bd8:	480c      	ldr	r0, [pc, #48]	; (8000c0c <MX_GPIO_Init+0x17c>)
 8000bda:	f001 f8db 	bl	8001d94 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC10 PC11 */
  GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8000bde:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8000be2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000be4:	2301      	movs	r3, #1
 8000be6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000be8:	2300      	movs	r3, #0
 8000bea:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bec:	2300      	movs	r3, #0
 8000bee:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000bf0:	f107 031c 	add.w	r3, r7, #28
 8000bf4:	4619      	mov	r1, r3
 8000bf6:	4806      	ldr	r0, [pc, #24]	; (8000c10 <MX_GPIO_Init+0x180>)
 8000bf8:	f001 f8cc 	bl	8001d94 <HAL_GPIO_Init>

}
 8000bfc:	bf00      	nop
 8000bfe:	3730      	adds	r7, #48	; 0x30
 8000c00:	46bd      	mov	sp, r7
 8000c02:	bd80      	pop	{r7, pc}
 8000c04:	40023800 	.word	0x40023800
 8000c08:	40020400 	.word	0x40020400
 8000c0c:	40021800 	.word	0x40021800
 8000c10:	40020800 	.word	0x40020800

08000c14 <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8000c14:	b580      	push	{r7, lr}
 8000c16:	b088      	sub	sp, #32
 8000c18:	af00      	add	r7, sp, #0
 8000c1a:	6078      	str	r0, [r7, #4]

	char *arg;
	//char *temp = strdup(addrhex);
	char *temp1 = strdup(addrhex);
 8000c1c:	4862      	ldr	r0, [pc, #392]	; (8000da8 <HAL_UART_RxCpltCallback+0x194>)
 8000c1e:	f004 fd51 	bl	80056c4 <strdup>
 8000c22:	4603      	mov	r3, r0
 8000c24:	617b      	str	r3, [r7, #20]
	char *temp2 = strdup(addrhex);
 8000c26:	4860      	ldr	r0, [pc, #384]	; (8000da8 <HAL_UART_RxCpltCallback+0x194>)
 8000c28:	f004 fd4c 	bl	80056c4 <strdup>
 8000c2c:	4603      	mov	r3, r0
 8000c2e:	613b      	str	r3, [r7, #16]


	if(!(strncmp(testReceiveData,"W",1)))
 8000c30:	4b5e      	ldr	r3, [pc, #376]	; (8000dac <HAL_UART_RxCpltCallback+0x198>)
 8000c32:	781a      	ldrb	r2, [r3, #0]
 8000c34:	4b5e      	ldr	r3, [pc, #376]	; (8000db0 <HAL_UART_RxCpltCallback+0x19c>)
 8000c36:	781b      	ldrb	r3, [r3, #0]
 8000c38:	1ad3      	subs	r3, r2, r3
 8000c3a:	2b00      	cmp	r3, #0
 8000c3c:	d103      	bne.n	8000c46 <HAL_UART_RxCpltCallback+0x32>
		writeFlag = 1;
 8000c3e:	4b5d      	ldr	r3, [pc, #372]	; (8000db4 <HAL_UART_RxCpltCallback+0x1a0>)
 8000c40:	2201      	movs	r2, #1
 8000c42:	601a      	str	r2, [r3, #0]
 8000c44:	e002      	b.n	8000c4c <HAL_UART_RxCpltCallback+0x38>
	else
		writeFlag = 0;
 8000c46:	4b5b      	ldr	r3, [pc, #364]	; (8000db4 <HAL_UART_RxCpltCallback+0x1a0>)
 8000c48:	2200      	movs	r2, #0
 8000c4a:	601a      	str	r2, [r3, #0]
	if(!(strncmp(testReceiveData,"R",1)))
 8000c4c:	4b57      	ldr	r3, [pc, #348]	; (8000dac <HAL_UART_RxCpltCallback+0x198>)
 8000c4e:	781a      	ldrb	r2, [r3, #0]
 8000c50:	4b59      	ldr	r3, [pc, #356]	; (8000db8 <HAL_UART_RxCpltCallback+0x1a4>)
 8000c52:	781b      	ldrb	r3, [r3, #0]
 8000c54:	1ad3      	subs	r3, r2, r3
 8000c56:	2b00      	cmp	r3, #0
 8000c58:	d103      	bne.n	8000c62 <HAL_UART_RxCpltCallback+0x4e>
		readFlag = 1;
 8000c5a:	4b58      	ldr	r3, [pc, #352]	; (8000dbc <HAL_UART_RxCpltCallback+0x1a8>)
 8000c5c:	2201      	movs	r2, #1
 8000c5e:	601a      	str	r2, [r3, #0]
 8000c60:	e002      	b.n	8000c68 <HAL_UART_RxCpltCallback+0x54>
	else
		readFlag = 0;
 8000c62:	4b56      	ldr	r3, [pc, #344]	; (8000dbc <HAL_UART_RxCpltCallback+0x1a8>)
 8000c64:	2200      	movs	r2, #0
 8000c66:	601a      	str	r2, [r3, #0]
	if(!(strncmp(testReceiveData,"C",1)))
 8000c68:	4b50      	ldr	r3, [pc, #320]	; (8000dac <HAL_UART_RxCpltCallback+0x198>)
 8000c6a:	781a      	ldrb	r2, [r3, #0]
 8000c6c:	4b54      	ldr	r3, [pc, #336]	; (8000dc0 <HAL_UART_RxCpltCallback+0x1ac>)
 8000c6e:	781b      	ldrb	r3, [r3, #0]
 8000c70:	1ad3      	subs	r3, r2, r3
 8000c72:	2b00      	cmp	r3, #0
 8000c74:	d103      	bne.n	8000c7e <HAL_UART_RxCpltCallback+0x6a>
		clearFlag = 1;
 8000c76:	4b53      	ldr	r3, [pc, #332]	; (8000dc4 <HAL_UART_RxCpltCallback+0x1b0>)
 8000c78:	2201      	movs	r2, #1
 8000c7a:	601a      	str	r2, [r3, #0]
 8000c7c:	e002      	b.n	8000c84 <HAL_UART_RxCpltCallback+0x70>
	else
		clearFlag = 0;
 8000c7e:	4b51      	ldr	r3, [pc, #324]	; (8000dc4 <HAL_UART_RxCpltCallback+0x1b0>)
 8000c80:	2200      	movs	r2, #0
 8000c82:	601a      	str	r2, [r3, #0]


	if(writeFlag)
 8000c84:	4b4b      	ldr	r3, [pc, #300]	; (8000db4 <HAL_UART_RxCpltCallback+0x1a0>)
 8000c86:	681b      	ldr	r3, [r3, #0]
 8000c88:	2b00      	cmp	r3, #0
 8000c8a:	d025      	beq.n	8000cd8 <HAL_UART_RxCpltCallback+0xc4>
	{
		arg = strchr(testReceiveData, ',');
 8000c8c:	212c      	movs	r1, #44	; 0x2c
 8000c8e:	4847      	ldr	r0, [pc, #284]	; (8000dac <HAL_UART_RxCpltCallback+0x198>)
 8000c90:	f004 fd03 	bl	800569a <strchr>
 8000c94:	61f8      	str	r0, [r7, #28]
		if (arg != NULL)
 8000c96:	69fb      	ldr	r3, [r7, #28]
 8000c98:	2b00      	cmp	r3, #0
 8000c9a:	d002      	beq.n	8000ca2 <HAL_UART_RxCpltCallback+0x8e>
			arg++;
 8000c9c:	69fb      	ldr	r3, [r7, #28]
 8000c9e:	3301      	adds	r3, #1
 8000ca0:	61fb      	str	r3, [r7, #28]
		else
			;
		strcpy(test, arg);
 8000ca2:	69f9      	ldr	r1, [r7, #28]
 8000ca4:	4848      	ldr	r0, [pc, #288]	; (8000dc8 <HAL_UART_RxCpltCallback+0x1b4>)
 8000ca6:	f004 fd05 	bl	80056b4 <strcpy>
		removeChar(test, ',');
 8000caa:	212c      	movs	r1, #44	; 0x2c
 8000cac:	4846      	ldr	r0, [pc, #280]	; (8000dc8 <HAL_UART_RxCpltCallback+0x1b4>)
 8000cae:	f7ff fc27 	bl	8000500 <removeChar>
		//removeChar(test, '\r');
		//removeChar(test, '\n');

		for(int i = 2; i < sizeof(memAddrArr); i++)
 8000cb2:	2302      	movs	r3, #2
 8000cb4:	61bb      	str	r3, [r7, #24]
 8000cb6:	e00b      	b.n	8000cd0 <HAL_UART_RxCpltCallback+0xbc>
		{
			memAddrArr[i] = test[i-2];
 8000cb8:	69bb      	ldr	r3, [r7, #24]
 8000cba:	3b02      	subs	r3, #2
 8000cbc:	4a42      	ldr	r2, [pc, #264]	; (8000dc8 <HAL_UART_RxCpltCallback+0x1b4>)
 8000cbe:	5cd1      	ldrb	r1, [r2, r3]
 8000cc0:	4a42      	ldr	r2, [pc, #264]	; (8000dcc <HAL_UART_RxCpltCallback+0x1b8>)
 8000cc2:	69bb      	ldr	r3, [r7, #24]
 8000cc4:	4413      	add	r3, r2
 8000cc6:	460a      	mov	r2, r1
 8000cc8:	701a      	strb	r2, [r3, #0]
		for(int i = 2; i < sizeof(memAddrArr); i++)
 8000cca:	69bb      	ldr	r3, [r7, #24]
 8000ccc:	3301      	adds	r3, #1
 8000cce:	61bb      	str	r3, [r7, #24]
 8000cd0:	69bb      	ldr	r3, [r7, #24]
 8000cd2:	2b0b      	cmp	r3, #11
 8000cd4:	d9f0      	bls.n	8000cb8 <HAL_UART_RxCpltCallback+0xa4>
 8000cd6:	e018      	b.n	8000d0a <HAL_UART_RxCpltCallback+0xf6>
		}

	}

	else if(clearFlag)
 8000cd8:	4b3a      	ldr	r3, [pc, #232]	; (8000dc4 <HAL_UART_RxCpltCallback+0x1b0>)
 8000cda:	681b      	ldr	r3, [r3, #0]
 8000cdc:	2b00      	cmp	r3, #0
 8000cde:	d00a      	beq.n	8000cf6 <HAL_UART_RxCpltCallback+0xe2>
	{
		memset(test,0xff,sizeof(test));
 8000ce0:	220d      	movs	r2, #13
 8000ce2:	21ff      	movs	r1, #255	; 0xff
 8000ce4:	4838      	ldr	r0, [pc, #224]	; (8000dc8 <HAL_UART_RxCpltCallback+0x1b4>)
 8000ce6:	f004 fcc1 	bl	800566c <memset>
		memset(memAddrArr,0xff,sizeof(memAddrArr));
 8000cea:	220c      	movs	r2, #12
 8000cec:	21ff      	movs	r1, #255	; 0xff
 8000cee:	4837      	ldr	r0, [pc, #220]	; (8000dcc <HAL_UART_RxCpltCallback+0x1b8>)
 8000cf0:	f004 fcbc 	bl	800566c <memset>
 8000cf4:	e009      	b.n	8000d0a <HAL_UART_RxCpltCallback+0xf6>
	}

	else
	{
		memset(test,0,sizeof(test));
 8000cf6:	220d      	movs	r2, #13
 8000cf8:	2100      	movs	r1, #0
 8000cfa:	4833      	ldr	r0, [pc, #204]	; (8000dc8 <HAL_UART_RxCpltCallback+0x1b4>)
 8000cfc:	f004 fcb6 	bl	800566c <memset>
		memset(memAddrArr,0,sizeof(memAddrArr));
 8000d00:	220c      	movs	r2, #12
 8000d02:	2100      	movs	r1, #0
 8000d04:	4831      	ldr	r0, [pc, #196]	; (8000dcc <HAL_UART_RxCpltCallback+0x1b8>)
 8000d06:	f004 fcb1 	bl	800566c <memset>
	 * 	char addr[4] = {0};

	//slice(testReceiveData, addr, 1, 5);
	strcat(temp,addr);
	 */
	char addr1[2] = {0};
 8000d0a:	2300      	movs	r3, #0
 8000d0c:	81bb      	strh	r3, [r7, #12]
	char addr2[2] = {0};
 8000d0e:	2300      	movs	r3, #0
 8000d10:	813b      	strh	r3, [r7, #8]

	//slice(testReceiveData, addr, 1, 5);
	slice(testReceiveData, addr1, 1, 3);
 8000d12:	f107 010c 	add.w	r1, r7, #12
 8000d16:	2303      	movs	r3, #3
 8000d18:	2201      	movs	r2, #1
 8000d1a:	4824      	ldr	r0, [pc, #144]	; (8000dac <HAL_UART_RxCpltCallback+0x198>)
 8000d1c:	f7ff fc2a 	bl	8000574 <slice>
	slice(testReceiveData, addr2, 3, 5);
 8000d20:	f107 0108 	add.w	r1, r7, #8
 8000d24:	2305      	movs	r3, #5
 8000d26:	2203      	movs	r2, #3
 8000d28:	4820      	ldr	r0, [pc, #128]	; (8000dac <HAL_UART_RxCpltCallback+0x198>)
 8000d2a:	f7ff fc23 	bl	8000574 <slice>
	//strcat(temp,addr);
	strcat(temp1,addr1);
 8000d2e:	f107 030c 	add.w	r3, r7, #12
 8000d32:	4619      	mov	r1, r3
 8000d34:	6978      	ldr	r0, [r7, #20]
 8000d36:	f004 fca1 	bl	800567c <strcat>
	strcat(temp2,addr2);
 8000d3a:	f107 0308 	add.w	r3, r7, #8
 8000d3e:	4619      	mov	r1, r3
 8000d40:	6938      	ldr	r0, [r7, #16]
 8000d42:	f004 fc9b 	bl	800567c <strcat>

	//memAddr = (int)strtol(temp, NULL, 16);
	memHighAddr = (int)strtol(temp1, NULL, 16);
 8000d46:	2210      	movs	r2, #16
 8000d48:	2100      	movs	r1, #0
 8000d4a:	6978      	ldr	r0, [r7, #20]
 8000d4c:	f004 fd6c 	bl	8005828 <strtol>
 8000d50:	4603      	mov	r3, r0
 8000d52:	b2da      	uxtb	r2, r3
 8000d54:	4b1e      	ldr	r3, [pc, #120]	; (8000dd0 <HAL_UART_RxCpltCallback+0x1bc>)
 8000d56:	701a      	strb	r2, [r3, #0]
	memLowAddr = (int)strtol(temp2, NULL, 16);
 8000d58:	2210      	movs	r2, #16
 8000d5a:	2100      	movs	r1, #0
 8000d5c:	6938      	ldr	r0, [r7, #16]
 8000d5e:	f004 fd63 	bl	8005828 <strtol>
 8000d62:	4603      	mov	r3, r0
 8000d64:	b2da      	uxtb	r2, r3
 8000d66:	4b1b      	ldr	r3, [pc, #108]	; (8000dd4 <HAL_UART_RxCpltCallback+0x1c0>)
 8000d68:	701a      	strb	r2, [r3, #0]

	memAddrArr[0] = memHighAddr;
 8000d6a:	4b19      	ldr	r3, [pc, #100]	; (8000dd0 <HAL_UART_RxCpltCallback+0x1bc>)
 8000d6c:	781a      	ldrb	r2, [r3, #0]
 8000d6e:	4b17      	ldr	r3, [pc, #92]	; (8000dcc <HAL_UART_RxCpltCallback+0x1b8>)
 8000d70:	701a      	strb	r2, [r3, #0]
	memAddrArr[1] = memLowAddr;
 8000d72:	4b18      	ldr	r3, [pc, #96]	; (8000dd4 <HAL_UART_RxCpltCallback+0x1c0>)
 8000d74:	781a      	ldrb	r2, [r3, #0]
 8000d76:	4b15      	ldr	r3, [pc, #84]	; (8000dcc <HAL_UART_RxCpltCallback+0x1b8>)
 8000d78:	705a      	strb	r2, [r3, #1]

	//MY_UART_Transmit(&huart3, temp, strlen(temp), 100);;
	MY_UART_Transmit(&huart3, testReceiveData, strlen(testReceiveData), 100);
 8000d7a:	480c      	ldr	r0, [pc, #48]	; (8000dac <HAL_UART_RxCpltCallback+0x198>)
 8000d7c:	f7ff fa36 	bl	80001ec <strlen>
 8000d80:	4603      	mov	r3, r0
 8000d82:	b29a      	uxth	r2, r3
 8000d84:	2364      	movs	r3, #100	; 0x64
 8000d86:	4909      	ldr	r1, [pc, #36]	; (8000dac <HAL_UART_RxCpltCallback+0x198>)
 8000d88:	4813      	ldr	r0, [pc, #76]	; (8000dd8 <HAL_UART_RxCpltCallback+0x1c4>)
 8000d8a:	f7ff fc09 	bl	80005a0 <MY_UART_Transmit>
	memset(testReceiveData,0,sizeof(testReceiveData));
 8000d8e:	223c      	movs	r2, #60	; 0x3c
 8000d90:	2100      	movs	r1, #0
 8000d92:	4806      	ldr	r0, [pc, #24]	; (8000dac <HAL_UART_RxCpltCallback+0x198>)
 8000d94:	f004 fc6a 	bl	800566c <memset>
	i2cFlag = 1;
 8000d98:	4b10      	ldr	r3, [pc, #64]	; (8000ddc <HAL_UART_RxCpltCallback+0x1c8>)
 8000d9a:	2201      	movs	r2, #1
 8000d9c:	601a      	str	r2, [r3, #0]

}
 8000d9e:	bf00      	nop
 8000da0:	3720      	adds	r7, #32
 8000da2:	46bd      	mov	sp, r7
 8000da4:	bd80      	pop	{r7, pc}
 8000da6:	bf00      	nop
 8000da8:	08005a44 	.word	0x08005a44
 8000dac:	20000858 	.word	0x20000858
 8000db0:	08005a38 	.word	0x08005a38
 8000db4:	200008b4 	.word	0x200008b4
 8000db8:	08005a3c 	.word	0x08005a3c
 8000dbc:	200008b8 	.word	0x200008b8
 8000dc0:	08005a40 	.word	0x08005a40
 8000dc4:	200008c0 	.word	0x200008c0
 8000dc8:	20000894 	.word	0x20000894
 8000dcc:	200008a4 	.word	0x200008a4
 8000dd0:	200008a1 	.word	0x200008a1
 8000dd4:	200008a2 	.word	0x200008a2
 8000dd8:	20000308 	.word	0x20000308
 8000ddc:	200008bc 	.word	0x200008bc

08000de0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000de0:	b480      	push	{r7}
 8000de2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000de4:	b672      	cpsid	i
}
 8000de6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000de8:	e7fe      	b.n	8000de8 <Error_Handler+0x8>
	...

08000dec <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000dec:	b480      	push	{r7}
 8000dee:	b083      	sub	sp, #12
 8000df0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000df2:	2300      	movs	r3, #0
 8000df4:	607b      	str	r3, [r7, #4]
 8000df6:	4b10      	ldr	r3, [pc, #64]	; (8000e38 <HAL_MspInit+0x4c>)
 8000df8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000dfa:	4a0f      	ldr	r2, [pc, #60]	; (8000e38 <HAL_MspInit+0x4c>)
 8000dfc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000e00:	6453      	str	r3, [r2, #68]	; 0x44
 8000e02:	4b0d      	ldr	r3, [pc, #52]	; (8000e38 <HAL_MspInit+0x4c>)
 8000e04:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e06:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000e0a:	607b      	str	r3, [r7, #4]
 8000e0c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000e0e:	2300      	movs	r3, #0
 8000e10:	603b      	str	r3, [r7, #0]
 8000e12:	4b09      	ldr	r3, [pc, #36]	; (8000e38 <HAL_MspInit+0x4c>)
 8000e14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e16:	4a08      	ldr	r2, [pc, #32]	; (8000e38 <HAL_MspInit+0x4c>)
 8000e18:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000e1c:	6413      	str	r3, [r2, #64]	; 0x40
 8000e1e:	4b06      	ldr	r3, [pc, #24]	; (8000e38 <HAL_MspInit+0x4c>)
 8000e20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e22:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000e26:	603b      	str	r3, [r7, #0]
 8000e28:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000e2a:	bf00      	nop
 8000e2c:	370c      	adds	r7, #12
 8000e2e:	46bd      	mov	sp, r7
 8000e30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e34:	4770      	bx	lr
 8000e36:	bf00      	nop
 8000e38:	40023800 	.word	0x40023800

08000e3c <HAL_ETH_MspInit>:
* This function configures the hardware resources used in this example
* @param heth: ETH handle pointer
* @retval None
*/
void HAL_ETH_MspInit(ETH_HandleTypeDef* heth)
{
 8000e3c:	b580      	push	{r7, lr}
 8000e3e:	b08e      	sub	sp, #56	; 0x38
 8000e40:	af00      	add	r7, sp, #0
 8000e42:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e44:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000e48:	2200      	movs	r2, #0
 8000e4a:	601a      	str	r2, [r3, #0]
 8000e4c:	605a      	str	r2, [r3, #4]
 8000e4e:	609a      	str	r2, [r3, #8]
 8000e50:	60da      	str	r2, [r3, #12]
 8000e52:	611a      	str	r2, [r3, #16]
  if(heth->Instance==ETH)
 8000e54:	687b      	ldr	r3, [r7, #4]
 8000e56:	681b      	ldr	r3, [r3, #0]
 8000e58:	4a55      	ldr	r2, [pc, #340]	; (8000fb0 <HAL_ETH_MspInit+0x174>)
 8000e5a:	4293      	cmp	r3, r2
 8000e5c:	f040 80a4 	bne.w	8000fa8 <HAL_ETH_MspInit+0x16c>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ETH_CLK_ENABLE();
 8000e60:	2300      	movs	r3, #0
 8000e62:	623b      	str	r3, [r7, #32]
 8000e64:	4b53      	ldr	r3, [pc, #332]	; (8000fb4 <HAL_ETH_MspInit+0x178>)
 8000e66:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e68:	4a52      	ldr	r2, [pc, #328]	; (8000fb4 <HAL_ETH_MspInit+0x178>)
 8000e6a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000e6e:	6313      	str	r3, [r2, #48]	; 0x30
 8000e70:	4b50      	ldr	r3, [pc, #320]	; (8000fb4 <HAL_ETH_MspInit+0x178>)
 8000e72:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e74:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000e78:	623b      	str	r3, [r7, #32]
 8000e7a:	6a3b      	ldr	r3, [r7, #32]
 8000e7c:	2300      	movs	r3, #0
 8000e7e:	61fb      	str	r3, [r7, #28]
 8000e80:	4b4c      	ldr	r3, [pc, #304]	; (8000fb4 <HAL_ETH_MspInit+0x178>)
 8000e82:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e84:	4a4b      	ldr	r2, [pc, #300]	; (8000fb4 <HAL_ETH_MspInit+0x178>)
 8000e86:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8000e8a:	6313      	str	r3, [r2, #48]	; 0x30
 8000e8c:	4b49      	ldr	r3, [pc, #292]	; (8000fb4 <HAL_ETH_MspInit+0x178>)
 8000e8e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e90:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8000e94:	61fb      	str	r3, [r7, #28]
 8000e96:	69fb      	ldr	r3, [r7, #28]
 8000e98:	2300      	movs	r3, #0
 8000e9a:	61bb      	str	r3, [r7, #24]
 8000e9c:	4b45      	ldr	r3, [pc, #276]	; (8000fb4 <HAL_ETH_MspInit+0x178>)
 8000e9e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ea0:	4a44      	ldr	r2, [pc, #272]	; (8000fb4 <HAL_ETH_MspInit+0x178>)
 8000ea2:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8000ea6:	6313      	str	r3, [r2, #48]	; 0x30
 8000ea8:	4b42      	ldr	r3, [pc, #264]	; (8000fb4 <HAL_ETH_MspInit+0x178>)
 8000eaa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000eac:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8000eb0:	61bb      	str	r3, [r7, #24]
 8000eb2:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000eb4:	2300      	movs	r3, #0
 8000eb6:	617b      	str	r3, [r7, #20]
 8000eb8:	4b3e      	ldr	r3, [pc, #248]	; (8000fb4 <HAL_ETH_MspInit+0x178>)
 8000eba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ebc:	4a3d      	ldr	r2, [pc, #244]	; (8000fb4 <HAL_ETH_MspInit+0x178>)
 8000ebe:	f043 0304 	orr.w	r3, r3, #4
 8000ec2:	6313      	str	r3, [r2, #48]	; 0x30
 8000ec4:	4b3b      	ldr	r3, [pc, #236]	; (8000fb4 <HAL_ETH_MspInit+0x178>)
 8000ec6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ec8:	f003 0304 	and.w	r3, r3, #4
 8000ecc:	617b      	str	r3, [r7, #20]
 8000ece:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ed0:	2300      	movs	r3, #0
 8000ed2:	613b      	str	r3, [r7, #16]
 8000ed4:	4b37      	ldr	r3, [pc, #220]	; (8000fb4 <HAL_ETH_MspInit+0x178>)
 8000ed6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ed8:	4a36      	ldr	r2, [pc, #216]	; (8000fb4 <HAL_ETH_MspInit+0x178>)
 8000eda:	f043 0301 	orr.w	r3, r3, #1
 8000ede:	6313      	str	r3, [r2, #48]	; 0x30
 8000ee0:	4b34      	ldr	r3, [pc, #208]	; (8000fb4 <HAL_ETH_MspInit+0x178>)
 8000ee2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ee4:	f003 0301 	and.w	r3, r3, #1
 8000ee8:	613b      	str	r3, [r7, #16]
 8000eea:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000eec:	2300      	movs	r3, #0
 8000eee:	60fb      	str	r3, [r7, #12]
 8000ef0:	4b30      	ldr	r3, [pc, #192]	; (8000fb4 <HAL_ETH_MspInit+0x178>)
 8000ef2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ef4:	4a2f      	ldr	r2, [pc, #188]	; (8000fb4 <HAL_ETH_MspInit+0x178>)
 8000ef6:	f043 0302 	orr.w	r3, r3, #2
 8000efa:	6313      	str	r3, [r2, #48]	; 0x30
 8000efc:	4b2d      	ldr	r3, [pc, #180]	; (8000fb4 <HAL_ETH_MspInit+0x178>)
 8000efe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f00:	f003 0302 	and.w	r3, r3, #2
 8000f04:	60fb      	str	r3, [r7, #12]
 8000f06:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8000f08:	2300      	movs	r3, #0
 8000f0a:	60bb      	str	r3, [r7, #8]
 8000f0c:	4b29      	ldr	r3, [pc, #164]	; (8000fb4 <HAL_ETH_MspInit+0x178>)
 8000f0e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f10:	4a28      	ldr	r2, [pc, #160]	; (8000fb4 <HAL_ETH_MspInit+0x178>)
 8000f12:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000f16:	6313      	str	r3, [r2, #48]	; 0x30
 8000f18:	4b26      	ldr	r3, [pc, #152]	; (8000fb4 <HAL_ETH_MspInit+0x178>)
 8000f1a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f1c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000f20:	60bb      	str	r3, [r7, #8]
 8000f22:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8000f24:	2332      	movs	r3, #50	; 0x32
 8000f26:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f28:	2302      	movs	r3, #2
 8000f2a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f2c:	2300      	movs	r3, #0
 8000f2e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f30:	2303      	movs	r3, #3
 8000f32:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000f34:	230b      	movs	r3, #11
 8000f36:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000f38:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000f3c:	4619      	mov	r1, r3
 8000f3e:	481e      	ldr	r0, [pc, #120]	; (8000fb8 <HAL_ETH_MspInit+0x17c>)
 8000f40:	f000 ff28 	bl	8001d94 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8000f44:	2386      	movs	r3, #134	; 0x86
 8000f46:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f48:	2302      	movs	r3, #2
 8000f4a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f4c:	2300      	movs	r3, #0
 8000f4e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f50:	2303      	movs	r3, #3
 8000f52:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000f54:	230b      	movs	r3, #11
 8000f56:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f58:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000f5c:	4619      	mov	r1, r3
 8000f5e:	4817      	ldr	r0, [pc, #92]	; (8000fbc <HAL_ETH_MspInit+0x180>)
 8000f60:	f000 ff18 	bl	8001d94 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8000f64:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000f68:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f6a:	2302      	movs	r3, #2
 8000f6c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f6e:	2300      	movs	r3, #0
 8000f70:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f72:	2303      	movs	r3, #3
 8000f74:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000f76:	230b      	movs	r3, #11
 8000f78:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 8000f7a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000f7e:	4619      	mov	r1, r3
 8000f80:	480f      	ldr	r0, [pc, #60]	; (8000fc0 <HAL_ETH_MspInit+0x184>)
 8000f82:	f000 ff07 	bl	8001d94 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 8000f86:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8000f8a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f8c:	2302      	movs	r3, #2
 8000f8e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f90:	2300      	movs	r3, #0
 8000f92:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f94:	2303      	movs	r3, #3
 8000f96:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000f98:	230b      	movs	r3, #11
 8000f9a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000f9c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000fa0:	4619      	mov	r1, r3
 8000fa2:	4808      	ldr	r0, [pc, #32]	; (8000fc4 <HAL_ETH_MspInit+0x188>)
 8000fa4:	f000 fef6 	bl	8001d94 <HAL_GPIO_Init>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }

}
 8000fa8:	bf00      	nop
 8000faa:	3738      	adds	r7, #56	; 0x38
 8000fac:	46bd      	mov	sp, r7
 8000fae:	bd80      	pop	{r7, pc}
 8000fb0:	40028000 	.word	0x40028000
 8000fb4:	40023800 	.word	0x40023800
 8000fb8:	40020800 	.word	0x40020800
 8000fbc:	40020000 	.word	0x40020000
 8000fc0:	40020400 	.word	0x40020400
 8000fc4:	40021800 	.word	0x40021800

08000fc8 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000fc8:	b580      	push	{r7, lr}
 8000fca:	b08a      	sub	sp, #40	; 0x28
 8000fcc:	af00      	add	r7, sp, #0
 8000fce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fd0:	f107 0314 	add.w	r3, r7, #20
 8000fd4:	2200      	movs	r2, #0
 8000fd6:	601a      	str	r2, [r3, #0]
 8000fd8:	605a      	str	r2, [r3, #4]
 8000fda:	609a      	str	r2, [r3, #8]
 8000fdc:	60da      	str	r2, [r3, #12]
 8000fde:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8000fe0:	687b      	ldr	r3, [r7, #4]
 8000fe2:	681b      	ldr	r3, [r3, #0]
 8000fe4:	4a19      	ldr	r2, [pc, #100]	; (800104c <HAL_I2C_MspInit+0x84>)
 8000fe6:	4293      	cmp	r3, r2
 8000fe8:	d12c      	bne.n	8001044 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000fea:	2300      	movs	r3, #0
 8000fec:	613b      	str	r3, [r7, #16]
 8000fee:	4b18      	ldr	r3, [pc, #96]	; (8001050 <HAL_I2C_MspInit+0x88>)
 8000ff0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ff2:	4a17      	ldr	r2, [pc, #92]	; (8001050 <HAL_I2C_MspInit+0x88>)
 8000ff4:	f043 0302 	orr.w	r3, r3, #2
 8000ff8:	6313      	str	r3, [r2, #48]	; 0x30
 8000ffa:	4b15      	ldr	r3, [pc, #84]	; (8001050 <HAL_I2C_MspInit+0x88>)
 8000ffc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ffe:	f003 0302 	and.w	r3, r3, #2
 8001002:	613b      	str	r3, [r7, #16]
 8001004:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001006:	f44f 7340 	mov.w	r3, #768	; 0x300
 800100a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800100c:	2312      	movs	r3, #18
 800100e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001010:	2301      	movs	r3, #1
 8001012:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001014:	2303      	movs	r3, #3
 8001016:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001018:	2304      	movs	r3, #4
 800101a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800101c:	f107 0314 	add.w	r3, r7, #20
 8001020:	4619      	mov	r1, r3
 8001022:	480c      	ldr	r0, [pc, #48]	; (8001054 <HAL_I2C_MspInit+0x8c>)
 8001024:	f000 feb6 	bl	8001d94 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001028:	2300      	movs	r3, #0
 800102a:	60fb      	str	r3, [r7, #12]
 800102c:	4b08      	ldr	r3, [pc, #32]	; (8001050 <HAL_I2C_MspInit+0x88>)
 800102e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001030:	4a07      	ldr	r2, [pc, #28]	; (8001050 <HAL_I2C_MspInit+0x88>)
 8001032:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001036:	6413      	str	r3, [r2, #64]	; 0x40
 8001038:	4b05      	ldr	r3, [pc, #20]	; (8001050 <HAL_I2C_MspInit+0x88>)
 800103a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800103c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001040:	60fb      	str	r3, [r7, #12]
 8001042:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001044:	bf00      	nop
 8001046:	3728      	adds	r7, #40	; 0x28
 8001048:	46bd      	mov	sp, r7
 800104a:	bd80      	pop	{r7, pc}
 800104c:	40005400 	.word	0x40005400
 8001050:	40023800 	.word	0x40023800
 8001054:	40020400 	.word	0x40020400

08001058 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001058:	b580      	push	{r7, lr}
 800105a:	b08a      	sub	sp, #40	; 0x28
 800105c:	af00      	add	r7, sp, #0
 800105e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001060:	f107 0314 	add.w	r3, r7, #20
 8001064:	2200      	movs	r2, #0
 8001066:	601a      	str	r2, [r3, #0]
 8001068:	605a      	str	r2, [r3, #4]
 800106a:	609a      	str	r2, [r3, #8]
 800106c:	60da      	str	r2, [r3, #12]
 800106e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 8001070:	687b      	ldr	r3, [r7, #4]
 8001072:	681b      	ldr	r3, [r3, #0]
 8001074:	4a1d      	ldr	r2, [pc, #116]	; (80010ec <HAL_UART_MspInit+0x94>)
 8001076:	4293      	cmp	r3, r2
 8001078:	d134      	bne.n	80010e4 <HAL_UART_MspInit+0x8c>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 800107a:	2300      	movs	r3, #0
 800107c:	613b      	str	r3, [r7, #16]
 800107e:	4b1c      	ldr	r3, [pc, #112]	; (80010f0 <HAL_UART_MspInit+0x98>)
 8001080:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001082:	4a1b      	ldr	r2, [pc, #108]	; (80010f0 <HAL_UART_MspInit+0x98>)
 8001084:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001088:	6413      	str	r3, [r2, #64]	; 0x40
 800108a:	4b19      	ldr	r3, [pc, #100]	; (80010f0 <HAL_UART_MspInit+0x98>)
 800108c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800108e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001092:	613b      	str	r3, [r7, #16]
 8001094:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001096:	2300      	movs	r3, #0
 8001098:	60fb      	str	r3, [r7, #12]
 800109a:	4b15      	ldr	r3, [pc, #84]	; (80010f0 <HAL_UART_MspInit+0x98>)
 800109c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800109e:	4a14      	ldr	r2, [pc, #80]	; (80010f0 <HAL_UART_MspInit+0x98>)
 80010a0:	f043 0308 	orr.w	r3, r3, #8
 80010a4:	6313      	str	r3, [r2, #48]	; 0x30
 80010a6:	4b12      	ldr	r3, [pc, #72]	; (80010f0 <HAL_UART_MspInit+0x98>)
 80010a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010aa:	f003 0308 	and.w	r3, r3, #8
 80010ae:	60fb      	str	r3, [r7, #12]
 80010b0:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 80010b2:	f44f 7340 	mov.w	r3, #768	; 0x300
 80010b6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010b8:	2302      	movs	r3, #2
 80010ba:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010bc:	2300      	movs	r3, #0
 80010be:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80010c0:	2303      	movs	r3, #3
 80010c2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80010c4:	2307      	movs	r3, #7
 80010c6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80010c8:	f107 0314 	add.w	r3, r7, #20
 80010cc:	4619      	mov	r1, r3
 80010ce:	4809      	ldr	r0, [pc, #36]	; (80010f4 <HAL_UART_MspInit+0x9c>)
 80010d0:	f000 fe60 	bl	8001d94 <HAL_GPIO_Init>

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 80010d4:	2200      	movs	r2, #0
 80010d6:	2100      	movs	r1, #0
 80010d8:	2027      	movs	r0, #39	; 0x27
 80010da:	f000 fa7e 	bl	80015da <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 80010de:	2027      	movs	r0, #39	; 0x27
 80010e0:	f000 fa97 	bl	8001612 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 80010e4:	bf00      	nop
 80010e6:	3728      	adds	r7, #40	; 0x28
 80010e8:	46bd      	mov	sp, r7
 80010ea:	bd80      	pop	{r7, pc}
 80010ec:	40004800 	.word	0x40004800
 80010f0:	40023800 	.word	0x40023800
 80010f4:	40020c00 	.word	0x40020c00

080010f8 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 80010f8:	b580      	push	{r7, lr}
 80010fa:	b08a      	sub	sp, #40	; 0x28
 80010fc:	af00      	add	r7, sp, #0
 80010fe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001100:	f107 0314 	add.w	r3, r7, #20
 8001104:	2200      	movs	r2, #0
 8001106:	601a      	str	r2, [r3, #0]
 8001108:	605a      	str	r2, [r3, #4]
 800110a:	609a      	str	r2, [r3, #8]
 800110c:	60da      	str	r2, [r3, #12]
 800110e:	611a      	str	r2, [r3, #16]
  if(hpcd->Instance==USB_OTG_FS)
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	681b      	ldr	r3, [r3, #0]
 8001114:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001118:	d13f      	bne.n	800119a <HAL_PCD_MspInit+0xa2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800111a:	2300      	movs	r3, #0
 800111c:	613b      	str	r3, [r7, #16]
 800111e:	4b21      	ldr	r3, [pc, #132]	; (80011a4 <HAL_PCD_MspInit+0xac>)
 8001120:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001122:	4a20      	ldr	r2, [pc, #128]	; (80011a4 <HAL_PCD_MspInit+0xac>)
 8001124:	f043 0301 	orr.w	r3, r3, #1
 8001128:	6313      	str	r3, [r2, #48]	; 0x30
 800112a:	4b1e      	ldr	r3, [pc, #120]	; (80011a4 <HAL_PCD_MspInit+0xac>)
 800112c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800112e:	f003 0301 	and.w	r3, r3, #1
 8001132:	613b      	str	r3, [r7, #16]
 8001134:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8001136:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 800113a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800113c:	2302      	movs	r3, #2
 800113e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001140:	2300      	movs	r3, #0
 8001142:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001144:	2303      	movs	r3, #3
 8001146:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8001148:	230a      	movs	r3, #10
 800114a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800114c:	f107 0314 	add.w	r3, r7, #20
 8001150:	4619      	mov	r1, r3
 8001152:	4815      	ldr	r0, [pc, #84]	; (80011a8 <HAL_PCD_MspInit+0xb0>)
 8001154:	f000 fe1e 	bl	8001d94 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8001158:	f44f 7300 	mov.w	r3, #512	; 0x200
 800115c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800115e:	2300      	movs	r3, #0
 8001160:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001162:	2300      	movs	r3, #0
 8001164:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8001166:	f107 0314 	add.w	r3, r7, #20
 800116a:	4619      	mov	r1, r3
 800116c:	480e      	ldr	r0, [pc, #56]	; (80011a8 <HAL_PCD_MspInit+0xb0>)
 800116e:	f000 fe11 	bl	8001d94 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8001172:	4b0c      	ldr	r3, [pc, #48]	; (80011a4 <HAL_PCD_MspInit+0xac>)
 8001174:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001176:	4a0b      	ldr	r2, [pc, #44]	; (80011a4 <HAL_PCD_MspInit+0xac>)
 8001178:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800117c:	6353      	str	r3, [r2, #52]	; 0x34
 800117e:	2300      	movs	r3, #0
 8001180:	60fb      	str	r3, [r7, #12]
 8001182:	4b08      	ldr	r3, [pc, #32]	; (80011a4 <HAL_PCD_MspInit+0xac>)
 8001184:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001186:	4a07      	ldr	r2, [pc, #28]	; (80011a4 <HAL_PCD_MspInit+0xac>)
 8001188:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800118c:	6453      	str	r3, [r2, #68]	; 0x44
 800118e:	4b05      	ldr	r3, [pc, #20]	; (80011a4 <HAL_PCD_MspInit+0xac>)
 8001190:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001192:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001196:	60fb      	str	r3, [r7, #12]
 8001198:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 800119a:	bf00      	nop
 800119c:	3728      	adds	r7, #40	; 0x28
 800119e:	46bd      	mov	sp, r7
 80011a0:	bd80      	pop	{r7, pc}
 80011a2:	bf00      	nop
 80011a4:	40023800 	.word	0x40023800
 80011a8:	40020000 	.word	0x40020000

080011ac <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80011ac:	b480      	push	{r7}
 80011ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80011b0:	e7fe      	b.n	80011b0 <NMI_Handler+0x4>

080011b2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80011b2:	b480      	push	{r7}
 80011b4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80011b6:	e7fe      	b.n	80011b6 <HardFault_Handler+0x4>

080011b8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80011b8:	b480      	push	{r7}
 80011ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80011bc:	e7fe      	b.n	80011bc <MemManage_Handler+0x4>

080011be <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80011be:	b480      	push	{r7}
 80011c0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80011c2:	e7fe      	b.n	80011c2 <BusFault_Handler+0x4>

080011c4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80011c4:	b480      	push	{r7}
 80011c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80011c8:	e7fe      	b.n	80011c8 <UsageFault_Handler+0x4>

080011ca <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80011ca:	b480      	push	{r7}
 80011cc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80011ce:	bf00      	nop
 80011d0:	46bd      	mov	sp, r7
 80011d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011d6:	4770      	bx	lr

080011d8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80011d8:	b480      	push	{r7}
 80011da:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80011dc:	bf00      	nop
 80011de:	46bd      	mov	sp, r7
 80011e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011e4:	4770      	bx	lr

080011e6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80011e6:	b480      	push	{r7}
 80011e8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80011ea:	bf00      	nop
 80011ec:	46bd      	mov	sp, r7
 80011ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011f2:	4770      	bx	lr

080011f4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80011f4:	b580      	push	{r7, lr}
 80011f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80011f8:	f000 f8d0 	bl	800139c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80011fc:	bf00      	nop
 80011fe:	bd80      	pop	{r7, pc}

08001200 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8001200:	b580      	push	{r7, lr}
 8001202:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8001204:	4802      	ldr	r0, [pc, #8]	; (8001210 <USART3_IRQHandler+0x10>)
 8001206:	f002 ff8f 	bl	8004128 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 800120a:	bf00      	nop
 800120c:	bd80      	pop	{r7, pc}
 800120e:	bf00      	nop
 8001210:	20000308 	.word	0x20000308

08001214 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001214:	b580      	push	{r7, lr}
 8001216:	b086      	sub	sp, #24
 8001218:	af00      	add	r7, sp, #0
 800121a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800121c:	4a14      	ldr	r2, [pc, #80]	; (8001270 <_sbrk+0x5c>)
 800121e:	4b15      	ldr	r3, [pc, #84]	; (8001274 <_sbrk+0x60>)
 8001220:	1ad3      	subs	r3, r2, r3
 8001222:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001224:	697b      	ldr	r3, [r7, #20]
 8001226:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001228:	4b13      	ldr	r3, [pc, #76]	; (8001278 <_sbrk+0x64>)
 800122a:	681b      	ldr	r3, [r3, #0]
 800122c:	2b00      	cmp	r3, #0
 800122e:	d102      	bne.n	8001236 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001230:	4b11      	ldr	r3, [pc, #68]	; (8001278 <_sbrk+0x64>)
 8001232:	4a12      	ldr	r2, [pc, #72]	; (800127c <_sbrk+0x68>)
 8001234:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001236:	4b10      	ldr	r3, [pc, #64]	; (8001278 <_sbrk+0x64>)
 8001238:	681a      	ldr	r2, [r3, #0]
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	4413      	add	r3, r2
 800123e:	693a      	ldr	r2, [r7, #16]
 8001240:	429a      	cmp	r2, r3
 8001242:	d207      	bcs.n	8001254 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001244:	f004 f9e8 	bl	8005618 <__errno>
 8001248:	4603      	mov	r3, r0
 800124a:	220c      	movs	r2, #12
 800124c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800124e:	f04f 33ff 	mov.w	r3, #4294967295
 8001252:	e009      	b.n	8001268 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001254:	4b08      	ldr	r3, [pc, #32]	; (8001278 <_sbrk+0x64>)
 8001256:	681b      	ldr	r3, [r3, #0]
 8001258:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800125a:	4b07      	ldr	r3, [pc, #28]	; (8001278 <_sbrk+0x64>)
 800125c:	681a      	ldr	r2, [r3, #0]
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	4413      	add	r3, r2
 8001262:	4a05      	ldr	r2, [pc, #20]	; (8001278 <_sbrk+0x64>)
 8001264:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001266:	68fb      	ldr	r3, [r7, #12]
}
 8001268:	4618      	mov	r0, r3
 800126a:	3718      	adds	r7, #24
 800126c:	46bd      	mov	sp, r7
 800126e:	bd80      	pop	{r7, pc}
 8001270:	20030000 	.word	0x20030000
 8001274:	00000400 	.word	0x00000400
 8001278:	200008cc 	.word	0x200008cc
 800127c:	200008e8 	.word	0x200008e8

08001280 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001280:	b480      	push	{r7}
 8001282:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001284:	4b06      	ldr	r3, [pc, #24]	; (80012a0 <SystemInit+0x20>)
 8001286:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800128a:	4a05      	ldr	r2, [pc, #20]	; (80012a0 <SystemInit+0x20>)
 800128c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001290:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001294:	bf00      	nop
 8001296:	46bd      	mov	sp, r7
 8001298:	f85d 7b04 	ldr.w	r7, [sp], #4
 800129c:	4770      	bx	lr
 800129e:	bf00      	nop
 80012a0:	e000ed00 	.word	0xe000ed00

080012a4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 80012a4:	f8df d034 	ldr.w	sp, [pc, #52]	; 80012dc <LoopFillZerobss+0x12>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80012a8:	480d      	ldr	r0, [pc, #52]	; (80012e0 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80012aa:	490e      	ldr	r1, [pc, #56]	; (80012e4 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80012ac:	4a0e      	ldr	r2, [pc, #56]	; (80012e8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80012ae:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80012b0:	e002      	b.n	80012b8 <LoopCopyDataInit>

080012b2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80012b2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80012b4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80012b6:	3304      	adds	r3, #4

080012b8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80012b8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80012ba:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80012bc:	d3f9      	bcc.n	80012b2 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80012be:	4a0b      	ldr	r2, [pc, #44]	; (80012ec <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80012c0:	4c0b      	ldr	r4, [pc, #44]	; (80012f0 <LoopFillZerobss+0x26>)
  movs r3, #0
 80012c2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80012c4:	e001      	b.n	80012ca <LoopFillZerobss>

080012c6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80012c6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80012c8:	3204      	adds	r2, #4

080012ca <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80012ca:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80012cc:	d3fb      	bcc.n	80012c6 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80012ce:	f7ff ffd7 	bl	8001280 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80012d2:	f004 f9a7 	bl	8005624 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80012d6:	f7ff f991 	bl	80005fc <main>
  bx  lr    
 80012da:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 80012dc:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 80012e0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80012e4:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 80012e8:	08005b74 	.word	0x08005b74
  ldr r2, =_sbss
 80012ec:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 80012f0:	200008e4 	.word	0x200008e4

080012f4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80012f4:	e7fe      	b.n	80012f4 <ADC_IRQHandler>
	...

080012f8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80012f8:	b580      	push	{r7, lr}
 80012fa:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80012fc:	4b0e      	ldr	r3, [pc, #56]	; (8001338 <HAL_Init+0x40>)
 80012fe:	681b      	ldr	r3, [r3, #0]
 8001300:	4a0d      	ldr	r2, [pc, #52]	; (8001338 <HAL_Init+0x40>)
 8001302:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001306:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001308:	4b0b      	ldr	r3, [pc, #44]	; (8001338 <HAL_Init+0x40>)
 800130a:	681b      	ldr	r3, [r3, #0]
 800130c:	4a0a      	ldr	r2, [pc, #40]	; (8001338 <HAL_Init+0x40>)
 800130e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001312:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001314:	4b08      	ldr	r3, [pc, #32]	; (8001338 <HAL_Init+0x40>)
 8001316:	681b      	ldr	r3, [r3, #0]
 8001318:	4a07      	ldr	r2, [pc, #28]	; (8001338 <HAL_Init+0x40>)
 800131a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800131e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001320:	2003      	movs	r0, #3
 8001322:	f000 f94f 	bl	80015c4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001326:	2000      	movs	r0, #0
 8001328:	f000 f808 	bl	800133c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800132c:	f7ff fd5e 	bl	8000dec <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001330:	2300      	movs	r3, #0
}
 8001332:	4618      	mov	r0, r3
 8001334:	bd80      	pop	{r7, pc}
 8001336:	bf00      	nop
 8001338:	40023c00 	.word	0x40023c00

0800133c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800133c:	b580      	push	{r7, lr}
 800133e:	b082      	sub	sp, #8
 8001340:	af00      	add	r7, sp, #0
 8001342:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001344:	4b12      	ldr	r3, [pc, #72]	; (8001390 <HAL_InitTick+0x54>)
 8001346:	681a      	ldr	r2, [r3, #0]
 8001348:	4b12      	ldr	r3, [pc, #72]	; (8001394 <HAL_InitTick+0x58>)
 800134a:	781b      	ldrb	r3, [r3, #0]
 800134c:	4619      	mov	r1, r3
 800134e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001352:	fbb3 f3f1 	udiv	r3, r3, r1
 8001356:	fbb2 f3f3 	udiv	r3, r2, r3
 800135a:	4618      	mov	r0, r3
 800135c:	f000 f967 	bl	800162e <HAL_SYSTICK_Config>
 8001360:	4603      	mov	r3, r0
 8001362:	2b00      	cmp	r3, #0
 8001364:	d001      	beq.n	800136a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001366:	2301      	movs	r3, #1
 8001368:	e00e      	b.n	8001388 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	2b0f      	cmp	r3, #15
 800136e:	d80a      	bhi.n	8001386 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001370:	2200      	movs	r2, #0
 8001372:	6879      	ldr	r1, [r7, #4]
 8001374:	f04f 30ff 	mov.w	r0, #4294967295
 8001378:	f000 f92f 	bl	80015da <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800137c:	4a06      	ldr	r2, [pc, #24]	; (8001398 <HAL_InitTick+0x5c>)
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001382:	2300      	movs	r3, #0
 8001384:	e000      	b.n	8001388 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001386:	2301      	movs	r3, #1
}
 8001388:	4618      	mov	r0, r3
 800138a:	3708      	adds	r7, #8
 800138c:	46bd      	mov	sp, r7
 800138e:	bd80      	pop	{r7, pc}
 8001390:	20000000 	.word	0x20000000
 8001394:	20000008 	.word	0x20000008
 8001398:	20000004 	.word	0x20000004

0800139c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800139c:	b480      	push	{r7}
 800139e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80013a0:	4b06      	ldr	r3, [pc, #24]	; (80013bc <HAL_IncTick+0x20>)
 80013a2:	781b      	ldrb	r3, [r3, #0]
 80013a4:	461a      	mov	r2, r3
 80013a6:	4b06      	ldr	r3, [pc, #24]	; (80013c0 <HAL_IncTick+0x24>)
 80013a8:	681b      	ldr	r3, [r3, #0]
 80013aa:	4413      	add	r3, r2
 80013ac:	4a04      	ldr	r2, [pc, #16]	; (80013c0 <HAL_IncTick+0x24>)
 80013ae:	6013      	str	r3, [r2, #0]
}
 80013b0:	bf00      	nop
 80013b2:	46bd      	mov	sp, r7
 80013b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013b8:	4770      	bx	lr
 80013ba:	bf00      	nop
 80013bc:	20000008 	.word	0x20000008
 80013c0:	200008d0 	.word	0x200008d0

080013c4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80013c4:	b480      	push	{r7}
 80013c6:	af00      	add	r7, sp, #0
  return uwTick;
 80013c8:	4b03      	ldr	r3, [pc, #12]	; (80013d8 <HAL_GetTick+0x14>)
 80013ca:	681b      	ldr	r3, [r3, #0]
}
 80013cc:	4618      	mov	r0, r3
 80013ce:	46bd      	mov	sp, r7
 80013d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013d4:	4770      	bx	lr
 80013d6:	bf00      	nop
 80013d8:	200008d0 	.word	0x200008d0

080013dc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80013dc:	b580      	push	{r7, lr}
 80013de:	b084      	sub	sp, #16
 80013e0:	af00      	add	r7, sp, #0
 80013e2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80013e4:	f7ff ffee 	bl	80013c4 <HAL_GetTick>
 80013e8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80013ee:	68fb      	ldr	r3, [r7, #12]
 80013f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80013f4:	d005      	beq.n	8001402 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80013f6:	4b0a      	ldr	r3, [pc, #40]	; (8001420 <HAL_Delay+0x44>)
 80013f8:	781b      	ldrb	r3, [r3, #0]
 80013fa:	461a      	mov	r2, r3
 80013fc:	68fb      	ldr	r3, [r7, #12]
 80013fe:	4413      	add	r3, r2
 8001400:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001402:	bf00      	nop
 8001404:	f7ff ffde 	bl	80013c4 <HAL_GetTick>
 8001408:	4602      	mov	r2, r0
 800140a:	68bb      	ldr	r3, [r7, #8]
 800140c:	1ad3      	subs	r3, r2, r3
 800140e:	68fa      	ldr	r2, [r7, #12]
 8001410:	429a      	cmp	r2, r3
 8001412:	d8f7      	bhi.n	8001404 <HAL_Delay+0x28>
  {
  }
}
 8001414:	bf00      	nop
 8001416:	bf00      	nop
 8001418:	3710      	adds	r7, #16
 800141a:	46bd      	mov	sp, r7
 800141c:	bd80      	pop	{r7, pc}
 800141e:	bf00      	nop
 8001420:	20000008 	.word	0x20000008

08001424 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001424:	b480      	push	{r7}
 8001426:	b085      	sub	sp, #20
 8001428:	af00      	add	r7, sp, #0
 800142a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	f003 0307 	and.w	r3, r3, #7
 8001432:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001434:	4b0c      	ldr	r3, [pc, #48]	; (8001468 <__NVIC_SetPriorityGrouping+0x44>)
 8001436:	68db      	ldr	r3, [r3, #12]
 8001438:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800143a:	68ba      	ldr	r2, [r7, #8]
 800143c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001440:	4013      	ands	r3, r2
 8001442:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001444:	68fb      	ldr	r3, [r7, #12]
 8001446:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001448:	68bb      	ldr	r3, [r7, #8]
 800144a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800144c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001450:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001454:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001456:	4a04      	ldr	r2, [pc, #16]	; (8001468 <__NVIC_SetPriorityGrouping+0x44>)
 8001458:	68bb      	ldr	r3, [r7, #8]
 800145a:	60d3      	str	r3, [r2, #12]
}
 800145c:	bf00      	nop
 800145e:	3714      	adds	r7, #20
 8001460:	46bd      	mov	sp, r7
 8001462:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001466:	4770      	bx	lr
 8001468:	e000ed00 	.word	0xe000ed00

0800146c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800146c:	b480      	push	{r7}
 800146e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001470:	4b04      	ldr	r3, [pc, #16]	; (8001484 <__NVIC_GetPriorityGrouping+0x18>)
 8001472:	68db      	ldr	r3, [r3, #12]
 8001474:	0a1b      	lsrs	r3, r3, #8
 8001476:	f003 0307 	and.w	r3, r3, #7
}
 800147a:	4618      	mov	r0, r3
 800147c:	46bd      	mov	sp, r7
 800147e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001482:	4770      	bx	lr
 8001484:	e000ed00 	.word	0xe000ed00

08001488 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001488:	b480      	push	{r7}
 800148a:	b083      	sub	sp, #12
 800148c:	af00      	add	r7, sp, #0
 800148e:	4603      	mov	r3, r0
 8001490:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001492:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001496:	2b00      	cmp	r3, #0
 8001498:	db0b      	blt.n	80014b2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800149a:	79fb      	ldrb	r3, [r7, #7]
 800149c:	f003 021f 	and.w	r2, r3, #31
 80014a0:	4907      	ldr	r1, [pc, #28]	; (80014c0 <__NVIC_EnableIRQ+0x38>)
 80014a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014a6:	095b      	lsrs	r3, r3, #5
 80014a8:	2001      	movs	r0, #1
 80014aa:	fa00 f202 	lsl.w	r2, r0, r2
 80014ae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80014b2:	bf00      	nop
 80014b4:	370c      	adds	r7, #12
 80014b6:	46bd      	mov	sp, r7
 80014b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014bc:	4770      	bx	lr
 80014be:	bf00      	nop
 80014c0:	e000e100 	.word	0xe000e100

080014c4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80014c4:	b480      	push	{r7}
 80014c6:	b083      	sub	sp, #12
 80014c8:	af00      	add	r7, sp, #0
 80014ca:	4603      	mov	r3, r0
 80014cc:	6039      	str	r1, [r7, #0]
 80014ce:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80014d0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014d4:	2b00      	cmp	r3, #0
 80014d6:	db0a      	blt.n	80014ee <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80014d8:	683b      	ldr	r3, [r7, #0]
 80014da:	b2da      	uxtb	r2, r3
 80014dc:	490c      	ldr	r1, [pc, #48]	; (8001510 <__NVIC_SetPriority+0x4c>)
 80014de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014e2:	0112      	lsls	r2, r2, #4
 80014e4:	b2d2      	uxtb	r2, r2
 80014e6:	440b      	add	r3, r1
 80014e8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80014ec:	e00a      	b.n	8001504 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80014ee:	683b      	ldr	r3, [r7, #0]
 80014f0:	b2da      	uxtb	r2, r3
 80014f2:	4908      	ldr	r1, [pc, #32]	; (8001514 <__NVIC_SetPriority+0x50>)
 80014f4:	79fb      	ldrb	r3, [r7, #7]
 80014f6:	f003 030f 	and.w	r3, r3, #15
 80014fa:	3b04      	subs	r3, #4
 80014fc:	0112      	lsls	r2, r2, #4
 80014fe:	b2d2      	uxtb	r2, r2
 8001500:	440b      	add	r3, r1
 8001502:	761a      	strb	r2, [r3, #24]
}
 8001504:	bf00      	nop
 8001506:	370c      	adds	r7, #12
 8001508:	46bd      	mov	sp, r7
 800150a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800150e:	4770      	bx	lr
 8001510:	e000e100 	.word	0xe000e100
 8001514:	e000ed00 	.word	0xe000ed00

08001518 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001518:	b480      	push	{r7}
 800151a:	b089      	sub	sp, #36	; 0x24
 800151c:	af00      	add	r7, sp, #0
 800151e:	60f8      	str	r0, [r7, #12]
 8001520:	60b9      	str	r1, [r7, #8]
 8001522:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001524:	68fb      	ldr	r3, [r7, #12]
 8001526:	f003 0307 	and.w	r3, r3, #7
 800152a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800152c:	69fb      	ldr	r3, [r7, #28]
 800152e:	f1c3 0307 	rsb	r3, r3, #7
 8001532:	2b04      	cmp	r3, #4
 8001534:	bf28      	it	cs
 8001536:	2304      	movcs	r3, #4
 8001538:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800153a:	69fb      	ldr	r3, [r7, #28]
 800153c:	3304      	adds	r3, #4
 800153e:	2b06      	cmp	r3, #6
 8001540:	d902      	bls.n	8001548 <NVIC_EncodePriority+0x30>
 8001542:	69fb      	ldr	r3, [r7, #28]
 8001544:	3b03      	subs	r3, #3
 8001546:	e000      	b.n	800154a <NVIC_EncodePriority+0x32>
 8001548:	2300      	movs	r3, #0
 800154a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800154c:	f04f 32ff 	mov.w	r2, #4294967295
 8001550:	69bb      	ldr	r3, [r7, #24]
 8001552:	fa02 f303 	lsl.w	r3, r2, r3
 8001556:	43da      	mvns	r2, r3
 8001558:	68bb      	ldr	r3, [r7, #8]
 800155a:	401a      	ands	r2, r3
 800155c:	697b      	ldr	r3, [r7, #20]
 800155e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001560:	f04f 31ff 	mov.w	r1, #4294967295
 8001564:	697b      	ldr	r3, [r7, #20]
 8001566:	fa01 f303 	lsl.w	r3, r1, r3
 800156a:	43d9      	mvns	r1, r3
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001570:	4313      	orrs	r3, r2
         );
}
 8001572:	4618      	mov	r0, r3
 8001574:	3724      	adds	r7, #36	; 0x24
 8001576:	46bd      	mov	sp, r7
 8001578:	f85d 7b04 	ldr.w	r7, [sp], #4
 800157c:	4770      	bx	lr
	...

08001580 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001580:	b580      	push	{r7, lr}
 8001582:	b082      	sub	sp, #8
 8001584:	af00      	add	r7, sp, #0
 8001586:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	3b01      	subs	r3, #1
 800158c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001590:	d301      	bcc.n	8001596 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001592:	2301      	movs	r3, #1
 8001594:	e00f      	b.n	80015b6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001596:	4a0a      	ldr	r2, [pc, #40]	; (80015c0 <SysTick_Config+0x40>)
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	3b01      	subs	r3, #1
 800159c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800159e:	210f      	movs	r1, #15
 80015a0:	f04f 30ff 	mov.w	r0, #4294967295
 80015a4:	f7ff ff8e 	bl	80014c4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80015a8:	4b05      	ldr	r3, [pc, #20]	; (80015c0 <SysTick_Config+0x40>)
 80015aa:	2200      	movs	r2, #0
 80015ac:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80015ae:	4b04      	ldr	r3, [pc, #16]	; (80015c0 <SysTick_Config+0x40>)
 80015b0:	2207      	movs	r2, #7
 80015b2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80015b4:	2300      	movs	r3, #0
}
 80015b6:	4618      	mov	r0, r3
 80015b8:	3708      	adds	r7, #8
 80015ba:	46bd      	mov	sp, r7
 80015bc:	bd80      	pop	{r7, pc}
 80015be:	bf00      	nop
 80015c0:	e000e010 	.word	0xe000e010

080015c4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80015c4:	b580      	push	{r7, lr}
 80015c6:	b082      	sub	sp, #8
 80015c8:	af00      	add	r7, sp, #0
 80015ca:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80015cc:	6878      	ldr	r0, [r7, #4]
 80015ce:	f7ff ff29 	bl	8001424 <__NVIC_SetPriorityGrouping>
}
 80015d2:	bf00      	nop
 80015d4:	3708      	adds	r7, #8
 80015d6:	46bd      	mov	sp, r7
 80015d8:	bd80      	pop	{r7, pc}

080015da <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80015da:	b580      	push	{r7, lr}
 80015dc:	b086      	sub	sp, #24
 80015de:	af00      	add	r7, sp, #0
 80015e0:	4603      	mov	r3, r0
 80015e2:	60b9      	str	r1, [r7, #8]
 80015e4:	607a      	str	r2, [r7, #4]
 80015e6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80015e8:	2300      	movs	r3, #0
 80015ea:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80015ec:	f7ff ff3e 	bl	800146c <__NVIC_GetPriorityGrouping>
 80015f0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80015f2:	687a      	ldr	r2, [r7, #4]
 80015f4:	68b9      	ldr	r1, [r7, #8]
 80015f6:	6978      	ldr	r0, [r7, #20]
 80015f8:	f7ff ff8e 	bl	8001518 <NVIC_EncodePriority>
 80015fc:	4602      	mov	r2, r0
 80015fe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001602:	4611      	mov	r1, r2
 8001604:	4618      	mov	r0, r3
 8001606:	f7ff ff5d 	bl	80014c4 <__NVIC_SetPriority>
}
 800160a:	bf00      	nop
 800160c:	3718      	adds	r7, #24
 800160e:	46bd      	mov	sp, r7
 8001610:	bd80      	pop	{r7, pc}

08001612 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001612:	b580      	push	{r7, lr}
 8001614:	b082      	sub	sp, #8
 8001616:	af00      	add	r7, sp, #0
 8001618:	4603      	mov	r3, r0
 800161a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800161c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001620:	4618      	mov	r0, r3
 8001622:	f7ff ff31 	bl	8001488 <__NVIC_EnableIRQ>
}
 8001626:	bf00      	nop
 8001628:	3708      	adds	r7, #8
 800162a:	46bd      	mov	sp, r7
 800162c:	bd80      	pop	{r7, pc}

0800162e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800162e:	b580      	push	{r7, lr}
 8001630:	b082      	sub	sp, #8
 8001632:	af00      	add	r7, sp, #0
 8001634:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001636:	6878      	ldr	r0, [r7, #4]
 8001638:	f7ff ffa2 	bl	8001580 <SysTick_Config>
 800163c:	4603      	mov	r3, r0
}
 800163e:	4618      	mov	r0, r3
 8001640:	3708      	adds	r7, #8
 8001642:	46bd      	mov	sp, r7
 8001644:	bd80      	pop	{r7, pc}

08001646 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001646:	b580      	push	{r7, lr}
 8001648:	b084      	sub	sp, #16
 800164a:	af00      	add	r7, sp, #0
 800164c:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001652:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8001654:	f7ff feb6 	bl	80013c4 <HAL_GetTick>
 8001658:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001660:	b2db      	uxtb	r3, r3
 8001662:	2b02      	cmp	r3, #2
 8001664:	d008      	beq.n	8001678 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	2280      	movs	r2, #128	; 0x80
 800166a:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	2200      	movs	r2, #0
 8001670:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8001674:	2301      	movs	r3, #1
 8001676:	e052      	b.n	800171e <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	681b      	ldr	r3, [r3, #0]
 800167c:	681a      	ldr	r2, [r3, #0]
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	681b      	ldr	r3, [r3, #0]
 8001682:	f022 0216 	bic.w	r2, r2, #22
 8001686:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	681b      	ldr	r3, [r3, #0]
 800168c:	695a      	ldr	r2, [r3, #20]
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	681b      	ldr	r3, [r3, #0]
 8001692:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001696:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800169c:	2b00      	cmp	r3, #0
 800169e:	d103      	bne.n	80016a8 <HAL_DMA_Abort+0x62>
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80016a4:	2b00      	cmp	r3, #0
 80016a6:	d007      	beq.n	80016b8 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	681b      	ldr	r3, [r3, #0]
 80016ac:	681a      	ldr	r2, [r3, #0]
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	681b      	ldr	r3, [r3, #0]
 80016b2:	f022 0208 	bic.w	r2, r2, #8
 80016b6:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	681b      	ldr	r3, [r3, #0]
 80016bc:	681a      	ldr	r2, [r3, #0]
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	681b      	ldr	r3, [r3, #0]
 80016c2:	f022 0201 	bic.w	r2, r2, #1
 80016c6:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80016c8:	e013      	b.n	80016f2 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80016ca:	f7ff fe7b 	bl	80013c4 <HAL_GetTick>
 80016ce:	4602      	mov	r2, r0
 80016d0:	68bb      	ldr	r3, [r7, #8]
 80016d2:	1ad3      	subs	r3, r2, r3
 80016d4:	2b05      	cmp	r3, #5
 80016d6:	d90c      	bls.n	80016f2 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	2220      	movs	r2, #32
 80016dc:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	2203      	movs	r2, #3
 80016e2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	2200      	movs	r2, #0
 80016ea:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 80016ee:	2303      	movs	r3, #3
 80016f0:	e015      	b.n	800171e <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	681b      	ldr	r3, [r3, #0]
 80016f6:	681b      	ldr	r3, [r3, #0]
 80016f8:	f003 0301 	and.w	r3, r3, #1
 80016fc:	2b00      	cmp	r3, #0
 80016fe:	d1e4      	bne.n	80016ca <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001704:	223f      	movs	r2, #63	; 0x3f
 8001706:	409a      	lsls	r2, r3
 8001708:	68fb      	ldr	r3, [r7, #12]
 800170a:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	2201      	movs	r2, #1
 8001710:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	2200      	movs	r2, #0
 8001718:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 800171c:	2300      	movs	r3, #0
}
 800171e:	4618      	mov	r0, r3
 8001720:	3710      	adds	r7, #16
 8001722:	46bd      	mov	sp, r7
 8001724:	bd80      	pop	{r7, pc}

08001726 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001726:	b480      	push	{r7}
 8001728:	b083      	sub	sp, #12
 800172a:	af00      	add	r7, sp, #0
 800172c:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001734:	b2db      	uxtb	r3, r3
 8001736:	2b02      	cmp	r3, #2
 8001738:	d004      	beq.n	8001744 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	2280      	movs	r2, #128	; 0x80
 800173e:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8001740:	2301      	movs	r3, #1
 8001742:	e00c      	b.n	800175e <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	2205      	movs	r2, #5
 8001748:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	681b      	ldr	r3, [r3, #0]
 8001750:	681a      	ldr	r2, [r3, #0]
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	681b      	ldr	r3, [r3, #0]
 8001756:	f022 0201 	bic.w	r2, r2, #1
 800175a:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800175c:	2300      	movs	r3, #0
}
 800175e:	4618      	mov	r0, r3
 8001760:	370c      	adds	r7, #12
 8001762:	46bd      	mov	sp, r7
 8001764:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001768:	4770      	bx	lr
	...

0800176c <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 800176c:	b580      	push	{r7, lr}
 800176e:	b084      	sub	sp, #16
 8001770:	af00      	add	r7, sp, #0
 8001772:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	2b00      	cmp	r3, #0
 8001778:	d101      	bne.n	800177e <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 800177a:	2301      	movs	r3, #1
 800177c:	e06c      	b.n	8001858 <HAL_ETH_Init+0xec>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001784:	2b00      	cmp	r3, #0
 8001786:	d106      	bne.n	8001796 <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	2223      	movs	r2, #35	; 0x23
 800178c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8001790:	6878      	ldr	r0, [r7, #4]
 8001792:	f7ff fb53 	bl	8000e3c <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001796:	2300      	movs	r3, #0
 8001798:	60bb      	str	r3, [r7, #8]
 800179a:	4b31      	ldr	r3, [pc, #196]	; (8001860 <HAL_ETH_Init+0xf4>)
 800179c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800179e:	4a30      	ldr	r2, [pc, #192]	; (8001860 <HAL_ETH_Init+0xf4>)
 80017a0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80017a4:	6453      	str	r3, [r2, #68]	; 0x44
 80017a6:	4b2e      	ldr	r3, [pc, #184]	; (8001860 <HAL_ETH_Init+0xf4>)
 80017a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80017aa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80017ae:	60bb      	str	r3, [r7, #8]
 80017b0:	68bb      	ldr	r3, [r7, #8]

  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 80017b2:	4b2c      	ldr	r3, [pc, #176]	; (8001864 <HAL_ETH_Init+0xf8>)
 80017b4:	685b      	ldr	r3, [r3, #4]
 80017b6:	4a2b      	ldr	r2, [pc, #172]	; (8001864 <HAL_ETH_Init+0xf8>)
 80017b8:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 80017bc:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 80017be:	4b29      	ldr	r3, [pc, #164]	; (8001864 <HAL_ETH_Init+0xf8>)
 80017c0:	685a      	ldr	r2, [r3, #4]
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	689b      	ldr	r3, [r3, #8]
 80017c6:	4927      	ldr	r1, [pc, #156]	; (8001864 <HAL_ETH_Init+0xf8>)
 80017c8:	4313      	orrs	r3, r2
 80017ca:	604b      	str	r3, [r1, #4]
  /* Dummy read to sync SYSCFG with ETH */
  (void)SYSCFG->PMC;
 80017cc:	4b25      	ldr	r3, [pc, #148]	; (8001864 <HAL_ETH_Init+0xf8>)
 80017ce:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR);
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	681b      	ldr	r3, [r3, #0]
 80017d4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80017d8:	681b      	ldr	r3, [r3, #0]
 80017da:	687a      	ldr	r2, [r7, #4]
 80017dc:	6812      	ldr	r2, [r2, #0]
 80017de:	f043 0301 	orr.w	r3, r3, #1
 80017e2:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80017e6:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80017e8:	f7ff fdec 	bl	80013c4 <HAL_GetTick>
 80017ec:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 80017ee:	e011      	b.n	8001814 <HAL_ETH_Init+0xa8>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 80017f0:	f7ff fde8 	bl	80013c4 <HAL_GetTick>
 80017f4:	4602      	mov	r2, r0
 80017f6:	68fb      	ldr	r3, [r7, #12]
 80017f8:	1ad3      	subs	r3, r2, r3
 80017fa:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80017fe:	d909      	bls.n	8001814 <HAL_ETH_Init+0xa8>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	2204      	movs	r2, #4
 8001804:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	22e0      	movs	r2, #224	; 0xe0
 800180c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      /* Return Error */
      return HAL_ERROR;
 8001810:	2301      	movs	r3, #1
 8001812:	e021      	b.n	8001858 <HAL_ETH_Init+0xec>
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	681b      	ldr	r3, [r3, #0]
 8001818:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800181c:	681b      	ldr	r3, [r3, #0]
 800181e:	f003 0301 	and.w	r3, r3, #1
 8001822:	2b00      	cmp	r3, #0
 8001824:	d1e4      	bne.n	80017f0 <HAL_ETH_Init+0x84>
    }
  }


  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 8001826:	6878      	ldr	r0, [r7, #4]
 8001828:	f000 f944 	bl	8001ab4 <ETH_MACDMAConfig>


  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 800182c:	6878      	ldr	r0, [r7, #4]
 800182e:	f000 f9eb 	bl	8001c08 <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 8001832:	6878      	ldr	r0, [r7, #4]
 8001834:	f000 fa41 	bl	8001cba <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	685b      	ldr	r3, [r3, #4]
 800183c:	461a      	mov	r2, r3
 800183e:	2100      	movs	r1, #0
 8001840:	6878      	ldr	r0, [r7, #4]
 8001842:	f000 f9a9 	bl	8001b98 <ETH_MACAddressConfig>

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	2200      	movs	r2, #0
 800184a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  heth->gState = HAL_ETH_STATE_READY;
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	2210      	movs	r2, #16
 8001852:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8001856:	2300      	movs	r3, #0
}
 8001858:	4618      	mov	r0, r3
 800185a:	3710      	adds	r7, #16
 800185c:	46bd      	mov	sp, r7
 800185e:	bd80      	pop	{r7, pc}
 8001860:	40023800 	.word	0x40023800
 8001864:	40013800 	.word	0x40013800

08001868 <ETH_SetMACConfig>:
  HAL_Delay(ETH_REG_WRITE_DELAY);
  (heth->Instance)->DMAOMR = tmpreg;
}

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 8001868:	b580      	push	{r7, lr}
 800186a:	b084      	sub	sp, #16
 800186c:	af00      	add	r7, sp, #0
 800186e:	6078      	str	r0, [r7, #4]
 8001870:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg1 = (heth->Instance)->MACCR;
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	681b      	ldr	r3, [r3, #0]
 8001876:	681b      	ldr	r3, [r3, #0]
 8001878:	60fb      	str	r3, [r7, #12]
  /* Clear WD, PCE, PS, TE and RE bits */
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 800187a:	68fa      	ldr	r2, [r7, #12]
 800187c:	4b47      	ldr	r3, [pc, #284]	; (800199c <ETH_SetMACConfig+0x134>)
 800187e:	4013      	ands	r3, r2
 8001880:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8001882:	683b      	ldr	r3, [r7, #0]
 8001884:	7c1b      	ldrb	r3, [r3, #16]
 8001886:	2b00      	cmp	r3, #0
 8001888:	d102      	bne.n	8001890 <ETH_SetMACConfig+0x28>
 800188a:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 800188e:	e000      	b.n	8001892 <ETH_SetMACConfig+0x2a>
 8001890:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 8001892:	683b      	ldr	r3, [r7, #0]
 8001894:	7c5b      	ldrb	r3, [r3, #17]
 8001896:	2b00      	cmp	r3, #0
 8001898:	d102      	bne.n	80018a0 <ETH_SetMACConfig+0x38>
 800189a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800189e:	e000      	b.n	80018a2 <ETH_SetMACConfig+0x3a>
 80018a0:	2300      	movs	r3, #0
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 80018a2:	431a      	orrs	r2, r3
                        (uint32_t)macconf->InterPacketGapVal |
 80018a4:	683b      	ldr	r3, [r7, #0]
 80018a6:	689b      	ldr	r3, [r3, #8]
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 80018a8:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 80018aa:	683b      	ldr	r3, [r7, #0]
 80018ac:	7fdb      	ldrb	r3, [r3, #31]
 80018ae:	041b      	lsls	r3, r3, #16
                        (uint32_t)macconf->InterPacketGapVal |
 80018b0:	431a      	orrs	r2, r3
                        macconf->Speed |
 80018b2:	683b      	ldr	r3, [r7, #0]
 80018b4:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 80018b6:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 80018b8:	683a      	ldr	r2, [r7, #0]
 80018ba:	7f92      	ldrb	r2, [r2, #30]
 80018bc:	2a00      	cmp	r2, #0
 80018be:	d102      	bne.n	80018c6 <ETH_SetMACConfig+0x5e>
 80018c0:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80018c4:	e000      	b.n	80018c8 <ETH_SetMACConfig+0x60>
 80018c6:	2200      	movs	r2, #0
                        macconf->Speed |
 80018c8:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 80018ca:	683b      	ldr	r3, [r7, #0]
 80018cc:	7f1b      	ldrb	r3, [r3, #28]
 80018ce:	031b      	lsls	r3, r3, #12
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 80018d0:	431a      	orrs	r2, r3
                        macconf->DuplexMode |
 80018d2:	683b      	ldr	r3, [r7, #0]
 80018d4:	699b      	ldr	r3, [r3, #24]
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 80018d6:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 80018d8:	683b      	ldr	r3, [r7, #0]
 80018da:	791b      	ldrb	r3, [r3, #4]
 80018dc:	029b      	lsls	r3, r3, #10
                        macconf->DuplexMode |
 80018de:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 80018e0:	683a      	ldr	r2, [r7, #0]
 80018e2:	f892 2020 	ldrb.w	r2, [r2, #32]
 80018e6:	2a00      	cmp	r2, #0
 80018e8:	d102      	bne.n	80018f0 <ETH_SetMACConfig+0x88>
 80018ea:	f44f 7200 	mov.w	r2, #512	; 0x200
 80018ee:	e000      	b.n	80018f2 <ETH_SetMACConfig+0x8a>
 80018f0:	2200      	movs	r2, #0
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 80018f2:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 80018f4:	683b      	ldr	r3, [r7, #0]
 80018f6:	7bdb      	ldrb	r3, [r3, #15]
 80018f8:	01db      	lsls	r3, r3, #7
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 80018fa:	431a      	orrs	r2, r3
                        macconf->BackOffLimit |
 80018fc:	683b      	ldr	r3, [r7, #0]
 80018fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8001900:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->DeferralCheck << 4U));
 8001902:	683b      	ldr	r3, [r7, #0]
 8001904:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8001908:	011b      	lsls	r3, r3, #4
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 800190a:	4313      	orrs	r3, r2
 800190c:	68fa      	ldr	r2, [r7, #12]
 800190e:	4313      	orrs	r3, r2
 8001910:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	681b      	ldr	r3, [r3, #0]
 8001916:	68fa      	ldr	r2, [r7, #12]
 8001918:	601a      	str	r2, [r3, #0]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	681b      	ldr	r3, [r3, #0]
 800191e:	681b      	ldr	r3, [r3, #0]
 8001920:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8001922:	2001      	movs	r0, #1
 8001924:	f7ff fd5a 	bl	80013dc <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	681b      	ldr	r3, [r3, #0]
 800192c:	68fa      	ldr	r2, [r7, #12]
 800192e:	601a      	str	r2, [r3, #0]

  /*----------------------- ETHERNET MACFCR Configuration --------------------*/

  /* Get the ETHERNET MACFCR value */
  tmpreg1 = (heth->Instance)->MACFCR;
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	681b      	ldr	r3, [r3, #0]
 8001934:	699b      	ldr	r3, [r3, #24]
 8001936:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 8001938:	68fa      	ldr	r2, [r7, #12]
 800193a:	f64f 7341 	movw	r3, #65345	; 0xff41
 800193e:	4013      	ands	r3, r2
 8001940:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8001942:	683b      	ldr	r3, [r7, #0]
 8001944:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001946:	041b      	lsls	r3, r3, #16
                        (uint32_t)macconf->ZeroQuantaPause |
 8001948:	683a      	ldr	r2, [r7, #0]
 800194a:	f892 204c 	ldrb.w	r2, [r2, #76]	; 0x4c
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 800194e:	431a      	orrs	r2, r3
                        macconf->PauseLowThreshold |
 8001950:	683b      	ldr	r3, [r7, #0]
 8001952:	6d1b      	ldr	r3, [r3, #80]	; 0x50
                        (uint32_t)macconf->ZeroQuantaPause |
 8001954:	4313      	orrs	r3, r2
                        (uint32_t)macconf->UnicastSlowProtocolPacketDetect |
 8001956:	683a      	ldr	r2, [r7, #0]
 8001958:	f892 2030 	ldrb.w	r2, [r2, #48]	; 0x30
                        macconf->PauseLowThreshold |
 800195c:	4313      	orrs	r3, r2
                        (uint32_t)macconf->ReceiveFlowControl |
 800195e:	683a      	ldr	r2, [r7, #0]
 8001960:	f892 2056 	ldrb.w	r2, [r2, #86]	; 0x56
                        (uint32_t)macconf->UnicastSlowProtocolPacketDetect |
 8001964:	4313      	orrs	r3, r2
                        (uint32_t)macconf->TransmitFlowControl);
 8001966:	683a      	ldr	r2, [r7, #0]
 8001968:	f892 2054 	ldrb.w	r2, [r2, #84]	; 0x54
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 800196c:	4313      	orrs	r3, r2
 800196e:	68fa      	ldr	r2, [r7, #12]
 8001970:	4313      	orrs	r3, r2
 8001972:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACFCR */
  (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	681b      	ldr	r3, [r3, #0]
 8001978:	68fa      	ldr	r2, [r7, #12]
 800197a:	619a      	str	r2, [r3, #24]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACFCR;
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	681b      	ldr	r3, [r3, #0]
 8001980:	699b      	ldr	r3, [r3, #24]
 8001982:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8001984:	2001      	movs	r0, #1
 8001986:	f7ff fd29 	bl	80013dc <HAL_Delay>
  (heth->Instance)->MACFCR = tmpreg1;
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	681b      	ldr	r3, [r3, #0]
 800198e:	68fa      	ldr	r2, [r7, #12]
 8001990:	619a      	str	r2, [r3, #24]
}
 8001992:	bf00      	nop
 8001994:	3710      	adds	r7, #16
 8001996:	46bd      	mov	sp, r7
 8001998:	bd80      	pop	{r7, pc}
 800199a:	bf00      	nop
 800199c:	ff20810f 	.word	0xff20810f

080019a0 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth,  ETH_DMAConfigTypeDef *dmaconf)
{
 80019a0:	b580      	push	{r7, lr}
 80019a2:	b084      	sub	sp, #16
 80019a4:	af00      	add	r7, sp, #0
 80019a6:	6078      	str	r0, [r7, #4]
 80019a8:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*----------------------- ETHERNET DMAOMR Configuration --------------------*/
  /* Get the ETHERNET DMAOMR value */
  tmpreg1 = (heth->Instance)->DMAOMR;
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	681b      	ldr	r3, [r3, #0]
 80019ae:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80019b2:	699b      	ldr	r3, [r3, #24]
 80019b4:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 80019b6:	68fa      	ldr	r2, [r7, #12]
 80019b8:	4b3d      	ldr	r3, [pc, #244]	; (8001ab0 <ETH_SetDMAConfig+0x110>)
 80019ba:	4013      	ands	r3, r2
 80019bc:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 80019be:	683b      	ldr	r3, [r7, #0]
 80019c0:	7b1b      	ldrb	r3, [r3, #12]
 80019c2:	2b00      	cmp	r3, #0
 80019c4:	d102      	bne.n	80019cc <ETH_SetDMAConfig+0x2c>
 80019c6:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 80019ca:	e000      	b.n	80019ce <ETH_SetDMAConfig+0x2e>
 80019cc:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 80019ce:	683b      	ldr	r3, [r7, #0]
 80019d0:	7b5b      	ldrb	r3, [r3, #13]
 80019d2:	065b      	lsls	r3, r3, #25
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 80019d4:	4313      	orrs	r3, r2
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 80019d6:	683a      	ldr	r2, [r7, #0]
 80019d8:	7f52      	ldrb	r2, [r2, #29]
 80019da:	2a00      	cmp	r2, #0
 80019dc:	d102      	bne.n	80019e4 <ETH_SetDMAConfig+0x44>
 80019de:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80019e2:	e000      	b.n	80019e6 <ETH_SetDMAConfig+0x46>
 80019e4:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 80019e6:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 80019e8:	683b      	ldr	r3, [r7, #0]
 80019ea:	7b9b      	ldrb	r3, [r3, #14]
 80019ec:	055b      	lsls	r3, r3, #21
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 80019ee:	431a      	orrs	r2, r3
                        dmaconf->TransmitThresholdControl |
 80019f0:	683b      	ldr	r3, [r7, #0]
 80019f2:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 80019f4:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 80019f6:	683b      	ldr	r3, [r7, #0]
 80019f8:	7f1b      	ldrb	r3, [r3, #28]
 80019fa:	01db      	lsls	r3, r3, #7
                        dmaconf->TransmitThresholdControl |
 80019fc:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 80019fe:	683b      	ldr	r3, [r7, #0]
 8001a00:	7f9b      	ldrb	r3, [r3, #30]
 8001a02:	019b      	lsls	r3, r3, #6
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 8001a04:	431a      	orrs	r2, r3
                        dmaconf->ReceiveThresholdControl |
 8001a06:	683b      	ldr	r3, [r7, #0]
 8001a08:	6a1b      	ldr	r3, [r3, #32]
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 8001a0a:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->SecondFrameOperate << 2U));
 8001a0c:	683b      	ldr	r3, [r7, #0]
 8001a0e:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001a12:	009b      	lsls	r3, r3, #2
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8001a14:	4313      	orrs	r3, r2
 8001a16:	68fa      	ldr	r2, [r7, #12]
 8001a18:	4313      	orrs	r3, r2
 8001a1a:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET DMAOMR */
  (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	681b      	ldr	r3, [r3, #0]
 8001a20:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001a24:	461a      	mov	r2, r3
 8001a26:	68fb      	ldr	r3, [r7, #12]
 8001a28:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMAOMR;
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	681b      	ldr	r3, [r3, #0]
 8001a2e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001a32:	699b      	ldr	r3, [r3, #24]
 8001a34:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8001a36:	2001      	movs	r0, #1
 8001a38:	f7ff fcd0 	bl	80013dc <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001a44:	461a      	mov	r2, r3
 8001a46:	68fb      	ldr	r3, [r7, #12]
 8001a48:	6193      	str	r3, [r2, #24]

  /*----------------------- ETHERNET DMABMR Configuration --------------------*/
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8001a4a:	683b      	ldr	r3, [r7, #0]
 8001a4c:	791b      	ldrb	r3, [r3, #4]
 8001a4e:	065a      	lsls	r2, r3, #25
                                        dmaconf->BurstMode |
 8001a50:	683b      	ldr	r3, [r7, #0]
 8001a52:	689b      	ldr	r3, [r3, #8]
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8001a54:	431a      	orrs	r2, r3
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 8001a56:	683b      	ldr	r3, [r7, #0]
 8001a58:	699b      	ldr	r3, [r3, #24]
                                        dmaconf->BurstMode |
 8001a5a:	431a      	orrs	r2, r3
                                                                       Rx it is applied for the other */
                                        dmaconf->TxDMABurstLength |
 8001a5c:	683b      	ldr	r3, [r7, #0]
 8001a5e:	691b      	ldr	r3, [r3, #16]
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 8001a60:	431a      	orrs	r2, r3
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 8001a62:	683b      	ldr	r3, [r7, #0]
 8001a64:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8001a68:	01db      	lsls	r3, r3, #7
                                        dmaconf->TxDMABurstLength |
 8001a6a:	431a      	orrs	r2, r3
                                        (dmaconf->DescriptorSkipLength << 2U) |
 8001a6c:	683b      	ldr	r3, [r7, #0]
 8001a6e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a70:	009b      	lsls	r3, r3, #2
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 8001a72:	431a      	orrs	r2, r3
                                        dmaconf->DMAArbitration |
 8001a74:	683b      	ldr	r3, [r7, #0]
 8001a76:	681b      	ldr	r3, [r3, #0]
                                        (dmaconf->DescriptorSkipLength << 2U) |
 8001a78:	4313      	orrs	r3, r2
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8001a7a:	687a      	ldr	r2, [r7, #4]
 8001a7c:	6812      	ldr	r2, [r2, #0]
 8001a7e:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8001a82:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001a86:	6013      	str	r3, [r2, #0]
                                        ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMABMR;
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	681b      	ldr	r3, [r3, #0]
 8001a8c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001a90:	681b      	ldr	r3, [r3, #0]
 8001a92:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8001a94:	2001      	movs	r0, #1
 8001a96:	f7ff fca1 	bl	80013dc <HAL_Delay>
  (heth->Instance)->DMABMR = tmpreg1;
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	681b      	ldr	r3, [r3, #0]
 8001a9e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001aa2:	461a      	mov	r2, r3
 8001aa4:	68fb      	ldr	r3, [r7, #12]
 8001aa6:	6013      	str	r3, [r2, #0]
}
 8001aa8:	bf00      	nop
 8001aaa:	3710      	adds	r7, #16
 8001aac:	46bd      	mov	sp, r7
 8001aae:	bd80      	pop	{r7, pc}
 8001ab0:	f8de3f23 	.word	0xf8de3f23

08001ab4 <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 8001ab4:	b580      	push	{r7, lr}
 8001ab6:	b0a6      	sub	sp, #152	; 0x98
 8001ab8:	af00      	add	r7, sp, #0
 8001aba:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.Watchdog = ENABLE;
 8001abc:	2301      	movs	r3, #1
 8001abe:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44
  macDefaultConf.Jabber = ENABLE;
 8001ac2:	2301      	movs	r3, #1
 8001ac4:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
  macDefaultConf.InterPacketGapVal = ETH_INTERFRAMEGAP_96BIT;
 8001ac8:	2300      	movs	r3, #0
 8001aca:	63fb      	str	r3, [r7, #60]	; 0x3c
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 8001acc:	2300      	movs	r3, #0
 8001ace:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
  macDefaultConf.ReceiveOwn = ENABLE;
 8001ad2:	2301      	movs	r3, #1
 8001ad4:	f887 3052 	strb.w	r3, [r7, #82]	; 0x52
  macDefaultConf.LoopbackMode = DISABLE;
 8001ad8:	2300      	movs	r3, #0
 8001ada:	f887 3050 	strb.w	r3, [r7, #80]	; 0x50
  macDefaultConf.ChecksumOffload = ENABLE;
 8001ade:	2301      	movs	r3, #1
 8001ae0:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  macDefaultConf.RetryTransmission = DISABLE;
 8001ae4:	2300      	movs	r3, #0
 8001ae6:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
  macDefaultConf.AutomaticPadCRCStrip = DISABLE;
 8001aea:	2300      	movs	r3, #0
 8001aec:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8001af0:	2300      	movs	r3, #0
 8001af2:	65bb      	str	r3, [r7, #88]	; 0x58
  macDefaultConf.DeferralCheck = DISABLE;
 8001af4:	2300      	movs	r3, #0
 8001af6:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
  macDefaultConf.PauseTime = 0x0U;
 8001afa:	2300      	movs	r3, #0
 8001afc:	67fb      	str	r3, [r7, #124]	; 0x7c
  macDefaultConf.ZeroQuantaPause = DISABLE;
 8001afe:	2300      	movs	r3, #0
 8001b00:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 8001b04:	2300      	movs	r3, #0
 8001b06:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macDefaultConf.ReceiveFlowControl = DISABLE;
 8001b0a:	2300      	movs	r3, #0
 8001b0c:	f887 308a 	strb.w	r3, [r7, #138]	; 0x8a
  macDefaultConf.TransmitFlowControl = DISABLE;
 8001b10:	2300      	movs	r3, #0
 8001b12:	f887 3088 	strb.w	r3, [r7, #136]	; 0x88
  macDefaultConf.Speed = ETH_SPEED_100M;
 8001b16:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001b1a:	64bb      	str	r3, [r7, #72]	; 0x48
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 8001b1c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001b20:	64fb      	str	r3, [r7, #76]	; 0x4c
  macDefaultConf.UnicastSlowProtocolPacketDetect = DISABLE;
 8001b22:	2300      	movs	r3, #0
 8001b24:	f887 3064 	strb.w	r3, [r7, #100]	; 0x64

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 8001b28:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001b2c:	4619      	mov	r1, r3
 8001b2e:	6878      	ldr	r0, [r7, #4]
 8001b30:	f7ff fe9a 	bl	8001868 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.DropTCPIPChecksumErrorFrame = ENABLE;
 8001b34:	2301      	movs	r3, #1
 8001b36:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.ReceiveStoreForward = ENABLE;
 8001b38:	2301      	movs	r3, #1
 8001b3a:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.FlushRxPacket = ENABLE;
 8001b3c:	2301      	movs	r3, #1
 8001b3e:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  dmaDefaultConf.TransmitStoreForward = ENABLE;
 8001b42:	2301      	movs	r3, #1
 8001b44:	75bb      	strb	r3, [r7, #22]
  dmaDefaultConf.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 8001b46:	2300      	movs	r3, #0
 8001b48:	61fb      	str	r3, [r7, #28]
  dmaDefaultConf.ForwardErrorFrames = DISABLE;
 8001b4a:	2300      	movs	r3, #0
 8001b4c:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  dmaDefaultConf.ForwardUndersizedGoodFrames = DISABLE;
 8001b50:	2300      	movs	r3, #0
 8001b52:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  dmaDefaultConf.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 8001b56:	2300      	movs	r3, #0
 8001b58:	62bb      	str	r3, [r7, #40]	; 0x28
  dmaDefaultConf.SecondFrameOperate = ENABLE;
 8001b5a:	2301      	movs	r3, #1
 8001b5c:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 8001b60:	2301      	movs	r3, #1
 8001b62:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 8001b64:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001b68:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8001b6a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001b6e:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8001b70:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001b74:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.EnhancedDescriptorFormat = ENABLE;
 8001b76:	2301      	movs	r3, #1
 8001b78:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
  dmaDefaultConf.DescriptorSkipLength = 0x0U;
 8001b7c:	2300      	movs	r3, #0
 8001b7e:	633b      	str	r3, [r7, #48]	; 0x30
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 8001b80:	2300      	movs	r3, #0
 8001b82:	60bb      	str	r3, [r7, #8]

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 8001b84:	f107 0308 	add.w	r3, r7, #8
 8001b88:	4619      	mov	r1, r3
 8001b8a:	6878      	ldr	r0, [r7, #4]
 8001b8c:	f7ff ff08 	bl	80019a0 <ETH_SetDMAConfig>
}
 8001b90:	bf00      	nop
 8001b92:	3798      	adds	r7, #152	; 0x98
 8001b94:	46bd      	mov	sp, r7
 8001b96:	bd80      	pop	{r7, pc}

08001b98 <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 8001b98:	b480      	push	{r7}
 8001b9a:	b087      	sub	sp, #28
 8001b9c:	af00      	add	r7, sp, #0
 8001b9e:	60f8      	str	r0, [r7, #12]
 8001ba0:	60b9      	str	r1, [r7, #8]
 8001ba2:	607a      	str	r2, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);

  /* Calculate the selected MAC address high register */
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	3305      	adds	r3, #5
 8001ba8:	781b      	ldrb	r3, [r3, #0]
 8001baa:	021b      	lsls	r3, r3, #8
 8001bac:	687a      	ldr	r2, [r7, #4]
 8001bae:	3204      	adds	r2, #4
 8001bb0:	7812      	ldrb	r2, [r2, #0]
 8001bb2:	4313      	orrs	r3, r2
 8001bb4:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 8001bb6:	68ba      	ldr	r2, [r7, #8]
 8001bb8:	4b11      	ldr	r3, [pc, #68]	; (8001c00 <ETH_MACAddressConfig+0x68>)
 8001bba:	4413      	add	r3, r2
 8001bbc:	461a      	mov	r2, r3
 8001bbe:	697b      	ldr	r3, [r7, #20]
 8001bc0:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	3303      	adds	r3, #3
 8001bc6:	781b      	ldrb	r3, [r3, #0]
 8001bc8:	061a      	lsls	r2, r3, #24
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	3302      	adds	r3, #2
 8001bce:	781b      	ldrb	r3, [r3, #0]
 8001bd0:	041b      	lsls	r3, r3, #16
 8001bd2:	431a      	orrs	r2, r3
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	3301      	adds	r3, #1
 8001bd8:	781b      	ldrb	r3, [r3, #0]
 8001bda:	021b      	lsls	r3, r3, #8
 8001bdc:	4313      	orrs	r3, r2
 8001bde:	687a      	ldr	r2, [r7, #4]
 8001be0:	7812      	ldrb	r2, [r2, #0]
 8001be2:	4313      	orrs	r3, r2
 8001be4:	617b      	str	r3, [r7, #20]

  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 8001be6:	68ba      	ldr	r2, [r7, #8]
 8001be8:	4b06      	ldr	r3, [pc, #24]	; (8001c04 <ETH_MACAddressConfig+0x6c>)
 8001bea:	4413      	add	r3, r2
 8001bec:	461a      	mov	r2, r3
 8001bee:	697b      	ldr	r3, [r7, #20]
 8001bf0:	6013      	str	r3, [r2, #0]
}
 8001bf2:	bf00      	nop
 8001bf4:	371c      	adds	r7, #28
 8001bf6:	46bd      	mov	sp, r7
 8001bf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bfc:	4770      	bx	lr
 8001bfe:	bf00      	nop
 8001c00:	40028040 	.word	0x40028040
 8001c04:	40028044 	.word	0x40028044

08001c08 <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 8001c08:	b480      	push	{r7}
 8001c0a:	b085      	sub	sp, #20
 8001c0c:	af00      	add	r7, sp, #0
 8001c0e:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8001c10:	2300      	movs	r3, #0
 8001c12:	60fb      	str	r3, [r7, #12]
 8001c14:	e03e      	b.n	8001c94 <ETH_DMATxDescListInit+0x8c>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	68d9      	ldr	r1, [r3, #12]
 8001c1a:	68fa      	ldr	r2, [r7, #12]
 8001c1c:	4613      	mov	r3, r2
 8001c1e:	009b      	lsls	r3, r3, #2
 8001c20:	4413      	add	r3, r2
 8001c22:	00db      	lsls	r3, r3, #3
 8001c24:	440b      	add	r3, r1
 8001c26:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0);
 8001c28:	68bb      	ldr	r3, [r7, #8]
 8001c2a:	2200      	movs	r2, #0
 8001c2c:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0);
 8001c2e:	68bb      	ldr	r3, [r7, #8]
 8001c30:	2200      	movs	r2, #0
 8001c32:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0);
 8001c34:	68bb      	ldr	r3, [r7, #8]
 8001c36:	2200      	movs	r2, #0
 8001c38:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0);
 8001c3a:	68bb      	ldr	r3, [r7, #8]
 8001c3c:	2200      	movs	r2, #0
 8001c3e:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 8001c40:	68b9      	ldr	r1, [r7, #8]
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	68fa      	ldr	r2, [r7, #12]
 8001c46:	3206      	adds	r2, #6
 8001c48:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    /* Set Second Address Chained bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_TCH);
 8001c4c:	68bb      	ldr	r3, [r7, #8]
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8001c54:	68bb      	ldr	r3, [r7, #8]
 8001c56:	601a      	str	r2, [r3, #0]

    if (i < ((uint32_t)ETH_TX_DESC_CNT - 1U))
 8001c58:	68fb      	ldr	r3, [r7, #12]
 8001c5a:	2b02      	cmp	r3, #2
 8001c5c:	d80c      	bhi.n	8001c78 <ETH_DMATxDescListInit+0x70>
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc + i + 1U));
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	68d9      	ldr	r1, [r3, #12]
 8001c62:	68fb      	ldr	r3, [r7, #12]
 8001c64:	1c5a      	adds	r2, r3, #1
 8001c66:	4613      	mov	r3, r2
 8001c68:	009b      	lsls	r3, r3, #2
 8001c6a:	4413      	add	r3, r2
 8001c6c:	00db      	lsls	r3, r3, #3
 8001c6e:	440b      	add	r3, r1
 8001c70:	461a      	mov	r2, r3
 8001c72:	68bb      	ldr	r3, [r7, #8]
 8001c74:	60da      	str	r2, [r3, #12]
 8001c76:	e004      	b.n	8001c82 <ETH_DMATxDescListInit+0x7a>
    }
    else
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc));
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	68db      	ldr	r3, [r3, #12]
 8001c7c:	461a      	mov	r2, r3
 8001c7e:	68bb      	ldr	r3, [r7, #8]
 8001c80:	60da      	str	r2, [r3, #12]
    }

    /* Set the DMA Tx descriptors checksum insertion */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL);
 8001c82:	68bb      	ldr	r3, [r7, #8]
 8001c84:	681b      	ldr	r3, [r3, #0]
 8001c86:	f443 0240 	orr.w	r2, r3, #12582912	; 0xc00000
 8001c8a:	68bb      	ldr	r3, [r7, #8]
 8001c8c:	601a      	str	r2, [r3, #0]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8001c8e:	68fb      	ldr	r3, [r7, #12]
 8001c90:	3301      	adds	r3, #1
 8001c92:	60fb      	str	r3, [r7, #12]
 8001c94:	68fb      	ldr	r3, [r7, #12]
 8001c96:	2b03      	cmp	r3, #3
 8001c98:	d9bd      	bls.n	8001c16 <ETH_DMATxDescListInit+0xe>
  }

  heth->TxDescList.CurTxDesc = 0;
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	2200      	movs	r2, #0
 8001c9e:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMATDLAR, (uint32_t) heth->Init.TxDesc);
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	68da      	ldr	r2, [r3, #12]
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001cac:	611a      	str	r2, [r3, #16]
}
 8001cae:	bf00      	nop
 8001cb0:	3714      	adds	r7, #20
 8001cb2:	46bd      	mov	sp, r7
 8001cb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cb8:	4770      	bx	lr

08001cba <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 8001cba:	b480      	push	{r7}
 8001cbc:	b085      	sub	sp, #20
 8001cbe:	af00      	add	r7, sp, #0
 8001cc0:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8001cc2:	2300      	movs	r3, #0
 8001cc4:	60fb      	str	r3, [r7, #12]
 8001cc6:	e046      	b.n	8001d56 <ETH_DMARxDescListInit+0x9c>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	6919      	ldr	r1, [r3, #16]
 8001ccc:	68fa      	ldr	r2, [r7, #12]
 8001cce:	4613      	mov	r3, r2
 8001cd0:	009b      	lsls	r3, r3, #2
 8001cd2:	4413      	add	r3, r2
 8001cd4:	00db      	lsls	r3, r3, #3
 8001cd6:	440b      	add	r3, r1
 8001cd8:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0);
 8001cda:	68bb      	ldr	r3, [r7, #8]
 8001cdc:	2200      	movs	r2, #0
 8001cde:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0);
 8001ce0:	68bb      	ldr	r3, [r7, #8]
 8001ce2:	2200      	movs	r2, #0
 8001ce4:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0);
 8001ce6:	68bb      	ldr	r3, [r7, #8]
 8001ce8:	2200      	movs	r2, #0
 8001cea:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0);
 8001cec:	68bb      	ldr	r3, [r7, #8]
 8001cee:	2200      	movs	r2, #0
 8001cf0:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0);
 8001cf2:	68bb      	ldr	r3, [r7, #8]
 8001cf4:	2200      	movs	r2, #0
 8001cf6:	621a      	str	r2, [r3, #32]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0);
 8001cf8:	68bb      	ldr	r3, [r7, #8]
 8001cfa:	2200      	movs	r2, #0
 8001cfc:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set Own bit of the Rx descriptor Status */
    dmarxdesc->DESC0 = ETH_DMARXDESC_OWN;
 8001cfe:	68bb      	ldr	r3, [r7, #8]
 8001d00:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8001d04:	601a      	str	r2, [r3, #0]

    /* Set Buffer1 size and Second Address Chained bit */
    dmarxdesc->DESC1 = ETH_DMARXDESC_RCH | ETH_RX_BUF_SIZE;
 8001d06:	68bb      	ldr	r3, [r7, #8]
 8001d08:	f244 52f8 	movw	r2, #17912	; 0x45f8
 8001d0c:	605a      	str	r2, [r3, #4]

    /* Enable Ethernet DMA Rx Descriptor interrupt */
    dmarxdesc->DESC1 &= ~ETH_DMARXDESC_DIC;
 8001d0e:	68bb      	ldr	r3, [r7, #8]
 8001d10:	685b      	ldr	r3, [r3, #4]
 8001d12:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8001d16:	68bb      	ldr	r3, [r7, #8]
 8001d18:	605a      	str	r2, [r3, #4]

    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 8001d1a:	68b9      	ldr	r1, [r7, #8]
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	68fa      	ldr	r2, [r7, #12]
 8001d20:	3212      	adds	r2, #18
 8001d22:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    if (i < ((uint32_t)ETH_RX_DESC_CNT - 1U))
 8001d26:	68fb      	ldr	r3, [r7, #12]
 8001d28:	2b02      	cmp	r3, #2
 8001d2a:	d80c      	bhi.n	8001d46 <ETH_DMARxDescListInit+0x8c>
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc + i + 1U));
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	6919      	ldr	r1, [r3, #16]
 8001d30:	68fb      	ldr	r3, [r7, #12]
 8001d32:	1c5a      	adds	r2, r3, #1
 8001d34:	4613      	mov	r3, r2
 8001d36:	009b      	lsls	r3, r3, #2
 8001d38:	4413      	add	r3, r2
 8001d3a:	00db      	lsls	r3, r3, #3
 8001d3c:	440b      	add	r3, r1
 8001d3e:	461a      	mov	r2, r3
 8001d40:	68bb      	ldr	r3, [r7, #8]
 8001d42:	60da      	str	r2, [r3, #12]
 8001d44:	e004      	b.n	8001d50 <ETH_DMARxDescListInit+0x96>
    }
    else
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc));
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	691b      	ldr	r3, [r3, #16]
 8001d4a:	461a      	mov	r2, r3
 8001d4c:	68bb      	ldr	r3, [r7, #8]
 8001d4e:	60da      	str	r2, [r3, #12]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8001d50:	68fb      	ldr	r3, [r7, #12]
 8001d52:	3301      	adds	r3, #1
 8001d54:	60fb      	str	r3, [r7, #12]
 8001d56:	68fb      	ldr	r3, [r7, #12]
 8001d58:	2b03      	cmp	r3, #3
 8001d5a:	d9b5      	bls.n	8001cc8 <ETH_DMARxDescListInit+0xe>
    }
  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0);
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	2200      	movs	r2, #0
 8001d60:	65da      	str	r2, [r3, #92]	; 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0);
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	2200      	movs	r2, #0
 8001d66:	661a      	str	r2, [r3, #96]	; 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0);
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	2200      	movs	r2, #0
 8001d6c:	669a      	str	r2, [r3, #104]	; 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0);
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	2200      	movs	r2, #0
 8001d72:	66da      	str	r2, [r3, #108]	; 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0);
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	2200      	movs	r2, #0
 8001d78:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMARDLAR, (uint32_t) heth->Init.RxDesc);
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	691a      	ldr	r2, [r3, #16]
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	681b      	ldr	r3, [r3, #0]
 8001d82:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001d86:	60da      	str	r2, [r3, #12]
}
 8001d88:	bf00      	nop
 8001d8a:	3714      	adds	r7, #20
 8001d8c:	46bd      	mov	sp, r7
 8001d8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d92:	4770      	bx	lr

08001d94 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001d94:	b480      	push	{r7}
 8001d96:	b089      	sub	sp, #36	; 0x24
 8001d98:	af00      	add	r7, sp, #0
 8001d9a:	6078      	str	r0, [r7, #4]
 8001d9c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001d9e:	2300      	movs	r3, #0
 8001da0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001da2:	2300      	movs	r3, #0
 8001da4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001da6:	2300      	movs	r3, #0
 8001da8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001daa:	2300      	movs	r3, #0
 8001dac:	61fb      	str	r3, [r7, #28]
 8001dae:	e177      	b.n	80020a0 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001db0:	2201      	movs	r2, #1
 8001db2:	69fb      	ldr	r3, [r7, #28]
 8001db4:	fa02 f303 	lsl.w	r3, r2, r3
 8001db8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001dba:	683b      	ldr	r3, [r7, #0]
 8001dbc:	681b      	ldr	r3, [r3, #0]
 8001dbe:	697a      	ldr	r2, [r7, #20]
 8001dc0:	4013      	ands	r3, r2
 8001dc2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001dc4:	693a      	ldr	r2, [r7, #16]
 8001dc6:	697b      	ldr	r3, [r7, #20]
 8001dc8:	429a      	cmp	r2, r3
 8001dca:	f040 8166 	bne.w	800209a <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001dce:	683b      	ldr	r3, [r7, #0]
 8001dd0:	685b      	ldr	r3, [r3, #4]
 8001dd2:	f003 0303 	and.w	r3, r3, #3
 8001dd6:	2b01      	cmp	r3, #1
 8001dd8:	d005      	beq.n	8001de6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001dda:	683b      	ldr	r3, [r7, #0]
 8001ddc:	685b      	ldr	r3, [r3, #4]
 8001dde:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001de2:	2b02      	cmp	r3, #2
 8001de4:	d130      	bne.n	8001e48 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	689b      	ldr	r3, [r3, #8]
 8001dea:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001dec:	69fb      	ldr	r3, [r7, #28]
 8001dee:	005b      	lsls	r3, r3, #1
 8001df0:	2203      	movs	r2, #3
 8001df2:	fa02 f303 	lsl.w	r3, r2, r3
 8001df6:	43db      	mvns	r3, r3
 8001df8:	69ba      	ldr	r2, [r7, #24]
 8001dfa:	4013      	ands	r3, r2
 8001dfc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001dfe:	683b      	ldr	r3, [r7, #0]
 8001e00:	68da      	ldr	r2, [r3, #12]
 8001e02:	69fb      	ldr	r3, [r7, #28]
 8001e04:	005b      	lsls	r3, r3, #1
 8001e06:	fa02 f303 	lsl.w	r3, r2, r3
 8001e0a:	69ba      	ldr	r2, [r7, #24]
 8001e0c:	4313      	orrs	r3, r2
 8001e0e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	69ba      	ldr	r2, [r7, #24]
 8001e14:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	685b      	ldr	r3, [r3, #4]
 8001e1a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001e1c:	2201      	movs	r2, #1
 8001e1e:	69fb      	ldr	r3, [r7, #28]
 8001e20:	fa02 f303 	lsl.w	r3, r2, r3
 8001e24:	43db      	mvns	r3, r3
 8001e26:	69ba      	ldr	r2, [r7, #24]
 8001e28:	4013      	ands	r3, r2
 8001e2a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001e2c:	683b      	ldr	r3, [r7, #0]
 8001e2e:	685b      	ldr	r3, [r3, #4]
 8001e30:	091b      	lsrs	r3, r3, #4
 8001e32:	f003 0201 	and.w	r2, r3, #1
 8001e36:	69fb      	ldr	r3, [r7, #28]
 8001e38:	fa02 f303 	lsl.w	r3, r2, r3
 8001e3c:	69ba      	ldr	r2, [r7, #24]
 8001e3e:	4313      	orrs	r3, r2
 8001e40:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	69ba      	ldr	r2, [r7, #24]
 8001e46:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001e48:	683b      	ldr	r3, [r7, #0]
 8001e4a:	685b      	ldr	r3, [r3, #4]
 8001e4c:	f003 0303 	and.w	r3, r3, #3
 8001e50:	2b03      	cmp	r3, #3
 8001e52:	d017      	beq.n	8001e84 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	68db      	ldr	r3, [r3, #12]
 8001e58:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001e5a:	69fb      	ldr	r3, [r7, #28]
 8001e5c:	005b      	lsls	r3, r3, #1
 8001e5e:	2203      	movs	r2, #3
 8001e60:	fa02 f303 	lsl.w	r3, r2, r3
 8001e64:	43db      	mvns	r3, r3
 8001e66:	69ba      	ldr	r2, [r7, #24]
 8001e68:	4013      	ands	r3, r2
 8001e6a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001e6c:	683b      	ldr	r3, [r7, #0]
 8001e6e:	689a      	ldr	r2, [r3, #8]
 8001e70:	69fb      	ldr	r3, [r7, #28]
 8001e72:	005b      	lsls	r3, r3, #1
 8001e74:	fa02 f303 	lsl.w	r3, r2, r3
 8001e78:	69ba      	ldr	r2, [r7, #24]
 8001e7a:	4313      	orrs	r3, r2
 8001e7c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	69ba      	ldr	r2, [r7, #24]
 8001e82:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001e84:	683b      	ldr	r3, [r7, #0]
 8001e86:	685b      	ldr	r3, [r3, #4]
 8001e88:	f003 0303 	and.w	r3, r3, #3
 8001e8c:	2b02      	cmp	r3, #2
 8001e8e:	d123      	bne.n	8001ed8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001e90:	69fb      	ldr	r3, [r7, #28]
 8001e92:	08da      	lsrs	r2, r3, #3
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	3208      	adds	r2, #8
 8001e98:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001e9c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001e9e:	69fb      	ldr	r3, [r7, #28]
 8001ea0:	f003 0307 	and.w	r3, r3, #7
 8001ea4:	009b      	lsls	r3, r3, #2
 8001ea6:	220f      	movs	r2, #15
 8001ea8:	fa02 f303 	lsl.w	r3, r2, r3
 8001eac:	43db      	mvns	r3, r3
 8001eae:	69ba      	ldr	r2, [r7, #24]
 8001eb0:	4013      	ands	r3, r2
 8001eb2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001eb4:	683b      	ldr	r3, [r7, #0]
 8001eb6:	691a      	ldr	r2, [r3, #16]
 8001eb8:	69fb      	ldr	r3, [r7, #28]
 8001eba:	f003 0307 	and.w	r3, r3, #7
 8001ebe:	009b      	lsls	r3, r3, #2
 8001ec0:	fa02 f303 	lsl.w	r3, r2, r3
 8001ec4:	69ba      	ldr	r2, [r7, #24]
 8001ec6:	4313      	orrs	r3, r2
 8001ec8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001eca:	69fb      	ldr	r3, [r7, #28]
 8001ecc:	08da      	lsrs	r2, r3, #3
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	3208      	adds	r2, #8
 8001ed2:	69b9      	ldr	r1, [r7, #24]
 8001ed4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001ede:	69fb      	ldr	r3, [r7, #28]
 8001ee0:	005b      	lsls	r3, r3, #1
 8001ee2:	2203      	movs	r2, #3
 8001ee4:	fa02 f303 	lsl.w	r3, r2, r3
 8001ee8:	43db      	mvns	r3, r3
 8001eea:	69ba      	ldr	r2, [r7, #24]
 8001eec:	4013      	ands	r3, r2
 8001eee:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001ef0:	683b      	ldr	r3, [r7, #0]
 8001ef2:	685b      	ldr	r3, [r3, #4]
 8001ef4:	f003 0203 	and.w	r2, r3, #3
 8001ef8:	69fb      	ldr	r3, [r7, #28]
 8001efa:	005b      	lsls	r3, r3, #1
 8001efc:	fa02 f303 	lsl.w	r3, r2, r3
 8001f00:	69ba      	ldr	r2, [r7, #24]
 8001f02:	4313      	orrs	r3, r2
 8001f04:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	69ba      	ldr	r2, [r7, #24]
 8001f0a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001f0c:	683b      	ldr	r3, [r7, #0]
 8001f0e:	685b      	ldr	r3, [r3, #4]
 8001f10:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001f14:	2b00      	cmp	r3, #0
 8001f16:	f000 80c0 	beq.w	800209a <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001f1a:	2300      	movs	r3, #0
 8001f1c:	60fb      	str	r3, [r7, #12]
 8001f1e:	4b66      	ldr	r3, [pc, #408]	; (80020b8 <HAL_GPIO_Init+0x324>)
 8001f20:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f22:	4a65      	ldr	r2, [pc, #404]	; (80020b8 <HAL_GPIO_Init+0x324>)
 8001f24:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001f28:	6453      	str	r3, [r2, #68]	; 0x44
 8001f2a:	4b63      	ldr	r3, [pc, #396]	; (80020b8 <HAL_GPIO_Init+0x324>)
 8001f2c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f2e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001f32:	60fb      	str	r3, [r7, #12]
 8001f34:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001f36:	4a61      	ldr	r2, [pc, #388]	; (80020bc <HAL_GPIO_Init+0x328>)
 8001f38:	69fb      	ldr	r3, [r7, #28]
 8001f3a:	089b      	lsrs	r3, r3, #2
 8001f3c:	3302      	adds	r3, #2
 8001f3e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001f42:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001f44:	69fb      	ldr	r3, [r7, #28]
 8001f46:	f003 0303 	and.w	r3, r3, #3
 8001f4a:	009b      	lsls	r3, r3, #2
 8001f4c:	220f      	movs	r2, #15
 8001f4e:	fa02 f303 	lsl.w	r3, r2, r3
 8001f52:	43db      	mvns	r3, r3
 8001f54:	69ba      	ldr	r2, [r7, #24]
 8001f56:	4013      	ands	r3, r2
 8001f58:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	4a58      	ldr	r2, [pc, #352]	; (80020c0 <HAL_GPIO_Init+0x32c>)
 8001f5e:	4293      	cmp	r3, r2
 8001f60:	d037      	beq.n	8001fd2 <HAL_GPIO_Init+0x23e>
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	4a57      	ldr	r2, [pc, #348]	; (80020c4 <HAL_GPIO_Init+0x330>)
 8001f66:	4293      	cmp	r3, r2
 8001f68:	d031      	beq.n	8001fce <HAL_GPIO_Init+0x23a>
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	4a56      	ldr	r2, [pc, #344]	; (80020c8 <HAL_GPIO_Init+0x334>)
 8001f6e:	4293      	cmp	r3, r2
 8001f70:	d02b      	beq.n	8001fca <HAL_GPIO_Init+0x236>
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	4a55      	ldr	r2, [pc, #340]	; (80020cc <HAL_GPIO_Init+0x338>)
 8001f76:	4293      	cmp	r3, r2
 8001f78:	d025      	beq.n	8001fc6 <HAL_GPIO_Init+0x232>
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	4a54      	ldr	r2, [pc, #336]	; (80020d0 <HAL_GPIO_Init+0x33c>)
 8001f7e:	4293      	cmp	r3, r2
 8001f80:	d01f      	beq.n	8001fc2 <HAL_GPIO_Init+0x22e>
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	4a53      	ldr	r2, [pc, #332]	; (80020d4 <HAL_GPIO_Init+0x340>)
 8001f86:	4293      	cmp	r3, r2
 8001f88:	d019      	beq.n	8001fbe <HAL_GPIO_Init+0x22a>
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	4a52      	ldr	r2, [pc, #328]	; (80020d8 <HAL_GPIO_Init+0x344>)
 8001f8e:	4293      	cmp	r3, r2
 8001f90:	d013      	beq.n	8001fba <HAL_GPIO_Init+0x226>
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	4a51      	ldr	r2, [pc, #324]	; (80020dc <HAL_GPIO_Init+0x348>)
 8001f96:	4293      	cmp	r3, r2
 8001f98:	d00d      	beq.n	8001fb6 <HAL_GPIO_Init+0x222>
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	4a50      	ldr	r2, [pc, #320]	; (80020e0 <HAL_GPIO_Init+0x34c>)
 8001f9e:	4293      	cmp	r3, r2
 8001fa0:	d007      	beq.n	8001fb2 <HAL_GPIO_Init+0x21e>
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	4a4f      	ldr	r2, [pc, #316]	; (80020e4 <HAL_GPIO_Init+0x350>)
 8001fa6:	4293      	cmp	r3, r2
 8001fa8:	d101      	bne.n	8001fae <HAL_GPIO_Init+0x21a>
 8001faa:	2309      	movs	r3, #9
 8001fac:	e012      	b.n	8001fd4 <HAL_GPIO_Init+0x240>
 8001fae:	230a      	movs	r3, #10
 8001fb0:	e010      	b.n	8001fd4 <HAL_GPIO_Init+0x240>
 8001fb2:	2308      	movs	r3, #8
 8001fb4:	e00e      	b.n	8001fd4 <HAL_GPIO_Init+0x240>
 8001fb6:	2307      	movs	r3, #7
 8001fb8:	e00c      	b.n	8001fd4 <HAL_GPIO_Init+0x240>
 8001fba:	2306      	movs	r3, #6
 8001fbc:	e00a      	b.n	8001fd4 <HAL_GPIO_Init+0x240>
 8001fbe:	2305      	movs	r3, #5
 8001fc0:	e008      	b.n	8001fd4 <HAL_GPIO_Init+0x240>
 8001fc2:	2304      	movs	r3, #4
 8001fc4:	e006      	b.n	8001fd4 <HAL_GPIO_Init+0x240>
 8001fc6:	2303      	movs	r3, #3
 8001fc8:	e004      	b.n	8001fd4 <HAL_GPIO_Init+0x240>
 8001fca:	2302      	movs	r3, #2
 8001fcc:	e002      	b.n	8001fd4 <HAL_GPIO_Init+0x240>
 8001fce:	2301      	movs	r3, #1
 8001fd0:	e000      	b.n	8001fd4 <HAL_GPIO_Init+0x240>
 8001fd2:	2300      	movs	r3, #0
 8001fd4:	69fa      	ldr	r2, [r7, #28]
 8001fd6:	f002 0203 	and.w	r2, r2, #3
 8001fda:	0092      	lsls	r2, r2, #2
 8001fdc:	4093      	lsls	r3, r2
 8001fde:	69ba      	ldr	r2, [r7, #24]
 8001fe0:	4313      	orrs	r3, r2
 8001fe2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001fe4:	4935      	ldr	r1, [pc, #212]	; (80020bc <HAL_GPIO_Init+0x328>)
 8001fe6:	69fb      	ldr	r3, [r7, #28]
 8001fe8:	089b      	lsrs	r3, r3, #2
 8001fea:	3302      	adds	r3, #2
 8001fec:	69ba      	ldr	r2, [r7, #24]
 8001fee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001ff2:	4b3d      	ldr	r3, [pc, #244]	; (80020e8 <HAL_GPIO_Init+0x354>)
 8001ff4:	689b      	ldr	r3, [r3, #8]
 8001ff6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001ff8:	693b      	ldr	r3, [r7, #16]
 8001ffa:	43db      	mvns	r3, r3
 8001ffc:	69ba      	ldr	r2, [r7, #24]
 8001ffe:	4013      	ands	r3, r2
 8002000:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002002:	683b      	ldr	r3, [r7, #0]
 8002004:	685b      	ldr	r3, [r3, #4]
 8002006:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800200a:	2b00      	cmp	r3, #0
 800200c:	d003      	beq.n	8002016 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 800200e:	69ba      	ldr	r2, [r7, #24]
 8002010:	693b      	ldr	r3, [r7, #16]
 8002012:	4313      	orrs	r3, r2
 8002014:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002016:	4a34      	ldr	r2, [pc, #208]	; (80020e8 <HAL_GPIO_Init+0x354>)
 8002018:	69bb      	ldr	r3, [r7, #24]
 800201a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800201c:	4b32      	ldr	r3, [pc, #200]	; (80020e8 <HAL_GPIO_Init+0x354>)
 800201e:	68db      	ldr	r3, [r3, #12]
 8002020:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002022:	693b      	ldr	r3, [r7, #16]
 8002024:	43db      	mvns	r3, r3
 8002026:	69ba      	ldr	r2, [r7, #24]
 8002028:	4013      	ands	r3, r2
 800202a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800202c:	683b      	ldr	r3, [r7, #0]
 800202e:	685b      	ldr	r3, [r3, #4]
 8002030:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002034:	2b00      	cmp	r3, #0
 8002036:	d003      	beq.n	8002040 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8002038:	69ba      	ldr	r2, [r7, #24]
 800203a:	693b      	ldr	r3, [r7, #16]
 800203c:	4313      	orrs	r3, r2
 800203e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002040:	4a29      	ldr	r2, [pc, #164]	; (80020e8 <HAL_GPIO_Init+0x354>)
 8002042:	69bb      	ldr	r3, [r7, #24]
 8002044:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002046:	4b28      	ldr	r3, [pc, #160]	; (80020e8 <HAL_GPIO_Init+0x354>)
 8002048:	685b      	ldr	r3, [r3, #4]
 800204a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800204c:	693b      	ldr	r3, [r7, #16]
 800204e:	43db      	mvns	r3, r3
 8002050:	69ba      	ldr	r2, [r7, #24]
 8002052:	4013      	ands	r3, r2
 8002054:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002056:	683b      	ldr	r3, [r7, #0]
 8002058:	685b      	ldr	r3, [r3, #4]
 800205a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800205e:	2b00      	cmp	r3, #0
 8002060:	d003      	beq.n	800206a <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8002062:	69ba      	ldr	r2, [r7, #24]
 8002064:	693b      	ldr	r3, [r7, #16]
 8002066:	4313      	orrs	r3, r2
 8002068:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800206a:	4a1f      	ldr	r2, [pc, #124]	; (80020e8 <HAL_GPIO_Init+0x354>)
 800206c:	69bb      	ldr	r3, [r7, #24]
 800206e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002070:	4b1d      	ldr	r3, [pc, #116]	; (80020e8 <HAL_GPIO_Init+0x354>)
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002076:	693b      	ldr	r3, [r7, #16]
 8002078:	43db      	mvns	r3, r3
 800207a:	69ba      	ldr	r2, [r7, #24]
 800207c:	4013      	ands	r3, r2
 800207e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002080:	683b      	ldr	r3, [r7, #0]
 8002082:	685b      	ldr	r3, [r3, #4]
 8002084:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002088:	2b00      	cmp	r3, #0
 800208a:	d003      	beq.n	8002094 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 800208c:	69ba      	ldr	r2, [r7, #24]
 800208e:	693b      	ldr	r3, [r7, #16]
 8002090:	4313      	orrs	r3, r2
 8002092:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002094:	4a14      	ldr	r2, [pc, #80]	; (80020e8 <HAL_GPIO_Init+0x354>)
 8002096:	69bb      	ldr	r3, [r7, #24]
 8002098:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800209a:	69fb      	ldr	r3, [r7, #28]
 800209c:	3301      	adds	r3, #1
 800209e:	61fb      	str	r3, [r7, #28]
 80020a0:	69fb      	ldr	r3, [r7, #28]
 80020a2:	2b0f      	cmp	r3, #15
 80020a4:	f67f ae84 	bls.w	8001db0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80020a8:	bf00      	nop
 80020aa:	bf00      	nop
 80020ac:	3724      	adds	r7, #36	; 0x24
 80020ae:	46bd      	mov	sp, r7
 80020b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020b4:	4770      	bx	lr
 80020b6:	bf00      	nop
 80020b8:	40023800 	.word	0x40023800
 80020bc:	40013800 	.word	0x40013800
 80020c0:	40020000 	.word	0x40020000
 80020c4:	40020400 	.word	0x40020400
 80020c8:	40020800 	.word	0x40020800
 80020cc:	40020c00 	.word	0x40020c00
 80020d0:	40021000 	.word	0x40021000
 80020d4:	40021400 	.word	0x40021400
 80020d8:	40021800 	.word	0x40021800
 80020dc:	40021c00 	.word	0x40021c00
 80020e0:	40022000 	.word	0x40022000
 80020e4:	40022400 	.word	0x40022400
 80020e8:	40013c00 	.word	0x40013c00

080020ec <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80020ec:	b480      	push	{r7}
 80020ee:	b083      	sub	sp, #12
 80020f0:	af00      	add	r7, sp, #0
 80020f2:	6078      	str	r0, [r7, #4]
 80020f4:	460b      	mov	r3, r1
 80020f6:	807b      	strh	r3, [r7, #2]
 80020f8:	4613      	mov	r3, r2
 80020fa:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80020fc:	787b      	ldrb	r3, [r7, #1]
 80020fe:	2b00      	cmp	r3, #0
 8002100:	d003      	beq.n	800210a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002102:	887a      	ldrh	r2, [r7, #2]
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002108:	e003      	b.n	8002112 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800210a:	887b      	ldrh	r3, [r7, #2]
 800210c:	041a      	lsls	r2, r3, #16
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	619a      	str	r2, [r3, #24]
}
 8002112:	bf00      	nop
 8002114:	370c      	adds	r7, #12
 8002116:	46bd      	mov	sp, r7
 8002118:	f85d 7b04 	ldr.w	r7, [sp], #4
 800211c:	4770      	bx	lr
	...

08002120 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002120:	b580      	push	{r7, lr}
 8002122:	b084      	sub	sp, #16
 8002124:	af00      	add	r7, sp, #0
 8002126:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	2b00      	cmp	r3, #0
 800212c:	d101      	bne.n	8002132 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800212e:	2301      	movs	r3, #1
 8002130:	e12b      	b.n	800238a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002138:	b2db      	uxtb	r3, r3
 800213a:	2b00      	cmp	r3, #0
 800213c:	d106      	bne.n	800214c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	2200      	movs	r2, #0
 8002142:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002146:	6878      	ldr	r0, [r7, #4]
 8002148:	f7fe ff3e 	bl	8000fc8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	2224      	movs	r2, #36	; 0x24
 8002150:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	681a      	ldr	r2, [r3, #0]
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	f022 0201 	bic.w	r2, r2, #1
 8002162:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	681a      	ldr	r2, [r3, #0]
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002172:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	681a      	ldr	r2, [r3, #0]
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002182:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002184:	f001 fe98 	bl	8003eb8 <HAL_RCC_GetPCLK1Freq>
 8002188:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	685b      	ldr	r3, [r3, #4]
 800218e:	4a81      	ldr	r2, [pc, #516]	; (8002394 <HAL_I2C_Init+0x274>)
 8002190:	4293      	cmp	r3, r2
 8002192:	d807      	bhi.n	80021a4 <HAL_I2C_Init+0x84>
 8002194:	68fb      	ldr	r3, [r7, #12]
 8002196:	4a80      	ldr	r2, [pc, #512]	; (8002398 <HAL_I2C_Init+0x278>)
 8002198:	4293      	cmp	r3, r2
 800219a:	bf94      	ite	ls
 800219c:	2301      	movls	r3, #1
 800219e:	2300      	movhi	r3, #0
 80021a0:	b2db      	uxtb	r3, r3
 80021a2:	e006      	b.n	80021b2 <HAL_I2C_Init+0x92>
 80021a4:	68fb      	ldr	r3, [r7, #12]
 80021a6:	4a7d      	ldr	r2, [pc, #500]	; (800239c <HAL_I2C_Init+0x27c>)
 80021a8:	4293      	cmp	r3, r2
 80021aa:	bf94      	ite	ls
 80021ac:	2301      	movls	r3, #1
 80021ae:	2300      	movhi	r3, #0
 80021b0:	b2db      	uxtb	r3, r3
 80021b2:	2b00      	cmp	r3, #0
 80021b4:	d001      	beq.n	80021ba <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80021b6:	2301      	movs	r3, #1
 80021b8:	e0e7      	b.n	800238a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80021ba:	68fb      	ldr	r3, [r7, #12]
 80021bc:	4a78      	ldr	r2, [pc, #480]	; (80023a0 <HAL_I2C_Init+0x280>)
 80021be:	fba2 2303 	umull	r2, r3, r2, r3
 80021c2:	0c9b      	lsrs	r3, r3, #18
 80021c4:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	685b      	ldr	r3, [r3, #4]
 80021cc:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	68ba      	ldr	r2, [r7, #8]
 80021d6:	430a      	orrs	r2, r1
 80021d8:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	6a1b      	ldr	r3, [r3, #32]
 80021e0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	685b      	ldr	r3, [r3, #4]
 80021e8:	4a6a      	ldr	r2, [pc, #424]	; (8002394 <HAL_I2C_Init+0x274>)
 80021ea:	4293      	cmp	r3, r2
 80021ec:	d802      	bhi.n	80021f4 <HAL_I2C_Init+0xd4>
 80021ee:	68bb      	ldr	r3, [r7, #8]
 80021f0:	3301      	adds	r3, #1
 80021f2:	e009      	b.n	8002208 <HAL_I2C_Init+0xe8>
 80021f4:	68bb      	ldr	r3, [r7, #8]
 80021f6:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80021fa:	fb02 f303 	mul.w	r3, r2, r3
 80021fe:	4a69      	ldr	r2, [pc, #420]	; (80023a4 <HAL_I2C_Init+0x284>)
 8002200:	fba2 2303 	umull	r2, r3, r2, r3
 8002204:	099b      	lsrs	r3, r3, #6
 8002206:	3301      	adds	r3, #1
 8002208:	687a      	ldr	r2, [r7, #4]
 800220a:	6812      	ldr	r2, [r2, #0]
 800220c:	430b      	orrs	r3, r1
 800220e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	69db      	ldr	r3, [r3, #28]
 8002216:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800221a:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	685b      	ldr	r3, [r3, #4]
 8002222:	495c      	ldr	r1, [pc, #368]	; (8002394 <HAL_I2C_Init+0x274>)
 8002224:	428b      	cmp	r3, r1
 8002226:	d819      	bhi.n	800225c <HAL_I2C_Init+0x13c>
 8002228:	68fb      	ldr	r3, [r7, #12]
 800222a:	1e59      	subs	r1, r3, #1
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	685b      	ldr	r3, [r3, #4]
 8002230:	005b      	lsls	r3, r3, #1
 8002232:	fbb1 f3f3 	udiv	r3, r1, r3
 8002236:	1c59      	adds	r1, r3, #1
 8002238:	f640 73fc 	movw	r3, #4092	; 0xffc
 800223c:	400b      	ands	r3, r1
 800223e:	2b00      	cmp	r3, #0
 8002240:	d00a      	beq.n	8002258 <HAL_I2C_Init+0x138>
 8002242:	68fb      	ldr	r3, [r7, #12]
 8002244:	1e59      	subs	r1, r3, #1
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	685b      	ldr	r3, [r3, #4]
 800224a:	005b      	lsls	r3, r3, #1
 800224c:	fbb1 f3f3 	udiv	r3, r1, r3
 8002250:	3301      	adds	r3, #1
 8002252:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002256:	e051      	b.n	80022fc <HAL_I2C_Init+0x1dc>
 8002258:	2304      	movs	r3, #4
 800225a:	e04f      	b.n	80022fc <HAL_I2C_Init+0x1dc>
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	689b      	ldr	r3, [r3, #8]
 8002260:	2b00      	cmp	r3, #0
 8002262:	d111      	bne.n	8002288 <HAL_I2C_Init+0x168>
 8002264:	68fb      	ldr	r3, [r7, #12]
 8002266:	1e58      	subs	r0, r3, #1
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	6859      	ldr	r1, [r3, #4]
 800226c:	460b      	mov	r3, r1
 800226e:	005b      	lsls	r3, r3, #1
 8002270:	440b      	add	r3, r1
 8002272:	fbb0 f3f3 	udiv	r3, r0, r3
 8002276:	3301      	adds	r3, #1
 8002278:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800227c:	2b00      	cmp	r3, #0
 800227e:	bf0c      	ite	eq
 8002280:	2301      	moveq	r3, #1
 8002282:	2300      	movne	r3, #0
 8002284:	b2db      	uxtb	r3, r3
 8002286:	e012      	b.n	80022ae <HAL_I2C_Init+0x18e>
 8002288:	68fb      	ldr	r3, [r7, #12]
 800228a:	1e58      	subs	r0, r3, #1
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	6859      	ldr	r1, [r3, #4]
 8002290:	460b      	mov	r3, r1
 8002292:	009b      	lsls	r3, r3, #2
 8002294:	440b      	add	r3, r1
 8002296:	0099      	lsls	r1, r3, #2
 8002298:	440b      	add	r3, r1
 800229a:	fbb0 f3f3 	udiv	r3, r0, r3
 800229e:	3301      	adds	r3, #1
 80022a0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80022a4:	2b00      	cmp	r3, #0
 80022a6:	bf0c      	ite	eq
 80022a8:	2301      	moveq	r3, #1
 80022aa:	2300      	movne	r3, #0
 80022ac:	b2db      	uxtb	r3, r3
 80022ae:	2b00      	cmp	r3, #0
 80022b0:	d001      	beq.n	80022b6 <HAL_I2C_Init+0x196>
 80022b2:	2301      	movs	r3, #1
 80022b4:	e022      	b.n	80022fc <HAL_I2C_Init+0x1dc>
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	689b      	ldr	r3, [r3, #8]
 80022ba:	2b00      	cmp	r3, #0
 80022bc:	d10e      	bne.n	80022dc <HAL_I2C_Init+0x1bc>
 80022be:	68fb      	ldr	r3, [r7, #12]
 80022c0:	1e58      	subs	r0, r3, #1
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	6859      	ldr	r1, [r3, #4]
 80022c6:	460b      	mov	r3, r1
 80022c8:	005b      	lsls	r3, r3, #1
 80022ca:	440b      	add	r3, r1
 80022cc:	fbb0 f3f3 	udiv	r3, r0, r3
 80022d0:	3301      	adds	r3, #1
 80022d2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80022d6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80022da:	e00f      	b.n	80022fc <HAL_I2C_Init+0x1dc>
 80022dc:	68fb      	ldr	r3, [r7, #12]
 80022de:	1e58      	subs	r0, r3, #1
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	6859      	ldr	r1, [r3, #4]
 80022e4:	460b      	mov	r3, r1
 80022e6:	009b      	lsls	r3, r3, #2
 80022e8:	440b      	add	r3, r1
 80022ea:	0099      	lsls	r1, r3, #2
 80022ec:	440b      	add	r3, r1
 80022ee:	fbb0 f3f3 	udiv	r3, r0, r3
 80022f2:	3301      	adds	r3, #1
 80022f4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80022f8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80022fc:	6879      	ldr	r1, [r7, #4]
 80022fe:	6809      	ldr	r1, [r1, #0]
 8002300:	4313      	orrs	r3, r2
 8002302:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	69da      	ldr	r2, [r3, #28]
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	6a1b      	ldr	r3, [r3, #32]
 8002316:	431a      	orrs	r2, r3
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	430a      	orrs	r2, r1
 800231e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	689b      	ldr	r3, [r3, #8]
 8002326:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800232a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800232e:	687a      	ldr	r2, [r7, #4]
 8002330:	6911      	ldr	r1, [r2, #16]
 8002332:	687a      	ldr	r2, [r7, #4]
 8002334:	68d2      	ldr	r2, [r2, #12]
 8002336:	4311      	orrs	r1, r2
 8002338:	687a      	ldr	r2, [r7, #4]
 800233a:	6812      	ldr	r2, [r2, #0]
 800233c:	430b      	orrs	r3, r1
 800233e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	68db      	ldr	r3, [r3, #12]
 8002346:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	695a      	ldr	r2, [r3, #20]
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	699b      	ldr	r3, [r3, #24]
 8002352:	431a      	orrs	r2, r3
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	430a      	orrs	r2, r1
 800235a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	681a      	ldr	r2, [r3, #0]
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	f042 0201 	orr.w	r2, r2, #1
 800236a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	2200      	movs	r2, #0
 8002370:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	2220      	movs	r2, #32
 8002376:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	2200      	movs	r2, #0
 800237e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	2200      	movs	r2, #0
 8002384:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002388:	2300      	movs	r3, #0
}
 800238a:	4618      	mov	r0, r3
 800238c:	3710      	adds	r7, #16
 800238e:	46bd      	mov	sp, r7
 8002390:	bd80      	pop	{r7, pc}
 8002392:	bf00      	nop
 8002394:	000186a0 	.word	0x000186a0
 8002398:	001e847f 	.word	0x001e847f
 800239c:	003d08ff 	.word	0x003d08ff
 80023a0:	431bde83 	.word	0x431bde83
 80023a4:	10624dd3 	.word	0x10624dd3

080023a8 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80023a8:	b580      	push	{r7, lr}
 80023aa:	b088      	sub	sp, #32
 80023ac:	af02      	add	r7, sp, #8
 80023ae:	60f8      	str	r0, [r7, #12]
 80023b0:	607a      	str	r2, [r7, #4]
 80023b2:	461a      	mov	r2, r3
 80023b4:	460b      	mov	r3, r1
 80023b6:	817b      	strh	r3, [r7, #10]
 80023b8:	4613      	mov	r3, r2
 80023ba:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80023bc:	f7ff f802 	bl	80013c4 <HAL_GetTick>
 80023c0:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 80023c2:	68fb      	ldr	r3, [r7, #12]
 80023c4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80023c8:	b2db      	uxtb	r3, r3
 80023ca:	2b20      	cmp	r3, #32
 80023cc:	f040 80e0 	bne.w	8002590 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80023d0:	697b      	ldr	r3, [r7, #20]
 80023d2:	9300      	str	r3, [sp, #0]
 80023d4:	2319      	movs	r3, #25
 80023d6:	2201      	movs	r2, #1
 80023d8:	4970      	ldr	r1, [pc, #448]	; (800259c <HAL_I2C_Master_Transmit+0x1f4>)
 80023da:	68f8      	ldr	r0, [r7, #12]
 80023dc:	f000 fd86 	bl	8002eec <I2C_WaitOnFlagUntilTimeout>
 80023e0:	4603      	mov	r3, r0
 80023e2:	2b00      	cmp	r3, #0
 80023e4:	d001      	beq.n	80023ea <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 80023e6:	2302      	movs	r3, #2
 80023e8:	e0d3      	b.n	8002592 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80023ea:	68fb      	ldr	r3, [r7, #12]
 80023ec:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80023f0:	2b01      	cmp	r3, #1
 80023f2:	d101      	bne.n	80023f8 <HAL_I2C_Master_Transmit+0x50>
 80023f4:	2302      	movs	r3, #2
 80023f6:	e0cc      	b.n	8002592 <HAL_I2C_Master_Transmit+0x1ea>
 80023f8:	68fb      	ldr	r3, [r7, #12]
 80023fa:	2201      	movs	r2, #1
 80023fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002400:	68fb      	ldr	r3, [r7, #12]
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	f003 0301 	and.w	r3, r3, #1
 800240a:	2b01      	cmp	r3, #1
 800240c:	d007      	beq.n	800241e <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800240e:	68fb      	ldr	r3, [r7, #12]
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	681a      	ldr	r2, [r3, #0]
 8002414:	68fb      	ldr	r3, [r7, #12]
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	f042 0201 	orr.w	r2, r2, #1
 800241c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800241e:	68fb      	ldr	r3, [r7, #12]
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	681a      	ldr	r2, [r3, #0]
 8002424:	68fb      	ldr	r3, [r7, #12]
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800242c:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 800242e:	68fb      	ldr	r3, [r7, #12]
 8002430:	2221      	movs	r2, #33	; 0x21
 8002432:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8002436:	68fb      	ldr	r3, [r7, #12]
 8002438:	2210      	movs	r2, #16
 800243a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800243e:	68fb      	ldr	r3, [r7, #12]
 8002440:	2200      	movs	r2, #0
 8002442:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002444:	68fb      	ldr	r3, [r7, #12]
 8002446:	687a      	ldr	r2, [r7, #4]
 8002448:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800244a:	68fb      	ldr	r3, [r7, #12]
 800244c:	893a      	ldrh	r2, [r7, #8]
 800244e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002450:	68fb      	ldr	r3, [r7, #12]
 8002452:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002454:	b29a      	uxth	r2, r3
 8002456:	68fb      	ldr	r3, [r7, #12]
 8002458:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800245a:	68fb      	ldr	r3, [r7, #12]
 800245c:	4a50      	ldr	r2, [pc, #320]	; (80025a0 <HAL_I2C_Master_Transmit+0x1f8>)
 800245e:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8002460:	8979      	ldrh	r1, [r7, #10]
 8002462:	697b      	ldr	r3, [r7, #20]
 8002464:	6a3a      	ldr	r2, [r7, #32]
 8002466:	68f8      	ldr	r0, [r7, #12]
 8002468:	f000 fbf0 	bl	8002c4c <I2C_MasterRequestWrite>
 800246c:	4603      	mov	r3, r0
 800246e:	2b00      	cmp	r3, #0
 8002470:	d001      	beq.n	8002476 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8002472:	2301      	movs	r3, #1
 8002474:	e08d      	b.n	8002592 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002476:	2300      	movs	r3, #0
 8002478:	613b      	str	r3, [r7, #16]
 800247a:	68fb      	ldr	r3, [r7, #12]
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	695b      	ldr	r3, [r3, #20]
 8002480:	613b      	str	r3, [r7, #16]
 8002482:	68fb      	ldr	r3, [r7, #12]
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	699b      	ldr	r3, [r3, #24]
 8002488:	613b      	str	r3, [r7, #16]
 800248a:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 800248c:	e066      	b.n	800255c <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800248e:	697a      	ldr	r2, [r7, #20]
 8002490:	6a39      	ldr	r1, [r7, #32]
 8002492:	68f8      	ldr	r0, [r7, #12]
 8002494:	f000 fe00 	bl	8003098 <I2C_WaitOnTXEFlagUntilTimeout>
 8002498:	4603      	mov	r3, r0
 800249a:	2b00      	cmp	r3, #0
 800249c:	d00d      	beq.n	80024ba <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800249e:	68fb      	ldr	r3, [r7, #12]
 80024a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024a2:	2b04      	cmp	r3, #4
 80024a4:	d107      	bne.n	80024b6 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80024a6:	68fb      	ldr	r3, [r7, #12]
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	681a      	ldr	r2, [r3, #0]
 80024ac:	68fb      	ldr	r3, [r7, #12]
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80024b4:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80024b6:	2301      	movs	r3, #1
 80024b8:	e06b      	b.n	8002592 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80024ba:	68fb      	ldr	r3, [r7, #12]
 80024bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024be:	781a      	ldrb	r2, [r3, #0]
 80024c0:	68fb      	ldr	r3, [r7, #12]
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80024c6:	68fb      	ldr	r3, [r7, #12]
 80024c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024ca:	1c5a      	adds	r2, r3, #1
 80024cc:	68fb      	ldr	r3, [r7, #12]
 80024ce:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80024d0:	68fb      	ldr	r3, [r7, #12]
 80024d2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80024d4:	b29b      	uxth	r3, r3
 80024d6:	3b01      	subs	r3, #1
 80024d8:	b29a      	uxth	r2, r3
 80024da:	68fb      	ldr	r3, [r7, #12]
 80024dc:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80024de:	68fb      	ldr	r3, [r7, #12]
 80024e0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80024e2:	3b01      	subs	r3, #1
 80024e4:	b29a      	uxth	r2, r3
 80024e6:	68fb      	ldr	r3, [r7, #12]
 80024e8:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80024ea:	68fb      	ldr	r3, [r7, #12]
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	695b      	ldr	r3, [r3, #20]
 80024f0:	f003 0304 	and.w	r3, r3, #4
 80024f4:	2b04      	cmp	r3, #4
 80024f6:	d11b      	bne.n	8002530 <HAL_I2C_Master_Transmit+0x188>
 80024f8:	68fb      	ldr	r3, [r7, #12]
 80024fa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80024fc:	2b00      	cmp	r3, #0
 80024fe:	d017      	beq.n	8002530 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002500:	68fb      	ldr	r3, [r7, #12]
 8002502:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002504:	781a      	ldrb	r2, [r3, #0]
 8002506:	68fb      	ldr	r3, [r7, #12]
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800250c:	68fb      	ldr	r3, [r7, #12]
 800250e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002510:	1c5a      	adds	r2, r3, #1
 8002512:	68fb      	ldr	r3, [r7, #12]
 8002514:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8002516:	68fb      	ldr	r3, [r7, #12]
 8002518:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800251a:	b29b      	uxth	r3, r3
 800251c:	3b01      	subs	r3, #1
 800251e:	b29a      	uxth	r2, r3
 8002520:	68fb      	ldr	r3, [r7, #12]
 8002522:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8002524:	68fb      	ldr	r3, [r7, #12]
 8002526:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002528:	3b01      	subs	r3, #1
 800252a:	b29a      	uxth	r2, r3
 800252c:	68fb      	ldr	r3, [r7, #12]
 800252e:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002530:	697a      	ldr	r2, [r7, #20]
 8002532:	6a39      	ldr	r1, [r7, #32]
 8002534:	68f8      	ldr	r0, [r7, #12]
 8002536:	f000 fdf0 	bl	800311a <I2C_WaitOnBTFFlagUntilTimeout>
 800253a:	4603      	mov	r3, r0
 800253c:	2b00      	cmp	r3, #0
 800253e:	d00d      	beq.n	800255c <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002540:	68fb      	ldr	r3, [r7, #12]
 8002542:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002544:	2b04      	cmp	r3, #4
 8002546:	d107      	bne.n	8002558 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002548:	68fb      	ldr	r3, [r7, #12]
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	681a      	ldr	r2, [r3, #0]
 800254e:	68fb      	ldr	r3, [r7, #12]
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002556:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002558:	2301      	movs	r3, #1
 800255a:	e01a      	b.n	8002592 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 800255c:	68fb      	ldr	r3, [r7, #12]
 800255e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002560:	2b00      	cmp	r3, #0
 8002562:	d194      	bne.n	800248e <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002564:	68fb      	ldr	r3, [r7, #12]
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	681a      	ldr	r2, [r3, #0]
 800256a:	68fb      	ldr	r3, [r7, #12]
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002572:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002574:	68fb      	ldr	r3, [r7, #12]
 8002576:	2220      	movs	r2, #32
 8002578:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800257c:	68fb      	ldr	r3, [r7, #12]
 800257e:	2200      	movs	r2, #0
 8002580:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002584:	68fb      	ldr	r3, [r7, #12]
 8002586:	2200      	movs	r2, #0
 8002588:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800258c:	2300      	movs	r3, #0
 800258e:	e000      	b.n	8002592 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8002590:	2302      	movs	r3, #2
  }
}
 8002592:	4618      	mov	r0, r3
 8002594:	3718      	adds	r7, #24
 8002596:	46bd      	mov	sp, r7
 8002598:	bd80      	pop	{r7, pc}
 800259a:	bf00      	nop
 800259c:	00100002 	.word	0x00100002
 80025a0:	ffff0000 	.word	0xffff0000

080025a4 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80025a4:	b580      	push	{r7, lr}
 80025a6:	b08c      	sub	sp, #48	; 0x30
 80025a8:	af02      	add	r7, sp, #8
 80025aa:	60f8      	str	r0, [r7, #12]
 80025ac:	607a      	str	r2, [r7, #4]
 80025ae:	461a      	mov	r2, r3
 80025b0:	460b      	mov	r3, r1
 80025b2:	817b      	strh	r3, [r7, #10]
 80025b4:	4613      	mov	r3, r2
 80025b6:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80025b8:	f7fe ff04 	bl	80013c4 <HAL_GetTick>
 80025bc:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 80025be:	68fb      	ldr	r3, [r7, #12]
 80025c0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80025c4:	b2db      	uxtb	r3, r3
 80025c6:	2b20      	cmp	r3, #32
 80025c8:	f040 820b 	bne.w	80029e2 <HAL_I2C_Master_Receive+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80025cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025ce:	9300      	str	r3, [sp, #0]
 80025d0:	2319      	movs	r3, #25
 80025d2:	2201      	movs	r2, #1
 80025d4:	497c      	ldr	r1, [pc, #496]	; (80027c8 <HAL_I2C_Master_Receive+0x224>)
 80025d6:	68f8      	ldr	r0, [r7, #12]
 80025d8:	f000 fc88 	bl	8002eec <I2C_WaitOnFlagUntilTimeout>
 80025dc:	4603      	mov	r3, r0
 80025de:	2b00      	cmp	r3, #0
 80025e0:	d001      	beq.n	80025e6 <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 80025e2:	2302      	movs	r3, #2
 80025e4:	e1fe      	b.n	80029e4 <HAL_I2C_Master_Receive+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80025e6:	68fb      	ldr	r3, [r7, #12]
 80025e8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80025ec:	2b01      	cmp	r3, #1
 80025ee:	d101      	bne.n	80025f4 <HAL_I2C_Master_Receive+0x50>
 80025f0:	2302      	movs	r3, #2
 80025f2:	e1f7      	b.n	80029e4 <HAL_I2C_Master_Receive+0x440>
 80025f4:	68fb      	ldr	r3, [r7, #12]
 80025f6:	2201      	movs	r2, #1
 80025f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80025fc:	68fb      	ldr	r3, [r7, #12]
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	f003 0301 	and.w	r3, r3, #1
 8002606:	2b01      	cmp	r3, #1
 8002608:	d007      	beq.n	800261a <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800260a:	68fb      	ldr	r3, [r7, #12]
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	681a      	ldr	r2, [r3, #0]
 8002610:	68fb      	ldr	r3, [r7, #12]
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	f042 0201 	orr.w	r2, r2, #1
 8002618:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800261a:	68fb      	ldr	r3, [r7, #12]
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	681a      	ldr	r2, [r3, #0]
 8002620:	68fb      	ldr	r3, [r7, #12]
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002628:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 800262a:	68fb      	ldr	r3, [r7, #12]
 800262c:	2222      	movs	r2, #34	; 0x22
 800262e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8002632:	68fb      	ldr	r3, [r7, #12]
 8002634:	2210      	movs	r2, #16
 8002636:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800263a:	68fb      	ldr	r3, [r7, #12]
 800263c:	2200      	movs	r2, #0
 800263e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002640:	68fb      	ldr	r3, [r7, #12]
 8002642:	687a      	ldr	r2, [r7, #4]
 8002644:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002646:	68fb      	ldr	r3, [r7, #12]
 8002648:	893a      	ldrh	r2, [r7, #8]
 800264a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800264c:	68fb      	ldr	r3, [r7, #12]
 800264e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002650:	b29a      	uxth	r2, r3
 8002652:	68fb      	ldr	r3, [r7, #12]
 8002654:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002656:	68fb      	ldr	r3, [r7, #12]
 8002658:	4a5c      	ldr	r2, [pc, #368]	; (80027cc <HAL_I2C_Master_Receive+0x228>)
 800265a:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 800265c:	8979      	ldrh	r1, [r7, #10]
 800265e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002660:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002662:	68f8      	ldr	r0, [r7, #12]
 8002664:	f000 fb74 	bl	8002d50 <I2C_MasterRequestRead>
 8002668:	4603      	mov	r3, r0
 800266a:	2b00      	cmp	r3, #0
 800266c:	d001      	beq.n	8002672 <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 800266e:	2301      	movs	r3, #1
 8002670:	e1b8      	b.n	80029e4 <HAL_I2C_Master_Receive+0x440>
    }

    if (hi2c->XferSize == 0U)
 8002672:	68fb      	ldr	r3, [r7, #12]
 8002674:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002676:	2b00      	cmp	r3, #0
 8002678:	d113      	bne.n	80026a2 <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800267a:	2300      	movs	r3, #0
 800267c:	623b      	str	r3, [r7, #32]
 800267e:	68fb      	ldr	r3, [r7, #12]
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	695b      	ldr	r3, [r3, #20]
 8002684:	623b      	str	r3, [r7, #32]
 8002686:	68fb      	ldr	r3, [r7, #12]
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	699b      	ldr	r3, [r3, #24]
 800268c:	623b      	str	r3, [r7, #32]
 800268e:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002690:	68fb      	ldr	r3, [r7, #12]
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	681a      	ldr	r2, [r3, #0]
 8002696:	68fb      	ldr	r3, [r7, #12]
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800269e:	601a      	str	r2, [r3, #0]
 80026a0:	e18c      	b.n	80029bc <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 1U)
 80026a2:	68fb      	ldr	r3, [r7, #12]
 80026a4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80026a6:	2b01      	cmp	r3, #1
 80026a8:	d11b      	bne.n	80026e2 <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80026aa:	68fb      	ldr	r3, [r7, #12]
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	681a      	ldr	r2, [r3, #0]
 80026b0:	68fb      	ldr	r3, [r7, #12]
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80026b8:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80026ba:	2300      	movs	r3, #0
 80026bc:	61fb      	str	r3, [r7, #28]
 80026be:	68fb      	ldr	r3, [r7, #12]
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	695b      	ldr	r3, [r3, #20]
 80026c4:	61fb      	str	r3, [r7, #28]
 80026c6:	68fb      	ldr	r3, [r7, #12]
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	699b      	ldr	r3, [r3, #24]
 80026cc:	61fb      	str	r3, [r7, #28]
 80026ce:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80026d0:	68fb      	ldr	r3, [r7, #12]
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	681a      	ldr	r2, [r3, #0]
 80026d6:	68fb      	ldr	r3, [r7, #12]
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80026de:	601a      	str	r2, [r3, #0]
 80026e0:	e16c      	b.n	80029bc <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 2U)
 80026e2:	68fb      	ldr	r3, [r7, #12]
 80026e4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80026e6:	2b02      	cmp	r3, #2
 80026e8:	d11b      	bne.n	8002722 <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80026ea:	68fb      	ldr	r3, [r7, #12]
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	681a      	ldr	r2, [r3, #0]
 80026f0:	68fb      	ldr	r3, [r7, #12]
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80026f8:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80026fa:	68fb      	ldr	r3, [r7, #12]
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	681a      	ldr	r2, [r3, #0]
 8002700:	68fb      	ldr	r3, [r7, #12]
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002708:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800270a:	2300      	movs	r3, #0
 800270c:	61bb      	str	r3, [r7, #24]
 800270e:	68fb      	ldr	r3, [r7, #12]
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	695b      	ldr	r3, [r3, #20]
 8002714:	61bb      	str	r3, [r7, #24]
 8002716:	68fb      	ldr	r3, [r7, #12]
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	699b      	ldr	r3, [r3, #24]
 800271c:	61bb      	str	r3, [r7, #24]
 800271e:	69bb      	ldr	r3, [r7, #24]
 8002720:	e14c      	b.n	80029bc <HAL_I2C_Master_Receive+0x418>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002722:	68fb      	ldr	r3, [r7, #12]
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	681a      	ldr	r2, [r3, #0]
 8002728:	68fb      	ldr	r3, [r7, #12]
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002730:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002732:	2300      	movs	r3, #0
 8002734:	617b      	str	r3, [r7, #20]
 8002736:	68fb      	ldr	r3, [r7, #12]
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	695b      	ldr	r3, [r3, #20]
 800273c:	617b      	str	r3, [r7, #20]
 800273e:	68fb      	ldr	r3, [r7, #12]
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	699b      	ldr	r3, [r3, #24]
 8002744:	617b      	str	r3, [r7, #20]
 8002746:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8002748:	e138      	b.n	80029bc <HAL_I2C_Master_Receive+0x418>
    {
      if (hi2c->XferSize <= 3U)
 800274a:	68fb      	ldr	r3, [r7, #12]
 800274c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800274e:	2b03      	cmp	r3, #3
 8002750:	f200 80f1 	bhi.w	8002936 <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8002754:	68fb      	ldr	r3, [r7, #12]
 8002756:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002758:	2b01      	cmp	r3, #1
 800275a:	d123      	bne.n	80027a4 <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800275c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800275e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8002760:	68f8      	ldr	r0, [r7, #12]
 8002762:	f000 fd1b 	bl	800319c <I2C_WaitOnRXNEFlagUntilTimeout>
 8002766:	4603      	mov	r3, r0
 8002768:	2b00      	cmp	r3, #0
 800276a:	d001      	beq.n	8002770 <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 800276c:	2301      	movs	r3, #1
 800276e:	e139      	b.n	80029e4 <HAL_I2C_Master_Receive+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002770:	68fb      	ldr	r3, [r7, #12]
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	691a      	ldr	r2, [r3, #16]
 8002776:	68fb      	ldr	r3, [r7, #12]
 8002778:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800277a:	b2d2      	uxtb	r2, r2
 800277c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800277e:	68fb      	ldr	r3, [r7, #12]
 8002780:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002782:	1c5a      	adds	r2, r3, #1
 8002784:	68fb      	ldr	r3, [r7, #12]
 8002786:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002788:	68fb      	ldr	r3, [r7, #12]
 800278a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800278c:	3b01      	subs	r3, #1
 800278e:	b29a      	uxth	r2, r3
 8002790:	68fb      	ldr	r3, [r7, #12]
 8002792:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002794:	68fb      	ldr	r3, [r7, #12]
 8002796:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002798:	b29b      	uxth	r3, r3
 800279a:	3b01      	subs	r3, #1
 800279c:	b29a      	uxth	r2, r3
 800279e:	68fb      	ldr	r3, [r7, #12]
 80027a0:	855a      	strh	r2, [r3, #42]	; 0x2a
 80027a2:	e10b      	b.n	80029bc <HAL_I2C_Master_Receive+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 80027a4:	68fb      	ldr	r3, [r7, #12]
 80027a6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80027a8:	2b02      	cmp	r3, #2
 80027aa:	d14e      	bne.n	800284a <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80027ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027ae:	9300      	str	r3, [sp, #0]
 80027b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80027b2:	2200      	movs	r2, #0
 80027b4:	4906      	ldr	r1, [pc, #24]	; (80027d0 <HAL_I2C_Master_Receive+0x22c>)
 80027b6:	68f8      	ldr	r0, [r7, #12]
 80027b8:	f000 fb98 	bl	8002eec <I2C_WaitOnFlagUntilTimeout>
 80027bc:	4603      	mov	r3, r0
 80027be:	2b00      	cmp	r3, #0
 80027c0:	d008      	beq.n	80027d4 <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 80027c2:	2301      	movs	r3, #1
 80027c4:	e10e      	b.n	80029e4 <HAL_I2C_Master_Receive+0x440>
 80027c6:	bf00      	nop
 80027c8:	00100002 	.word	0x00100002
 80027cc:	ffff0000 	.word	0xffff0000
 80027d0:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80027d4:	68fb      	ldr	r3, [r7, #12]
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	681a      	ldr	r2, [r3, #0]
 80027da:	68fb      	ldr	r3, [r7, #12]
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80027e2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80027e4:	68fb      	ldr	r3, [r7, #12]
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	691a      	ldr	r2, [r3, #16]
 80027ea:	68fb      	ldr	r3, [r7, #12]
 80027ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027ee:	b2d2      	uxtb	r2, r2
 80027f0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80027f2:	68fb      	ldr	r3, [r7, #12]
 80027f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027f6:	1c5a      	adds	r2, r3, #1
 80027f8:	68fb      	ldr	r3, [r7, #12]
 80027fa:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80027fc:	68fb      	ldr	r3, [r7, #12]
 80027fe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002800:	3b01      	subs	r3, #1
 8002802:	b29a      	uxth	r2, r3
 8002804:	68fb      	ldr	r3, [r7, #12]
 8002806:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002808:	68fb      	ldr	r3, [r7, #12]
 800280a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800280c:	b29b      	uxth	r3, r3
 800280e:	3b01      	subs	r3, #1
 8002810:	b29a      	uxth	r2, r3
 8002812:	68fb      	ldr	r3, [r7, #12]
 8002814:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002816:	68fb      	ldr	r3, [r7, #12]
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	691a      	ldr	r2, [r3, #16]
 800281c:	68fb      	ldr	r3, [r7, #12]
 800281e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002820:	b2d2      	uxtb	r2, r2
 8002822:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002824:	68fb      	ldr	r3, [r7, #12]
 8002826:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002828:	1c5a      	adds	r2, r3, #1
 800282a:	68fb      	ldr	r3, [r7, #12]
 800282c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800282e:	68fb      	ldr	r3, [r7, #12]
 8002830:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002832:	3b01      	subs	r3, #1
 8002834:	b29a      	uxth	r2, r3
 8002836:	68fb      	ldr	r3, [r7, #12]
 8002838:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800283a:	68fb      	ldr	r3, [r7, #12]
 800283c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800283e:	b29b      	uxth	r3, r3
 8002840:	3b01      	subs	r3, #1
 8002842:	b29a      	uxth	r2, r3
 8002844:	68fb      	ldr	r3, [r7, #12]
 8002846:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002848:	e0b8      	b.n	80029bc <HAL_I2C_Master_Receive+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800284a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800284c:	9300      	str	r3, [sp, #0]
 800284e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002850:	2200      	movs	r2, #0
 8002852:	4966      	ldr	r1, [pc, #408]	; (80029ec <HAL_I2C_Master_Receive+0x448>)
 8002854:	68f8      	ldr	r0, [r7, #12]
 8002856:	f000 fb49 	bl	8002eec <I2C_WaitOnFlagUntilTimeout>
 800285a:	4603      	mov	r3, r0
 800285c:	2b00      	cmp	r3, #0
 800285e:	d001      	beq.n	8002864 <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 8002860:	2301      	movs	r3, #1
 8002862:	e0bf      	b.n	80029e4 <HAL_I2C_Master_Receive+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002864:	68fb      	ldr	r3, [r7, #12]
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	681a      	ldr	r2, [r3, #0]
 800286a:	68fb      	ldr	r3, [r7, #12]
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002872:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002874:	68fb      	ldr	r3, [r7, #12]
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	691a      	ldr	r2, [r3, #16]
 800287a:	68fb      	ldr	r3, [r7, #12]
 800287c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800287e:	b2d2      	uxtb	r2, r2
 8002880:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002882:	68fb      	ldr	r3, [r7, #12]
 8002884:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002886:	1c5a      	adds	r2, r3, #1
 8002888:	68fb      	ldr	r3, [r7, #12]
 800288a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800288c:	68fb      	ldr	r3, [r7, #12]
 800288e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002890:	3b01      	subs	r3, #1
 8002892:	b29a      	uxth	r2, r3
 8002894:	68fb      	ldr	r3, [r7, #12]
 8002896:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002898:	68fb      	ldr	r3, [r7, #12]
 800289a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800289c:	b29b      	uxth	r3, r3
 800289e:	3b01      	subs	r3, #1
 80028a0:	b29a      	uxth	r2, r3
 80028a2:	68fb      	ldr	r3, [r7, #12]
 80028a4:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80028a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028a8:	9300      	str	r3, [sp, #0]
 80028aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80028ac:	2200      	movs	r2, #0
 80028ae:	494f      	ldr	r1, [pc, #316]	; (80029ec <HAL_I2C_Master_Receive+0x448>)
 80028b0:	68f8      	ldr	r0, [r7, #12]
 80028b2:	f000 fb1b 	bl	8002eec <I2C_WaitOnFlagUntilTimeout>
 80028b6:	4603      	mov	r3, r0
 80028b8:	2b00      	cmp	r3, #0
 80028ba:	d001      	beq.n	80028c0 <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 80028bc:	2301      	movs	r3, #1
 80028be:	e091      	b.n	80029e4 <HAL_I2C_Master_Receive+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80028c0:	68fb      	ldr	r3, [r7, #12]
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	681a      	ldr	r2, [r3, #0]
 80028c6:	68fb      	ldr	r3, [r7, #12]
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80028ce:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80028d0:	68fb      	ldr	r3, [r7, #12]
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	691a      	ldr	r2, [r3, #16]
 80028d6:	68fb      	ldr	r3, [r7, #12]
 80028d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028da:	b2d2      	uxtb	r2, r2
 80028dc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80028de:	68fb      	ldr	r3, [r7, #12]
 80028e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028e2:	1c5a      	adds	r2, r3, #1
 80028e4:	68fb      	ldr	r3, [r7, #12]
 80028e6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80028e8:	68fb      	ldr	r3, [r7, #12]
 80028ea:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80028ec:	3b01      	subs	r3, #1
 80028ee:	b29a      	uxth	r2, r3
 80028f0:	68fb      	ldr	r3, [r7, #12]
 80028f2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80028f4:	68fb      	ldr	r3, [r7, #12]
 80028f6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80028f8:	b29b      	uxth	r3, r3
 80028fa:	3b01      	subs	r3, #1
 80028fc:	b29a      	uxth	r2, r3
 80028fe:	68fb      	ldr	r3, [r7, #12]
 8002900:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002902:	68fb      	ldr	r3, [r7, #12]
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	691a      	ldr	r2, [r3, #16]
 8002908:	68fb      	ldr	r3, [r7, #12]
 800290a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800290c:	b2d2      	uxtb	r2, r2
 800290e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002910:	68fb      	ldr	r3, [r7, #12]
 8002912:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002914:	1c5a      	adds	r2, r3, #1
 8002916:	68fb      	ldr	r3, [r7, #12]
 8002918:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800291a:	68fb      	ldr	r3, [r7, #12]
 800291c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800291e:	3b01      	subs	r3, #1
 8002920:	b29a      	uxth	r2, r3
 8002922:	68fb      	ldr	r3, [r7, #12]
 8002924:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002926:	68fb      	ldr	r3, [r7, #12]
 8002928:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800292a:	b29b      	uxth	r3, r3
 800292c:	3b01      	subs	r3, #1
 800292e:	b29a      	uxth	r2, r3
 8002930:	68fb      	ldr	r3, [r7, #12]
 8002932:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002934:	e042      	b.n	80029bc <HAL_I2C_Master_Receive+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002936:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002938:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800293a:	68f8      	ldr	r0, [r7, #12]
 800293c:	f000 fc2e 	bl	800319c <I2C_WaitOnRXNEFlagUntilTimeout>
 8002940:	4603      	mov	r3, r0
 8002942:	2b00      	cmp	r3, #0
 8002944:	d001      	beq.n	800294a <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 8002946:	2301      	movs	r3, #1
 8002948:	e04c      	b.n	80029e4 <HAL_I2C_Master_Receive+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800294a:	68fb      	ldr	r3, [r7, #12]
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	691a      	ldr	r2, [r3, #16]
 8002950:	68fb      	ldr	r3, [r7, #12]
 8002952:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002954:	b2d2      	uxtb	r2, r2
 8002956:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002958:	68fb      	ldr	r3, [r7, #12]
 800295a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800295c:	1c5a      	adds	r2, r3, #1
 800295e:	68fb      	ldr	r3, [r7, #12]
 8002960:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8002962:	68fb      	ldr	r3, [r7, #12]
 8002964:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002966:	3b01      	subs	r3, #1
 8002968:	b29a      	uxth	r2, r3
 800296a:	68fb      	ldr	r3, [r7, #12]
 800296c:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800296e:	68fb      	ldr	r3, [r7, #12]
 8002970:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002972:	b29b      	uxth	r3, r3
 8002974:	3b01      	subs	r3, #1
 8002976:	b29a      	uxth	r2, r3
 8002978:	68fb      	ldr	r3, [r7, #12]
 800297a:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 800297c:	68fb      	ldr	r3, [r7, #12]
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	695b      	ldr	r3, [r3, #20]
 8002982:	f003 0304 	and.w	r3, r3, #4
 8002986:	2b04      	cmp	r3, #4
 8002988:	d118      	bne.n	80029bc <HAL_I2C_Master_Receive+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800298a:	68fb      	ldr	r3, [r7, #12]
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	691a      	ldr	r2, [r3, #16]
 8002990:	68fb      	ldr	r3, [r7, #12]
 8002992:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002994:	b2d2      	uxtb	r2, r2
 8002996:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002998:	68fb      	ldr	r3, [r7, #12]
 800299a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800299c:	1c5a      	adds	r2, r3, #1
 800299e:	68fb      	ldr	r3, [r7, #12]
 80029a0:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80029a2:	68fb      	ldr	r3, [r7, #12]
 80029a4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80029a6:	3b01      	subs	r3, #1
 80029a8:	b29a      	uxth	r2, r3
 80029aa:	68fb      	ldr	r3, [r7, #12]
 80029ac:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80029ae:	68fb      	ldr	r3, [r7, #12]
 80029b0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80029b2:	b29b      	uxth	r3, r3
 80029b4:	3b01      	subs	r3, #1
 80029b6:	b29a      	uxth	r2, r3
 80029b8:	68fb      	ldr	r3, [r7, #12]
 80029ba:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80029bc:	68fb      	ldr	r3, [r7, #12]
 80029be:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80029c0:	2b00      	cmp	r3, #0
 80029c2:	f47f aec2 	bne.w	800274a <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 80029c6:	68fb      	ldr	r3, [r7, #12]
 80029c8:	2220      	movs	r2, #32
 80029ca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80029ce:	68fb      	ldr	r3, [r7, #12]
 80029d0:	2200      	movs	r2, #0
 80029d2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80029d6:	68fb      	ldr	r3, [r7, #12]
 80029d8:	2200      	movs	r2, #0
 80029da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80029de:	2300      	movs	r3, #0
 80029e0:	e000      	b.n	80029e4 <HAL_I2C_Master_Receive+0x440>
  }
  else
  {
    return HAL_BUSY;
 80029e2:	2302      	movs	r3, #2
  }
}
 80029e4:	4618      	mov	r0, r3
 80029e6:	3728      	adds	r7, #40	; 0x28
 80029e8:	46bd      	mov	sp, r7
 80029ea:	bd80      	pop	{r7, pc}
 80029ec:	00010004 	.word	0x00010004

080029f0 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 80029f0:	b580      	push	{r7, lr}
 80029f2:	b08a      	sub	sp, #40	; 0x28
 80029f4:	af02      	add	r7, sp, #8
 80029f6:	60f8      	str	r0, [r7, #12]
 80029f8:	607a      	str	r2, [r7, #4]
 80029fa:	603b      	str	r3, [r7, #0]
 80029fc:	460b      	mov	r3, r1
 80029fe:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 8002a00:	f7fe fce0 	bl	80013c4 <HAL_GetTick>
 8002a04:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 0U;
 8002a06:	2300      	movs	r3, #0
 8002a08:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002a0a:	68fb      	ldr	r3, [r7, #12]
 8002a0c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002a10:	b2db      	uxtb	r3, r3
 8002a12:	2b20      	cmp	r3, #32
 8002a14:	f040 8111 	bne.w	8002c3a <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002a18:	69fb      	ldr	r3, [r7, #28]
 8002a1a:	9300      	str	r3, [sp, #0]
 8002a1c:	2319      	movs	r3, #25
 8002a1e:	2201      	movs	r2, #1
 8002a20:	4988      	ldr	r1, [pc, #544]	; (8002c44 <HAL_I2C_IsDeviceReady+0x254>)
 8002a22:	68f8      	ldr	r0, [r7, #12]
 8002a24:	f000 fa62 	bl	8002eec <I2C_WaitOnFlagUntilTimeout>
 8002a28:	4603      	mov	r3, r0
 8002a2a:	2b00      	cmp	r3, #0
 8002a2c:	d001      	beq.n	8002a32 <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 8002a2e:	2302      	movs	r3, #2
 8002a30:	e104      	b.n	8002c3c <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002a32:	68fb      	ldr	r3, [r7, #12]
 8002a34:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002a38:	2b01      	cmp	r3, #1
 8002a3a:	d101      	bne.n	8002a40 <HAL_I2C_IsDeviceReady+0x50>
 8002a3c:	2302      	movs	r3, #2
 8002a3e:	e0fd      	b.n	8002c3c <HAL_I2C_IsDeviceReady+0x24c>
 8002a40:	68fb      	ldr	r3, [r7, #12]
 8002a42:	2201      	movs	r2, #1
 8002a44:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002a48:	68fb      	ldr	r3, [r7, #12]
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	f003 0301 	and.w	r3, r3, #1
 8002a52:	2b01      	cmp	r3, #1
 8002a54:	d007      	beq.n	8002a66 <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002a56:	68fb      	ldr	r3, [r7, #12]
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	681a      	ldr	r2, [r3, #0]
 8002a5c:	68fb      	ldr	r3, [r7, #12]
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	f042 0201 	orr.w	r2, r2, #1
 8002a64:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002a66:	68fb      	ldr	r3, [r7, #12]
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	681a      	ldr	r2, [r3, #0]
 8002a6c:	68fb      	ldr	r3, [r7, #12]
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002a74:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002a76:	68fb      	ldr	r3, [r7, #12]
 8002a78:	2224      	movs	r2, #36	; 0x24
 8002a7a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002a7e:	68fb      	ldr	r3, [r7, #12]
 8002a80:	2200      	movs	r2, #0
 8002a82:	641a      	str	r2, [r3, #64]	; 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002a84:	68fb      	ldr	r3, [r7, #12]
 8002a86:	4a70      	ldr	r2, [pc, #448]	; (8002c48 <HAL_I2C_IsDeviceReady+0x258>)
 8002a88:	62da      	str	r2, [r3, #44]	; 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002a8a:	68fb      	ldr	r3, [r7, #12]
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	681a      	ldr	r2, [r3, #0]
 8002a90:	68fb      	ldr	r3, [r7, #12]
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002a98:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 8002a9a:	69fb      	ldr	r3, [r7, #28]
 8002a9c:	9300      	str	r3, [sp, #0]
 8002a9e:	683b      	ldr	r3, [r7, #0]
 8002aa0:	2200      	movs	r2, #0
 8002aa2:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002aa6:	68f8      	ldr	r0, [r7, #12]
 8002aa8:	f000 fa20 	bl	8002eec <I2C_WaitOnFlagUntilTimeout>
 8002aac:	4603      	mov	r3, r0
 8002aae:	2b00      	cmp	r3, #0
 8002ab0:	d00d      	beq.n	8002ace <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002ab2:	68fb      	ldr	r3, [r7, #12]
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002abc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002ac0:	d103      	bne.n	8002aca <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002ac2:	68fb      	ldr	r3, [r7, #12]
 8002ac4:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002ac8:	641a      	str	r2, [r3, #64]	; 0x40
        }
        return HAL_TIMEOUT;
 8002aca:	2303      	movs	r3, #3
 8002acc:	e0b6      	b.n	8002c3c <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002ace:	897b      	ldrh	r3, [r7, #10]
 8002ad0:	b2db      	uxtb	r3, r3
 8002ad2:	461a      	mov	r2, r3
 8002ad4:	68fb      	ldr	r3, [r7, #12]
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002adc:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 8002ade:	f7fe fc71 	bl	80013c4 <HAL_GetTick>
 8002ae2:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8002ae4:	68fb      	ldr	r3, [r7, #12]
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	695b      	ldr	r3, [r3, #20]
 8002aea:	f003 0302 	and.w	r3, r3, #2
 8002aee:	2b02      	cmp	r3, #2
 8002af0:	bf0c      	ite	eq
 8002af2:	2301      	moveq	r3, #1
 8002af4:	2300      	movne	r3, #0
 8002af6:	b2db      	uxtb	r3, r3
 8002af8:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8002afa:	68fb      	ldr	r3, [r7, #12]
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	695b      	ldr	r3, [r3, #20]
 8002b00:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002b04:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002b08:	bf0c      	ite	eq
 8002b0a:	2301      	moveq	r3, #1
 8002b0c:	2300      	movne	r3, #0
 8002b0e:	b2db      	uxtb	r3, r3
 8002b10:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8002b12:	e025      	b.n	8002b60 <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8002b14:	f7fe fc56 	bl	80013c4 <HAL_GetTick>
 8002b18:	4602      	mov	r2, r0
 8002b1a:	69fb      	ldr	r3, [r7, #28]
 8002b1c:	1ad3      	subs	r3, r2, r3
 8002b1e:	683a      	ldr	r2, [r7, #0]
 8002b20:	429a      	cmp	r2, r3
 8002b22:	d302      	bcc.n	8002b2a <HAL_I2C_IsDeviceReady+0x13a>
 8002b24:	683b      	ldr	r3, [r7, #0]
 8002b26:	2b00      	cmp	r3, #0
 8002b28:	d103      	bne.n	8002b32 <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 8002b2a:	68fb      	ldr	r3, [r7, #12]
 8002b2c:	22a0      	movs	r2, #160	; 0xa0
 8002b2e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8002b32:	68fb      	ldr	r3, [r7, #12]
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	695b      	ldr	r3, [r3, #20]
 8002b38:	f003 0302 	and.w	r3, r3, #2
 8002b3c:	2b02      	cmp	r3, #2
 8002b3e:	bf0c      	ite	eq
 8002b40:	2301      	moveq	r3, #1
 8002b42:	2300      	movne	r3, #0
 8002b44:	b2db      	uxtb	r3, r3
 8002b46:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8002b48:	68fb      	ldr	r3, [r7, #12]
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	695b      	ldr	r3, [r3, #20]
 8002b4e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002b52:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002b56:	bf0c      	ite	eq
 8002b58:	2301      	moveq	r3, #1
 8002b5a:	2300      	movne	r3, #0
 8002b5c:	b2db      	uxtb	r3, r3
 8002b5e:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8002b60:	68fb      	ldr	r3, [r7, #12]
 8002b62:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002b66:	b2db      	uxtb	r3, r3
 8002b68:	2ba0      	cmp	r3, #160	; 0xa0
 8002b6a:	d005      	beq.n	8002b78 <HAL_I2C_IsDeviceReady+0x188>
 8002b6c:	7dfb      	ldrb	r3, [r7, #23]
 8002b6e:	2b00      	cmp	r3, #0
 8002b70:	d102      	bne.n	8002b78 <HAL_I2C_IsDeviceReady+0x188>
 8002b72:	7dbb      	ldrb	r3, [r7, #22]
 8002b74:	2b00      	cmp	r3, #0
 8002b76:	d0cd      	beq.n	8002b14 <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 8002b78:	68fb      	ldr	r3, [r7, #12]
 8002b7a:	2220      	movs	r2, #32
 8002b7c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 8002b80:	68fb      	ldr	r3, [r7, #12]
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	695b      	ldr	r3, [r3, #20]
 8002b86:	f003 0302 	and.w	r3, r3, #2
 8002b8a:	2b02      	cmp	r3, #2
 8002b8c:	d129      	bne.n	8002be2 <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002b8e:	68fb      	ldr	r3, [r7, #12]
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	681a      	ldr	r2, [r3, #0]
 8002b94:	68fb      	ldr	r3, [r7, #12]
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002b9c:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002b9e:	2300      	movs	r3, #0
 8002ba0:	613b      	str	r3, [r7, #16]
 8002ba2:	68fb      	ldr	r3, [r7, #12]
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	695b      	ldr	r3, [r3, #20]
 8002ba8:	613b      	str	r3, [r7, #16]
 8002baa:	68fb      	ldr	r3, [r7, #12]
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	699b      	ldr	r3, [r3, #24]
 8002bb0:	613b      	str	r3, [r7, #16]
 8002bb2:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002bb4:	69fb      	ldr	r3, [r7, #28]
 8002bb6:	9300      	str	r3, [sp, #0]
 8002bb8:	2319      	movs	r3, #25
 8002bba:	2201      	movs	r2, #1
 8002bbc:	4921      	ldr	r1, [pc, #132]	; (8002c44 <HAL_I2C_IsDeviceReady+0x254>)
 8002bbe:	68f8      	ldr	r0, [r7, #12]
 8002bc0:	f000 f994 	bl	8002eec <I2C_WaitOnFlagUntilTimeout>
 8002bc4:	4603      	mov	r3, r0
 8002bc6:	2b00      	cmp	r3, #0
 8002bc8:	d001      	beq.n	8002bce <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 8002bca:	2301      	movs	r3, #1
 8002bcc:	e036      	b.n	8002c3c <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 8002bce:	68fb      	ldr	r3, [r7, #12]
 8002bd0:	2220      	movs	r2, #32
 8002bd2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002bd6:	68fb      	ldr	r3, [r7, #12]
 8002bd8:	2200      	movs	r2, #0
 8002bda:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_OK;
 8002bde:	2300      	movs	r3, #0
 8002be0:	e02c      	b.n	8002c3c <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002be2:	68fb      	ldr	r3, [r7, #12]
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	681a      	ldr	r2, [r3, #0]
 8002be8:	68fb      	ldr	r3, [r7, #12]
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002bf0:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002bf2:	68fb      	ldr	r3, [r7, #12]
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002bfa:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002bfc:	69fb      	ldr	r3, [r7, #28]
 8002bfe:	9300      	str	r3, [sp, #0]
 8002c00:	2319      	movs	r3, #25
 8002c02:	2201      	movs	r2, #1
 8002c04:	490f      	ldr	r1, [pc, #60]	; (8002c44 <HAL_I2C_IsDeviceReady+0x254>)
 8002c06:	68f8      	ldr	r0, [r7, #12]
 8002c08:	f000 f970 	bl	8002eec <I2C_WaitOnFlagUntilTimeout>
 8002c0c:	4603      	mov	r3, r0
 8002c0e:	2b00      	cmp	r3, #0
 8002c10:	d001      	beq.n	8002c16 <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 8002c12:	2301      	movs	r3, #1
 8002c14:	e012      	b.n	8002c3c <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 8002c16:	69bb      	ldr	r3, [r7, #24]
 8002c18:	3301      	adds	r3, #1
 8002c1a:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 8002c1c:	69ba      	ldr	r2, [r7, #24]
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	429a      	cmp	r2, r3
 8002c22:	f4ff af32 	bcc.w	8002a8a <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 8002c26:	68fb      	ldr	r3, [r7, #12]
 8002c28:	2220      	movs	r2, #32
 8002c2a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002c2e:	68fb      	ldr	r3, [r7, #12]
 8002c30:	2200      	movs	r2, #0
 8002c32:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8002c36:	2301      	movs	r3, #1
 8002c38:	e000      	b.n	8002c3c <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 8002c3a:	2302      	movs	r3, #2
  }
}
 8002c3c:	4618      	mov	r0, r3
 8002c3e:	3720      	adds	r7, #32
 8002c40:	46bd      	mov	sp, r7
 8002c42:	bd80      	pop	{r7, pc}
 8002c44:	00100002 	.word	0x00100002
 8002c48:	ffff0000 	.word	0xffff0000

08002c4c <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8002c4c:	b580      	push	{r7, lr}
 8002c4e:	b088      	sub	sp, #32
 8002c50:	af02      	add	r7, sp, #8
 8002c52:	60f8      	str	r0, [r7, #12]
 8002c54:	607a      	str	r2, [r7, #4]
 8002c56:	603b      	str	r3, [r7, #0]
 8002c58:	460b      	mov	r3, r1
 8002c5a:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8002c5c:	68fb      	ldr	r3, [r7, #12]
 8002c5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c60:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8002c62:	697b      	ldr	r3, [r7, #20]
 8002c64:	2b08      	cmp	r3, #8
 8002c66:	d006      	beq.n	8002c76 <I2C_MasterRequestWrite+0x2a>
 8002c68:	697b      	ldr	r3, [r7, #20]
 8002c6a:	2b01      	cmp	r3, #1
 8002c6c:	d003      	beq.n	8002c76 <I2C_MasterRequestWrite+0x2a>
 8002c6e:	697b      	ldr	r3, [r7, #20]
 8002c70:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002c74:	d108      	bne.n	8002c88 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002c76:	68fb      	ldr	r3, [r7, #12]
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	681a      	ldr	r2, [r3, #0]
 8002c7c:	68fb      	ldr	r3, [r7, #12]
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002c84:	601a      	str	r2, [r3, #0]
 8002c86:	e00b      	b.n	8002ca0 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8002c88:	68fb      	ldr	r3, [r7, #12]
 8002c8a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c8c:	2b12      	cmp	r3, #18
 8002c8e:	d107      	bne.n	8002ca0 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002c90:	68fb      	ldr	r3, [r7, #12]
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	681a      	ldr	r2, [r3, #0]
 8002c96:	68fb      	ldr	r3, [r7, #12]
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002c9e:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002ca0:	683b      	ldr	r3, [r7, #0]
 8002ca2:	9300      	str	r3, [sp, #0]
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	2200      	movs	r2, #0
 8002ca8:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002cac:	68f8      	ldr	r0, [r7, #12]
 8002cae:	f000 f91d 	bl	8002eec <I2C_WaitOnFlagUntilTimeout>
 8002cb2:	4603      	mov	r3, r0
 8002cb4:	2b00      	cmp	r3, #0
 8002cb6:	d00d      	beq.n	8002cd4 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002cb8:	68fb      	ldr	r3, [r7, #12]
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002cc2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002cc6:	d103      	bne.n	8002cd0 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002cc8:	68fb      	ldr	r3, [r7, #12]
 8002cca:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002cce:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8002cd0:	2303      	movs	r3, #3
 8002cd2:	e035      	b.n	8002d40 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002cd4:	68fb      	ldr	r3, [r7, #12]
 8002cd6:	691b      	ldr	r3, [r3, #16]
 8002cd8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002cdc:	d108      	bne.n	8002cf0 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002cde:	897b      	ldrh	r3, [r7, #10]
 8002ce0:	b2db      	uxtb	r3, r3
 8002ce2:	461a      	mov	r2, r3
 8002ce4:	68fb      	ldr	r3, [r7, #12]
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002cec:	611a      	str	r2, [r3, #16]
 8002cee:	e01b      	b.n	8002d28 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8002cf0:	897b      	ldrh	r3, [r7, #10]
 8002cf2:	11db      	asrs	r3, r3, #7
 8002cf4:	b2db      	uxtb	r3, r3
 8002cf6:	f003 0306 	and.w	r3, r3, #6
 8002cfa:	b2db      	uxtb	r3, r3
 8002cfc:	f063 030f 	orn	r3, r3, #15
 8002d00:	b2da      	uxtb	r2, r3
 8002d02:	68fb      	ldr	r3, [r7, #12]
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8002d08:	683b      	ldr	r3, [r7, #0]
 8002d0a:	687a      	ldr	r2, [r7, #4]
 8002d0c:	490e      	ldr	r1, [pc, #56]	; (8002d48 <I2C_MasterRequestWrite+0xfc>)
 8002d0e:	68f8      	ldr	r0, [r7, #12]
 8002d10:	f000 f943 	bl	8002f9a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002d14:	4603      	mov	r3, r0
 8002d16:	2b00      	cmp	r3, #0
 8002d18:	d001      	beq.n	8002d1e <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8002d1a:	2301      	movs	r3, #1
 8002d1c:	e010      	b.n	8002d40 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8002d1e:	897b      	ldrh	r3, [r7, #10]
 8002d20:	b2da      	uxtb	r2, r3
 8002d22:	68fb      	ldr	r3, [r7, #12]
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002d28:	683b      	ldr	r3, [r7, #0]
 8002d2a:	687a      	ldr	r2, [r7, #4]
 8002d2c:	4907      	ldr	r1, [pc, #28]	; (8002d4c <I2C_MasterRequestWrite+0x100>)
 8002d2e:	68f8      	ldr	r0, [r7, #12]
 8002d30:	f000 f933 	bl	8002f9a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002d34:	4603      	mov	r3, r0
 8002d36:	2b00      	cmp	r3, #0
 8002d38:	d001      	beq.n	8002d3e <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8002d3a:	2301      	movs	r3, #1
 8002d3c:	e000      	b.n	8002d40 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8002d3e:	2300      	movs	r3, #0
}
 8002d40:	4618      	mov	r0, r3
 8002d42:	3718      	adds	r7, #24
 8002d44:	46bd      	mov	sp, r7
 8002d46:	bd80      	pop	{r7, pc}
 8002d48:	00010008 	.word	0x00010008
 8002d4c:	00010002 	.word	0x00010002

08002d50 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8002d50:	b580      	push	{r7, lr}
 8002d52:	b088      	sub	sp, #32
 8002d54:	af02      	add	r7, sp, #8
 8002d56:	60f8      	str	r0, [r7, #12]
 8002d58:	607a      	str	r2, [r7, #4]
 8002d5a:	603b      	str	r3, [r7, #0]
 8002d5c:	460b      	mov	r3, r1
 8002d5e:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8002d60:	68fb      	ldr	r3, [r7, #12]
 8002d62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d64:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002d66:	68fb      	ldr	r3, [r7, #12]
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	681a      	ldr	r2, [r3, #0]
 8002d6c:	68fb      	ldr	r3, [r7, #12]
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002d74:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8002d76:	697b      	ldr	r3, [r7, #20]
 8002d78:	2b08      	cmp	r3, #8
 8002d7a:	d006      	beq.n	8002d8a <I2C_MasterRequestRead+0x3a>
 8002d7c:	697b      	ldr	r3, [r7, #20]
 8002d7e:	2b01      	cmp	r3, #1
 8002d80:	d003      	beq.n	8002d8a <I2C_MasterRequestRead+0x3a>
 8002d82:	697b      	ldr	r3, [r7, #20]
 8002d84:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002d88:	d108      	bne.n	8002d9c <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002d8a:	68fb      	ldr	r3, [r7, #12]
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	681a      	ldr	r2, [r3, #0]
 8002d90:	68fb      	ldr	r3, [r7, #12]
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002d98:	601a      	str	r2, [r3, #0]
 8002d9a:	e00b      	b.n	8002db4 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8002d9c:	68fb      	ldr	r3, [r7, #12]
 8002d9e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002da0:	2b11      	cmp	r3, #17
 8002da2:	d107      	bne.n	8002db4 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002da4:	68fb      	ldr	r3, [r7, #12]
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	681a      	ldr	r2, [r3, #0]
 8002daa:	68fb      	ldr	r3, [r7, #12]
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002db2:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002db4:	683b      	ldr	r3, [r7, #0]
 8002db6:	9300      	str	r3, [sp, #0]
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	2200      	movs	r2, #0
 8002dbc:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002dc0:	68f8      	ldr	r0, [r7, #12]
 8002dc2:	f000 f893 	bl	8002eec <I2C_WaitOnFlagUntilTimeout>
 8002dc6:	4603      	mov	r3, r0
 8002dc8:	2b00      	cmp	r3, #0
 8002dca:	d00d      	beq.n	8002de8 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002dcc:	68fb      	ldr	r3, [r7, #12]
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002dd6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002dda:	d103      	bne.n	8002de4 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002ddc:	68fb      	ldr	r3, [r7, #12]
 8002dde:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002de2:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8002de4:	2303      	movs	r3, #3
 8002de6:	e079      	b.n	8002edc <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002de8:	68fb      	ldr	r3, [r7, #12]
 8002dea:	691b      	ldr	r3, [r3, #16]
 8002dec:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002df0:	d108      	bne.n	8002e04 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8002df2:	897b      	ldrh	r3, [r7, #10]
 8002df4:	b2db      	uxtb	r3, r3
 8002df6:	f043 0301 	orr.w	r3, r3, #1
 8002dfa:	b2da      	uxtb	r2, r3
 8002dfc:	68fb      	ldr	r3, [r7, #12]
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	611a      	str	r2, [r3, #16]
 8002e02:	e05f      	b.n	8002ec4 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8002e04:	897b      	ldrh	r3, [r7, #10]
 8002e06:	11db      	asrs	r3, r3, #7
 8002e08:	b2db      	uxtb	r3, r3
 8002e0a:	f003 0306 	and.w	r3, r3, #6
 8002e0e:	b2db      	uxtb	r3, r3
 8002e10:	f063 030f 	orn	r3, r3, #15
 8002e14:	b2da      	uxtb	r2, r3
 8002e16:	68fb      	ldr	r3, [r7, #12]
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8002e1c:	683b      	ldr	r3, [r7, #0]
 8002e1e:	687a      	ldr	r2, [r7, #4]
 8002e20:	4930      	ldr	r1, [pc, #192]	; (8002ee4 <I2C_MasterRequestRead+0x194>)
 8002e22:	68f8      	ldr	r0, [r7, #12]
 8002e24:	f000 f8b9 	bl	8002f9a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002e28:	4603      	mov	r3, r0
 8002e2a:	2b00      	cmp	r3, #0
 8002e2c:	d001      	beq.n	8002e32 <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 8002e2e:	2301      	movs	r3, #1
 8002e30:	e054      	b.n	8002edc <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8002e32:	897b      	ldrh	r3, [r7, #10]
 8002e34:	b2da      	uxtb	r2, r3
 8002e36:	68fb      	ldr	r3, [r7, #12]
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002e3c:	683b      	ldr	r3, [r7, #0]
 8002e3e:	687a      	ldr	r2, [r7, #4]
 8002e40:	4929      	ldr	r1, [pc, #164]	; (8002ee8 <I2C_MasterRequestRead+0x198>)
 8002e42:	68f8      	ldr	r0, [r7, #12]
 8002e44:	f000 f8a9 	bl	8002f9a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002e48:	4603      	mov	r3, r0
 8002e4a:	2b00      	cmp	r3, #0
 8002e4c:	d001      	beq.n	8002e52 <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 8002e4e:	2301      	movs	r3, #1
 8002e50:	e044      	b.n	8002edc <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002e52:	2300      	movs	r3, #0
 8002e54:	613b      	str	r3, [r7, #16]
 8002e56:	68fb      	ldr	r3, [r7, #12]
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	695b      	ldr	r3, [r3, #20]
 8002e5c:	613b      	str	r3, [r7, #16]
 8002e5e:	68fb      	ldr	r3, [r7, #12]
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	699b      	ldr	r3, [r3, #24]
 8002e64:	613b      	str	r3, [r7, #16]
 8002e66:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002e68:	68fb      	ldr	r3, [r7, #12]
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	681a      	ldr	r2, [r3, #0]
 8002e6e:	68fb      	ldr	r3, [r7, #12]
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002e76:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002e78:	683b      	ldr	r3, [r7, #0]
 8002e7a:	9300      	str	r3, [sp, #0]
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	2200      	movs	r2, #0
 8002e80:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002e84:	68f8      	ldr	r0, [r7, #12]
 8002e86:	f000 f831 	bl	8002eec <I2C_WaitOnFlagUntilTimeout>
 8002e8a:	4603      	mov	r3, r0
 8002e8c:	2b00      	cmp	r3, #0
 8002e8e:	d00d      	beq.n	8002eac <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002e90:	68fb      	ldr	r3, [r7, #12]
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e9a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002e9e:	d103      	bne.n	8002ea8 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002ea0:	68fb      	ldr	r3, [r7, #12]
 8002ea2:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002ea6:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 8002ea8:	2303      	movs	r3, #3
 8002eaa:	e017      	b.n	8002edc <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8002eac:	897b      	ldrh	r3, [r7, #10]
 8002eae:	11db      	asrs	r3, r3, #7
 8002eb0:	b2db      	uxtb	r3, r3
 8002eb2:	f003 0306 	and.w	r3, r3, #6
 8002eb6:	b2db      	uxtb	r3, r3
 8002eb8:	f063 030e 	orn	r3, r3, #14
 8002ebc:	b2da      	uxtb	r2, r3
 8002ebe:	68fb      	ldr	r3, [r7, #12]
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002ec4:	683b      	ldr	r3, [r7, #0]
 8002ec6:	687a      	ldr	r2, [r7, #4]
 8002ec8:	4907      	ldr	r1, [pc, #28]	; (8002ee8 <I2C_MasterRequestRead+0x198>)
 8002eca:	68f8      	ldr	r0, [r7, #12]
 8002ecc:	f000 f865 	bl	8002f9a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002ed0:	4603      	mov	r3, r0
 8002ed2:	2b00      	cmp	r3, #0
 8002ed4:	d001      	beq.n	8002eda <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 8002ed6:	2301      	movs	r3, #1
 8002ed8:	e000      	b.n	8002edc <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 8002eda:	2300      	movs	r3, #0
}
 8002edc:	4618      	mov	r0, r3
 8002ede:	3718      	adds	r7, #24
 8002ee0:	46bd      	mov	sp, r7
 8002ee2:	bd80      	pop	{r7, pc}
 8002ee4:	00010008 	.word	0x00010008
 8002ee8:	00010002 	.word	0x00010002

08002eec <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8002eec:	b580      	push	{r7, lr}
 8002eee:	b084      	sub	sp, #16
 8002ef0:	af00      	add	r7, sp, #0
 8002ef2:	60f8      	str	r0, [r7, #12]
 8002ef4:	60b9      	str	r1, [r7, #8]
 8002ef6:	603b      	str	r3, [r7, #0]
 8002ef8:	4613      	mov	r3, r2
 8002efa:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002efc:	e025      	b.n	8002f4a <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002efe:	683b      	ldr	r3, [r7, #0]
 8002f00:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002f04:	d021      	beq.n	8002f4a <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002f06:	f7fe fa5d 	bl	80013c4 <HAL_GetTick>
 8002f0a:	4602      	mov	r2, r0
 8002f0c:	69bb      	ldr	r3, [r7, #24]
 8002f0e:	1ad3      	subs	r3, r2, r3
 8002f10:	683a      	ldr	r2, [r7, #0]
 8002f12:	429a      	cmp	r2, r3
 8002f14:	d302      	bcc.n	8002f1c <I2C_WaitOnFlagUntilTimeout+0x30>
 8002f16:	683b      	ldr	r3, [r7, #0]
 8002f18:	2b00      	cmp	r3, #0
 8002f1a:	d116      	bne.n	8002f4a <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8002f1c:	68fb      	ldr	r3, [r7, #12]
 8002f1e:	2200      	movs	r2, #0
 8002f20:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8002f22:	68fb      	ldr	r3, [r7, #12]
 8002f24:	2220      	movs	r2, #32
 8002f26:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8002f2a:	68fb      	ldr	r3, [r7, #12]
 8002f2c:	2200      	movs	r2, #0
 8002f2e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8002f32:	68fb      	ldr	r3, [r7, #12]
 8002f34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f36:	f043 0220 	orr.w	r2, r3, #32
 8002f3a:	68fb      	ldr	r3, [r7, #12]
 8002f3c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002f3e:	68fb      	ldr	r3, [r7, #12]
 8002f40:	2200      	movs	r2, #0
 8002f42:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002f46:	2301      	movs	r3, #1
 8002f48:	e023      	b.n	8002f92 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002f4a:	68bb      	ldr	r3, [r7, #8]
 8002f4c:	0c1b      	lsrs	r3, r3, #16
 8002f4e:	b2db      	uxtb	r3, r3
 8002f50:	2b01      	cmp	r3, #1
 8002f52:	d10d      	bne.n	8002f70 <I2C_WaitOnFlagUntilTimeout+0x84>
 8002f54:	68fb      	ldr	r3, [r7, #12]
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	695b      	ldr	r3, [r3, #20]
 8002f5a:	43da      	mvns	r2, r3
 8002f5c:	68bb      	ldr	r3, [r7, #8]
 8002f5e:	4013      	ands	r3, r2
 8002f60:	b29b      	uxth	r3, r3
 8002f62:	2b00      	cmp	r3, #0
 8002f64:	bf0c      	ite	eq
 8002f66:	2301      	moveq	r3, #1
 8002f68:	2300      	movne	r3, #0
 8002f6a:	b2db      	uxtb	r3, r3
 8002f6c:	461a      	mov	r2, r3
 8002f6e:	e00c      	b.n	8002f8a <I2C_WaitOnFlagUntilTimeout+0x9e>
 8002f70:	68fb      	ldr	r3, [r7, #12]
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	699b      	ldr	r3, [r3, #24]
 8002f76:	43da      	mvns	r2, r3
 8002f78:	68bb      	ldr	r3, [r7, #8]
 8002f7a:	4013      	ands	r3, r2
 8002f7c:	b29b      	uxth	r3, r3
 8002f7e:	2b00      	cmp	r3, #0
 8002f80:	bf0c      	ite	eq
 8002f82:	2301      	moveq	r3, #1
 8002f84:	2300      	movne	r3, #0
 8002f86:	b2db      	uxtb	r3, r3
 8002f88:	461a      	mov	r2, r3
 8002f8a:	79fb      	ldrb	r3, [r7, #7]
 8002f8c:	429a      	cmp	r2, r3
 8002f8e:	d0b6      	beq.n	8002efe <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002f90:	2300      	movs	r3, #0
}
 8002f92:	4618      	mov	r0, r3
 8002f94:	3710      	adds	r7, #16
 8002f96:	46bd      	mov	sp, r7
 8002f98:	bd80      	pop	{r7, pc}

08002f9a <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8002f9a:	b580      	push	{r7, lr}
 8002f9c:	b084      	sub	sp, #16
 8002f9e:	af00      	add	r7, sp, #0
 8002fa0:	60f8      	str	r0, [r7, #12]
 8002fa2:	60b9      	str	r1, [r7, #8]
 8002fa4:	607a      	str	r2, [r7, #4]
 8002fa6:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002fa8:	e051      	b.n	800304e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002faa:	68fb      	ldr	r3, [r7, #12]
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	695b      	ldr	r3, [r3, #20]
 8002fb0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002fb4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002fb8:	d123      	bne.n	8003002 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002fba:	68fb      	ldr	r3, [r7, #12]
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	681a      	ldr	r2, [r3, #0]
 8002fc0:	68fb      	ldr	r3, [r7, #12]
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002fc8:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002fca:	68fb      	ldr	r3, [r7, #12]
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002fd2:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002fd4:	68fb      	ldr	r3, [r7, #12]
 8002fd6:	2200      	movs	r2, #0
 8002fd8:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002fda:	68fb      	ldr	r3, [r7, #12]
 8002fdc:	2220      	movs	r2, #32
 8002fde:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002fe2:	68fb      	ldr	r3, [r7, #12]
 8002fe4:	2200      	movs	r2, #0
 8002fe6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002fea:	68fb      	ldr	r3, [r7, #12]
 8002fec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fee:	f043 0204 	orr.w	r2, r3, #4
 8002ff2:	68fb      	ldr	r3, [r7, #12]
 8002ff4:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002ff6:	68fb      	ldr	r3, [r7, #12]
 8002ff8:	2200      	movs	r2, #0
 8002ffa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8002ffe:	2301      	movs	r3, #1
 8003000:	e046      	b.n	8003090 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003008:	d021      	beq.n	800304e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800300a:	f7fe f9db 	bl	80013c4 <HAL_GetTick>
 800300e:	4602      	mov	r2, r0
 8003010:	683b      	ldr	r3, [r7, #0]
 8003012:	1ad3      	subs	r3, r2, r3
 8003014:	687a      	ldr	r2, [r7, #4]
 8003016:	429a      	cmp	r2, r3
 8003018:	d302      	bcc.n	8003020 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	2b00      	cmp	r3, #0
 800301e:	d116      	bne.n	800304e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003020:	68fb      	ldr	r3, [r7, #12]
 8003022:	2200      	movs	r2, #0
 8003024:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003026:	68fb      	ldr	r3, [r7, #12]
 8003028:	2220      	movs	r2, #32
 800302a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800302e:	68fb      	ldr	r3, [r7, #12]
 8003030:	2200      	movs	r2, #0
 8003032:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003036:	68fb      	ldr	r3, [r7, #12]
 8003038:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800303a:	f043 0220 	orr.w	r2, r3, #32
 800303e:	68fb      	ldr	r3, [r7, #12]
 8003040:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003042:	68fb      	ldr	r3, [r7, #12]
 8003044:	2200      	movs	r2, #0
 8003046:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800304a:	2301      	movs	r3, #1
 800304c:	e020      	b.n	8003090 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800304e:	68bb      	ldr	r3, [r7, #8]
 8003050:	0c1b      	lsrs	r3, r3, #16
 8003052:	b2db      	uxtb	r3, r3
 8003054:	2b01      	cmp	r3, #1
 8003056:	d10c      	bne.n	8003072 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8003058:	68fb      	ldr	r3, [r7, #12]
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	695b      	ldr	r3, [r3, #20]
 800305e:	43da      	mvns	r2, r3
 8003060:	68bb      	ldr	r3, [r7, #8]
 8003062:	4013      	ands	r3, r2
 8003064:	b29b      	uxth	r3, r3
 8003066:	2b00      	cmp	r3, #0
 8003068:	bf14      	ite	ne
 800306a:	2301      	movne	r3, #1
 800306c:	2300      	moveq	r3, #0
 800306e:	b2db      	uxtb	r3, r3
 8003070:	e00b      	b.n	800308a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8003072:	68fb      	ldr	r3, [r7, #12]
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	699b      	ldr	r3, [r3, #24]
 8003078:	43da      	mvns	r2, r3
 800307a:	68bb      	ldr	r3, [r7, #8]
 800307c:	4013      	ands	r3, r2
 800307e:	b29b      	uxth	r3, r3
 8003080:	2b00      	cmp	r3, #0
 8003082:	bf14      	ite	ne
 8003084:	2301      	movne	r3, #1
 8003086:	2300      	moveq	r3, #0
 8003088:	b2db      	uxtb	r3, r3
 800308a:	2b00      	cmp	r3, #0
 800308c:	d18d      	bne.n	8002faa <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 800308e:	2300      	movs	r3, #0
}
 8003090:	4618      	mov	r0, r3
 8003092:	3710      	adds	r7, #16
 8003094:	46bd      	mov	sp, r7
 8003096:	bd80      	pop	{r7, pc}

08003098 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003098:	b580      	push	{r7, lr}
 800309a:	b084      	sub	sp, #16
 800309c:	af00      	add	r7, sp, #0
 800309e:	60f8      	str	r0, [r7, #12]
 80030a0:	60b9      	str	r1, [r7, #8]
 80030a2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80030a4:	e02d      	b.n	8003102 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80030a6:	68f8      	ldr	r0, [r7, #12]
 80030a8:	f000 f8ce 	bl	8003248 <I2C_IsAcknowledgeFailed>
 80030ac:	4603      	mov	r3, r0
 80030ae:	2b00      	cmp	r3, #0
 80030b0:	d001      	beq.n	80030b6 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80030b2:	2301      	movs	r3, #1
 80030b4:	e02d      	b.n	8003112 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80030b6:	68bb      	ldr	r3, [r7, #8]
 80030b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80030bc:	d021      	beq.n	8003102 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80030be:	f7fe f981 	bl	80013c4 <HAL_GetTick>
 80030c2:	4602      	mov	r2, r0
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	1ad3      	subs	r3, r2, r3
 80030c8:	68ba      	ldr	r2, [r7, #8]
 80030ca:	429a      	cmp	r2, r3
 80030cc:	d302      	bcc.n	80030d4 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80030ce:	68bb      	ldr	r3, [r7, #8]
 80030d0:	2b00      	cmp	r3, #0
 80030d2:	d116      	bne.n	8003102 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80030d4:	68fb      	ldr	r3, [r7, #12]
 80030d6:	2200      	movs	r2, #0
 80030d8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80030da:	68fb      	ldr	r3, [r7, #12]
 80030dc:	2220      	movs	r2, #32
 80030de:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80030e2:	68fb      	ldr	r3, [r7, #12]
 80030e4:	2200      	movs	r2, #0
 80030e6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80030ea:	68fb      	ldr	r3, [r7, #12]
 80030ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030ee:	f043 0220 	orr.w	r2, r3, #32
 80030f2:	68fb      	ldr	r3, [r7, #12]
 80030f4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80030f6:	68fb      	ldr	r3, [r7, #12]
 80030f8:	2200      	movs	r2, #0
 80030fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80030fe:	2301      	movs	r3, #1
 8003100:	e007      	b.n	8003112 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003102:	68fb      	ldr	r3, [r7, #12]
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	695b      	ldr	r3, [r3, #20]
 8003108:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800310c:	2b80      	cmp	r3, #128	; 0x80
 800310e:	d1ca      	bne.n	80030a6 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003110:	2300      	movs	r3, #0
}
 8003112:	4618      	mov	r0, r3
 8003114:	3710      	adds	r7, #16
 8003116:	46bd      	mov	sp, r7
 8003118:	bd80      	pop	{r7, pc}

0800311a <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800311a:	b580      	push	{r7, lr}
 800311c:	b084      	sub	sp, #16
 800311e:	af00      	add	r7, sp, #0
 8003120:	60f8      	str	r0, [r7, #12]
 8003122:	60b9      	str	r1, [r7, #8]
 8003124:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003126:	e02d      	b.n	8003184 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003128:	68f8      	ldr	r0, [r7, #12]
 800312a:	f000 f88d 	bl	8003248 <I2C_IsAcknowledgeFailed>
 800312e:	4603      	mov	r3, r0
 8003130:	2b00      	cmp	r3, #0
 8003132:	d001      	beq.n	8003138 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003134:	2301      	movs	r3, #1
 8003136:	e02d      	b.n	8003194 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003138:	68bb      	ldr	r3, [r7, #8]
 800313a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800313e:	d021      	beq.n	8003184 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003140:	f7fe f940 	bl	80013c4 <HAL_GetTick>
 8003144:	4602      	mov	r2, r0
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	1ad3      	subs	r3, r2, r3
 800314a:	68ba      	ldr	r2, [r7, #8]
 800314c:	429a      	cmp	r2, r3
 800314e:	d302      	bcc.n	8003156 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8003150:	68bb      	ldr	r3, [r7, #8]
 8003152:	2b00      	cmp	r3, #0
 8003154:	d116      	bne.n	8003184 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003156:	68fb      	ldr	r3, [r7, #12]
 8003158:	2200      	movs	r2, #0
 800315a:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800315c:	68fb      	ldr	r3, [r7, #12]
 800315e:	2220      	movs	r2, #32
 8003160:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003164:	68fb      	ldr	r3, [r7, #12]
 8003166:	2200      	movs	r2, #0
 8003168:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800316c:	68fb      	ldr	r3, [r7, #12]
 800316e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003170:	f043 0220 	orr.w	r2, r3, #32
 8003174:	68fb      	ldr	r3, [r7, #12]
 8003176:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003178:	68fb      	ldr	r3, [r7, #12]
 800317a:	2200      	movs	r2, #0
 800317c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003180:	2301      	movs	r3, #1
 8003182:	e007      	b.n	8003194 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003184:	68fb      	ldr	r3, [r7, #12]
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	695b      	ldr	r3, [r3, #20]
 800318a:	f003 0304 	and.w	r3, r3, #4
 800318e:	2b04      	cmp	r3, #4
 8003190:	d1ca      	bne.n	8003128 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003192:	2300      	movs	r3, #0
}
 8003194:	4618      	mov	r0, r3
 8003196:	3710      	adds	r7, #16
 8003198:	46bd      	mov	sp, r7
 800319a:	bd80      	pop	{r7, pc}

0800319c <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800319c:	b580      	push	{r7, lr}
 800319e:	b084      	sub	sp, #16
 80031a0:	af00      	add	r7, sp, #0
 80031a2:	60f8      	str	r0, [r7, #12]
 80031a4:	60b9      	str	r1, [r7, #8]
 80031a6:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80031a8:	e042      	b.n	8003230 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80031aa:	68fb      	ldr	r3, [r7, #12]
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	695b      	ldr	r3, [r3, #20]
 80031b0:	f003 0310 	and.w	r3, r3, #16
 80031b4:	2b10      	cmp	r3, #16
 80031b6:	d119      	bne.n	80031ec <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80031b8:	68fb      	ldr	r3, [r7, #12]
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	f06f 0210 	mvn.w	r2, #16
 80031c0:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80031c2:	68fb      	ldr	r3, [r7, #12]
 80031c4:	2200      	movs	r2, #0
 80031c6:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80031c8:	68fb      	ldr	r3, [r7, #12]
 80031ca:	2220      	movs	r2, #32
 80031cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80031d0:	68fb      	ldr	r3, [r7, #12]
 80031d2:	2200      	movs	r2, #0
 80031d4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 80031d8:	68fb      	ldr	r3, [r7, #12]
 80031da:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80031dc:	68fb      	ldr	r3, [r7, #12]
 80031de:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80031e0:	68fb      	ldr	r3, [r7, #12]
 80031e2:	2200      	movs	r2, #0
 80031e4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80031e8:	2301      	movs	r3, #1
 80031ea:	e029      	b.n	8003240 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80031ec:	f7fe f8ea 	bl	80013c4 <HAL_GetTick>
 80031f0:	4602      	mov	r2, r0
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	1ad3      	subs	r3, r2, r3
 80031f6:	68ba      	ldr	r2, [r7, #8]
 80031f8:	429a      	cmp	r2, r3
 80031fa:	d302      	bcc.n	8003202 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 80031fc:	68bb      	ldr	r3, [r7, #8]
 80031fe:	2b00      	cmp	r3, #0
 8003200:	d116      	bne.n	8003230 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8003202:	68fb      	ldr	r3, [r7, #12]
 8003204:	2200      	movs	r2, #0
 8003206:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003208:	68fb      	ldr	r3, [r7, #12]
 800320a:	2220      	movs	r2, #32
 800320c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003210:	68fb      	ldr	r3, [r7, #12]
 8003212:	2200      	movs	r2, #0
 8003214:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003218:	68fb      	ldr	r3, [r7, #12]
 800321a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800321c:	f043 0220 	orr.w	r2, r3, #32
 8003220:	68fb      	ldr	r3, [r7, #12]
 8003222:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003224:	68fb      	ldr	r3, [r7, #12]
 8003226:	2200      	movs	r2, #0
 8003228:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800322c:	2301      	movs	r3, #1
 800322e:	e007      	b.n	8003240 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003230:	68fb      	ldr	r3, [r7, #12]
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	695b      	ldr	r3, [r3, #20]
 8003236:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800323a:	2b40      	cmp	r3, #64	; 0x40
 800323c:	d1b5      	bne.n	80031aa <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800323e:	2300      	movs	r3, #0
}
 8003240:	4618      	mov	r0, r3
 8003242:	3710      	adds	r7, #16
 8003244:	46bd      	mov	sp, r7
 8003246:	bd80      	pop	{r7, pc}

08003248 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8003248:	b480      	push	{r7}
 800324a:	b083      	sub	sp, #12
 800324c:	af00      	add	r7, sp, #0
 800324e:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	695b      	ldr	r3, [r3, #20]
 8003256:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800325a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800325e:	d11b      	bne.n	8003298 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003268:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	2200      	movs	r2, #0
 800326e:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	2220      	movs	r2, #32
 8003274:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	2200      	movs	r2, #0
 800327c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003284:	f043 0204 	orr.w	r2, r3, #4
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	2200      	movs	r2, #0
 8003290:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8003294:	2301      	movs	r3, #1
 8003296:	e000      	b.n	800329a <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8003298:	2300      	movs	r3, #0
}
 800329a:	4618      	mov	r0, r3
 800329c:	370c      	adds	r7, #12
 800329e:	46bd      	mov	sp, r7
 80032a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032a4:	4770      	bx	lr

080032a6 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter new state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80032a6:	b480      	push	{r7}
 80032a8:	b083      	sub	sp, #12
 80032aa:	af00      	add	r7, sp, #0
 80032ac:	6078      	str	r0, [r7, #4]
 80032ae:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80032b6:	b2db      	uxtb	r3, r3
 80032b8:	2b20      	cmp	r3, #32
 80032ba:	d129      	bne.n	8003310 <HAL_I2CEx_ConfigAnalogFilter+0x6a>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	2224      	movs	r2, #36	; 0x24
 80032c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	681a      	ldr	r2, [r3, #0]
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	f022 0201 	bic.w	r2, r2, #1
 80032d2:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->FLTR &= ~(I2C_FLTR_ANOFF);
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	f022 0210 	bic.w	r2, r2, #16
 80032e2:	625a      	str	r2, [r3, #36]	; 0x24

    /* Disable the analog filter */
    hi2c->Instance->FLTR |= AnalogFilter;
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	6a59      	ldr	r1, [r3, #36]	; 0x24
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	683a      	ldr	r2, [r7, #0]
 80032f0:	430a      	orrs	r2, r1
 80032f2:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	681a      	ldr	r2, [r3, #0]
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	f042 0201 	orr.w	r2, r2, #1
 8003302:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	2220      	movs	r2, #32
 8003308:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 800330c:	2300      	movs	r3, #0
 800330e:	e000      	b.n	8003312 <HAL_I2CEx_ConfigAnalogFilter+0x6c>
  }
  else
  {
    return HAL_BUSY;
 8003310:	2302      	movs	r3, #2
  }
}
 8003312:	4618      	mov	r0, r3
 8003314:	370c      	adds	r7, #12
 8003316:	46bd      	mov	sp, r7
 8003318:	f85d 7b04 	ldr.w	r7, [sp], #4
 800331c:	4770      	bx	lr

0800331e <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between 0x00 and 0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800331e:	b480      	push	{r7}
 8003320:	b085      	sub	sp, #20
 8003322:	af00      	add	r7, sp, #0
 8003324:	6078      	str	r0, [r7, #4]
 8003326:	6039      	str	r1, [r7, #0]
  uint16_t tmpreg = 0;
 8003328:	2300      	movs	r3, #0
 800332a:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003332:	b2db      	uxtb	r3, r3
 8003334:	2b20      	cmp	r3, #32
 8003336:	d12a      	bne.n	800338e <HAL_I2CEx_ConfigDigitalFilter+0x70>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	2224      	movs	r2, #36	; 0x24
 800333c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	681a      	ldr	r2, [r3, #0]
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	f022 0201 	bic.w	r2, r2, #1
 800334e:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->FLTR;
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003356:	81fb      	strh	r3, [r7, #14]

    /* Reset I2Cx DNF bit [3:0] */
    tmpreg &= ~(I2C_FLTR_DNF);
 8003358:	89fb      	ldrh	r3, [r7, #14]
 800335a:	f023 030f 	bic.w	r3, r3, #15
 800335e:	81fb      	strh	r3, [r7, #14]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter;
 8003360:	683b      	ldr	r3, [r7, #0]
 8003362:	b29a      	uxth	r2, r3
 8003364:	89fb      	ldrh	r3, [r7, #14]
 8003366:	4313      	orrs	r3, r2
 8003368:	81fb      	strh	r3, [r7, #14]

    /* Store the new register value */
    hi2c->Instance->FLTR = tmpreg;
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	89fa      	ldrh	r2, [r7, #14]
 8003370:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	681a      	ldr	r2, [r3, #0]
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	f042 0201 	orr.w	r2, r2, #1
 8003380:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	2220      	movs	r2, #32
 8003386:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 800338a:	2300      	movs	r3, #0
 800338c:	e000      	b.n	8003390 <HAL_I2CEx_ConfigDigitalFilter+0x72>
  }
  else
  {
    return HAL_BUSY;
 800338e:	2302      	movs	r3, #2
  }
}
 8003390:	4618      	mov	r0, r3
 8003392:	3714      	adds	r7, #20
 8003394:	46bd      	mov	sp, r7
 8003396:	f85d 7b04 	ldr.w	r7, [sp], #4
 800339a:	4770      	bx	lr

0800339c <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800339c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800339e:	b08f      	sub	sp, #60	; 0x3c
 80033a0:	af0a      	add	r7, sp, #40	; 0x28
 80033a2:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	2b00      	cmp	r3, #0
 80033a8:	d101      	bne.n	80033ae <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80033aa:	2301      	movs	r3, #1
 80033ac:	e10f      	b.n	80035ce <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 80033ba:	b2db      	uxtb	r3, r3
 80033bc:	2b00      	cmp	r3, #0
 80033be:	d106      	bne.n	80033ce <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	2200      	movs	r2, #0
 80033c4:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80033c8:	6878      	ldr	r0, [r7, #4]
 80033ca:	f7fd fe95 	bl	80010f8 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	2203      	movs	r2, #3
 80033d2:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 80033d6:	68bb      	ldr	r3, [r7, #8]
 80033d8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80033da:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80033de:	2b00      	cmp	r3, #0
 80033e0:	d102      	bne.n	80033e8 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	2200      	movs	r2, #0
 80033e6:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	4618      	mov	r0, r3
 80033ee:	f001 fe72 	bl	80050d6 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	603b      	str	r3, [r7, #0]
 80033f8:	687e      	ldr	r6, [r7, #4]
 80033fa:	466d      	mov	r5, sp
 80033fc:	f106 0410 	add.w	r4, r6, #16
 8003400:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003402:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003404:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003406:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003408:	e894 0003 	ldmia.w	r4, {r0, r1}
 800340c:	e885 0003 	stmia.w	r5, {r0, r1}
 8003410:	1d33      	adds	r3, r6, #4
 8003412:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003414:	6838      	ldr	r0, [r7, #0]
 8003416:	f001 fdfd 	bl	8005014 <USB_CoreInit>
 800341a:	4603      	mov	r3, r0
 800341c:	2b00      	cmp	r3, #0
 800341e:	d005      	beq.n	800342c <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	2202      	movs	r2, #2
 8003424:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8003428:	2301      	movs	r3, #1
 800342a:	e0d0      	b.n	80035ce <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	2100      	movs	r1, #0
 8003432:	4618      	mov	r0, r3
 8003434:	f001 fe60 	bl	80050f8 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003438:	2300      	movs	r3, #0
 800343a:	73fb      	strb	r3, [r7, #15]
 800343c:	e04a      	b.n	80034d4 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800343e:	7bfa      	ldrb	r2, [r7, #15]
 8003440:	6879      	ldr	r1, [r7, #4]
 8003442:	4613      	mov	r3, r2
 8003444:	00db      	lsls	r3, r3, #3
 8003446:	4413      	add	r3, r2
 8003448:	009b      	lsls	r3, r3, #2
 800344a:	440b      	add	r3, r1
 800344c:	333d      	adds	r3, #61	; 0x3d
 800344e:	2201      	movs	r2, #1
 8003450:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8003452:	7bfa      	ldrb	r2, [r7, #15]
 8003454:	6879      	ldr	r1, [r7, #4]
 8003456:	4613      	mov	r3, r2
 8003458:	00db      	lsls	r3, r3, #3
 800345a:	4413      	add	r3, r2
 800345c:	009b      	lsls	r3, r3, #2
 800345e:	440b      	add	r3, r1
 8003460:	333c      	adds	r3, #60	; 0x3c
 8003462:	7bfa      	ldrb	r2, [r7, #15]
 8003464:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8003466:	7bfa      	ldrb	r2, [r7, #15]
 8003468:	7bfb      	ldrb	r3, [r7, #15]
 800346a:	b298      	uxth	r0, r3
 800346c:	6879      	ldr	r1, [r7, #4]
 800346e:	4613      	mov	r3, r2
 8003470:	00db      	lsls	r3, r3, #3
 8003472:	4413      	add	r3, r2
 8003474:	009b      	lsls	r3, r3, #2
 8003476:	440b      	add	r3, r1
 8003478:	3344      	adds	r3, #68	; 0x44
 800347a:	4602      	mov	r2, r0
 800347c:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800347e:	7bfa      	ldrb	r2, [r7, #15]
 8003480:	6879      	ldr	r1, [r7, #4]
 8003482:	4613      	mov	r3, r2
 8003484:	00db      	lsls	r3, r3, #3
 8003486:	4413      	add	r3, r2
 8003488:	009b      	lsls	r3, r3, #2
 800348a:	440b      	add	r3, r1
 800348c:	3340      	adds	r3, #64	; 0x40
 800348e:	2200      	movs	r2, #0
 8003490:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8003492:	7bfa      	ldrb	r2, [r7, #15]
 8003494:	6879      	ldr	r1, [r7, #4]
 8003496:	4613      	mov	r3, r2
 8003498:	00db      	lsls	r3, r3, #3
 800349a:	4413      	add	r3, r2
 800349c:	009b      	lsls	r3, r3, #2
 800349e:	440b      	add	r3, r1
 80034a0:	3348      	adds	r3, #72	; 0x48
 80034a2:	2200      	movs	r2, #0
 80034a4:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80034a6:	7bfa      	ldrb	r2, [r7, #15]
 80034a8:	6879      	ldr	r1, [r7, #4]
 80034aa:	4613      	mov	r3, r2
 80034ac:	00db      	lsls	r3, r3, #3
 80034ae:	4413      	add	r3, r2
 80034b0:	009b      	lsls	r3, r3, #2
 80034b2:	440b      	add	r3, r1
 80034b4:	334c      	adds	r3, #76	; 0x4c
 80034b6:	2200      	movs	r2, #0
 80034b8:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80034ba:	7bfa      	ldrb	r2, [r7, #15]
 80034bc:	6879      	ldr	r1, [r7, #4]
 80034be:	4613      	mov	r3, r2
 80034c0:	00db      	lsls	r3, r3, #3
 80034c2:	4413      	add	r3, r2
 80034c4:	009b      	lsls	r3, r3, #2
 80034c6:	440b      	add	r3, r1
 80034c8:	3354      	adds	r3, #84	; 0x54
 80034ca:	2200      	movs	r2, #0
 80034cc:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80034ce:	7bfb      	ldrb	r3, [r7, #15]
 80034d0:	3301      	adds	r3, #1
 80034d2:	73fb      	strb	r3, [r7, #15]
 80034d4:	7bfa      	ldrb	r2, [r7, #15]
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	685b      	ldr	r3, [r3, #4]
 80034da:	429a      	cmp	r2, r3
 80034dc:	d3af      	bcc.n	800343e <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80034de:	2300      	movs	r3, #0
 80034e0:	73fb      	strb	r3, [r7, #15]
 80034e2:	e044      	b.n	800356e <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80034e4:	7bfa      	ldrb	r2, [r7, #15]
 80034e6:	6879      	ldr	r1, [r7, #4]
 80034e8:	4613      	mov	r3, r2
 80034ea:	00db      	lsls	r3, r3, #3
 80034ec:	4413      	add	r3, r2
 80034ee:	009b      	lsls	r3, r3, #2
 80034f0:	440b      	add	r3, r1
 80034f2:	f203 237d 	addw	r3, r3, #637	; 0x27d
 80034f6:	2200      	movs	r2, #0
 80034f8:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80034fa:	7bfa      	ldrb	r2, [r7, #15]
 80034fc:	6879      	ldr	r1, [r7, #4]
 80034fe:	4613      	mov	r3, r2
 8003500:	00db      	lsls	r3, r3, #3
 8003502:	4413      	add	r3, r2
 8003504:	009b      	lsls	r3, r3, #2
 8003506:	440b      	add	r3, r1
 8003508:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 800350c:	7bfa      	ldrb	r2, [r7, #15]
 800350e:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8003510:	7bfa      	ldrb	r2, [r7, #15]
 8003512:	6879      	ldr	r1, [r7, #4]
 8003514:	4613      	mov	r3, r2
 8003516:	00db      	lsls	r3, r3, #3
 8003518:	4413      	add	r3, r2
 800351a:	009b      	lsls	r3, r3, #2
 800351c:	440b      	add	r3, r1
 800351e:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8003522:	2200      	movs	r2, #0
 8003524:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8003526:	7bfa      	ldrb	r2, [r7, #15]
 8003528:	6879      	ldr	r1, [r7, #4]
 800352a:	4613      	mov	r3, r2
 800352c:	00db      	lsls	r3, r3, #3
 800352e:	4413      	add	r3, r2
 8003530:	009b      	lsls	r3, r3, #2
 8003532:	440b      	add	r3, r1
 8003534:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8003538:	2200      	movs	r2, #0
 800353a:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800353c:	7bfa      	ldrb	r2, [r7, #15]
 800353e:	6879      	ldr	r1, [r7, #4]
 8003540:	4613      	mov	r3, r2
 8003542:	00db      	lsls	r3, r3, #3
 8003544:	4413      	add	r3, r2
 8003546:	009b      	lsls	r3, r3, #2
 8003548:	440b      	add	r3, r1
 800354a:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 800354e:	2200      	movs	r2, #0
 8003550:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8003552:	7bfa      	ldrb	r2, [r7, #15]
 8003554:	6879      	ldr	r1, [r7, #4]
 8003556:	4613      	mov	r3, r2
 8003558:	00db      	lsls	r3, r3, #3
 800355a:	4413      	add	r3, r2
 800355c:	009b      	lsls	r3, r3, #2
 800355e:	440b      	add	r3, r1
 8003560:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8003564:	2200      	movs	r2, #0
 8003566:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003568:	7bfb      	ldrb	r3, [r7, #15]
 800356a:	3301      	adds	r3, #1
 800356c:	73fb      	strb	r3, [r7, #15]
 800356e:	7bfa      	ldrb	r2, [r7, #15]
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	685b      	ldr	r3, [r3, #4]
 8003574:	429a      	cmp	r2, r3
 8003576:	d3b5      	bcc.n	80034e4 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	603b      	str	r3, [r7, #0]
 800357e:	687e      	ldr	r6, [r7, #4]
 8003580:	466d      	mov	r5, sp
 8003582:	f106 0410 	add.w	r4, r6, #16
 8003586:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003588:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800358a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800358c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800358e:	e894 0003 	ldmia.w	r4, {r0, r1}
 8003592:	e885 0003 	stmia.w	r5, {r0, r1}
 8003596:	1d33      	adds	r3, r6, #4
 8003598:	cb0e      	ldmia	r3, {r1, r2, r3}
 800359a:	6838      	ldr	r0, [r7, #0]
 800359c:	f001 fdf8 	bl	8005190 <USB_DevInit>
 80035a0:	4603      	mov	r3, r0
 80035a2:	2b00      	cmp	r3, #0
 80035a4:	d005      	beq.n	80035b2 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	2202      	movs	r2, #2
 80035aa:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 80035ae:	2301      	movs	r3, #1
 80035b0:	e00d      	b.n	80035ce <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	2200      	movs	r2, #0
 80035b6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	2201      	movs	r2, #1
 80035be:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	4618      	mov	r0, r3
 80035c8:	f001 ffc3 	bl	8005552 <USB_DevDisconnect>

  return HAL_OK;
 80035cc:	2300      	movs	r3, #0
}
 80035ce:	4618      	mov	r0, r3
 80035d0:	3714      	adds	r7, #20
 80035d2:	46bd      	mov	sp, r7
 80035d4:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

080035d8 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80035d8:	b580      	push	{r7, lr}
 80035da:	b086      	sub	sp, #24
 80035dc:	af00      	add	r7, sp, #0
 80035de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	2b00      	cmp	r3, #0
 80035e4:	d101      	bne.n	80035ea <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80035e6:	2301      	movs	r3, #1
 80035e8:	e267      	b.n	8003aba <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	f003 0301 	and.w	r3, r3, #1
 80035f2:	2b00      	cmp	r3, #0
 80035f4:	d075      	beq.n	80036e2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80035f6:	4b88      	ldr	r3, [pc, #544]	; (8003818 <HAL_RCC_OscConfig+0x240>)
 80035f8:	689b      	ldr	r3, [r3, #8]
 80035fa:	f003 030c 	and.w	r3, r3, #12
 80035fe:	2b04      	cmp	r3, #4
 8003600:	d00c      	beq.n	800361c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003602:	4b85      	ldr	r3, [pc, #532]	; (8003818 <HAL_RCC_OscConfig+0x240>)
 8003604:	689b      	ldr	r3, [r3, #8]
 8003606:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800360a:	2b08      	cmp	r3, #8
 800360c:	d112      	bne.n	8003634 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800360e:	4b82      	ldr	r3, [pc, #520]	; (8003818 <HAL_RCC_OscConfig+0x240>)
 8003610:	685b      	ldr	r3, [r3, #4]
 8003612:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003616:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800361a:	d10b      	bne.n	8003634 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800361c:	4b7e      	ldr	r3, [pc, #504]	; (8003818 <HAL_RCC_OscConfig+0x240>)
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003624:	2b00      	cmp	r3, #0
 8003626:	d05b      	beq.n	80036e0 <HAL_RCC_OscConfig+0x108>
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	685b      	ldr	r3, [r3, #4]
 800362c:	2b00      	cmp	r3, #0
 800362e:	d157      	bne.n	80036e0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003630:	2301      	movs	r3, #1
 8003632:	e242      	b.n	8003aba <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	685b      	ldr	r3, [r3, #4]
 8003638:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800363c:	d106      	bne.n	800364c <HAL_RCC_OscConfig+0x74>
 800363e:	4b76      	ldr	r3, [pc, #472]	; (8003818 <HAL_RCC_OscConfig+0x240>)
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	4a75      	ldr	r2, [pc, #468]	; (8003818 <HAL_RCC_OscConfig+0x240>)
 8003644:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003648:	6013      	str	r3, [r2, #0]
 800364a:	e01d      	b.n	8003688 <HAL_RCC_OscConfig+0xb0>
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	685b      	ldr	r3, [r3, #4]
 8003650:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003654:	d10c      	bne.n	8003670 <HAL_RCC_OscConfig+0x98>
 8003656:	4b70      	ldr	r3, [pc, #448]	; (8003818 <HAL_RCC_OscConfig+0x240>)
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	4a6f      	ldr	r2, [pc, #444]	; (8003818 <HAL_RCC_OscConfig+0x240>)
 800365c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003660:	6013      	str	r3, [r2, #0]
 8003662:	4b6d      	ldr	r3, [pc, #436]	; (8003818 <HAL_RCC_OscConfig+0x240>)
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	4a6c      	ldr	r2, [pc, #432]	; (8003818 <HAL_RCC_OscConfig+0x240>)
 8003668:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800366c:	6013      	str	r3, [r2, #0]
 800366e:	e00b      	b.n	8003688 <HAL_RCC_OscConfig+0xb0>
 8003670:	4b69      	ldr	r3, [pc, #420]	; (8003818 <HAL_RCC_OscConfig+0x240>)
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	4a68      	ldr	r2, [pc, #416]	; (8003818 <HAL_RCC_OscConfig+0x240>)
 8003676:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800367a:	6013      	str	r3, [r2, #0]
 800367c:	4b66      	ldr	r3, [pc, #408]	; (8003818 <HAL_RCC_OscConfig+0x240>)
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	4a65      	ldr	r2, [pc, #404]	; (8003818 <HAL_RCC_OscConfig+0x240>)
 8003682:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003686:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	685b      	ldr	r3, [r3, #4]
 800368c:	2b00      	cmp	r3, #0
 800368e:	d013      	beq.n	80036b8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003690:	f7fd fe98 	bl	80013c4 <HAL_GetTick>
 8003694:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003696:	e008      	b.n	80036aa <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003698:	f7fd fe94 	bl	80013c4 <HAL_GetTick>
 800369c:	4602      	mov	r2, r0
 800369e:	693b      	ldr	r3, [r7, #16]
 80036a0:	1ad3      	subs	r3, r2, r3
 80036a2:	2b64      	cmp	r3, #100	; 0x64
 80036a4:	d901      	bls.n	80036aa <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80036a6:	2303      	movs	r3, #3
 80036a8:	e207      	b.n	8003aba <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80036aa:	4b5b      	ldr	r3, [pc, #364]	; (8003818 <HAL_RCC_OscConfig+0x240>)
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80036b2:	2b00      	cmp	r3, #0
 80036b4:	d0f0      	beq.n	8003698 <HAL_RCC_OscConfig+0xc0>
 80036b6:	e014      	b.n	80036e2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80036b8:	f7fd fe84 	bl	80013c4 <HAL_GetTick>
 80036bc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80036be:	e008      	b.n	80036d2 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80036c0:	f7fd fe80 	bl	80013c4 <HAL_GetTick>
 80036c4:	4602      	mov	r2, r0
 80036c6:	693b      	ldr	r3, [r7, #16]
 80036c8:	1ad3      	subs	r3, r2, r3
 80036ca:	2b64      	cmp	r3, #100	; 0x64
 80036cc:	d901      	bls.n	80036d2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80036ce:	2303      	movs	r3, #3
 80036d0:	e1f3      	b.n	8003aba <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80036d2:	4b51      	ldr	r3, [pc, #324]	; (8003818 <HAL_RCC_OscConfig+0x240>)
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80036da:	2b00      	cmp	r3, #0
 80036dc:	d1f0      	bne.n	80036c0 <HAL_RCC_OscConfig+0xe8>
 80036de:	e000      	b.n	80036e2 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80036e0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	f003 0302 	and.w	r3, r3, #2
 80036ea:	2b00      	cmp	r3, #0
 80036ec:	d063      	beq.n	80037b6 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80036ee:	4b4a      	ldr	r3, [pc, #296]	; (8003818 <HAL_RCC_OscConfig+0x240>)
 80036f0:	689b      	ldr	r3, [r3, #8]
 80036f2:	f003 030c 	and.w	r3, r3, #12
 80036f6:	2b00      	cmp	r3, #0
 80036f8:	d00b      	beq.n	8003712 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80036fa:	4b47      	ldr	r3, [pc, #284]	; (8003818 <HAL_RCC_OscConfig+0x240>)
 80036fc:	689b      	ldr	r3, [r3, #8]
 80036fe:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003702:	2b08      	cmp	r3, #8
 8003704:	d11c      	bne.n	8003740 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003706:	4b44      	ldr	r3, [pc, #272]	; (8003818 <HAL_RCC_OscConfig+0x240>)
 8003708:	685b      	ldr	r3, [r3, #4]
 800370a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800370e:	2b00      	cmp	r3, #0
 8003710:	d116      	bne.n	8003740 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003712:	4b41      	ldr	r3, [pc, #260]	; (8003818 <HAL_RCC_OscConfig+0x240>)
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	f003 0302 	and.w	r3, r3, #2
 800371a:	2b00      	cmp	r3, #0
 800371c:	d005      	beq.n	800372a <HAL_RCC_OscConfig+0x152>
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	68db      	ldr	r3, [r3, #12]
 8003722:	2b01      	cmp	r3, #1
 8003724:	d001      	beq.n	800372a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003726:	2301      	movs	r3, #1
 8003728:	e1c7      	b.n	8003aba <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800372a:	4b3b      	ldr	r3, [pc, #236]	; (8003818 <HAL_RCC_OscConfig+0x240>)
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	691b      	ldr	r3, [r3, #16]
 8003736:	00db      	lsls	r3, r3, #3
 8003738:	4937      	ldr	r1, [pc, #220]	; (8003818 <HAL_RCC_OscConfig+0x240>)
 800373a:	4313      	orrs	r3, r2
 800373c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800373e:	e03a      	b.n	80037b6 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	68db      	ldr	r3, [r3, #12]
 8003744:	2b00      	cmp	r3, #0
 8003746:	d020      	beq.n	800378a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003748:	4b34      	ldr	r3, [pc, #208]	; (800381c <HAL_RCC_OscConfig+0x244>)
 800374a:	2201      	movs	r2, #1
 800374c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800374e:	f7fd fe39 	bl	80013c4 <HAL_GetTick>
 8003752:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003754:	e008      	b.n	8003768 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003756:	f7fd fe35 	bl	80013c4 <HAL_GetTick>
 800375a:	4602      	mov	r2, r0
 800375c:	693b      	ldr	r3, [r7, #16]
 800375e:	1ad3      	subs	r3, r2, r3
 8003760:	2b02      	cmp	r3, #2
 8003762:	d901      	bls.n	8003768 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003764:	2303      	movs	r3, #3
 8003766:	e1a8      	b.n	8003aba <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003768:	4b2b      	ldr	r3, [pc, #172]	; (8003818 <HAL_RCC_OscConfig+0x240>)
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	f003 0302 	and.w	r3, r3, #2
 8003770:	2b00      	cmp	r3, #0
 8003772:	d0f0      	beq.n	8003756 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003774:	4b28      	ldr	r3, [pc, #160]	; (8003818 <HAL_RCC_OscConfig+0x240>)
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	691b      	ldr	r3, [r3, #16]
 8003780:	00db      	lsls	r3, r3, #3
 8003782:	4925      	ldr	r1, [pc, #148]	; (8003818 <HAL_RCC_OscConfig+0x240>)
 8003784:	4313      	orrs	r3, r2
 8003786:	600b      	str	r3, [r1, #0]
 8003788:	e015      	b.n	80037b6 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800378a:	4b24      	ldr	r3, [pc, #144]	; (800381c <HAL_RCC_OscConfig+0x244>)
 800378c:	2200      	movs	r2, #0
 800378e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003790:	f7fd fe18 	bl	80013c4 <HAL_GetTick>
 8003794:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003796:	e008      	b.n	80037aa <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003798:	f7fd fe14 	bl	80013c4 <HAL_GetTick>
 800379c:	4602      	mov	r2, r0
 800379e:	693b      	ldr	r3, [r7, #16]
 80037a0:	1ad3      	subs	r3, r2, r3
 80037a2:	2b02      	cmp	r3, #2
 80037a4:	d901      	bls.n	80037aa <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80037a6:	2303      	movs	r3, #3
 80037a8:	e187      	b.n	8003aba <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80037aa:	4b1b      	ldr	r3, [pc, #108]	; (8003818 <HAL_RCC_OscConfig+0x240>)
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	f003 0302 	and.w	r3, r3, #2
 80037b2:	2b00      	cmp	r3, #0
 80037b4:	d1f0      	bne.n	8003798 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	f003 0308 	and.w	r3, r3, #8
 80037be:	2b00      	cmp	r3, #0
 80037c0:	d036      	beq.n	8003830 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	695b      	ldr	r3, [r3, #20]
 80037c6:	2b00      	cmp	r3, #0
 80037c8:	d016      	beq.n	80037f8 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80037ca:	4b15      	ldr	r3, [pc, #84]	; (8003820 <HAL_RCC_OscConfig+0x248>)
 80037cc:	2201      	movs	r2, #1
 80037ce:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80037d0:	f7fd fdf8 	bl	80013c4 <HAL_GetTick>
 80037d4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80037d6:	e008      	b.n	80037ea <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80037d8:	f7fd fdf4 	bl	80013c4 <HAL_GetTick>
 80037dc:	4602      	mov	r2, r0
 80037de:	693b      	ldr	r3, [r7, #16]
 80037e0:	1ad3      	subs	r3, r2, r3
 80037e2:	2b02      	cmp	r3, #2
 80037e4:	d901      	bls.n	80037ea <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80037e6:	2303      	movs	r3, #3
 80037e8:	e167      	b.n	8003aba <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80037ea:	4b0b      	ldr	r3, [pc, #44]	; (8003818 <HAL_RCC_OscConfig+0x240>)
 80037ec:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80037ee:	f003 0302 	and.w	r3, r3, #2
 80037f2:	2b00      	cmp	r3, #0
 80037f4:	d0f0      	beq.n	80037d8 <HAL_RCC_OscConfig+0x200>
 80037f6:	e01b      	b.n	8003830 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80037f8:	4b09      	ldr	r3, [pc, #36]	; (8003820 <HAL_RCC_OscConfig+0x248>)
 80037fa:	2200      	movs	r2, #0
 80037fc:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80037fe:	f7fd fde1 	bl	80013c4 <HAL_GetTick>
 8003802:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003804:	e00e      	b.n	8003824 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003806:	f7fd fddd 	bl	80013c4 <HAL_GetTick>
 800380a:	4602      	mov	r2, r0
 800380c:	693b      	ldr	r3, [r7, #16]
 800380e:	1ad3      	subs	r3, r2, r3
 8003810:	2b02      	cmp	r3, #2
 8003812:	d907      	bls.n	8003824 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003814:	2303      	movs	r3, #3
 8003816:	e150      	b.n	8003aba <HAL_RCC_OscConfig+0x4e2>
 8003818:	40023800 	.word	0x40023800
 800381c:	42470000 	.word	0x42470000
 8003820:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003824:	4b88      	ldr	r3, [pc, #544]	; (8003a48 <HAL_RCC_OscConfig+0x470>)
 8003826:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003828:	f003 0302 	and.w	r3, r3, #2
 800382c:	2b00      	cmp	r3, #0
 800382e:	d1ea      	bne.n	8003806 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	f003 0304 	and.w	r3, r3, #4
 8003838:	2b00      	cmp	r3, #0
 800383a:	f000 8097 	beq.w	800396c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800383e:	2300      	movs	r3, #0
 8003840:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003842:	4b81      	ldr	r3, [pc, #516]	; (8003a48 <HAL_RCC_OscConfig+0x470>)
 8003844:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003846:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800384a:	2b00      	cmp	r3, #0
 800384c:	d10f      	bne.n	800386e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800384e:	2300      	movs	r3, #0
 8003850:	60bb      	str	r3, [r7, #8]
 8003852:	4b7d      	ldr	r3, [pc, #500]	; (8003a48 <HAL_RCC_OscConfig+0x470>)
 8003854:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003856:	4a7c      	ldr	r2, [pc, #496]	; (8003a48 <HAL_RCC_OscConfig+0x470>)
 8003858:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800385c:	6413      	str	r3, [r2, #64]	; 0x40
 800385e:	4b7a      	ldr	r3, [pc, #488]	; (8003a48 <HAL_RCC_OscConfig+0x470>)
 8003860:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003862:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003866:	60bb      	str	r3, [r7, #8]
 8003868:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800386a:	2301      	movs	r3, #1
 800386c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800386e:	4b77      	ldr	r3, [pc, #476]	; (8003a4c <HAL_RCC_OscConfig+0x474>)
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003876:	2b00      	cmp	r3, #0
 8003878:	d118      	bne.n	80038ac <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800387a:	4b74      	ldr	r3, [pc, #464]	; (8003a4c <HAL_RCC_OscConfig+0x474>)
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	4a73      	ldr	r2, [pc, #460]	; (8003a4c <HAL_RCC_OscConfig+0x474>)
 8003880:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003884:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003886:	f7fd fd9d 	bl	80013c4 <HAL_GetTick>
 800388a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800388c:	e008      	b.n	80038a0 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800388e:	f7fd fd99 	bl	80013c4 <HAL_GetTick>
 8003892:	4602      	mov	r2, r0
 8003894:	693b      	ldr	r3, [r7, #16]
 8003896:	1ad3      	subs	r3, r2, r3
 8003898:	2b02      	cmp	r3, #2
 800389a:	d901      	bls.n	80038a0 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 800389c:	2303      	movs	r3, #3
 800389e:	e10c      	b.n	8003aba <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80038a0:	4b6a      	ldr	r3, [pc, #424]	; (8003a4c <HAL_RCC_OscConfig+0x474>)
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80038a8:	2b00      	cmp	r3, #0
 80038aa:	d0f0      	beq.n	800388e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	689b      	ldr	r3, [r3, #8]
 80038b0:	2b01      	cmp	r3, #1
 80038b2:	d106      	bne.n	80038c2 <HAL_RCC_OscConfig+0x2ea>
 80038b4:	4b64      	ldr	r3, [pc, #400]	; (8003a48 <HAL_RCC_OscConfig+0x470>)
 80038b6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80038b8:	4a63      	ldr	r2, [pc, #396]	; (8003a48 <HAL_RCC_OscConfig+0x470>)
 80038ba:	f043 0301 	orr.w	r3, r3, #1
 80038be:	6713      	str	r3, [r2, #112]	; 0x70
 80038c0:	e01c      	b.n	80038fc <HAL_RCC_OscConfig+0x324>
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	689b      	ldr	r3, [r3, #8]
 80038c6:	2b05      	cmp	r3, #5
 80038c8:	d10c      	bne.n	80038e4 <HAL_RCC_OscConfig+0x30c>
 80038ca:	4b5f      	ldr	r3, [pc, #380]	; (8003a48 <HAL_RCC_OscConfig+0x470>)
 80038cc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80038ce:	4a5e      	ldr	r2, [pc, #376]	; (8003a48 <HAL_RCC_OscConfig+0x470>)
 80038d0:	f043 0304 	orr.w	r3, r3, #4
 80038d4:	6713      	str	r3, [r2, #112]	; 0x70
 80038d6:	4b5c      	ldr	r3, [pc, #368]	; (8003a48 <HAL_RCC_OscConfig+0x470>)
 80038d8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80038da:	4a5b      	ldr	r2, [pc, #364]	; (8003a48 <HAL_RCC_OscConfig+0x470>)
 80038dc:	f043 0301 	orr.w	r3, r3, #1
 80038e0:	6713      	str	r3, [r2, #112]	; 0x70
 80038e2:	e00b      	b.n	80038fc <HAL_RCC_OscConfig+0x324>
 80038e4:	4b58      	ldr	r3, [pc, #352]	; (8003a48 <HAL_RCC_OscConfig+0x470>)
 80038e6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80038e8:	4a57      	ldr	r2, [pc, #348]	; (8003a48 <HAL_RCC_OscConfig+0x470>)
 80038ea:	f023 0301 	bic.w	r3, r3, #1
 80038ee:	6713      	str	r3, [r2, #112]	; 0x70
 80038f0:	4b55      	ldr	r3, [pc, #340]	; (8003a48 <HAL_RCC_OscConfig+0x470>)
 80038f2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80038f4:	4a54      	ldr	r2, [pc, #336]	; (8003a48 <HAL_RCC_OscConfig+0x470>)
 80038f6:	f023 0304 	bic.w	r3, r3, #4
 80038fa:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	689b      	ldr	r3, [r3, #8]
 8003900:	2b00      	cmp	r3, #0
 8003902:	d015      	beq.n	8003930 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003904:	f7fd fd5e 	bl	80013c4 <HAL_GetTick>
 8003908:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800390a:	e00a      	b.n	8003922 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800390c:	f7fd fd5a 	bl	80013c4 <HAL_GetTick>
 8003910:	4602      	mov	r2, r0
 8003912:	693b      	ldr	r3, [r7, #16]
 8003914:	1ad3      	subs	r3, r2, r3
 8003916:	f241 3288 	movw	r2, #5000	; 0x1388
 800391a:	4293      	cmp	r3, r2
 800391c:	d901      	bls.n	8003922 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800391e:	2303      	movs	r3, #3
 8003920:	e0cb      	b.n	8003aba <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003922:	4b49      	ldr	r3, [pc, #292]	; (8003a48 <HAL_RCC_OscConfig+0x470>)
 8003924:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003926:	f003 0302 	and.w	r3, r3, #2
 800392a:	2b00      	cmp	r3, #0
 800392c:	d0ee      	beq.n	800390c <HAL_RCC_OscConfig+0x334>
 800392e:	e014      	b.n	800395a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003930:	f7fd fd48 	bl	80013c4 <HAL_GetTick>
 8003934:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003936:	e00a      	b.n	800394e <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003938:	f7fd fd44 	bl	80013c4 <HAL_GetTick>
 800393c:	4602      	mov	r2, r0
 800393e:	693b      	ldr	r3, [r7, #16]
 8003940:	1ad3      	subs	r3, r2, r3
 8003942:	f241 3288 	movw	r2, #5000	; 0x1388
 8003946:	4293      	cmp	r3, r2
 8003948:	d901      	bls.n	800394e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800394a:	2303      	movs	r3, #3
 800394c:	e0b5      	b.n	8003aba <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800394e:	4b3e      	ldr	r3, [pc, #248]	; (8003a48 <HAL_RCC_OscConfig+0x470>)
 8003950:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003952:	f003 0302 	and.w	r3, r3, #2
 8003956:	2b00      	cmp	r3, #0
 8003958:	d1ee      	bne.n	8003938 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800395a:	7dfb      	ldrb	r3, [r7, #23]
 800395c:	2b01      	cmp	r3, #1
 800395e:	d105      	bne.n	800396c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003960:	4b39      	ldr	r3, [pc, #228]	; (8003a48 <HAL_RCC_OscConfig+0x470>)
 8003962:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003964:	4a38      	ldr	r2, [pc, #224]	; (8003a48 <HAL_RCC_OscConfig+0x470>)
 8003966:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800396a:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	699b      	ldr	r3, [r3, #24]
 8003970:	2b00      	cmp	r3, #0
 8003972:	f000 80a1 	beq.w	8003ab8 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003976:	4b34      	ldr	r3, [pc, #208]	; (8003a48 <HAL_RCC_OscConfig+0x470>)
 8003978:	689b      	ldr	r3, [r3, #8]
 800397a:	f003 030c 	and.w	r3, r3, #12
 800397e:	2b08      	cmp	r3, #8
 8003980:	d05c      	beq.n	8003a3c <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	699b      	ldr	r3, [r3, #24]
 8003986:	2b02      	cmp	r3, #2
 8003988:	d141      	bne.n	8003a0e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800398a:	4b31      	ldr	r3, [pc, #196]	; (8003a50 <HAL_RCC_OscConfig+0x478>)
 800398c:	2200      	movs	r2, #0
 800398e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003990:	f7fd fd18 	bl	80013c4 <HAL_GetTick>
 8003994:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003996:	e008      	b.n	80039aa <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003998:	f7fd fd14 	bl	80013c4 <HAL_GetTick>
 800399c:	4602      	mov	r2, r0
 800399e:	693b      	ldr	r3, [r7, #16]
 80039a0:	1ad3      	subs	r3, r2, r3
 80039a2:	2b02      	cmp	r3, #2
 80039a4:	d901      	bls.n	80039aa <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80039a6:	2303      	movs	r3, #3
 80039a8:	e087      	b.n	8003aba <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80039aa:	4b27      	ldr	r3, [pc, #156]	; (8003a48 <HAL_RCC_OscConfig+0x470>)
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80039b2:	2b00      	cmp	r3, #0
 80039b4:	d1f0      	bne.n	8003998 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	69da      	ldr	r2, [r3, #28]
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	6a1b      	ldr	r3, [r3, #32]
 80039be:	431a      	orrs	r2, r3
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039c4:	019b      	lsls	r3, r3, #6
 80039c6:	431a      	orrs	r2, r3
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80039cc:	085b      	lsrs	r3, r3, #1
 80039ce:	3b01      	subs	r3, #1
 80039d0:	041b      	lsls	r3, r3, #16
 80039d2:	431a      	orrs	r2, r3
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80039d8:	061b      	lsls	r3, r3, #24
 80039da:	491b      	ldr	r1, [pc, #108]	; (8003a48 <HAL_RCC_OscConfig+0x470>)
 80039dc:	4313      	orrs	r3, r2
 80039de:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80039e0:	4b1b      	ldr	r3, [pc, #108]	; (8003a50 <HAL_RCC_OscConfig+0x478>)
 80039e2:	2201      	movs	r2, #1
 80039e4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80039e6:	f7fd fced 	bl	80013c4 <HAL_GetTick>
 80039ea:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80039ec:	e008      	b.n	8003a00 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80039ee:	f7fd fce9 	bl	80013c4 <HAL_GetTick>
 80039f2:	4602      	mov	r2, r0
 80039f4:	693b      	ldr	r3, [r7, #16]
 80039f6:	1ad3      	subs	r3, r2, r3
 80039f8:	2b02      	cmp	r3, #2
 80039fa:	d901      	bls.n	8003a00 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80039fc:	2303      	movs	r3, #3
 80039fe:	e05c      	b.n	8003aba <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003a00:	4b11      	ldr	r3, [pc, #68]	; (8003a48 <HAL_RCC_OscConfig+0x470>)
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003a08:	2b00      	cmp	r3, #0
 8003a0a:	d0f0      	beq.n	80039ee <HAL_RCC_OscConfig+0x416>
 8003a0c:	e054      	b.n	8003ab8 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003a0e:	4b10      	ldr	r3, [pc, #64]	; (8003a50 <HAL_RCC_OscConfig+0x478>)
 8003a10:	2200      	movs	r2, #0
 8003a12:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003a14:	f7fd fcd6 	bl	80013c4 <HAL_GetTick>
 8003a18:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003a1a:	e008      	b.n	8003a2e <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003a1c:	f7fd fcd2 	bl	80013c4 <HAL_GetTick>
 8003a20:	4602      	mov	r2, r0
 8003a22:	693b      	ldr	r3, [r7, #16]
 8003a24:	1ad3      	subs	r3, r2, r3
 8003a26:	2b02      	cmp	r3, #2
 8003a28:	d901      	bls.n	8003a2e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8003a2a:	2303      	movs	r3, #3
 8003a2c:	e045      	b.n	8003aba <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003a2e:	4b06      	ldr	r3, [pc, #24]	; (8003a48 <HAL_RCC_OscConfig+0x470>)
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003a36:	2b00      	cmp	r3, #0
 8003a38:	d1f0      	bne.n	8003a1c <HAL_RCC_OscConfig+0x444>
 8003a3a:	e03d      	b.n	8003ab8 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	699b      	ldr	r3, [r3, #24]
 8003a40:	2b01      	cmp	r3, #1
 8003a42:	d107      	bne.n	8003a54 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8003a44:	2301      	movs	r3, #1
 8003a46:	e038      	b.n	8003aba <HAL_RCC_OscConfig+0x4e2>
 8003a48:	40023800 	.word	0x40023800
 8003a4c:	40007000 	.word	0x40007000
 8003a50:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003a54:	4b1b      	ldr	r3, [pc, #108]	; (8003ac4 <HAL_RCC_OscConfig+0x4ec>)
 8003a56:	685b      	ldr	r3, [r3, #4]
 8003a58:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	699b      	ldr	r3, [r3, #24]
 8003a5e:	2b01      	cmp	r3, #1
 8003a60:	d028      	beq.n	8003ab4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003a62:	68fb      	ldr	r3, [r7, #12]
 8003a64:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003a6c:	429a      	cmp	r2, r3
 8003a6e:	d121      	bne.n	8003ab4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003a70:	68fb      	ldr	r3, [r7, #12]
 8003a72:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003a7a:	429a      	cmp	r2, r3
 8003a7c:	d11a      	bne.n	8003ab4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003a7e:	68fa      	ldr	r2, [r7, #12]
 8003a80:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003a84:	4013      	ands	r3, r2
 8003a86:	687a      	ldr	r2, [r7, #4]
 8003a88:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003a8a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003a8c:	4293      	cmp	r3, r2
 8003a8e:	d111      	bne.n	8003ab4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003a90:	68fb      	ldr	r3, [r7, #12]
 8003a92:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a9a:	085b      	lsrs	r3, r3, #1
 8003a9c:	3b01      	subs	r3, #1
 8003a9e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003aa0:	429a      	cmp	r2, r3
 8003aa2:	d107      	bne.n	8003ab4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003aa4:	68fb      	ldr	r3, [r7, #12]
 8003aa6:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003aae:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003ab0:	429a      	cmp	r2, r3
 8003ab2:	d001      	beq.n	8003ab8 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8003ab4:	2301      	movs	r3, #1
 8003ab6:	e000      	b.n	8003aba <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8003ab8:	2300      	movs	r3, #0
}
 8003aba:	4618      	mov	r0, r3
 8003abc:	3718      	adds	r7, #24
 8003abe:	46bd      	mov	sp, r7
 8003ac0:	bd80      	pop	{r7, pc}
 8003ac2:	bf00      	nop
 8003ac4:	40023800 	.word	0x40023800

08003ac8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003ac8:	b580      	push	{r7, lr}
 8003aca:	b084      	sub	sp, #16
 8003acc:	af00      	add	r7, sp, #0
 8003ace:	6078      	str	r0, [r7, #4]
 8003ad0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	2b00      	cmp	r3, #0
 8003ad6:	d101      	bne.n	8003adc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003ad8:	2301      	movs	r3, #1
 8003ada:	e0cc      	b.n	8003c76 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003adc:	4b68      	ldr	r3, [pc, #416]	; (8003c80 <HAL_RCC_ClockConfig+0x1b8>)
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	f003 030f 	and.w	r3, r3, #15
 8003ae4:	683a      	ldr	r2, [r7, #0]
 8003ae6:	429a      	cmp	r2, r3
 8003ae8:	d90c      	bls.n	8003b04 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003aea:	4b65      	ldr	r3, [pc, #404]	; (8003c80 <HAL_RCC_ClockConfig+0x1b8>)
 8003aec:	683a      	ldr	r2, [r7, #0]
 8003aee:	b2d2      	uxtb	r2, r2
 8003af0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003af2:	4b63      	ldr	r3, [pc, #396]	; (8003c80 <HAL_RCC_ClockConfig+0x1b8>)
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	f003 030f 	and.w	r3, r3, #15
 8003afa:	683a      	ldr	r2, [r7, #0]
 8003afc:	429a      	cmp	r2, r3
 8003afe:	d001      	beq.n	8003b04 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003b00:	2301      	movs	r3, #1
 8003b02:	e0b8      	b.n	8003c76 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	f003 0302 	and.w	r3, r3, #2
 8003b0c:	2b00      	cmp	r3, #0
 8003b0e:	d020      	beq.n	8003b52 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	f003 0304 	and.w	r3, r3, #4
 8003b18:	2b00      	cmp	r3, #0
 8003b1a:	d005      	beq.n	8003b28 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003b1c:	4b59      	ldr	r3, [pc, #356]	; (8003c84 <HAL_RCC_ClockConfig+0x1bc>)
 8003b1e:	689b      	ldr	r3, [r3, #8]
 8003b20:	4a58      	ldr	r2, [pc, #352]	; (8003c84 <HAL_RCC_ClockConfig+0x1bc>)
 8003b22:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003b26:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	f003 0308 	and.w	r3, r3, #8
 8003b30:	2b00      	cmp	r3, #0
 8003b32:	d005      	beq.n	8003b40 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003b34:	4b53      	ldr	r3, [pc, #332]	; (8003c84 <HAL_RCC_ClockConfig+0x1bc>)
 8003b36:	689b      	ldr	r3, [r3, #8]
 8003b38:	4a52      	ldr	r2, [pc, #328]	; (8003c84 <HAL_RCC_ClockConfig+0x1bc>)
 8003b3a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003b3e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003b40:	4b50      	ldr	r3, [pc, #320]	; (8003c84 <HAL_RCC_ClockConfig+0x1bc>)
 8003b42:	689b      	ldr	r3, [r3, #8]
 8003b44:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	689b      	ldr	r3, [r3, #8]
 8003b4c:	494d      	ldr	r1, [pc, #308]	; (8003c84 <HAL_RCC_ClockConfig+0x1bc>)
 8003b4e:	4313      	orrs	r3, r2
 8003b50:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	f003 0301 	and.w	r3, r3, #1
 8003b5a:	2b00      	cmp	r3, #0
 8003b5c:	d044      	beq.n	8003be8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	685b      	ldr	r3, [r3, #4]
 8003b62:	2b01      	cmp	r3, #1
 8003b64:	d107      	bne.n	8003b76 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003b66:	4b47      	ldr	r3, [pc, #284]	; (8003c84 <HAL_RCC_ClockConfig+0x1bc>)
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003b6e:	2b00      	cmp	r3, #0
 8003b70:	d119      	bne.n	8003ba6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003b72:	2301      	movs	r3, #1
 8003b74:	e07f      	b.n	8003c76 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	685b      	ldr	r3, [r3, #4]
 8003b7a:	2b02      	cmp	r3, #2
 8003b7c:	d003      	beq.n	8003b86 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003b82:	2b03      	cmp	r3, #3
 8003b84:	d107      	bne.n	8003b96 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003b86:	4b3f      	ldr	r3, [pc, #252]	; (8003c84 <HAL_RCC_ClockConfig+0x1bc>)
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003b8e:	2b00      	cmp	r3, #0
 8003b90:	d109      	bne.n	8003ba6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003b92:	2301      	movs	r3, #1
 8003b94:	e06f      	b.n	8003c76 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003b96:	4b3b      	ldr	r3, [pc, #236]	; (8003c84 <HAL_RCC_ClockConfig+0x1bc>)
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	f003 0302 	and.w	r3, r3, #2
 8003b9e:	2b00      	cmp	r3, #0
 8003ba0:	d101      	bne.n	8003ba6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003ba2:	2301      	movs	r3, #1
 8003ba4:	e067      	b.n	8003c76 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003ba6:	4b37      	ldr	r3, [pc, #220]	; (8003c84 <HAL_RCC_ClockConfig+0x1bc>)
 8003ba8:	689b      	ldr	r3, [r3, #8]
 8003baa:	f023 0203 	bic.w	r2, r3, #3
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	685b      	ldr	r3, [r3, #4]
 8003bb2:	4934      	ldr	r1, [pc, #208]	; (8003c84 <HAL_RCC_ClockConfig+0x1bc>)
 8003bb4:	4313      	orrs	r3, r2
 8003bb6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003bb8:	f7fd fc04 	bl	80013c4 <HAL_GetTick>
 8003bbc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003bbe:	e00a      	b.n	8003bd6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003bc0:	f7fd fc00 	bl	80013c4 <HAL_GetTick>
 8003bc4:	4602      	mov	r2, r0
 8003bc6:	68fb      	ldr	r3, [r7, #12]
 8003bc8:	1ad3      	subs	r3, r2, r3
 8003bca:	f241 3288 	movw	r2, #5000	; 0x1388
 8003bce:	4293      	cmp	r3, r2
 8003bd0:	d901      	bls.n	8003bd6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003bd2:	2303      	movs	r3, #3
 8003bd4:	e04f      	b.n	8003c76 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003bd6:	4b2b      	ldr	r3, [pc, #172]	; (8003c84 <HAL_RCC_ClockConfig+0x1bc>)
 8003bd8:	689b      	ldr	r3, [r3, #8]
 8003bda:	f003 020c 	and.w	r2, r3, #12
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	685b      	ldr	r3, [r3, #4]
 8003be2:	009b      	lsls	r3, r3, #2
 8003be4:	429a      	cmp	r2, r3
 8003be6:	d1eb      	bne.n	8003bc0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003be8:	4b25      	ldr	r3, [pc, #148]	; (8003c80 <HAL_RCC_ClockConfig+0x1b8>)
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	f003 030f 	and.w	r3, r3, #15
 8003bf0:	683a      	ldr	r2, [r7, #0]
 8003bf2:	429a      	cmp	r2, r3
 8003bf4:	d20c      	bcs.n	8003c10 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003bf6:	4b22      	ldr	r3, [pc, #136]	; (8003c80 <HAL_RCC_ClockConfig+0x1b8>)
 8003bf8:	683a      	ldr	r2, [r7, #0]
 8003bfa:	b2d2      	uxtb	r2, r2
 8003bfc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003bfe:	4b20      	ldr	r3, [pc, #128]	; (8003c80 <HAL_RCC_ClockConfig+0x1b8>)
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	f003 030f 	and.w	r3, r3, #15
 8003c06:	683a      	ldr	r2, [r7, #0]
 8003c08:	429a      	cmp	r2, r3
 8003c0a:	d001      	beq.n	8003c10 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003c0c:	2301      	movs	r3, #1
 8003c0e:	e032      	b.n	8003c76 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	f003 0304 	and.w	r3, r3, #4
 8003c18:	2b00      	cmp	r3, #0
 8003c1a:	d008      	beq.n	8003c2e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003c1c:	4b19      	ldr	r3, [pc, #100]	; (8003c84 <HAL_RCC_ClockConfig+0x1bc>)
 8003c1e:	689b      	ldr	r3, [r3, #8]
 8003c20:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	68db      	ldr	r3, [r3, #12]
 8003c28:	4916      	ldr	r1, [pc, #88]	; (8003c84 <HAL_RCC_ClockConfig+0x1bc>)
 8003c2a:	4313      	orrs	r3, r2
 8003c2c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	f003 0308 	and.w	r3, r3, #8
 8003c36:	2b00      	cmp	r3, #0
 8003c38:	d009      	beq.n	8003c4e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003c3a:	4b12      	ldr	r3, [pc, #72]	; (8003c84 <HAL_RCC_ClockConfig+0x1bc>)
 8003c3c:	689b      	ldr	r3, [r3, #8]
 8003c3e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	691b      	ldr	r3, [r3, #16]
 8003c46:	00db      	lsls	r3, r3, #3
 8003c48:	490e      	ldr	r1, [pc, #56]	; (8003c84 <HAL_RCC_ClockConfig+0x1bc>)
 8003c4a:	4313      	orrs	r3, r2
 8003c4c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003c4e:	f000 f821 	bl	8003c94 <HAL_RCC_GetSysClockFreq>
 8003c52:	4602      	mov	r2, r0
 8003c54:	4b0b      	ldr	r3, [pc, #44]	; (8003c84 <HAL_RCC_ClockConfig+0x1bc>)
 8003c56:	689b      	ldr	r3, [r3, #8]
 8003c58:	091b      	lsrs	r3, r3, #4
 8003c5a:	f003 030f 	and.w	r3, r3, #15
 8003c5e:	490a      	ldr	r1, [pc, #40]	; (8003c88 <HAL_RCC_ClockConfig+0x1c0>)
 8003c60:	5ccb      	ldrb	r3, [r1, r3]
 8003c62:	fa22 f303 	lsr.w	r3, r2, r3
 8003c66:	4a09      	ldr	r2, [pc, #36]	; (8003c8c <HAL_RCC_ClockConfig+0x1c4>)
 8003c68:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003c6a:	4b09      	ldr	r3, [pc, #36]	; (8003c90 <HAL_RCC_ClockConfig+0x1c8>)
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	4618      	mov	r0, r3
 8003c70:	f7fd fb64 	bl	800133c <HAL_InitTick>

  return HAL_OK;
 8003c74:	2300      	movs	r3, #0
}
 8003c76:	4618      	mov	r0, r3
 8003c78:	3710      	adds	r7, #16
 8003c7a:	46bd      	mov	sp, r7
 8003c7c:	bd80      	pop	{r7, pc}
 8003c7e:	bf00      	nop
 8003c80:	40023c00 	.word	0x40023c00
 8003c84:	40023800 	.word	0x40023800
 8003c88:	08005a48 	.word	0x08005a48
 8003c8c:	20000000 	.word	0x20000000
 8003c90:	20000004 	.word	0x20000004

08003c94 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003c94:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003c98:	b094      	sub	sp, #80	; 0x50
 8003c9a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003c9c:	2300      	movs	r3, #0
 8003c9e:	647b      	str	r3, [r7, #68]	; 0x44
 8003ca0:	2300      	movs	r3, #0
 8003ca2:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003ca4:	2300      	movs	r3, #0
 8003ca6:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8003ca8:	2300      	movs	r3, #0
 8003caa:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003cac:	4b79      	ldr	r3, [pc, #484]	; (8003e94 <HAL_RCC_GetSysClockFreq+0x200>)
 8003cae:	689b      	ldr	r3, [r3, #8]
 8003cb0:	f003 030c 	and.w	r3, r3, #12
 8003cb4:	2b08      	cmp	r3, #8
 8003cb6:	d00d      	beq.n	8003cd4 <HAL_RCC_GetSysClockFreq+0x40>
 8003cb8:	2b08      	cmp	r3, #8
 8003cba:	f200 80e1 	bhi.w	8003e80 <HAL_RCC_GetSysClockFreq+0x1ec>
 8003cbe:	2b00      	cmp	r3, #0
 8003cc0:	d002      	beq.n	8003cc8 <HAL_RCC_GetSysClockFreq+0x34>
 8003cc2:	2b04      	cmp	r3, #4
 8003cc4:	d003      	beq.n	8003cce <HAL_RCC_GetSysClockFreq+0x3a>
 8003cc6:	e0db      	b.n	8003e80 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003cc8:	4b73      	ldr	r3, [pc, #460]	; (8003e98 <HAL_RCC_GetSysClockFreq+0x204>)
 8003cca:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8003ccc:	e0db      	b.n	8003e86 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003cce:	4b73      	ldr	r3, [pc, #460]	; (8003e9c <HAL_RCC_GetSysClockFreq+0x208>)
 8003cd0:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003cd2:	e0d8      	b.n	8003e86 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003cd4:	4b6f      	ldr	r3, [pc, #444]	; (8003e94 <HAL_RCC_GetSysClockFreq+0x200>)
 8003cd6:	685b      	ldr	r3, [r3, #4]
 8003cd8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003cdc:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003cde:	4b6d      	ldr	r3, [pc, #436]	; (8003e94 <HAL_RCC_GetSysClockFreq+0x200>)
 8003ce0:	685b      	ldr	r3, [r3, #4]
 8003ce2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003ce6:	2b00      	cmp	r3, #0
 8003ce8:	d063      	beq.n	8003db2 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003cea:	4b6a      	ldr	r3, [pc, #424]	; (8003e94 <HAL_RCC_GetSysClockFreq+0x200>)
 8003cec:	685b      	ldr	r3, [r3, #4]
 8003cee:	099b      	lsrs	r3, r3, #6
 8003cf0:	2200      	movs	r2, #0
 8003cf2:	63bb      	str	r3, [r7, #56]	; 0x38
 8003cf4:	63fa      	str	r2, [r7, #60]	; 0x3c
 8003cf6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003cf8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003cfc:	633b      	str	r3, [r7, #48]	; 0x30
 8003cfe:	2300      	movs	r3, #0
 8003d00:	637b      	str	r3, [r7, #52]	; 0x34
 8003d02:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8003d06:	4622      	mov	r2, r4
 8003d08:	462b      	mov	r3, r5
 8003d0a:	f04f 0000 	mov.w	r0, #0
 8003d0e:	f04f 0100 	mov.w	r1, #0
 8003d12:	0159      	lsls	r1, r3, #5
 8003d14:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003d18:	0150      	lsls	r0, r2, #5
 8003d1a:	4602      	mov	r2, r0
 8003d1c:	460b      	mov	r3, r1
 8003d1e:	4621      	mov	r1, r4
 8003d20:	1a51      	subs	r1, r2, r1
 8003d22:	6139      	str	r1, [r7, #16]
 8003d24:	4629      	mov	r1, r5
 8003d26:	eb63 0301 	sbc.w	r3, r3, r1
 8003d2a:	617b      	str	r3, [r7, #20]
 8003d2c:	f04f 0200 	mov.w	r2, #0
 8003d30:	f04f 0300 	mov.w	r3, #0
 8003d34:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003d38:	4659      	mov	r1, fp
 8003d3a:	018b      	lsls	r3, r1, #6
 8003d3c:	4651      	mov	r1, sl
 8003d3e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003d42:	4651      	mov	r1, sl
 8003d44:	018a      	lsls	r2, r1, #6
 8003d46:	4651      	mov	r1, sl
 8003d48:	ebb2 0801 	subs.w	r8, r2, r1
 8003d4c:	4659      	mov	r1, fp
 8003d4e:	eb63 0901 	sbc.w	r9, r3, r1
 8003d52:	f04f 0200 	mov.w	r2, #0
 8003d56:	f04f 0300 	mov.w	r3, #0
 8003d5a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003d5e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003d62:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003d66:	4690      	mov	r8, r2
 8003d68:	4699      	mov	r9, r3
 8003d6a:	4623      	mov	r3, r4
 8003d6c:	eb18 0303 	adds.w	r3, r8, r3
 8003d70:	60bb      	str	r3, [r7, #8]
 8003d72:	462b      	mov	r3, r5
 8003d74:	eb49 0303 	adc.w	r3, r9, r3
 8003d78:	60fb      	str	r3, [r7, #12]
 8003d7a:	f04f 0200 	mov.w	r2, #0
 8003d7e:	f04f 0300 	mov.w	r3, #0
 8003d82:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8003d86:	4629      	mov	r1, r5
 8003d88:	024b      	lsls	r3, r1, #9
 8003d8a:	4621      	mov	r1, r4
 8003d8c:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003d90:	4621      	mov	r1, r4
 8003d92:	024a      	lsls	r2, r1, #9
 8003d94:	4610      	mov	r0, r2
 8003d96:	4619      	mov	r1, r3
 8003d98:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003d9a:	2200      	movs	r2, #0
 8003d9c:	62bb      	str	r3, [r7, #40]	; 0x28
 8003d9e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003da0:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003da4:	f7fc fa2a 	bl	80001fc <__aeabi_uldivmod>
 8003da8:	4602      	mov	r2, r0
 8003daa:	460b      	mov	r3, r1
 8003dac:	4613      	mov	r3, r2
 8003dae:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003db0:	e058      	b.n	8003e64 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003db2:	4b38      	ldr	r3, [pc, #224]	; (8003e94 <HAL_RCC_GetSysClockFreq+0x200>)
 8003db4:	685b      	ldr	r3, [r3, #4]
 8003db6:	099b      	lsrs	r3, r3, #6
 8003db8:	2200      	movs	r2, #0
 8003dba:	4618      	mov	r0, r3
 8003dbc:	4611      	mov	r1, r2
 8003dbe:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8003dc2:	623b      	str	r3, [r7, #32]
 8003dc4:	2300      	movs	r3, #0
 8003dc6:	627b      	str	r3, [r7, #36]	; 0x24
 8003dc8:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8003dcc:	4642      	mov	r2, r8
 8003dce:	464b      	mov	r3, r9
 8003dd0:	f04f 0000 	mov.w	r0, #0
 8003dd4:	f04f 0100 	mov.w	r1, #0
 8003dd8:	0159      	lsls	r1, r3, #5
 8003dda:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003dde:	0150      	lsls	r0, r2, #5
 8003de0:	4602      	mov	r2, r0
 8003de2:	460b      	mov	r3, r1
 8003de4:	4641      	mov	r1, r8
 8003de6:	ebb2 0a01 	subs.w	sl, r2, r1
 8003dea:	4649      	mov	r1, r9
 8003dec:	eb63 0b01 	sbc.w	fp, r3, r1
 8003df0:	f04f 0200 	mov.w	r2, #0
 8003df4:	f04f 0300 	mov.w	r3, #0
 8003df8:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8003dfc:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8003e00:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8003e04:	ebb2 040a 	subs.w	r4, r2, sl
 8003e08:	eb63 050b 	sbc.w	r5, r3, fp
 8003e0c:	f04f 0200 	mov.w	r2, #0
 8003e10:	f04f 0300 	mov.w	r3, #0
 8003e14:	00eb      	lsls	r3, r5, #3
 8003e16:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003e1a:	00e2      	lsls	r2, r4, #3
 8003e1c:	4614      	mov	r4, r2
 8003e1e:	461d      	mov	r5, r3
 8003e20:	4643      	mov	r3, r8
 8003e22:	18e3      	adds	r3, r4, r3
 8003e24:	603b      	str	r3, [r7, #0]
 8003e26:	464b      	mov	r3, r9
 8003e28:	eb45 0303 	adc.w	r3, r5, r3
 8003e2c:	607b      	str	r3, [r7, #4]
 8003e2e:	f04f 0200 	mov.w	r2, #0
 8003e32:	f04f 0300 	mov.w	r3, #0
 8003e36:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003e3a:	4629      	mov	r1, r5
 8003e3c:	028b      	lsls	r3, r1, #10
 8003e3e:	4621      	mov	r1, r4
 8003e40:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003e44:	4621      	mov	r1, r4
 8003e46:	028a      	lsls	r2, r1, #10
 8003e48:	4610      	mov	r0, r2
 8003e4a:	4619      	mov	r1, r3
 8003e4c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003e4e:	2200      	movs	r2, #0
 8003e50:	61bb      	str	r3, [r7, #24]
 8003e52:	61fa      	str	r2, [r7, #28]
 8003e54:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003e58:	f7fc f9d0 	bl	80001fc <__aeabi_uldivmod>
 8003e5c:	4602      	mov	r2, r0
 8003e5e:	460b      	mov	r3, r1
 8003e60:	4613      	mov	r3, r2
 8003e62:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003e64:	4b0b      	ldr	r3, [pc, #44]	; (8003e94 <HAL_RCC_GetSysClockFreq+0x200>)
 8003e66:	685b      	ldr	r3, [r3, #4]
 8003e68:	0c1b      	lsrs	r3, r3, #16
 8003e6a:	f003 0303 	and.w	r3, r3, #3
 8003e6e:	3301      	adds	r3, #1
 8003e70:	005b      	lsls	r3, r3, #1
 8003e72:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8003e74:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003e76:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003e78:	fbb2 f3f3 	udiv	r3, r2, r3
 8003e7c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003e7e:	e002      	b.n	8003e86 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003e80:	4b05      	ldr	r3, [pc, #20]	; (8003e98 <HAL_RCC_GetSysClockFreq+0x204>)
 8003e82:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003e84:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003e86:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8003e88:	4618      	mov	r0, r3
 8003e8a:	3750      	adds	r7, #80	; 0x50
 8003e8c:	46bd      	mov	sp, r7
 8003e8e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003e92:	bf00      	nop
 8003e94:	40023800 	.word	0x40023800
 8003e98:	00f42400 	.word	0x00f42400
 8003e9c:	007a1200 	.word	0x007a1200

08003ea0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003ea0:	b480      	push	{r7}
 8003ea2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003ea4:	4b03      	ldr	r3, [pc, #12]	; (8003eb4 <HAL_RCC_GetHCLKFreq+0x14>)
 8003ea6:	681b      	ldr	r3, [r3, #0]
}
 8003ea8:	4618      	mov	r0, r3
 8003eaa:	46bd      	mov	sp, r7
 8003eac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eb0:	4770      	bx	lr
 8003eb2:	bf00      	nop
 8003eb4:	20000000 	.word	0x20000000

08003eb8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003eb8:	b580      	push	{r7, lr}
 8003eba:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003ebc:	f7ff fff0 	bl	8003ea0 <HAL_RCC_GetHCLKFreq>
 8003ec0:	4602      	mov	r2, r0
 8003ec2:	4b05      	ldr	r3, [pc, #20]	; (8003ed8 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003ec4:	689b      	ldr	r3, [r3, #8]
 8003ec6:	0a9b      	lsrs	r3, r3, #10
 8003ec8:	f003 0307 	and.w	r3, r3, #7
 8003ecc:	4903      	ldr	r1, [pc, #12]	; (8003edc <HAL_RCC_GetPCLK1Freq+0x24>)
 8003ece:	5ccb      	ldrb	r3, [r1, r3]
 8003ed0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003ed4:	4618      	mov	r0, r3
 8003ed6:	bd80      	pop	{r7, pc}
 8003ed8:	40023800 	.word	0x40023800
 8003edc:	08005a58 	.word	0x08005a58

08003ee0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003ee0:	b580      	push	{r7, lr}
 8003ee2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003ee4:	f7ff ffdc 	bl	8003ea0 <HAL_RCC_GetHCLKFreq>
 8003ee8:	4602      	mov	r2, r0
 8003eea:	4b05      	ldr	r3, [pc, #20]	; (8003f00 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003eec:	689b      	ldr	r3, [r3, #8]
 8003eee:	0b5b      	lsrs	r3, r3, #13
 8003ef0:	f003 0307 	and.w	r3, r3, #7
 8003ef4:	4903      	ldr	r1, [pc, #12]	; (8003f04 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003ef6:	5ccb      	ldrb	r3, [r1, r3]
 8003ef8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003efc:	4618      	mov	r0, r3
 8003efe:	bd80      	pop	{r7, pc}
 8003f00:	40023800 	.word	0x40023800
 8003f04:	08005a58 	.word	0x08005a58

08003f08 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003f08:	b580      	push	{r7, lr}
 8003f0a:	b082      	sub	sp, #8
 8003f0c:	af00      	add	r7, sp, #0
 8003f0e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	2b00      	cmp	r3, #0
 8003f14:	d101      	bne.n	8003f1a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003f16:	2301      	movs	r3, #1
 8003f18:	e03f      	b.n	8003f9a <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003f20:	b2db      	uxtb	r3, r3
 8003f22:	2b00      	cmp	r3, #0
 8003f24:	d106      	bne.n	8003f34 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	2200      	movs	r2, #0
 8003f2a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003f2e:	6878      	ldr	r0, [r7, #4]
 8003f30:	f7fd f892 	bl	8001058 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	2224      	movs	r2, #36	; 0x24
 8003f38:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	68da      	ldr	r2, [r3, #12]
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	681b      	ldr	r3, [r3, #0]
 8003f46:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003f4a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003f4c:	6878      	ldr	r0, [r7, #4]
 8003f4e:	f000 fded 	bl	8004b2c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	691a      	ldr	r2, [r3, #16]
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003f60:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	695a      	ldr	r2, [r3, #20]
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003f70:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	68da      	ldr	r2, [r3, #12]
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003f80:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	2200      	movs	r2, #0
 8003f86:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	2220      	movs	r2, #32
 8003f8c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	2220      	movs	r2, #32
 8003f94:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003f98:	2300      	movs	r3, #0
}
 8003f9a:	4618      	mov	r0, r3
 8003f9c:	3708      	adds	r7, #8
 8003f9e:	46bd      	mov	sp, r7
 8003fa0:	bd80      	pop	{r7, pc}

08003fa2 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003fa2:	b580      	push	{r7, lr}
 8003fa4:	b08a      	sub	sp, #40	; 0x28
 8003fa6:	af02      	add	r7, sp, #8
 8003fa8:	60f8      	str	r0, [r7, #12]
 8003faa:	60b9      	str	r1, [r7, #8]
 8003fac:	603b      	str	r3, [r7, #0]
 8003fae:	4613      	mov	r3, r2
 8003fb0:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003fb2:	2300      	movs	r3, #0
 8003fb4:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003fb6:	68fb      	ldr	r3, [r7, #12]
 8003fb8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003fbc:	b2db      	uxtb	r3, r3
 8003fbe:	2b20      	cmp	r3, #32
 8003fc0:	d17c      	bne.n	80040bc <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8003fc2:	68bb      	ldr	r3, [r7, #8]
 8003fc4:	2b00      	cmp	r3, #0
 8003fc6:	d002      	beq.n	8003fce <HAL_UART_Transmit+0x2c>
 8003fc8:	88fb      	ldrh	r3, [r7, #6]
 8003fca:	2b00      	cmp	r3, #0
 8003fcc:	d101      	bne.n	8003fd2 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8003fce:	2301      	movs	r3, #1
 8003fd0:	e075      	b.n	80040be <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003fd2:	68fb      	ldr	r3, [r7, #12]
 8003fd4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003fd8:	2b01      	cmp	r3, #1
 8003fda:	d101      	bne.n	8003fe0 <HAL_UART_Transmit+0x3e>
 8003fdc:	2302      	movs	r3, #2
 8003fde:	e06e      	b.n	80040be <HAL_UART_Transmit+0x11c>
 8003fe0:	68fb      	ldr	r3, [r7, #12]
 8003fe2:	2201      	movs	r2, #1
 8003fe4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003fe8:	68fb      	ldr	r3, [r7, #12]
 8003fea:	2200      	movs	r2, #0
 8003fec:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003fee:	68fb      	ldr	r3, [r7, #12]
 8003ff0:	2221      	movs	r2, #33	; 0x21
 8003ff2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003ff6:	f7fd f9e5 	bl	80013c4 <HAL_GetTick>
 8003ffa:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003ffc:	68fb      	ldr	r3, [r7, #12]
 8003ffe:	88fa      	ldrh	r2, [r7, #6]
 8004000:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8004002:	68fb      	ldr	r3, [r7, #12]
 8004004:	88fa      	ldrh	r2, [r7, #6]
 8004006:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004008:	68fb      	ldr	r3, [r7, #12]
 800400a:	689b      	ldr	r3, [r3, #8]
 800400c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004010:	d108      	bne.n	8004024 <HAL_UART_Transmit+0x82>
 8004012:	68fb      	ldr	r3, [r7, #12]
 8004014:	691b      	ldr	r3, [r3, #16]
 8004016:	2b00      	cmp	r3, #0
 8004018:	d104      	bne.n	8004024 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 800401a:	2300      	movs	r3, #0
 800401c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800401e:	68bb      	ldr	r3, [r7, #8]
 8004020:	61bb      	str	r3, [r7, #24]
 8004022:	e003      	b.n	800402c <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8004024:	68bb      	ldr	r3, [r7, #8]
 8004026:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004028:	2300      	movs	r3, #0
 800402a:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800402c:	68fb      	ldr	r3, [r7, #12]
 800402e:	2200      	movs	r2, #0
 8004030:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8004034:	e02a      	b.n	800408c <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004036:	683b      	ldr	r3, [r7, #0]
 8004038:	9300      	str	r3, [sp, #0]
 800403a:	697b      	ldr	r3, [r7, #20]
 800403c:	2200      	movs	r2, #0
 800403e:	2180      	movs	r1, #128	; 0x80
 8004040:	68f8      	ldr	r0, [r7, #12]
 8004042:	f000 fb1f 	bl	8004684 <UART_WaitOnFlagUntilTimeout>
 8004046:	4603      	mov	r3, r0
 8004048:	2b00      	cmp	r3, #0
 800404a:	d001      	beq.n	8004050 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 800404c:	2303      	movs	r3, #3
 800404e:	e036      	b.n	80040be <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8004050:	69fb      	ldr	r3, [r7, #28]
 8004052:	2b00      	cmp	r3, #0
 8004054:	d10b      	bne.n	800406e <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004056:	69bb      	ldr	r3, [r7, #24]
 8004058:	881b      	ldrh	r3, [r3, #0]
 800405a:	461a      	mov	r2, r3
 800405c:	68fb      	ldr	r3, [r7, #12]
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004064:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8004066:	69bb      	ldr	r3, [r7, #24]
 8004068:	3302      	adds	r3, #2
 800406a:	61bb      	str	r3, [r7, #24]
 800406c:	e007      	b.n	800407e <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800406e:	69fb      	ldr	r3, [r7, #28]
 8004070:	781a      	ldrb	r2, [r3, #0]
 8004072:	68fb      	ldr	r3, [r7, #12]
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8004078:	69fb      	ldr	r3, [r7, #28]
 800407a:	3301      	adds	r3, #1
 800407c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800407e:	68fb      	ldr	r3, [r7, #12]
 8004080:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004082:	b29b      	uxth	r3, r3
 8004084:	3b01      	subs	r3, #1
 8004086:	b29a      	uxth	r2, r3
 8004088:	68fb      	ldr	r3, [r7, #12]
 800408a:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 800408c:	68fb      	ldr	r3, [r7, #12]
 800408e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004090:	b29b      	uxth	r3, r3
 8004092:	2b00      	cmp	r3, #0
 8004094:	d1cf      	bne.n	8004036 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004096:	683b      	ldr	r3, [r7, #0]
 8004098:	9300      	str	r3, [sp, #0]
 800409a:	697b      	ldr	r3, [r7, #20]
 800409c:	2200      	movs	r2, #0
 800409e:	2140      	movs	r1, #64	; 0x40
 80040a0:	68f8      	ldr	r0, [r7, #12]
 80040a2:	f000 faef 	bl	8004684 <UART_WaitOnFlagUntilTimeout>
 80040a6:	4603      	mov	r3, r0
 80040a8:	2b00      	cmp	r3, #0
 80040aa:	d001      	beq.n	80040b0 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 80040ac:	2303      	movs	r3, #3
 80040ae:	e006      	b.n	80040be <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80040b0:	68fb      	ldr	r3, [r7, #12]
 80040b2:	2220      	movs	r2, #32
 80040b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80040b8:	2300      	movs	r3, #0
 80040ba:	e000      	b.n	80040be <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 80040bc:	2302      	movs	r3, #2
  }
}
 80040be:	4618      	mov	r0, r3
 80040c0:	3720      	adds	r7, #32
 80040c2:	46bd      	mov	sp, r7
 80040c4:	bd80      	pop	{r7, pc}

080040c6 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80040c6:	b580      	push	{r7, lr}
 80040c8:	b084      	sub	sp, #16
 80040ca:	af00      	add	r7, sp, #0
 80040cc:	60f8      	str	r0, [r7, #12]
 80040ce:	60b9      	str	r1, [r7, #8]
 80040d0:	4613      	mov	r3, r2
 80040d2:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80040d4:	68fb      	ldr	r3, [r7, #12]
 80040d6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80040da:	b2db      	uxtb	r3, r3
 80040dc:	2b20      	cmp	r3, #32
 80040de:	d11d      	bne.n	800411c <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 80040e0:	68bb      	ldr	r3, [r7, #8]
 80040e2:	2b00      	cmp	r3, #0
 80040e4:	d002      	beq.n	80040ec <HAL_UART_Receive_IT+0x26>
 80040e6:	88fb      	ldrh	r3, [r7, #6]
 80040e8:	2b00      	cmp	r3, #0
 80040ea:	d101      	bne.n	80040f0 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 80040ec:	2301      	movs	r3, #1
 80040ee:	e016      	b.n	800411e <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80040f0:	68fb      	ldr	r3, [r7, #12]
 80040f2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80040f6:	2b01      	cmp	r3, #1
 80040f8:	d101      	bne.n	80040fe <HAL_UART_Receive_IT+0x38>
 80040fa:	2302      	movs	r3, #2
 80040fc:	e00f      	b.n	800411e <HAL_UART_Receive_IT+0x58>
 80040fe:	68fb      	ldr	r3, [r7, #12]
 8004100:	2201      	movs	r2, #1
 8004102:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004106:	68fb      	ldr	r3, [r7, #12]
 8004108:	2200      	movs	r2, #0
 800410a:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 800410c:	88fb      	ldrh	r3, [r7, #6]
 800410e:	461a      	mov	r2, r3
 8004110:	68b9      	ldr	r1, [r7, #8]
 8004112:	68f8      	ldr	r0, [r7, #12]
 8004114:	f000 fb24 	bl	8004760 <UART_Start_Receive_IT>
 8004118:	4603      	mov	r3, r0
 800411a:	e000      	b.n	800411e <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 800411c:	2302      	movs	r3, #2
  }
}
 800411e:	4618      	mov	r0, r3
 8004120:	3710      	adds	r7, #16
 8004122:	46bd      	mov	sp, r7
 8004124:	bd80      	pop	{r7, pc}
	...

08004128 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004128:	b580      	push	{r7, lr}
 800412a:	b0ba      	sub	sp, #232	; 0xe8
 800412c:	af00      	add	r7, sp, #0
 800412e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	68db      	ldr	r3, [r3, #12]
 8004140:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	695b      	ldr	r3, [r3, #20]
 800414a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 800414e:	2300      	movs	r3, #0
 8004150:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8004154:	2300      	movs	r3, #0
 8004156:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800415a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800415e:	f003 030f 	and.w	r3, r3, #15
 8004162:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8004166:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800416a:	2b00      	cmp	r3, #0
 800416c:	d10f      	bne.n	800418e <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800416e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004172:	f003 0320 	and.w	r3, r3, #32
 8004176:	2b00      	cmp	r3, #0
 8004178:	d009      	beq.n	800418e <HAL_UART_IRQHandler+0x66>
 800417a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800417e:	f003 0320 	and.w	r3, r3, #32
 8004182:	2b00      	cmp	r3, #0
 8004184:	d003      	beq.n	800418e <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8004186:	6878      	ldr	r0, [r7, #4]
 8004188:	f000 fc07 	bl	800499a <UART_Receive_IT>
      return;
 800418c:	e256      	b.n	800463c <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800418e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004192:	2b00      	cmp	r3, #0
 8004194:	f000 80de 	beq.w	8004354 <HAL_UART_IRQHandler+0x22c>
 8004198:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800419c:	f003 0301 	and.w	r3, r3, #1
 80041a0:	2b00      	cmp	r3, #0
 80041a2:	d106      	bne.n	80041b2 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80041a4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80041a8:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80041ac:	2b00      	cmp	r3, #0
 80041ae:	f000 80d1 	beq.w	8004354 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80041b2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80041b6:	f003 0301 	and.w	r3, r3, #1
 80041ba:	2b00      	cmp	r3, #0
 80041bc:	d00b      	beq.n	80041d6 <HAL_UART_IRQHandler+0xae>
 80041be:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80041c2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80041c6:	2b00      	cmp	r3, #0
 80041c8:	d005      	beq.n	80041d6 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041ce:	f043 0201 	orr.w	r2, r3, #1
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80041d6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80041da:	f003 0304 	and.w	r3, r3, #4
 80041de:	2b00      	cmp	r3, #0
 80041e0:	d00b      	beq.n	80041fa <HAL_UART_IRQHandler+0xd2>
 80041e2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80041e6:	f003 0301 	and.w	r3, r3, #1
 80041ea:	2b00      	cmp	r3, #0
 80041ec:	d005      	beq.n	80041fa <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041f2:	f043 0202 	orr.w	r2, r3, #2
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80041fa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80041fe:	f003 0302 	and.w	r3, r3, #2
 8004202:	2b00      	cmp	r3, #0
 8004204:	d00b      	beq.n	800421e <HAL_UART_IRQHandler+0xf6>
 8004206:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800420a:	f003 0301 	and.w	r3, r3, #1
 800420e:	2b00      	cmp	r3, #0
 8004210:	d005      	beq.n	800421e <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004216:	f043 0204 	orr.w	r2, r3, #4
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800421e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004222:	f003 0308 	and.w	r3, r3, #8
 8004226:	2b00      	cmp	r3, #0
 8004228:	d011      	beq.n	800424e <HAL_UART_IRQHandler+0x126>
 800422a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800422e:	f003 0320 	and.w	r3, r3, #32
 8004232:	2b00      	cmp	r3, #0
 8004234:	d105      	bne.n	8004242 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8004236:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800423a:	f003 0301 	and.w	r3, r3, #1
 800423e:	2b00      	cmp	r3, #0
 8004240:	d005      	beq.n	800424e <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004246:	f043 0208 	orr.w	r2, r3, #8
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004252:	2b00      	cmp	r3, #0
 8004254:	f000 81ed 	beq.w	8004632 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004258:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800425c:	f003 0320 	and.w	r3, r3, #32
 8004260:	2b00      	cmp	r3, #0
 8004262:	d008      	beq.n	8004276 <HAL_UART_IRQHandler+0x14e>
 8004264:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004268:	f003 0320 	and.w	r3, r3, #32
 800426c:	2b00      	cmp	r3, #0
 800426e:	d002      	beq.n	8004276 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8004270:	6878      	ldr	r0, [r7, #4]
 8004272:	f000 fb92 	bl	800499a <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	695b      	ldr	r3, [r3, #20]
 800427c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004280:	2b40      	cmp	r3, #64	; 0x40
 8004282:	bf0c      	ite	eq
 8004284:	2301      	moveq	r3, #1
 8004286:	2300      	movne	r3, #0
 8004288:	b2db      	uxtb	r3, r3
 800428a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004292:	f003 0308 	and.w	r3, r3, #8
 8004296:	2b00      	cmp	r3, #0
 8004298:	d103      	bne.n	80042a2 <HAL_UART_IRQHandler+0x17a>
 800429a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800429e:	2b00      	cmp	r3, #0
 80042a0:	d04f      	beq.n	8004342 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80042a2:	6878      	ldr	r0, [r7, #4]
 80042a4:	f000 fa9a 	bl	80047dc <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	695b      	ldr	r3, [r3, #20]
 80042ae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80042b2:	2b40      	cmp	r3, #64	; 0x40
 80042b4:	d141      	bne.n	800433a <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	681b      	ldr	r3, [r3, #0]
 80042ba:	3314      	adds	r3, #20
 80042bc:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80042c0:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80042c4:	e853 3f00 	ldrex	r3, [r3]
 80042c8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80042cc:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80042d0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80042d4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	3314      	adds	r3, #20
 80042de:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80042e2:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80042e6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80042ea:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80042ee:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80042f2:	e841 2300 	strex	r3, r2, [r1]
 80042f6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80042fa:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80042fe:	2b00      	cmp	r3, #0
 8004300:	d1d9      	bne.n	80042b6 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004306:	2b00      	cmp	r3, #0
 8004308:	d013      	beq.n	8004332 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800430e:	4a7d      	ldr	r2, [pc, #500]	; (8004504 <HAL_UART_IRQHandler+0x3dc>)
 8004310:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004316:	4618      	mov	r0, r3
 8004318:	f7fd fa05 	bl	8001726 <HAL_DMA_Abort_IT>
 800431c:	4603      	mov	r3, r0
 800431e:	2b00      	cmp	r3, #0
 8004320:	d016      	beq.n	8004350 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004326:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004328:	687a      	ldr	r2, [r7, #4]
 800432a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800432c:	4610      	mov	r0, r2
 800432e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004330:	e00e      	b.n	8004350 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8004332:	6878      	ldr	r0, [r7, #4]
 8004334:	f000 f990 	bl	8004658 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004338:	e00a      	b.n	8004350 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800433a:	6878      	ldr	r0, [r7, #4]
 800433c:	f000 f98c 	bl	8004658 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004340:	e006      	b.n	8004350 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8004342:	6878      	ldr	r0, [r7, #4]
 8004344:	f000 f988 	bl	8004658 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	2200      	movs	r2, #0
 800434c:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 800434e:	e170      	b.n	8004632 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004350:	bf00      	nop
    return;
 8004352:	e16e      	b.n	8004632 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004358:	2b01      	cmp	r3, #1
 800435a:	f040 814a 	bne.w	80045f2 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800435e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004362:	f003 0310 	and.w	r3, r3, #16
 8004366:	2b00      	cmp	r3, #0
 8004368:	f000 8143 	beq.w	80045f2 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 800436c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004370:	f003 0310 	and.w	r3, r3, #16
 8004374:	2b00      	cmp	r3, #0
 8004376:	f000 813c 	beq.w	80045f2 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800437a:	2300      	movs	r3, #0
 800437c:	60bb      	str	r3, [r7, #8]
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	60bb      	str	r3, [r7, #8]
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	681b      	ldr	r3, [r3, #0]
 800438a:	685b      	ldr	r3, [r3, #4]
 800438c:	60bb      	str	r3, [r7, #8]
 800438e:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	681b      	ldr	r3, [r3, #0]
 8004394:	695b      	ldr	r3, [r3, #20]
 8004396:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800439a:	2b40      	cmp	r3, #64	; 0x40
 800439c:	f040 80b4 	bne.w	8004508 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80043a4:	681b      	ldr	r3, [r3, #0]
 80043a6:	685b      	ldr	r3, [r3, #4]
 80043a8:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80043ac:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80043b0:	2b00      	cmp	r3, #0
 80043b2:	f000 8140 	beq.w	8004636 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80043ba:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80043be:	429a      	cmp	r2, r3
 80043c0:	f080 8139 	bcs.w	8004636 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80043ca:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80043d0:	69db      	ldr	r3, [r3, #28]
 80043d2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80043d6:	f000 8088 	beq.w	80044ea <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	330c      	adds	r3, #12
 80043e0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80043e4:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80043e8:	e853 3f00 	ldrex	r3, [r3]
 80043ec:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80043f0:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80043f4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80043f8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	681b      	ldr	r3, [r3, #0]
 8004400:	330c      	adds	r3, #12
 8004402:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8004406:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800440a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800440e:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8004412:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8004416:	e841 2300 	strex	r3, r2, [r1]
 800441a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800441e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004422:	2b00      	cmp	r3, #0
 8004424:	d1d9      	bne.n	80043da <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	681b      	ldr	r3, [r3, #0]
 800442a:	3314      	adds	r3, #20
 800442c:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800442e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004430:	e853 3f00 	ldrex	r3, [r3]
 8004434:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8004436:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004438:	f023 0301 	bic.w	r3, r3, #1
 800443c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	3314      	adds	r3, #20
 8004446:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800444a:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800444e:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004450:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8004452:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8004456:	e841 2300 	strex	r3, r2, [r1]
 800445a:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800445c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800445e:	2b00      	cmp	r3, #0
 8004460:	d1e1      	bne.n	8004426 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	681b      	ldr	r3, [r3, #0]
 8004466:	3314      	adds	r3, #20
 8004468:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800446a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800446c:	e853 3f00 	ldrex	r3, [r3]
 8004470:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8004472:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004474:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004478:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	3314      	adds	r3, #20
 8004482:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8004486:	66fa      	str	r2, [r7, #108]	; 0x6c
 8004488:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800448a:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800448c:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800448e:	e841 2300 	strex	r3, r2, [r1]
 8004492:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8004494:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004496:	2b00      	cmp	r3, #0
 8004498:	d1e3      	bne.n	8004462 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	2220      	movs	r2, #32
 800449e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	2200      	movs	r2, #0
 80044a6:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	330c      	adds	r3, #12
 80044ae:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80044b0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80044b2:	e853 3f00 	ldrex	r3, [r3]
 80044b6:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80044b8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80044ba:	f023 0310 	bic.w	r3, r3, #16
 80044be:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	681b      	ldr	r3, [r3, #0]
 80044c6:	330c      	adds	r3, #12
 80044c8:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 80044cc:	65ba      	str	r2, [r7, #88]	; 0x58
 80044ce:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80044d0:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80044d2:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80044d4:	e841 2300 	strex	r3, r2, [r1]
 80044d8:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80044da:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80044dc:	2b00      	cmp	r3, #0
 80044de:	d1e3      	bne.n	80044a8 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80044e4:	4618      	mov	r0, r3
 80044e6:	f7fd f8ae 	bl	8001646 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80044f2:	b29b      	uxth	r3, r3
 80044f4:	1ad3      	subs	r3, r2, r3
 80044f6:	b29b      	uxth	r3, r3
 80044f8:	4619      	mov	r1, r3
 80044fa:	6878      	ldr	r0, [r7, #4]
 80044fc:	f000 f8b6 	bl	800466c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8004500:	e099      	b.n	8004636 <HAL_UART_IRQHandler+0x50e>
 8004502:	bf00      	nop
 8004504:	080048a3 	.word	0x080048a3
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004510:	b29b      	uxth	r3, r3
 8004512:	1ad3      	subs	r3, r2, r3
 8004514:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800451c:	b29b      	uxth	r3, r3
 800451e:	2b00      	cmp	r3, #0
 8004520:	f000 808b 	beq.w	800463a <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8004524:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8004528:	2b00      	cmp	r3, #0
 800452a:	f000 8086 	beq.w	800463a <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	681b      	ldr	r3, [r3, #0]
 8004532:	330c      	adds	r3, #12
 8004534:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004536:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004538:	e853 3f00 	ldrex	r3, [r3]
 800453c:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800453e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004540:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004544:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	330c      	adds	r3, #12
 800454e:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8004552:	647a      	str	r2, [r7, #68]	; 0x44
 8004554:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004556:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8004558:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800455a:	e841 2300 	strex	r3, r2, [r1]
 800455e:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8004560:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004562:	2b00      	cmp	r3, #0
 8004564:	d1e3      	bne.n	800452e <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	681b      	ldr	r3, [r3, #0]
 800456a:	3314      	adds	r3, #20
 800456c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800456e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004570:	e853 3f00 	ldrex	r3, [r3]
 8004574:	623b      	str	r3, [r7, #32]
   return(result);
 8004576:	6a3b      	ldr	r3, [r7, #32]
 8004578:	f023 0301 	bic.w	r3, r3, #1
 800457c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	3314      	adds	r3, #20
 8004586:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800458a:	633a      	str	r2, [r7, #48]	; 0x30
 800458c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800458e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004590:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004592:	e841 2300 	strex	r3, r2, [r1]
 8004596:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8004598:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800459a:	2b00      	cmp	r3, #0
 800459c:	d1e3      	bne.n	8004566 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	2220      	movs	r2, #32
 80045a2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	2200      	movs	r2, #0
 80045aa:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	330c      	adds	r3, #12
 80045b2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80045b4:	693b      	ldr	r3, [r7, #16]
 80045b6:	e853 3f00 	ldrex	r3, [r3]
 80045ba:	60fb      	str	r3, [r7, #12]
   return(result);
 80045bc:	68fb      	ldr	r3, [r7, #12]
 80045be:	f023 0310 	bic.w	r3, r3, #16
 80045c2:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	681b      	ldr	r3, [r3, #0]
 80045ca:	330c      	adds	r3, #12
 80045cc:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 80045d0:	61fa      	str	r2, [r7, #28]
 80045d2:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80045d4:	69b9      	ldr	r1, [r7, #24]
 80045d6:	69fa      	ldr	r2, [r7, #28]
 80045d8:	e841 2300 	strex	r3, r2, [r1]
 80045dc:	617b      	str	r3, [r7, #20]
   return(result);
 80045de:	697b      	ldr	r3, [r7, #20]
 80045e0:	2b00      	cmp	r3, #0
 80045e2:	d1e3      	bne.n	80045ac <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80045e4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80045e8:	4619      	mov	r1, r3
 80045ea:	6878      	ldr	r0, [r7, #4]
 80045ec:	f000 f83e 	bl	800466c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80045f0:	e023      	b.n	800463a <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80045f2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80045f6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80045fa:	2b00      	cmp	r3, #0
 80045fc:	d009      	beq.n	8004612 <HAL_UART_IRQHandler+0x4ea>
 80045fe:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004602:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004606:	2b00      	cmp	r3, #0
 8004608:	d003      	beq.n	8004612 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 800460a:	6878      	ldr	r0, [r7, #4]
 800460c:	f000 f95d 	bl	80048ca <UART_Transmit_IT>
    return;
 8004610:	e014      	b.n	800463c <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8004612:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004616:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800461a:	2b00      	cmp	r3, #0
 800461c:	d00e      	beq.n	800463c <HAL_UART_IRQHandler+0x514>
 800461e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004622:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004626:	2b00      	cmp	r3, #0
 8004628:	d008      	beq.n	800463c <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 800462a:	6878      	ldr	r0, [r7, #4]
 800462c:	f000 f99d 	bl	800496a <UART_EndTransmit_IT>
    return;
 8004630:	e004      	b.n	800463c <HAL_UART_IRQHandler+0x514>
    return;
 8004632:	bf00      	nop
 8004634:	e002      	b.n	800463c <HAL_UART_IRQHandler+0x514>
      return;
 8004636:	bf00      	nop
 8004638:	e000      	b.n	800463c <HAL_UART_IRQHandler+0x514>
      return;
 800463a:	bf00      	nop
  }
}
 800463c:	37e8      	adds	r7, #232	; 0xe8
 800463e:	46bd      	mov	sp, r7
 8004640:	bd80      	pop	{r7, pc}
 8004642:	bf00      	nop

08004644 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004644:	b480      	push	{r7}
 8004646:	b083      	sub	sp, #12
 8004648:	af00      	add	r7, sp, #0
 800464a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 800464c:	bf00      	nop
 800464e:	370c      	adds	r7, #12
 8004650:	46bd      	mov	sp, r7
 8004652:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004656:	4770      	bx	lr

08004658 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004658:	b480      	push	{r7}
 800465a:	b083      	sub	sp, #12
 800465c:	af00      	add	r7, sp, #0
 800465e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8004660:	bf00      	nop
 8004662:	370c      	adds	r7, #12
 8004664:	46bd      	mov	sp, r7
 8004666:	f85d 7b04 	ldr.w	r7, [sp], #4
 800466a:	4770      	bx	lr

0800466c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800466c:	b480      	push	{r7}
 800466e:	b083      	sub	sp, #12
 8004670:	af00      	add	r7, sp, #0
 8004672:	6078      	str	r0, [r7, #4]
 8004674:	460b      	mov	r3, r1
 8004676:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8004678:	bf00      	nop
 800467a:	370c      	adds	r7, #12
 800467c:	46bd      	mov	sp, r7
 800467e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004682:	4770      	bx	lr

08004684 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8004684:	b580      	push	{r7, lr}
 8004686:	b090      	sub	sp, #64	; 0x40
 8004688:	af00      	add	r7, sp, #0
 800468a:	60f8      	str	r0, [r7, #12]
 800468c:	60b9      	str	r1, [r7, #8]
 800468e:	603b      	str	r3, [r7, #0]
 8004690:	4613      	mov	r3, r2
 8004692:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004694:	e050      	b.n	8004738 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004696:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004698:	f1b3 3fff 	cmp.w	r3, #4294967295
 800469c:	d04c      	beq.n	8004738 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800469e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80046a0:	2b00      	cmp	r3, #0
 80046a2:	d007      	beq.n	80046b4 <UART_WaitOnFlagUntilTimeout+0x30>
 80046a4:	f7fc fe8e 	bl	80013c4 <HAL_GetTick>
 80046a8:	4602      	mov	r2, r0
 80046aa:	683b      	ldr	r3, [r7, #0]
 80046ac:	1ad3      	subs	r3, r2, r3
 80046ae:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80046b0:	429a      	cmp	r2, r3
 80046b2:	d241      	bcs.n	8004738 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80046b4:	68fb      	ldr	r3, [r7, #12]
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	330c      	adds	r3, #12
 80046ba:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80046bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80046be:	e853 3f00 	ldrex	r3, [r3]
 80046c2:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80046c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046c6:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80046ca:	63fb      	str	r3, [r7, #60]	; 0x3c
 80046cc:	68fb      	ldr	r3, [r7, #12]
 80046ce:	681b      	ldr	r3, [r3, #0]
 80046d0:	330c      	adds	r3, #12
 80046d2:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80046d4:	637a      	str	r2, [r7, #52]	; 0x34
 80046d6:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80046d8:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80046da:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80046dc:	e841 2300 	strex	r3, r2, [r1]
 80046e0:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80046e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80046e4:	2b00      	cmp	r3, #0
 80046e6:	d1e5      	bne.n	80046b4 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80046e8:	68fb      	ldr	r3, [r7, #12]
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	3314      	adds	r3, #20
 80046ee:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80046f0:	697b      	ldr	r3, [r7, #20]
 80046f2:	e853 3f00 	ldrex	r3, [r3]
 80046f6:	613b      	str	r3, [r7, #16]
   return(result);
 80046f8:	693b      	ldr	r3, [r7, #16]
 80046fa:	f023 0301 	bic.w	r3, r3, #1
 80046fe:	63bb      	str	r3, [r7, #56]	; 0x38
 8004700:	68fb      	ldr	r3, [r7, #12]
 8004702:	681b      	ldr	r3, [r3, #0]
 8004704:	3314      	adds	r3, #20
 8004706:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004708:	623a      	str	r2, [r7, #32]
 800470a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800470c:	69f9      	ldr	r1, [r7, #28]
 800470e:	6a3a      	ldr	r2, [r7, #32]
 8004710:	e841 2300 	strex	r3, r2, [r1]
 8004714:	61bb      	str	r3, [r7, #24]
   return(result);
 8004716:	69bb      	ldr	r3, [r7, #24]
 8004718:	2b00      	cmp	r3, #0
 800471a:	d1e5      	bne.n	80046e8 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 800471c:	68fb      	ldr	r3, [r7, #12]
 800471e:	2220      	movs	r2, #32
 8004720:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8004724:	68fb      	ldr	r3, [r7, #12]
 8004726:	2220      	movs	r2, #32
 8004728:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800472c:	68fb      	ldr	r3, [r7, #12]
 800472e:	2200      	movs	r2, #0
 8004730:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8004734:	2303      	movs	r3, #3
 8004736:	e00f      	b.n	8004758 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004738:	68fb      	ldr	r3, [r7, #12]
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	681a      	ldr	r2, [r3, #0]
 800473e:	68bb      	ldr	r3, [r7, #8]
 8004740:	4013      	ands	r3, r2
 8004742:	68ba      	ldr	r2, [r7, #8]
 8004744:	429a      	cmp	r2, r3
 8004746:	bf0c      	ite	eq
 8004748:	2301      	moveq	r3, #1
 800474a:	2300      	movne	r3, #0
 800474c:	b2db      	uxtb	r3, r3
 800474e:	461a      	mov	r2, r3
 8004750:	79fb      	ldrb	r3, [r7, #7]
 8004752:	429a      	cmp	r2, r3
 8004754:	d09f      	beq.n	8004696 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004756:	2300      	movs	r3, #0
}
 8004758:	4618      	mov	r0, r3
 800475a:	3740      	adds	r7, #64	; 0x40
 800475c:	46bd      	mov	sp, r7
 800475e:	bd80      	pop	{r7, pc}

08004760 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004760:	b480      	push	{r7}
 8004762:	b085      	sub	sp, #20
 8004764:	af00      	add	r7, sp, #0
 8004766:	60f8      	str	r0, [r7, #12]
 8004768:	60b9      	str	r1, [r7, #8]
 800476a:	4613      	mov	r3, r2
 800476c:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800476e:	68fb      	ldr	r3, [r7, #12]
 8004770:	68ba      	ldr	r2, [r7, #8]
 8004772:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8004774:	68fb      	ldr	r3, [r7, #12]
 8004776:	88fa      	ldrh	r2, [r7, #6]
 8004778:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 800477a:	68fb      	ldr	r3, [r7, #12]
 800477c:	88fa      	ldrh	r2, [r7, #6]
 800477e:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004780:	68fb      	ldr	r3, [r7, #12]
 8004782:	2200      	movs	r2, #0
 8004784:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004786:	68fb      	ldr	r3, [r7, #12]
 8004788:	2222      	movs	r2, #34	; 0x22
 800478a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800478e:	68fb      	ldr	r3, [r7, #12]
 8004790:	2200      	movs	r2, #0
 8004792:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 8004796:	68fb      	ldr	r3, [r7, #12]
 8004798:	691b      	ldr	r3, [r3, #16]
 800479a:	2b00      	cmp	r3, #0
 800479c:	d007      	beq.n	80047ae <UART_Start_Receive_IT+0x4e>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 800479e:	68fb      	ldr	r3, [r7, #12]
 80047a0:	681b      	ldr	r3, [r3, #0]
 80047a2:	68da      	ldr	r2, [r3, #12]
 80047a4:	68fb      	ldr	r3, [r7, #12]
 80047a6:	681b      	ldr	r3, [r3, #0]
 80047a8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80047ac:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 80047ae:	68fb      	ldr	r3, [r7, #12]
 80047b0:	681b      	ldr	r3, [r3, #0]
 80047b2:	695a      	ldr	r2, [r3, #20]
 80047b4:	68fb      	ldr	r3, [r7, #12]
 80047b6:	681b      	ldr	r3, [r3, #0]
 80047b8:	f042 0201 	orr.w	r2, r2, #1
 80047bc:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 80047be:	68fb      	ldr	r3, [r7, #12]
 80047c0:	681b      	ldr	r3, [r3, #0]
 80047c2:	68da      	ldr	r2, [r3, #12]
 80047c4:	68fb      	ldr	r3, [r7, #12]
 80047c6:	681b      	ldr	r3, [r3, #0]
 80047c8:	f042 0220 	orr.w	r2, r2, #32
 80047cc:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80047ce:	2300      	movs	r3, #0
}
 80047d0:	4618      	mov	r0, r3
 80047d2:	3714      	adds	r7, #20
 80047d4:	46bd      	mov	sp, r7
 80047d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047da:	4770      	bx	lr

080047dc <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80047dc:	b480      	push	{r7}
 80047de:	b095      	sub	sp, #84	; 0x54
 80047e0:	af00      	add	r7, sp, #0
 80047e2:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	330c      	adds	r3, #12
 80047ea:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80047ec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80047ee:	e853 3f00 	ldrex	r3, [r3]
 80047f2:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80047f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80047f6:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80047fa:	64fb      	str	r3, [r7, #76]	; 0x4c
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	330c      	adds	r3, #12
 8004802:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004804:	643a      	str	r2, [r7, #64]	; 0x40
 8004806:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004808:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800480a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800480c:	e841 2300 	strex	r3, r2, [r1]
 8004810:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004812:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004814:	2b00      	cmp	r3, #0
 8004816:	d1e5      	bne.n	80047e4 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	3314      	adds	r3, #20
 800481e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004820:	6a3b      	ldr	r3, [r7, #32]
 8004822:	e853 3f00 	ldrex	r3, [r3]
 8004826:	61fb      	str	r3, [r7, #28]
   return(result);
 8004828:	69fb      	ldr	r3, [r7, #28]
 800482a:	f023 0301 	bic.w	r3, r3, #1
 800482e:	64bb      	str	r3, [r7, #72]	; 0x48
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	681b      	ldr	r3, [r3, #0]
 8004834:	3314      	adds	r3, #20
 8004836:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004838:	62fa      	str	r2, [r7, #44]	; 0x2c
 800483a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800483c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800483e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004840:	e841 2300 	strex	r3, r2, [r1]
 8004844:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004846:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004848:	2b00      	cmp	r3, #0
 800484a:	d1e5      	bne.n	8004818 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004850:	2b01      	cmp	r3, #1
 8004852:	d119      	bne.n	8004888 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	330c      	adds	r3, #12
 800485a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800485c:	68fb      	ldr	r3, [r7, #12]
 800485e:	e853 3f00 	ldrex	r3, [r3]
 8004862:	60bb      	str	r3, [r7, #8]
   return(result);
 8004864:	68bb      	ldr	r3, [r7, #8]
 8004866:	f023 0310 	bic.w	r3, r3, #16
 800486a:	647b      	str	r3, [r7, #68]	; 0x44
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	681b      	ldr	r3, [r3, #0]
 8004870:	330c      	adds	r3, #12
 8004872:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004874:	61ba      	str	r2, [r7, #24]
 8004876:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004878:	6979      	ldr	r1, [r7, #20]
 800487a:	69ba      	ldr	r2, [r7, #24]
 800487c:	e841 2300 	strex	r3, r2, [r1]
 8004880:	613b      	str	r3, [r7, #16]
   return(result);
 8004882:	693b      	ldr	r3, [r7, #16]
 8004884:	2b00      	cmp	r3, #0
 8004886:	d1e5      	bne.n	8004854 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	2220      	movs	r2, #32
 800488c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	2200      	movs	r2, #0
 8004894:	631a      	str	r2, [r3, #48]	; 0x30
}
 8004896:	bf00      	nop
 8004898:	3754      	adds	r7, #84	; 0x54
 800489a:	46bd      	mov	sp, r7
 800489c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048a0:	4770      	bx	lr

080048a2 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80048a2:	b580      	push	{r7, lr}
 80048a4:	b084      	sub	sp, #16
 80048a6:	af00      	add	r7, sp, #0
 80048a8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80048ae:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80048b0:	68fb      	ldr	r3, [r7, #12]
 80048b2:	2200      	movs	r2, #0
 80048b4:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80048b6:	68fb      	ldr	r3, [r7, #12]
 80048b8:	2200      	movs	r2, #0
 80048ba:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80048bc:	68f8      	ldr	r0, [r7, #12]
 80048be:	f7ff fecb 	bl	8004658 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80048c2:	bf00      	nop
 80048c4:	3710      	adds	r7, #16
 80048c6:	46bd      	mov	sp, r7
 80048c8:	bd80      	pop	{r7, pc}

080048ca <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80048ca:	b480      	push	{r7}
 80048cc:	b085      	sub	sp, #20
 80048ce:	af00      	add	r7, sp, #0
 80048d0:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80048d8:	b2db      	uxtb	r3, r3
 80048da:	2b21      	cmp	r3, #33	; 0x21
 80048dc:	d13e      	bne.n	800495c <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	689b      	ldr	r3, [r3, #8]
 80048e2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80048e6:	d114      	bne.n	8004912 <UART_Transmit_IT+0x48>
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	691b      	ldr	r3, [r3, #16]
 80048ec:	2b00      	cmp	r3, #0
 80048ee:	d110      	bne.n	8004912 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	6a1b      	ldr	r3, [r3, #32]
 80048f4:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80048f6:	68fb      	ldr	r3, [r7, #12]
 80048f8:	881b      	ldrh	r3, [r3, #0]
 80048fa:	461a      	mov	r2, r3
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	681b      	ldr	r3, [r3, #0]
 8004900:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004904:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	6a1b      	ldr	r3, [r3, #32]
 800490a:	1c9a      	adds	r2, r3, #2
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	621a      	str	r2, [r3, #32]
 8004910:	e008      	b.n	8004924 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	6a1b      	ldr	r3, [r3, #32]
 8004916:	1c59      	adds	r1, r3, #1
 8004918:	687a      	ldr	r2, [r7, #4]
 800491a:	6211      	str	r1, [r2, #32]
 800491c:	781a      	ldrb	r2, [r3, #0]
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	681b      	ldr	r3, [r3, #0]
 8004922:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004928:	b29b      	uxth	r3, r3
 800492a:	3b01      	subs	r3, #1
 800492c:	b29b      	uxth	r3, r3
 800492e:	687a      	ldr	r2, [r7, #4]
 8004930:	4619      	mov	r1, r3
 8004932:	84d1      	strh	r1, [r2, #38]	; 0x26
 8004934:	2b00      	cmp	r3, #0
 8004936:	d10f      	bne.n	8004958 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	681b      	ldr	r3, [r3, #0]
 800493c:	68da      	ldr	r2, [r3, #12]
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	681b      	ldr	r3, [r3, #0]
 8004942:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004946:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	681b      	ldr	r3, [r3, #0]
 800494c:	68da      	ldr	r2, [r3, #12]
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	681b      	ldr	r3, [r3, #0]
 8004952:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004956:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8004958:	2300      	movs	r3, #0
 800495a:	e000      	b.n	800495e <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800495c:	2302      	movs	r3, #2
  }
}
 800495e:	4618      	mov	r0, r3
 8004960:	3714      	adds	r7, #20
 8004962:	46bd      	mov	sp, r7
 8004964:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004968:	4770      	bx	lr

0800496a <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800496a:	b580      	push	{r7, lr}
 800496c:	b082      	sub	sp, #8
 800496e:	af00      	add	r7, sp, #0
 8004970:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	68da      	ldr	r2, [r3, #12]
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	681b      	ldr	r3, [r3, #0]
 800497c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004980:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	2220      	movs	r2, #32
 8004986:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800498a:	6878      	ldr	r0, [r7, #4]
 800498c:	f7ff fe5a 	bl	8004644 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8004990:	2300      	movs	r3, #0
}
 8004992:	4618      	mov	r0, r3
 8004994:	3708      	adds	r7, #8
 8004996:	46bd      	mov	sp, r7
 8004998:	bd80      	pop	{r7, pc}

0800499a <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800499a:	b580      	push	{r7, lr}
 800499c:	b08c      	sub	sp, #48	; 0x30
 800499e:	af00      	add	r7, sp, #0
 80049a0:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80049a8:	b2db      	uxtb	r3, r3
 80049aa:	2b22      	cmp	r3, #34	; 0x22
 80049ac:	f040 80b9 	bne.w	8004b22 <UART_Receive_IT+0x188>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	689b      	ldr	r3, [r3, #8]
 80049b4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80049b8:	d117      	bne.n	80049ea <UART_Receive_IT+0x50>
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	691b      	ldr	r3, [r3, #16]
 80049be:	2b00      	cmp	r3, #0
 80049c0:	d113      	bne.n	80049ea <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80049c2:	2300      	movs	r3, #0
 80049c4:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80049ca:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	681b      	ldr	r3, [r3, #0]
 80049d0:	685b      	ldr	r3, [r3, #4]
 80049d2:	b29b      	uxth	r3, r3
 80049d4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80049d8:	b29a      	uxth	r2, r3
 80049da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80049dc:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80049e2:	1c9a      	adds	r2, r3, #2
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	629a      	str	r2, [r3, #40]	; 0x28
 80049e8:	e026      	b.n	8004a38 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80049ee:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 80049f0:	2300      	movs	r3, #0
 80049f2:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	689b      	ldr	r3, [r3, #8]
 80049f8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80049fc:	d007      	beq.n	8004a0e <UART_Receive_IT+0x74>
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	689b      	ldr	r3, [r3, #8]
 8004a02:	2b00      	cmp	r3, #0
 8004a04:	d10a      	bne.n	8004a1c <UART_Receive_IT+0x82>
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	691b      	ldr	r3, [r3, #16]
 8004a0a:	2b00      	cmp	r3, #0
 8004a0c:	d106      	bne.n	8004a1c <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	681b      	ldr	r3, [r3, #0]
 8004a12:	685b      	ldr	r3, [r3, #4]
 8004a14:	b2da      	uxtb	r2, r3
 8004a16:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004a18:	701a      	strb	r2, [r3, #0]
 8004a1a:	e008      	b.n	8004a2e <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	681b      	ldr	r3, [r3, #0]
 8004a20:	685b      	ldr	r3, [r3, #4]
 8004a22:	b2db      	uxtb	r3, r3
 8004a24:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004a28:	b2da      	uxtb	r2, r3
 8004a2a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004a2c:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a32:	1c5a      	adds	r2, r3, #1
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if ((--huart->RxXferCount == 0U) || (strchr(pdata8bits,'\n') != '\0') || (strchr(pdata8bits,'\r') != '\0'))
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004a3c:	b29b      	uxth	r3, r3
 8004a3e:	3b01      	subs	r3, #1
 8004a40:	b29b      	uxth	r3, r3
 8004a42:	687a      	ldr	r2, [r7, #4]
 8004a44:	4619      	mov	r1, r3
 8004a46:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8004a48:	2b00      	cmp	r3, #0
 8004a4a:	d00d      	beq.n	8004a68 <UART_Receive_IT+0xce>
 8004a4c:	210a      	movs	r1, #10
 8004a4e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8004a50:	f000 fe23 	bl	800569a <strchr>
 8004a54:	4603      	mov	r3, r0
 8004a56:	2b00      	cmp	r3, #0
 8004a58:	d106      	bne.n	8004a68 <UART_Receive_IT+0xce>
 8004a5a:	210d      	movs	r1, #13
 8004a5c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8004a5e:	f000 fe1c 	bl	800569a <strchr>
 8004a62:	4603      	mov	r3, r0
 8004a64:	2b00      	cmp	r3, #0
 8004a66:	d05a      	beq.n	8004b1e <UART_Receive_IT+0x184>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	681b      	ldr	r3, [r3, #0]
 8004a6c:	68da      	ldr	r2, [r3, #12]
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	681b      	ldr	r3, [r3, #0]
 8004a72:	f022 0220 	bic.w	r2, r2, #32
 8004a76:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	681b      	ldr	r3, [r3, #0]
 8004a7c:	68da      	ldr	r2, [r3, #12]
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	681b      	ldr	r3, [r3, #0]
 8004a82:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004a86:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	681b      	ldr	r3, [r3, #0]
 8004a8c:	695a      	ldr	r2, [r3, #20]
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	681b      	ldr	r3, [r3, #0]
 8004a92:	f022 0201 	bic.w	r2, r2, #1
 8004a96:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	2220      	movs	r2, #32
 8004a9c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004aa4:	2b01      	cmp	r3, #1
 8004aa6:	d135      	bne.n	8004b14 <UART_Receive_IT+0x17a>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	2200      	movs	r2, #0
 8004aac:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	681b      	ldr	r3, [r3, #0]
 8004ab2:	330c      	adds	r3, #12
 8004ab4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ab6:	697b      	ldr	r3, [r7, #20]
 8004ab8:	e853 3f00 	ldrex	r3, [r3]
 8004abc:	613b      	str	r3, [r7, #16]
   return(result);
 8004abe:	693b      	ldr	r3, [r7, #16]
 8004ac0:	f023 0310 	bic.w	r3, r3, #16
 8004ac4:	627b      	str	r3, [r7, #36]	; 0x24
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	681b      	ldr	r3, [r3, #0]
 8004aca:	330c      	adds	r3, #12
 8004acc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004ace:	623a      	str	r2, [r7, #32]
 8004ad0:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ad2:	69f9      	ldr	r1, [r7, #28]
 8004ad4:	6a3a      	ldr	r2, [r7, #32]
 8004ad6:	e841 2300 	strex	r3, r2, [r1]
 8004ada:	61bb      	str	r3, [r7, #24]
   return(result);
 8004adc:	69bb      	ldr	r3, [r7, #24]
 8004ade:	2b00      	cmp	r3, #0
 8004ae0:	d1e5      	bne.n	8004aae <UART_Receive_IT+0x114>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	681b      	ldr	r3, [r3, #0]
 8004ae6:	681b      	ldr	r3, [r3, #0]
 8004ae8:	f003 0310 	and.w	r3, r3, #16
 8004aec:	2b10      	cmp	r3, #16
 8004aee:	d10a      	bne.n	8004b06 <UART_Receive_IT+0x16c>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004af0:	2300      	movs	r3, #0
 8004af2:	60fb      	str	r3, [r7, #12]
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	681b      	ldr	r3, [r3, #0]
 8004afa:	60fb      	str	r3, [r7, #12]
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	681b      	ldr	r3, [r3, #0]
 8004b00:	685b      	ldr	r3, [r3, #4]
 8004b02:	60fb      	str	r3, [r7, #12]
 8004b04:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8004b0a:	4619      	mov	r1, r3
 8004b0c:	6878      	ldr	r0, [r7, #4]
 8004b0e:	f7ff fdad 	bl	800466c <HAL_UARTEx_RxEventCallback>
 8004b12:	e002      	b.n	8004b1a <UART_Receive_IT+0x180>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8004b14:	6878      	ldr	r0, [r7, #4]
 8004b16:	f7fc f87d 	bl	8000c14 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8004b1a:	2300      	movs	r3, #0
 8004b1c:	e002      	b.n	8004b24 <UART_Receive_IT+0x18a>
    }
    return HAL_OK;
 8004b1e:	2300      	movs	r3, #0
 8004b20:	e000      	b.n	8004b24 <UART_Receive_IT+0x18a>
  }
  else
  {
    return HAL_BUSY;
 8004b22:	2302      	movs	r3, #2
  }
}
 8004b24:	4618      	mov	r0, r3
 8004b26:	3730      	adds	r7, #48	; 0x30
 8004b28:	46bd      	mov	sp, r7
 8004b2a:	bd80      	pop	{r7, pc}

08004b2c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004b2c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004b30:	b0c0      	sub	sp, #256	; 0x100
 8004b32:	af00      	add	r7, sp, #0
 8004b34:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004b38:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004b3c:	681b      	ldr	r3, [r3, #0]
 8004b3e:	691b      	ldr	r3, [r3, #16]
 8004b40:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8004b44:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004b48:	68d9      	ldr	r1, [r3, #12]
 8004b4a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004b4e:	681a      	ldr	r2, [r3, #0]
 8004b50:	ea40 0301 	orr.w	r3, r0, r1
 8004b54:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8004b56:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004b5a:	689a      	ldr	r2, [r3, #8]
 8004b5c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004b60:	691b      	ldr	r3, [r3, #16]
 8004b62:	431a      	orrs	r2, r3
 8004b64:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004b68:	695b      	ldr	r3, [r3, #20]
 8004b6a:	431a      	orrs	r2, r3
 8004b6c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004b70:	69db      	ldr	r3, [r3, #28]
 8004b72:	4313      	orrs	r3, r2
 8004b74:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8004b78:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004b7c:	681b      	ldr	r3, [r3, #0]
 8004b7e:	68db      	ldr	r3, [r3, #12]
 8004b80:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8004b84:	f021 010c 	bic.w	r1, r1, #12
 8004b88:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004b8c:	681a      	ldr	r2, [r3, #0]
 8004b8e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8004b92:	430b      	orrs	r3, r1
 8004b94:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004b96:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004b9a:	681b      	ldr	r3, [r3, #0]
 8004b9c:	695b      	ldr	r3, [r3, #20]
 8004b9e:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8004ba2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004ba6:	6999      	ldr	r1, [r3, #24]
 8004ba8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004bac:	681a      	ldr	r2, [r3, #0]
 8004bae:	ea40 0301 	orr.w	r3, r0, r1
 8004bb2:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004bb4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004bb8:	681a      	ldr	r2, [r3, #0]
 8004bba:	4b8f      	ldr	r3, [pc, #572]	; (8004df8 <UART_SetConfig+0x2cc>)
 8004bbc:	429a      	cmp	r2, r3
 8004bbe:	d005      	beq.n	8004bcc <UART_SetConfig+0xa0>
 8004bc0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004bc4:	681a      	ldr	r2, [r3, #0]
 8004bc6:	4b8d      	ldr	r3, [pc, #564]	; (8004dfc <UART_SetConfig+0x2d0>)
 8004bc8:	429a      	cmp	r2, r3
 8004bca:	d104      	bne.n	8004bd6 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8004bcc:	f7ff f988 	bl	8003ee0 <HAL_RCC_GetPCLK2Freq>
 8004bd0:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8004bd4:	e003      	b.n	8004bde <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8004bd6:	f7ff f96f 	bl	8003eb8 <HAL_RCC_GetPCLK1Freq>
 8004bda:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004bde:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004be2:	69db      	ldr	r3, [r3, #28]
 8004be4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004be8:	f040 810c 	bne.w	8004e04 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004bec:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004bf0:	2200      	movs	r2, #0
 8004bf2:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8004bf6:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8004bfa:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8004bfe:	4622      	mov	r2, r4
 8004c00:	462b      	mov	r3, r5
 8004c02:	1891      	adds	r1, r2, r2
 8004c04:	65b9      	str	r1, [r7, #88]	; 0x58
 8004c06:	415b      	adcs	r3, r3
 8004c08:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004c0a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8004c0e:	4621      	mov	r1, r4
 8004c10:	eb12 0801 	adds.w	r8, r2, r1
 8004c14:	4629      	mov	r1, r5
 8004c16:	eb43 0901 	adc.w	r9, r3, r1
 8004c1a:	f04f 0200 	mov.w	r2, #0
 8004c1e:	f04f 0300 	mov.w	r3, #0
 8004c22:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004c26:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004c2a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004c2e:	4690      	mov	r8, r2
 8004c30:	4699      	mov	r9, r3
 8004c32:	4623      	mov	r3, r4
 8004c34:	eb18 0303 	adds.w	r3, r8, r3
 8004c38:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8004c3c:	462b      	mov	r3, r5
 8004c3e:	eb49 0303 	adc.w	r3, r9, r3
 8004c42:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8004c46:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004c4a:	685b      	ldr	r3, [r3, #4]
 8004c4c:	2200      	movs	r2, #0
 8004c4e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8004c52:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8004c56:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8004c5a:	460b      	mov	r3, r1
 8004c5c:	18db      	adds	r3, r3, r3
 8004c5e:	653b      	str	r3, [r7, #80]	; 0x50
 8004c60:	4613      	mov	r3, r2
 8004c62:	eb42 0303 	adc.w	r3, r2, r3
 8004c66:	657b      	str	r3, [r7, #84]	; 0x54
 8004c68:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8004c6c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8004c70:	f7fb fac4 	bl	80001fc <__aeabi_uldivmod>
 8004c74:	4602      	mov	r2, r0
 8004c76:	460b      	mov	r3, r1
 8004c78:	4b61      	ldr	r3, [pc, #388]	; (8004e00 <UART_SetConfig+0x2d4>)
 8004c7a:	fba3 2302 	umull	r2, r3, r3, r2
 8004c7e:	095b      	lsrs	r3, r3, #5
 8004c80:	011c      	lsls	r4, r3, #4
 8004c82:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004c86:	2200      	movs	r2, #0
 8004c88:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004c8c:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8004c90:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8004c94:	4642      	mov	r2, r8
 8004c96:	464b      	mov	r3, r9
 8004c98:	1891      	adds	r1, r2, r2
 8004c9a:	64b9      	str	r1, [r7, #72]	; 0x48
 8004c9c:	415b      	adcs	r3, r3
 8004c9e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004ca0:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8004ca4:	4641      	mov	r1, r8
 8004ca6:	eb12 0a01 	adds.w	sl, r2, r1
 8004caa:	4649      	mov	r1, r9
 8004cac:	eb43 0b01 	adc.w	fp, r3, r1
 8004cb0:	f04f 0200 	mov.w	r2, #0
 8004cb4:	f04f 0300 	mov.w	r3, #0
 8004cb8:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8004cbc:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8004cc0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004cc4:	4692      	mov	sl, r2
 8004cc6:	469b      	mov	fp, r3
 8004cc8:	4643      	mov	r3, r8
 8004cca:	eb1a 0303 	adds.w	r3, sl, r3
 8004cce:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8004cd2:	464b      	mov	r3, r9
 8004cd4:	eb4b 0303 	adc.w	r3, fp, r3
 8004cd8:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8004cdc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004ce0:	685b      	ldr	r3, [r3, #4]
 8004ce2:	2200      	movs	r2, #0
 8004ce4:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004ce8:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8004cec:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8004cf0:	460b      	mov	r3, r1
 8004cf2:	18db      	adds	r3, r3, r3
 8004cf4:	643b      	str	r3, [r7, #64]	; 0x40
 8004cf6:	4613      	mov	r3, r2
 8004cf8:	eb42 0303 	adc.w	r3, r2, r3
 8004cfc:	647b      	str	r3, [r7, #68]	; 0x44
 8004cfe:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8004d02:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8004d06:	f7fb fa79 	bl	80001fc <__aeabi_uldivmod>
 8004d0a:	4602      	mov	r2, r0
 8004d0c:	460b      	mov	r3, r1
 8004d0e:	4611      	mov	r1, r2
 8004d10:	4b3b      	ldr	r3, [pc, #236]	; (8004e00 <UART_SetConfig+0x2d4>)
 8004d12:	fba3 2301 	umull	r2, r3, r3, r1
 8004d16:	095b      	lsrs	r3, r3, #5
 8004d18:	2264      	movs	r2, #100	; 0x64
 8004d1a:	fb02 f303 	mul.w	r3, r2, r3
 8004d1e:	1acb      	subs	r3, r1, r3
 8004d20:	00db      	lsls	r3, r3, #3
 8004d22:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8004d26:	4b36      	ldr	r3, [pc, #216]	; (8004e00 <UART_SetConfig+0x2d4>)
 8004d28:	fba3 2302 	umull	r2, r3, r3, r2
 8004d2c:	095b      	lsrs	r3, r3, #5
 8004d2e:	005b      	lsls	r3, r3, #1
 8004d30:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8004d34:	441c      	add	r4, r3
 8004d36:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004d3a:	2200      	movs	r2, #0
 8004d3c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8004d40:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8004d44:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8004d48:	4642      	mov	r2, r8
 8004d4a:	464b      	mov	r3, r9
 8004d4c:	1891      	adds	r1, r2, r2
 8004d4e:	63b9      	str	r1, [r7, #56]	; 0x38
 8004d50:	415b      	adcs	r3, r3
 8004d52:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004d54:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8004d58:	4641      	mov	r1, r8
 8004d5a:	1851      	adds	r1, r2, r1
 8004d5c:	6339      	str	r1, [r7, #48]	; 0x30
 8004d5e:	4649      	mov	r1, r9
 8004d60:	414b      	adcs	r3, r1
 8004d62:	637b      	str	r3, [r7, #52]	; 0x34
 8004d64:	f04f 0200 	mov.w	r2, #0
 8004d68:	f04f 0300 	mov.w	r3, #0
 8004d6c:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8004d70:	4659      	mov	r1, fp
 8004d72:	00cb      	lsls	r3, r1, #3
 8004d74:	4651      	mov	r1, sl
 8004d76:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004d7a:	4651      	mov	r1, sl
 8004d7c:	00ca      	lsls	r2, r1, #3
 8004d7e:	4610      	mov	r0, r2
 8004d80:	4619      	mov	r1, r3
 8004d82:	4603      	mov	r3, r0
 8004d84:	4642      	mov	r2, r8
 8004d86:	189b      	adds	r3, r3, r2
 8004d88:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004d8c:	464b      	mov	r3, r9
 8004d8e:	460a      	mov	r2, r1
 8004d90:	eb42 0303 	adc.w	r3, r2, r3
 8004d94:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004d98:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004d9c:	685b      	ldr	r3, [r3, #4]
 8004d9e:	2200      	movs	r2, #0
 8004da0:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8004da4:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8004da8:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8004dac:	460b      	mov	r3, r1
 8004dae:	18db      	adds	r3, r3, r3
 8004db0:	62bb      	str	r3, [r7, #40]	; 0x28
 8004db2:	4613      	mov	r3, r2
 8004db4:	eb42 0303 	adc.w	r3, r2, r3
 8004db8:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004dba:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004dbe:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8004dc2:	f7fb fa1b 	bl	80001fc <__aeabi_uldivmod>
 8004dc6:	4602      	mov	r2, r0
 8004dc8:	460b      	mov	r3, r1
 8004dca:	4b0d      	ldr	r3, [pc, #52]	; (8004e00 <UART_SetConfig+0x2d4>)
 8004dcc:	fba3 1302 	umull	r1, r3, r3, r2
 8004dd0:	095b      	lsrs	r3, r3, #5
 8004dd2:	2164      	movs	r1, #100	; 0x64
 8004dd4:	fb01 f303 	mul.w	r3, r1, r3
 8004dd8:	1ad3      	subs	r3, r2, r3
 8004dda:	00db      	lsls	r3, r3, #3
 8004ddc:	3332      	adds	r3, #50	; 0x32
 8004dde:	4a08      	ldr	r2, [pc, #32]	; (8004e00 <UART_SetConfig+0x2d4>)
 8004de0:	fba2 2303 	umull	r2, r3, r2, r3
 8004de4:	095b      	lsrs	r3, r3, #5
 8004de6:	f003 0207 	and.w	r2, r3, #7
 8004dea:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004dee:	681b      	ldr	r3, [r3, #0]
 8004df0:	4422      	add	r2, r4
 8004df2:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8004df4:	e105      	b.n	8005002 <UART_SetConfig+0x4d6>
 8004df6:	bf00      	nop
 8004df8:	40011000 	.word	0x40011000
 8004dfc:	40011400 	.word	0x40011400
 8004e00:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004e04:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004e08:	2200      	movs	r2, #0
 8004e0a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8004e0e:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8004e12:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8004e16:	4642      	mov	r2, r8
 8004e18:	464b      	mov	r3, r9
 8004e1a:	1891      	adds	r1, r2, r2
 8004e1c:	6239      	str	r1, [r7, #32]
 8004e1e:	415b      	adcs	r3, r3
 8004e20:	627b      	str	r3, [r7, #36]	; 0x24
 8004e22:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8004e26:	4641      	mov	r1, r8
 8004e28:	1854      	adds	r4, r2, r1
 8004e2a:	4649      	mov	r1, r9
 8004e2c:	eb43 0501 	adc.w	r5, r3, r1
 8004e30:	f04f 0200 	mov.w	r2, #0
 8004e34:	f04f 0300 	mov.w	r3, #0
 8004e38:	00eb      	lsls	r3, r5, #3
 8004e3a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004e3e:	00e2      	lsls	r2, r4, #3
 8004e40:	4614      	mov	r4, r2
 8004e42:	461d      	mov	r5, r3
 8004e44:	4643      	mov	r3, r8
 8004e46:	18e3      	adds	r3, r4, r3
 8004e48:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8004e4c:	464b      	mov	r3, r9
 8004e4e:	eb45 0303 	adc.w	r3, r5, r3
 8004e52:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8004e56:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004e5a:	685b      	ldr	r3, [r3, #4]
 8004e5c:	2200      	movs	r2, #0
 8004e5e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8004e62:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8004e66:	f04f 0200 	mov.w	r2, #0
 8004e6a:	f04f 0300 	mov.w	r3, #0
 8004e6e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8004e72:	4629      	mov	r1, r5
 8004e74:	008b      	lsls	r3, r1, #2
 8004e76:	4621      	mov	r1, r4
 8004e78:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004e7c:	4621      	mov	r1, r4
 8004e7e:	008a      	lsls	r2, r1, #2
 8004e80:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8004e84:	f7fb f9ba 	bl	80001fc <__aeabi_uldivmod>
 8004e88:	4602      	mov	r2, r0
 8004e8a:	460b      	mov	r3, r1
 8004e8c:	4b60      	ldr	r3, [pc, #384]	; (8005010 <UART_SetConfig+0x4e4>)
 8004e8e:	fba3 2302 	umull	r2, r3, r3, r2
 8004e92:	095b      	lsrs	r3, r3, #5
 8004e94:	011c      	lsls	r4, r3, #4
 8004e96:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004e9a:	2200      	movs	r2, #0
 8004e9c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8004ea0:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8004ea4:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8004ea8:	4642      	mov	r2, r8
 8004eaa:	464b      	mov	r3, r9
 8004eac:	1891      	adds	r1, r2, r2
 8004eae:	61b9      	str	r1, [r7, #24]
 8004eb0:	415b      	adcs	r3, r3
 8004eb2:	61fb      	str	r3, [r7, #28]
 8004eb4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004eb8:	4641      	mov	r1, r8
 8004eba:	1851      	adds	r1, r2, r1
 8004ebc:	6139      	str	r1, [r7, #16]
 8004ebe:	4649      	mov	r1, r9
 8004ec0:	414b      	adcs	r3, r1
 8004ec2:	617b      	str	r3, [r7, #20]
 8004ec4:	f04f 0200 	mov.w	r2, #0
 8004ec8:	f04f 0300 	mov.w	r3, #0
 8004ecc:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004ed0:	4659      	mov	r1, fp
 8004ed2:	00cb      	lsls	r3, r1, #3
 8004ed4:	4651      	mov	r1, sl
 8004ed6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004eda:	4651      	mov	r1, sl
 8004edc:	00ca      	lsls	r2, r1, #3
 8004ede:	4610      	mov	r0, r2
 8004ee0:	4619      	mov	r1, r3
 8004ee2:	4603      	mov	r3, r0
 8004ee4:	4642      	mov	r2, r8
 8004ee6:	189b      	adds	r3, r3, r2
 8004ee8:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8004eec:	464b      	mov	r3, r9
 8004eee:	460a      	mov	r2, r1
 8004ef0:	eb42 0303 	adc.w	r3, r2, r3
 8004ef4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8004ef8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004efc:	685b      	ldr	r3, [r3, #4]
 8004efe:	2200      	movs	r2, #0
 8004f00:	67bb      	str	r3, [r7, #120]	; 0x78
 8004f02:	67fa      	str	r2, [r7, #124]	; 0x7c
 8004f04:	f04f 0200 	mov.w	r2, #0
 8004f08:	f04f 0300 	mov.w	r3, #0
 8004f0c:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8004f10:	4649      	mov	r1, r9
 8004f12:	008b      	lsls	r3, r1, #2
 8004f14:	4641      	mov	r1, r8
 8004f16:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004f1a:	4641      	mov	r1, r8
 8004f1c:	008a      	lsls	r2, r1, #2
 8004f1e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8004f22:	f7fb f96b 	bl	80001fc <__aeabi_uldivmod>
 8004f26:	4602      	mov	r2, r0
 8004f28:	460b      	mov	r3, r1
 8004f2a:	4b39      	ldr	r3, [pc, #228]	; (8005010 <UART_SetConfig+0x4e4>)
 8004f2c:	fba3 1302 	umull	r1, r3, r3, r2
 8004f30:	095b      	lsrs	r3, r3, #5
 8004f32:	2164      	movs	r1, #100	; 0x64
 8004f34:	fb01 f303 	mul.w	r3, r1, r3
 8004f38:	1ad3      	subs	r3, r2, r3
 8004f3a:	011b      	lsls	r3, r3, #4
 8004f3c:	3332      	adds	r3, #50	; 0x32
 8004f3e:	4a34      	ldr	r2, [pc, #208]	; (8005010 <UART_SetConfig+0x4e4>)
 8004f40:	fba2 2303 	umull	r2, r3, r2, r3
 8004f44:	095b      	lsrs	r3, r3, #5
 8004f46:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004f4a:	441c      	add	r4, r3
 8004f4c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004f50:	2200      	movs	r2, #0
 8004f52:	673b      	str	r3, [r7, #112]	; 0x70
 8004f54:	677a      	str	r2, [r7, #116]	; 0x74
 8004f56:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8004f5a:	4642      	mov	r2, r8
 8004f5c:	464b      	mov	r3, r9
 8004f5e:	1891      	adds	r1, r2, r2
 8004f60:	60b9      	str	r1, [r7, #8]
 8004f62:	415b      	adcs	r3, r3
 8004f64:	60fb      	str	r3, [r7, #12]
 8004f66:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004f6a:	4641      	mov	r1, r8
 8004f6c:	1851      	adds	r1, r2, r1
 8004f6e:	6039      	str	r1, [r7, #0]
 8004f70:	4649      	mov	r1, r9
 8004f72:	414b      	adcs	r3, r1
 8004f74:	607b      	str	r3, [r7, #4]
 8004f76:	f04f 0200 	mov.w	r2, #0
 8004f7a:	f04f 0300 	mov.w	r3, #0
 8004f7e:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8004f82:	4659      	mov	r1, fp
 8004f84:	00cb      	lsls	r3, r1, #3
 8004f86:	4651      	mov	r1, sl
 8004f88:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004f8c:	4651      	mov	r1, sl
 8004f8e:	00ca      	lsls	r2, r1, #3
 8004f90:	4610      	mov	r0, r2
 8004f92:	4619      	mov	r1, r3
 8004f94:	4603      	mov	r3, r0
 8004f96:	4642      	mov	r2, r8
 8004f98:	189b      	adds	r3, r3, r2
 8004f9a:	66bb      	str	r3, [r7, #104]	; 0x68
 8004f9c:	464b      	mov	r3, r9
 8004f9e:	460a      	mov	r2, r1
 8004fa0:	eb42 0303 	adc.w	r3, r2, r3
 8004fa4:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004fa6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004faa:	685b      	ldr	r3, [r3, #4]
 8004fac:	2200      	movs	r2, #0
 8004fae:	663b      	str	r3, [r7, #96]	; 0x60
 8004fb0:	667a      	str	r2, [r7, #100]	; 0x64
 8004fb2:	f04f 0200 	mov.w	r2, #0
 8004fb6:	f04f 0300 	mov.w	r3, #0
 8004fba:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8004fbe:	4649      	mov	r1, r9
 8004fc0:	008b      	lsls	r3, r1, #2
 8004fc2:	4641      	mov	r1, r8
 8004fc4:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004fc8:	4641      	mov	r1, r8
 8004fca:	008a      	lsls	r2, r1, #2
 8004fcc:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8004fd0:	f7fb f914 	bl	80001fc <__aeabi_uldivmod>
 8004fd4:	4602      	mov	r2, r0
 8004fd6:	460b      	mov	r3, r1
 8004fd8:	4b0d      	ldr	r3, [pc, #52]	; (8005010 <UART_SetConfig+0x4e4>)
 8004fda:	fba3 1302 	umull	r1, r3, r3, r2
 8004fde:	095b      	lsrs	r3, r3, #5
 8004fe0:	2164      	movs	r1, #100	; 0x64
 8004fe2:	fb01 f303 	mul.w	r3, r1, r3
 8004fe6:	1ad3      	subs	r3, r2, r3
 8004fe8:	011b      	lsls	r3, r3, #4
 8004fea:	3332      	adds	r3, #50	; 0x32
 8004fec:	4a08      	ldr	r2, [pc, #32]	; (8005010 <UART_SetConfig+0x4e4>)
 8004fee:	fba2 2303 	umull	r2, r3, r2, r3
 8004ff2:	095b      	lsrs	r3, r3, #5
 8004ff4:	f003 020f 	and.w	r2, r3, #15
 8004ff8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004ffc:	681b      	ldr	r3, [r3, #0]
 8004ffe:	4422      	add	r2, r4
 8005000:	609a      	str	r2, [r3, #8]
}
 8005002:	bf00      	nop
 8005004:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8005008:	46bd      	mov	sp, r7
 800500a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800500e:	bf00      	nop
 8005010:	51eb851f 	.word	0x51eb851f

08005014 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005014:	b084      	sub	sp, #16
 8005016:	b580      	push	{r7, lr}
 8005018:	b084      	sub	sp, #16
 800501a:	af00      	add	r7, sp, #0
 800501c:	6078      	str	r0, [r7, #4]
 800501e:	f107 001c 	add.w	r0, r7, #28
 8005022:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8005026:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005028:	2b01      	cmp	r3, #1
 800502a:	d122      	bne.n	8005072 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005030:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	68db      	ldr	r3, [r3, #12]
 800503c:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8005040:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005044:	687a      	ldr	r2, [r7, #4]
 8005046:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	68db      	ldr	r3, [r3, #12]
 800504c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8005054:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005056:	2b01      	cmp	r3, #1
 8005058:	d105      	bne.n	8005066 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	68db      	ldr	r3, [r3, #12]
 800505e:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8005066:	6878      	ldr	r0, [r7, #4]
 8005068:	f000 faa2 	bl	80055b0 <USB_CoreReset>
 800506c:	4603      	mov	r3, r0
 800506e:	73fb      	strb	r3, [r7, #15]
 8005070:	e01a      	b.n	80050a8 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	68db      	ldr	r3, [r3, #12]
 8005076:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800507e:	6878      	ldr	r0, [r7, #4]
 8005080:	f000 fa96 	bl	80055b0 <USB_CoreReset>
 8005084:	4603      	mov	r3, r0
 8005086:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8005088:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800508a:	2b00      	cmp	r3, #0
 800508c:	d106      	bne.n	800509c <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005092:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	639a      	str	r2, [r3, #56]	; 0x38
 800509a:	e005      	b.n	80050a8 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80050a0:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 80050a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80050aa:	2b01      	cmp	r3, #1
 80050ac:	d10b      	bne.n	80050c6 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	689b      	ldr	r3, [r3, #8]
 80050b2:	f043 0206 	orr.w	r2, r3, #6
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	689b      	ldr	r3, [r3, #8]
 80050be:	f043 0220 	orr.w	r2, r3, #32
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	609a      	str	r2, [r3, #8]
  }

  return ret;
 80050c6:	7bfb      	ldrb	r3, [r7, #15]
}
 80050c8:	4618      	mov	r0, r3
 80050ca:	3710      	adds	r7, #16
 80050cc:	46bd      	mov	sp, r7
 80050ce:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80050d2:	b004      	add	sp, #16
 80050d4:	4770      	bx	lr

080050d6 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80050d6:	b480      	push	{r7}
 80050d8:	b083      	sub	sp, #12
 80050da:	af00      	add	r7, sp, #0
 80050dc:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	689b      	ldr	r3, [r3, #8]
 80050e2:	f023 0201 	bic.w	r2, r3, #1
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80050ea:	2300      	movs	r3, #0
}
 80050ec:	4618      	mov	r0, r3
 80050ee:	370c      	adds	r7, #12
 80050f0:	46bd      	mov	sp, r7
 80050f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050f6:	4770      	bx	lr

080050f8 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 80050f8:	b580      	push	{r7, lr}
 80050fa:	b084      	sub	sp, #16
 80050fc:	af00      	add	r7, sp, #0
 80050fe:	6078      	str	r0, [r7, #4]
 8005100:	460b      	mov	r3, r1
 8005102:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8005104:	2300      	movs	r3, #0
 8005106:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	68db      	ldr	r3, [r3, #12]
 800510c:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8005114:	78fb      	ldrb	r3, [r7, #3]
 8005116:	2b01      	cmp	r3, #1
 8005118:	d115      	bne.n	8005146 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	68db      	ldr	r3, [r3, #12]
 800511e:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8005126:	2001      	movs	r0, #1
 8005128:	f7fc f958 	bl	80013dc <HAL_Delay>
      ms++;
 800512c:	68fb      	ldr	r3, [r7, #12]
 800512e:	3301      	adds	r3, #1
 8005130:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8005132:	6878      	ldr	r0, [r7, #4]
 8005134:	f000 fa2e 	bl	8005594 <USB_GetMode>
 8005138:	4603      	mov	r3, r0
 800513a:	2b01      	cmp	r3, #1
 800513c:	d01e      	beq.n	800517c <USB_SetCurrentMode+0x84>
 800513e:	68fb      	ldr	r3, [r7, #12]
 8005140:	2b31      	cmp	r3, #49	; 0x31
 8005142:	d9f0      	bls.n	8005126 <USB_SetCurrentMode+0x2e>
 8005144:	e01a      	b.n	800517c <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8005146:	78fb      	ldrb	r3, [r7, #3]
 8005148:	2b00      	cmp	r3, #0
 800514a:	d115      	bne.n	8005178 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	68db      	ldr	r3, [r3, #12]
 8005150:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8005158:	2001      	movs	r0, #1
 800515a:	f7fc f93f 	bl	80013dc <HAL_Delay>
      ms++;
 800515e:	68fb      	ldr	r3, [r7, #12]
 8005160:	3301      	adds	r3, #1
 8005162:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8005164:	6878      	ldr	r0, [r7, #4]
 8005166:	f000 fa15 	bl	8005594 <USB_GetMode>
 800516a:	4603      	mov	r3, r0
 800516c:	2b00      	cmp	r3, #0
 800516e:	d005      	beq.n	800517c <USB_SetCurrentMode+0x84>
 8005170:	68fb      	ldr	r3, [r7, #12]
 8005172:	2b31      	cmp	r3, #49	; 0x31
 8005174:	d9f0      	bls.n	8005158 <USB_SetCurrentMode+0x60>
 8005176:	e001      	b.n	800517c <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8005178:	2301      	movs	r3, #1
 800517a:	e005      	b.n	8005188 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 800517c:	68fb      	ldr	r3, [r7, #12]
 800517e:	2b32      	cmp	r3, #50	; 0x32
 8005180:	d101      	bne.n	8005186 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8005182:	2301      	movs	r3, #1
 8005184:	e000      	b.n	8005188 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8005186:	2300      	movs	r3, #0
}
 8005188:	4618      	mov	r0, r3
 800518a:	3710      	adds	r7, #16
 800518c:	46bd      	mov	sp, r7
 800518e:	bd80      	pop	{r7, pc}

08005190 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005190:	b084      	sub	sp, #16
 8005192:	b580      	push	{r7, lr}
 8005194:	b086      	sub	sp, #24
 8005196:	af00      	add	r7, sp, #0
 8005198:	6078      	str	r0, [r7, #4]
 800519a:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800519e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 80051a2:	2300      	movs	r3, #0
 80051a4:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 80051aa:	2300      	movs	r3, #0
 80051ac:	613b      	str	r3, [r7, #16]
 80051ae:	e009      	b.n	80051c4 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 80051b0:	687a      	ldr	r2, [r7, #4]
 80051b2:	693b      	ldr	r3, [r7, #16]
 80051b4:	3340      	adds	r3, #64	; 0x40
 80051b6:	009b      	lsls	r3, r3, #2
 80051b8:	4413      	add	r3, r2
 80051ba:	2200      	movs	r2, #0
 80051bc:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 80051be:	693b      	ldr	r3, [r7, #16]
 80051c0:	3301      	adds	r3, #1
 80051c2:	613b      	str	r3, [r7, #16]
 80051c4:	693b      	ldr	r3, [r7, #16]
 80051c6:	2b0e      	cmp	r3, #14
 80051c8:	d9f2      	bls.n	80051b0 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 80051ca:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80051cc:	2b00      	cmp	r3, #0
 80051ce:	d11c      	bne.n	800520a <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80051d0:	68fb      	ldr	r3, [r7, #12]
 80051d2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80051d6:	685b      	ldr	r3, [r3, #4]
 80051d8:	68fa      	ldr	r2, [r7, #12]
 80051da:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80051de:	f043 0302 	orr.w	r3, r3, #2
 80051e2:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80051e8:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80051f4:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005200:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	639a      	str	r2, [r3, #56]	; 0x38
 8005208:	e00b      	b.n	8005222 <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800520e:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800521a:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8005222:	68fb      	ldr	r3, [r7, #12]
 8005224:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8005228:	461a      	mov	r2, r3
 800522a:	2300      	movs	r3, #0
 800522c:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 800522e:	68fb      	ldr	r3, [r7, #12]
 8005230:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005234:	4619      	mov	r1, r3
 8005236:	68fb      	ldr	r3, [r7, #12]
 8005238:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800523c:	461a      	mov	r2, r3
 800523e:	680b      	ldr	r3, [r1, #0]
 8005240:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8005242:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005244:	2b01      	cmp	r3, #1
 8005246:	d10c      	bne.n	8005262 <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8005248:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800524a:	2b00      	cmp	r3, #0
 800524c:	d104      	bne.n	8005258 <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800524e:	2100      	movs	r1, #0
 8005250:	6878      	ldr	r0, [r7, #4]
 8005252:	f000 f965 	bl	8005520 <USB_SetDevSpeed>
 8005256:	e008      	b.n	800526a <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8005258:	2101      	movs	r1, #1
 800525a:	6878      	ldr	r0, [r7, #4]
 800525c:	f000 f960 	bl	8005520 <USB_SetDevSpeed>
 8005260:	e003      	b.n	800526a <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8005262:	2103      	movs	r1, #3
 8005264:	6878      	ldr	r0, [r7, #4]
 8005266:	f000 f95b 	bl	8005520 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800526a:	2110      	movs	r1, #16
 800526c:	6878      	ldr	r0, [r7, #4]
 800526e:	f000 f8f3 	bl	8005458 <USB_FlushTxFifo>
 8005272:	4603      	mov	r3, r0
 8005274:	2b00      	cmp	r3, #0
 8005276:	d001      	beq.n	800527c <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 8005278:	2301      	movs	r3, #1
 800527a:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800527c:	6878      	ldr	r0, [r7, #4]
 800527e:	f000 f91f 	bl	80054c0 <USB_FlushRxFifo>
 8005282:	4603      	mov	r3, r0
 8005284:	2b00      	cmp	r3, #0
 8005286:	d001      	beq.n	800528c <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 8005288:	2301      	movs	r3, #1
 800528a:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800528c:	68fb      	ldr	r3, [r7, #12]
 800528e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005292:	461a      	mov	r2, r3
 8005294:	2300      	movs	r3, #0
 8005296:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8005298:	68fb      	ldr	r3, [r7, #12]
 800529a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800529e:	461a      	mov	r2, r3
 80052a0:	2300      	movs	r3, #0
 80052a2:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 80052a4:	68fb      	ldr	r3, [r7, #12]
 80052a6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80052aa:	461a      	mov	r2, r3
 80052ac:	2300      	movs	r3, #0
 80052ae:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80052b0:	2300      	movs	r3, #0
 80052b2:	613b      	str	r3, [r7, #16]
 80052b4:	e043      	b.n	800533e <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80052b6:	693b      	ldr	r3, [r7, #16]
 80052b8:	015a      	lsls	r2, r3, #5
 80052ba:	68fb      	ldr	r3, [r7, #12]
 80052bc:	4413      	add	r3, r2
 80052be:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80052c2:	681b      	ldr	r3, [r3, #0]
 80052c4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80052c8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80052cc:	d118      	bne.n	8005300 <USB_DevInit+0x170>
    {
      if (i == 0U)
 80052ce:	693b      	ldr	r3, [r7, #16]
 80052d0:	2b00      	cmp	r3, #0
 80052d2:	d10a      	bne.n	80052ea <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 80052d4:	693b      	ldr	r3, [r7, #16]
 80052d6:	015a      	lsls	r2, r3, #5
 80052d8:	68fb      	ldr	r3, [r7, #12]
 80052da:	4413      	add	r3, r2
 80052dc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80052e0:	461a      	mov	r2, r3
 80052e2:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80052e6:	6013      	str	r3, [r2, #0]
 80052e8:	e013      	b.n	8005312 <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 80052ea:	693b      	ldr	r3, [r7, #16]
 80052ec:	015a      	lsls	r2, r3, #5
 80052ee:	68fb      	ldr	r3, [r7, #12]
 80052f0:	4413      	add	r3, r2
 80052f2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80052f6:	461a      	mov	r2, r3
 80052f8:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80052fc:	6013      	str	r3, [r2, #0]
 80052fe:	e008      	b.n	8005312 <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8005300:	693b      	ldr	r3, [r7, #16]
 8005302:	015a      	lsls	r2, r3, #5
 8005304:	68fb      	ldr	r3, [r7, #12]
 8005306:	4413      	add	r3, r2
 8005308:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800530c:	461a      	mov	r2, r3
 800530e:	2300      	movs	r3, #0
 8005310:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8005312:	693b      	ldr	r3, [r7, #16]
 8005314:	015a      	lsls	r2, r3, #5
 8005316:	68fb      	ldr	r3, [r7, #12]
 8005318:	4413      	add	r3, r2
 800531a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800531e:	461a      	mov	r2, r3
 8005320:	2300      	movs	r3, #0
 8005322:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8005324:	693b      	ldr	r3, [r7, #16]
 8005326:	015a      	lsls	r2, r3, #5
 8005328:	68fb      	ldr	r3, [r7, #12]
 800532a:	4413      	add	r3, r2
 800532c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005330:	461a      	mov	r2, r3
 8005332:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8005336:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005338:	693b      	ldr	r3, [r7, #16]
 800533a:	3301      	adds	r3, #1
 800533c:	613b      	str	r3, [r7, #16]
 800533e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005340:	693a      	ldr	r2, [r7, #16]
 8005342:	429a      	cmp	r2, r3
 8005344:	d3b7      	bcc.n	80052b6 <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005346:	2300      	movs	r3, #0
 8005348:	613b      	str	r3, [r7, #16]
 800534a:	e043      	b.n	80053d4 <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800534c:	693b      	ldr	r3, [r7, #16]
 800534e:	015a      	lsls	r2, r3, #5
 8005350:	68fb      	ldr	r3, [r7, #12]
 8005352:	4413      	add	r3, r2
 8005354:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005358:	681b      	ldr	r3, [r3, #0]
 800535a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800535e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005362:	d118      	bne.n	8005396 <USB_DevInit+0x206>
    {
      if (i == 0U)
 8005364:	693b      	ldr	r3, [r7, #16]
 8005366:	2b00      	cmp	r3, #0
 8005368:	d10a      	bne.n	8005380 <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800536a:	693b      	ldr	r3, [r7, #16]
 800536c:	015a      	lsls	r2, r3, #5
 800536e:	68fb      	ldr	r3, [r7, #12]
 8005370:	4413      	add	r3, r2
 8005372:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005376:	461a      	mov	r2, r3
 8005378:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800537c:	6013      	str	r3, [r2, #0]
 800537e:	e013      	b.n	80053a8 <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8005380:	693b      	ldr	r3, [r7, #16]
 8005382:	015a      	lsls	r2, r3, #5
 8005384:	68fb      	ldr	r3, [r7, #12]
 8005386:	4413      	add	r3, r2
 8005388:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800538c:	461a      	mov	r2, r3
 800538e:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8005392:	6013      	str	r3, [r2, #0]
 8005394:	e008      	b.n	80053a8 <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8005396:	693b      	ldr	r3, [r7, #16]
 8005398:	015a      	lsls	r2, r3, #5
 800539a:	68fb      	ldr	r3, [r7, #12]
 800539c:	4413      	add	r3, r2
 800539e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80053a2:	461a      	mov	r2, r3
 80053a4:	2300      	movs	r3, #0
 80053a6:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 80053a8:	693b      	ldr	r3, [r7, #16]
 80053aa:	015a      	lsls	r2, r3, #5
 80053ac:	68fb      	ldr	r3, [r7, #12]
 80053ae:	4413      	add	r3, r2
 80053b0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80053b4:	461a      	mov	r2, r3
 80053b6:	2300      	movs	r3, #0
 80053b8:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 80053ba:	693b      	ldr	r3, [r7, #16]
 80053bc:	015a      	lsls	r2, r3, #5
 80053be:	68fb      	ldr	r3, [r7, #12]
 80053c0:	4413      	add	r3, r2
 80053c2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80053c6:	461a      	mov	r2, r3
 80053c8:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80053cc:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80053ce:	693b      	ldr	r3, [r7, #16]
 80053d0:	3301      	adds	r3, #1
 80053d2:	613b      	str	r3, [r7, #16]
 80053d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053d6:	693a      	ldr	r2, [r7, #16]
 80053d8:	429a      	cmp	r2, r3
 80053da:	d3b7      	bcc.n	800534c <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 80053dc:	68fb      	ldr	r3, [r7, #12]
 80053de:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80053e2:	691b      	ldr	r3, [r3, #16]
 80053e4:	68fa      	ldr	r2, [r7, #12]
 80053e6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80053ea:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80053ee:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	2200      	movs	r2, #0
 80053f4:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 80053fc:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 80053fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005400:	2b00      	cmp	r3, #0
 8005402:	d105      	bne.n	8005410 <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	699b      	ldr	r3, [r3, #24]
 8005408:	f043 0210 	orr.w	r2, r3, #16
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	699a      	ldr	r2, [r3, #24]
 8005414:	4b0f      	ldr	r3, [pc, #60]	; (8005454 <USB_DevInit+0x2c4>)
 8005416:	4313      	orrs	r3, r2
 8005418:	687a      	ldr	r2, [r7, #4]
 800541a:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800541c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800541e:	2b00      	cmp	r3, #0
 8005420:	d005      	beq.n	800542e <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	699b      	ldr	r3, [r3, #24]
 8005426:	f043 0208 	orr.w	r2, r3, #8
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800542e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005430:	2b01      	cmp	r3, #1
 8005432:	d107      	bne.n	8005444 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	699b      	ldr	r3, [r3, #24]
 8005438:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800543c:	f043 0304 	orr.w	r3, r3, #4
 8005440:	687a      	ldr	r2, [r7, #4]
 8005442:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8005444:	7dfb      	ldrb	r3, [r7, #23]
}
 8005446:	4618      	mov	r0, r3
 8005448:	3718      	adds	r7, #24
 800544a:	46bd      	mov	sp, r7
 800544c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005450:	b004      	add	sp, #16
 8005452:	4770      	bx	lr
 8005454:	803c3800 	.word	0x803c3800

08005458 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8005458:	b480      	push	{r7}
 800545a:	b085      	sub	sp, #20
 800545c:	af00      	add	r7, sp, #0
 800545e:	6078      	str	r0, [r7, #4]
 8005460:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8005462:	2300      	movs	r3, #0
 8005464:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005466:	68fb      	ldr	r3, [r7, #12]
 8005468:	3301      	adds	r3, #1
 800546a:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800546c:	68fb      	ldr	r3, [r7, #12]
 800546e:	4a13      	ldr	r2, [pc, #76]	; (80054bc <USB_FlushTxFifo+0x64>)
 8005470:	4293      	cmp	r3, r2
 8005472:	d901      	bls.n	8005478 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8005474:	2303      	movs	r3, #3
 8005476:	e01b      	b.n	80054b0 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	691b      	ldr	r3, [r3, #16]
 800547c:	2b00      	cmp	r3, #0
 800547e:	daf2      	bge.n	8005466 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8005480:	2300      	movs	r3, #0
 8005482:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8005484:	683b      	ldr	r3, [r7, #0]
 8005486:	019b      	lsls	r3, r3, #6
 8005488:	f043 0220 	orr.w	r2, r3, #32
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005490:	68fb      	ldr	r3, [r7, #12]
 8005492:	3301      	adds	r3, #1
 8005494:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005496:	68fb      	ldr	r3, [r7, #12]
 8005498:	4a08      	ldr	r2, [pc, #32]	; (80054bc <USB_FlushTxFifo+0x64>)
 800549a:	4293      	cmp	r3, r2
 800549c:	d901      	bls.n	80054a2 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800549e:	2303      	movs	r3, #3
 80054a0:	e006      	b.n	80054b0 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	691b      	ldr	r3, [r3, #16]
 80054a6:	f003 0320 	and.w	r3, r3, #32
 80054aa:	2b20      	cmp	r3, #32
 80054ac:	d0f0      	beq.n	8005490 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 80054ae:	2300      	movs	r3, #0
}
 80054b0:	4618      	mov	r0, r3
 80054b2:	3714      	adds	r7, #20
 80054b4:	46bd      	mov	sp, r7
 80054b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054ba:	4770      	bx	lr
 80054bc:	00030d40 	.word	0x00030d40

080054c0 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80054c0:	b480      	push	{r7}
 80054c2:	b085      	sub	sp, #20
 80054c4:	af00      	add	r7, sp, #0
 80054c6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80054c8:	2300      	movs	r3, #0
 80054ca:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80054cc:	68fb      	ldr	r3, [r7, #12]
 80054ce:	3301      	adds	r3, #1
 80054d0:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80054d2:	68fb      	ldr	r3, [r7, #12]
 80054d4:	4a11      	ldr	r2, [pc, #68]	; (800551c <USB_FlushRxFifo+0x5c>)
 80054d6:	4293      	cmp	r3, r2
 80054d8:	d901      	bls.n	80054de <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 80054da:	2303      	movs	r3, #3
 80054dc:	e018      	b.n	8005510 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	691b      	ldr	r3, [r3, #16]
 80054e2:	2b00      	cmp	r3, #0
 80054e4:	daf2      	bge.n	80054cc <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 80054e6:	2300      	movs	r3, #0
 80054e8:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	2210      	movs	r2, #16
 80054ee:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80054f0:	68fb      	ldr	r3, [r7, #12]
 80054f2:	3301      	adds	r3, #1
 80054f4:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80054f6:	68fb      	ldr	r3, [r7, #12]
 80054f8:	4a08      	ldr	r2, [pc, #32]	; (800551c <USB_FlushRxFifo+0x5c>)
 80054fa:	4293      	cmp	r3, r2
 80054fc:	d901      	bls.n	8005502 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 80054fe:	2303      	movs	r3, #3
 8005500:	e006      	b.n	8005510 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	691b      	ldr	r3, [r3, #16]
 8005506:	f003 0310 	and.w	r3, r3, #16
 800550a:	2b10      	cmp	r3, #16
 800550c:	d0f0      	beq.n	80054f0 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800550e:	2300      	movs	r3, #0
}
 8005510:	4618      	mov	r0, r3
 8005512:	3714      	adds	r7, #20
 8005514:	46bd      	mov	sp, r7
 8005516:	f85d 7b04 	ldr.w	r7, [sp], #4
 800551a:	4770      	bx	lr
 800551c:	00030d40 	.word	0x00030d40

08005520 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8005520:	b480      	push	{r7}
 8005522:	b085      	sub	sp, #20
 8005524:	af00      	add	r7, sp, #0
 8005526:	6078      	str	r0, [r7, #4]
 8005528:	460b      	mov	r3, r1
 800552a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8005530:	68fb      	ldr	r3, [r7, #12]
 8005532:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005536:	681a      	ldr	r2, [r3, #0]
 8005538:	78fb      	ldrb	r3, [r7, #3]
 800553a:	68f9      	ldr	r1, [r7, #12]
 800553c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005540:	4313      	orrs	r3, r2
 8005542:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8005544:	2300      	movs	r3, #0
}
 8005546:	4618      	mov	r0, r3
 8005548:	3714      	adds	r7, #20
 800554a:	46bd      	mov	sp, r7
 800554c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005550:	4770      	bx	lr

08005552 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8005552:	b480      	push	{r7}
 8005554:	b085      	sub	sp, #20
 8005556:	af00      	add	r7, sp, #0
 8005558:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800555e:	68fb      	ldr	r3, [r7, #12]
 8005560:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8005564:	681b      	ldr	r3, [r3, #0]
 8005566:	68fa      	ldr	r2, [r7, #12]
 8005568:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800556c:	f023 0303 	bic.w	r3, r3, #3
 8005570:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8005572:	68fb      	ldr	r3, [r7, #12]
 8005574:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005578:	685b      	ldr	r3, [r3, #4]
 800557a:	68fa      	ldr	r2, [r7, #12]
 800557c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005580:	f043 0302 	orr.w	r3, r3, #2
 8005584:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8005586:	2300      	movs	r3, #0
}
 8005588:	4618      	mov	r0, r3
 800558a:	3714      	adds	r7, #20
 800558c:	46bd      	mov	sp, r7
 800558e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005592:	4770      	bx	lr

08005594 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8005594:	b480      	push	{r7}
 8005596:	b083      	sub	sp, #12
 8005598:	af00      	add	r7, sp, #0
 800559a:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	695b      	ldr	r3, [r3, #20]
 80055a0:	f003 0301 	and.w	r3, r3, #1
}
 80055a4:	4618      	mov	r0, r3
 80055a6:	370c      	adds	r7, #12
 80055a8:	46bd      	mov	sp, r7
 80055aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055ae:	4770      	bx	lr

080055b0 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80055b0:	b480      	push	{r7}
 80055b2:	b085      	sub	sp, #20
 80055b4:	af00      	add	r7, sp, #0
 80055b6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80055b8:	2300      	movs	r3, #0
 80055ba:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80055bc:	68fb      	ldr	r3, [r7, #12]
 80055be:	3301      	adds	r3, #1
 80055c0:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80055c2:	68fb      	ldr	r3, [r7, #12]
 80055c4:	4a13      	ldr	r2, [pc, #76]	; (8005614 <USB_CoreReset+0x64>)
 80055c6:	4293      	cmp	r3, r2
 80055c8:	d901      	bls.n	80055ce <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 80055ca:	2303      	movs	r3, #3
 80055cc:	e01b      	b.n	8005606 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	691b      	ldr	r3, [r3, #16]
 80055d2:	2b00      	cmp	r3, #0
 80055d4:	daf2      	bge.n	80055bc <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 80055d6:	2300      	movs	r3, #0
 80055d8:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	691b      	ldr	r3, [r3, #16]
 80055de:	f043 0201 	orr.w	r2, r3, #1
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80055e6:	68fb      	ldr	r3, [r7, #12]
 80055e8:	3301      	adds	r3, #1
 80055ea:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80055ec:	68fb      	ldr	r3, [r7, #12]
 80055ee:	4a09      	ldr	r2, [pc, #36]	; (8005614 <USB_CoreReset+0x64>)
 80055f0:	4293      	cmp	r3, r2
 80055f2:	d901      	bls.n	80055f8 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 80055f4:	2303      	movs	r3, #3
 80055f6:	e006      	b.n	8005606 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	691b      	ldr	r3, [r3, #16]
 80055fc:	f003 0301 	and.w	r3, r3, #1
 8005600:	2b01      	cmp	r3, #1
 8005602:	d0f0      	beq.n	80055e6 <USB_CoreReset+0x36>

  return HAL_OK;
 8005604:	2300      	movs	r3, #0
}
 8005606:	4618      	mov	r0, r3
 8005608:	3714      	adds	r7, #20
 800560a:	46bd      	mov	sp, r7
 800560c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005610:	4770      	bx	lr
 8005612:	bf00      	nop
 8005614:	00030d40 	.word	0x00030d40

08005618 <__errno>:
 8005618:	4b01      	ldr	r3, [pc, #4]	; (8005620 <__errno+0x8>)
 800561a:	6818      	ldr	r0, [r3, #0]
 800561c:	4770      	bx	lr
 800561e:	bf00      	nop
 8005620:	2000000c 	.word	0x2000000c

08005624 <__libc_init_array>:
 8005624:	b570      	push	{r4, r5, r6, lr}
 8005626:	4d0d      	ldr	r5, [pc, #52]	; (800565c <__libc_init_array+0x38>)
 8005628:	4c0d      	ldr	r4, [pc, #52]	; (8005660 <__libc_init_array+0x3c>)
 800562a:	1b64      	subs	r4, r4, r5
 800562c:	10a4      	asrs	r4, r4, #2
 800562e:	2600      	movs	r6, #0
 8005630:	42a6      	cmp	r6, r4
 8005632:	d109      	bne.n	8005648 <__libc_init_array+0x24>
 8005634:	4d0b      	ldr	r5, [pc, #44]	; (8005664 <__libc_init_array+0x40>)
 8005636:	4c0c      	ldr	r4, [pc, #48]	; (8005668 <__libc_init_array+0x44>)
 8005638:	f000 f9c0 	bl	80059bc <_init>
 800563c:	1b64      	subs	r4, r4, r5
 800563e:	10a4      	asrs	r4, r4, #2
 8005640:	2600      	movs	r6, #0
 8005642:	42a6      	cmp	r6, r4
 8005644:	d105      	bne.n	8005652 <__libc_init_array+0x2e>
 8005646:	bd70      	pop	{r4, r5, r6, pc}
 8005648:	f855 3b04 	ldr.w	r3, [r5], #4
 800564c:	4798      	blx	r3
 800564e:	3601      	adds	r6, #1
 8005650:	e7ee      	b.n	8005630 <__libc_init_array+0xc>
 8005652:	f855 3b04 	ldr.w	r3, [r5], #4
 8005656:	4798      	blx	r3
 8005658:	3601      	adds	r6, #1
 800565a:	e7f2      	b.n	8005642 <__libc_init_array+0x1e>
 800565c:	08005b6c 	.word	0x08005b6c
 8005660:	08005b6c 	.word	0x08005b6c
 8005664:	08005b6c 	.word	0x08005b6c
 8005668:	08005b70 	.word	0x08005b70

0800566c <memset>:
 800566c:	4402      	add	r2, r0
 800566e:	4603      	mov	r3, r0
 8005670:	4293      	cmp	r3, r2
 8005672:	d100      	bne.n	8005676 <memset+0xa>
 8005674:	4770      	bx	lr
 8005676:	f803 1b01 	strb.w	r1, [r3], #1
 800567a:	e7f9      	b.n	8005670 <memset+0x4>

0800567c <strcat>:
 800567c:	b510      	push	{r4, lr}
 800567e:	4602      	mov	r2, r0
 8005680:	7814      	ldrb	r4, [r2, #0]
 8005682:	4613      	mov	r3, r2
 8005684:	3201      	adds	r2, #1
 8005686:	2c00      	cmp	r4, #0
 8005688:	d1fa      	bne.n	8005680 <strcat+0x4>
 800568a:	3b01      	subs	r3, #1
 800568c:	f811 2b01 	ldrb.w	r2, [r1], #1
 8005690:	f803 2f01 	strb.w	r2, [r3, #1]!
 8005694:	2a00      	cmp	r2, #0
 8005696:	d1f9      	bne.n	800568c <strcat+0x10>
 8005698:	bd10      	pop	{r4, pc}

0800569a <strchr>:
 800569a:	b2c9      	uxtb	r1, r1
 800569c:	4603      	mov	r3, r0
 800569e:	f810 2b01 	ldrb.w	r2, [r0], #1
 80056a2:	b11a      	cbz	r2, 80056ac <strchr+0x12>
 80056a4:	428a      	cmp	r2, r1
 80056a6:	d1f9      	bne.n	800569c <strchr+0x2>
 80056a8:	4618      	mov	r0, r3
 80056aa:	4770      	bx	lr
 80056ac:	2900      	cmp	r1, #0
 80056ae:	bf18      	it	ne
 80056b0:	2300      	movne	r3, #0
 80056b2:	e7f9      	b.n	80056a8 <strchr+0xe>

080056b4 <strcpy>:
 80056b4:	4603      	mov	r3, r0
 80056b6:	f811 2b01 	ldrb.w	r2, [r1], #1
 80056ba:	f803 2b01 	strb.w	r2, [r3], #1
 80056be:	2a00      	cmp	r2, #0
 80056c0:	d1f9      	bne.n	80056b6 <strcpy+0x2>
 80056c2:	4770      	bx	lr

080056c4 <strdup>:
 80056c4:	4b02      	ldr	r3, [pc, #8]	; (80056d0 <strdup+0xc>)
 80056c6:	4601      	mov	r1, r0
 80056c8:	6818      	ldr	r0, [r3, #0]
 80056ca:	f000 b803 	b.w	80056d4 <_strdup_r>
 80056ce:	bf00      	nop
 80056d0:	2000000c 	.word	0x2000000c

080056d4 <_strdup_r>:
 80056d4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80056d6:	4604      	mov	r4, r0
 80056d8:	4608      	mov	r0, r1
 80056da:	460d      	mov	r5, r1
 80056dc:	f7fa fd86 	bl	80001ec <strlen>
 80056e0:	1c42      	adds	r2, r0, #1
 80056e2:	4611      	mov	r1, r2
 80056e4:	4620      	mov	r0, r4
 80056e6:	9201      	str	r2, [sp, #4]
 80056e8:	f000 f8d6 	bl	8005898 <_malloc_r>
 80056ec:	4604      	mov	r4, r0
 80056ee:	b118      	cbz	r0, 80056f8 <_strdup_r+0x24>
 80056f0:	9a01      	ldr	r2, [sp, #4]
 80056f2:	4629      	mov	r1, r5
 80056f4:	f000 f8a2 	bl	800583c <memcpy>
 80056f8:	4620      	mov	r0, r4
 80056fa:	b003      	add	sp, #12
 80056fc:	bd30      	pop	{r4, r5, pc}

080056fe <strncpy>:
 80056fe:	b510      	push	{r4, lr}
 8005700:	3901      	subs	r1, #1
 8005702:	4603      	mov	r3, r0
 8005704:	b132      	cbz	r2, 8005714 <strncpy+0x16>
 8005706:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 800570a:	f803 4b01 	strb.w	r4, [r3], #1
 800570e:	3a01      	subs	r2, #1
 8005710:	2c00      	cmp	r4, #0
 8005712:	d1f7      	bne.n	8005704 <strncpy+0x6>
 8005714:	441a      	add	r2, r3
 8005716:	2100      	movs	r1, #0
 8005718:	4293      	cmp	r3, r2
 800571a:	d100      	bne.n	800571e <strncpy+0x20>
 800571c:	bd10      	pop	{r4, pc}
 800571e:	f803 1b01 	strb.w	r1, [r3], #1
 8005722:	e7f9      	b.n	8005718 <strncpy+0x1a>

08005724 <_strtol_l.constprop.0>:
 8005724:	2b01      	cmp	r3, #1
 8005726:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800572a:	d001      	beq.n	8005730 <_strtol_l.constprop.0+0xc>
 800572c:	2b24      	cmp	r3, #36	; 0x24
 800572e:	d906      	bls.n	800573e <_strtol_l.constprop.0+0x1a>
 8005730:	f7ff ff72 	bl	8005618 <__errno>
 8005734:	2316      	movs	r3, #22
 8005736:	6003      	str	r3, [r0, #0]
 8005738:	2000      	movs	r0, #0
 800573a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800573e:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 8005824 <_strtol_l.constprop.0+0x100>
 8005742:	460d      	mov	r5, r1
 8005744:	462e      	mov	r6, r5
 8005746:	f815 4b01 	ldrb.w	r4, [r5], #1
 800574a:	f814 700c 	ldrb.w	r7, [r4, ip]
 800574e:	f017 0708 	ands.w	r7, r7, #8
 8005752:	d1f7      	bne.n	8005744 <_strtol_l.constprop.0+0x20>
 8005754:	2c2d      	cmp	r4, #45	; 0x2d
 8005756:	d132      	bne.n	80057be <_strtol_l.constprop.0+0x9a>
 8005758:	782c      	ldrb	r4, [r5, #0]
 800575a:	2701      	movs	r7, #1
 800575c:	1cb5      	adds	r5, r6, #2
 800575e:	2b00      	cmp	r3, #0
 8005760:	d05b      	beq.n	800581a <_strtol_l.constprop.0+0xf6>
 8005762:	2b10      	cmp	r3, #16
 8005764:	d109      	bne.n	800577a <_strtol_l.constprop.0+0x56>
 8005766:	2c30      	cmp	r4, #48	; 0x30
 8005768:	d107      	bne.n	800577a <_strtol_l.constprop.0+0x56>
 800576a:	782c      	ldrb	r4, [r5, #0]
 800576c:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8005770:	2c58      	cmp	r4, #88	; 0x58
 8005772:	d14d      	bne.n	8005810 <_strtol_l.constprop.0+0xec>
 8005774:	786c      	ldrb	r4, [r5, #1]
 8005776:	2310      	movs	r3, #16
 8005778:	3502      	adds	r5, #2
 800577a:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 800577e:	f108 38ff 	add.w	r8, r8, #4294967295
 8005782:	f04f 0c00 	mov.w	ip, #0
 8005786:	fbb8 f9f3 	udiv	r9, r8, r3
 800578a:	4666      	mov	r6, ip
 800578c:	fb03 8a19 	mls	sl, r3, r9, r8
 8005790:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 8005794:	f1be 0f09 	cmp.w	lr, #9
 8005798:	d816      	bhi.n	80057c8 <_strtol_l.constprop.0+0xa4>
 800579a:	4674      	mov	r4, lr
 800579c:	42a3      	cmp	r3, r4
 800579e:	dd24      	ble.n	80057ea <_strtol_l.constprop.0+0xc6>
 80057a0:	f1bc 0f00 	cmp.w	ip, #0
 80057a4:	db1e      	blt.n	80057e4 <_strtol_l.constprop.0+0xc0>
 80057a6:	45b1      	cmp	r9, r6
 80057a8:	d31c      	bcc.n	80057e4 <_strtol_l.constprop.0+0xc0>
 80057aa:	d101      	bne.n	80057b0 <_strtol_l.constprop.0+0x8c>
 80057ac:	45a2      	cmp	sl, r4
 80057ae:	db19      	blt.n	80057e4 <_strtol_l.constprop.0+0xc0>
 80057b0:	fb06 4603 	mla	r6, r6, r3, r4
 80057b4:	f04f 0c01 	mov.w	ip, #1
 80057b8:	f815 4b01 	ldrb.w	r4, [r5], #1
 80057bc:	e7e8      	b.n	8005790 <_strtol_l.constprop.0+0x6c>
 80057be:	2c2b      	cmp	r4, #43	; 0x2b
 80057c0:	bf04      	itt	eq
 80057c2:	782c      	ldrbeq	r4, [r5, #0]
 80057c4:	1cb5      	addeq	r5, r6, #2
 80057c6:	e7ca      	b.n	800575e <_strtol_l.constprop.0+0x3a>
 80057c8:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 80057cc:	f1be 0f19 	cmp.w	lr, #25
 80057d0:	d801      	bhi.n	80057d6 <_strtol_l.constprop.0+0xb2>
 80057d2:	3c37      	subs	r4, #55	; 0x37
 80057d4:	e7e2      	b.n	800579c <_strtol_l.constprop.0+0x78>
 80057d6:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 80057da:	f1be 0f19 	cmp.w	lr, #25
 80057de:	d804      	bhi.n	80057ea <_strtol_l.constprop.0+0xc6>
 80057e0:	3c57      	subs	r4, #87	; 0x57
 80057e2:	e7db      	b.n	800579c <_strtol_l.constprop.0+0x78>
 80057e4:	f04f 3cff 	mov.w	ip, #4294967295
 80057e8:	e7e6      	b.n	80057b8 <_strtol_l.constprop.0+0x94>
 80057ea:	f1bc 0f00 	cmp.w	ip, #0
 80057ee:	da05      	bge.n	80057fc <_strtol_l.constprop.0+0xd8>
 80057f0:	2322      	movs	r3, #34	; 0x22
 80057f2:	6003      	str	r3, [r0, #0]
 80057f4:	4646      	mov	r6, r8
 80057f6:	b942      	cbnz	r2, 800580a <_strtol_l.constprop.0+0xe6>
 80057f8:	4630      	mov	r0, r6
 80057fa:	e79e      	b.n	800573a <_strtol_l.constprop.0+0x16>
 80057fc:	b107      	cbz	r7, 8005800 <_strtol_l.constprop.0+0xdc>
 80057fe:	4276      	negs	r6, r6
 8005800:	2a00      	cmp	r2, #0
 8005802:	d0f9      	beq.n	80057f8 <_strtol_l.constprop.0+0xd4>
 8005804:	f1bc 0f00 	cmp.w	ip, #0
 8005808:	d000      	beq.n	800580c <_strtol_l.constprop.0+0xe8>
 800580a:	1e69      	subs	r1, r5, #1
 800580c:	6011      	str	r1, [r2, #0]
 800580e:	e7f3      	b.n	80057f8 <_strtol_l.constprop.0+0xd4>
 8005810:	2430      	movs	r4, #48	; 0x30
 8005812:	2b00      	cmp	r3, #0
 8005814:	d1b1      	bne.n	800577a <_strtol_l.constprop.0+0x56>
 8005816:	2308      	movs	r3, #8
 8005818:	e7af      	b.n	800577a <_strtol_l.constprop.0+0x56>
 800581a:	2c30      	cmp	r4, #48	; 0x30
 800581c:	d0a5      	beq.n	800576a <_strtol_l.constprop.0+0x46>
 800581e:	230a      	movs	r3, #10
 8005820:	e7ab      	b.n	800577a <_strtol_l.constprop.0+0x56>
 8005822:	bf00      	nop
 8005824:	08005a61 	.word	0x08005a61

08005828 <strtol>:
 8005828:	4613      	mov	r3, r2
 800582a:	460a      	mov	r2, r1
 800582c:	4601      	mov	r1, r0
 800582e:	4802      	ldr	r0, [pc, #8]	; (8005838 <strtol+0x10>)
 8005830:	6800      	ldr	r0, [r0, #0]
 8005832:	f7ff bf77 	b.w	8005724 <_strtol_l.constprop.0>
 8005836:	bf00      	nop
 8005838:	2000000c 	.word	0x2000000c

0800583c <memcpy>:
 800583c:	440a      	add	r2, r1
 800583e:	4291      	cmp	r1, r2
 8005840:	f100 33ff 	add.w	r3, r0, #4294967295
 8005844:	d100      	bne.n	8005848 <memcpy+0xc>
 8005846:	4770      	bx	lr
 8005848:	b510      	push	{r4, lr}
 800584a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800584e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005852:	4291      	cmp	r1, r2
 8005854:	d1f9      	bne.n	800584a <memcpy+0xe>
 8005856:	bd10      	pop	{r4, pc}

08005858 <sbrk_aligned>:
 8005858:	b570      	push	{r4, r5, r6, lr}
 800585a:	4e0e      	ldr	r6, [pc, #56]	; (8005894 <sbrk_aligned+0x3c>)
 800585c:	460c      	mov	r4, r1
 800585e:	6831      	ldr	r1, [r6, #0]
 8005860:	4605      	mov	r5, r0
 8005862:	b911      	cbnz	r1, 800586a <sbrk_aligned+0x12>
 8005864:	f000 f88c 	bl	8005980 <_sbrk_r>
 8005868:	6030      	str	r0, [r6, #0]
 800586a:	4621      	mov	r1, r4
 800586c:	4628      	mov	r0, r5
 800586e:	f000 f887 	bl	8005980 <_sbrk_r>
 8005872:	1c43      	adds	r3, r0, #1
 8005874:	d00a      	beq.n	800588c <sbrk_aligned+0x34>
 8005876:	1cc4      	adds	r4, r0, #3
 8005878:	f024 0403 	bic.w	r4, r4, #3
 800587c:	42a0      	cmp	r0, r4
 800587e:	d007      	beq.n	8005890 <sbrk_aligned+0x38>
 8005880:	1a21      	subs	r1, r4, r0
 8005882:	4628      	mov	r0, r5
 8005884:	f000 f87c 	bl	8005980 <_sbrk_r>
 8005888:	3001      	adds	r0, #1
 800588a:	d101      	bne.n	8005890 <sbrk_aligned+0x38>
 800588c:	f04f 34ff 	mov.w	r4, #4294967295
 8005890:	4620      	mov	r0, r4
 8005892:	bd70      	pop	{r4, r5, r6, pc}
 8005894:	200008d8 	.word	0x200008d8

08005898 <_malloc_r>:
 8005898:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800589c:	1ccd      	adds	r5, r1, #3
 800589e:	f025 0503 	bic.w	r5, r5, #3
 80058a2:	3508      	adds	r5, #8
 80058a4:	2d0c      	cmp	r5, #12
 80058a6:	bf38      	it	cc
 80058a8:	250c      	movcc	r5, #12
 80058aa:	2d00      	cmp	r5, #0
 80058ac:	4607      	mov	r7, r0
 80058ae:	db01      	blt.n	80058b4 <_malloc_r+0x1c>
 80058b0:	42a9      	cmp	r1, r5
 80058b2:	d905      	bls.n	80058c0 <_malloc_r+0x28>
 80058b4:	230c      	movs	r3, #12
 80058b6:	603b      	str	r3, [r7, #0]
 80058b8:	2600      	movs	r6, #0
 80058ba:	4630      	mov	r0, r6
 80058bc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80058c0:	4e2e      	ldr	r6, [pc, #184]	; (800597c <_malloc_r+0xe4>)
 80058c2:	f000 f86d 	bl	80059a0 <__malloc_lock>
 80058c6:	6833      	ldr	r3, [r6, #0]
 80058c8:	461c      	mov	r4, r3
 80058ca:	bb34      	cbnz	r4, 800591a <_malloc_r+0x82>
 80058cc:	4629      	mov	r1, r5
 80058ce:	4638      	mov	r0, r7
 80058d0:	f7ff ffc2 	bl	8005858 <sbrk_aligned>
 80058d4:	1c43      	adds	r3, r0, #1
 80058d6:	4604      	mov	r4, r0
 80058d8:	d14d      	bne.n	8005976 <_malloc_r+0xde>
 80058da:	6834      	ldr	r4, [r6, #0]
 80058dc:	4626      	mov	r6, r4
 80058de:	2e00      	cmp	r6, #0
 80058e0:	d140      	bne.n	8005964 <_malloc_r+0xcc>
 80058e2:	6823      	ldr	r3, [r4, #0]
 80058e4:	4631      	mov	r1, r6
 80058e6:	4638      	mov	r0, r7
 80058e8:	eb04 0803 	add.w	r8, r4, r3
 80058ec:	f000 f848 	bl	8005980 <_sbrk_r>
 80058f0:	4580      	cmp	r8, r0
 80058f2:	d13a      	bne.n	800596a <_malloc_r+0xd2>
 80058f4:	6821      	ldr	r1, [r4, #0]
 80058f6:	3503      	adds	r5, #3
 80058f8:	1a6d      	subs	r5, r5, r1
 80058fa:	f025 0503 	bic.w	r5, r5, #3
 80058fe:	3508      	adds	r5, #8
 8005900:	2d0c      	cmp	r5, #12
 8005902:	bf38      	it	cc
 8005904:	250c      	movcc	r5, #12
 8005906:	4629      	mov	r1, r5
 8005908:	4638      	mov	r0, r7
 800590a:	f7ff ffa5 	bl	8005858 <sbrk_aligned>
 800590e:	3001      	adds	r0, #1
 8005910:	d02b      	beq.n	800596a <_malloc_r+0xd2>
 8005912:	6823      	ldr	r3, [r4, #0]
 8005914:	442b      	add	r3, r5
 8005916:	6023      	str	r3, [r4, #0]
 8005918:	e00e      	b.n	8005938 <_malloc_r+0xa0>
 800591a:	6822      	ldr	r2, [r4, #0]
 800591c:	1b52      	subs	r2, r2, r5
 800591e:	d41e      	bmi.n	800595e <_malloc_r+0xc6>
 8005920:	2a0b      	cmp	r2, #11
 8005922:	d916      	bls.n	8005952 <_malloc_r+0xba>
 8005924:	1961      	adds	r1, r4, r5
 8005926:	42a3      	cmp	r3, r4
 8005928:	6025      	str	r5, [r4, #0]
 800592a:	bf18      	it	ne
 800592c:	6059      	strne	r1, [r3, #4]
 800592e:	6863      	ldr	r3, [r4, #4]
 8005930:	bf08      	it	eq
 8005932:	6031      	streq	r1, [r6, #0]
 8005934:	5162      	str	r2, [r4, r5]
 8005936:	604b      	str	r3, [r1, #4]
 8005938:	4638      	mov	r0, r7
 800593a:	f104 060b 	add.w	r6, r4, #11
 800593e:	f000 f835 	bl	80059ac <__malloc_unlock>
 8005942:	f026 0607 	bic.w	r6, r6, #7
 8005946:	1d23      	adds	r3, r4, #4
 8005948:	1af2      	subs	r2, r6, r3
 800594a:	d0b6      	beq.n	80058ba <_malloc_r+0x22>
 800594c:	1b9b      	subs	r3, r3, r6
 800594e:	50a3      	str	r3, [r4, r2]
 8005950:	e7b3      	b.n	80058ba <_malloc_r+0x22>
 8005952:	6862      	ldr	r2, [r4, #4]
 8005954:	42a3      	cmp	r3, r4
 8005956:	bf0c      	ite	eq
 8005958:	6032      	streq	r2, [r6, #0]
 800595a:	605a      	strne	r2, [r3, #4]
 800595c:	e7ec      	b.n	8005938 <_malloc_r+0xa0>
 800595e:	4623      	mov	r3, r4
 8005960:	6864      	ldr	r4, [r4, #4]
 8005962:	e7b2      	b.n	80058ca <_malloc_r+0x32>
 8005964:	4634      	mov	r4, r6
 8005966:	6876      	ldr	r6, [r6, #4]
 8005968:	e7b9      	b.n	80058de <_malloc_r+0x46>
 800596a:	230c      	movs	r3, #12
 800596c:	603b      	str	r3, [r7, #0]
 800596e:	4638      	mov	r0, r7
 8005970:	f000 f81c 	bl	80059ac <__malloc_unlock>
 8005974:	e7a1      	b.n	80058ba <_malloc_r+0x22>
 8005976:	6025      	str	r5, [r4, #0]
 8005978:	e7de      	b.n	8005938 <_malloc_r+0xa0>
 800597a:	bf00      	nop
 800597c:	200008d4 	.word	0x200008d4

08005980 <_sbrk_r>:
 8005980:	b538      	push	{r3, r4, r5, lr}
 8005982:	4d06      	ldr	r5, [pc, #24]	; (800599c <_sbrk_r+0x1c>)
 8005984:	2300      	movs	r3, #0
 8005986:	4604      	mov	r4, r0
 8005988:	4608      	mov	r0, r1
 800598a:	602b      	str	r3, [r5, #0]
 800598c:	f7fb fc42 	bl	8001214 <_sbrk>
 8005990:	1c43      	adds	r3, r0, #1
 8005992:	d102      	bne.n	800599a <_sbrk_r+0x1a>
 8005994:	682b      	ldr	r3, [r5, #0]
 8005996:	b103      	cbz	r3, 800599a <_sbrk_r+0x1a>
 8005998:	6023      	str	r3, [r4, #0]
 800599a:	bd38      	pop	{r3, r4, r5, pc}
 800599c:	200008dc 	.word	0x200008dc

080059a0 <__malloc_lock>:
 80059a0:	4801      	ldr	r0, [pc, #4]	; (80059a8 <__malloc_lock+0x8>)
 80059a2:	f000 b809 	b.w	80059b8 <__retarget_lock_acquire_recursive>
 80059a6:	bf00      	nop
 80059a8:	200008e0 	.word	0x200008e0

080059ac <__malloc_unlock>:
 80059ac:	4801      	ldr	r0, [pc, #4]	; (80059b4 <__malloc_unlock+0x8>)
 80059ae:	f000 b804 	b.w	80059ba <__retarget_lock_release_recursive>
 80059b2:	bf00      	nop
 80059b4:	200008e0 	.word	0x200008e0

080059b8 <__retarget_lock_acquire_recursive>:
 80059b8:	4770      	bx	lr

080059ba <__retarget_lock_release_recursive>:
 80059ba:	4770      	bx	lr

080059bc <_init>:
 80059bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80059be:	bf00      	nop
 80059c0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80059c2:	bc08      	pop	{r3}
 80059c4:	469e      	mov	lr, r3
 80059c6:	4770      	bx	lr

080059c8 <_fini>:
 80059c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80059ca:	bf00      	nop
 80059cc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80059ce:	bc08      	pop	{r3}
 80059d0:	469e      	mov	lr, r3
 80059d2:	4770      	bx	lr
